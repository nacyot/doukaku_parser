
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
いちばん長いしりとり
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100712021426cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100712021426cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100712021426cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20100712021426/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100712021426/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100712021426js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100712021426js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100712021426js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100712021426js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app14.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/277\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "12";
var displayMonth = "Jul";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/277/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100712021426" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100506120854/http://ja.doukaku.org/277/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="6 May 2010"><strong>MAY</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 2:14:26 Jul 12, 2010">JUL</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Aug
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20100506120854/http://ja.doukaku.org/277/flatten/" title="12:08:54 May 6, 2010" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 2:14:26 Jul 12, 2010">12</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 2:14:26 Jul 12, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100712021426*/http://ja.doukaku.org/277/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">6 May 10 - 12 Jul 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000000000_2010:6:000010100000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100712021426/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100712021426/http://ja.doukaku.org/277/">いちばん長いしりとり</a>
</h2>

    





<div class="comment" id="comment9391">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/573/" target="_top">greentea</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9391/">#9391</a>(<script language="JavaScript">print_time(new Date("2009/07/18 15:02 GMT"));</script><noscript>2009/07/18 15:02 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #afff8f;">5/7=0.71</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  単語のリストを読み込んで、そのリストにある単語で「しりとり」をします。<br/>一番長くしりとりを続けるためのプログラムを書いてください。<br/>また、単語数に対して、計算量がどのように増えていくかも考えて下さい。<br/><br/>なお、単語リストの一例として<br/>http://www.ais.riec.tohoku.ac.jp/lab/wordlist/index-j.htmlで公開されている<br/>http://www.ais.riec.tohoku.ac.jp/lab/wordlist/fam55_40.txtがあります。<br/><br/>ただし、<br/>・一度使った単語は使わないこと(リストに重複がある可能性は考えなくてよい)<br/>・「ん」で終わる単語を使用するか、リスト内にしりとりを続けられる単語がなくなったときに、しりとりは終了する<br/>・一番最初は、好きな単語から初めてもよい<br/>・「一番長くしりとりを続ける」とは、しりとりが終了するまでに使用する単語数が最大になるよう、しりとりの単語を選ぶことをいう
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100712021426/http://www.ais.riec.tohoku.ac.jp/lab/wordlist/index-j.html">難聴者のための単語了解度試験用単語リスト</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9391/addtag/" class="addtag" id="addtag_9391">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #afff8f;"
  >5/7=0.71</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9391"
  >-</span><span
  class="button yellow"
  id="rating_z_9391"
  >0</span><span 
  class="button green"
  id="rating_p_9391"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9391/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100712021426/http://ja.doukaku.org/277/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20100712021426/http://ja.doukaku.org/277/nested/">ネスト表示</a>
<a href="/web/20100712021426/http://ja.doukaku.org/277/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment9407">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/242/" target="_top">lufia</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9407/">#9407</a>(<script language="JavaScript">print_time(new Date("2009/07/22 21:03 GMT"));</script><noscript>2009/07/22 21:03 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>非常に単純な実装。
およそO(N!)のため、Nは100前後が限界です。</p>
<pre class="literal-block">
% longtail &lt;longtail.data
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre>implement Longtail;

include &quot;sys.m&quot;;
    sys: Sys;
include &quot;draw.m&quot;;
include &quot;bufio.m&quot;;
    bufio: Bufio;
    Iobuf: import bufio;
include &quot;string.m&quot;;
    str: String;

Longtail: module
{
    init: fn(ctxt: ref Draw-&gt;Context, argv: list of string);
};

Word: adt
{
    s: string;
    used: int;
};

MAXRUNE: con 16rffff;

tab := array[MAXRUNE] of list of ref Word;

init(nil: ref Draw-&gt;Context, nil: list of string)
{
    sys = load Sys Sys-&gt;PATH;
    bufio = load Bufio Bufio-&gt;PATH;
    str = load String String-&gt;PATH;

    install(sys-&gt;fildes(0));

    wstart := ref Word(&quot;シリトリ&quot;, 0);
    result := chain(wstart);
    for(p := result; p != nil; p = tl p)
        sys-&gt;print(&quot;%s\n-&gt; &quot;, (hd p).s);
    sys-&gt;print(&quot;END\n&quot;);
}

install(fd: ref Sys-&gt;FD)
{
    fin := bufio-&gt;fopen(fd, bufio-&gt;OREAD);
    while((t := fin.gett(&quot; \t\n&quot;)) != nil){
        (t, nil) = str-&gt;splitl(t, &quot; \t\n&quot;);
        if(t == &quot;&quot;)
            continue;
        tab[t[0]] = ref Word(t, 0) :: tab[t[0]];
    }
}

chain(w: ref Word): list of ref Word
{
    longest: list of ref Word;

    w.used = 1;
    lastc := w.s[len w.s - 1];
    for(p := tab[lastc]; p != nil; p = tl p){
        w1 := hd p;
        if(w1.used)
            continue;
        t := chain(w1);
        if(len t &gt; len longest)
            longest = t;
    }
    w.used = 0;
    return w :: longest;
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9407/addtag/" class="addtag" id="addtag_9407">タグ</a>:
	
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/Limbo/">Limbo</a>
    
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9407/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9407/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9407"
  >-</span><span
  class="button yellow"
  id="rating_z_9407"
  >0</span><span 
  class="button green"
  id="rating_p_9407"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9407/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9408">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/760/" target="_top">turugina</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9408/">#9408</a>(<script language="JavaScript">print_time(new Date("2009/07/22 23:47 GMT"));</script><noscript>2009/07/22 23:47 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  とりあえず。検証もしてないのですが、お題の単語リストの先頭「アイアイ」から始めて350個繋がりました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>

<span class="k">use</span> <span class="n">Encode</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$input_enc</span> <span class="o">=</span> <span class="nb">shift</span> <span class="o">||</span> <span class="s">&#39;utf-8&#39;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$output_enc</span> <span class="o">=</span> <span class="nb">shift</span> <span class="o">||</span> <span class="s">&#39;cp932&#39;</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$words</span> <span class="o">=</span> <span class="n">readwords</span><span class="p">();</span>
<span class="k">my</span> <span class="nv">$table</span> <span class="o">=</span> <span class="n">maketable</span><span class="p">(</span><span class="nv">$words</span><span class="p">);</span>

<span class="k">my</span> <span class="nv">$total</span> <span class="o">=</span> <span class="nv">@$words</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="c1">#my $next = $words-&gt;[int rand $total];</span>
<span class="k">my</span> <span class="nv">$next</span> <span class="o">=</span> <span class="nv">$words</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="n">erase</span><span class="p">(</span><span class="nv">$next</span><span class="p">,</span> <span class="nv">$table</span><span class="p">);</span>
<span class="k">print</span> <span class="n">encode</span><span class="p">(</span><span class="nv">$output_enc</span><span class="p">,</span> <span class="s">&quot;begin from [$next]\n&quot;</span><span class="p">);</span>
<span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
  <span class="o">++</span><span class="nv">$count</span><span class="p">;</span>
  <span class="k">last</span> <span class="k">if</span> <span class="n">is_stop</span><span class="p">(</span><span class="nv">$next</span><span class="p">);</span>
  <span class="k">my</span> <span class="nv">$prev</span> <span class="o">=</span> <span class="nv">$next</span><span class="p">;</span>

  <span class="nv">$next</span> <span class="o">=</span> <span class="n">draw_next</span><span class="p">(</span><span class="nv">$prev</span><span class="p">,</span> <span class="nv">$table</span><span class="p">);</span>
  <span class="k">last</span> <span class="k">if</span> <span class="o">!</span><span class="nb">defined</span> <span class="nv">$next</span><span class="p">;</span>

  <span class="k">print</span> <span class="n">encode</span><span class="p">(</span><span class="nv">$output_enc</span><span class="p">,</span> <span class="s">&quot;next -&gt; [$next]\n&quot;</span><span class="p">);</span>
<span class="p">}</span>    
<span class="k">print</span> <span class="n">encode</span><span class="p">(</span><span class="nv">$output_enc</span><span class="p">,</span> <span class="s">&quot;END ($count/$total)\n&quot;</span><span class="p">);</span>

<span class="k">sub </span><span class="nf">readwords</span>
<span class="p">{</span>
  <span class="p">[</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">tr</span><span class="sr">/ア-ン/</span><span class="err">あ</span><span class="o">-</span><span class="err">ん</span><span class="o">/</span><span class="p">;</span> <span class="nv">$_</span> <span class="p">}</span>
    <span class="nb">map</span> <span class="p">{</span> <span class="n">decode</span><span class="p">(</span><span class="nv">$input_enc</span><span class="p">,</span> <span class="nv">$_</span><span class="p">)</span> <span class="p">}</span>
    <span class="nb">map</span> <span class="p">{</span> <span class="nb">chomp</span><span class="p">;</span> <span class="nb">split</span> <span class="sr">/\s+/</span> <span class="p">}</span> <span class="o">&lt;</span><span class="bp">STDIN</span><span class="o">&gt;</span> <span class="p">];</span>
<span class="p">}</span>    

<span class="k">sub </span><span class="nf">maketable</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">$words</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">%table</span><span class="p">;</span>
  <span class="k">for</span> <span class="k">my</span> <span class="nv">$w</span> <span class="p">(</span> <span class="nv">@$words</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$first</span> <span class="o">=</span> <span class="nb">substr</span> <span class="nv">$w</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>

    <span class="nv">$table</span><span class="p">{</span><span class="nv">$first</span><span class="p">}</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">[]</span><span class="p">]</span> <span class="k">if</span> <span class="o">!</span><span class="nb">exists</span> <span class="nv">$table</span><span class="p">{</span><span class="nv">$first</span><span class="p">};</span>

    <span class="o">++</span><span class="nv">$table</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">0</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">is_stop</span><span class="p">(</span><span class="nv">$w</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
      <span class="o">++</span><span class="nv">$table</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">1</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="nb">push</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$table</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">2</span><span class="p">]},</span> <span class="nv">$w</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="o">\</span><span class="nv">%table</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">erase</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="nv">$table</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">$first</span> <span class="o">=</span> <span class="nb">substr</span> <span class="nv">$word</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>

  <span class="o">--</span><span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">0</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">is_stop</span><span class="p">(</span><span class="nv">$word</span><span class="p">)</span> <span class="p">)</span> <span class="p">{</span>
    <span class="o">--</span><span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">1</span><span class="p">];</span>
  <span class="p">}</span>

  <span class="nv">@</span><span class="p">{</span><span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">2</span><span class="p">]}</span> <span class="o">=</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">$_</span> <span class="ow">ne</span> <span class="nv">$word</span> <span class="p">}</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$first</span><span class="p">}[</span><span class="mi">2</span><span class="p">]};</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">draw_next</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="nv">$table</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">$next</span> <span class="o">=</span> <span class="n">get_candidate</span><span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="nv">$table</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="n">erase</span><span class="p">(</span><span class="nv">$next</span><span class="p">,</span> <span class="nv">$table</span><span class="p">)</span> <span class="k">if</span> <span class="nb">defined</span> <span class="nv">$next</span><span class="p">;</span>
  <span class="nv">$next</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">is_stop</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
  <span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$word</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span> <span class="p">?</span> <span class="nb">substr</span> <span class="nv">$word</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">:</span> <span class="nv">$word</span><span class="p">)</span> <span class="ow">eq</span> <span class="s">&#39;ん&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">get_candidate</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="nv">$table</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">$last</span> <span class="o">=</span> <span class="nb">substr</span> <span class="nv">$word</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">$candidate</span> <span class="o">=</span> <span class="p">[</span><span class="nb">undef</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">];</span>
  <span class="k">for</span> <span class="k">my</span> <span class="nv">$next</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$last</span><span class="p">}[</span><span class="mi">2</span><span class="p">]}</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$next_last</span> <span class="o">=</span> <span class="nb">substr</span> <span class="nv">$next</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$point</span> <span class="o">=</span> <span class="nb">exists</span> <span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$next_last</span><span class="p">}</span>
    <span class="p">?</span> <span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$next_last</span><span class="p">}[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$table</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$next_last</span><span class="p">}[</span><span class="mi">1</span><span class="p">]</span>
    <span class="p">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nv">$point</span> <span class="o">&gt;</span> <span class="nv">$candidate</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span> <span class="p">{</span>
      <span class="nv">$candidate</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$next</span><span class="p">,</span> <span class="nv">$point</span><span class="p">];</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nv">$candidate</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9408/addtag/" class="addtag" id="addtag_9408">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9408/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9408/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9408"
  >-</span><span
  class="button yellow"
  id="rating_z_9408"
  >0</span><span 
  class="button green"
  id="rating_p_9408"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9408/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9409">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/913/" target="_top">nattou_curry</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9409/">#9409</a>(<script language="JavaScript">print_time(new Date("2009/07/23 02:48 GMT"));</script><noscript>2009/07/23 02:48 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Javaで単純に。
単純すぎるため、短時間で結果を出せるのは100単語ぐらいまでのようです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * いちばん長いしりとり</span>
<span class="c"> */</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">TheLongestSiritori</span> <span class="o">{</span>
    
    <span class="c">// 単語</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Word</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">text</span><span class="o">;</span>    <span class="c">// 単語の文字列</span>
        <span class="kt">boolean</span> <span class="n">used</span><span class="o">;</span>    <span class="c">// 使用中フラグ</span>
    <span class="o">}</span>

    <span class="c">// 頭文字をキーとする単語の索引。</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;</span> <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;();</span>
    
    <span class="c">/**</span>
<span class="c">     * メインルーチン</span>
<span class="c">     * @param args 最初の引数は単語ファイルの名前</span>
<span class="c">     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="o">{</span>
    
        <span class="c">////////////////////////////////////////////////////////////</span>
        <span class="c">// 引数から単語ファイルの名前を取得する。</span>
        <span class="c">////////////////////////////////////////////////////////////</span>
        
        <span class="c">// 引数に単語ファイルの名前が指定されていることを確認する。</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">)</span> <span class="o">{</span>
            <span class="c">// 指定されていない</span>
            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">&quot;引数に単語ファイルの名前を指定してください。&quot;</span>  <span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="c">// 引数からファイル名を取得する。</span>
        <span class="n">String</span> <span class="n">fileName</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        
        <span class="c">////////////////////////////////////////////////////////////</span>
        <span class="c">// 単語ファイルを読み込み、単語の一覧を作成する。</span>
        <span class="c">////////////////////////////////////////////////////////////</span>
        
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">wordList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;();</span>
        <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="c">// 単語ファイルを開く。</span>
            <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span> <span class="n">fileName</span> <span class="o">)</span> <span class="o">);</span>
            
            <span class="c">// 単語ファイルの行ごとに以下を繰り返す。</span>
            <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">(</span> <span class="o">(</span> <span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">()</span> <span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                <span class="c">// 行が空でないことを確認する。</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">line</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="c">// 行の内容を単語の一覧に追加する。</span>
                    <span class="n">Word</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Word</span><span class="o">();</span>
                    <span class="n">word</span><span class="o">.</span><span class="na">text</span> <span class="o">=</span> <span class="n">line</span><span class="o">;</span>
                    <span class="n">word</span><span class="o">.</span><span class="na">used</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                    <span class="n">wordList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="n">word</span> <span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span> <span class="n">IOException</span> <span class="n">e</span> <span class="o">)</span> <span class="o">{</span>
            <span class="c">// 入力エラー:</span>
            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="s">&quot;単語ファイルを正常に読み込めませんでした。ファイル名前=[&quot;</span> <span class="o">+</span> <span class="n">fileName</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span>  <span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
            
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span> <span class="n">reader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="c">// 単語ファイルを閉じる。</span>
                    <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span> <span class="n">IOException</span> <span class="n">e</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="c">/* 無視 */</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="c">////////////////////////////////////////////////////////////</span>
        <span class="c">// 頭文字をキーとした単語の索引を作成する。</span>
        <span class="c">////////////////////////////////////////////////////////////</span>
        
        <span class="n">index</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;();</span>

        <span class="c">// 単語の一覧中のすべての単語について、以下を繰り返す。</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wordList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">Word</span> <span class="n">word</span> <span class="o">=</span> <span class="n">wordList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">i</span> <span class="o">);</span>
            <span class="c">// 単語の頭文字を取得する。</span>
            <span class="n">String</span> <span class="n">first</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span> <span class="o">);</span>
            
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">container</span><span class="o">;</span>
            <span class="c">// 同一の頭文字の単語が、索引に格納済みであることを確認する。</span>
            <span class="k">if</span> <span class="o">(</span> <span class="o">!</span> <span class="n">index</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span> <span class="n">first</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
                <span class="c">// 同一の頭文字の単語が、まだ格納されていない:</span>
                
                <span class="c">// 頭文字に対応する単語格納リストを作成する。</span>
                <span class="n">container</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;();</span>
                <span class="n">index</span><span class="o">.</span><span class="na">put</span><span class="o">(</span> <span class="n">first</span><span class="o">,</span> <span class="n">container</span> <span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="c">// 頭文字に対応する単語格納リストを作成する。</span>
                <span class="n">container</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">first</span> <span class="o">);</span>
            <span class="o">}</span>

            <span class="c">// 単語格納リストに単語を追加する。</span>
            <span class="n">container</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="n">word</span> <span class="o">);</span>
        <span class="o">}</span>
        
        <span class="c">////////////////////////////////////////////////////////////</span>
        <span class="c">// しりとりをする。</span>
        <span class="c">////////////////////////////////////////////////////////////</span>
        
        <span class="c">// 最初の単語をランダムに決める。</span>
        <span class="kt">int</span> <span class="n">rnd</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span> <span class="n">wordList</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">);</span>
        <span class="n">Word</span> <span class="n">start</span> <span class="o">=</span> <span class="n">wordList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">rnd</span> <span class="o">);</span>
        
        <span class="c">// 最長のしりとり結果(逆順)を取得する。</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">longest</span> <span class="o">=</span> <span class="n">getLongest</span><span class="o">(</span> <span class="n">start</span> <span class="o">);</span>
        
        <span class="c">// しりとり結果を反転する。</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span> <span class="n">longest</span> <span class="o">);</span>
        
        <span class="c">////////////////////////////////////////////////////////////</span>
        <span class="c">// 結果を表示する。</span>
        <span class="c">////////////////////////////////////////////////////////////</span>
        
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">longest</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="o">(</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">)</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">longest</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">i</span> <span class="o">)</span> <span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="c">/*</span>
<span class="c">     * 最長のしりとり結果(逆順)を取得する。</span>
<span class="c">     * @param 単語</span>
<span class="c">     * @return 最長のしりとり結果(逆順)</span>
<span class="c">     */</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getLongest</span><span class="o">(</span> <span class="n">Word</span> <span class="n">word</span> <span class="o">)</span> <span class="o">{</span>
        <span class="c">// 単語使用中フラグをオンにする。</span>
        <span class="n">word</span><span class="o">.</span><span class="na">used</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        
        <span class="c">// 単語の末尾の文字を取得する。</span>
        <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">text</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">last</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span> <span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">length</span> <span class="o">);</span>
        
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">longest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        
        <span class="c">// 索引に末尾の文字が含まれていることを確認する。</span>
        <span class="k">if</span> <span class="o">(</span> <span class="n">index</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span> <span class="n">last</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>

            <span class="c">////////////////////////////////////////////////////////////</span>
            <span class="c">// 末尾の文字の後に続く、最長のしりとり結果を見つける。</span>
            <span class="c">////////////////////////////////////////////////////////////</span>

            <span class="c">// 末尾の文字から始まるすべての単語について、以下を繰り返す。</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">container</span> <span class="o">=</span> <span class="n">index</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">last</span> <span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">container</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
                <span class="n">Word</span> <span class="n">nextWord</span> <span class="o">=</span> <span class="n">container</span><span class="o">.</span><span class="na">get</span><span class="o">(</span> <span class="n">i</span> <span class="o">);</span>
                <span class="c">// 単語使用中フラグがオフであることを確認する。</span>
                <span class="k">if</span> <span class="o">(</span> <span class="o">!</span> <span class="n">nextWord</span><span class="o">.</span><span class="na">used</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="c">// しりとり結果を取得する。</span>
                    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">getLongest</span><span class="o">(</span> <span class="n">nextWord</span> <span class="o">);</span>
                    <span class="c">// 最長のしりとり結果を見つける。</span>
                    <span class="k">if</span> <span class="o">(</span> <span class="n">temp</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">longest</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="n">longest</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="c">// 単語をしりとり結果に追加する。</span>
        <span class="n">longest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span> <span class="n">text</span> <span class="o">);</span>
        
        <span class="c">// 単語使用中フラグをオフにする。</span>
        <span class="n">word</span><span class="o">.</span><span class="na">used</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">longest</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9409/addtag/" class="addtag" id="addtag_9409">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9409/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9409/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9409"
  >-</span><span
  class="button yellow"
  id="rating_z_9409"
  >0</span><span 
  class="button green"
  id="rating_p_9409"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9409/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9410">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9410/">#9410</a>(<script language="JavaScript">print_time(new Date("2009/07/23 02:58 GMT"));</script><noscript>2009/07/23 02:58 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<p>促音・拗音は、前の単語と合わせてキーとするようにしたり、ひらがな→カタカナに変換して同一視したりしてみました。</p>
<p>ただ、全単語を単純に探索しているので計算量が爆発してました。160単語程度なら、すぐに結果が返ってくる程度です。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample277</span> <span class="o">{</span>
    <span class="k">static</span> <span class="k">class</span> <span class="nc">Word</span> <span class="o">{</span>
        <span class="c">/// キーは全てカタカナに正規化</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">String</span> <span class="n">convertHiraganaToKatakana</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">builder</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="sc">&#39;ぁ&#39;</span> <span class="o">&lt;=</span> <span class="n">c</span> <span class="o">&amp;&amp;</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">&#39;ん&#39;</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">builder</span><span class="o">.</span><span class="na">setCharAt</span><span class="o">(</span><span class="n">index</span><span class="o">,</span> <span class="o">(</span><span class="kt">char</span><span class="o">)(</span><span class="n">c</span> <span class="o">-</span> <span class="sc">&#39;ぁ&#39;</span> <span class="o">+</span> <span class="sc">&#39;ァ&#39;</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c">/// 拗音・促音・濁点などのリスト</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">anomalyLetters_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;();</span>
        <span class="o">{</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ぁ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ぃ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ぅ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ぇ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ぉ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;っ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ゃ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ゅ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ょ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ァ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ィ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ゥ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ェ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ォ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ッ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ャ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ュ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;ョ&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;゛&#39;</span><span class="o">);</span>
            <span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="sc">&#39;゜&#39;</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="k">final</span> <span class="n">String</span> <span class="n">s</span><span class="o">;</span>
        <span class="k">public</span> <span class="k">final</span> <span class="n">String</span> <span class="n">first</span><span class="o">;</span>
        <span class="k">public</span> <span class="k">final</span> <span class="n">String</span> <span class="n">last</span><span class="o">;</span>
        <span class="k">private</span> <span class="kt">boolean</span> <span class="n">used_</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="k">public</span> <span class="n">Word</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
            <span class="n">first</span> <span class="o">=</span> <span class="n">convertHiraganaToKatakana</span><span class="o">(</span><span class="n">getFirstLetter</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
            <span class="n">last</span> <span class="o">=</span> <span class="n">convertHiraganaToKatakana</span><span class="o">(</span><span class="n">getLastLetter</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="c">// しりとりのキーとしての最初の音</span>
        <span class="k">private</span> <span class="n">String</span> <span class="n">getFirstLetter</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c">// しりとりのキーとしての最後の音</span>
        <span class="k">private</span> <span class="n">String</span> <span class="n">getLastLetter</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">lastStartIndex</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">lastEndIndex</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">lastStartIndex</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;ー&#39;</span> <span class="o">||</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;ー&#39;</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">lastStartIndex</span><span class="o">--;</span>
                <span class="n">lastEndIndex</span><span class="o">--;</span>
                <span class="n">c</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">lastStartIndex</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">anomalyLetters_</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">lastStartIndex</span><span class="o">--;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">lastStartIndex</span><span class="o">,</span> <span class="n">lastEndIndex</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">boolean</span> <span class="n">isUsed</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">used_</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">setUsed</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">used</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">used_</span> <span class="o">=</span> <span class="n">used</span><span class="o">;</span>
        <span class="o">}</span>


        <span class="nd">@Override</span>
        <span class="k">public</span> <span class="kt">boolean</span> <span class="n">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">obj</span><span class="o">.</span><span class="na">getClass</span><span class="o">()))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">Word</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Word</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">other</span><span class="o">.</span><span class="na">s</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nd">@Override</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="k">private</span> <span class="k">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;</span> <span class="n">wordMap_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;&gt;();</span>

    <span class="k">public</span> <span class="n">Sample277</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">void</span> <span class="n">addWord</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Word</span> <span class="n">word</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">wordMap_</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">first</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">set</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;();</span>
            <span class="n">wordMap_</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">first</span><span class="o">,</span> <span class="n">set</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getLongest</span><span class="o">(</span><span class="n">String</span> <span class="n">start</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Word</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Word</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">getLongestR</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">getLongestR</span><span class="o">(</span><span class="n">Word</span> <span class="n">w</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="n">w</span><span class="o">.</span><span class="na">used_</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Word</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="n">wordMap_</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">w</span><span class="o">.</span><span class="na">last</span><span class="o">);</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">firstLetter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">set</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Word</span> <span class="nl">word:</span> <span class="n">set</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">isUsed</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">firstLetter</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">last</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">firstLetter</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">last</span><span class="o">);</span>
                
                <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">getLongestR</span><span class="o">(</span><span class="n">word</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="n">list</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">w</span><span class="o">.</span><span class="na">used_</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">w</span><span class="o">.</span><span class="na">s</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">loadFile</span><span class="o">(</span><span class="n">String</span> <span class="n">path</span><span class="o">)</span> <span class="k">throws</span> <span class="n">FileNotFoundException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">path</span><span class="o">),</span> <span class="s">&quot;MS932&quot;</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">loadFile</span><span class="o">(</span><span class="s">&quot;fam55_10.txt&quot;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;input count: &quot;</span> <span class="o">+</span> <span class="n">strings</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>

        <span class="n">Sample277</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample277</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">s:</span> <span class="n">strings</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sample</span><span class="o">.</span><span class="na">addWord</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">getLongest</span><span class="o">(</span><span class="s">&quot;しりとり&quot;</span><span class="o">);</span>
        <span class="kt">long</span> <span class="n">elapse</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;elapse: &quot;</span> <span class="o">+</span> <span class="n">elapse</span> <span class="o">+</span> <span class="s">&quot;(ms)&quot;</span><span class="o">);</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;max length: &quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">s:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9410/addtag/" class="addtag" id="addtag_9410">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9410/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9410/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9410"
  >-</span><span
  class="button yellow"
  id="rating_z_9410"
  >0</span><span 
  class="button green"
  id="rating_p_9410"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9410/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9411">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9411/">#9411</a>(<script language="JavaScript">print_time(new Date("2009/07/23 06:46 GMT"));</script><noscript>2009/07/23 06:46 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ひたすら全部求めて、デカいのを選ぶと云う愚直な実装です。130文字くらいで爆発します。
オーダーはどのくらいなんだろう。見積り方があやふやな上に遅延評価が絡んでくるとわけがわからないですね。
たぶんO(n!)くらいかなぁ……</p>
<p>あと、題意には関係ないですが、リストモナド以外のモナドでも動く様にしてみました。</p>
<p>要・UTF8-String</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span> <span class="p">(</span><span class="nv">getArgs</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Prelude</span> <span class="nv">hiding</span> <span class="p">(</span><span class="nv">putStrLn</span><span class="p">,</span> <span class="nv">putStr</span><span class="p">,</span> <span class="nv">print</span><span class="p">,</span> <span class="nv">readFile</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">UTF8</span> <span class="p">(</span><span class="nv">putStrLn</span><span class="p">,</span> <span class="nv">putStr</span><span class="p">,</span> <span class="nv">print</span><span class="p">,</span> <span class="nv">readFile</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Codec</span><span class="o">.</span><span class="n">Binary</span><span class="o">.</span><span class="n">UTF8</span><span class="o">.</span><span class="n">String</span> <span class="p">(</span><span class="nv">encodeString</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span> <span class="p">(</span><span class="nv">delete</span><span class="p">,</span> <span class="nv">find</span><span class="p">,</span> <span class="nv">maximumBy</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span> <span class="p">(</span><span class="nv">msum</span><span class="p">,</span> <span class="n">MonadPlus</span><span class="p">(</span><span class="o">..</span><span class="p">),</span> <span class="nv">filterM</span><span class="p">)</span>

<span class="nv">dic</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
<span class="nv">dic</span> <span class="o">=</span> <span class="kr">do</span>  <span class="nv">src</span> <span class="o">&lt;-</span> <span class="nv">readFile</span> <span class="s">&quot;words.dat&quot;</span>
          <span class="nv">return</span> <span class="o">$</span> <span class="nv">words</span> <span class="nv">src</span>

<span class="nv">f</span> <span class="o">#</span> <span class="nv">g</span> <span class="o">=</span> <span class="o">\</span><span class="nv">a</span> <span class="nv">b</span> <span class="o">-&gt;</span> <span class="nv">g</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">b</span><span class="p">)</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">wds</span> <span class="o">&lt;-</span> <span class="nv">dic</span>
          <span class="nv">args</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="kr">let</span> <span class="nv">mb</span> <span class="o">=</span> <span class="s">&quot;-a&quot;</span> <span class="p">`</span><span class="nv">elem</span><span class="p">`</span> <span class="nv">args</span>
              <span class="nv">sh</span> <span class="o">::</span> <span class="p">(</span><span class="n">Functor</span> <span class="nv">m</span><span class="p">,</span> <span class="n">MonadPlus</span> <span class="nv">m</span><span class="p">,</span> <span class="n">Eq</span> <span class="p">(</span><span class="nv">m</span> <span class="p">[</span><span class="n">String</span><span class="p">]))</span> <span class="o">=&gt;</span> <span class="nv">m</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
              <span class="nv">sh</span> <span class="o">=</span> <span class="nv">shiritori</span> <span class="p">(</span><span class="nv">head</span> <span class="nv">wds</span><span class="p">)</span> <span class="nv">wds</span>
          <span class="kr">if</span> <span class="nv">mb</span>
            <span class="kr">then</span> <span class="nv">pr</span> <span class="nv">sh</span>
            <span class="kr">else</span> <span class="nv">printStrList</span> <span class="o">$</span> <span class="nv">maximumBy</span> <span class="p">(</span><span class="nv">length</span><span class="o">#</span><span class="nv">compare</span><span class="p">)</span> <span class="nv">sh</span>

<span class="nv">pr</span> <span class="o">::</span> <span class="n">Maybe</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">pr</span> <span class="o">=</span> <span class="nv">maybe</span> <span class="p">(</span><span class="nv">return</span> <span class="p">())</span> <span class="nv">printStrList</span>
<span class="nv">showStrList</span> <span class="nv">xs</span> <span class="o">=</span> <span class="s">&quot;[&quot;</span> <span class="o">++</span> <span class="nv">concatMap</span> <span class="p">(</span><span class="o">++</span><span class="s">&quot;,&quot;</span><span class="p">)</span> <span class="nv">xs</span> <span class="o">++</span> <span class="s">&quot;]&quot;</span>
<span class="nv">printStrList</span> <span class="o">=</span> <span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">showStrList</span>

<span class="nv">shiritori</span> <span class="o">::</span> <span class="p">(</span><span class="n">Functor</span> <span class="nv">m</span><span class="p">,</span> <span class="n">MonadPlus</span> <span class="nv">m</span><span class="p">,</span> <span class="n">Eq</span> <span class="p">(</span><span class="nv">m</span> <span class="p">[</span><span class="n">String</span><span class="p">]))</span> <span class="o">=&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">m</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
<span class="nv">shiritori</span> <span class="nv">w</span> <span class="nv">ws</span> <span class="o">=</span> <span class="p">(</span><span class="kr">do</span>  <span class="kr">let</span> <span class="nv">wd&#39;</span> <span class="o">=</span> <span class="nv">w</span> <span class="p">`</span><span class="nv">delete</span><span class="p">`</span> <span class="nv">ws</span>
                      <span class="nv">ns</span> <span class="o">&lt;-</span> <span class="nv">nextWords</span> <span class="nv">w</span> <span class="nv">wd&#39;</span>
                      <span class="nv">shiritori</span> <span class="nv">ns</span> <span class="nv">wd&#39;</span><span class="p">)</span> <span class="p">`</span><span class="nv">hoge</span><span class="p">`</span> <span class="nv">w</span>

<span class="nv">a</span> <span class="p">`</span><span class="nv">hoge</span><span class="p">`</span> <span class="nv">t</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">a</span> <span class="o">==</span> <span class="nv">mzero</span> <span class="kr">then</span> <span class="nv">return</span> <span class="p">[</span><span class="nv">t</span><span class="p">]</span> <span class="kr">else</span> <span class="nv">fmap</span> <span class="p">(</span><span class="nv">t</span><span class="o">:</span><span class="p">)</span> <span class="nv">a</span>

<span class="nv">nextWords</span> <span class="o">::</span> <span class="p">(</span><span class="n">MonadPlus</span> <span class="nv">m</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">m</span> <span class="n">String</span>
<span class="nv">nextWords</span> <span class="nv">wd</span> <span class="nv">list</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">xs</span> <span class="o">&lt;-</span> <span class="nv">filterM</span> <span class="p">(</span><span class="o">\</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">(</span><span class="nv">last</span> <span class="nv">wd</span> <span class="o">==</span> <span class="nv">head</span> <span class="nv">a</span><span class="p">))</span> <span class="nv">list</span>
  <span class="nv">msum</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">return</span> <span class="nv">xs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9411/addtag/" class="addtag" id="addtag_9411">タグ</a>:
	
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/%E8%A6%81%E3%83%BBUTF8-String/">要・UTF8-String</a>
    
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9411/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9411/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9411"
  >-</span><span
  class="button yellow"
  id="rating_z_9411"
  >0</span><span 
  class="button green"
  id="rating_p_9411"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9411/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9413">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/490/" target="_top">ぴょん</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9413/">#9413</a>(<script language="JavaScript">print_time(new Date("2009/07/24 14:42 GMT"));</script><noscript>2009/07/24 14:42 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>% time shiritori.py &lt; data.txt</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/python</span>
<span class="c"># -*- coding: utf-8 -*-</span>
<span class="c"># http://ja.doukaku.org/277/</span>

<span class="k">import</span> <span class="nn">sys</span>

<span class="n">ENCODING</span> <span class="o">=</span> <span class="s">&#39;utf8&#39;</span>


<span class="k">class</span> <span class="nc">Word</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_word</span> <span class="o">=</span> <span class="n">word</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_trailwords</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">word</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_word</span>

    <span class="k">def</span> <span class="nf">head_char</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">word</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">tail_char</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">word</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">is_trailword</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trailword</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail_char</span><span class="p">()</span> <span class="o">==</span> <span class="n">trailword</span><span class="o">.</span><span class="n">head_char</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">is_last_word</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail_char</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="s">u&#39;ん&#39;</span><span class="p">,</span> <span class="s">u&#39;ン&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">append_trailword_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trailword</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_last_word</span><span class="p">()</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_trailword</span><span class="p">(</span><span class="n">trailword</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">trailwords</span><span class="p">()</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">trailword</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">trailwords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_trailwords</span>

    <span class="k">def</span> <span class="nf">num_trailwords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">trailwords</span><span class="p">())</span>


<span class="k">class</span> <span class="nc">WordQueue</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="o">=</span><span class="p">[]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_words</span> <span class="o">=</span> <span class="n">words</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_walk_step</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">words</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_words</span>

    <span class="k">def</span> <span class="nf">num_words</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">words</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">append</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_words</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">queue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span>

    <span class="k">def</span> <span class="nf">queue_len</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_walk</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">words</span><span class="p">(),</span> <span class="p">[])</span>

    <span class="k">def</span> <span class="nf">_walk</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">queue</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_walk_step</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">walk_step</span><span class="p">()</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">&#39;(</span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">walk_step</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_words</span><span class="p">(),</span>
                                    <span class="bp">self</span><span class="o">.</span><span class="n">queue_len</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">queue</span> <span class="ow">or</span> <span class="n">word</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">():</span>
                <span class="k">continue</span>
            <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_walk</span><span class="p">(</span><span class="n">word</span><span class="o">.</span><span class="n">trailwords</span><span class="p">(),</span> <span class="n">queue</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue_len</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">walk_step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_walk_step</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">WordQueue</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">item</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">item</span> <span class="o">==</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">new_word</span> <span class="o">=</span> <span class="n">Word</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">q</span><span class="o">.</span><span class="n">words</span><span class="p">():</span>
                <span class="n">word</span><span class="o">.</span><span class="n">append_trailword_list</span><span class="p">(</span><span class="n">new_word</span><span class="p">)</span>
                <span class="n">new_word</span><span class="o">.</span><span class="n">append_trailword_list</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">new_word</span><span class="p">)</span>
    <span class="n">q</span><span class="o">.</span><span class="n">walk</span><span class="p">()</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">w</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">q</span><span class="o">.</span><span class="n">queue</span><span class="p">()):</span>
        <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s"> </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">w</span><span class="p">),</span> <span class="n">w</span><span class="o">.</span><span class="n">word</span><span class="p">(),</span> <span class="n">w</span><span class="o">.</span><span class="n">num_trailwords</span><span class="p">())</span>

    <span class="k">print</span> <span class="s">&#39;number of words : </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">q</span><span class="o">.</span><span class="n">num_words</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&#39;queue length    : </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">q</span><span class="o">.</span><span class="n">queue_len</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&#39;number of step  : </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">q</span><span class="o">.</span><span class="n">walk_step</span><span class="p">()</span>

<span class="c"># vim : fileencoding=utf8</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9413/addtag/" class="addtag" id="addtag_9413">タグ</a>:
	
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/gbSHvwKeGMSfW/">gbSHvwKeGMSfW</a>
    
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9413/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9413/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9413"
  >-</span><span
  class="button yellow"
  id="rating_z_9413"
  >0</span><span 
  class="button green"
  id="rating_p_9413"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100712021426/http://ja.doukaku.org/comment/9413/">
    1
    reply
  </a>

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9413/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9414">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/490/" target="_top">ぴょん</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/">#9414</a>(<script language="JavaScript">print_time(new Date("2009/07/25 03:15 GMT"));</script><noscript>2009/07/25 03:15 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>探索の無駄を省いた。

1000語の探索はT2300 (1.66GHz)で14分半くらい。

最長しりとり長は408語（多分）。「ヘルニア」で始まり「ツウブン」で終はる。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/python</span>
<span class="c"># -*- coding: utf-8 -*-</span>
<span class="c"># http://ja.doukaku.org/277/</span>

<span class="k">import</span> <span class="nn">sys</span>

<span class="n">ENCODING</span> <span class="o">=</span> <span class="s">&#39;utf8&#39;</span>


<span class="k">class</span> <span class="nc">Word</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_word</span> <span class="o">=</span> <span class="n">word</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_prewords</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_trailwords</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">word</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_word</span>

    <span class="k">def</span> <span class="nf">head_char</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">word</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">tail_char</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">word</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">is_trailword</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trailword</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail_char</span><span class="p">()</span> <span class="o">==</span> <span class="n">trailword</span><span class="o">.</span><span class="n">head_char</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">is_last_word</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tail_char</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="s">u&#39;ん&#39;</span><span class="p">,</span> <span class="s">u&#39;ン&#39;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">append_trailword_list</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">trailword</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_last_word</span><span class="p">()</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_trailword</span><span class="p">(</span><span class="n">trailword</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">trailwords</span><span class="p">()</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">trailword</span><span class="p">)</span>
            <span class="n">trailword</span><span class="o">.</span><span class="n">prewords</span><span class="p">()</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">prewords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_prewords</span>

    <span class="k">def</span> <span class="nf">trailwords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_trailwords</span>

    <span class="k">def</span> <span class="nf">num_prewords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">prewords</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">num_trailwords</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">trailwords</span><span class="p">())</span>


<span class="k">class</span> <span class="nc">WordQueue</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="o">=</span><span class="p">[]):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_words</span> <span class="o">=</span> <span class="n">words</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_walk_step</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">words</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_words</span>

    <span class="k">def</span> <span class="nf">num_words</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">words</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">append</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">words</span><span class="p">():</span>
            <span class="n">w</span><span class="o">.</span><span class="n">append_trailword_list</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="n">word</span><span class="o">.</span><span class="n">append_trailword_list</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">words</span><span class="p">()</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">queue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span>

    <span class="k">def</span> <span class="nf">queue_len</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_walk</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">words</span><span class="p">(),</span> <span class="p">[])</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_is_valid_queue</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_view</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_walk</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">queue</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_walk_step</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">walk_step</span><span class="p">()</span> <span class="o">%</span> <span class="mi">1000</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">&#39;(</span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">walk_step</span><span class="p">(),</span> <span class="bp">self</span><span class="o">.</span><span class="n">num_words</span><span class="p">(),</span>
                                    <span class="bp">self</span><span class="o">.</span><span class="n">queue_len</span><span class="p">())</span>

        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">queue</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">elif</span> <span class="n">word</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">():</span>
                <span class="n">i</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">()</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">queue</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_walk</span><span class="p">(</span><span class="n">word</span><span class="o">.</span><span class="n">trailwords</span><span class="p">(),</span> <span class="n">queue</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue_len</span><span class="p">():</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span>

            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_is_valid_queue</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">():</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">()</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s"> is duplicated.</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">word</span><span class="p">),</span>
                                 <span class="n">word</span><span class="o">.</span><span class="n">word</span><span class="p">()))</span>
                <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">())</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">w</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">()[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">n</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">()[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">w</span><span class="o">.</span><span class="n">is_trailword</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
                <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s"> </span><span class="si">%s</span><span class="s"> are not shiritori.</span><span class="se">\n</span><span class="s">&#39;</span>
                                  <span class="o">%</span> <span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">w</span><span class="p">),</span> <span class="n">w</span><span class="o">.</span><span class="n">word</span><span class="p">(),</span> <span class="nb">id</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">n</span><span class="o">.</span><span class="n">word</span><span class="p">()))</span>
                <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_view</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">queue</span><span class="p">():</span>
            <span class="k">print</span> <span class="s">&#39;</span><span class="si">%s</span><span class="se">\t</span><span class="si">%s</span><span class="se">\t</span><span class="si">%d</span><span class="se">\t</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="n">w</span><span class="p">),</span> <span class="n">w</span><span class="o">.</span><span class="n">word</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">),</span>
                    <span class="n">w</span><span class="o">.</span><span class="n">num_prewords</span><span class="p">(),</span> <span class="n">w</span><span class="o">.</span><span class="n">num_trailwords</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">walk_step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_walk_step</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">WordQueue</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">item</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">item</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
                <span class="n">q</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Word</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>

    <span class="n">q</span><span class="o">.</span><span class="n">walk</span><span class="p">()</span>

    <span class="k">print</span> <span class="s">&#39;number of words : </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">q</span><span class="o">.</span><span class="n">num_words</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&#39;queue length    : </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">q</span><span class="o">.</span><span class="n">queue_len</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&#39;number of step  : </span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">q</span><span class="o">.</span><span class="n">walk_step</span><span class="p">()</span>

<span class="c"># vim : fileencoding=utf8</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/addtag/" class="addtag" id="addtag_9414">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9414"
  >-</span><span
  class="button yellow"
  id="rating_z_9414"
  >0</span><span 
  class="button green"
  id="rating_p_9414"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9413/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/root/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/">
    1
    reply
  </a>

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9414/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9415">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/588/" target="_top">sekia</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9415/">#9415</a>(<script language="JavaScript">print_time(new Date("2009/07/25 09:02 GMT"));</script><noscript>2009/07/25 09:02 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>map万歳！

最悪計算量はO(N!)のはず。
お題に挙げられている単語リストだと110語あたりが限界です。

$ time perl doukaku227.pl fam55_40.txt 100
セイギハ -&gt; ハゲヤマ -&gt; マヤカシ -&gt; ショウワル -&gt; ルイベツ -&gt; ツジツマ -&gt; マタシタ -&gt; タチノミ -&gt; ミズヒキ -&gt; キャクアシ -&gt; シャクナゲ -&gt; ゲレツサ -&gt; サンバシ -&gt; シールド -&gt; ドウナガ -&gt; ガイユウ -&gt; ウワバリ -&gt; リンセツ -&gt; ツユザム -&gt; ムスビメ -&gt; メイフク

real	0m0.585s
user	0m0.561s
sys	0m0.012s
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/env perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="n">qw</span><span class="sr">/reduce/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@katakanas</span> <span class="o">=</span> <span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="s">&#39;アイウエオカキクケコガキグゲゴサシスセソ&#39;</span>
                        <span class="o">.</span> <span class="s">&#39;ザジズゼゾタチツテトダヂヅデドナニヌネノ&#39;</span>
                        <span class="o">.</span> <span class="s">&#39;ハヒフヘホバビブベボパピプペポマミムメモ&#39;</span>
                        <span class="o">.</span> <span class="s">&#39;ヤユオワヲン&#39;</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">head_and_tail</span><span class="p">($)</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
  <span class="nv">$word</span> <span class="o">=~</span> <span class="nb">tr</span><span class="sr">/ァィゥェォッャュョヮ/</span><span class="err">アイウエオツヤユヨワ</span><span class="o">/</span><span class="p">;</span>
  <span class="nv">$word</span> <span class="o">=~</span> <span class="sr">s/ー$//</span><span class="p">;</span>
  <span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="nb">substr</span><span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">longest_chain</span><span class="p">(\%;$);</span>
<span class="p">sub longest_chain(\%;$) {</span>
  <span class="nb">no</span> <span class="n">warnings</span> <span class="n">qw</span><span class="sr">/recursion/</span><span class="p">;</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$dict</span><span class="p">,</span> <span class="nv">$word</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@words</span> <span class="o">=</span> <span class="nb">defined</span> <span class="nv">$word</span>
              <span class="p">?</span> <span class="p">(</span><span class="nv">$word</span><span class="p">)</span>
              <span class="p">:</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">}</span> <span class="nb">values</span> <span class="nv">%$_</span> <span class="p">}</span> <span class="nb">values</span> <span class="nv">%$dict</span><span class="p">;</span>
  <span class="n">reduce</span> <span class="p">{</span>
    <span class="nv">@$a</span> <span class="o">&gt;</span> <span class="nv">@$b</span> <span class="p">?</span> <span class="nv">$a</span> <span class="p">:</span> <span class="nv">$b</span><span class="p">;</span>
  <span class="p">}</span> <span class="p">(</span><span class="o">[]</span><span class="p">,</span>
     <span class="nb">map</span> <span class="p">{</span>
       <span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="nv">$_</span><span class="p">;</span>
       <span class="k">my</span> <span class="p">(</span><span class="nb">undef</span><span class="p">,</span> <span class="nv">$next_head</span><span class="p">)</span> <span class="o">=</span> <span class="n">head_and_tail</span> <span class="nv">$word</span><span class="p">;</span>
       <span class="nb">map</span> <span class="p">{</span>
         <span class="k">my</span> <span class="nv">$available_words</span> <span class="o">=</span> <span class="nv">$dict</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$next_head</span><span class="p">}{</span><span class="nv">$_</span><span class="p">};</span>
         <span class="k">my</span> <span class="nv">$next_word</span> <span class="o">=</span> <span class="nb">pop</span> <span class="nv">@$available_words</span><span class="p">;</span>
         <span class="k">my</span> <span class="nv">$chain</span> <span class="o">=</span> <span class="n">longest_chain</span><span class="p">(</span><span class="nv">%$dict</span><span class="p">,</span> <span class="nv">$next_word</span><span class="p">);</span>
         <span class="nb">push</span> <span class="nv">@$available_words</span><span class="p">,</span> <span class="nv">$next_word</span><span class="p">;</span>
         <span class="nb">unshift</span> <span class="nv">@$chain</span><span class="p">,</span> <span class="nv">$word</span><span class="p">;</span>
         <span class="nv">$chain</span><span class="p">;</span>
       <span class="p">}</span> <span class="nb">grep</span> <span class="p">{</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$dict</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$next_head</span><span class="p">}{</span><span class="nv">$_</span><span class="p">}</span> <span class="p">}</span> <span class="p">}</span> <span class="nb">keys</span> <span class="nv">%</span><span class="p">{</span> <span class="nv">$dict</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$next_head</span><span class="p">}</span> <span class="p">};</span>
     <span class="p">}</span> <span class="nv">@words</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">binmode</span> <span class="bp">STDOUT</span><span class="p">,</span> <span class="s">&#39;:utf8&#39;</span><span class="p">;</span>
<span class="nb">open</span> <span class="k">my</span> <span class="nv">$words_file</span><span class="p">,</span> <span class="s">&#39;&lt;:encoding(shiftjis)&#39;</span><span class="p">,</span> <span class="nb">shift</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">@words</span> <span class="o">=</span> <span class="p">(</span><span class="nb">map</span> <span class="p">{</span> <span class="nb">chomp</span><span class="p">;</span> <span class="nb">split</span> <span class="sr">/\s+/</span> <span class="p">}</span> <span class="o">&lt;</span><span class="nv">$words_file</span><span class="o">&gt;</span><span class="p">);</span>
<span class="nv">$#words</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">if</span> <span class="nv">@ARGV</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">%dict</span><span class="p">;</span>
<span class="k">for</span> <span class="k">my</span> <span class="nv">$word</span> <span class="p">(</span><span class="nv">@words</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$head</span><span class="p">,</span> <span class="nv">$tail</span><span class="p">)</span> <span class="o">=</span> <span class="n">head_and_tail</span> <span class="nv">$word</span><span class="p">;</span>
  <span class="nv">$dict</span><span class="p">{</span><span class="nv">$head</span><span class="p">}{</span><span class="nv">$tail</span><span class="p">}</span> <span class="o">=</span> <span class="o">[]</span> <span class="k">unless</span> <span class="nb">exists</span> <span class="nv">$dict</span><span class="p">{</span><span class="nv">$head</span><span class="p">}{</span><span class="nv">$tail</span><span class="p">};</span>
  <span class="nb">push</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$dict</span><span class="p">{</span><span class="nv">$head</span><span class="p">}{</span><span class="nv">$tail</span><span class="p">}</span> <span class="p">},</span> <span class="nv">$word</span><span class="p">;</span>
<span class="p">}</span>
<span class="nb">local</span> <span class="p">(</span><span class="vg">$,</span><span class="p">,</span> <span class="vg">$\</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39; -&gt; &#39;</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span><span class="p">);</span>
<span class="k">print</span> <span class="nv">@</span><span class="p">{</span> <span class="n">longest_chain</span><span class="p">(</span><span class="nv">%dict</span><span class="p">)</span> <span class="p">};</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9415/addtag/" class="addtag" id="addtag_9415">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9415/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9415/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9415"
  >-</span><span
  class="button yellow"
  id="rating_z_9415"
  >0</span><span 
  class="button green"
  id="rating_p_9415"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9415/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9416">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9416/">#9416</a>(<script language="JavaScript">print_time(new Date("2009/07/25 17:40 GMT"));</script><noscript>2009/07/25 17:40 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で。1000 語程度にも対応できるアルゴリズムにも挑戦したいところですが、とりあえずは愚直に。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>| url allWords intermediates dict results words |
url := &#39;http://www.ais.riec.tohoku.ac.jp/lab/wordlist/fam55_40.txt&#39; asUrl.
allWords := (url retrieveContents contents convertFromEncoding: #sjis) subStrings.
results := (Array new: 10 withAll: #()) asSortedCollection: [:a :b | a size &gt; b size].
intermediates := (words := allWords shuffled first: 100) collect: [:each | OrderedCollection with: each].
dict := words groupBy: [:each | each first] having: [:group | true].
[intermediates notEmpty] whileTrue: [
    | nextGen |
    nextGen := OrderedCollection new.
    (intermediates groupBy: [:each | each last last] having: [:group | true]) associationsDo: [:assoc |
        | nexts |
        nexts := dict at: assoc key ifAbsent: [#()].
        assoc value do: [:each |
            (nexts difference: each) ifEmpty: [results add: each; removeLast] ifNotEmptyDo: [:cands |
                cands do: [:next | nextGen add: (each copyWith: next)]]]].
    (intermediates := nextGen) size printString, &#39; &#39; displayAt: 0 asPoint].
^results first asArray
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9416/addtag/" class="addtag" id="addtag_9416">タグ</a>:
	
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9416/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9416/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9416"
  >-</span><span
  class="button yellow"
  id="rating_z_9416"
  >0</span><span 
  class="button green"
  id="rating_p_9416"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9416/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9420">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9420/">#9420</a>(<script language="JavaScript">print_time(new Date("2009/07/26 10:20 GMT"));</script><noscript>2009/07/26 10:20 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>普通の深さ優先探索。全パターン生成してるだけなのですが、正確な計算量はどれくらいになるのでしょうね。</p>
<p>ノード数 n のグラフのパスの数は、完全グラフの場合で Σ_k P(n, k) = n! * Σ_k 1/k! &lt; n! * e なので、O(N!) で上から評価できるのだとは思いますが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre>(defun first-char (s) (char s 0))
(defun last-char (s) (char s (1- (length s))))

(defun longer (list1 list2)
  (loop for x = list1 then (cdr x) and y = list2 then (cdr y)
     if (null x) return list2
     if (null y) return list1))

(defparameter *word-table* nil)

(defun get-next-words (c) (gethash c *word-table*))

(defun make-table (word-list key)
  (let ((h (make-hash-table)))
    (loop for w in word-list do (push w (gethash (funcall key w) h)))
    h))

(defun longest (word-list)
  (let ((*word-table* (make-table word-list #&#39;first-char)))
    (reverse (reduce #&#39;longer word-list :key #&#39;longest-path-from))))

(defun longest-path-from (word)
  (search-path (list word)))

(defun search-path (path)
  (let* ((w (car path))
         (c (last-char w))
         (words (set-difference (get-next-words c) path)))
    (if words
        (reduce #&#39;longer words
                :key (lambda (next) (search-path (cons next path))))
        path)))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9420/addtag/" class="addtag" id="addtag_9420">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9420/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9420/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9420"
  >-</span><span
  class="button yellow"
  id="rating_z_9420"
  >0</span><span 
  class="button green"
  id="rating_p_9420"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9420/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9422">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9422/">#9422</a>(<script language="JavaScript">print_time(new Date("2009/07/26 23:58 GMT"));</script><noscript>2009/07/26 23:58 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  厳密解ではなく、ヒューリスティックな解法ですが、お題の単語リストに対して1秒程度で580語前後のしりとりを抽出できます。<br/>見つけた最長のしりとりは624語&nbsp;(ホロバシャ,&nbsp;ヤスヤド,&nbsp;ドクダミ,&nbsp;…&nbsp;略&nbsp;…&nbsp;,&nbsp;ツノブエ,&nbsp;エスプリ,&nbsp;リンカン)&nbsp;でした。<br/><br/>しりとりは、文字と文字をつなぐ有向グラフと考えられるので、グラフ理論を応用すればもっと良い解法が得られるのではないかと思います。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Shiritori3</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">startTime</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">();</span>
        <span class="k">final</span> <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Scanner</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span>
                <span class="n">Shiritori</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="s">&quot;Words_jp.txt&quot;</span><span class="o">),</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">));</span>
        <span class="k">new</span> <span class="n">Shiritori3</span><span class="o">(</span><span class="n">scanner</span><span class="o">).</span><span class="na">analyze</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;%f [sec]%n&quot;</span><span class="o">,</span> <span class="o">((</span><span class="kt">double</span><span class="o">)</span><span class="n">System</span><span class="o">.</span><span class="na">nanoTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">)</span> <span class="o">/</span> <span class="mi">100000000</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;</span> <span class="n">nodes</span><span class="o">;</span>

    <span class="k">public</span> <span class="n">Shiritori3</span><span class="o">(</span><span class="n">Scanner</span> <span class="n">scanner</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Node</span><span class="o">&gt;();</span>
        <span class="n">init</span><span class="o">(</span><span class="n">scanner</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="kt">void</span> <span class="n">init</span><span class="o">(</span><span class="n">Scanner</span> <span class="n">scanner</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">scanner</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">edge</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="kt">char</span> <span class="n">head</span> <span class="o">=</span> <span class="n">headChar</span><span class="o">(</span><span class="n">edge</span><span class="o">);</span>
            <span class="kt">char</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">tailChar</span><span class="o">(</span><span class="n">edge</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">nodes</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">head</span><span class="o">))</span> <span class="n">nodes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">head</span><span class="o">));</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">nodes</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">tail</span><span class="o">))</span> <span class="n">nodes</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">tail</span><span class="o">,</span> <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">tail</span><span class="o">));</span>
            <span class="n">nodes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">head</span><span class="o">).</span><span class="na">addGoOutEdge</span><span class="o">(</span><span class="n">edge</span><span class="o">);</span>
            <span class="n">nodes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tail</span><span class="o">).</span><span class="na">addCominEdge</span><span class="o">(</span><span class="n">edge</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">void</span> <span class="n">analyze</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">noflows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;();</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;</span> <span class="n">flows</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Node</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Node</span> <span class="n">node</span> <span class="o">:</span> <span class="n">nodes</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">hasCapacity</span><span class="o">())</span> <span class="n">flows</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>

        <span class="n">List</span><span class="o">&lt;</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">pathList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">flows</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>

            <span class="c">// 初期ノードの選択により、結果が変化する</span>
            <span class="n">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="n">flows</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">Node</span><span class="o">[</span><span class="mi">0</span><span class="o">])[</span><span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Random</span><span class="o">().</span><span class="na">nextInt</span><span class="o">(</span><span class="n">flows</span><span class="o">.</span><span class="na">size</span><span class="o">())];</span>
            <span class="n">Node</span> <span class="n">tail</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>

            <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">path</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
            <span class="n">pathList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">path</span><span class="o">);</span>

            <span class="k">while</span> <span class="o">(</span><span class="n">head</span><span class="o">.</span><span class="na">hasCapacity</span><span class="o">()</span> <span class="o">||</span> <span class="n">tail</span><span class="o">.</span><span class="na">hasCapacity</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">head</span><span class="o">.</span><span class="na">inEdges</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">String</span> <span class="n">newHead</span> <span class="o">=</span> <span class="n">popInEdge</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
                    <span class="n">path</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">newHead</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">head</span><span class="o">.</span><span class="na">hasCapacity</span><span class="o">())</span> <span class="n">flows</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
                    <span class="n">head</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">headChar</span><span class="o">(</span><span class="n">newHead</span><span class="o">));</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(!</span><span class="n">tail</span><span class="o">.</span><span class="na">outEdges</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">String</span> <span class="n">newTail</span> <span class="o">=</span> <span class="n">popOutEdge</span><span class="o">(</span><span class="n">tail</span><span class="o">);</span>
                    <span class="n">path</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">newTail</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(!</span><span class="n">tail</span><span class="o">.</span><span class="na">hasCapacity</span><span class="o">())</span> <span class="n">flows</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">tail</span><span class="o">);</span>
                    <span class="n">tail</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tailChar</span><span class="o">(</span><span class="n">newTail</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">pathList</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">pathA</span> <span class="o">=</span> <span class="n">pathList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">pathA</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">pathB</span> <span class="o">=</span> <span class="n">pathList</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">pathB</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
                <span class="n">cross</span><span class="o">(</span><span class="n">pathA</span><span class="o">,</span> <span class="n">pathB</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">pathList</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;?&gt;&gt;()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">compare</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">o1</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="o">}});</span>

        <span class="k">for</span> <span class="o">(</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">path</span> <span class="o">:</span> <span class="n">pathList</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;%d, %s%n&quot;</span><span class="o">,</span> <span class="n">path</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">path</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="n">cross</span><span class="o">(</span><span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">pathA</span><span class="o">,</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">pathB</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">ma</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="n">mb</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">ac</span> <span class="o">=</span> <span class="n">pathA</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">bc</span> <span class="o">=</span> <span class="n">pathB</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">ac</span><span class="o">,</span> <span class="n">bc</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">aw</span> <span class="o">:</span> <span class="n">pathA</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">b</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">bw</span> <span class="o">:</span> <span class="n">pathB</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tailChar</span><span class="o">(</span><span class="n">aw</span><span class="o">)</span> <span class="o">==</span> <span class="n">headChar</span><span class="o">(</span><span class="n">bw</span><span class="o">))</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">nmax</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">max</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="o">(</span><span class="n">bc</span> <span class="o">-</span> <span class="n">b</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="o">(</span><span class="n">ac</span> <span class="o">-</span> <span class="n">a</span><span class="o">)</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">nmax</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">ma</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
                        <span class="n">mb</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
                        <span class="n">max</span> <span class="o">=</span> <span class="n">nmax</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="n">b</span><span class="o">++;</span>
            <span class="o">}</span>
            <span class="n">a</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">ma</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">old1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">pathA</span><span class="o">);</span>
            <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">old2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">pathB</span><span class="o">);</span>
            <span class="n">pathA</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
            <span class="n">pathB</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
            <span class="n">pathA</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">old1</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">ma</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
            <span class="n">pathA</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">old2</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">mb</span><span class="o">,</span> <span class="n">bc</span><span class="o">));</span>
            <span class="n">pathB</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">old2</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">mb</span><span class="o">));</span>
            <span class="n">pathB</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">old1</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="n">ma</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">ac</span><span class="o">));</span>
            <span class="n">cross</span><span class="o">(</span><span class="n">pathA</span><span class="o">,</span> <span class="n">pathB</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="n">String</span> <span class="n">popInEdge</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">node</span><span class="o">.</span><span class="na">inEdges</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Node</span> <span class="n">nextHead</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">headChar</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">nextHead</span><span class="o">.</span><span class="na">flowCapacity</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">max</span> <span class="o">=</span> <span class="n">nextHead</span><span class="o">.</span><span class="na">flowCapacity</span><span class="o">();</span>
                <span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">node</span><span class="o">.</span><span class="na">inEdges</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="n">String</span> <span class="n">popOutEdge</span><span class="o">(</span><span class="n">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">next</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">node</span><span class="o">.</span><span class="na">outEdges</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Node</span> <span class="n">nextTail</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">tailChar</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">nextTail</span><span class="o">.</span><span class="na">flowCapacity</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">max</span> <span class="o">=</span> <span class="n">nextTail</span><span class="o">.</span><span class="na">flowCapacity</span><span class="o">();</span>
                <span class="n">next</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">node</span><span class="o">.</span><span class="na">outEdges</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">next</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">next</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">static</span> <span class="kt">char</span> <span class="n">tailChar</span><span class="o">(</span><span class="n">String</span> <span class="n">edge</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">toShiritoriChar</span><span class="o">(</span><span class="n">edge</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">edge</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="k">static</span> <span class="kt">char</span> <span class="n">headChar</span><span class="o">(</span><span class="n">String</span> <span class="n">edge</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">toShiritoriChar</span><span class="o">(</span><span class="n">edge</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">YOUON</span> <span class="o">=</span> <span class="s">&quot;ァィゥェォヵヶッャュョヮ&quot;</span><span class="o">;</span>
    <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">SEION</span> <span class="o">=</span> <span class="s">&quot;アイウエオカケツヤユヨワ&quot;</span><span class="o">;</span>
    <span class="k">static</span> <span class="kt">char</span> <span class="n">toShiritoriChar</span><span class="o">(</span><span class="k">final</span> <span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">YOUON</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">c</span><span class="o">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="n">SEION</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">YOUON</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">c</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="k">static</span> <span class="k">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">inEdges</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="k">final</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">outEdges</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="k">final</span> <span class="n">Character</span> <span class="n">c</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">lilmit</span><span class="o">;</span>

        <span class="k">public</span> <span class="n">Node</span><span class="o">(</span><span class="n">Character</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kt">void</span> <span class="n">addCominEdge</span><span class="o">(</span><span class="n">String</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">inEdges</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">void</span> <span class="n">addGoOutEdge</span><span class="o">(</span><span class="n">String</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">outEdges</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">flowCapacity</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">inEdges</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">outEdges</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="kt">boolean</span> <span class="n">hasCapacity</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">flowCapacity</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9422/addtag/" class="addtag" id="addtag_9422">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9422/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9422/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9422"
  >-</span><span
  class="button yellow"
  id="rating_z_9422"
  >0</span><span 
  class="button green"
  id="rating_p_9422"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100712021426/http://ja.doukaku.org/comment/9422/">
    1
    reply
  </a>

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9422/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9423">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9423/">#9423</a>(<script language="JavaScript">print_time(new Date("2009/07/27 06:00 GMT"));</script><noscript>2009/07/27 06:00 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>バグってました orz.
正しくは1秒以内で350語前後でした。</p>
<p>なお、グラフ理論でいうと、任意のグラフから最大の準オイラーグラフとなる部分グラフを抽出するという問題になると思います。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- Shiritori_old.java  2009-07-27 14:44:42.167161400 +0900</span>
<span class="gi">+++ Shiritori_new.java  2009-07-27 14:59:44.602959300 +0900</span>
<span class="gu">@@ -46,2 +46,7 @@</span>

<span class="gi">+            if(!head.hasCapacity()) {</span>
<span class="gi">+                flows.remove(head);</span>
<span class="gi">+                break;</span>
<span class="gi">+            }</span>
<span class="gi">+</span>
             LinkedList&lt;String&gt; path = new LinkedList&lt;String&gt;();
<span class="gu">@@ -50,3 +55,3 @@</span>
             while (head.hasCapacity() || tail.hasCapacity()) {
<span class="gd">-                if (!head.inEdges.isEmpty()) {</span>
<span class="gi">+                if (head.hasCapacity()) {</span>
                     String newHead = popInEdge(head);
<span class="gu">@@ -55,5 +60,6 @@</span>
                     head = nodes.get(headChar(newHead));
<span class="gi">+                    head.outEdges.remove(newHead);</span>
                 }

<span class="gd">-                if (!tail.outEdges.isEmpty()) {</span>
<span class="gi">+                if (tail.hasCapacity()) {</span>
                     String newTail = popOutEdge(tail);
<span class="gu">@@ -62,2 +68,3 @@</span>
                     tail = nodes.get(tailChar(newTail));
<span class="gi">+                    tail.inEdges.remove(newTail);</span>
                 }
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9423/addtag/" class="addtag" id="addtag_9423">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9423/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9423/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9423"
  >-</span><span
  class="button yellow"
  id="rating_z_9423"
  >0</span><span 
  class="button green"
  id="rating_p_9423"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9422/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9423/root/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9423/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9426">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1056/" target="_top">tkturbo</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9426/">#9426</a>(<script language="JavaScript">print_time(new Date("2009/07/28 02:47 GMT"));</script><noscript>2009/07/28 02:47 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>総当り法を取ると重くて動かないので、残集団の中で最大数を締める文字で終わるような単語を選択するようにしてみました。</p>
<p>しりとり開始の単語をランダムで選ぶ形式ですが、350前後までつながるのを確認。</p>
<p>選択対照の単語リストはテキストエリアに貼り付けて使用します。</p>
<p>リストの文字区切りはtab,改行,半角スペースで指定。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">http</span><span class="o">-</span><span class="nx">equiv</span><span class="o">=</span><span class="s2">&quot;content-type&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;text/html;charset=shift_jis&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;!--</span> <span class="c">//</span>

<span class="nx">ls0</span><span class="o">=</span><span class="p">{};</span>

<span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
<span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>

<span class="nx">ls0</span><span class="p">.</span><span class="nx">getWordList</span> <span class="o">=</span> <span class="k">function</span><span class="p">(){</span>
  <span class="k">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;ls0_ta&quot;</span><span class="p">).</span><span class="nx">value</span><span class="o">;</span>
  <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/(\t|\r|\n)/g</span><span class="o">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
  <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ +/g</span><span class="o">,</span> <span class="s2">&quot; &quot;</span><span class="p">);</span>
  <span class="nx">str</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/ +$/g</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">str</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">ls0</span><span class="p">.</span><span class="nx">lastChar</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">word</span><span class="p">){</span> <span class="k">return</span> <span class="nx">word</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">word</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">};</span>

<span class="nx">ls0</span><span class="p">.</span><span class="nx">chainSort</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">b</span><span class="p">){</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">a</span> <span class="o">||</span> <span class="o">!</span><span class="nx">b</span><span class="p">){</span> <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="nx">a</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span> <span class="p">(</span><span class="o">!</span><span class="nx">b</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="p">}</span>
  <span class="k">var</span> <span class="nx">a0</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">lastChar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">b0</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">lastChar</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">a0</span><span class="p">]</span> <span class="o">||</span> <span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">b0</span><span class="p">]){</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">a0</span><span class="p">])</span> <span class="o">?</span> <span class="p">((</span><span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">b0</span><span class="p">])</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">b0</span><span class="p">]</span><span class="o">-</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">a0</span><span class="p">];</span>
<span class="p">};</span>

<span class="nx">ls0</span><span class="p">.</span><span class="nx">execute</span> <span class="o">=</span> <span class="k">function</span><span class="p">(){</span>
  <span class="k">var</span> <span class="nx">result</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;ls0_result&quot;</span><span class="p">);</span>
  <span class="nx">result</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">;</span>
  <span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="o">=</span><span class="p">[];</span>
  <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="o">=</span><span class="p">[];</span>
  <span class="k">var</span> <span class="nx">indexes</span><span class="o">=</span><span class="p">[];</span>
  <span class="k">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">getWordList</span><span class="p">();</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">c</span><span class="p">]){</span>
      <span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
      <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span>
      <span class="nx">indexes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">++;</span>
    <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">indexes</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">indexes</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">sort</span><span class="p">(</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">chainSort</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">var</span> <span class="nx">pos</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">word</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">[</span><span class="nx">pos</span><span class="p">];</span>
  <span class="nx">arr</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
  <span class="k">var</span> <span class="nx">longest</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">getLongest</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">longest</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
    <span class="nx">div</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">longest</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
    <span class="nx">result</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="nx">ls0</span><span class="p">.</span><span class="nx">getLongest</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">word</span><span class="p">){</span>
  <span class="k">var</span> <span class="nx">longest</span><span class="o">=</span><span class="p">[];</span>
  <span class="k">var</span> <span class="nx">c0</span> <span class="o">=</span> <span class="nx">word</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">cz</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">lastChar</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
  <span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">c0</span><span class="p">]</span><span class="o">--;</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c0</span><span class="p">].</span><span class="nx">length</span><span class="o">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c0</span><span class="p">][</span><span class="nx">i</span><span class="p">]){</span> <span class="k">continue</span><span class="o">;</span> <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c0</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span><span class="o">!=</span><span class="nx">word</span><span class="p">){</span> <span class="k">continue</span><span class="o">;</span> <span class="p">}</span>
    <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">c0</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
    <span class="k">break</span><span class="o">;</span>
  <span class="p">}</span>
  <span class="c">//</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">cz</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">counter</span><span class="p">[</span><span class="nx">cz</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
    <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">cz</span><span class="p">]</span><span class="o">=</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">cz</span><span class="p">].</span><span class="nx">sort</span><span class="p">(</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">chainSort</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">cz</span><span class="p">].</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">cz</span><span class="p">][</span><span class="nx">i</span><span class="p">])</span> <span class="k">continue</span><span class="o">;</span>
      <span class="nx">longest</span> <span class="o">=</span> <span class="nx">ls0</span><span class="p">.</span><span class="nx">getLongest</span><span class="p">(</span><span class="nx">ls0</span><span class="p">.</span><span class="nx">wordmap</span><span class="p">[</span><span class="nx">cz</span><span class="p">][</span><span class="nx">i</span><span class="p">]);</span>
      <span class="k">break</span><span class="o">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">longest</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="nx">word</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">longest</span><span class="o">;</span>
<span class="p">};</span>

    <span class="c">// --&gt;&lt;/script&gt;</span>
  <span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span>
             <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;javascript:ls0.execute()&quot;</span>
             <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;start&quot;</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">textarea</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;ls0_ta&quot;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;50&quot;</span> <span class="nx">rows</span><span class="o">=</span><span class="s2">&quot;10&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">textarea</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;ls0_result&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9426/addtag/" class="addtag" id="addtag_9426">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9426/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9426/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9426"
  >-</span><span
  class="button yellow"
  id="rating_z_9426"
  >0</span><span 
  class="button green"
  id="rating_p_9426"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9426/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9428">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/759/" target="_top">egtra</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9428/">#9428</a>(<script language="JavaScript">print_time(new Date("2009/07/29 07:09 GMT"));</script><noscript>2009/07/29 07:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>これもまた全探索です。「ン」やその他リスト内でこれ以上続けられない単語をstopWordSetとして別扱いにしたり、少々の枝刈りもどきをやったり、OpenMPで並列処理したりしていますが焼け石に水ですね。110単語程度で数秒かかります。それ以上は面倒なので試していません。</p>
<p>ラムダ式を使ったりPStade.Ovenを使ったり節操ないことになっていますがご容赦を。VC++ 2010でコンパイルしています。</p>
<p>コピーを避けるため、しりとりの並びの表現においてconst std::wstring*で文字列を扱っていますが、それらが指す文字列はwordSetとstopWordSetの要素であり、ポインタの有効期限はその2つに変更があるまでです。このプログラムでは、その点問題ないようになっています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#define WINVER 0x0400</span>
<span class="cp">#define _WIN32_WINDOWS 0</span>
<span class="cp">#define _WIN32_WINNT 0</span>
<span class="cp">#define _WIN32_IE 0</span>

<span class="cp">#define _SECURE_SCL 0</span>
<span class="cp">#define _CRT_SECURE_NO_WARNINGS</span>
<span class="cp">#define _SCL_SECURE_NO_WARNINGS</span>
<span class="cp">#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1</span>

<span class="cp">#define WIN32_LEAN_AND_MEAN</span>

<span class="cp">#pragma warning(disable: 4512 4819)</span>

<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>
<span class="cp">#include &lt;locale&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;deque&gt;</span>
<span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;numeric&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;memory&gt;</span>
<span class="cp">#include &lt;utility&gt;</span>
<span class="cp">#include &lt;climits&gt;</span>

<span class="cp">#include &lt;omp.h&gt;</span>

<span class="cp">#include &lt;boost/timer.hpp&gt;</span>
<span class="cp">#include &lt;boost/range.hpp&gt;</span>
<span class="cp">#include &lt;boost/iterator_adaptors.hpp&gt;</span>
<span class="cp">#include &lt;boost/cast.hpp&gt;</span>

<span class="cp">#include &lt;pstade/oven/filtered.hpp&gt;</span>
<span class="cp">#include &lt;pstade/oven/algorithm.hpp&gt;</span>
<span class="cp">#include &lt;pstade/oven/numeric.hpp&gt;</span>
<span class="cp">#include &lt;pstade/oven/indirected.hpp&gt;</span>

<span class="cp">#include &lt;windows.h&gt;</span>

<span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">numeric_cast</span><span class="p">;</span>
<span class="k">namespace</span> <span class="n">ov</span> <span class="o">=</span> <span class="n">pstade</span><span class="o">::</span><span class="n">oven</span><span class="p">;</span>

<span class="n">HANDLE</span> <span class="n">hProcessHeap</span><span class="p">;</span>
<span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hProcessHeap</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">hProcessHeap</span> <span class="o">=</span> <span class="n">GetProcessHeap</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">HeapAlloc</span><span class="p">(</span><span class="n">hProcessHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">size</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="n">bad_alloc</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="kt">void</span><span class="o">*</span> <span class="k">operator</span> <span class="k">new</span><span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="k">operator</span> <span class="k">new</span><span class="p">(</span><span class="n">size</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HeapFree</span><span class="p">(</span><span class="n">hProcessHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="k">operator</span> <span class="k">delete</span><span class="p">[](</span><span class="kt">void</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">operator</span> <span class="k">delete</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">WordInfo</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">Word</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="n">MaximumLength</span><span class="p">;</span> <span class="c">//このWordから始めた場合に最も長く続た場合に得られる可能性のある長さ</span>

    <span class="k">explicit</span> <span class="n">WordInfo</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">&amp;</span> <span class="n">word</span><span class="p">)</span> <span class="o">:</span> <span class="n">Word</span><span class="p">(</span><span class="n">word</span><span class="p">),</span> <span class="n">MaximumLength</span><span class="p">(</span><span class="n">UINT_MAX</span><span class="p">)</span> <span class="p">{}</span>
    <span class="k">explicit</span> <span class="n">WordInfo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">&amp;&amp;</span> <span class="n">word</span><span class="p">)</span> <span class="o">:</span> <span class="n">Word</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">word</span><span class="p">)),</span> <span class="n">MaximumLength</span><span class="p">(</span><span class="n">UINT_MAX</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">WordInfo</span><span class="p">(</span><span class="k">const</span> <span class="n">WordInfo</span><span class="o">&amp;</span> <span class="n">wi</span><span class="p">)</span> <span class="o">:</span> <span class="n">Word</span><span class="p">(</span><span class="n">wi</span><span class="p">.</span><span class="n">Word</span><span class="p">),</span> <span class="n">MaximumLength</span><span class="p">(</span><span class="n">wi</span><span class="p">.</span><span class="n">MaximumLength</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">WordInfo</span><span class="p">(</span><span class="n">WordInfo</span><span class="o">&amp;&amp;</span> <span class="n">wi</span><span class="p">)</span> <span class="o">:</span> <span class="n">Word</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">wi</span><span class="p">.</span><span class="n">Word</span><span class="p">)),</span> <span class="n">MaximumLength</span><span class="p">(</span><span class="n">wi</span><span class="p">.</span><span class="n">MaximumLength</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">WordInfo</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">WordInfo</span><span class="o">&amp;</span> <span class="n">wi</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="o">*</span><span class="k">this</span> <span class="o">=</span> <span class="n">WordInfo</span><span class="p">(</span><span class="n">wi</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">WordInfo</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span><span class="p">(</span><span class="n">WordInfo</span><span class="o">&amp;&amp;</span> <span class="n">wi</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Word</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">wi</span><span class="p">.</span><span class="n">Word</span><span class="p">);</span>
        <span class="n">MaximumLength</span> <span class="o">=</span> <span class="n">wi</span><span class="p">.</span><span class="n">MaximumLength</span><span class="p">;</span>
        <span class="n">wi</span><span class="p">.</span><span class="n">MaximumLength</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="k">return</span> <span class="o">*</span><span class="k">this</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">StringFirstComparer</span> <span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">binary_function</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">WordInfo</span><span class="o">&amp;</span><span class="p">,</span> <span class="k">const</span> <span class="n">WordInfo</span><span class="o">&amp;</span><span class="p">,</span> <span class="kt">bool</span><span class="o">&gt;</span>
<span class="p">{</span>
    <span class="n">result_type</span> <span class="k">operator</span> <span class="p">()(</span><span class="n">first_argument_type</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">second_argument_type</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">lhs</span><span class="p">.</span><span class="n">Word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">rhs</span><span class="p">.</span><span class="n">Word</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">WordInfo</span><span class="o">&gt;</span> <span class="n">wordset_t</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">WordResultList</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">WordResultList</span><span class="o">&gt;</span> <span class="n">wordresult_t</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">WordResultList</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">static</span> <span class="n">wordresult_t</span> <span class="n">Create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*</span> <span class="n">word</span><span class="p">,</span> <span class="n">wordresult_t</span> <span class="n">next</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">iterator</span> <span class="o">:</span> <span class="n">boost</span><span class="o">::</span><span class="n">iterator_adaptor</span><span class="o">&lt;</span>
        <span class="n">iterator</span><span class="p">,</span>
        <span class="n">WordResultList</span><span class="o">*</span><span class="p">,</span>
        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*</span><span class="p">,</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">forward_traversal_tag</span><span class="o">&gt;</span>
    <span class="p">{</span>
        <span class="n">iterator</span><span class="p">(</span><span class="n">WordResultList</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="o">:</span> <span class="n">iterator_adaptor_</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="p">{}</span>
        <span class="kt">void</span> <span class="n">increment</span><span class="p">()</span> <span class="p">{</span> <span class="n">base_reference</span><span class="p">()</span> <span class="o">=</span> <span class="n">base</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">.</span><span class="n">get</span><span class="p">();</span> <span class="p">}</span>
        <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&amp;</span> <span class="n">dereference</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">base_reference</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">word</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">};</span>
    <span class="n">iterator</span> <span class="n">begin</span><span class="p">(){</span> <span class="k">return</span> <span class="n">iterator</span><span class="p">(</span><span class="k">this</span><span class="p">);</span> <span class="p">}</span>
    <span class="n">iterator</span> <span class="n">end</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="n">iterator</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span> <span class="p">}</span>
    <span class="kt">unsigned</span> <span class="n">size</span><span class="p">()</span> <span class="p">{</span><span class="k">return</span> <span class="n">listSize</span><span class="p">;}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">WordResultList</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*</span> <span class="n">word</span><span class="p">,</span> <span class="n">wordresult_t</span> <span class="n">nextWord</span><span class="p">)</span>
        <span class="o">:</span> <span class="n">word</span><span class="p">(</span><span class="n">word</span><span class="p">),</span> <span class="n">next</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">nextWord</span><span class="p">)),</span> <span class="n">listSize</span><span class="p">(</span><span class="n">next</span><span class="p">.</span><span class="n">get</span><span class="p">()</span> <span class="o">?</span> <span class="n">next</span><span class="o">-&gt;</span><span class="n">listSize</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span> <span class="c">//初めは定義していたが、使わないので削除した。</span>
    <span class="n">WordResultList</span><span class="p">(</span><span class="k">const</span> <span class="n">WordResultList</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">WordResultList</span><span class="p">(</span><span class="n">WordResultList</span><span class="o">&amp;&amp;</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">WordResultList</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">WordResultList</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">WordResultList</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span><span class="p">(</span><span class="n">WordResultList</span><span class="o">&amp;&amp;</span> <span class="n">y</span><span class="p">);</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">wordresult_t</span> <span class="n">next</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="n">listSize</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*</span> <span class="n">word</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">wordresult_t</span> <span class="n">WordResultList</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*</span> <span class="n">word</span><span class="p">,</span> <span class="n">wordresult_t</span> <span class="n">next</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kr">__declspec</span><span class="p">(</span><span class="kr">thread</span><span class="p">)</span> <span class="k">static</span> <span class="n">HANDLE</span> <span class="n">hHeap</span><span class="p">;</span> <span class="c">// スレッドごとに異なるヒープを用意</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">hHeap</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ULONG</span> <span class="n">flags</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
        <span class="n">hHeap</span> <span class="o">=</span> <span class="n">HeapCreate</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">8192</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c">//HeapDestroyしていません。ごめんなさい。</span>
        <span class="n">HeapSetInformation</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="n">HeapCompatibilityInformation</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">flags</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">flags</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="kt">void</span><span class="o">*</span> <span class="n">raw</span> <span class="o">=</span> <span class="n">HeapAlloc</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">WordResultList</span><span class="p">);</span>
    <span class="n">wordresult_t</span> <span class="n">p</span><span class="p">(</span><span class="k">new</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span> <span class="n">WordResultList</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">next</span><span class="p">)),</span> <span class="p">[](</span><span class="n">WordResultList</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span><span class="n">p</span><span class="o">-&gt;~</span><span class="n">WordResultList</span><span class="p">();</span><span class="n">HeapFree</span><span class="p">(</span><span class="n">hHeap</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">p</span><span class="p">);});</span>
    <span class="c">//wordresult_t p(new WordResultList(word, std::move(next)));</span>
    <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// 最も長いしりとりの列を返す。</span>
<span class="c">// ただし、これまでの経過をresultList、次に使う言葉をnextWordとする。</span>
<span class="n">wordresult_t</span> <span class="n">GetLongestShifitoriListImpl</span><span class="p">(</span>
    <span class="n">wordresult_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">resultList</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*</span> <span class="n">nextWord</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">wordset_t</span><span class="o">&amp;</span> <span class="n">wordSet</span><span class="p">,</span>
    <span class="k">const</span> <span class="n">wordset_t</span><span class="o">&amp;</span> <span class="n">stopWordSet</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="p">;</span>
    <span class="n">wordresult_t</span> <span class="n">result</span> <span class="o">=</span> <span class="n">WordResultList</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="n">nextWord</span><span class="p">,</span> <span class="n">resultList</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">resultList</span> <span class="o">&amp;&amp;</span> <span class="o">**</span><span class="n">resultList</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">()</span> <span class="o">==</span> <span class="s">L&quot;セイキハ&quot;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">nextWord</span> <span class="o">==</span> <span class="s">L&quot;ハケヤマ&quot;</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">Sleep</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">WordInfo</span> <span class="n">lastChar</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">nextWord</span><span class="o">-&gt;</span><span class="n">back</span><span class="p">()));</span>
    <span class="c">//nextWordの終わりの文字で始まる言葉を抽出。</span>
    <span class="k">auto</span> <span class="n">r</span> <span class="o">=</span> <span class="n">ov</span><span class="o">::</span><span class="n">equal_range</span><span class="p">(</span><span class="n">wordSet</span><span class="p">,</span> <span class="n">lastChar</span><span class="p">,</span> <span class="n">StringFirstComparer</span><span class="p">())</span>
        <span class="o">|</span> <span class="n">ov</span><span class="o">::</span><span class="n">filtered</span><span class="p">([</span><span class="o">&amp;</span><span class="n">result</span><span class="p">](</span><span class="n">WordInfo</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span>
            <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">find_if</span><span class="p">(</span><span class="n">result</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">(),</span> <span class="n">result</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">e</span><span class="p">](</span><span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="k">const</span><span class="o">*</span> <span class="n">p</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span><span class="k">return</span> <span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="n">e</span><span class="p">.</span><span class="n">Word</span><span class="p">;});</span>
            <span class="k">return</span> <span class="n">it</span> <span class="o">==</span> <span class="n">result</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">();</span> <span class="c">// 使用済みの単語を除外</span>
        <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">boost</span><span class="o">::</span><span class="n">empty</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="c">// 見つかれば再帰コースへ行く。</span>
        <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">wordresult_t</span><span class="p">,</span> <span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">result_info_t</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="n">result_info_t</span><span class="p">(),</span>
            <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">result_info_t</span> <span class="o">&amp;&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">WordInfo</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">result_info_t</span>
            <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;=</span> <span class="n">e</span><span class="p">.</span><span class="n">MaximumLength</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">return</span> <span class="n">lhs</span><span class="p">;</span> <span class="c">// e.Wordでしりとりを続けても絶対にlhs.firstより長くならない。</span>
                <span class="p">}</span>
                <span class="k">auto</span> <span class="n">rhs</span> <span class="o">=</span> <span class="n">GetLongestShifitoriListImpl</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">.</span><span class="n">Word</span><span class="p">,</span> <span class="n">wordSet</span><span class="p">,</span> <span class="n">stopWordSet</span><span class="p">);</span>
                <span class="k">return</span> <span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">first</span> <span class="o">?</span> <span class="n">lhs</span><span class="p">.</span><span class="n">first</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span>
                    <span class="o">?</span> <span class="n">lhs</span>
                    <span class="o">:</span> <span class="n">result_info_t</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">rhs</span><span class="p">),</span> <span class="n">rhs</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">());</span>
            <span class="p">}).</span><span class="n">first</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="c">// wordSetから追加できなかった場合、stopWordSetからの追加を試みて終了する。</span>
        <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">ov</span><span class="o">::</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">stopWordSet</span><span class="p">,</span> <span class="n">lastChar</span><span class="p">,</span> <span class="n">StringFirstComparer</span><span class="p">());</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">stopWordSet</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">Word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">lastChar</span><span class="p">.</span><span class="n">Word</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">WordResultList</span><span class="o">::</span><span class="n">Create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">Word</span><span class="p">,</span> <span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;</span> <span class="n">GetLongestShifitoriList</span><span class="p">(</span><span class="n">wordset_t</span><span class="o">&amp;</span> <span class="n">wordSet</span><span class="p">,</span> <span class="k">const</span> <span class="n">wordset_t</span><span class="o">&amp;</span> <span class="n">stopWordSet</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;</span> <span class="n">result</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">wordSet</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">stopWordSet</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">result</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="o">&amp;</span><span class="n">stopWordSet</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">-&gt;</span><span class="n">Word</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="c">// スレッド別に最も長かった結果を保持</span>
        <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;&gt;</span> <span class="n">allResult</span><span class="p">(</span><span class="n">omp_get_max_threads</span><span class="p">());</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">wordSetSize</span> <span class="o">=</span> <span class="n">numeric_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">wordSet</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>

<span class="cp">#pragma omp parallel for schedule(static)</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">wordSetSize</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="c">// 全単語について、その単語から始まるしりとりの列を生成してみる。</span>
            <span class="k">auto</span> <span class="n">r</span> <span class="o">=</span> <span class="n">GetLongestShifitoriListImpl</span><span class="p">(</span><span class="n">wordresult_t</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">wordSet</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Word</span><span class="p">,</span> <span class="n">wordSet</span><span class="p">,</span> <span class="n">stopWordSet</span><span class="p">);</span>
            <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;</span> <span class="n">t</span><span class="p">;</span>
            <span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">r</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">(),</span> <span class="n">r</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">front_inserter</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>
            <span class="c">// wordSet[i].Wordから始めた場合に最も長い(= wordSetとstopWordSetの全単語を使えるとき)列の長さを記憶</span>
            <span class="n">wordSet</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">MaximumLength</span> <span class="o">=</span> <span class="n">numeric_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">());</span> <span class="c">//この代入、特にマルチスレッド対策していないけど許して。</span>
            <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;&amp;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">allResult</span><span class="p">[</span><span class="n">omp_get_thread_num</span><span class="p">()];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cur</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">||</span> <span class="n">cur</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="c">// allResultから最も長いものを選び出して、それを返す。</span>
        <span class="k">return</span> <span class="o">*</span><span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">allResult</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">allResult</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;*&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">result</span><span class="p">),</span>
        <span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;</span> <span class="k">const</span><span class="o">*</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">deque</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">*&gt;*</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">lhs</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">()</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">?</span> <span class="n">lhs</span> <span class="o">:</span> <span class="o">&amp;</span><span class="n">rhs</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">namespace</span>
<span class="p">{</span>
    <span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">wchar_t</span><span class="p">,</span> <span class="kt">wchar_t</span><span class="o">&gt;</span> <span class="n">dakuon_t</span><span class="p">;</span>

    <span class="k">const</span> <span class="n">dakuon_t</span> <span class="n">dakuonReplaceList</span><span class="p">[]</span> <span class="o">=</span>
    <span class="p">{</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ガ&#39;</span><span class="p">,</span> <span class="sc">L&#39;カ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ギ&#39;</span><span class="p">,</span> <span class="sc">L&#39;キ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;グ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ク&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ゲ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ケ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ゴ&#39;</span><span class="p">,</span> <span class="sc">L&#39;コ&#39;</span><span class="p">),</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ザ&#39;</span><span class="p">,</span> <span class="sc">L&#39;サ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ジ&#39;</span><span class="p">,</span> <span class="sc">L&#39;シ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ズ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ス&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ゼ&#39;</span><span class="p">,</span> <span class="sc">L&#39;セ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ゾ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ソ&#39;</span><span class="p">),</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ダ&#39;</span><span class="p">,</span> <span class="sc">L&#39;タ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ヂ&#39;</span><span class="p">,</span> <span class="sc">L&#39;チ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ヅ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ツ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;デ&#39;</span><span class="p">,</span> <span class="sc">L&#39;テ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ド&#39;</span><span class="p">,</span> <span class="sc">L&#39;ト&#39;</span><span class="p">),</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;バ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ハ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ビ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ヒ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ブ&#39;</span><span class="p">,</span> <span class="sc">L&#39;フ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ベ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ヘ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ボ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ホ&#39;</span><span class="p">),</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;パ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ハ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ピ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ヒ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;プ&#39;</span><span class="p">,</span> <span class="sc">L&#39;フ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ペ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ヘ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ポ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ホ&#39;</span><span class="p">),</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ァ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ア&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ィ&#39;</span><span class="p">,</span> <span class="sc">L&#39;イ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ゥ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ウ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ェ&#39;</span><span class="p">,</span> <span class="sc">L&#39;エ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ォ&#39;</span><span class="p">,</span> <span class="sc">L&#39;オ&#39;</span><span class="p">),</span>
        <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ャ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ヤ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ュ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ユ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ョ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ヨ&#39;</span><span class="p">),</span> <span class="n">dakuon_t</span><span class="p">(</span><span class="sc">L&#39;ッ&#39;</span><span class="p">,</span> <span class="sc">L&#39;ツ&#39;</span><span class="p">),</span>
    <span class="p">};</span>
    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">wchar_t</span><span class="p">,</span> <span class="kt">wchar_t</span><span class="o">&gt;</span> <span class="n">dakuonRepalceMap</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">dakuonReplaceList</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">dakuonReplaceList</span><span class="p">));</span>
<span class="p">}</span>
<span class="c">// 濁音・半濁音・拗音を清音に修正</span>
<span class="kt">void</span> <span class="n">dakuonReplace</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="o">&amp;</span> <span class="n">word</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">word</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[](</span><span class="kt">wchar_t</span><span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">dakuonRepalceMap</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">dakuonRepalceMap</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">c</span> <span class="o">=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="c">// wordSetのうち、後に続く言葉が全くないものを「ん」で終わる言葉と同様にstopWordSetへ移動させる。</span>
<span class="kt">void</span> <span class="n">AdjustStopWord</span><span class="p">(</span><span class="n">wordset_t</span><span class="o">&amp;</span> <span class="n">wordSet</span><span class="p">,</span> <span class="n">wordset_t</span><span class="o">&amp;</span> <span class="n">stopWordSet</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">remove_if</span><span class="p">(</span><span class="n">wordSet</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">wordSet</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
        <span class="p">[</span><span class="o">&amp;</span><span class="n">wordSet</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">stopWordSet</span><span class="p">](</span><span class="k">const</span> <span class="n">WordInfo</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span>
    <span class="p">{</span>
        <span class="c">//WordInfo lastChar(std::wstring(1, e.Word.back()));</span>
        <span class="k">const</span> <span class="kt">wchar_t</span> <span class="n">l</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Word</span><span class="p">.</span><span class="n">back</span><span class="p">();</span>
        <span class="k">auto</span> <span class="n">pr</span> <span class="o">=</span> <span class="p">[</span><span class="n">l</span><span class="p">](</span><span class="n">WordInfo</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">bool</span> <span class="p">{</span><span class="k">return</span> <span class="n">e</span><span class="p">.</span><span class="n">Word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">l</span><span class="p">;};</span>
        <span class="k">return</span> <span class="n">ov</span><span class="o">::</span><span class="n">find_if</span><span class="p">(</span><span class="n">wordSet</span><span class="p">,</span> <span class="n">pr</span><span class="p">)</span> <span class="o">==</span> <span class="n">wordSet</span><span class="p">.</span><span class="n">end</span><span class="p">()</span>
            <span class="o">&amp;&amp;</span> <span class="n">ov</span><span class="o">::</span><span class="n">find_if</span><span class="p">(</span><span class="n">stopWordSet</span><span class="p">,</span> <span class="n">pr</span><span class="p">)</span> <span class="o">==</span> <span class="n">stopWordSet</span><span class="p">.</span><span class="n">end</span><span class="p">();</span>
    <span class="p">});</span>
    <span class="n">wordSet</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">wordSet</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">ov</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">stopWordSet</span><span class="p">,</span> <span class="n">StringFirstComparer</span><span class="p">());</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">locale</span> <span class="n">l</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wcout</span><span class="p">.</span><span class="n">imbue</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wstring</span> <span class="n">s</span><span class="p">;</span>
    <span class="n">wordset_t</span> <span class="n">wordSet</span><span class="p">;</span>
    <span class="n">wordset_t</span> <span class="n">stopWordSet</span><span class="p">;</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">wifstream</span> <span class="n">is</span><span class="p">(</span><span class="s">&quot;h:</span><span class="se">\\</span><span class="s">t.txt&quot;</span><span class="p">);</span>
        <span class="n">is</span><span class="p">.</span><span class="n">imbue</span><span class="p">(</span><span class="n">l</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">is</span> <span class="o">&gt;&gt;</span> <span class="n">s</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">dakuonReplace</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">s</span><span class="p">.</span><span class="n">length</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="sc">L&#39;ン&#39;</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">stopWordSet</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">WordInfo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">s</span><span class="p">)));</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="n">wordSet</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">WordInfo</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">s</span><span class="p">)));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">ov</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">wordSet</span><span class="p">,</span> <span class="n">StringFirstComparer</span><span class="p">());</span>
    <span class="n">ov</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">stopWordSet</span><span class="p">,</span> <span class="n">StringFirstComparer</span><span class="p">());</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">timer</span> <span class="n">t</span><span class="p">;</span>
    <span class="n">AdjustStopWord</span><span class="p">(</span><span class="n">wordSet</span><span class="p">,</span> <span class="n">stopWordSet</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wcout</span> <span class="o">&lt;&lt;</span> <span class="s">L&quot;start time: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">elapsed</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">L&#39;\n&#39;</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">GetLongestShifitoriList</span><span class="p">(</span><span class="n">wordSet</span><span class="p">,</span> <span class="n">stopWordSet</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wcout</span> <span class="o">&lt;&lt;</span> <span class="s">L&quot;end time: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">elapsed</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">L&#39;\n&#39;</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wcout</span> <span class="o">&lt;&lt;</span> <span class="s">L&quot;size: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">result</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="sc">L&#39;\n&#39;</span><span class="p">;</span>
    <span class="n">ov</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">result</span> <span class="o">|</span> <span class="n">ov</span><span class="o">::</span><span class="n">indirected</span>
        <span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">wstring</span><span class="p">,</span> <span class="kt">wchar_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">wcout</span><span class="p">,</span> <span class="s">L&quot; &quot;</span><span class="p">));</span>
    <span class="n">std</span><span class="o">::</span><span class="n">wcout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9428/addtag/" class="addtag" id="addtag_9428">タグ</a>:
	
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/Boost1.39/">Boost1.39</a>
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/C%2B%2B0x/">C++0x</a>
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/PStade.Oven/">PStade.Oven</a>
    
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9428/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9428/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9428"
  >-</span><span
  class="button yellow"
  id="rating_z_9428"
  >0</span><span 
  class="button green"
  id="rating_p_9428"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9428/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9429">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9429/">#9429</a>(<script language="JavaScript">print_time(new Date("2009/07/30 13:38 GMT"));</script><noscript>2009/07/30 13:38 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>どうやって枝を刈ったのか興味があってしばらくにらめっこしてました。</p>
<p>それで気がついたんですが、これって入力が &quot;cb bc ab bd&quot; のとき &quot;cb bc&quot; が返って来ませんか？(もっと長い &quot;ab bc cb bd&quot; があります)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9429/addtag/" class="addtag" id="addtag_9429">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9429"
  >-</span><span
  class="button yellow"
  id="rating_z_9429"
  >0</span><span 
  class="button green"
  id="rating_p_9429"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9414/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9429/root/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9429/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9439">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9439/">#9439</a>(<script language="JavaScript">print_time(new Date("2009/08/02 15:20 GMT"));</script><noscript>2009/08/02 15:20 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>リチャード・ドーキンスの「 遺伝子の川」を読んでヒントを得たロジックです。
各単語をDNA切片と見なし、接続可能な全相手との新切片をリストに追加していきます。
100語程度以上では計算量が多くなります。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre><span class="c1"># -*- coding: utf-8 -*-</span>

<span class="n">word_list</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">max_word_list</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">max_word_list_lth</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="n">w</span> <span class="o">=</span> <span class="nb">gets</span>
  <span class="n">w</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="p">()</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
    <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">//</span><span class="p">)</span>
    <span class="n">word_list</span> <span class="o">&lt;&lt;</span> <span class="o">[[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="n">ii</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">ii</span><span class="o">[-</span><span class="mi">1</span><span class="o">]]</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="k">while</span> <span class="n">w</span> <span class="o">=</span> <span class="n">word_list</span><span class="o">.</span><span class="n">shift</span>
  <span class="k">if</span> <span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">max_word_list_lth</span>
    <span class="n">max_word_list</span> <span class="o">=</span> <span class="n">w</span>
    <span class="n">max_word_list_lth</span> <span class="o">=</span> <span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">size</span>
  <span class="k">end</span>
  <span class="n">word_list</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
    <span class="n">word_list</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">w</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">i</span><span class="o">[</span><span class="mi">2</span><span class="o">]]</span> <span class="k">if</span> <span class="p">(</span><span class="n">w</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="p">(</span><span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">))</span>
    <span class="n">word_list</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">w</span><span class="o">[</span><span class="mi">2</span><span class="o">]]</span> <span class="k">if</span> <span class="p">(</span><span class="n">w</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">i</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="p">(</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">-</span> <span class="n">w</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">))</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;max= %d words , %s</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="n">max_word_list_lth</span><span class="p">,</span> <span class="n">max_word_list</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9439/addtag/" class="addtag" id="addtag_9439">タグ</a>:
	
    
    <a href="/web/20100712021426/http://ja.doukaku.org/tag/ruby1.9.0/">ruby1.9.0</a>
    
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9439/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9439/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9439"
  >-</span><span
  class="button yellow"
  id="rating_z_9439"
  >0</span><span 
  class="button green"
  id="rating_p_9439"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9439/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9467">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/498/" target="_top">eo-oe-aaaa</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9467/">#9467</a>(<script language="JavaScript">print_time(new Date("2009/08/10 06:07 GMT"));</script><noscript>2009/08/10 06:07 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>とりあえずの愚直実装。
３５０語くらいなら一瞬ででるんですが、
その先はぜんぜん終わる気配がないです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Word</span>
<span class="k">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Tango</span><span class="k">{get</span><span class="p">;</span><span class="k">set</span><span class="p">;</span><span class="k">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">Used</span><span class="k">{get</span><span class="p">;</span><span class="k">set</span><span class="p">;</span><span class="k">}</span>

    <span class="k">public</span> <span class="nf">Word</span><span class="p">(</span><span class="kt">string</span> <span class="n">t</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">Tango</span> <span class="p">=</span> <span class="n">t</span><span class="p">;</span>
        <span class="n">Used</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="kt">char</span> <span class="nf">First</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="k">return</span> <span class="n">Tango</span><span class="p">.</span><span class="n">First</span><span class="p">();</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="kt">char</span> <span class="nf">Last</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="k">return</span> <span class="n">Tango</span><span class="p">.</span><span class="n">Last</span><span class="p">();</span>
    <span class="k">}</span>
<span class="k">}</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
    <span class="k">static</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Word</span><span class="p">&gt;&gt;</span> <span class="n">wordDic</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Word</span><span class="p">&gt;&gt;();</span>
    <span class="k">static</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Word</span><span class="p">&gt;</span> <span class="n">wordList</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Word</span><span class="p">&gt;();</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">maxcount</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="n">Word</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">Word</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">wordDic</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">First</span><span class="p">()))</span>
        <span class="k">{</span>
            <span class="n">list</span> <span class="p">=</span> <span class="n">wordDic</span><span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">First</span><span class="p">()];</span>
        <span class="k">}</span>
        <span class="k">else</span>
        <span class="k">{</span>
            <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Word</span><span class="p">&gt;();</span>
            <span class="n">wordDic</span><span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">First</span><span class="p">()]</span> <span class="p">=</span> <span class="n">list</span><span class="p">;</span>
        <span class="k">}</span>

        <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">word</span><span class="p">);</span>
    <span class="k">}</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">using</span> <span class="p">(</span><span class="n">StreamReader</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="s">&quot;D:\\tango.txt&quot;</span><span class="p">))</span>
        <span class="k">{</span>
            <span class="kt">string</span> <span class="n">line</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">((</span><span class="n">line</span> <span class="p">=</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="n">Word</span> <span class="n">w</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Word</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
                <span class="n">Add</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
                <span class="n">wordList</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="n">Word</span> <span class="n">word</span> <span class="k">in</span> <span class="n">wordList</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">Shiritori</span><span class="p">(</span><span class="n">word</span><span class="p">);</span>
        <span class="k">}</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Finish&quot;</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Read</span><span class="p">();</span>
    <span class="k">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Shiritori</span><span class="p">(</span><span class="n">Word</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">word</span><span class="p">.</span><span class="n">Used</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">++</span><span class="n">count</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">wordDic</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">Last</span><span class="p">()))</span>
        <span class="k">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="n">Word</span> <span class="n">t2</span> <span class="k">in</span> <span class="n">wordDic</span><span class="p">[</span><span class="n">word</span><span class="p">.</span><span class="n">Last</span><span class="p">()])</span>
            <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">Used</span> <span class="p">==</span> <span class="k">false</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="n">Shiritori</span><span class="p">(</span><span class="n">t2</span><span class="p">);</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="n">SetCount</span><span class="p">(</span><span class="n">count</span><span class="p">);</span>
        <span class="p">--</span><span class="n">count</span><span class="p">;</span>
        <span class="n">word</span><span class="p">.</span><span class="n">Used</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">SetCount</span><span class="p">(</span><span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">maxcount</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">maxcount</span> <span class="p">=</span> <span class="n">count</span><span class="p">;</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">maxcount</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9467/addtag/" class="addtag" id="addtag_9467">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9467/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9467/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9467"
  >-</span><span
  class="button yellow"
  id="rating_z_9467"
  >0</span><span 
  class="button green"
  id="rating_p_9467"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9467/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9483">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9483/">#9483</a>(<script language="JavaScript">print_time(new Date("2009/08/14 20:34 GMT"));</script><noscript>2009/08/14 20:34 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>　素直に書いてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre>import    java.io.{BufferedReader, FileInputStream, InputStreamReader}
import    scala.collection.immutable.HashMap

class WordchainGame(var p:String) {
    var    d:List[String] = null
    def initialize:WordchainGame = {
        def loop(r:BufferedReader):List[String] = r.readLine match {
                case null =&gt; List[String]()
                case l:String =&gt; l.split(&quot;\t&quot;).toList ++ loop(r)
            }
        d = loop(new BufferedReader(new InputStreamReader(new FileInputStream(p),&quot;Shift_JIS&quot;))).map(_.takeWhile(_ != &#39;*&#39;).mkString).filter(_.length &gt; 0)
        this
    }
    def play:List[List[String]] = {
        val    r:Map[Char,Char] = HashMap((&#39;ァ&#39;,&#39;ア&#39;),(&#39;ィ&#39;,&#39;イ&#39;),(&#39;ゥ&#39;,&#39;ウ&#39;),(&#39;ェ&#39;,&#39;エ&#39;),(&#39;ォ&#39;,&#39;オ&#39;),(&#39;ッ&#39;,&#39;ツ&#39;),(&#39;ャ&#39;,&#39;ヤ&#39;),(&#39;ュ&#39;,&#39;ユ&#39;),(&#39;ョ&#39;,&#39;ヨ&#39;))
        def loop(g:List[String], l:List[String]):List[List[String]] = l match {
                case List() =&gt; List(g)
                case _ =&gt;(
                        g match {
                                case List() =&gt; l
                                case _ =&gt; {
                                    val    t:Char = if (r.contains(g.first.last)) r(g.first.last) else g.first.last
                                    l.filter(_.first == t)
                                }
                            }
                    ).flatMap((w) =&gt; w.last match {
                                case &#39;ン&#39; =&gt; List(w::g)
                                case _ =&gt; loop(w::g, l.filter(_ != w))
                            }
                        )
            }
        loop(List[String](), d)
    }
}

object WordchainCombination {
    def main(args:Array[String]):Unit =
        if (args.length != 1)
            println(&quot;usage: WordchainCombination WORDLIST_FILE&quot;)
        else
            try {
                println(new WordchainGame(args.first).initialize.play.sort(_.length &gt; _.length).first.reverse.mkString(&quot;-&gt;&quot;))
            } catch {
                case ex =&gt; ex.printStackTrace 
            }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9483/addtag/" class="addtag" id="addtag_9483">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9483/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9483/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9483"
  >-</span><span
  class="button yellow"
  id="rating_z_9483"
  >0</span><span 
  class="button green"
  id="rating_p_9483"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9483/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9523">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1094/" target="_top">Wiles</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9523/">#9523</a>(<script language="JavaScript">print_time(new Date("2009/08/27 07:24 GMT"));</script><noscript>2009/08/27 07:24 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>単純に比較しているだけなので、160単語くらいが限界のようです。</p>
<p>お題のサンプルでは、(アイアイ、イチブン、…、ソノミチ、タテガミ）の161単語で(シールド、ドウナガ、…、ムササビ、ビンラン)の8連続が見つかりました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;</span>
<span class="cp">#include&lt;string.h&gt;</span>
<span class="cp">#define WORDMAX 500</span>
<span class="cp">#define MAXLEN 50</span>

<span class="kt">char</span> <span class="n">word</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">][</span><span class="n">MAXLEN</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">check</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">],</span> <span class="n">temp</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">],</span> <span class="n">words</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">],</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cntmax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxmax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">siritori</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">word</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">check</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wordnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    
    <span class="n">temp</span><span class="p">[</span><span class="n">cnt</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">wordnum</span><span class="p">;</span>                                    <span class="c">//tmp[]に現在までの語順を保存</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>                                    <span class="c">//word[0]からword[n-1]までについて、繋がるか調べる</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">))</span>    <span class="k">continue</span><span class="p">;</span>    <span class="c">//自分自身が比較対象になった場合</span>
        <span class="k">if</span><span class="p">((</span><span class="o">*</span><span class="p">(</span><span class="n">word</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> 
            <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">word</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">)))</span>
            <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="p">(</span><span class="n">check</span> <span class="o">+</span> <span class="n">i</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="o">*</span><span class="p">(</span><span class="n">check</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">siritori</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">check</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">cntmax</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">cntmax</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cntmax</span> <span class="o">&gt;</span> <span class="n">maxmax</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">maxmax</span> <span class="o">=</span> <span class="n">cntmax</span><span class="p">;</span>
                <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">cntmax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>                    <span class="c">//最も長続きする場合の語順をコピー</span>
                <span class="p">{</span>
                    <span class="n">words</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="o">*</span><span class="p">(</span><span class="n">check</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
    
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">check</span><span class="p">[</span><span class="mi">1000</span><span class="p">],</span> <span class="n">buf</span><span class="p">[</span><span class="mi">100</span><span class="p">][</span><span class="mi">1000</span><span class="p">];</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">in</span><span class="p">;</span>
    
    <span class="k">if</span><span class="p">((</span><span class="n">in</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;wordlist.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">&quot;wordlist.txtが読み込めませんでした&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">in</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">fscanf</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>                                <span class="c">//word[i]を始点とする</span>
    <span class="p">{</span>
        <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                                    <span class="c">//word[i]を使用済みとする</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                                        <span class="c">//cntをリセット</span>
        <span class="n">siritori</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">word</span><span class="p">,</span> <span class="n">check</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
        <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                                    <span class="c">//調べ終わったら、word[i]を未使用とする</span>
    <span class="p">}</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;result:&quot;</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cntmax</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9523/addtag/" class="addtag" id="addtag_9523">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9523/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9523/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9523"
  >-</span><span
  class="button yellow"
  id="rating_z_9523"
  >0</span><span 
  class="button green"
  id="rating_p_9523"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100712021426/http://ja.doukaku.org/comment/9523/">
    1
    reply
  </a>

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9523/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9524">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1094/" target="_top">Wiles</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/">#9524</a>(<script language="JavaScript">print_time(new Date("2009/08/27 08:30 GMT"));</script><noscript>2009/08/27 08:30 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>すみません、コード＆サンプルデータに欠陥があったので修正しました。</p>
<p>(アイアイ、イチブン、…、ヌリムラ、ハヤブサ)の180単語で、(ミズヒキ、キャクアシ、…、ガイユウ、ウラガネ)の13連続が見つかりました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;</span>
<span class="cp">#include&lt;string.h&gt;</span>
<span class="cp">#define WORDMAX 500</span>
<span class="cp">#define MAXLEN 50</span>

<span class="kt">char</span> <span class="n">word</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">][</span><span class="n">MAXLEN</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">temp</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">],</span> <span class="n">words</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">],</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">cntmax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">maxmax</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">siritori</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">word</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">base</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">check</span><span class="p">,</span> <span class="kt">int</span> <span class="n">wordnum</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    
    <span class="n">temp</span><span class="p">[</span><span class="n">cnt</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">wordnum</span><span class="p">;</span>                                    <span class="c">//tmp[]に現在までの語順を保存</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>                                    <span class="c">//word[0]からword[n-1]までについて、繋がるか調べる</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">base</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">))</span>    <span class="k">continue</span><span class="p">;</span>    <span class="c">//自分自身が比較対象になった場合</span>
        <span class="k">if</span><span class="p">((</span><span class="o">*</span><span class="p">(</span><span class="n">word</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> 
            <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">word</span> <span class="o">+</span> <span class="n">strlen</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">-</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">)))</span>
            <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="p">(</span><span class="n">check</span> <span class="o">+</span> <span class="n">i</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="o">*</span><span class="p">(</span><span class="n">check</span> <span class="o">+</span> <span class="n">i</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">siritori</span><span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">i</span> <span class="o">*</span> <span class="n">MAXLEN</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">check</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">&gt;</span> <span class="n">cntmax</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">cntmax</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="n">cntmax</span> <span class="o">&gt;</span> <span class="n">maxmax</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">maxmax</span> <span class="o">=</span> <span class="n">cntmax</span><span class="p">;</span>
                <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">cntmax</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>                    <span class="c">//最も長続きする場合の語順をコピー</span>
                <span class="p">{</span>
                    <span class="n">words</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
    
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">check</span><span class="p">[</span><span class="n">WORDMAX</span><span class="p">];</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">in</span><span class="p">;</span>
    
    <span class="k">if</span><span class="p">((</span><span class="n">in</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="s">&quot;wordlist.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">puts</span><span class="p">(</span><span class="s">&quot;wordlist.txtが読み込めませんでした&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">feof</span><span class="p">(</span><span class="n">in</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">fscanf</span><span class="p">(</span><span class="n">in</span><span class="p">,</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">]);</span>
        <span class="n">n</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">in</span><span class="p">);</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>                                <span class="c">//word[i]を始点とする</span>
    <span class="p">{</span>
        <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                                    <span class="c">//word[i]を使用済みとする</span>
        <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>                                        <span class="c">//cntをリセット</span>
        <span class="n">siritori</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">word</span><span class="p">,</span> <span class="n">check</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">check</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;result:&quot;</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">cntmax</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">word</span><span class="p">[</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]]);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/addtag/" class="addtag" id="addtag_9524">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9524"
  >-</span><span
  class="button yellow"
  id="rating_z_9524"
  >0</span><span 
  class="button green"
  id="rating_p_9524"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9523/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/root/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/">
    1
    reply
  </a>

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9524/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9525">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1094/" target="_top">Wiles</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9525/">#9525</a>(<script language="JavaScript">print_time(new Date("2009/08/27 05:20 GMT"));</script><noscript>2009/08/27 05:20 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>何度もすみません、また誤りがあったので訂正します。</p>
<p>よく確認してから投稿します。お目汚し失礼致しました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre>67:        for(j = 0; j &lt; n; i++)
68:        {
69:            check[i] = 1;
70:        }
↓
67:        for(j = 0; j &lt; n; j++)
68:        {
69:            check[j] = 1;
70:        }
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9525/addtag/" class="addtag" id="addtag_9525">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9525/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9525/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9525"
  >-</span><span
  class="button yellow"
  id="rating_z_9525"
  >0</span><span 
  class="button green"
  id="rating_p_9525"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9524/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9525/root/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9525/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9621">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1107/" target="_top">T_GYOUTEN</a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9621/">#9621</a>(<script language="JavaScript">print_time(new Date("2009/10/03 02:24 GMT"));</script><noscript>2009/10/03 02:24 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Ｆ＃で書いてみました。
単語の最初と最後の文字の組み合わせで、２次元配列を作り、それをもとにして、全探索しています。計算量はO(N!)だと思います。
100までで、２２個
カザアナ-&gt; ナニゴト-&gt; トリモノ-&gt; ノリニゲ-&gt; ゲレツサ-&gt; サンバシ-&gt; シールド-&gt; ドウナガ-&gt; ガイユウ-&gt; ウラガネ-&gt; ネンブツ-&gt; ツジツマ-&gt; マヤカシ-&gt; シタヅミ-&gt; ミズヒキ-&gt; キヤクアシ-&gt; シヨウワル-&gt; ルイベツ-&gt; ツユザム-&gt; ムスビメ-&gt; メイフク-&gt; クタビレ
が最大のもののひとつです。
130で３２個ですが、これで１分かかりますので限界です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90</pre></td><td class="code"><div class="highlight"><pre>open System.IO

//小文字を大文字に変換
let ConvH (str:string) =
    str.Replace(&quot;ァ&quot;,&quot;ア&quot;).Replace(&quot;ィ&quot;,&quot;イ&quot;).Replace(&quot;ゥ&quot;,&quot;ウ&quot;).Replace(&quot;ェ&quot;,&quot;エ&quot;).Replace(&quot;ォ&quot;,&quot;オ&quot;)
        .Replace(&quot;ヵ&quot;,&quot;カ&quot;).Replace(&quot;ヶ&quot;,&quot;ケ&quot;).Replace(&quot;ッ&quot;,&quot;ツ&quot;).Replace(&quot;ャ&quot;,&quot;ヤ&quot;).Replace(&quot;ュ&quot;,&quot;ユ&quot;)
        .Replace(&quot;ョ&quot;,&quot;ヨ&quot;).Replace(&quot;ヮ&quot;,&quot;ワ&quot;)
             
//ファイルの文字列を大文字化してリストに収める
let wordList = [
                    use fileReader = new StreamReader(&quot;s:\word2.text&quot;) 
                    while not fileReader.EndOfStream do
                        let line = fileReader.ReadLine()
                        let strs = line.Split( [| &#39;\t&#39; |])
                        for st in strs do
                            if st &lt;&gt; &quot;&quot; then
                                yield ConvH (st)
                 ]

let IcharSet = List.fold (fun (chset:char Set) (str:string) -&gt; Set.add str.[0] chset) (Set.Empty)  wordList    
let ITcharSet = List.fold (fun (chset:char Set) (str:string) -&gt; Set.add (str.[str.Length - 1]) chset) IcharSet  wordList    
let UsedCharList = Set.to_list ITcharSet //先頭か末尾で使われている文字のリスト

let KanaLen = List.length  UsedCharList

//カナのindexを返す
let posOfKana (ch : char) =
    List.findIndex (fun x -&gt; x = ch) UsedCharList
   
//対応表用の配列　サイズ KanaLen * KanaLen
let respT = [| for i in 0 .. (KanaLen - 1) do
                    yield (Array.create KanaLen 0) |]

for s in wordList do
    let topStr = s.[0]
    let endStr = s.[s.Length - 1]
    let topStrIndex = posOfKana topStr
    let endStrIndex = posOfKana endStr
    respT.[topStrIndex].[endStrIndex] &lt;- respT.[topStrIndex].[endStrIndex] + 1  

let tempWordIndexArr = Array.create wordList.Length 0
let deepestWordIndexArr = Array.create wordList.Length 0                

// topIndex..何で始まるのから調べるか 
let rec search depth deepest topIndex  (arr :int [] []) (indexArr :int []) =
    for i in  0 ..(KanaLen - 1) do
        if arr.[topIndex].[i] &gt; 0 then
            
            indexArr.[depth] &lt;- topIndex
            indexArr.[depth+1] &lt;- i
            arr.[topIndex].[i] &lt;- arr.[topIndex].[i] - 1
            
            if depth + 1 &gt; !deepest then
               deepest := depth + 1
               for i in 0 .. !deepest do
                    deepestWordIndexArr.[i] &lt;- indexArr.[i]
          
            search (depth + 1) deepest i arr indexArr
            
            arr.[topIndex].[i] &lt;- arr.[topIndex].[i] + 1

let maxDepth = ref 0

for i in 0 .. (KanaLen - 1) do
    if Array.sum respT.[i] &gt; 0 then
        search 0 maxDepth i respT tempWordIndexArr

printfn &quot;最大連結個数: %A&quot; !maxDepth   

//結果表示用の補助関数
//index iで始まりjで終わる単語をリストから抜き出して、その単語とその単語を除いたリストを返す
let findAndPop (i,j) lst =
    let rec sub (passedLst : string list)  (yetLst : string list) =
       match yetLst with
       | [] -&gt; failwith &quot;dont find&quot;
       | h :: tl when posOfKana h.[0] = i &amp;&amp; posOfKana h.[h.Length - 1] = j 
                -&gt; (h,passedLst @ tl)
       | h :: tl -&gt; sub (passedLst @ [h]) tl
    sub [] lst            

//結果表示用
let rec dispResult lst i =
    if i = !maxDepth then
        ()
    else 
        let (word,remLst) = findAndPop ( deepestWordIndexArr.[i],deepestWordIndexArr.[i+1]) lst
        printf &quot;-&gt; %s&quot; word
        dispResult remLst (i + 1)

dispResult wordList 0
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9621/addtag/" class="addtag" id="addtag_9621">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9621/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9621/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9621"
  >-</span><span
  class="button yellow"
  id="rating_z_9621"
  >0</span><span 
  class="button green"
  id="rating_p_9621"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9621/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9731">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1129/" target="_top">Lost_dog</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9731/">#9731</a>(<script language="JavaScript">print_time(new Date("2009/12/21 17:37 GMT"));</script><noscript>2009/12/21 17:37 GMT</noscript>)
	
	
	
	[<a href="/web/20100712021426/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Lost_dogです。初投稿です。よろしくです。</p>
<p>お題の単語ファイルをUTF8で保存して実行します。結果をプロンプトに吐くと文字化けするので、ファイルに出力してます。</p>
<p>実装は愚直に全部数えてるだけです。130単語くらいの入力が限界でした。もっと長いしりとりは、また今度挑戦してみます。</p>
<p>つーか関係ないけど、コードの配色がカラフルだな…</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Prelude</span> <span class="nv">hiding</span> <span class="p">(</span><span class="nv">putStrLn</span><span class="p">,</span> <span class="nv">readFile</span><span class="p">,</span> <span class="nv">writeFile</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">UTF8</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Tree</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Maybe</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Function</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">readFile</span> <span class="s">&quot;words.txt&quot;</span> <span class="o">&gt;&gt;=</span> <span class="nv">writeFile</span> <span class="s">&quot;out.txt&quot;</span><span class="o">.</span><span class="nv">unlines</span><span class="o">.</span><span class="nv">longest</span><span class="o">.</span><span class="nv">makeTree</span><span class="o">.</span><span class="nv">words</span>

<span class="nv">makeTree</span> <span class="o">=</span> <span class="nv">unfoldTree</span> <span class="nv">f</span> <span class="kr">where</span>
  <span class="nv">f</span> <span class="p">(</span><span class="nv">w</span><span class="o">:</span><span class="nv">ws</span><span class="p">)</span> <span class="o">=</span> <span class="kr">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="nv">x</span><span class="o">:</span><span class="p">(</span><span class="nv">ws</span><span class="o">\\</span><span class="p">[</span><span class="nv">x</span><span class="p">]))</span> <span class="o">$</span> <span class="nv">filter</span> <span class="p">(((</span><span class="nv">last</span> <span class="nv">w</span><span class="p">)</span><span class="o">==</span><span class="p">)</span><span class="o">.</span><span class="nv">head</span><span class="p">)</span> <span class="nv">ws</span>
             <span class="kr">in</span> <span class="p">(</span><span class="nv">w</span><span class="p">,</span> <span class="nv">c</span><span class="p">)</span>

<span class="nv">longest</span> <span class="p">(</span><span class="n">Node</span> <span class="nv">w</span> <span class="p">[])</span> <span class="o">=</span> <span class="p">[</span><span class="nv">w</span><span class="p">]</span>
<span class="nv">longest</span> <span class="p">(</span><span class="n">Node</span> <span class="nv">w</span> <span class="nv">ws</span><span class="p">)</span> <span class="o">=</span> <span class="kr">let</span> <span class="nv">xs</span> <span class="o">=</span> <span class="nv">maximumBy</span> <span class="p">(</span><span class="nv">compare</span><span class="p">`</span><span class="nv">on</span><span class="p">`</span><span class="nv">length</span><span class="p">)</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">longest</span> <span class="nv">ws</span>
                      <span class="kr">in</span> <span class="nv">w</span> <span class="o">:</span> <span class="nv">xs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9731/addtag/" class="addtag" id="addtag_9731">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712021426/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9731/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712021426/http://ja.doukaku.org/comment/9731/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9731"
  >-</span><span
  class="button yellow"
  id="rating_z_9731"
  >0</span><span 
  class="button green"
  id="rating_p_9731"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100712021426/http://ja.doukaku.org/comment/9731/">
    1
    reply
  </a>

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9731/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9732">
  <p class="banner"><a href="/web/20100712021426/http://ja.doukaku.org/user/1129/" target="_top">Lost_dog</a><a href="/web/20100712021426/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9732/">#9732</a>(<script language="JavaScript">print_time(new Date("2009/12/21 17:47 GMT"));</script><noscript>2009/12/21 17:47 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>import Data.Maybeはいらんな。。
あとputStrLnも使ってないな。。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712021426/http://ja.doukaku.org/comment/9732/addtag/" class="addtag" id="addtag_9732">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9732"
  >-</span><span
  class="button yellow"
  id="rating_z_9732"
  >0</span><span 
  class="button green"
  id="rating_p_9732"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9731/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712021426/http://ja.doukaku.org/comment/9732/root/"><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100712021426/http://ja.doukaku.org/277/reply_to/9732/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100712021426if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100712021426/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100712021426/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100712021426/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100712021426/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100712021426/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100712021426/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100712021426/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100712021426/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100712021426/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100712021426/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100712021426im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100712021426/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100712021426/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100712021426/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100712021426/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100712021426/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100712021426/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100712021426/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100712021426/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100712021426im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100712021426/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100712021426/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100712021426/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100712021426js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 2:14:26 Jul 12, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:35:18 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
