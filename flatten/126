
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
ライフゲーム
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20080325151021cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20080325151021cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20080325151021cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20080325151021/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20080325151021/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20080325151021js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20080325151021js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20080325151021js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20080325151021js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app13.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/126\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "25";
var displayMonth = "Mar";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/126/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20080325151021" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080123184547/http://ja.doukaku.org/126/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="23 Jan 2008"><strong>JAN</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 15:10:21 Mar 25, 2008">MAR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Apr
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080123184547/http://ja.doukaku.org/126/flatten/" title="18:45:47 Jan 23, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 15:10:21 Mar 25, 2008">25</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 15:10:21 Mar 25, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20080325151021*/http://ja.doukaku.org/126/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">23 Jan 08 - 25 Mar 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:2:101000000000_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20080325151021/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20080325151021/http://ja.doukaku.org/126/">ライフゲーム</a>
</h2>

    





<div class="comment" id="comment5330">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5330/">#5330</a>(<script language="JavaScript">print_time(new Date("2008/01/15 12:34 GMT"));</script><noscript>2008/01/15 12:34 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #9fff3f;">6/12=0.50</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>セルオートマトンに関するお題です. 
2次元タイプの'ライフゲーム'を実装して下さい. 
初期値としては10行10列程度の格子上の平面に0.3程度の人口(?)密度を考え, 
末端はループするようにして下さい. (例: 座標[-1, -1] = [10, 10])

それだけだと簡単すぎると思われる方は, 
過密状態で間引きが発生するような機能を組み込んで下さい. 
間引きは, 少なくともその後の1時間ステップにおける死亡率が, 
それをしなかった場合よりも小さくなれば結構です. 
(死亡率の最小化は複雑性が高すぎる感がありますし. )
サンプル:
t = 0
[ ][*][ ][ ][ ][ ][*][*][*][ ]
[ ][ ][ ][ ][*][ ][ ][*][*][ ]
[ ][ ][ ][*][ ][ ][*][ ][*][ ]
[*][ ][*][*][ ][ ][*][ ][ ][ ]
[ ][*][ ][ ][ ][ ][ ][ ][*][ ]
[*][ ][ ][ ][*][ ][*][*][ ][*]
[ ][*][ ][ ][ ][ ][*][ ][ ][ ]
[ ][ ][ ][ ][ ][ ][ ][ ][ ][*]
[*][ ][ ][ ][ ][ ][*][ ][ ][*]
[ ][ ][ ][ ][*][*][ ][ ][*][ ]
t = 1
[ ][ ][ ][ ][*][ ][ ][ ][ ][*]
[ ][ ][ ][ ][ ][*][ ][ ][ ][*]
[ ][ ][*][ ][*][*][*][ ][*][*]
[ ][*][ ][*][ ][ ][ ][ ][ ][*]
[ ][ ][*][*][ ][*][*][ ][*][ ]
[ ][*][ ][ ][ ][*][*][ ][*][*]
[ ][ ][ ][ ][ ][*][*][*][*][*]
[ ][ ][ ][ ][ ][ ][ ][ ][ ][*]
[*][ ][ ][ ][ ][*][ ][ ][*][ ]
[*][ ][ ][ ][ ][ ][ ][ ][ ][ ]</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20080325151021/http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0">Wikipedia:ライフゲーム</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5330/addtag/" class="addtag" id="addtag_5330">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #9fff3f;"
  >6/12=0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5330"
  >-</span><span
  class="button yellow"
  id="rating_z_5330"
  >0</span><span 
  class="button green"
  id="rating_p_5330"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5330/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20080325151021/http://ja.doukaku.org/126/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20080325151021/http://ja.doukaku.org/126/nested/">ネスト表示</a>
<a href="/web/20080325151021/http://ja.doukaku.org/126/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment5379">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5379/">#5379</a>(<script language="JavaScript">print_time(new Date("2008/01/18 09:00 GMT"));</script><noscript>2008/01/18 09:00 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>C#で書いてみました。特に「間引き」の処理は入れていません。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">LifeGame</span> <span class="k">{</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">time_</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="kt">bool</span><span class="p">[][]</span> <span class="n">matrix_</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">LifeGame</span><span class="p">(</span><span class="kt">int</span> <span class="n">rows</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cols</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">Random</span> <span class="n">random</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
        <span class="n">matrix_</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">rows</span><span class="p">][];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">rowIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">rowIndex</span> <span class="p">&lt;</span> <span class="n">rows</span><span class="p">;</span> <span class="n">rowIndex</span><span class="p">++)</span> <span class="k">{</span>
            <span class="n">matrix_</span><span class="p">[</span><span class="n">rowIndex</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">cols</span><span class="p">];</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">cols</span><span class="p">;</span> <span class="n">index</span><span class="p">++)</span> <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">random</span><span class="p">.</span><span class="n">NextDouble</span><span class="p">()</span> <span class="p">&lt;</span> <span class="m">0.3</span><span class="p">)</span> <span class="k">{</span>
                    <span class="n">matrix_</span><span class="p">[</span><span class="n">rowIndex</span><span class="p">][</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="n">Time</span> <span class="k">{</span>
        <span class="k">get</span> <span class="k">{</span>
            <span class="k">return</span> <span class="n">time_</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">String</span> <span class="nf">GetDisplayMatrix</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">StringBuilder</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">Text</span><span class="p">.</span><span class="n">StringBuilder</span><span class="p">();</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">bool</span><span class="p">[]</span> <span class="n">row</span> <span class="k">in</span> <span class="n">matrix_</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">bool</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">row</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">builder</span><span class="p">.</span><span class="n">AppendFormat</span><span class="p">(</span><span class="s">&quot;[{0}]&quot;</span><span class="p">,</span> <span class="n">cell</span><span class="p">?</span> <span class="s">&quot;*&quot;</span><span class="p">:</span> <span class="s">&quot; &quot;</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
    <span class="k">}</span>


    <span class="k">public</span> <span class="k">void</span> <span class="nf">NextStep</span><span class="p">()</span> <span class="k">{</span>
        <span class="kt">bool</span><span class="p">[][]</span> <span class="n">oldMatrix</span> <span class="p">=</span> <span class="n">CopyMatrix</span><span class="p">(</span><span class="n">matrix_</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">rowIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">rowIndex</span> <span class="p">&lt;</span> <span class="n">matrix_</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">rowIndex</span><span class="p">++)</span> <span class="k">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">colIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">colIndex</span> <span class="p">&lt;</span> <span class="n">matrix_</span><span class="p">[</span><span class="n">rowIndex</span><span class="p">].</span><span class="n">Length</span><span class="p">;</span> <span class="n">colIndex</span><span class="p">++)</span> <span class="k">{</span>
                <span class="n">matrix_</span><span class="p">[</span><span class="n">rowIndex</span><span class="p">][</span><span class="n">colIndex</span><span class="p">]</span> <span class="p">=</span> <span class="n">Next</span><span class="p">(</span><span class="n">rowIndex</span><span class="p">,</span> <span class="n">colIndex</span><span class="p">,</span> <span class="n">oldMatrix</span><span class="p">);</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="n">time_</span><span class="p">++;</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="kt">bool</span><span class="p">[][]</span> <span class="n">CopyMatrix</span><span class="p">(</span><span class="kt">bool</span><span class="p">[][]</span> <span class="n">matrix</span><span class="p">)</span> <span class="k">{</span>
        <span class="kt">bool</span><span class="p">[][]</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">matrix</span><span class="p">.</span><span class="n">Length</span><span class="p">][];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">matrix</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">index</span><span class="p">++)</span> <span class="k">{</span>
            <span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">Length</span><span class="p">];</span>
            <span class="n">matrix</span><span class="p">[</span><span class="n">index</span><span class="p">].</span><span class="n">CopyTo</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="m">0</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="nf">Next</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">bool</span><span class="p">[][]</span> <span class="n">matrix</span><span class="p">)</span> <span class="k">{</span>
        <span class="kt">bool</span> <span class="n">now</span> <span class="p">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">col</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span> <span class="p">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">col</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">col</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">col</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span>
                <span class="p">+</span> <span class="n">GetCell</span><span class="p">(</span><span class="n">matrix</span><span class="p">,</span> <span class="n">row</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">col</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">now</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">count</span> <span class="p">==</span> <span class="m">2</span> <span class="p">||</span> <span class="n">count</span> <span class="p">==</span> <span class="m">3</span><span class="p">);</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="n">count</span> <span class="p">==</span> <span class="m">3</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">GetCell</span><span class="p">(</span><span class="kt">bool</span><span class="p">[][]</span> <span class="n">matrix</span><span class="p">,</span> <span class="kt">int</span> <span class="n">rowIndex</span><span class="p">,</span> <span class="kt">int</span> <span class="n">colIndex</span><span class="p">)</span> <span class="k">{</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="n">rowIndex</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">y</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">y</span> <span class="p">+=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">y</span> <span class="p">&gt;=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="n">y</span> <span class="p">-=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>

        <span class="kt">bool</span><span class="p">[]</span> <span class="n">row</span> <span class="p">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">y</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="n">colIndex</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">x</span> <span class="p">+=</span> <span class="n">row</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="p">&gt;=</span> <span class="n">row</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="n">x</span> <span class="p">-=</span> <span class="n">row</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>

        <span class="k">return</span> <span class="n">row</span><span class="p">[</span><span class="n">x</span><span class="p">]?</span> <span class="m">1</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">}</span>


<span class="na">    [STAThread]</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">LifeGame</span> <span class="n">game</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LifeGame</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">10</span><span class="p">);</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;t={0}&quot;</span><span class="p">,</span> <span class="n">game</span><span class="p">.</span><span class="n">Time</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">game</span><span class="p">.</span><span class="n">GetDisplayMatrix</span><span class="p">());</span>
        <span class="n">game</span><span class="p">.</span><span class="n">NextStep</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;t={0}&quot;</span><span class="p">,</span> <span class="n">game</span><span class="p">.</span><span class="n">Time</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">game</span><span class="p">.</span><span class="n">GetDisplayMatrix</span><span class="p">());</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5379/addtag/" class="addtag" id="addtag_5379">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5379/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5379/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5379"
  >-</span><span
  class="button yellow"
  id="rating_z_5379"
  >0</span><span 
  class="button green"
  id="rating_p_5379"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5379/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5380">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/134/" target="_top">こう。</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5380/">#5380</a>(<script language="JavaScript">print_time(new Date("2008/01/18 09:23 GMT"));</script><noscript>2008/01/18 09:23 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>LifeGame書いたことなかったから、間引きなしで。
グライダーが動いたので多分合ってる？</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;conio.h&gt;</span>

<span class="cp">#define WIDTH  10</span>
<span class="cp">#define HIGHT 10</span>

<span class="kt">void</span> <span class="n">next_gen</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x_l</span><span class="p">,</span><span class="n">x_r</span><span class="p">,</span><span class="n">y_u</span><span class="p">,</span><span class="n">y_d</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="n">y_u</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">+</span> <span class="mi">9</span><span class="p">)</span><span class="o">%</span><span class="n">HIGHT</span><span class="p">;</span>
        <span class="n">y_d</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">11</span><span class="p">)</span><span class="o">%</span><span class="n">HIGHT</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">x_l</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">+</span> <span class="mi">9</span><span class="p">)</span><span class="o">%</span><span class="n">WIDTH</span><span class="p">;</span>
            <span class="n">x_r</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">11</span><span class="p">)</span><span class="o">%</span><span class="n">WIDTH</span><span class="p">;</span>
            
            <span class="n">life</span><span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>
                 <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span> <span class="n">y</span> <span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>              <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span> <span class="n">y</span> <span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>
                 <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span>

            <span class="k">if</span><span class="p">((</span><span class="n">life</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">))</span><span class="o">==</span><span class="mi">3</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">|=</span><span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">put_gen</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;[&#39;</span><span class="p">);</span>
            <span class="n">putchar</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="o">?</span><span class="sc">&#39;*&#39;</span><span class="o">:</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;]&#39;</span><span class="p">);</span>
        <span class="p">}</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">lifegame</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">gen</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;T=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">gen</span><span class="p">);</span>
        <span class="n">put_gen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="n">next_gen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="n">gen</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">getch</span><span class="p">()</span><span class="o">==</span><span class="mh">0x20</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]</span><span class="o">=</span><span class="p">{</span>
<span class="c">/* 出題</span>
<span class="c">        {0,1,0,0,0,0,1,1,1,0},</span>
<span class="c">        {0,0,0,0,1,0,0,1,1,0},</span>
<span class="c">        {0,0,0,1,0,0,1,0,1,0},</span>
<span class="c">        {1,0,1,1,0,0,1,0,0,0},</span>
<span class="c">        {0,1,0,0,0,0,0,0,1,0},</span>
<span class="c">        {1,0,0,0,1,0,1,1,0,1},</span>
<span class="c">        {0,1,0,0,0,0,1,0,0,0},</span>
<span class="c">        {0,0,0,0,0,0,0,0,0,1},</span>
<span class="c">        {1,0,0,0,0,0,1,0,0,1},</span>
<span class="c">        {0,0,0,0,1,1,0,0,1,0}</span>
<span class="c">/*/</span>
<span class="c">//グライダー</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
<span class="c">//*/</span>
    <span class="p">};</span>
    <span class="n">lifegame</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5380/addtag/" class="addtag" id="addtag_5380">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5380/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5380/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5380"
  >-</span><span
  class="button yellow"
  id="rating_z_5380"
  >0</span><span 
  class="button green"
  id="rating_p_5380"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5380/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5380/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5381">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/170/" target="_top">anekos</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5381/">#5381</a>(<script language="JavaScript">print_time(new Date("2008/01/18 09:34 GMT"));</script><noscript>2008/01/18 09:34 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ライフゲームとは関係ないところで妙な小細工</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;enumerator&#39;</span>

<span class="k">class</span> <span class="nc">Object</span>
  <span class="k">def</span> <span class="nf">make_instance_variables</span> <span class="p">(</span><span class="n">_binding</span><span class="p">)</span>
    <span class="nb">eval</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="sh">&#39;</span><span class="no">EOC</span><span class="sh">&#39;</span><span class="p">,</span> <span class="n">_binding</span><span class="p">)</span>
<span class="sh">      local_variables.each do</span>
<span class="sh">        |lv_name|</span>
<span class="sh">        instance_variable_set(&quot;@#{lv_name}&quot;, eval(lv_name))</span>
<span class="sh">      end</span>
<span class="no">EOC</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">World</span>
    <span class="kp">attr_reader</span> <span class="ss">:height</span><span class="p">,</span> <span class="ss">:width</span><span class="p">,</span> <span class="ss">:rate</span>

    <span class="k">def</span> <span class="nf">initialize</span> <span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">rate</span><span class="p">)</span>
        <span class="n">make_instance_variables</span><span class="p">(</span><span class="nb">binding</span><span class="p">)</span>
        <span class="vi">@cells</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">height</span> <span class="o">*</span> <span class="n">width</span><span class="p">)</span> <span class="p">{</span> <span class="nb">rand</span> <span class="o">&lt;</span> <span class="n">rate</span> <span class="p">}</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">[]</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="vi">@cells</span><span class="o">[</span><span class="n">fix_position</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">[]=</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
        <span class="vi">@cells</span><span class="o">[</span><span class="n">fix_position</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">livings</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">dy</span><span class="o">|</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">dx</span><span class="o">|</span> <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="nb">self</span><span class="o">[</span><span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">]</span> <span class="k">unless</span> <span class="n">dx</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">dy</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">}}</span>
        <span class="n">result</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">update</span>
        <span class="vi">@cells</span> <span class="o">=</span> <span class="vi">@cells</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">enum_for</span><span class="p">(</span><span class="ss">:each_with_index</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span>
            <span class="o">|</span><span class="n">l</span><span class="p">,</span> <span class="n">idx</span><span class="o">|</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">%</span> <span class="n">width</span><span class="p">,</span> <span class="n">idx</span> <span class="o">/</span> <span class="n">width</span>
            <span class="n">ls</span> <span class="o">=</span> <span class="n">livings</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">l</span>  
                <span class="p">(</span><span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span> <span class="o">===</span> <span class="n">ls</span>
            <span class="k">else</span>
                <span class="n">ls</span> <span class="o">==</span> <span class="mi">3</span>
            <span class="k">end</span>
        <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">inspect</span>
        <span class="vi">@cells</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">it</span><span class="o">|</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">it</span> <span class="p">?</span> <span class="s1">&#39;*&#39;</span> <span class="p">:</span> <span class="s1">&#39; &#39;</span><span class="si">}</span><span class="s2">]&quot;</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/.{</span><span class="si">#{</span><span class="mi">3</span><span class="o">*</span><span class="n">width</span><span class="si">}</span><span class="sr">}/</span><span class="p">){</span><span class="o">|</span><span class="n">it</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">it</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="p">}</span>
    <span class="k">end</span>

    <span class="kp">private</span>

    <span class="k">def</span> <span class="nf">fix_position</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">%</span> <span class="n">width</span> <span class="o">*</span> <span class="n">width</span> <span class="o">+</span> <span class="n">x</span> <span class="o">%</span> <span class="n">height</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">OptionParser</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">parse</span> <span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="nb">require</span> <span class="s1">&#39;ostruct&#39;</span>
        <span class="nb">require</span> <span class="s1">&#39;optparse&#39;</span>

        <span class="n">options</span> <span class="o">=</span> <span class="no">OpenStruct</span><span class="o">.</span><span class="n">new</span>
        <span class="n">options</span><span class="o">.</span><span class="n">population</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">3</span>
        <span class="n">options</span><span class="o">.</span><span class="n">interval</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
        <span class="n">options</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">options</span><span class="o">.</span><span class="n">width</span> <span class="o">=</span> <span class="mi">10</span>

        <span class="n">parser</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span>
            <span class="o">|</span><span class="n">parser</span><span class="o">|</span>
            <span class="n">parser</span><span class="o">.</span><span class="n">banner</span> <span class="o">=</span> <span class="s2">&quot;Usage: </span><span class="si">#{</span><span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="vg">$0</span><span class="p">)</span><span class="si">}</span><span class="s2"> [options] &quot;</span>
            <span class="n">parser</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;-p&#39;</span><span class="p">,</span> <span class="s1">&#39;--population-rate [RATE]&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">it</span><span class="o">|</span> <span class="n">options</span><span class="o">.</span><span class="n">population</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span>
            <span class="n">parser</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;-i&#39;</span><span class="p">,</span> <span class="s1">&#39;--interval [SEC]&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">it</span><span class="o">|</span> <span class="n">options</span><span class="o">.</span><span class="n">interval</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span>
            <span class="n">parser</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;-w&#39;</span><span class="p">,</span> <span class="s1">&#39;--width [WIDTH]&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">it</span><span class="o">|</span> <span class="n">options</span><span class="o">.</span><span class="n">interval</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span>
            <span class="n">parser</span><span class="o">.</span><span class="n">on</span><span class="p">(</span><span class="s1">&#39;-h&#39;</span><span class="p">,</span> <span class="s1">&#39;--height [HEIGHT]&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">it</span><span class="o">|</span> <span class="n">options</span><span class="o">.</span><span class="n">interval</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">to_f</span> <span class="p">}</span>
        <span class="k">end</span>

        <span class="n">parser</span><span class="o">.</span><span class="n">parse!</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
        <span class="n">options</span>
    <span class="k">rescue</span>
        <span class="nb">puts</span> <span class="n">parser</span><span class="o">.</span><span class="n">help</span>
        <span class="nb">exit</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">options</span> <span class="o">=</span> <span class="no">OptionParser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">ARGV</span><span class="p">)</span>

<span class="n">w</span> <span class="o">=</span> <span class="no">World</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">width</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">height</span><span class="p">,</span> <span class="n">options</span><span class="o">.</span><span class="n">population</span><span class="p">)</span> 

<span class="no">Curses</span><span class="o">.</span><span class="n">init_screen</span>
<span class="kp">loop</span> <span class="k">do</span>
    <span class="no">Curses</span><span class="o">.</span><span class="n">clear</span>
    <span class="no">Curses</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">inspect</span><span class="p">)</span>
    <span class="no">Curses</span><span class="o">.</span><span class="n">refresh</span>
    <span class="nb">sleep</span><span class="p">(</span><span class="n">options</span><span class="o">.</span><span class="n">interval</span><span class="p">)</span>
    <span class="n">w</span><span class="o">.</span><span class="n">update</span>
<span class="k">end</span>
<span class="no">Curses</span><span class="o">.</span><span class="n">close_screen</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5381/addtag/" class="addtag" id="addtag_5381">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5381/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5381/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5381"
  >-</span><span
  class="button yellow"
  id="rating_z_5381"
  >0</span><span 
  class="button green"
  id="rating_p_5381"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5381/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5382">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/591/" target="_top">99yen</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/">#5382</a>(<script language="JavaScript">print_time(new Date("2008/01/18 10:28 GMT"));</script><noscript>2008/01/18 10:28 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  ぴこぴこ動くので、多分間違ってないかと(^&nbsp;^;
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84</pre></td><td class="code"><div class="highlight"><pre>!変数宣言が必要
/*初期マップとは配列=,
&quot;0,1,0,0,0,0,1,1,1,0
0,0,0,0,1,0,0,1,1,0
0,0,0,1,0,0,1,0,1,0
1,0,1,1,0,0,1,0,0,0
0,1,0,0,0,0,0,0,1,0
1,0,0,0,1,0,1,1,0,1
0,1,0,0,0,0,1,0,0,0
0,0,0,0,0,0,0,0,0,1
1,0,0,0,0,0,1,0,0,1
0,0,0,0,1,1,0,0,1,0&quot;
wとは整数=9
hとは整数=9*/

初期マップとは配列=,
&quot;0,0,0,0,0,0
0,0,0,1,1,0
0,0,0,1,1,0
0,1,1,0,0,0
0,1,1,0,0,0
0,0,0,0,0,0&quot;

wとは整数=5
hとは整数=5
現マップとは配列=初期マップ
次マップとは配列
iとは整数
jとは整数
セル数とは整数
マップラベルとはラベル

マップラベル=現マップをマップ整形
1の間
    iで0からhまで繰り返す
        jで0からwまで繰り返す
            セル数=周囲セル数取得(現マップ,i,j,h,w)
            もし(現マップ[i,j]=0)ならば
                もし(セル数=3)ならば
                    次マップ[i,j]=1 #誕生
                違えば
                    次マップ[i,j]=0 #死亡
            違えば
                もし(セル数=2||セル数=3)ならば
                    次マップ[i,j]=1 #維持
                違えば
                    次マップ[i,j]=0 #死亡
    現マップ=次マップ
    マップラベル=現マップをマップ整形
    0.2秒待つ

●マップ整形(mapを)
    tmpとは文字列
    tmplineとは文字列
    mapを反復
        tmpline=対象の改行を&quot;&quot;に置換
        tmpline=tmplineの0を&quot;　&quot;に置換
        tmpline=tmplineの1を&quot;■&quot;に置換
        tmp=tmp&amp;tmpline&amp;改行
    tmpで戻る

●周囲セル数取得(map,y,x,h,w)
    nxとは整数
    nyとは整数
    countとは整数
    &quot;{y-1},{x-1}
{y-1},{x}
{y-1},{x+1}
{y},{x-1}
{y},{x+1}
{y+1},{x-1}
{y+1},{x}
{y+1},{x+1}&quot;を反復
        もし(対象[0,0]=-1)ならば
            ny=h
        違えば
            ny=対象[0,0]
        もし(対象[0,1]=-1)ならば
            nx=w
        違えば
            nx=対象[0,1]
        もし(map[ny,nx]=1)ならば
            count=count+1
    countで戻る
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/addtag/" class="addtag" id="addtag_5382">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5382"
  >-</span><span
  class="button yellow"
  id="rating_z_5382"
  >0</span><span 
  class="button green"
  id="rating_p_5382"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/">
    2
    replies
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5382/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5383">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/134/" target="_top">こう。</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5383/">#5383</a>(<script language="JavaScript">print_time(new Date("2008/01/18 10:28 GMT"));</script><noscript>2008/01/18 10:28 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>題意を間違えたみたいなんで追加修正</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td class="code"><div class="highlight"><pre><span class="kt">void</span> <span class="n">init_life</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">x</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="n">WIDTH</span><span class="p">);</span>
        <span class="n">y</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="n">HEIGHT</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">calc_life</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;=</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">)))){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">count</span><span class="o">&lt;</span><span class="p">((</span><span class="n">HEIGHT</span><span class="o">*</span><span class="n">WIDTH</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span><span class="o">/</span><span class="mi">10</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">];</span>
    <span class="n">init_life</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    <span class="n">lifegame</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5383/addtag/" class="addtag" id="addtag_5383">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5383/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5383/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5383"
  >-</span><span
  class="button yellow"
  id="rating_z_5383"
  >0</span><span 
  class="button green"
  id="rating_p_5383"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5380/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5383/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5383/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5384">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/134/" target="_top">こう。</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/">#5384</a>(<script language="JavaScript">print_time(new Date("2008/01/18 10:31 GMT"));</script><noscript>2008/01/18 10:31 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>失敗しました。
全部貼らなきゃだった･･･

題意を取り違えてたっぽいので追加修正。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;conio.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>

<span class="cp">#define WIDTH  10</span>
<span class="cp">#define HEIGHT 10</span>


<span class="kt">int</span> <span class="n">calc_life</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">],</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x_l</span><span class="p">,</span><span class="n">x_r</span><span class="p">,</span><span class="n">y_u</span><span class="p">,</span><span class="n">y_d</span><span class="p">;</span>
    <span class="n">y_u</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">HEIGHT</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">HEIGHT</span><span class="p">;</span>
    <span class="n">y_d</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">HEIGHT</span><span class="p">;</span>
    <span class="n">x_l</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">WIDTH</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">x_r</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">WIDTH</span><span class="p">;</span>
            
    <span class="n">life</span><span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>
         <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span> <span class="n">y</span> <span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>              <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span> <span class="n">y</span> <span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>
         <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">life</span><span class="p">;</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="n">next_gen</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">life</span><span class="o">=</span><span class="n">calc_life</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>

            <span class="k">if</span><span class="p">((</span><span class="n">life</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">))</span><span class="o">==</span><span class="mi">3</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">|=</span><span class="mi">2</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">put_gen</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;[&#39;</span><span class="p">);</span>
            <span class="n">putchar</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="o">?</span><span class="sc">&#39;*&#39;</span><span class="o">:</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;]&#39;</span><span class="p">);</span>
        <span class="p">}</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">lifegame</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">gen</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;T=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">gen</span><span class="p">);</span>
        <span class="n">put_gen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="n">next_gen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="n">gen</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">getch</span><span class="p">()</span><span class="o">==</span><span class="mh">0x20</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">init_life</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">x</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="n">WIDTH</span><span class="p">);</span>
        <span class="n">y</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="n">HEIGHT</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">calc_life</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;=</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">)))){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">count</span><span class="o">&lt;</span><span class="p">((</span><span class="n">HEIGHT</span><span class="o">*</span><span class="n">WIDTH</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span><span class="o">/</span><span class="mi">10</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">];</span>
    <span class="n">init_life</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    <span class="n">lifegame</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/addtag/" class="addtag" id="addtag_5384">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5384"
  >-</span><span
  class="button yellow"
  id="rating_z_5384"
  >0</span><span 
  class="button green"
  id="rating_p_5384"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5384/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5385">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5385/">#5385</a>(<script language="JavaScript">print_time(new Date("2008/01/18 10:32 GMT"));</script><noscript>2008/01/18 10:32 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Swingで。特に工夫はなし。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Life</span> <span class="k">extends</span> <span class="n">JFrame</span> <span class="o">{</span>
    <span class="k">private</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">cells</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">pitch</span><span class="o">,</span> <span class="n">w</span><span class="o">,</span> <span class="n">h</span><span class="o">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Life</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Life</span><span class="o">(</span><span class="mi">20</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="mf">0.3</span><span class="o">);</span>
        <span class="n">f</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="n">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
        <span class="n">f</span><span class="o">.</span><span class="na">pack</span><span class="o">();</span>
        <span class="n">f</span><span class="o">.</span><span class="na">setLocationRelativeTo</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
        <span class="n">f</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="n">Life</span><span class="o">(</span><span class="k">final</span> <span class="kt">int</span> <span class="n">w</span><span class="o">,</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">h</span><span class="o">,</span> <span class="k">final</span> <span class="kt">double</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">super</span><span class="o">(</span><span class="s">&quot;Life&quot;</span><span class="o">);</span>
        
        <span class="k">this</span><span class="o">.</span><span class="na">w</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">h</span> <span class="o">=</span> <span class="n">h</span><span class="o">;</span>
        
        <span class="n">pitch</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
        <span class="n">cells</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">h</span><span class="o">*</span><span class="n">w</span><span class="o">];</span>
        
        <span class="n">initialize</span><span class="o">(</span><span class="n">rate</span><span class="o">);</span>
        
        <span class="n">getContentPane</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">JLabel</span><span class="o">(</span><span class="k">new</span> <span class="n">Icon</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getIconHeight</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">h</span> <span class="o">*</span> <span class="n">pitch</span> <span class="o">+</span> <span class="n">pitch</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getIconWidth</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">w</span> <span class="o">*</span> <span class="n">pitch</span> <span class="o">+</span> <span class="n">pitch</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">void</span> <span class="n">paintIcon</span><span class="o">(</span><span class="n">Component</span> <span class="n">c</span><span class="o">,</span> <span class="n">Graphics</span> <span class="n">g</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">g</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLUE</span><span class="o">);</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">h</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> 
                    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">w</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> 
                        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)])</span> <span class="n">g</span><span class="o">.</span><span class="na">fillRect</span><span class="o">(</span><span class="n">j</span><span class="o">*</span><span class="n">pitch</span><span class="o">,</span> <span class="n">i</span><span class="o">*</span><span class="n">pitch</span><span class="o">,</span> <span class="n">pitch</span><span class="o">,</span> <span class="n">pitch</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}));</span>
        
        <span class="n">Executors</span><span class="o">.</span><span class="na">newScheduledThreadPool</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="na">scheduleAtFixedRate</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="n">update</span><span class="o">();</span>
                <span class="n">repaint</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">},</span> <span class="mi">1000L</span><span class="o">,</span> <span class="mi">200L</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="kt">void</span> <span class="n">initialize</span><span class="o">(</span><span class="kt">double</span> <span class="n">rate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">h</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> 
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">w</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> 
                <span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">rate</span><span class="o">;</span>
                                              
    <span class="o">}</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">at</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">i</span><span class="o">*</span><span class="n">w</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">protected</span> <span class="kt">void</span> <span class="n">update</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">newG</span> <span class="o">=</span> <span class="n">cells</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">h</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> 
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">w</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> 
                <span class="n">newG</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="n">j</span><span class="o">)]</span> <span class="o">=</span> <span class="n">next</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>
        <span class="n">cells</span> <span class="o">=</span> <span class="n">newG</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="kt">boolean</span> <span class="n">next</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">final</span> <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="n">h</span><span class="o">-</span><span class="mi">1</span><span class="o">)%</span><span class="n">h</span><span class="o">,</span> <span class="n">d</span> <span class="o">=</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)%</span><span class="n">h</span><span class="o">,</span> <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="n">w</span><span class="o">-</span><span class="mi">1</span><span class="o">)%</span><span class="n">w</span><span class="o">,</span> <span class="n">r</span> <span class="o">=</span> <span class="o">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">)%</span><span class="n">w</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">j</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">r</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">r</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">r</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">j</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="n">l</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">l</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">u</span><span class="o">,</span> <span class="n">l</span><span class="o">)])</span> <span class="n">count</span><span class="o">++;</span>
        
        <span class="k">return</span> <span class="o">((</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)]</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span><span class="o">))</span>  <span class="o">||</span>
                <span class="o">(!</span><span class="n">cells</span><span class="o">[</span><span class="n">at</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">)]</span> <span class="o">&amp;&amp;</span> <span class="n">count</span> <span class="o">==</span> <span class="mi">3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5385/addtag/" class="addtag" id="addtag_5385">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5385/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5385/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5385"
  >-</span><span
  class="button yellow"
  id="rating_z_5385"
  >0</span><span 
  class="button green"
  id="rating_p_5385"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5385/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5386">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/591/" target="_top">99yen</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5386/">#5386</a>(<script language="JavaScript">print_time(new Date("2008/01/18 11:13 GMT"));</script><noscript>2008/01/18 11:13 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>すいません、配列が範囲を超える場合の処理を書いてませんでしたorz</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre>●周囲セル数取得(map,y,x,h,w)
    nxとは整数
    nyとは整数
    countとは整数
    &quot;{y-1},{x-1}
{y-1},{x}
{y-1},{x+1}
{y},{x-1}
{y},{x+1}
{y+1},{x-1}
{y+1},{x}
{y+1},{x+1}&quot;を反復
        もし(対象[0,0]=-1)ならば,ny=h
        違えば,もし(対象[0,0]=h+1)ならば,ny=0
        違えば,ny=対象[0,0]
        もし(対象[0,1]=-1)ならば,nx=w
        違えば,もし(対象[0,1]=w+1)ならば,nx=0
        違えば,nx=対象[0,1]
        もし(map[ny,nx]=1)ならば
            count=count+1
    countで戻る
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5386/addtag/" class="addtag" id="addtag_5386">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5386/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5386/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5386"
  >-</span><span
  class="button yellow"
  id="rating_z_5386"
  >0</span><span 
  class="button green"
  id="rating_p_5386"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5382/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5386/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5386/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5387">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/643/" target="_top">squld</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5387/">#5387</a>(<script language="JavaScript">print_time(new Date("2008/01/18 11:44 GMT"));</script><noscript>2008/01/18 11:44 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>そのままだとつまらないので、再帰で書いてみました。

実行結果(3世代抜粋)
------------------------------------
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□■□□□
□□□□□■□□□□
□□□□□■■■□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□

□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□■□■□□
□□□□□■■□□□
□□□□□□■□□□
□□□□□□□□□□
□□□□□□□□□□

□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□□□□□□
□□□□□■□□□□
□□□□□■□■□□
□□□□□■■□□□
□□□□□□□□□□
□□□□□□□□□□
------------------------------------
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112</pre></td><td class="code"><div class="highlight"><pre><span class="k">public</span> <span class="k">class</span> <span class="nc">LifeGame</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">World</span> <span class="o">{</span>
        <span class="k">private</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Cell</span> <span class="o">{</span>
            <span class="k">private</span> <span class="k">final</span> <span class="n">Cell</span><span class="o">[]</span> <span class="n">mAdjoiningCells</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cell</span><span class="o">[</span><span class="mi">8</span><span class="o">];</span>
            <span class="k">private</span> <span class="kt">int</span> <span class="n">mGeneration</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">private</span> <span class="kt">boolean</span> <span class="n">mIsOddLive</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">private</span> <span class="kt">boolean</span> <span class="n">mIsEvenLive</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

            <span class="k">public</span> <span class="kt">boolean</span> <span class="n">next</span><span class="o">(</span><span class="kt">int</span> <span class="n">aGeneration</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">boolean</span> <span class="n">tIsLive</span> <span class="o">=</span> <span class="o">(</span><span class="n">aGeneration</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">mIsEvenLive</span> <span class="o">:</span> <span class="n">mIsOddLive</span><span class="o">;</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">aGeneration</span> <span class="o">==</span> <span class="n">mGeneration</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="n">tIsLive</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="n">mGeneration</span><span class="o">++;</span>
                <span class="kt">int</span> <span class="n">tLiveCells</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">tLiveCells</span> <span class="o">+=</span> <span class="n">mAdjoiningCells</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">next</span><span class="o">(</span><span class="n">aGeneration</span><span class="o">)</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="kt">boolean</span> <span class="n">tNext</span> <span class="o">=</span> <span class="n">tLiveCells</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">?</span> <span class="kc">true</span> <span class="o">:</span> <span class="n">tLiveCells</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">?</span> <span class="n">tIsLive</span> <span class="o">:</span> <span class="kc">false</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">((</span><span class="n">aGeneration</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">mIsOddLive</span> <span class="o">=</span> <span class="n">tNext</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">mIsEvenLive</span> <span class="o">=</span> <span class="n">tNext</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">tIsLive</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">private</span> <span class="k">final</span> <span class="n">Cell</span><span class="o">[][]</span> <span class="n">mMap</span><span class="o">;</span>
        <span class="k">private</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">mWidth</span><span class="o">;</span>
        <span class="k">private</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">mHeight</span><span class="o">;</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">mGeneration</span><span class="o">;</span>

        <span class="k">public</span> <span class="n">World</span><span class="o">(</span><span class="kt">boolean</span><span class="o">[][]</span> <span class="n">aInitialValues</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">tHeight</span> <span class="o">=</span> <span class="n">aInitialValues</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">tWidth</span> <span class="o">=</span> <span class="n">aInitialValues</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span>
            <span class="n">mMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cell</span><span class="o">[</span><span class="n">tWidth</span><span class="o">][</span><span class="n">tHeight</span><span class="o">];</span>
            <span class="n">mWidth</span> <span class="o">=</span> <span class="n">tWidth</span><span class="o">;</span>
            <span class="n">mHeight</span> <span class="o">=</span> <span class="n">tHeight</span><span class="o">;</span>
            <span class="n">mGeneration</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">createCell</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">tWidth</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">tHeight</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">mMap</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">].</span><span class="na">mIsOddLive</span> <span class="o">=</span> <span class="n">aInitialValues</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">];</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">private</span> <span class="n">Cell</span> <span class="n">createCell</span><span class="o">(</span><span class="kt">int</span> <span class="n">aX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">aY</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">aX</span> <span class="o">=</span> <span class="o">(</span><span class="n">aX</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">aX</span> <span class="o">+</span> <span class="n">mWidth</span> <span class="o">:</span> <span class="n">aX</span><span class="o">)</span> <span class="o">%</span> <span class="n">mWidth</span><span class="o">;</span>
            <span class="n">aY</span> <span class="o">=</span> <span class="o">(</span><span class="n">aY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">aY</span> <span class="o">+</span> <span class="n">mHeight</span> <span class="o">:</span> <span class="n">aY</span><span class="o">)</span> <span class="o">%</span> <span class="n">mHeight</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">mMap</span><span class="o">[</span><span class="n">aX</span><span class="o">][</span><span class="n">aY</span><span class="o">]</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">mMap</span><span class="o">[</span><span class="n">aX</span><span class="o">][</span><span class="n">aY</span><span class="o">];</span>
            <span class="o">}</span>

            <span class="n">Cell</span> <span class="n">tCell</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cell</span><span class="o">();</span>
            <span class="n">mMap</span><span class="o">[</span><span class="n">aX</span><span class="o">][</span><span class="n">aY</span><span class="o">]</span> <span class="o">=</span> <span class="n">tCell</span><span class="o">;</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">+</span> <span class="mi">0</span><span class="o">,</span> <span class="n">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">aY</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">aY</span> <span class="o">+</span> <span class="mi">0</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">5</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">+</span> <span class="mi">0</span><span class="o">,</span> <span class="n">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">6</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">aY</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">tCell</span><span class="o">.</span><span class="na">mAdjoiningCells</span><span class="o">[</span><span class="mi">7</span><span class="o">]</span> <span class="o">=</span> <span class="n">createCell</span><span class="o">(</span><span class="n">aX</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">aY</span> <span class="o">+</span> <span class="mi">0</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">tCell</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">void</span> <span class="n">next</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">mMap</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">].</span><span class="na">next</span><span class="o">(++</span><span class="n">mGeneration</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">final</span> <span class="kt">boolean</span> <span class="n">tIsEven</span> <span class="o">=</span> <span class="o">(</span><span class="n">mGeneration</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span>
            <span class="n">StringBuilder</span> <span class="n">tBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">mHeight</span> <span class="o">*</span> <span class="o">(</span><span class="n">mWidth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">mHeight</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">mWidth</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">tBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="n">tIsEven</span> <span class="o">?</span> <span class="n">mMap</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">].</span><span class="na">mIsEvenLive</span> <span class="o">:</span> <span class="n">mMap</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">].</span><span class="na">mIsOddLive</span><span class="o">)</span> <span class="o">?</span> <span class="sc">&#39;■&#39;</span> <span class="o">:</span> <span class="sc">&#39;□&#39;</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">tBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">tBuilder</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">o</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="kt">boolean</span> <span class="n">_</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">World</span> <span class="n">tWorld</span> <span class="o">=</span> <span class="k">new</span> <span class="n">World</span><span class="o">(</span><span class="k">new</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="o">{</span> <span class="c">// とりあえずグライダー</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">o</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">o</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">o</span><span class="o">,</span><span class="n">o</span><span class="o">,</span><span class="n">o</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
                <span class="o">{</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">,</span><span class="n">_</span><span class="o">},</span>
        <span class="o">});</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span> <span class="c">// 100世代実行</span>
            <span class="n">tWorld</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tWorld</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5387/addtag/" class="addtag" id="addtag_5387">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5387/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5387/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5387"
  >-</span><span
  class="button yellow"
  id="rating_z_5387"
  >0</span><span 
  class="button green"
  id="rating_p_5387"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5387/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5389">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/352/" target="_top">186</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5389/">#5389</a>(<script language="JavaScript">print_time(new Date("2008/01/18 16:14 GMT"));</script><noscript>2008/01/18 16:14 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<ul>
<li>
(life-game board upper-time)で実行
<ul>
<li>
boardは100要素の0, 1のリストとする
</li>
</ul>
</li>
<li>
e以外を入力すると1ステップ進みステップ数と盤面を出力
</li>
<li>
eを入力すると打ち切り
</li>
<li>ステップ数がupper-timeに到達したら終了</li>
</ul>
<p></p>
<p>ところでt=1で(x,y)=(10,9)のセルは生きてるんじゃないでしょうか?</p>
<p>t=0で隣接する(10,8), (9, 10), (1,9)が生きているので.</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">list</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-next-board</span> <span class="nv">board</span><span class="p">)</span> <span class="c1">;盤面の更新</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-neighbours</span> <span class="nv">n</span><span class="p">)</span> <span class="c1">;隣接セルのインデックス</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">ln-in</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">modulo </span><span class="nv">x</span> <span class="mi">10</span><span class="p">)</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nb">modulo </span><span class="nv">y</span> <span class="mi">10</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">receive</span>
     <span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">quotient&amp;remainder</span> <span class="nv">n</span> <span class="mi">10</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">ln-in</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">ln-in</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-live?</span> <span class="nv">n</span> <span class="nv">board</span><span class="p">)</span> <span class="c1">;セルが生きているかどうか</span>
    <span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">list-ref </span><span class="nv">board</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-next-cell</span> <span class="nv">n</span> <span class="nv">board</span><span class="p">)</span> <span class="c1">;セルの更新</span>
    <span class="p">(</span><span class="k">let </span><span class="err">[</span><span class="p">(</span><span class="nf">count</span>
           <span class="p">(</span><span class="nb">apply </span><span class="nv">+</span>
                  <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">list-ref </span><span class="nv">board</span> <span class="nv">x</span><span class="p">))</span>
                       <span class="p">(</span><span class="nf">life-neighbours</span> <span class="nv">n</span><span class="p">))))</span><span class="err">]</span>
      <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nf">life-live?</span> <span class="nv">n</span> <span class="nv">board</span><span class="p">)</span>
            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">3</span><span class="p">))</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span><span class="err">]</span>
            <span class="err">[</span><span class="nv">else</span>
            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">3</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)</span><span class="err">]</span><span class="p">)))</span>
  <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">life-next-cell</span> <span class="nv">n</span> <span class="nv">board</span><span class="p">))</span>
       <span class="p">(</span><span class="nf">iota</span> <span class="mi">100</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-print</span> <span class="nv">b</span> <span class="nv">t</span><span class="p">)</span> <span class="c1">;出力用</span>
  <span class="p">(</span><span class="nf">begin</span>
    <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">format</span> <span class="no">#t</span> <span class="s">&quot;Time = ~d&quot;</span> <span class="nv">t</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">map </span><span class="nv">print</span> <span class="p">(</span><span class="nf">slices</span> <span class="nv">b</span> <span class="mi">10</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-game</span> <span class="nv">b</span> <span class="nv">u-t</span><span class="p">)</span> <span class="c1">;本体</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">lg-in</span> <span class="nv">b</span> <span class="nv">t</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">c</span> <span class="p">(</span><span class="nf">read-char</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">char=? </span><span class="sc">#\e</span> <span class="nv">c</span><span class="p">))</span>
          <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">t</span> <span class="nv">u-t</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">begin</span>
              <span class="p">(</span><span class="nf">life-print</span> <span class="nv">b</span> <span class="nv">t</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">lg-in</span> <span class="p">(</span><span class="nf">life-next-board</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">t</span> <span class="mi">1</span><span class="p">)))))))</span>
  <span class="p">(</span><span class="nf">lg-in</span> <span class="nv">b</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">b1</span> <span class="p">(</span><span class="nf">list</span>
            <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span>
            <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span>
            <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span>
            <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
            <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span>
            <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span>
            <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
            <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span>
            <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span>
            <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="nf">life-game</span> <span class="nv">b1</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5389/addtag/" class="addtag" id="addtag_5389">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5389/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5389/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5389"
  >-</span><span
  class="button yellow"
  id="rating_z_5389"
  >0</span><span 
  class="button green"
  id="rating_p_5389"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5389/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5389/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5390">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/457/" target="_top">kgoto</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5390/">#5390</a>(<script language="JavaScript">print_time(new Date("2008/01/18 19:34 GMT"));</script><noscript>2008/01/18 19:34 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>枠のセルの判定を簡単にするためにwidth+2, height+2の配列を用意して一番外側に0を入れています．
無限ループにしてますが#    if t &gt; 20:returnの部分を変更してやれば任意のステップで停止します.
グライダーの実行結果
t=0
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [*] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [*] [*] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
t=1
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [ ] [*] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [*] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [*] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
t=2
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [ ] [*] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [*] [*] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]
[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ]</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49</pre></td><td class="code"><div class="highlight"><pre><span class="c">#! -*- coding: utf-8 -*-</span>
<span class="k">from</span> <span class="nn">random</span> <span class="k">import</span> <span class="n">random</span>
<span class="n">width</span><span class="o">=</span><span class="mi">10</span>
<span class="n">height</span><span class="o">=</span><span class="mi">10</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span><span class="n">L2</span><span class="p">,</span><span class="n">t</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">&#39;t=</span><span class="si">%d</span><span class="s">&#39;</span><span class="o">%</span><span class="n">t</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">s</span><span class="o">=</span><span class="s">&#39;[</span><span class="si">%s</span><span class="s">]&#39;</span>
            <span class="k">if</span> <span class="n">L1</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span>
                <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">%</span><span class="s">&#39;*&#39;</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">s</span><span class="o">=</span><span class="n">s</span><span class="o">%</span><span class="s">&#39; &#39;</span>
            <span class="k">print</span> <span class="n">s</span><span class="p">,</span>
        <span class="k">print</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">):</span>
                    <span class="k">if</span> <span class="n">i</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">j</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span><span class="k">continue</span>
                    <span class="k">if</span> <span class="n">L1</span><span class="p">[</span><span class="n">y</span><span class="o">+</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="o">+</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">:</span><span class="n">cnt</span><span class="o">+=</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">L1</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span> <span class="ow">and</span> <span class="n">cnt</span><span class="o">==</span><span class="mi">3</span><span class="p">:</span><span class="n">L2</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
            <span class="k">elif</span> <span class="n">L1</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span> <span class="ow">and</span> <span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">cnt</span> <span class="o">&lt;=</span><span class="mi">3</span><span class="p">:</span> <span class="n">L2</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span> <span class="n">L2</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span>
<span class="c">#    if t &gt; 20:return</span>
    <span class="n">main</span><span class="p">(</span><span class="n">L2</span><span class="p">,</span><span class="n">L1</span><span class="p">,</span><span class="n">t</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">L1</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">height</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">width</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">random</span><span class="p">()</span><span class="o">&lt;=</span><span class="mf">0.3</span><span class="p">:</span>
                <span class="n">L1</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span>
    <span class="n">L2</span><span class="o">=</span><span class="p">[[</span><span class="mi">0</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">width</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">height</span><span class="o">+</span><span class="mi">2</span><span class="p">)]</span>
<span class="c">#    確認用 グライダー</span>
<span class="c">#     L1=[[0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,1,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,1,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,1,1,1,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0],</span>
<span class="c">#         [0,0,0,0,0,0,0,0,0,0,0,0]]</span>
    <span class="n">main</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span><span class="n">L2</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5390/addtag/" class="addtag" id="addtag_5390">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5390/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5390/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5390"
  >-</span><span
  class="button yellow"
  id="rating_z_5390"
  >0</span><span 
  class="button green"
  id="rating_p_5390"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5390/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5391">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5391/">#5391</a>(<script language="JavaScript">print_time(new Date("2008/01/19 03:19 GMT"));</script><noscript>2008/01/19 03:19 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>こんなんでどうでしょう？
位置ごとに生死の情報を持たせるのではなく、
各セルに注目して、各セルに位置と生死の情報を持たせたらどんなコードになるかな？と思い書いてみました。
でも、周囲のセルをカウントするときに位置からセルの生死を判断してるので中途半端ですね。
間引きは題意がよくわからなかったので実装せず。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128</pre></td><td class="code"><div class="highlight"><pre><span class="c">//http://ja.doukaku.org/126/ 投稿用</span>

<span class="c">//Wikipediaライフゲーム</span>
<span class="c">//http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0</span>

<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">LifeGame</span> <span class="k">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">SIZE</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span><span class="c">//変更したらCellクラスのSIZEも要変更</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="kt">string</span> <span class="n">start</span> <span class="p">=</span>
<span class="s">@&quot;</span>
<span class="s">□■□□□□■□□□</span>
<span class="s">■□□□□■□□□□</span>
<span class="s">■■■□□■■■□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□&quot;</span><span class="p">;</span><span class="c">//SIZE * SIZEの文字列</span>
        <span class="n">start</span> <span class="p">=</span> <span class="n">start</span><span class="p">.</span><span class="n">TrimStart</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[]</span> <span class="k">{</span> <span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="sc">&#39;\r&#39;</span> <span class="k">}</span><span class="p">);</span><span class="c">//最初の改行を取り除く</span>
        <span class="kt">char</span><span class="p">[][]</span> <span class="n">field</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">SIZE</span><span class="p">][];</span><span class="c">//ライフゲームテーブル</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;</span> <span class="n">cells</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;();</span><span class="c">//セル</span>

        <span class="c">//startをfieldにセットする</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span> <span class="k">{</span><span class="c">//行でループ</span>
            <span class="n">field</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="p">=</span> <span class="n">start</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[]</span> <span class="k">{</span> <span class="sc">&#39;\n&#39;</span> <span class="k">}</span><span class="p">)[</span><span class="n">y</span><span class="p">].</span><span class="n">ToCharArray</span><span class="p">();</span><span class="c">//改行で分割して文字配列にしてセット</span>
        <span class="k">}</span>

        <span class="c">//fieldからCellを生成</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span> <span class="k">{</span><span class="c">//field縦ループ</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span> <span class="k">{</span><span class="c">//field横ループ</span>
                <span class="n">cells</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Cell</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">field</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="p">==</span> <span class="sc">&#39;■&#39;</span><span class="p">));</span><span class="c">//Cellに座標をセットしてcellsに追加</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="c">//メインループ</span>
        <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="k">{</span>
            <span class="c">//出力</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
            <span class="k">foreach</span><span class="p">(</span><span class="kt">char</span><span class="p">[]</span> <span class="n">str</span> <span class="k">in</span> <span class="n">field</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
            <span class="k">}</span>

            <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">300</span><span class="p">);</span><span class="c">//ウェイト            </span>

            <span class="c">//次回の生死を判定、セット</span>
            <span class="k">foreach</span><span class="p">(</span><span class="n">Cell</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">cells</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">cell</span><span class="p">.</span><span class="n">SetNextLife</span><span class="p">();</span>
            <span class="k">}</span>

            <span class="c">//判定した生死をfieldに反映</span>
            <span class="k">foreach</span><span class="p">(</span><span class="n">Cell</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">cells</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">cell</span><span class="p">.</span><span class="n">SetField</span><span class="p">();</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>

<span class="c">//各セルのデータ</span>
<span class="k">class</span> <span class="nc">Cell</span> <span class="k">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">SIZE</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span><span class="c">//変更したらLifeGameクラスのSIZEも要変更</span>
    <span class="kt">char</span><span class="p">[][]</span> <span class="n">Field</span><span class="p">;</span>

    <span class="c">//位置</span>
    <span class="kt">int</span> <span class="n">X</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">Y</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">Life</span><span class="p">;</span><span class="c">//状態</span>
    <span class="kt">bool</span> <span class="n">NextLife</span><span class="p">;</span><span class="c">//次回の状態(一時保存用)</span>

    <span class="k">public</span> <span class="nf">Cell</span><span class="p">(</span><span class="kt">char</span><span class="p">[][]</span> <span class="n">field</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">life</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">Field</span> <span class="p">=</span> <span class="n">field</span><span class="p">;</span>
        <span class="n">X</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">Y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">Life</span> <span class="p">=</span> <span class="n">life</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//次回の生死を判定</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetNextLife</span><span class="p">()</span> <span class="k">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">GetCount</span><span class="p">())</span> <span class="k">{</span>
        <span class="k">case</span> <span class="m">3</span><span class="p">:</span><span class="c">//誕生、維持</span>
            <span class="n">NextLife</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="m">2</span><span class="p">:</span><span class="c">//維持</span>
            <span class="n">NextLife</span> <span class="p">=</span> <span class="n">Life</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="p">:</span><span class="c">//死亡</span>
            <span class="n">NextLife</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="c">//判定した生死をfieldに反映</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetField</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">Field</span><span class="p">[</span><span class="n">Y</span><span class="p">][</span><span class="n">X</span><span class="p">]</span> <span class="p">=</span> <span class="n">NextLife</span> <span class="p">?</span> <span class="sc">&#39;■&#39;</span> <span class="p">:</span> <span class="sc">&#39;□&#39;</span><span class="p">;</span>
        <span class="n">Life</span> <span class="p">=</span> <span class="n">NextLife</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//セル周囲の生きているセルをカウント</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">GetCount</span><span class="p">()</span> <span class="k">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y_</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="n">y_</span> <span class="p">&lt;=</span> <span class="m">1</span><span class="p">;</span> <span class="n">y_</span><span class="p">++)</span> <span class="k">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x_</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="n">x_</span> <span class="p">&lt;=</span> <span class="m">1</span><span class="p">;</span> <span class="n">x_</span><span class="p">++)</span> <span class="k">{</span>
                <span class="k">if</span><span class="p">(!(</span><span class="n">x_</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">y_</span> <span class="p">==</span> <span class="m">0</span><span class="p">))</span> <span class="k">{</span>
                    <span class="kt">int</span> <span class="n">locationX</span> <span class="p">=</span> <span class="n">GetRoopLocation</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">x_</span><span class="p">);</span>
                    <span class="kt">int</span> <span class="n">locationY</span> <span class="p">=</span> <span class="n">GetRoopLocation</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">y_</span><span class="p">);</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">Field</span><span class="p">[</span><span class="n">locationY</span><span class="p">][</span><span class="n">locationX</span><span class="p">]</span> <span class="p">==</span> <span class="sc">&#39;■&#39;</span><span class="p">)</span> <span class="n">count</span><span class="p">++;</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//fieldの端と端を繋ぐ</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">GetRoopLocation</span><span class="p">(</span><span class="kt">int</span> <span class="n">location</span><span class="p">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">location</span> <span class="p">+</span> <span class="n">direction</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">case</span> <span class="p">-</span><span class="m">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">SIZE</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">SIZE</span><span class="p">:</span>
            <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">location</span> <span class="p">+</span> <span class="n">direction</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5391/addtag/" class="addtag" id="addtag_5391">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/C%232.0/">C#2.0</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5391/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5391/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5391"
  >-</span><span
  class="button yellow"
  id="rating_z_5391"
  >0</span><span 
  class="button green"
  id="rating_p_5391"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5391/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5391/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5392">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5392/">#5392</a>(<script language="JavaScript">print_time(new Date("2008/01/19 03:44 GMT"));</script><noscript>2008/01/19 03:44 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>がっつりと勘違いしてました。
こっそりと修正。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137</pre></td><td class="code"><div class="highlight"><pre><span class="c">//http://ja.doukaku.org/126/ 投稿用</span>

<span class="c">//Wikipediaライフゲーム</span>
<span class="c">//http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B2%E3%83%BC%E3%83%A0</span>

<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">LifeGame</span> <span class="k">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">SIZE</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span><span class="c">//変更したらCellクラスのSIZEも要変更</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="kt">string</span> <span class="n">start</span> <span class="p">=</span>
<span class="s">@&quot;</span>
<span class="s">□■□□□□■□□□</span>
<span class="s">■□□□□■□□□□</span>
<span class="s">■■■□□■■■□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□</span>
<span class="s">□□□□□□□□□□&quot;</span><span class="p">;</span><span class="c">//SIZE * SIZEの文字列</span>
        <span class="n">start</span> <span class="p">=</span> <span class="n">start</span><span class="p">.</span><span class="n">TrimStart</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[]</span> <span class="k">{</span> <span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="sc">&#39;\r&#39;</span> <span class="k">}</span><span class="p">);</span><span class="c">//最初の改行を取り除く</span>
        <span class="kt">char</span><span class="p">[][]</span> <span class="n">field</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">SIZE</span><span class="p">][];</span><span class="c">//ライフゲームテーブル</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;</span> <span class="n">cells</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;();</span><span class="c">//セル</span>

        <span class="c">//startをfieldにセットする</span>
        <span class="c">//for(int y = 0; y &lt; SIZE; y++) {//行でループ</span>
        <span class="c">//    field[y] = start.Split(new char[] { &#39;\n&#39; })[y].ToCharArray();//改行で分割して文字配列にしてセット</span>
        <span class="c">//}</span>

        <span class="c">//ランダムにfieldを生成</span>
        <span class="n">Random</span> <span class="n">rnd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span> <span class="p">;</span><span class="n">j</span><span class="p">&lt;</span><span class="n">SIZE</span><span class="p">;</span><span class="n">j</span><span class="p">++)</span> <span class="k">{</span>
            <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">SIZE</span><span class="p">];</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">SIZE</span><span class="p">;</span><span class="n">i</span><span class="p">++</span> <span class="p">)</span> <span class="k">{</span>
                <span class="n">field</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">100</span><span class="p">)</span> <span class="p">&lt;=</span> <span class="m">30</span> <span class="p">?</span> <span class="sc">&#39;■&#39;</span> <span class="p">:</span> <span class="sc">&#39;□&#39;</span><span class="p">;</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="c">//fieldからCellを生成</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span> <span class="k">{</span><span class="c">//field縦ループ</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">SIZE</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span> <span class="k">{</span><span class="c">//field横ループ</span>
                <span class="n">cells</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Cell</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">field</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="p">==</span> <span class="sc">&#39;■&#39;</span><span class="p">));</span><span class="c">//Cellに座標をセットしてcellsに追加</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="c">//メインループ</span>
        <span class="k">while</span><span class="p">(</span><span class="k">true</span><span class="p">)</span> <span class="k">{</span>
            <span class="c">//出力</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
            <span class="k">foreach</span><span class="p">(</span><span class="kt">char</span><span class="p">[]</span> <span class="n">str</span> <span class="k">in</span> <span class="n">field</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
            <span class="k">}</span>

            <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">300</span><span class="p">);</span><span class="c">//ウェイト            </span>

            <span class="c">//次回の生死を判定、セット</span>
            <span class="k">foreach</span><span class="p">(</span><span class="n">Cell</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">cells</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">cell</span><span class="p">.</span><span class="n">SetNextLife</span><span class="p">();</span>
            <span class="k">}</span>

            <span class="c">//判定した生死をfieldに反映</span>
            <span class="k">foreach</span><span class="p">(</span><span class="n">Cell</span> <span class="n">cell</span> <span class="k">in</span> <span class="n">cells</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">cell</span><span class="p">.</span><span class="n">SetField</span><span class="p">();</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>

<span class="c">//各セルのデータ</span>
<span class="k">class</span> <span class="nc">Cell</span> <span class="k">{</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">SIZE</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span><span class="c">//変更したらLifeGameクラスのSIZEも要変更</span>
    <span class="kt">char</span><span class="p">[][]</span> <span class="n">Field</span><span class="p">;</span>

    <span class="c">//位置</span>
    <span class="kt">int</span> <span class="n">X</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">Y</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="n">Life</span><span class="p">;</span><span class="c">//状態</span>
    <span class="kt">bool</span> <span class="n">NextLife</span><span class="p">;</span><span class="c">//次回の状態(一時保存用)</span>

    <span class="k">public</span> <span class="nf">Cell</span><span class="p">(</span><span class="kt">char</span><span class="p">[][]</span> <span class="n">field</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">life</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">Field</span> <span class="p">=</span> <span class="n">field</span><span class="p">;</span>
        <span class="n">X</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
        <span class="n">Y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
        <span class="n">Life</span> <span class="p">=</span> <span class="n">life</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//次回の生死を判定</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetNextLife</span><span class="p">()</span> <span class="k">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">GetCount</span><span class="p">())</span> <span class="k">{</span>
        <span class="k">case</span> <span class="m">3</span><span class="p">:</span><span class="c">//誕生、維持</span>
            <span class="n">NextLife</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="m">2</span><span class="p">:</span><span class="c">//維持</span>
            <span class="n">NextLife</span> <span class="p">=</span> <span class="n">Life</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="p">:</span><span class="c">//死亡</span>
            <span class="n">NextLife</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="c">//判定した生死をfieldに反映</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SetField</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">Field</span><span class="p">[</span><span class="n">Y</span><span class="p">][</span><span class="n">X</span><span class="p">]</span> <span class="p">=</span> <span class="n">NextLife</span> <span class="p">?</span> <span class="sc">&#39;■&#39;</span> <span class="p">:</span> <span class="sc">&#39;□&#39;</span><span class="p">;</span>
        <span class="n">Life</span> <span class="p">=</span> <span class="n">NextLife</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//セル周囲の生きているセルをカウント</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">GetCount</span><span class="p">()</span> <span class="k">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y_</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="n">y_</span> <span class="p">&lt;=</span> <span class="m">1</span><span class="p">;</span> <span class="n">y_</span><span class="p">++)</span> <span class="k">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x_</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="n">x_</span> <span class="p">&lt;=</span> <span class="m">1</span><span class="p">;</span> <span class="n">x_</span><span class="p">++)</span> <span class="k">{</span>
                <span class="k">if</span><span class="p">(!(</span><span class="n">x_</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">y_</span> <span class="p">==</span> <span class="m">0</span><span class="p">))</span> <span class="k">{</span>
                    <span class="kt">int</span> <span class="n">locationX</span> <span class="p">=</span> <span class="n">GetRoopLocation</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">x_</span><span class="p">);</span>
                    <span class="kt">int</span> <span class="n">locationY</span> <span class="p">=</span> <span class="n">GetRoopLocation</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">y_</span><span class="p">);</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">Field</span><span class="p">[</span><span class="n">locationY</span><span class="p">][</span><span class="n">locationX</span><span class="p">]</span> <span class="p">==</span> <span class="sc">&#39;■&#39;</span><span class="p">)</span> <span class="n">count</span><span class="p">++;</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//fieldの端と端を繋ぐ</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">GetRoopLocation</span><span class="p">(</span><span class="kt">int</span> <span class="n">location</span><span class="p">,</span> <span class="kt">int</span> <span class="n">direction</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">location</span> <span class="p">+</span> <span class="n">direction</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">case</span> <span class="p">-</span><span class="m">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">SIZE</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">SIZE</span><span class="p">:</span>
            <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">default</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">location</span> <span class="p">+</span> <span class="n">direction</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5392/addtag/" class="addtag" id="addtag_5392">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5392/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5392/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5392"
  >-</span><span
  class="button yellow"
  id="rating_z_5392"
  >0</span><span 
  class="button green"
  id="rating_p_5392"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5391/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5392/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5392/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5395">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5395/">#5395</a>(<script language="JavaScript">print_time(new Date("2008/01/19 09:40 GMT"));</script><noscript>2008/01/19 09:40 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<p>Common Lisp です。あえて CLOS(Common Lisp Object System)で。</p>
<p>print-object で印字形式を設定していること、setf で更新している位であとは普通です。</p>
<p>こんな感じで試します。</p>
<p></p>
<p>cl-user(27): (setq b (make-glider))</p>
<p>#&lt;board</p>
<p>.X........</p>
<p>X.........</p>
<p>XXX.......</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>&gt;</p>
<p>cl-user(28): (update b)</p>
<p>#&lt;board</p>
<p>..........</p>
<p>X.X.......</p>
<p>XX........</p>
<p>.X........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>..........</p>
<p>&gt;</p>
<p></p>
<p></p>
<p>初めてライフゲームを実装して、とても楽しかったです。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86</pre></td><td class="code"><div class="highlight"><pre>;;;
;; dokaku 126
;;

(defclass board ()
  ((width :accessor board-width :initarg :w)
   (height :accessor board-height :initarg :h)
   (cells :accessor board-cells :initarg :cells)))

(defmethod print-object ((board board) stream)
  (print-unreadable-object (board stream)
    (format stream &quot;board~%&quot;)
    (loop for y from 0 below (board-height board)
    do
      (loop for x from 0 below (board-width board)
          do
        (format stream &quot;~a&quot; (if (cell board x y) &quot;X&quot; &quot;.&quot;)))
      (format stream &quot;~%&quot;))))

(defun make-board (w h)
  &quot;constructor&quot;
  (make-instance &#39;board :w w :h h :cells (make-array (list w h) :initial-element nil)))

(defun make-random-board (w h)
  (let ((board (make-board w h)))
    (loop for y from 0 below (board-height board)
    do
      (loop for x from 0 below (board-width board)
          do
        (setf (cell board x y) (&lt; (random 10) 3))))
    board))

(defmethod cell ((board board) x y)
  &quot;accessor&quot;
  (aref (board-cells board) (mod x (board-width board)) (mod y (board-height board))))

;; (setf (cell board x y) value) 
(defsetf cell (board x y) (value)
  `(setf (aref (board-cells ,board) (mod ,x (board-width ,board))
           (mod ,y (board-height ,board))) ,value))

(defmethod cell-neighbours ((board board) x y)
  (list (cell board (1- x) (1- y))
    (cell board x (1- y))
    (cell board (1+ x) (1- y))
    (cell board (1- x) y)
    (cell board (1+ x) y)
    (cell board (1- x) (1+ y))
    (cell board x (1+ y))
    (cell board (1+ x) (1+ y))))

(defmethod cell-survivep ((board board) x y)
  (let ((c (cell board x y))
    (n (count-if #&#39;identity (cell-neighbours board x y))))
    (cond
     ((and (not c) (= n 3)) t) ;; born
     ((and c (or (= n 3) (= n 2))) t) ;; keep
     (t nil)))) ;; die

(defmethod update ((board board))
  (let ((next
     (loop for y from 0 below (board-height board)
         append
           (loop for x from 0 below (board-width board)
           collect (list x y (cell-survivep board x y))))))
    (loop for elt in next
    do
      (destructuring-bind (x y v) elt
        (setf (cell board x y) v))))
  board)

(defun make-blinker ()
  (let ((b (make-board 10 10)))
    (setf (cell b 1 0) t
      (cell b 1 1) t
      (cell b 1 2) t)
    b))

(defun make-glider ()
  (let ((b (make-board 10 10)))
    (setf (cell b 1 0) t
      (cell b 0 1) t
      (cell b 0 2) t
      (cell b 1 2) t
      (cell b 2 2) t)
    b))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5395/addtag/" class="addtag" id="addtag_5395">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/CLOS/">CLOS</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5395/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5395/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5395"
  >-</span><span
  class="button yellow"
  id="rating_z_5395"
  >0</span><span 
  class="button green"
  id="rating_p_5395"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5395/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5398">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5398/">#5398</a>(<script language="JavaScript">print_time(new Date("2008/01/19 13:20 GMT"));</script><noscript>2008/01/19 13:20 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>確かにt=1で(x,y)=(10,9)のセルは生き残ってないとおかしいですね. (^ ^);
すいません, こちらのコーディングにバグがありました.</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5398/addtag/" class="addtag" id="addtag_5398">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5398"
  >-</span><span
  class="button yellow"
  id="rating_z_5398"
  >0</span><span 
  class="button green"
  id="rating_p_5398"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5389/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5398/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5398/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5399">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5399/">#5399</a>(<script language="JavaScript">print_time(new Date("2008/01/19 13:27 GMT"));</script><noscript>2008/01/19 13:27 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で、二次元配列オブジェクト（a Matrix）を使って書いてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td class="code"><div class="highlight"><pre>| 行数 世代 現状 次面 八方 |

行数 := 10. 世代 := 50.
現状 := Matrix new: 行数 tabulate: [:行＃ :列＃ | #(1 0 0) atRandom].
次面 := Matrix new: 行数.
八方 := OrderedCollection new.
(-1 to: 1) asDigitsToPower: 2 do: [:組 | 八方 add: 組 first @ 組 second].
八方 remove: 0@0.

World findATranscript: nil.
世代 timesRepeat: [
    Transcript cr; show: (String streamContents: [:ss |
        (1 to: 行数) do: [:行＃ |
            (現状 atRow: 行＃) do: [:idx | ss nextPut: (&#39;□■&#39; at: idx + 1)].
            ss cr]]).

    次面 atAllPut: 0.
    現状 indicesDo: [:行＃ :列＃ |
        | 総数 |
        総数 := 八方 inject: 0 into: [:和 :Δ |
            | 位置 |
            位置 := 行＃@列＃ + Δ - 1 \\ 行数 + 1.
            和 + (現状 at: 位置 x at: 位置 y)].
        次面 at: 行＃ at: 列＃ put: (総数 caseOf: {
            [2] -&gt; [現状 at: 行＃ at: 列＃].
            [3] -&gt; [1]} otherwise: [0])].

    現状 := 次面 flag: (次面 := 現状)]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5399/addtag/" class="addtag" id="addtag_5399">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%AF%E3%83%88/">コンパクト</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5399/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5399/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5399"
  >-</span><span
  class="button yellow"
  id="rating_z_5399"
  >0</span><span 
  class="button green"
  id="rating_p_5399"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5399/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5399/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5401">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5401/">#5401</a>(<script language="JavaScript">print_time(new Date("2008/01/19 15:25 GMT"));</script><noscript>2008/01/19 15:25 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>死ぬことが予想されるセルを殺して, 周囲のセルを活かました. 
生存率は2-3倍ほどに上昇. 
行を減らすために`and'を利用してやたら文を連結してますが, 
結合度については考慮しているので, セミコロンに置き替えて読んで下さっても
同じことです. 
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;Matrix&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;kconv&#39;</span>
<span class="n">N</span><span class="p">,</span> <span class="n">M</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">10</span>
<span class="no">Density</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">7</span>
<span class="k">class</span> <span class="nc">CellMatrix</span>
  <span class="no">Lived</span><span class="p">,</span> <span class="no">Died</span> <span class="o">=</span> <span class="s1">&#39;[*]&#39;</span><span class="p">,</span> <span class="s1">&#39;[ ]&#39;</span>
  <span class="no">Threshold</span> <span class="o">=</span> <span class="mi">4</span> <span class="ow">and</span> <span class="no">ModerateDensity</span> <span class="o">=</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="vi">@cell_matrix</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">m</span><span class="p">){</span><span class="o">|</span><span class="n">j</span><span class="o">|</span> <span class="nb">block_given?</span> <span class="p">?</span> <span class="p">(</span><span class="k">yield</span> <span class="o">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">]</span><span class="p">)</span> <span class="p">:</span> <span class="mi">0</span><span class="p">}}</span>
    <span class="vi">@time</span><span class="p">,</span> <span class="vi">@victim</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">gen_seed</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
    <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="n">r_size</span><span class="p">),</span> <span class="nb">rand</span><span class="p">(</span><span class="n">c_size</span><span class="p">)</span>
    <span class="n">live</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="n">gen_seed</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">step</span>
    <span class="n">env_mat</span> <span class="o">=</span> <span class="n">get_env</span> <span class="ow">and</span> <span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span>
      <span class="k">case</span> <span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
      <span class="k">when</span> <span class="mi">0</span><span class="p">:</span> <span class="n">live</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="k">if</span> <span class="n">env_mat</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
      <span class="k">when</span> <span class="mi">1</span><span class="p">:</span> <span class="n">die</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>  <span class="k">if</span> <span class="n">env_mat</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span>
      <span class="k">end</span>
    <span class="p">}</span> <span class="ow">and</span> <span class="vi">@time</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">thin_out</span> <span class="c1">#間引き</span>
    <span class="n">env_mat</span> <span class="o">=</span> <span class="n">get_env</span> <span class="ow">and</span> <span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span>
      <span class="n">max</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:pos</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">,</span> <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">}</span> <span class="ow">and</span> <span class="n">env_mat</span><span class="o">.</span><span class="n">scan_env</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">){</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">|</span>
        <span class="n">max</span><span class="o">[</span><span class="ss">:pos</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">]</span> <span class="ow">and</span> <span class="n">max</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="o">=</span> <span class="n">env_mat</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">)</span> <span class="k">if</span> <span class="n">env_mat</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span>
      <span class="p">}</span>
      <span class="n">kill</span><span class="p">(</span><span class="o">*</span><span class="n">max</span><span class="o">[</span><span class="ss">:pos</span><span class="o">]</span><span class="p">)</span> <span class="ow">and</span> <span class="vi">@victim</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">max</span><span class="o">[</span><span class="ss">:value</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="no">Threshold</span> <span class="ow">and</span> <span class="n">at</span><span class="p">(</span><span class="o">*</span><span class="n">max</span><span class="o">[</span><span class="ss">:pos</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span>
    <span class="p">}</span> <span class="ow">and</span> <span class="n">remain</span> <span class="o">&lt;=</span> <span class="n">r_size</span> <span class="o">*</span> <span class="n">c_size</span> <span class="o">*</span> <span class="no">ModerateDensity</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="n">thin_out</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">dup</span><span class="p">;</span> <span class="no">CellMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">r_size</span><span class="p">,</span> <span class="n">c_size</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span> <span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)}</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">remain</span><span class="p">;</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span> <span class="n">count</span> <span class="o">+=</span> <span class="n">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)}</span> <span class="ow">and</span> <span class="n">count</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">comment</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;t = </span><span class="si">#{</span><span class="vi">@time</span><span class="si">}</span><span class="s2"> Remain: </span><span class="si">#{</span><span class="n">remain</span><span class="si">}</span><span class="s2">, Victim: </span><span class="si">#{</span><span class="vi">@victim</span><span class="si">}</span><span class="s2"> #</span><span class="si">#{</span><span class="n">comment</span><span class="si">}</span><span class="se">\n</span><span class="si">#{</span><span class="n">out</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">tosjis</span>
  <span class="k">end</span>
  <span class="kp">protected</span>
  <span class="k">def</span> <span class="nf">at</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="vi">@cell_matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span> <span class="n">r_size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">c_size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">j</span><span class="o">|</span> <span class="k">yield</span> <span class="o">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">]</span><span class="p">}}</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">scan_env</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">r_size</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">:</span> <span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">==</span> <span class="n">r_size</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">b</span> <span class="o">=</span> <span class="o">[</span><span class="n">j</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="n">c_size</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">:</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">j</span> <span class="o">==</span> <span class="n">c_size</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">a</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">b</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="k">yield</span> <span class="o">[</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">]</span> <span class="k">unless</span> <span class="n">k</span> <span class="o">==</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">l</span> <span class="o">==</span> <span class="n">j</span><span class="p">}}</span>
  <span class="k">end</span>
  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">out</span><span class="p">;</span> <span class="vi">@cell_matrix</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">line</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="no">Died</span> <span class="p">:</span> <span class="no">Lived</span><span class="si">}</span><span class="s2">.join}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">}</span><span class="o">.</span><span class="n">join</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">r_size</span><span class="p">;</span>   <span class="vi">@cell_matrix</span><span class="o">.</span><span class="n">size</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">c_size</span><span class="p">;</span>   <span class="vi">@cell_matrix</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">live</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span> <span class="vi">@cell_matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">die</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>  <span class="vi">@cell_matrix</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">end</span>
  <span class="k">alias</span> <span class="ss">:kill</span> <span class="ss">:die</span>
  <span class="k">def</span> <span class="nf">get_env</span> <span class="c1">#周囲のセルの状態</span>
    <span class="no">CellMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">r_size</span><span class="p">,</span> <span class="n">c_size</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">scan_env</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">){</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="o">|</span> <span class="n">count</span> <span class="o">+=</span> <span class="n">at</span><span class="p">(</span><span class="n">k</span><span class="p">,</span><span class="n">l</span><span class="p">)}</span> <span class="ow">and</span> <span class="n">count</span>
    <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">real</span> <span class="o">=</span> <span class="no">CellMatrix</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">)</span>
<span class="n">initial</span> <span class="o">=</span> <span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">M</span><span class="o">*</span><span class="no">Density</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span>
<span class="n">real</span><span class="o">.</span><span class="n">gen_seed</span><span class="p">(</span><span class="n">initial</span><span class="p">)</span>
<span class="n">real</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="s1">&#39;過密状態&#39;</span><span class="p">)</span>
<span class="n">virtual</span> <span class="o">=</span> <span class="n">real</span><span class="o">.</span><span class="n">dup</span> <span class="ow">and</span> <span class="n">virtual</span><span class="o">.</span><span class="n">step</span>
<span class="n">virtual</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="s1">&#39;間引きなし&#39;</span><span class="p">)</span>
<span class="n">real</span><span class="o">.</span><span class="n">thin_out</span> <span class="ow">and</span> <span class="n">real</span><span class="o">.</span><span class="n">step</span>
<span class="n">real</span><span class="o">.</span><span class="n">output</span><span class="p">(</span><span class="s1">&#39;間引きあり&#39;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5401/addtag/" class="addtag" id="addtag_5401">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5401/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5401/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5401"
  >-</span><span
  class="button yellow"
  id="rating_z_5401"
  >0</span><span 
  class="button green"
  id="rating_p_5401"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5401/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5402">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/664/" target="_top">tenka</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5402/">#5402</a>(<script language="JavaScript">print_time(new Date("2008/01/19 20:56 GMT"));</script><noscript>2008/01/19 20:56 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>初投稿です
間引きに関しては・・・これでいいのかよくわかりません。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">LifeGame</span> <span class="n">lg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LifeGame</span><span class="p">(</span><span class="m">10</span><span class="p">,</span> <span class="m">10</span><span class="p">,</span> <span class="m">0.3</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
        <span class="kt">short</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">i</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;t = {0}&quot;</span><span class="p">,</span> <span class="n">i</span><span class="p">++);</span>
            <span class="n">lg</span><span class="p">.</span><span class="n">outputConsole</span><span class="p">();</span>
            <span class="n">lg</span><span class="p">.</span><span class="n">scanField</span><span class="p">();</span>

            <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">100</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>

<span class="k">class</span> <span class="nc">LifeGame</span>
<span class="k">{</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">DEAD</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">ALIVE</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
    <span class="c">//横の長さ</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">width_</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Width</span><span class="k">{get{return</span> <span class="n">width_</span><span class="p">;</span><span class="k">}}</span>
    <span class="c">//縦の長さ</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">height_</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Height</span><span class="k">{get{return</span> <span class="n">height_</span><span class="p">;</span><span class="k">}}</span>
    <span class="c">//フィールド</span>
    <span class="k">private</span> <span class="kt">int</span><span class="p">[,]</span> <span class="n">field</span><span class="p">;</span>
    <span class="c">//間引きのON(true)、OFF(false)</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">skipPixelFlag</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">LifeGame</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">,</span> <span class="kt">double</span> <span class="n">rate</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">flag</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">width_</span> <span class="p">=</span> <span class="n">w</span><span class="p">;</span>
        <span class="n">height_</span> <span class="p">=</span> <span class="n">h</span><span class="p">;</span>
        <span class="n">skipPixelFlag</span> <span class="p">=</span> <span class="n">flag</span><span class="p">;</span>
        <span class="n">field</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">];</span>
        <span class="n">createField</span><span class="p">(</span><span class="n">rate</span><span class="p">);</span>
        <span class="c">//デバッグ用</span>
        <span class="c">//width_ = 10;</span>
        <span class="c">//height_ = 10;</span>
        <span class="c">//field = new int[10, 10]</span>
        <span class="c">//{</span>
        <span class="c">//    {0,1,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,1,0,0,0,0,0,0,0},</span>
        <span class="c">//    {1,1,1,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0},</span>
        <span class="c">//    {0,0,0,0,0,0,0,0,0,0}</span>
        <span class="c">//};</span>
    <span class="k">}</span>

    <span class="c">//ランダム生成</span>
    <span class="k">private</span> <span class="k">void</span> <span class="nf">createField</span><span class="p">(</span><span class="kt">double</span> <span class="n">rate</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="p">(</span><span class="n">Width</span> <span class="p">*</span> <span class="n">Height</span> <span class="p">*</span> <span class="n">rate</span><span class="p">);</span>
        <span class="n">Random</span> <span class="n">random</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
        <span class="k">do</span>
        <span class="k">{</span>
            <span class="kt">int</span> <span class="n">w</span> <span class="p">=</span> <span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">Width</span><span class="p">),</span> <span class="n">h</span> <span class="p">=</span> <span class="n">random</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">Height</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">]</span> <span class="p">==</span> <span class="n">DEAD</span><span class="p">)</span> <span class="n">field</span><span class="p">[</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">]</span> <span class="p">=</span> <span class="n">ALIVE</span><span class="p">;</span> <span class="k">else</span> <span class="k">continue</span><span class="p">;</span>
            <span class="n">count</span><span class="p">--;</span>
        <span class="k">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">);</span>
    <span class="k">}</span>

    <span class="c">//次の世代作成</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">scanField</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="kt">int</span><span class="p">[,]</span> <span class="n">temp</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">Width</span><span class="p">,</span> <span class="n">Height</span><span class="p">];</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">Width</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">Height</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="kt">int</span> <span class="n">value</span> <span class="p">=</span> <span class="n">aroundField</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>

                <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">==</span> <span class="m">3</span><span class="p">)</span> <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">ALIVE</span><span class="p">;</span>
                <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">==</span> <span class="m">2</span><span class="p">)</span> <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                <span class="k">else</span> <span class="n">temp</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">DEAD</span><span class="p">;</span>
            <span class="k">}</span>

        <span class="n">field</span> <span class="p">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">[,])</span> <span class="p">(</span><span class="n">temp</span><span class="p">.</span><span class="n">Clone</span><span class="p">());</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">skipPixelFlag</span><span class="p">)</span> <span class="n">skipPixelField</span><span class="p">();</span><span class="c">//間引き</span>
    <span class="k">}</span>

    <span class="c">//間引き</span>
    <span class="c">//といっても、これでいいのか不明。</span>
    <span class="c">//周りに4個以上ALIVEがあったらその枡をDEADにする</span>
    <span class="k">private</span> <span class="k">void</span> <span class="nf">skipPixelField</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">Width</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">Height</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="kt">int</span> <span class="n">value</span> <span class="p">=</span> <span class="n">aroundField</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="p">&gt;</span> <span class="m">4</span><span class="p">)</span> <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">DEAD</span><span class="p">;</span>
            <span class="k">}</span>

    <span class="k">}</span>

    <span class="c">//周りの生きてる枡の数</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">aroundField</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">w</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;=</span> <span class="n">w</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="n">h</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;=</span> <span class="n">h</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">!=</span> <span class="n">w</span> <span class="p">||</span> <span class="n">j</span> <span class="p">!=</span> <span class="n">h</span><span class="p">)</span>
                    <span class="n">sum</span> <span class="p">+=</span> <span class="n">field</span><span class="p">[</span><span class="n">getIndex</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">Width</span><span class="p">),</span> <span class="n">getIndex</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">Height</span><span class="p">)];</span>
        <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//ループインデックス作成</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="nf">getIndex</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">max</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">n</span> <span class="p">+</span> <span class="n">max</span><span class="p">)</span> <span class="p">%</span> <span class="n">max</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">//出力</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">outputConsole</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">Width</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
        <span class="k">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">Height</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">((</span><span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="n">ALIVE</span><span class="p">)</span> <span class="p">?</span> <span class="s">&quot;■&quot;</span> <span class="p">:</span> <span class="s">&quot;□&quot;</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5402/addtag/" class="addtag" id="addtag_5402">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5402/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5402/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5402"
  >-</span><span
  class="button yellow"
  id="rating_z_5402"
  >0</span><span 
  class="button green"
  id="rating_p_5402"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5402/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5407">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/654/" target="_top">ika</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5407/">#5407</a>(<script language="JavaScript">print_time(new Date("2008/01/20 13:04 GMT"));</script><noscript>2008/01/20 13:04 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  普通に。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">string</span>, <span class="n">std</span>.<span class="n">conv</span>, <span class="n">std</span>.<span class="n">contracts</span>,
       <span class="n">std</span>.<span class="n">random</span>, <span class="n">std</span>.<span class="n">stdio</span>, <span class="n">std</span>.<span class="n">c</span>.<span class="n">time</span>;

<span class="k">class</span> <span class="n">Field</span> {
    <span class="k">private</span> <span class="kt">uint</span> <span class="n">width_</span>, <span class="n">height_</span>;
    <span class="k">private</span> <span class="kt">bool</span>[] <span class="n">data_</span>;
    
    <span class="k">this</span>(<span class="kt">uint</span> <span class="n">width</span>, <span class="kt">uint</span> <span class="n">height</span>) {
        <span class="k">this</span>.<span class="n">width_</span> = <span class="n">width</span>;
        <span class="k">this</span>.<span class="n">height_</span> = <span class="n">height</span>;
        <span class="k">this</span>.<span class="n">data_</span> = <span class="k">new</span> <span class="kt">bool</span>[<span class="n">width</span> * <span class="n">height</span>];
    }
    
    <span class="k">const</span> <span class="kt">uint</span> <span class="n">width</span>() { <span class="k">return</span> <span class="k">this</span>.<span class="n">width_</span>; }
    <span class="k">const</span> <span class="kt">uint</span> <span class="n">height</span>() { <span class="k">return</span> <span class="k">this</span>.<span class="n">height_</span>; }
    
    <span class="k">const</span> <span class="kt">bool</span> <span class="n">opIndex</span>(<span class="kt">uint</span> <span class="n">x</span>, <span class="kt">uint</span> <span class="n">y</span>)
        <span class="k">in</span> {
            <span class="k">assert</span>(<span class="n">x</span> &lt; <span class="k">this</span>.<span class="n">width</span>);
            <span class="k">assert</span>(<span class="n">y</span> &lt; <span class="k">this</span>.<span class="n">height</span>);
        }
        <span class="k">body</span> {
            <span class="k">return</span> <span class="k">this</span>.<span class="n">data_</span>[<span class="k">this</span>.<span class="n">width</span> * <span class="n">y</span> + <span class="n">x</span>];
        }
        
    <span class="kt">bool</span> <span class="n">opIndexAssign</span>(<span class="kt">bool</span> <span class="n">value</span>, <span class="kt">uint</span> <span class="n">x</span>, <span class="kt">uint</span> <span class="n">y</span>)
        <span class="k">in</span> {
            <span class="k">assert</span>(<span class="n">x</span> &lt; <span class="k">this</span>.<span class="n">width</span>);
            <span class="k">assert</span>(<span class="n">y</span> &lt; <span class="k">this</span>.<span class="n">height</span>);
        }
        <span class="k">body</span> {
            <span class="k">return</span> <span class="k">this</span>.<span class="n">data_</span>[<span class="k">this</span>.<span class="n">width</span> * <span class="n">y</span> + <span class="n">x</span>] = <span class="n">value</span>;
        }
    
    <span class="k">const</span> <span class="n">string</span> <span class="n">toString</span>() {
        <span class="k">const</span> <span class="n">len</span> = (<span class="mi">3</span> * <span class="k">this</span>.<span class="n">width</span>) * <span class="k">this</span>.<span class="n">height</span> + <span class="n">newline</span>.<span class="n">length</span> * (<span class="k">this</span>.<span class="n">height</span> - <span class="mi">1</span>);
        <span class="k">auto</span> <span class="n">s</span> = <span class="k">new</span> <span class="kt">char</span>[<span class="n">len</span>], <span class="n">idx</span> = <span class="mi">0</span>;
        <span class="k">foreach</span>(<span class="n">y</span>; <span class="mi">0</span> .. <span class="k">this</span>.<span class="n">height</span>) {
            <span class="k">foreach</span>(<span class="n">x</span>; <span class="mi">0</span> .. <span class="k">this</span>.<span class="n">width</span>) {
                <span class="n">s</span>[<span class="n">idx</span> .. <span class="n">idx</span> + <span class="mi">3</span>] = <span class="k">this</span>[<span class="n">x</span>, <span class="n">y</span>] ? <span class="s">&quot;[*]&quot;</span> : <span class="s">&quot;[ ]&quot;</span>;
                <span class="n">idx</span> += <span class="mi">3</span>;
            }
            <span class="k">if</span>(<span class="n">idx</span> != <span class="n">len</span>) {
                <span class="n">s</span>[<span class="n">idx</span> .. <span class="n">idx</span> + <span class="n">newline</span>.<span class="n">length</span>] = <span class="n">newline</span>;
                <span class="n">idx</span> += <span class="n">newline</span>.<span class="n">length</span>;
            }
        }
        <span class="k">return</span> <span class="n">assumeUnique</span>(<span class="n">s</span>);
    }
    
    <span class="k">const</span> <span class="n">Field</span> <span class="n">nextGeneration</span>() {
        <span class="k">const</span> <span class="n">w</span> = <span class="k">this</span>.<span class="n">width</span>, <span class="n">h</span> = <span class="k">this</span>.<span class="n">height</span>;
        <span class="n">Field</span> <span class="n">f</span> = <span class="k">new</span> <span class="n">Field</span>(<span class="n">w</span>, <span class="n">h</span>);
        <span class="k">foreach</span>(<span class="n">y</span>; <span class="mi">0</span> .. <span class="n">h</span>) {
            <span class="k">foreach</span>(<span class="n">x</span>; <span class="mi">0</span> .. <span class="n">w</span>) {
                <span class="kt">int</span> <span class="n">c</span>;
                <span class="kt">int</span> <span class="n">l</span> = (<span class="n">x</span> + <span class="n">w</span> - <span class="mi">1</span>) % <span class="n">w</span>, <span class="n">r</span> = (<span class="n">x</span> + <span class="mi">1</span>) % <span class="n">w</span>,
                    <span class="n">u</span> = (<span class="n">y</span> + <span class="n">h</span> - <span class="mi">1</span>) % <span class="n">h</span>, <span class="n">d</span> = (<span class="n">y</span> + <span class="mi">1</span>) % <span class="n">h</span>;
               
                <span class="k">if</span>(<span class="k">this</span>[<span class="n">l</span>, <span class="n">u</span>]) <span class="n">c</span>++; <span class="k">if</span>(<span class="k">this</span>[<span class="n">x</span>, <span class="n">u</span>]) <span class="n">c</span>++; <span class="k">if</span>(<span class="k">this</span>[<span class="n">r</span>, <span class="n">u</span>]) <span class="n">c</span>++;
                <span class="k">if</span>(<span class="k">this</span>[<span class="n">l</span>, <span class="n">y</span>]) <span class="n">c</span>++;                     <span class="k">if</span>(<span class="k">this</span>[<span class="n">r</span>, <span class="n">y</span>]) <span class="n">c</span>++;
                <span class="k">if</span>(<span class="k">this</span>[<span class="n">l</span>, <span class="n">d</span>]) <span class="n">c</span>++; <span class="k">if</span>(<span class="k">this</span>[<span class="n">x</span>, <span class="n">d</span>]) <span class="n">c</span>++; <span class="k">if</span>(<span class="k">this</span>[<span class="n">r</span>, <span class="n">d</span>]) <span class="n">c</span>++;
                
                <span class="k">if</span>(<span class="n">c</span> == <span class="mi">3</span> || <span class="k">this</span>[<span class="n">x</span>, <span class="n">y</span>] &amp;&amp; <span class="n">c</span> == <span class="mi">2</span>)
                    <span class="n">f</span>[<span class="n">x</span>, <span class="n">y</span>] = <span class="kc">true</span>;
            }
        }
        <span class="k">return</span> <span class="n">f</span>;
    }
}

<span class="kt">void</span> <span class="n">main</span>(<span class="n">string</span>[] <span class="n">args</span>) {
    <span class="k">if</span>(<span class="n">args</span>.<span class="n">length</span> &lt; <span class="mi">3</span>) <span class="k">return</span>;
    <span class="k">auto</span> <span class="n">width</span> = <span class="n">to</span>!(<span class="kt">uint</span>)(<span class="n">args</span>[<span class="mi">1</span>]), <span class="n">height</span> = <span class="n">to</span>!(<span class="kt">uint</span>)(<span class="n">args</span>[<span class="mi">2</span>]);
    
    <span class="k">auto</span> <span class="n">f</span> = <span class="k">new</span> <span class="n">Field</span>(<span class="n">width</span>, <span class="n">height</span>);
    <span class="k">auto</span> <span class="n">rgen</span> = <span class="n">Random</span>(<span class="n">unpredictableSeed</span>);
    <span class="k">foreach</span>(<span class="n">y</span>; <span class="mi">0</span> .. <span class="n">height</span>) {
        <span class="k">foreach</span>(<span class="n">x</span>; <span class="mi">0</span> .. <span class="n">width</span>) {
            <span class="n">f</span>[<span class="n">x</span>, <span class="n">y</span>] = <span class="n">uniform</span>!(<span class="kt">int</span>)(<span class="n">rgen</span>, <span class="mi">0</span>, <span class="mi">10</span>) &lt; <span class="mi">3</span>;
        }
    }
    <span class="kt">uint</span> <span class="n">gen</span> = <span class="mi">0</span>;
    <span class="k">while</span>(<span class="kc">true</span>) {
        <span class="n">writeln</span>(<span class="s">&quot;Generation &quot;</span>, ++<span class="n">gen</span>);
        <span class="n">writeln</span>(<span class="n">f</span>);
        <span class="n">writeln</span>(<span class="s">&quot;&quot;</span>);
        <span class="n">f</span> = <span class="n">f</span>.<span class="n">nextGeneration</span>;
        <span class="n">msleep</span>(<span class="mi">100</span>);
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5407/addtag/" class="addtag" id="addtag_5407">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5407/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5407/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5407"
  >-</span><span
  class="button yellow"
  id="rating_z_5407"
  >0</span><span 
  class="button green"
  id="rating_p_5407"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5407/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5408">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5408/">#5408</a>(<script language="JavaScript">print_time(new Date("2008/01/20 14:05 GMT"));</script><noscript>2008/01/20 14:05 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>お題に対するコメントって良いんですよね。

大概のお題は、計算時間を計ることが多いのですが、
初期パターンを指定して、停止するまで（あるいは、
ループするまで）の時間を計ると、
実装の効率が比べられて良いかも知れませんね。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5408/addtag/" class="addtag" id="addtag_5408">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5408"
  >-</span><span
  class="button yellow"
  id="rating_z_5408"
  >0</span><span 
  class="button green"
  id="rating_p_5408"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5408/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5410">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/646/" target="_top">silverwire</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5410/">#5410</a>(<script language="JavaScript">print_time(new Date("2008/01/20 16:37 GMT"));</script><noscript>2008/01/20 16:37 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>JavaScriptで書きました。

間引きは特に考慮していません。パターンはグライダーで、 0.5秒ごとに世代交代します。

Firefox 2.0.0.8, Internet Explorer 6, Opera 9.23で動作を確認。

  e.g.
    .*........
    ..*.......
    ***.......
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........
    ..........</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;?</span><span class="nx">xml</span> <span class="nx">version</span><span class="o">=</span><span class="s2">&quot;1.0&quot;</span> <span class="nx">encoding</span><span class="o">=</span><span class="s2">&quot;UTF-8&quot;</span><span class="o">?&gt;</span>
<span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span> <span class="nx">PUBLIC</span> <span class="s2">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span> <span class="s2">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">html</span> <span class="nx">xmlns</span><span class="o">=</span><span class="s2">&quot;http://www.w3.org/1999/xhtml&quot;</span> <span class="nx">xmlns</span><span class="o">:</span><span class="nx">xlink</span><span class="o">=</span><span class="s2">&quot;http://www.w3.org/1999/xlink&quot;</span> <span class="nx">xml</span><span class="o">:</span><span class="nx">lang</span><span class="o">=</span><span class="s2">&quot;ja&quot;</span> <span class="nx">lang</span><span class="o">=</span><span class="s2">&quot;ja&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">http</span><span class="o">-</span><span class="nx">equiv</span><span class="o">=</span><span class="s2">&quot;content-type&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;text/html; charset=utf-8&quot;</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">Conway</span><span class="s1">&#39;s game of life&lt;/title&gt;</span>
<span class="s1">        &lt;script type=&quot;text/javascript&quot;&gt;</span>
<span class="s1">            $ = function (i) { return document.getElementById(i); }</span>

<span class="s1">            Function.prototype._setTimeout = </span>
<span class="s1">            function (t, o, v) {</span>
<span class="s1">                var _ = this;</span>
<span class="s1">                return setTimeout(function () { _.apply(o, v); }, t);</span>
<span class="s1">            };</span>

<span class="s1">            var CellularAutomaton = </span>
<span class="s1">            function (p, w, h) {</span>
<span class="s1">                this.p  = p;   // パターン</span>
<span class="s1">                this.w  = w;   // フィールドの横幅</span>
<span class="s1">                this.h  = h;   // フィールドの高さ</span>
<span class="s1">                this.c  = [];  // セル</span>
<span class="s1">                this._c = [];</span>
<span class="s1">                this.TI = 500; // 時間間隔</span>
<span class="s1">            };</span>
<span class="s1">            CellularAutomaton.prototype.generate = </span>
<span class="s1">            function () {</span>
<span class="s1">                var i, j, n = 0, s = &#39;&#39;, x, y;</span>
<span class="s1">                // フィールドを初期化</span>
<span class="s1">                for (y = 0; y &lt; this.h; y++) {</span>
<span class="s1">                    for (x = 0; x &lt; this.w; x++, n++) s += &#39;</span><span class="o">&lt;</span><span class="nx">tt</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;cell_&#39; + n + &#39;&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">tt</span><span class="o">&gt;</span><span class="s1">&#39;;</span>
<span class="s1">                    s += &#39;</span><span class="o">&lt;</span><span class="nx">br</span> <span class="o">/&gt;</span><span class="s1">&#39;;</span>
<span class="s1">                }</span>
<span class="s1">                document.body.innerHTML = s;</span>
<span class="s1">                this.clear();</span>
<span class="s1">                // パターンを描画</span>
<span class="s1">                for (i = 0; i &lt; this.p.length; i++) {</span>
<span class="s1">                    for (j = 0; j &lt; this.p[i].length; j++) {</span>
<span class="s1">                        if (this.p[i].charAt(j) == &#39;</span><span class="p">.</span><span class="s1">&#39;) continue;</span>
<span class="s1">                        n = this.h * i + j;</span>
<span class="s1">                        this.setCell(n, this.c[n] = 1);</span>
<span class="s1">                    }</span>
<span class="s1">                }</span>
<span class="s1">            };</span>
<span class="s1">            CellularAutomaton.prototype.clear = </span>
<span class="s1">            function () {</span>
<span class="s1">                var n;</span>
<span class="s1">                for (n = this.w * this.h; n--; ) this.setCell(n, this.c[n] = 0);</span>
<span class="s1">            };</span>
<span class="s1">            CellularAutomaton.prototype.start = </span>
<span class="s1">            function () {</span>
<span class="s1">                var n;</span>
<span class="s1">                // 次世代へ移行</span>
<span class="s1">                this.shift();</span>
<span class="s1">                for (n = 0; n &lt; this.h * this.w; n++) this.c[n] = this._c[n];</span>
<span class="s1">                // 再帰</span>
<span class="s1">                this.start._setTimeout(this.TI, this, []);</span>
<span class="s1">            };</span>
<span class="s1">            CellularAutomaton.prototype.shift = </span>
<span class="s1">            function () {</span>
<span class="s1">                var n = 0, x, y;</span>

<span class="s1">                for (y = 0; y &lt; this.h; y++) {</span>
<span class="s1">                    for (x = 0; x &lt; this.w; x++, n++) {</span>
<span class="s1">                        this._c[n] = this.judge(x, y, n);</span>
<span class="s1">                        if (this.c[n] != this._c[n]) this.setCell(n, this._c[n]);</span>
<span class="s1">                    }</span>
<span class="s1">                }</span>
<span class="s1">            };</span>
<span class="s1">            CellularAutomaton.prototype.judge = </span>
<span class="s1">            function (x, y, n) {</span>
<span class="s1">                var i, j, l = 0, _x, _y;</span>

<span class="s1">                if ((x &gt; 0 &amp;&amp; x &lt; this.w - 1) &amp;&amp; (y &gt; 0 &amp;&amp; y &lt; this.h - 1)) {</span>
<span class="s1">                    l = this.c[n - this.w - 1] + this.c[n - this.w] + this.c[n - this.w + 1]</span>
<span class="s1">                      + this.c[n          - 1]                      + this.c[n          + 1]</span>
<span class="s1">                      + this.c[n + this.w - 1] + this.c[n + this.w] + this.c[n + this.w + 1]</span>
<span class="s1">                      ;</span>
<span class="s1">                } else { // トーラス</span>
<span class="s1">                    for (i = -1; i &lt; 2; i++) {</span>
<span class="s1">                        for (j = -1; j &lt; 2; j++) {</span>
<span class="s1">                            if (i == 0 &amp;&amp; j == 0) continue;</span>

<span class="s1">                            if (x + j == -1) _x = this.w - 1;</span>
<span class="s1">                            if (x + j == this.w) _x = 0;</span>
<span class="s1">                            if (x + j != -1 &amp;&amp; x + j != this.w) _x = x + j;</span>
<span class="s1">                            if (y + i == -1) _y = this.h - 1;</span>
<span class="s1">                            if (y + i == this.h) _y = 0;</span>
<span class="s1">                            if (y + i != -1 &amp;&amp; y + i != this.h) _y = y + i;</span>

<span class="s1">                            l += this.c[this.w * _y + _x];</span>
<span class="s1">                        }</span>
<span class="s1">                    }</span>
<span class="s1">                }</span>

<span class="s1">                if (this.c[n] == 0 &amp;&amp; l == 3)             return 1; // 誕生</span>
<span class="s1">                if (this.c[n] == 1 &amp;&amp; (l == 2 || l == 3)) return 1; // 維持</span>
<span class="s1">                return 0;                                           // 死亡</span>
<span class="s1">            };</span>
<span class="s1">            CellularAutomaton.prototype.setCell = </span>
<span class="s1">            function (n, p) {</span>
<span class="s1">                $(&#39;</span><span class="nx">cell_</span><span class="s1">&#39; + n).innerHTML = (p == 0) ? &#39;</span><span class="p">.</span><span class="s1">&#39; : &#39;</span><span class="o">*</span><span class="s1">&#39;;</span>
<span class="s1">            };</span>

<span class="s1">            window.onload = </span>
<span class="s1">            function () {</span>
<span class="s1">                var c = new CellularAutomaton([ &#39;</span><span class="p">.</span><span class="o">*</span><span class="p">.</span><span class="s1">&#39; , &#39;</span><span class="p">..</span><span class="o">*</span><span class="s1">&#39; , &#39;</span><span class="o">***</span><span class="err">&#39;</span> <span class="p">]</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="p">);</span> <span class="nx">c</span><span class="p">.</span><span class="nx">generate</span><span class="p">();</span> <span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span>
            <span class="p">};</span>
        <span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5410/addtag/" class="addtag" id="addtag_5410">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5410/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5410/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5410"
  >-</span><span
  class="button yellow"
  id="rating_z_5410"
  >0</span><span 
  class="button green"
  id="rating_p_5410"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5410/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5412">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/134/" target="_top">こう。</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5412/">#5412</a>(<script language="JavaScript">print_time(new Date("2008/01/21 03:03 GMT"));</script><noscript>2008/01/21 03:03 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>グダグダしてきましたが、Wikipediaによると"23/3"などというルール表記があるようなのでそれに対応。
世代スキップも追加。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;conio.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>

<span class="cp">#define WIDTH  10</span>
<span class="cp">#define HEIGHT 10</span>

<span class="c">/* セルの生死判定 */</span>
<span class="kt">int</span> <span class="n">calc_life</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">],</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x_l</span><span class="p">,</span><span class="n">x_r</span><span class="p">,</span><span class="n">y_u</span><span class="p">,</span><span class="n">y_d</span><span class="p">;</span>
    <span class="n">y_u</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">HEIGHT</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">HEIGHT</span><span class="p">;</span>
    <span class="n">y_d</span><span class="o">=</span><span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">HEIGHT</span><span class="p">;</span>
    <span class="n">x_l</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="n">WIDTH</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">WIDTH</span><span class="p">;</span>
    <span class="n">x_r</span><span class="o">=</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">WIDTH</span><span class="p">;</span>
            
    <span class="n">life</span><span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_u</span><span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>
         <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span> <span class="n">y</span> <span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span> <span class="c">/*注目セル */</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span> <span class="n">y</span> <span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span>
         <span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x_l</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y_d</span><span class="p">][</span><span class="n">x_r</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">life</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 世代の進行 */</span>
<span class="kt">void</span> <span class="n">next_gen</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">],</span><span class="kt">char</span><span class="o">*</span> <span class="n">rule</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">birth</span><span class="p">;</span>
    <span class="kt">char</span><span class="o">*</span> <span class="n">ptr_rule</span><span class="p">;</span>

    <span class="c">/* 誕生ルール検出 */</span>
    <span class="n">birth</span><span class="o">=</span><span class="n">rule</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="o">*</span><span class="n">birth</span><span class="o">++!=</span><span class="sc">&#39;/&#39;</span><span class="p">);</span>
    
    <span class="c">/*生存・誕生判定*/</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">life</span><span class="o">=</span><span class="n">calc_life</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">);</span>
            
            <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">){</span>
                <span class="c">/*生存判定*/</span>
                <span class="n">ptr_rule</span><span class="o">=</span><span class="n">rule</span><span class="p">;</span>
                <span class="k">do</span><span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">life</span><span class="o">==*</span><span class="n">ptr_rule</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">|=</span><span class="mi">2</span><span class="p">;</span>
                <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="o">*++</span><span class="n">ptr_rule</span><span class="o">!=</span><span class="sc">&#39;/&#39;</span><span class="p">);</span>
            <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                <span class="c">/*誕生判定*/</span>
                <span class="n">ptr_rule</span><span class="o">=</span><span class="n">birth</span><span class="p">;</span>
                <span class="k">do</span><span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">life</span><span class="o">==*</span><span class="n">ptr_rule</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">|=</span><span class="mi">2</span><span class="p">;</span>
                <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="o">*++</span><span class="n">ptr_rule</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c">/* 次世代へ進行 */</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* 現世代の表示 */</span>
<span class="kt">void</span> <span class="n">put_gen</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;[%c]&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="o">?</span><span class="sc">&#39;*&#39;</span><span class="o">:</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* ライフゲーム制御 */</span>
<span class="kt">void</span> <span class="n">lifegame</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">],</span><span class="kt">char</span><span class="o">*</span> <span class="n">rule</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">gen</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">step</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;T=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">gen</span><span class="p">);</span>
        <span class="n">put_gen</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
        <span class="n">step</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

        <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
            <span class="n">c</span><span class="o">=</span><span class="n">getche</span><span class="p">();</span>
            <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">&lt;</span><span class="sc">&#39;0&#39;</span><span class="o">||</span><span class="sc">&#39;9&#39;</span><span class="o">&lt;</span><span class="n">c</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="n">step</span><span class="o">*=</span><span class="mi">10</span><span class="p">;</span>
            <span class="n">step</span><span class="o">+=</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="mh">0x1b</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">step</span><span class="o">==</span><span class="mi">0</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="mh">0x20</span><span class="o">||</span><span class="n">c</span><span class="o">==</span><span class="mh">0x0d</span><span class="p">))</span> <span class="n">step</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
        <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
        <span class="k">while</span><span class="p">(</span><span class="n">step</span><span class="o">--</span><span class="p">){</span>
            <span class="n">next_gen</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">rule</span><span class="p">);</span>
            <span class="n">gen</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">/* ランダム初期値の設定 */</span>
<span class="kt">void</span> <span class="n">init_life</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]){</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span><span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span><span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">x</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="n">WIDTH</span><span class="p">);</span>
        <span class="n">y</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="n">HEIGHT</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">calc_life</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">&lt;=</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">)))){</span>
            <span class="n">a</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="n">count</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">count</span><span class="o">&lt;</span><span class="p">((</span><span class="n">HEIGHT</span><span class="o">*</span><span class="n">WIDTH</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span><span class="o">/</span><span class="p">(</span><span class="n">RAND_MAX</span><span class="o">/</span><span class="mi">2</span><span class="p">)))</span><span class="o">/</span><span class="mi">10</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">[</span><span class="n">HEIGHT</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">]</span><span class="o">=</span><span class="p">{</span>
<span class="c">/* 出題</span>
<span class="c">        {0,1,0,0,0,0,1,1,1,0},</span>
<span class="c">        {0,0,0,0,1,0,0,1,1,0},</span>
<span class="c">        {0,0,0,1,0,0,1,0,1,0},</span>
<span class="c">        {1,0,1,1,0,0,1,0,0,0},</span>
<span class="c">        {0,1,0,0,0,0,0,0,1,0},</span>
<span class="c">        {1,0,0,0,1,0,1,1,0,1},</span>
<span class="c">        {0,1,0,0,0,0,1,0,0,0},</span>
<span class="c">        {0,0,0,0,0,0,0,0,0,1},</span>
<span class="c">        {1,0,0,0,0,0,1,0,0,1},</span>
<span class="c">        {0,0,0,0,1,1,0,0,1,0}</span>
<span class="c">/*/</span>
<span class="c">//グライダー</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
        <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span>
<span class="c">/*/</span>
<span class="c">        {0,0,0,0,0,0,0,0,0,0},</span>
<span class="c">        {0,0,0,0,0,0,0,0,0,0},</span>
<span class="c">        {0,0,0,1,0,0,0,0,0,0},</span>
<span class="c">        {0,0,1,1,0,1,0,0,0,0},</span>
<span class="c">        {0,0,0,1,0,1,0,0,0,0},</span>
<span class="c">        {0,0,0,0,0,1,0,0,0,0},</span>
<span class="c">        {0,0,0,0,0,0,1,0,0,0},</span>
<span class="c">        {0,0,0,0,0,0,1,0,1,0},</span>
<span class="c">        {0,0,0,0,0,0,0,0,0,0},</span>
<span class="c">        {0,0,0,0,0,0,0,0,0,0},</span>
<span class="c">//*/</span>
    <span class="p">};</span>
<span class="c">//    init_life(a);</span>
    <span class="n">lifegame</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="s">&quot;23/3&quot;</span><span class="p">);</span>
<span class="c">//    lifegame(a,&quot;23/36&quot;); //HighLife?</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5412/addtag/" class="addtag" id="addtag_5412">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5412/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5412/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5412"
  >-</span><span
  class="button yellow"
  id="rating_z_5412"
  >0</span><span 
  class="button green"
  id="rating_p_5412"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5384/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5412/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5412/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5425">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/405/" target="_top">mc</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5425/">#5425</a>(<script language="JavaScript">print_time(new Date("2008/01/22 09:20 GMT"));</script><noscript>2008/01/22 09:20 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  大分色物な感じですが、超並列計算機&nbsp;Connection&nbsp;Machine用のLisp処理系<br/>である*LISP(スターリスプ)のCommon&nbsp;Lisp用のシミュレータパッケージを<br/>使用して書いてみました。<br/>本来、処理をプロセッサノードに割り振って並列に計算するので、今回位の計算<br/>ならば、一度にどかんと計算させて、ループは全く使わないのが*LISPの流儀<br/>だと思うのですが、構文がみつけられなかったため、全く普通に直列な<br/>書き方になっており、あまり意味がないことになっています…。<br/>表示は、グリッドの内容を綺麗に表示するプリティプリンタが付いてくるので、<br/>それを使ってみました。<br/>動作は、AllegroとCLISPで確認しています。<br/>(SBCL等では、ソースを修正しないと*LISPがコンパイルできないようです。)<br/>ソースは参考ページからダウンロード可能でチュートリアル付きです。<br/><br/>;;&nbsp;実行結果&nbsp;(グライダー)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIMENSION&nbsp;0&nbsp;(X)&nbsp;&nbsp;-----&gt;<br/><br/>0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>1&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;
	</div>
	
	<p class="link">
	  参考: <a href="/web/20080325151021/http://examples.franz.com/id/massar.html">Simulator for *Lisp language for Connection Machine, circa 1989.</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre>(defpackage :doukaku-126 (:use :cl :*lisp))
(in-package :doukaku-126)
(*cold-boot :initial-dimensions &#39;(10 10))

(defconstant +alive+ 1)
(defconstant +dead+ 0)

(defun grid10 (x y)
  (grid (mod x 10) (mod y 10)))

(defun get-env (grid x y)
  (values (pref grid (grid x y))
          (count +alive+
                 (list (pref grid (grid10 (1- x) (1- y)))
                       (pref grid (grid10 x (1- y)))
                       (pref grid (grid10 (1+ x) (1- y)))
                       (pref grid (grid10 (1- x) y))
                       (pref grid (grid10 (1+ x) y))
                       (pref grid (grid10 (1- x) (1+ y)))
                       (pref grid (grid10 x (1+ y)))
                       (pref grid (grid10 (1+ x) (1+ y)))))))

(defun gen-next (cur)
  (*let ((next +dead+))
    (loop :for x :from 0 :to 9 
          :do (loop :for y :from 0 :to 9 
                    :do (multiple-value-bind (self env) (get-env cur x y)
                          (cond ((and (eql +dead+ self) (= 3 env)) 
                                 (*setf (pref next (grid x y)) +alive+))
                                ((and (= +alive+ self) (&lt;= 2 env 3))
                                 (*setf (pref next (grid x y)) +alive+))        
                                (&#39;T (*setf (pref next (grid x y)) +dead+))))))
    next))

;; グライダーを作る
(defun make-glider ()
  (*let ((g +dead+))
    (*setf (pref g (grid 1 0)) +alive+
           (pref g (grid 0 1)) +alive+
           (pref g (grid 0 2)) +alive+
           (pref g (grid 1 2)) +alive+
           (pref g (grid 2 2)) +alive+)
    g))

;; 初期値をグライダーにしてループ 
(loop :for gen = (make-glider) then (gen-next gen)
      :do (ppp gen :mode :grid)
      :unless (y-or-n-p) :do (return))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5425/addtag/" class="addtag" id="addtag_5425">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/%2ALISP/">*LISP</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5425/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5425/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5425"
  >-</span><span
  class="button yellow"
  id="rating_z_5425"
  >0</span><span 
  class="button green"
  id="rating_p_5425"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5425/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5426">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5426/">#5426</a>(<script language="JavaScript">print_time(new Date("2008/01/22 10:18 GMT"));</script><noscript>2008/01/22 10:18 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Perlがなかったので投稿。C＃のほぼそのままなので、あまりPerlらしいコードでない気がします。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">print_matrix</span><span class="p">($$)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$turn</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$matrix</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

    <span class="k">print</span> <span class="s">&quot;t={$turn}\n&quot;</span><span class="p">;</span>
    <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$row</span><span class="p">(</span><span class="nv">@$matrix</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">foreach</span> <span class="k">my</span> <span class="nv">$cell</span><span class="p">(</span><span class="nv">@$row</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">print</span> <span class="s">&#39;[&#39;</span><span class="p">,</span> <span class="n">print_cell</span><span class="p">(</span><span class="nv">$cell</span><span class="p">),</span> <span class="s">&#39;]&#39;</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">print_cell</span><span class="p">($)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]?</span><span class="s">&#39;*&#39;</span><span class="p">:</span><span class="s">&#39; &#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">next_step</span><span class="p">($$)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$turn</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$matrix</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$result</span> <span class="o">=</span> <span class="o">[]</span><span class="p">;</span>

    <span class="nv">$turn</span><span class="o">++</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nv">$y</span><span class="o">&lt;</span><span class="nv">@$matrix</span><span class="p">;</span> <span class="nv">$y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">push</span><span class="p">(</span><span class="nv">@$result</span><span class="p">,</span> <span class="o">[]</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nv">$x</span><span class="o">&lt;</span><span class="nv">@</span><span class="p">{</span><span class="nv">$matrix</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$y</span><span class="p">]};</span> <span class="nv">$x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="n">count_alive_cell</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="p">,</span> <span class="nv">$x</span><span class="p">);</span>
            <span class="c1">#print &quot;($y,$x) = $count\n&quot;;</span>
            <span class="nb">push</span><span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$result</span><span class="o">-&gt;</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]},</span> 
                <span class="p">(</span><span class="nv">$count</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)?</span> <span class="mi">1</span><span class="p">:</span>
                <span class="p">(</span><span class="nv">$count</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)?</span> <span class="nv">$matrix</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]:</span>
                <span class="mi">0</span>
            <span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$turn</span><span class="p">,</span> <span class="nv">$result</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">count_alive_cell</span><span class="p">($$$)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$matrix</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$y</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$x</span><span class="p">)</span> <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
         <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span>  <span class="p">,</span> <span class="nv">$x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span>                               <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span>  <span class="p">,</span> <span class="nv">$x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
         <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$x</span><span class="p">)</span> <span class="o">+</span> <span class="n">cell_value</span><span class="p">(</span><span class="nv">$matrix</span><span class="p">,</span> <span class="nv">$y</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">cell_value</span><span class="p">($$$)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$matrix</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$y</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$x</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="nv">$y</span> <span class="o">-=</span> <span class="nv">@$matrix</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$y</span> <span class="o">&gt;=</span> <span class="nv">@$matrix</span><span class="p">);</span>
    <span class="nv">$x</span> <span class="o">-=</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$matrix</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$y</span><span class="p">]}</span> <span class="k">if</span> <span class="p">(</span><span class="nv">$x</span> <span class="o">&gt;=</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$matrix</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$y</span><span class="p">]});</span>
    <span class="k">return</span> <span class="nv">$matrix</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">];</span>
<span class="p">}</span>


<span class="k">sub </span><span class="nf">main</span><span class="p">($)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$max_turn</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$turn</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="c1">#    my $matrix = [</span>
<span class="c1">#            [qw/0 1 0 0 0 0 1 1 1 0/],</span>
<span class="c1">#            [qw/0 0 0 0 1 0 0 1 1 0/],</span>
<span class="c1">#            [qw/0 0 0 1 0 0 1 0 1 0/],</span>
<span class="c1">#            [qw/1 0 1 1 0 0 1 0 0 0/],</span>
<span class="c1">#            [qw/0 1 0 0 0 0 0 0 1 0/],</span>
<span class="c1">#            [qw/1 0 0 0 1 0 1 1 0 1/],</span>
<span class="c1">#            [qw/0 1 0 0 0 0 1 0 0 0/],</span>
<span class="c1">#            [qw/0 0 0 0 0 0 0 0 0 1/],</span>
<span class="c1">#            [qw/1 0 0 0 0 0 1 0 0 1/],</span>
<span class="c1">#            [qw/0 0 0 0 1 1 0 0 1 0/],</span>
<span class="c1">#        ];</span>
    <span class="k">my</span> <span class="nv">$matrix</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 1 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 1 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 1 1 1 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
            <span class="p">[</span><span class="n">qw</span><span class="sr">/0 0 0 0 0 0 0 0 0 0/</span><span class="p">],</span>
        <span class="p">];</span>

    <span class="n">print_matrix</span><span class="p">(</span><span class="nv">$turn</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span><span class="o">&lt;</span><span class="nv">$max_turn</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">(</span><span class="nv">$turn</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">)</span> <span class="o">=</span> <span class="n">next_step</span><span class="p">(</span><span class="nv">$turn</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">);</span>
        <span class="n">print_matrix</span><span class="p">(</span><span class="nv">$turn</span><span class="p">,</span> <span class="nv">$matrix</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">main</span><span class="p">(</span><span class="mi">41</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5426/addtag/" class="addtag" id="addtag_5426">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5426/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5426/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5426"
  >-</span><span
  class="button yellow"
  id="rating_z_5426"
  >0</span><span 
  class="button green"
  id="rating_p_5426"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5426/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5427">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/677/" target="_top">yuji1982</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5427/">#5427</a>(<script language="JavaScript">print_time(new Date("2008/01/22 12:34 GMT"));</script><noscript>2008/01/22 12:34 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>初投稿です。
長いコードですが、自分はC#なら富豪的に書きます。</p>
<p>間引きはわかりませんでした。
実装してみましたが、うまく動いてないような気がします・・・</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Data.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">LifeGame</span>
<span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
<span class="n">Start</span><span class="p">:</span>
        <span class="n">Setting</span><span class="p">.</span><span class="n">Size</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>      <span class="c">//格子サイズ</span>
        <span class="n">Setting</span><span class="p">.</span><span class="n">InitRandomRate</span> <span class="p">=</span> <span class="m">0.3</span><span class="p">;</span> <span class="c">//人口密度</span>
        <span class="n">Setting</span><span class="p">.</span><span class="n">Log</span> <span class="p">=</span> <span class="n">LogType</span><span class="p">.</span><span class="n">All</span><span class="p">;</span>

        <span class="n">CellManager</span> <span class="n">cm</span><span class="p">;</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;seed = ?&quot;</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">seed</span><span class="p">=</span><span class="m">0</span><span class="p">,</span> <span class="n">wait</span> <span class="p">=</span> <span class="m">50</span><span class="p">;</span>
        <span class="kt">int</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">(),</span> <span class="k">out</span> <span class="n">seed</span><span class="p">);</span>

        <span class="c">//---------------------------------------------------------------------</span>
        <span class="n">cm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CellManager</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
        <span class="kt">int</span> <span class="n">step</span> <span class="p">=</span> <span class="m">0</span><span class="p">,</span> <span class="n">step2</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="kt">string</span> <span class="n">last</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span><span class="p">;</span><span class="c">//こうちゃくしたら止めるため</span>
        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;seed = {0}---間引きなし:step={1}---間引きあり:step={2}&quot;</span><span class="p">,</span> <span class="n">seed</span><span class="p">,</span> <span class="n">step</span><span class="p">,</span> <span class="n">step2</span><span class="p">);</span>
            <span class="n">WriteSet</span><span class="p">(</span><span class="n">cm</span><span class="p">);</span>
            <span class="n">step</span><span class="p">++;</span>
            <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">wait</span><span class="p">);</span>
            <span class="n">cm</span><span class="p">.</span><span class="n">ToNext</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">AliveCount</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">last</span> <span class="p">==</span> <span class="n">cm</span><span class="p">.</span><span class="n">EqualFlag</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="n">last</span> <span class="p">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">EqualFlag</span><span class="p">;</span>
        <span class="k">}</span><span class="p">;</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;間引きあり : M/手動, M以外/自動&quot;</span><span class="p">);</span>
        <span class="kt">bool</span> <span class="n">manual</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">().</span><span class="n">Key</span> <span class="p">==</span> <span class="n">ConsoleKey</span><span class="p">.</span><span class="n">M</span><span class="p">;</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>

        <span class="n">cm</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CellManager</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
        <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;seed = {0}---間引きなし:step={1}---間引きあり:step={2}&quot;</span><span class="p">,</span> <span class="n">seed</span><span class="p">,</span> <span class="n">step</span><span class="p">,</span> <span class="n">step2</span><span class="p">);</span>
            <span class="n">cm</span><span class="p">.</span><span class="n">Cull_2</span><span class="p">();</span><span class="c">//間引き</span>
            <span class="n">WriteSet</span><span class="p">(</span><span class="n">cm</span><span class="p">);</span>
            <span class="n">step2</span><span class="p">++;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">manual</span><span class="p">)</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
            <span class="k">else</span>
                <span class="n">System</span><span class="p">.</span><span class="n">Threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">wait</span><span class="p">);</span>
            <span class="n">cm</span><span class="p">.</span><span class="n">ToNext</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">AliveCount</span> <span class="p">==</span> <span class="m">0</span> <span class="p">||</span> <span class="n">last</span> <span class="p">==</span> <span class="n">cm</span><span class="p">.</span><span class="n">EqualFlag</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="n">last</span> <span class="p">=</span> <span class="n">cm</span><span class="p">.</span><span class="n">EqualFlag</span><span class="p">;</span>
        <span class="k">}</span><span class="p">;</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;seed = {0}---間引きなし:step={1}---間引きあり:step={2}&quot;</span><span class="p">,</span> <span class="n">seed</span><span class="p">,</span> <span class="n">step</span><span class="p">,</span> <span class="n">step2</span><span class="p">);</span>

        <span class="c">//-----間引きしたときの生存数up率のn回の平均値を出してみるテスト。-------</span>
        <span class="c">//int n = 100;</span>
        <span class="c">//Setting.InitRandomRate = 0.3; //人口密度</span>
        <span class="c">//Setting.Log = LogType.All;</span>

        <span class="c">//Console.WriteLine(&quot;回数 = ?&quot;);</span>
        <span class="c">//int.TryParse(Console.ReadLine(), out n);</span>

        <span class="c">//var avg = Enumerable.Range(seed, n).Select(</span>
        <span class="c">//    (seedValue, idx) =&gt;</span>
        <span class="c">//    {</span>
        <span class="c">//        WriteState(string.Format(&quot;seed={0}&quot;, seedValue));</span>
        <span class="c">//        WriteState(&quot;non cull&quot;);</span>
        <span class="c">//        cm = new CellManager(seedValue);</span>
        <span class="c">//        double nonCull = Test(cm);</span>
        <span class="c">//        WriteState(&quot;cull&quot;);</span>
        <span class="c">//        cm = new CellManager(seedValue);</span>
        <span class="c">//        cm.Cull_2();</span>
        <span class="c">//        double cull = Test(cm);</span>

        <span class="c">//        var up = nonCull != 0 ? ((cull / nonCull) - 1.0d) * 100 : cull;</span>
        <span class="c">//        WriteSimple(string.Format(&quot;間引きすると生存数は{0}% up&quot;, up));</span>
        <span class="c">//        WriteState(&quot;**************************************************&quot;);</span>
        <span class="c">//        if (double.IsInfinity(up))</span>
        <span class="c">//            throw new InvalidOperationException();</span>
        <span class="c">//        WriteNon(idx.ToString());</span>
        <span class="c">//        return up;</span>
        <span class="c">//    }</span>
        <span class="c">//).Average();</span>
        <span class="c">//WriteSimple(string.Format(&quot;平均 = {0}% up&quot;, avg));</span>
        <span class="c">//---------------------------------------------------------------------</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;もう一度? y/n&quot;</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">().</span><span class="n">Key</span> <span class="p">==</span> <span class="n">ConsoleKey</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span>
            <span class="k">goto</span> <span class="n">Start</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="nf">Test</span><span class="p">(</span><span class="n">CellManager</span> <span class="n">cm</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">WriteSet</span><span class="p">(</span><span class="n">cm</span><span class="p">);</span>

        <span class="n">cm</span><span class="p">.</span><span class="n">ToNext</span><span class="p">();</span>
        <span class="n">WriteState</span><span class="p">(</span><span class="s">&quot;next&quot;</span><span class="p">);</span>
        <span class="n">WriteSet</span><span class="p">(</span><span class="n">cm</span><span class="p">);</span>
        <span class="n">WriteState</span><span class="p">(</span><span class="s">&quot;-------------------&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">cm</span><span class="p">.</span><span class="n">AliveCount</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">WriteSet</span><span class="p">(</span><span class="n">CellManager</span> <span class="n">cm</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">WriteFigure</span><span class="p">(</span><span class="n">cm</span><span class="p">.</span><span class="n">CellLines</span><span class="p">);</span>
        <span class="n">WriteState</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;生存数={0} &quot;</span><span class="p">,</span> <span class="n">cm</span><span class="p">.</span><span class="n">AliveCount</span><span class="p">));</span>
    <span class="k">}</span>

    <span class="k">static</span> <span class="k">void</span> <span class="nf">WriteFigure</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IGrouping</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="n">Cell</span><span class="p">&gt;&gt;</span> <span class="n">data</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">Setting</span><span class="p">.</span><span class="n">Log</span> <span class="p">&amp;</span> <span class="n">LogType</span><span class="p">.</span><span class="n">All</span><span class="p">)</span> <span class="p">!=</span> <span class="n">LogType</span><span class="p">.</span><span class="n">All</span><span class="p">)</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">group</span> <span class="k">in</span> <span class="n">data</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">var</span> <span class="n">lineString</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">group</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">IsAlive</span> <span class="p">?</span> <span class="sc">&#39;■&#39;</span> <span class="p">:</span> <span class="sc">&#39;□&#39;</span><span class="p">).</span><span class="n">ToArray</span><span class="p">());</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">lineString</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">WriteNon</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">Setting</span><span class="p">.</span><span class="n">Log</span> <span class="p">==</span> <span class="n">LogType</span><span class="p">.</span><span class="n">Non</span><span class="p">)</span> 
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">WriteState</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">if</span><span class="p">((</span><span class="n">Setting</span><span class="p">.</span><span class="n">Log</span> <span class="p">&amp;</span> <span class="n">LogType</span><span class="p">.</span><span class="n">State</span><span class="p">)</span> <span class="p">==</span> <span class="n">LogType</span><span class="p">.</span><span class="n">State</span><span class="p">)</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">WriteSimple</span><span class="p">(</span><span class="kt">string</span> <span class="n">text</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">if</span><span class="p">((</span><span class="n">Setting</span><span class="p">.</span><span class="n">Log</span> <span class="p">&amp;</span> <span class="n">LogType</span><span class="p">.</span><span class="n">Simple</span><span class="p">)</span> <span class="p">==</span> <span class="n">LogType</span><span class="p">.</span><span class="n">Simple</span><span class="p">)</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">text</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>

<span class="na">[Flags]</span>
<span class="k">public</span> <span class="k">enum</span> <span class="n">LogType</span>
<span class="k">{</span>
    <span class="n">Non</span>     <span class="p">=</span> <span class="m">0</span><span class="n">x000</span> <span class="p">,</span>   <span class="c">//表示しない（進捗のみ）</span>
    <span class="n">Simple</span>  <span class="p">=</span> <span class="m">0</span><span class="n">x001</span> <span class="p">,</span>   <span class="c">//最低限の数値</span>
    <span class="n">State</span>   <span class="p">=</span> <span class="m">0</span><span class="n">x011</span> <span class="p">,</span>   <span class="c">//詳細な数値</span>
    <span class="n">All</span>     <span class="p">=</span> <span class="m">0</span><span class="n">x111</span>     <span class="c">//詳細な数値と図形</span>
<span class="k">}</span>
<span class="k">static</span> <span class="k">public</span> <span class="k">class</span> <span class="nc">Setting</span>
<span class="k">{</span>
    <span class="k">static</span> <span class="k">public</span> <span class="kt">int</span> <span class="n">Size</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">static</span> <span class="k">public</span> <span class="kt">int</span> <span class="n">MatrixSize</span>
    <span class="k">{</span>
        <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">Size</span> <span class="p">*</span> <span class="n">Size</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="k">public</span> <span class="n">LogType</span> <span class="n">Log</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">static</span> <span class="k">public</span> <span class="kt">double</span> <span class="n">InitRandomRate</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
<span class="k">}</span>
<span class="k">static</span> <span class="k">public</span> <span class="k">class</span> <span class="nc">CorrectExtension</span>
<span class="k">{</span>
    <span class="k">static</span> <span class="k">public</span> <span class="kt">int</span> <span class="n">CorrectValue</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">public</span> <span class="kt">int</span> <span class="nf">Correct</span><span class="p">(</span><span class="k">this</span> <span class="kt">int</span> <span class="n">a</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">a</span> <span class="p">+=</span> <span class="n">Setting</span><span class="p">.</span><span class="n">Size</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">a</span> <span class="p">%</span> <span class="n">Setting</span><span class="p">.</span><span class="n">Size</span><span class="p">;</span>
    <span class="k">}</span>
<span class="k">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">CellManager</span>
<span class="k">{</span>
    <span class="n">Random</span> <span class="n">rand</span><span class="p">;</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">int</span> <span class="n">AliveCount</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">cell</span> <span class="p">=&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="n">IsAlive</span><span class="p">);</span> <span class="k">}</span> <span class="k">}</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;</span> <span class="n">Cells</span>
    <span class="k">{</span>
        <span class="k">get</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">data</span><span class="p">.</span><span class="n">AsEnumerable</span><span class="p">();</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">IGrouping</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">Cell</span><span class="p">&gt;&gt;</span> <span class="n">CellLines</span>
    <span class="k">{</span>
        <span class="k">get</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">Cells</span><span class="p">.</span><span class="n">GroupBy</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">Get</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="n">Y</span><span class="p">).</span><span class="n">OrderBy</span><span class="p">(</span><span class="n">gp</span> <span class="p">=&gt;</span> <span class="n">gp</span><span class="p">.</span><span class="n">Key</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EqualFlag</span>
    <span class="k">{</span>
        <span class="k">get</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="k">new</span> <span class="kt">string</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">IsAlive</span> <span class="p">?</span> <span class="sc">&#39;1&#39;</span> <span class="p">:</span> <span class="sc">&#39;0&#39;</span><span class="p">).</span><span class="n">ToArray</span><span class="p">());</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="n">Cell</span> <span class="nf">newCell</span><span class="p">(</span><span class="kt">bool</span> <span class="n">alive</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Cell</span> <span class="k">{</span> <span class="n">Manager</span> <span class="p">=</span> <span class="k">this</span><span class="p">,</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="n">alive</span> <span class="k">}</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="nf">CellManager</span><span class="p">(</span><span class="kt">int</span> <span class="n">seed</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">rand</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">(</span><span class="n">seed</span><span class="p">);</span>
        <span class="n">data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">Setting</span><span class="p">.</span><span class="n">MatrixSize</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
        <span class="k">{</span>
            <span class="n">data</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">newCell</span><span class="p">(</span><span class="n">rand</span><span class="p">.</span><span class="n">NextDouble</span><span class="p">()</span> <span class="p">&lt;</span> <span class="n">Setting</span><span class="p">.</span><span class="n">InitRandomRate</span><span class="p">));</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="nf">CellManager</span><span class="p">(</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">bool</span><span class="p">&gt;</span> <span class="n">initData</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">initData</span><span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">!=</span> <span class="n">Setting</span><span class="p">.</span><span class="n">MatrixSize</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">ArgumentException</span><span class="p">();</span>
        <span class="n">data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;(</span><span class="n">initData</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">isAlive</span> <span class="p">=&gt;</span> <span class="n">newCell</span><span class="p">(</span><span class="n">isAlive</span> <span class="p">)));</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">ToNext</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="n">var</span> <span class="n">nextData</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">d</span> <span class="p">=&gt;</span> <span class="n">d</span><span class="p">.</span><span class="n">Next</span><span class="p">).</span><span class="n">ToArray</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">nextData</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
        <span class="k">{</span>
            <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="n">nextData</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="c">// 間引き</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Cull_2</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="c">//生きているやつをリストアップする。</span>
        <span class="n">var</span> <span class="n">aliveNoList</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">cell</span> <span class="p">=&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="n">IsAlive</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">cell</span> <span class="p">=&gt;</span> <span class="n">data</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">cell</span><span class="p">)).</span><span class="n">ToArray</span><span class="p">();</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">no</span> <span class="k">in</span> <span class="n">aliveNoList</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="c">//自分は次回生きてるか。</span>
            <span class="n">var</span> <span class="n">nextMe</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">no</span><span class="p">].</span><span class="n">Next</span><span class="p">;</span>
            <span class="c">//現在の自分の回りの生存数</span>
            <span class="n">var</span> <span class="n">nowAround</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">no</span><span class="p">].</span><span class="n">AroundAliveCount</span><span class="p">;</span>
            <span class="c">//次回の回りの生存数。</span>
            <span class="n">var</span> <span class="n">nowNext</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">no</span><span class="p">].</span><span class="n">Around</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Next</span><span class="p">);</span>
            <span class="c">//死んでみる</span>
            <span class="n">data</span><span class="p">[</span><span class="n">no</span><span class="p">].</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="c">//自分が死んだ場合の次回の回りの生存数</span>
            <span class="n">var</span> <span class="n">testNext</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">no</span><span class="p">].</span><span class="n">Around</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">.</span><span class="n">Next</span><span class="p">);</span>
            <span class="c">//回りの生存するが増えるなら死ぬ</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">testNext</span> <span class="p">&gt;</span> <span class="p">(</span><span class="n">nowNext</span> <span class="p">+</span> <span class="p">(</span><span class="n">nextMe</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span><span class="p">)))</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="c">////減らない（＝同じ）で、4つ以上いたらどうせ死ぬから先に死ぬ</span>
            <span class="c">// ※これやると、人口率0.3では下がりますが、人口率0.9ではこれがないと↑の間引きだけじゃうまくできない。</span>
            <span class="c">//if (testNext == (nowNext + (nextMe ? 1 : 0)) &amp;&amp; !nextMe)</span>
            <span class="c">//    continue;</span>
            <span class="n">data</span><span class="p">[</span><span class="n">no</span><span class="p">].</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="c">// 間引き</span>
    <span class="c">// 全パターンを調べてみる。遅すぎて論外でした。そもそも動くのかわかりません。</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Cull_1</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="c">//生きているやつをリストアップする。</span>
        <span class="n">var</span> <span class="n">aliveNoList</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">cell</span> <span class="p">=&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="n">IsAlive</span><span class="p">).</span><span class="n">Select</span><span class="p">(</span><span class="n">cell</span> <span class="p">=&gt;</span> <span class="n">data</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">cell</span><span class="p">)).</span><span class="n">ToArray</span><span class="p">();</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
        <span class="n">UInt64</span> <span class="n">minPattern</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span><span class="c">//64個より多いとダメだけど、とりあえず気にしない。</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">UInt64</span> <span class="n">patten</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">patten</span> <span class="p">&lt;=</span> <span class="n">UInt64</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span> <span class="n">patten</span><span class="p">++)</span>
        <span class="k">{</span>
            <span class="c">//パターン対象を殺してみる</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">aliveNoList</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span> <span class="n">i</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="k">if</span> <span class="p">((</span><span class="n">patten</span><span class="p">&amp;(((</span><span class="n">UInt64</span><span class="p">)</span><span class="m">1</span><span class="p">)</span> <span class="p">&lt;&lt;</span> <span class="n">i</span><span class="p">))</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="n">data</span><span class="p">[</span><span class="n">aliveNoList</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="c">//次回死んでいる数を調べ、最小ならパターン番号を覚える</span>
            <span class="n">var</span> <span class="n">a</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">c</span><span class="p">.</span><span class="n">Next</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">c</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">c</span><span class="p">.</span><span class="n">Next</span><span class="p">)</span> <span class="p">&lt;</span> <span class="n">min</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="n">min</span> <span class="p">=</span> <span class="n">a</span><span class="p">;</span>
                <span class="n">minPattern</span> <span class="p">=</span> <span class="n">patten</span><span class="p">;</span>
            <span class="k">}</span>
            <span class="c">//パターン対象を戻す。</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">aliveNoList</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span> <span class="n">i</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="k">if</span> <span class="p">((</span><span class="n">patten</span> <span class="p">&amp;</span> <span class="p">((</span><span class="n">UInt64</span><span class="p">)</span><span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">i</span><span class="p">))</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="n">data</span><span class="p">[</span><span class="n">aliveNoList</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="c">//人数分のパターンが終わったので辞める。</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">patten</span> <span class="p">&amp;</span> <span class="p">(((</span><span class="n">UInt64</span><span class="p">)</span><span class="m">1</span><span class="p">)</span> <span class="p">&lt;&lt;</span> <span class="n">aliveNoList</span><span class="p">.</span><span class="n">Count</span><span class="p">()))</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="c">//最小パターンで殺す。</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">aliveNoList</span><span class="p">.</span><span class="n">Count</span><span class="p">();</span> <span class="n">i</span><span class="p">++)</span>
        <span class="k">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">minPattern</span> <span class="p">&amp;</span> <span class="p">(((</span><span class="n">UInt64</span><span class="p">)</span><span class="m">1</span><span class="p">)</span> <span class="p">&lt;&lt;</span> <span class="n">i</span><span class="p">))</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="n">data</span><span class="p">[</span><span class="n">aliveNoList</span><span class="p">[</span><span class="n">i</span><span class="p">]].</span><span class="n">IsAlive</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="n">Point</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Cell</span> <span class="n">target</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="kt">int</span> <span class="n">idx</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">target</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">idx</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">ArgumentException</span><span class="p">();</span>

        <span class="k">return</span> <span class="k">new</span> <span class="n">Point</span><span class="p">(</span><span class="n">idx</span> <span class="p">%</span> <span class="n">Setting</span><span class="p">.</span><span class="n">Size</span><span class="p">,</span> <span class="n">idx</span> <span class="p">/</span> <span class="n">Setting</span><span class="p">.</span><span class="n">Size</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">Cell</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="n">y</span><span class="p">.</span><span class="n">Correct</span><span class="p">()</span> <span class="p">*</span> <span class="n">Setting</span><span class="p">.</span><span class="n">Size</span> <span class="p">+</span> <span class="n">x</span><span class="p">.</span><span class="n">Correct</span><span class="p">()];</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="n">Cell</span> <span class="nf">Get</span><span class="p">(</span><span class="n">Cell</span> <span class="n">target</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offsetX</span><span class="p">,</span> <span class="kt">int</span> <span class="n">offsetY</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">var</span> <span class="n">pos</span> <span class="p">=</span> <span class="n">Get</span><span class="p">(</span><span class="n">target</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">Get</span><span class="p">(</span><span class="n">pos</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">offsetX</span><span class="p">,</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">offsetY</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>


<span class="k">public</span> <span class="k">class</span> <span class="nc">Cell</span>
<span class="k">{</span>
    <span class="k">public</span> <span class="n">CellManager</span> <span class="n">Manager</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsAlive</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Cell</span><span class="p">&gt;</span> <span class="n">Around</span>
    <span class="k">{</span>
        <span class="k">get</span>
        <span class="k">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;=</span> <span class="m">1</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;=</span> <span class="m">1</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
                <span class="k">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">y</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="n">yield</span> <span class="k">return</span> <span class="n">Manager</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">AroundAliveCount</span>
    <span class="k">{</span>
        <span class="k">get</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">Around</span><span class="p">.</span><span class="n">Count</span><span class="p">(</span><span class="n">cell</span> <span class="p">=&gt;</span> <span class="n">cell</span><span class="p">.</span><span class="n">IsAlive</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">Next</span>
    <span class="k">{</span>
        <span class="k">get</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">IsAlive</span> <span class="p">?</span>
                <span class="n">AroundAliveCount</span> <span class="p">==</span> <span class="m">2</span> <span class="p">||</span> <span class="n">AroundAliveCount</span> <span class="p">==</span> <span class="m">3</span> <span class="p">:</span>
                <span class="n">AroundAliveCount</span> <span class="p">==</span> <span class="m">3</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5427/addtag/" class="addtag" id="addtag_5427">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/.NET3.5/">.NET3.5</a>
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/C%233.0/">C#3.0</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5427/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5427/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5427"
  >-</span><span
  class="button yellow"
  id="rating_z_5427"
  >0</span><span 
  class="button green"
  id="rating_p_5427"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5427/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5430">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/405/" target="_top">mc</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5430/">#5430</a>(<script language="JavaScript">print_time(new Date("2008/01/23 08:03 GMT"));</script><noscript>2008/01/23 08:03 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Connection&nbsp;Machine用のLISP、*LISPのCL用シミュレータパッケージを<br/>使用しています。<br/>前回投稿したバージョンは、並列実行の構文を活用できていませんでしたが、<br/>何となく構文が分かって来たので再挑戦してみました。<br/><br/>実行例(初期値をランダムに設定してループ表示):<br/>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIMENSION&nbsp;0&nbsp;(X)&nbsp;&nbsp;-----&gt;<br/>;<br/>;0&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;<br/>;1&nbsp;0&nbsp;1&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;1&nbsp;<br/>;1&nbsp;1&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;0&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;<br/>;1&nbsp;1&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;<br/>;1&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;1&nbsp;<br/>;1&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;<br/>;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;<br/>;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;<br/>;0&nbsp;1&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;<br/>;<br/>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DIMENSION&nbsp;0&nbsp;(X)&nbsp;&nbsp;-----&gt;<br/>;<br/>;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;<br/>;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;<br/>;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;0&nbsp;0&nbsp;1&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;0&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;0&nbsp;1&nbsp;0&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>;1&nbsp;0&nbsp;0&nbsp;0&nbsp;1&nbsp;1&nbsp;1&nbsp;0&nbsp;0&nbsp;1&nbsp;<br/>;0&nbsp;1&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;0&nbsp;<br/>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20080325151021/http://examples.franz.com/id/massar.html">Simulator for *Lisp language for Connection Machine, circa 1989.</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre>(defpackage :doukaku-126 (:use :cl :*lisp))
(in-package :doukaku-126)
(*cold-boot :initial-dimensions &#39;(10 10))

(defconstant +alive+ 1)
(defconstant +dead+ 0)

(defun gen-next!! (pvar)
  (let ((env (count!! +alive+
              (vector!!
               (news!! pvar -1 -1) (news!! pvar -1  0) (news!! pvar -1  1)
               (news!! pvar  0 -1) (news!! pvar  0  1) 
               (news!! pvar  1 -1) (news!! pvar  1  0) (news!! pvar  1  1)))))
    (cond!! ((and!! (eql!! +dead+ pvar) (=!! env 3)) +alive+)
            ((and!! (eql!! +alive+ pvar) (&lt;=!! 2 env 3)) +alive+)
            (t!! +dead+))))

;; 実行例(初期値をランダムに設定してループ表示):
(loop :for gen = (truncate!! (random!! 10) 5) :then (gen-next!! gen)
      :do (ppp gen) 
      :unless (y-or-n-p) :do (return))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5430/addtag/" class="addtag" id="addtag_5430">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/%2ALISP/">*LISP</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5430/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5430/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5430"
  >-</span><span
  class="button yellow"
  id="rating_z_5430"
  >0</span><span 
  class="button green"
  id="rating_p_5430"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5430/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5431">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/497/" target="_top">Otter</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5431/">#5431</a>(<script language="JavaScript">print_time(new Date("2008/01/23 10:03 GMT"));</script><noscript>2008/01/23 10:03 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>とりあえずWikiPediaでルールを読んで23/3を組んでみました。末端のループもやっています。
ライフゲームは昔から動いてるところは見たことあっても、実際に書いてみたことはなかったので楽しめました...間引きはこれから勉強します。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span>
    <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Array</span>

<span class="kr">type</span> <span class="n">Point</span> <span class="o">=</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
<span class="kr">type</span> <span class="n">Size</span> <span class="o">=</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
<span class="kr">type</span> <span class="n">TwoDArray</span> <span class="o">=</span> <span class="p">(</span><span class="n">Size</span><span class="p">,</span> <span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">)</span>

<span class="nv">glider</span> <span class="o">=</span> <span class="s">&quot;..........&quot;</span> <span class="o">++</span>
     <span class="s">&quot;..X.......&quot;</span> <span class="o">++</span> 
     <span class="s">&quot;.X........&quot;</span> <span class="o">++</span> 
     <span class="s">&quot;.XXX......&quot;</span> <span class="o">++</span> 
     <span class="s">&quot;..........&quot;</span> <span class="o">++</span>
     <span class="s">&quot;..........&quot;</span> <span class="o">++</span>
     <span class="s">&quot;..........&quot;</span> <span class="o">++</span>
     <span class="s">&quot;..........&quot;</span> <span class="o">++</span>
     <span class="s">&quot;..........&quot;</span> <span class="o">++</span>
     <span class="s">&quot;..........&quot;</span>

<span class="nv">makeArray</span> <span class="o">::</span> <span class="n">Size</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Char</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">TwoDArray</span>
<span class="nv">makeArray</span>  <span class="nv">sz</span><span class="o">@</span><span class="p">(</span><span class="nv">cx</span><span class="p">,</span> <span class="nv">cy</span><span class="p">)</span> <span class="nv">str</span> <span class="o">=</span> <span class="p">(</span><span class="nv">sz</span><span class="p">,</span> <span class="nv">listArray</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">cx</span> <span class="o">*</span> <span class="nv">cy</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">str</span><span class="p">)</span>

<span class="nv">ptToIdx</span> <span class="o">::</span> <span class="n">Size</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">ptToIdx</span> <span class="p">(</span><span class="nv">cx</span><span class="p">,</span> <span class="nv">cy</span><span class="p">)</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">y</span> <span class="o">*</span> <span class="nv">cx</span><span class="p">)</span> <span class="o">+</span> <span class="nv">x</span>

<span class="nv">fetch</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Char</span>
<span class="nv">fetch</span> <span class="p">(</span><span class="nv">sz</span><span class="p">,</span> <span class="nv">rg</span><span class="p">)</span> <span class="nv">pt</span> <span class="o">=</span> <span class="nv">rg</span><span class="o">!</span><span class="p">(</span><span class="nv">ptToIdx</span> <span class="nv">sz</span> <span class="nv">pt</span><span class="p">)</span>

<span class="nv">surrounding</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="o">..</span><span class="mi">1</span><span class="p">],</span> <span class="nv">y</span> <span class="o">&lt;-</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="o">..</span><span class="mi">1</span><span class="p">],</span> <span class="nv">x</span> <span class="o">/=</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">y</span> <span class="o">/=</span> <span class="mi">0</span><span class="p">]</span>

<span class="nv">addPt</span> <span class="o">::</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Size</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Point</span>
<span class="nv">addPt</span> <span class="p">(</span><span class="nv">x1</span><span class="p">,</span> <span class="nv">y1</span><span class="p">)</span> <span class="p">(</span><span class="nv">cx</span><span class="p">,</span> <span class="nv">cy</span><span class="p">)</span> <span class="p">(</span><span class="nv">x2</span><span class="p">,</span> <span class="nv">y2</span><span class="p">)</span> <span class="o">=</span> <span class="p">((</span><span class="nv">x1</span> <span class="o">+</span> <span class="nv">x2</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="nv">cx</span><span class="p">,</span> <span class="p">(</span><span class="nv">y1</span> <span class="o">+</span> <span class="nv">y2</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="nv">cy</span><span class="p">)</span>

<span class="nv">getSurroundingPts</span> <span class="o">::</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Size</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Point</span><span class="p">]</span>
<span class="nv">getSurroundingPts</span> <span class="nv">pt</span> <span class="nv">sz</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">addPt</span> <span class="nv">pt</span> <span class="nv">sz</span><span class="p">)</span> <span class="nv">surrounding</span>

<span class="nv">countSurroundingLife</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">countSurroundingLife</span> <span class="nv">td</span><span class="o">@</span><span class="p">(</span><span class="nv">sz</span><span class="p">,</span> <span class="nv">rg</span><span class="p">)</span> <span class="nv">pt</span>  <span class="o">=</span> 
    <span class="nv">length</span> <span class="o">$</span> <span class="nv">filter</span> <span class="p">(</span><span class="o">/=</span><span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">fetch</span> <span class="nv">td</span><span class="p">)</span> <span class="o">$</span> <span class="nv">getSurroundingPts</span> <span class="nv">pt</span> <span class="nv">sz</span>

<span class="nv">allPoints</span> <span class="o">::</span> <span class="n">Size</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Point</span><span class="p">]</span>
<span class="nv">allPoints</span> <span class="p">(</span><span class="nv">cx</span><span class="p">,</span> <span class="nv">cy</span><span class="p">)</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nv">cx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)],</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nv">cy</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]]</span>

<span class="nv">birthDeath</span> <span class="o">::</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Char</span>
<span class="nv">birthDeath</span> <span class="nv">ch</span> <span class="nv">c</span>
    <span class="o">|</span> <span class="nv">c</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">&amp;&amp;</span> <span class="nv">ch</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span> <span class="o">=</span> <span class="sc">&#39;X&#39;</span>
    <span class="o">|</span> <span class="nv">ch</span> <span class="o">==</span> <span class="sc">&#39;X&#39;</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">c</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="nv">c</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="sc">&#39;X&#39;</span>
    <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="sc">&#39;.&#39;</span>

<span class="nv">doGen</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Char</span>
<span class="nv">doGen</span> <span class="nv">rg</span> <span class="nv">pt</span> <span class="o">=</span> <span class="nv">birthDeath</span> <span class="p">(</span><span class="nv">fetch</span> <span class="nv">rg</span> <span class="nv">pt</span><span class="p">)</span> <span class="p">(</span><span class="nv">countSurroundingLife</span> <span class="nv">rg</span> <span class="nv">pt</span><span class="p">)</span>

<span class="nv">nextGen</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="n">TwoDArray</span>
<span class="nv">nextGen</span> <span class="nv">td</span><span class="o">@</span><span class="p">(</span><span class="nv">sz</span><span class="p">,</span> <span class="nv">rg</span><span class="p">)</span> <span class="o">=</span> <span class="nv">makeArray</span> <span class="nv">sz</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">doGen</span> <span class="nv">td</span><span class="p">)</span> <span class="p">(</span><span class="nv">allPoints</span> <span class="nv">sz</span><span class="p">)</span>

<span class="nv">lifes</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">TwoDArray</span><span class="p">]</span>
<span class="nv">lifes</span> <span class="nv">td</span> <span class="o">=</span> <span class="p">[</span><span class="nv">td</span><span class="p">]</span> <span class="o">++</span> <span class="p">(</span><span class="nv">lifes</span> <span class="p">(</span><span class="nv">nextGen</span> <span class="nv">td</span><span class="p">))</span>

<span class="nv">dumpRow</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span><span class="p">()</span>
<span class="nv">dumpRow</span> <span class="p">((</span><span class="nv">cx</span><span class="p">,</span> <span class="nv">cy</span><span class="p">),</span> <span class="nv">rg</span><span class="p">)</span> <span class="nv">iy</span> <span class="o">=</span> <span class="nv">putStrLn</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">rg</span><span class="o">!</span><span class="p">)</span> <span class="o">$</span> <span class="p">[(</span><span class="nv">iy</span> <span class="o">*</span> <span class="nv">cx</span><span class="p">)</span><span class="o">..</span><span class="p">((</span><span class="nv">iy</span> <span class="o">*</span> <span class="nv">cx</span><span class="p">)</span> <span class="o">+</span> <span class="nv">cx</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>

<span class="nv">dumpMap</span> <span class="o">::</span> <span class="n">TwoDArray</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span><span class="p">()</span>
<span class="nv">dumpMap</span> <span class="nv">td</span><span class="o">@</span><span class="p">(</span><span class="nv">size</span><span class="o">@</span><span class="p">(</span><span class="nv">cx</span><span class="p">,</span> <span class="nv">cy</span><span class="p">),</span> <span class="nv">rg</span><span class="p">)</span> <span class="nv">iGen</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Generation &quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">show</span> <span class="nv">iGen</span><span class="p">)</span>
    <span class="nv">mapM</span> <span class="p">(</span><span class="nv">dumpRow</span> <span class="nv">td</span><span class="p">)</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nv">cy</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;&quot;</span>

<span class="nv">doLife</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Int</span><span class="p">,</span> <span class="n">TwoDArray</span><span class="p">)]</span> <span class="o">-&gt;</span> <span class="n">IO</span><span class="p">()</span>
<span class="nv">doLife</span> <span class="p">[]</span> <span class="o">=</span> <span class="nv">return</span> <span class="p">()</span>
<span class="nv">doLife</span> <span class="p">(</span><span class="nv">x</span><span class="o">@</span><span class="p">(</span><span class="nv">iGen</span><span class="p">,</span> <span class="nv">rg</span><span class="p">)</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">dumpMap</span> <span class="nv">rg</span> <span class="nv">iGen</span>
    <span class="nv">doLife</span> <span class="nv">xs</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span><span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">doLife</span> <span class="o">$</span> <span class="nv">zip</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">20</span><span class="p">]</span> <span class="p">(</span><span class="nv">lifes</span> <span class="nv">start</span><span class="p">)</span>
    <span class="kr">where</span>
        <span class="nv">start</span> <span class="o">=</span> <span class="nv">makeArray</span> <span class="nv">sz</span> <span class="nv">glider</span>
        <span class="nv">sz</span> <span class="o">=</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5431/addtag/" class="addtag" id="addtag_5431">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5431/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5431/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5431"
  >-</span><span
  class="button yellow"
  id="rating_z_5431"
  >0</span><span 
  class="button green"
  id="rating_p_5431"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5431/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5436">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/679/" target="_top">muscovyduck</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5436/">#5436</a>(<script language="JavaScript">print_time(new Date("2008/01/23 14:35 GMT"));</script><noscript>2008/01/23 14:35 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ライフゲームは初めて実装しましたが、面白いものですねえ。</p>
<p>LifeGame::Board#drawメソッドが気持ち悪いのですが、とりあえず投稿します。本当はLifeGame::Board#to_sの結果を画面に描画するほうが良いのですが‥‥。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>

<span class="k">module</span> <span class="nn">LifeGame</span>
  <span class="k">class</span> <span class="nc">Board</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">board</span><span class="p">)</span>
      <span class="vi">@board</span> <span class="o">=</span> <span class="n">board</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">width</span>
      <span class="vi">@board</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">size</span> <span class="p">}</span><span class="o">.</span><span class="n">max</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">height</span>
      <span class="vi">@board</span><span class="o">.</span><span class="n">size</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
      <span class="vi">@board</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">cell</span><span class="p">)</span>
      <span class="vi">@board</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">cell</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">draw</span><span class="p">(</span><span class="n">window</span><span class="p">)</span>
      <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">height</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
        <span class="n">window</span><span class="o">.</span><span class="n">setpos</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">window</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="vi">@board</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">join</span><span class="p">)</span>
        <span class="n">window</span><span class="o">.</span><span class="n">refresh</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">to_s</span>
      <span class="vi">@board</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="o">.</span><span class="n">join</span> <span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">next</span>
      <span class="n">result</span> <span class="o">=</span> <span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">height</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span><span class="p">)</span> <span class="p">})</span>
      <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">height</span> <span class="o">-</span> <span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
        <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">width</span> <span class="o">-</span> <span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
          <span class="n">result</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">next_life</span><span class="p">(</span><span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span>
            <span class="o">[</span><span class="n">check</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span><span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span><span class="mi">1</span> <span class="p">),</span>
             <span class="n">check</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">]</span><span class="p">))</span>
        <span class="k">end</span>
      <span class="k">end</span>
      <span class="n">result</span>
    <span class="k">end</span>

    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">next_life</span><span class="p">(</span><span class="n">cell</span><span class="p">,</span> <span class="n">arrownd</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
      <span class="k">case</span>
      <span class="k">when</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">arrownd</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/\*/</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
        <span class="s1">&#39;*&#39;</span>
      <span class="k">when</span> <span class="p">(</span><span class="n">cell</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">arrownd</span><span class="o">.</span><span class="n">grep</span><span class="p">(</span><span class="sr">/\*/</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="s1">&#39;*&#39;</span>
      <span class="k">else</span>
        <span class="s1">&#39; &#39;</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$0</span>
  <span class="k">begin</span>
    <span class="n">board</span> <span class="o">=</span> <span class="no">LifeGame</span><span class="o">::</span><span class="no">Board</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]]</span><span class="p">)</span>
    <span class="n">time</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">window</span> <span class="o">=</span> <span class="no">Curses</span><span class="o">::</span><span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Curses</span><span class="o">.</span><span class="n">lines</span><span class="p">,</span> <span class="no">Curses</span><span class="o">.</span><span class="n">cols</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">sub_window</span> <span class="o">=</span> <span class="n">window</span><span class="o">.</span><span class="n">subwin</span><span class="p">(</span><span class="n">board</span><span class="o">.</span><span class="n">height</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="n">board</span><span class="o">.</span><span class="n">width</span> <span class="o">+</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">sub_window</span><span class="o">.</span><span class="n">box</span><span class="p">(</span><span class="sc">?|</span><span class="p">,</span> <span class="sc">?-</span><span class="p">,</span> <span class="sc">?+</span><span class="p">)</span>
    <span class="kp">loop</span> <span class="k">do</span>
      <span class="n">window</span><span class="o">.</span><span class="n">setpos</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">window</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="s2">&quot;t = </span><span class="si">#{</span><span class="n">time</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
      <span class="n">board</span><span class="o">.</span><span class="n">draw</span><span class="p">(</span><span class="n">sub_window</span><span class="p">)</span>
      <span class="n">window</span><span class="o">.</span><span class="n">getch</span>
      <span class="n">time</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="n">board</span> <span class="o">=</span> <span class="n">board</span><span class="o">.</span><span class="n">next</span>
    <span class="k">end</span>
  <span class="k">ensure</span>
    <span class="n">window</span><span class="o">.</span><span class="n">close</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5436/addtag/" class="addtag" id="addtag_5436">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5436/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5436/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5436"
  >-</span><span
  class="button yellow"
  id="rating_z_5436"
  >0</span><span 
  class="button green"
  id="rating_p_5436"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5436/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5438">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/499/" target="_top">eller</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5438/">#5438</a>(<script language="JavaScript">print_time(new Date("2008/01/23 23:57 GMT"));</script><noscript>2008/01/23 23:57 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>計算結果をJTextAreaに表示します。
sawatさんのコードとは異なり、格子状の平面を独自に定義したFieldクラスによって表現しています。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20080325151021/http://d.hatena.ne.jp/torutk/20060928#p2">mainメソッドでSwingを書かない訳（torutkの日記）</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170</pre></td><td class="code"><div class="highlight"><pre><span class="c">// Doukaku126.java</span>

<span class="k">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Doukaku126</span> <span class="k">extends</span> <span class="n">JFrame</span> <span class="k">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
    <span class="n">Field</span> <span class="n">field</span><span class="o">;</span>
    <span class="n">JTextArea</span> <span class="n">textArea</span><span class="o">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="k">final</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SwingUtilities</span><span class="o">.</span><span class="na">invokeLater</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="n">createAndShowGui</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="n">Doukaku126</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">super</span><span class="o">(</span><span class="s">&quot;ライフゲーム（どう書く？org #126）&quot;</span><span class="o">);</span>
        <span class="n">setDefaultCloseOperation</span><span class="o">(</span><span class="n">JFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
        <span class="n">setLayout</span><span class="o">(</span><span class="k">new</span> <span class="n">BorderLayout</span><span class="o">());</span>

        <span class="n">field</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Field</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
        <span class="n">field</span><span class="o">.</span><span class="na">makeLifes</span><span class="o">(</span><span class="mf">0.3</span><span class="o">);</span>

        <span class="n">textArea</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JTextArea</span><span class="o">();</span>
        <span class="n">textArea</span><span class="o">.</span><span class="na">setFont</span><span class="o">(</span><span class="k">new</span> <span class="n">Font</span><span class="o">(</span><span class="n">Font</span><span class="o">.</span><span class="na">MONOSPACED</span><span class="o">,</span> <span class="n">Font</span><span class="o">.</span><span class="na">PLAIN</span><span class="o">,</span> <span class="mi">14</span><span class="o">));</span>
        <span class="n">add</span><span class="o">(</span><span class="n">textArea</span><span class="o">,</span> <span class="n">BorderLayout</span><span class="o">.</span><span class="na">CENTER</span><span class="o">);</span>

        <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
        <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="c">/**</span>
<span class="c">     * mainスレッドからGUIを構築しないために利用するメソッド</span>
<span class="c">     * 参考-&gt;http://d.hatena.ne.jp/torutk/20060928#p2</span>
<span class="c">     */</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">createAndShowGui</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Doukaku126</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Doukaku126</span><span class="o">();</span>
        <span class="n">frame</span><span class="o">.</span><span class="na">setSize</span><span class="o">(</span><span class="mi">240</span><span class="o">,</span> <span class="mi">240</span><span class="o">);</span>
        <span class="n">frame</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">field</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
                <span class="n">textArea</span><span class="o">.</span><span class="na">setText</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                <span class="n">field</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">200</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>

        <span class="o">}</span>

    <span class="o">}</span>
    <span class="k">final</span> <span class="k">class</span> <span class="nc">Field</span> <span class="o">{</span>
        <span class="k">private</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">nowLife</span><span class="o">,</span> <span class="n">nextLife</span><span class="o">,</span> <span class="n">life</span><span class="o">;</span>

        <span class="k">private</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">;</span>

        <span class="c">/**</span>
<span class="c">         * フィールドのコンストラクタ</span>
<span class="c">         * </span>
<span class="c">         * @param width</span>
<span class="c">         *            フィールドの幅</span>
<span class="c">         * @param height</span>
<span class="c">         *            フィールドの高さ</span>
<span class="c">         */</span>
        <span class="k">public</span> <span class="n">Field</span><span class="o">(</span><span class="k">final</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">nowLife</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">width</span><span class="o">][</span><span class="n">height</span><span class="o">];</span>
            <span class="n">nextLife</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">width</span><span class="o">][</span><span class="n">height</span><span class="o">];</span>
            <span class="k">this</span><span class="o">.</span><span class="na">width</span> <span class="o">=</span> <span class="n">width</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">height</span> <span class="o">=</span> <span class="n">height</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c">/**</span>
<span class="c">         * フィールドに生命を生成する（ランダム）</span>
<span class="c">         * </span>
<span class="c">         * @param percent</span>
<span class="c">         *            1つのセルに生命が誕生する確率[0.0,1.0]</span>
<span class="c">         */</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">makeLifes</span><span class="o">(</span><span class="k">final</span> <span class="kt">double</span> <span class="n">percent</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="o">++</span><span class="n">y</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="o">++</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">nowLife</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">percent</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c">/**</span>
<span class="c">         * 時間を進め、生命の状態を変化させる</span>
<span class="c">         */</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">next</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="o">++</span><span class="n">y</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="o">++</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">nextLife</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="n">nextLife</span><span class="o">(</span><span class="n">nowLife</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">],</span> <span class="n">aroundLifesNum</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="c">// 計算結果をコピー</span>
<span class="c">/*            for (int x = 0; x &lt; width; ++x) {</span>
<span class="c">                System.arraycopy(nextLife[x], 0, nowLife[x], 0, height);</span>
<span class="c">            }</span>
<span class="c">/*/</span>
            <span class="n">tmpLife</span> <span class="o">=</span> <span class="n">nowLife</span><span class="o">;</span>
            <span class="n">nowLife</span> <span class="o">=</span> <span class="n">nextLife</span><span class="o">;</span>
            <span class="n">nextLife</span> <span class="o">=</span> <span class="n">tmpLife</span><span class="o">;</span>
<span class="c">//*/</span>
        <span class="o">}</span>

        <span class="c">/**</span>
<span class="c">         * 現在の生命の状態と周囲の生命数から、次の生命の状態を調べる</span>
<span class="c">         * </span>
<span class="c">         * @param nowLife</span>
<span class="c">         *            現在の生命の状態</span>
<span class="c">         * @param numLifes</span>
<span class="c">         *            周囲の生命数</span>
<span class="c">         * @return 次の生命の状態</span>
<span class="c">         */</span>
        <span class="k">private</span> <span class="kt">boolean</span> <span class="n">nextLife</span><span class="o">(</span><span class="k">final</span> <span class="kt">boolean</span> <span class="n">nowLife</span><span class="o">,</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">numLifes</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="n">nowLife</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">numLifes</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="n">numLifes</span> <span class="o">==</span> <span class="mi">3</span><span class="o">))</span>
                    <span class="o">||</span> <span class="o">(!</span><span class="n">nowLife</span> <span class="o">&amp;&amp;</span> <span class="n">numLifes</span> <span class="o">==</span> <span class="mi">3</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c">/**</span>
<span class="c">         * 周囲の生命の数を返す</span>
<span class="c">         */</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">aroundLifesNum</span><span class="o">(</span><span class="k">final</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">aroundLife</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">i</span><span class="o">))</span> <span class="o">{</span>
                    <span class="o">++</span><span class="n">num</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">num</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c">// posと場所は次のように対応</span>
        <span class="c">// 0 1 2</span>
        <span class="c">// 7 * 3</span>
        <span class="c">// 6 5 4</span>
        <span class="k">private</span> <span class="kt">boolean</span> <span class="n">aroundLife</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">pos</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
                <span class="o">--</span><span class="n">y</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="mi">4</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="mi">6</span><span class="o">)</span> <span class="o">{</span>
                <span class="o">++</span><span class="n">y</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">pos</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">pos</span> <span class="o">==</span> <span class="mi">6</span> <span class="o">||</span> <span class="n">pos</span> <span class="o">==</span> <span class="mi">7</span><span class="o">)</span> <span class="o">{</span>
                <span class="o">--</span><span class="n">x</span><span class="o">;</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">pos</span> <span class="o">&amp;&amp;</span> <span class="n">pos</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
                <span class="o">++</span><span class="n">x</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">nowLife</span><span class="o">[(</span><span class="n">x</span><span class="o">+</span><span class="n">width</span><span class="o">)%</span><span class="n">width</span><span class="o">][(</span><span class="n">y</span><span class="o">+</span><span class="n">height</span><span class="o">)%</span><span class="n">height</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c">/**</span>
<span class="c">         * 自分自身の文字表現をStringBufferへ代入</span>
<span class="c">         */</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">print</span><span class="o">(</span><span class="k">final</span> <span class="n">StringBuffer</span> <span class="n">sb</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">sb</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="o">++</span><span class="n">y</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="o">++</span><span class="n">x</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">nowLife</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">?</span> <span class="s">&quot;[*]&quot;</span> <span class="o">:</span> <span class="s">&quot;[ ]&quot;</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5438/addtag/" class="addtag" id="addtag_5438">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5438/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5438/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5438"
  >-</span><span
  class="button yellow"
  id="rating_z_5438"
  >0</span><span 
  class="button green"
  id="rating_p_5438"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5438/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5446">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5446/">#5446</a>(<script language="JavaScript">print_time(new Date("2008/01/24 09:13 GMT"));</script><noscript>2008/01/24 09:13 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>コンソール専用化と思っていたら
エスケープシーケンスってVT100エミュレーション下では
ちゃんと機能するんですね。
20へぇ～

Cっぽくポインタを活用してみました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>
<span class="cp">#include &lt;assert.h&gt;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagCell</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">alive</span><span class="p">;</span> <span class="c">// 今の状態</span>
    <span class="kt">int</span> <span class="n">life</span><span class="p">;</span>  <span class="c">// 次の状態</span>
    <span class="k">struct</span> <span class="n">tagCell</span> <span class="o">*</span><span class="n">around</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span> <span class="c">// 自分の周囲(自分含む)</span>
<span class="p">}</span> <span class="n">CELL</span><span class="p">;</span>

<span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">CELL_CHAR</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;□&quot;</span><span class="p">,</span> <span class="s">&quot;■&quot;</span> <span class="p">};</span>

<span class="cp">#define HEIGHT (10)</span>
<span class="cp">#define WIDTH  (10)</span>
<span class="k">static</span> <span class="n">CELL</span> <span class="n">cells</span><span class="p">[</span> <span class="n">HEIGHT</span> <span class="p">][</span> <span class="n">WIDTH</span> <span class="p">];</span>

<span class="c">/* 初期パターン (0:死 /1:生) */</span>
<span class="c">// お題サンプル(池になって終わり)</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">graph_paturn1</span><span class="p">[</span> <span class="n">HEIGHT</span> <span class="o">*</span> <span class="n">WIDTH</span> <span class="p">]</span> <span class="o">=</span>
<span class="p">{</span>
<span class="c">//         1   2   3   4   5   6   7   8   9  10 </span>
<span class="c">/*  1 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  2 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  3 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  4 */</span>   <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  5 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  6 */</span>   <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>
<span class="c">/*  7 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  8 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>
<span class="c">/*  9 */</span>   <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>
<span class="c">/* 10 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span>
<span class="p">};</span>

<span class="c">// 基本パターン固定型</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">graph_paturn2</span><span class="p">[</span> <span class="n">HEIGHT</span> <span class="o">*</span> <span class="n">WIDTH</span> <span class="p">]</span> <span class="o">=</span>
<span class="p">{</span>
<span class="c">//         1   2   3   4   5   6   7   8   9  10 </span>
<span class="c">/*  1 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  2 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  3 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  4 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  5 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  6 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  7 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  8 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/*  9 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>
<span class="c">/* 10 */</span>   <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span>
<span class="p">};</span>

<span class="kr">inline</span> <span class="kt">void</span> <span class="n">CLS</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x1b</span><span class="s">[2J&quot;</span><span class="p">);</span> <span class="p">}</span>
<span class="kr">inline</span> <span class="kt">void</span> <span class="n">LOCATE</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x1b</span><span class="s">[%d;%dH&quot;</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span> <span class="p">}</span>
<span class="kr">inline</span> <span class="kt">void</span> <span class="n">STORE_LOCATE</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x1b</span><span class="s">[s&quot;</span><span class="p">);</span> <span class="p">}</span>
<span class="kr">inline</span> <span class="kt">void</span> <span class="n">RESTORE_LOCATE</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\x1b</span><span class="s">[u&quot;</span><span class="p">);</span> <span class="p">}</span>

<span class="c">/* 指定した座標のセル取得 */</span>
<span class="kr">inline</span> <span class="kt">int</span> <span class="n">getCell</span><span class="p">(</span><span class="n">CELL</span> <span class="o">**</span><span class="n">out</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">out</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">);</span>

    <span class="c">/* 座標の正規化 */</span>
    <span class="n">y</span> <span class="o">%=</span> <span class="n">HEIGHT</span><span class="p">;</span> <span class="k">if</span><span class="p">(</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">){</span> <span class="n">y</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span>
    <span class="n">x</span> <span class="o">%=</span> <span class="n">WIDTH</span><span class="p">;</span>  <span class="k">if</span><span class="p">(</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">){</span> <span class="n">x</span> <span class="o">=</span> <span class="n">WIDTH</span>  <span class="o">+</span> <span class="n">x</span><span class="p">;</span> <span class="p">}</span>

    <span class="c">/*  */</span>
    <span class="o">*</span><span class="n">out</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">];</span>
    <span class="n">assert</span><span class="p">(</span><span class="o">*</span><span class="n">out</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 現在の状態から次世代の状態を設定する */</span>
<span class="kt">int</span> <span class="n">set_next_life</span><span class="p">(</span><span class="k">struct</span> <span class="n">tagCell</span> <span class="o">*</span><span class="n">cell</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">score</span><span class="p">;</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">cell</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">);</span>
    <span class="n">score</span> <span class="o">=</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span>   <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span> <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span>
            <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span>                          <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span>
            <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span> <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span> <span class="o">+</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">alive</span><span class="p">;</span>
    <span class="k">switch</span><span class="p">(</span> <span class="n">score</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">case</span> <span class="mi">2</span><span class="o">:</span> <span class="c">// 維持</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="mi">3</span><span class="o">:</span> <span class="c">// 誕生</span>
            <span class="n">cell</span><span class="o">-&gt;</span><span class="n">life</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span> <span class="c">// 死亡</span>
            <span class="n">cell</span><span class="o">-&gt;</span><span class="n">life</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 初期化いろいろ */</span>
<span class="kt">int</span> <span class="n">initialize</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="o">*</span><span class="n">graph</span> <span class="o">=</span> <span class="n">graph_paturn1</span><span class="p">;</span> <span class="c">// 初期配置</span>

    <span class="k">struct</span> <span class="n">tagCell</span>   <span class="o">*</span><span class="n">cell</span><span class="p">;</span>

    <span class="c">/* スクリーンの初期化 */</span>
    <span class="n">CLS</span><span class="p">();</span> <span class="n">LOCATE</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span>

    <span class="c">/* セルの初期化 */</span>
    <span class="n">memset</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cells</span><span class="p">)</span> <span class="p">);</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">HEIGHT</span><span class="p">;</span> <span class="n">h</span> <span class="o">++</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">w</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">WIDTH</span><span class="p">;</span> <span class="n">w</span> <span class="o">++</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cell</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">[</span> <span class="n">h</span> <span class="p">][</span> <span class="n">w</span> <span class="p">];</span>
            <span class="n">cell</span><span class="o">-&gt;</span><span class="n">alive</span> <span class="o">=</span> <span class="o">*</span><span class="n">graph</span><span class="o">++</span><span class="p">;</span>
            <span class="n">cell</span><span class="o">-&gt;</span><span class="n">life</span>  <span class="o">=</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">alive</span><span class="p">;</span>
            <span class="c">/* 周囲セルの設定 */</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">w</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">w</span>  <span class="p">,</span> <span class="n">h</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">w</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">w</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span>  <span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">w</span>  <span class="p">,</span> <span class="n">h</span>  <span class="p">);</span> <span class="c">//自分自身</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span> <span class="n">w</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span>  <span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span> <span class="n">w</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span> <span class="n">w</span>  <span class="p">,</span> <span class="n">h</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
            <span class="n">getCell</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cell</span><span class="o">-&gt;</span><span class="n">around</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span> <span class="n">w</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">h</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 現在の状態を表示 */</span>
<span class="kt">int</span> <span class="n">print_cells</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">tagCell</span> <span class="o">*</span><span class="n">cell</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">HEIGHT</span><span class="p">;</span> <span class="n">h</span> <span class="o">++</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">w</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">WIDTH</span><span class="p">;</span> <span class="n">w</span> <span class="o">++</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cell</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">[</span> <span class="n">h</span> <span class="p">][</span> <span class="n">w</span> <span class="p">];</span>
<span class="c">//          printf(&quot;[%c]&quot;, (cell-&gt;alive == 1)?&#39;*&#39;:&#39; &#39;);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">CELL_CHAR</span><span class="p">[</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">alive</span> <span class="p">]</span> <span class="p">);</span>
            <span class="n">cell</span><span class="o">-&gt;</span><span class="n">alive</span> <span class="o">=</span> <span class="n">cell</span><span class="o">-&gt;</span><span class="n">life</span><span class="p">;</span> <span class="c">// 表示したので次世代の状態を反映する</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/*  */</span>
<span class="kt">void</span> <span class="n">play</span><span class="p">(</span><span class="kt">int</span> <span class="n">frame</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">timespec</span> <span class="n">interval</span> <span class="o">=</span> 
    <span class="p">{</span> 
        <span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
        <span class="p">.</span><span class="n">tv_nsec</span> <span class="o">=</span> <span class="mi">125000000</span>
    <span class="p">};</span>

    <span class="n">STORE_LOCATE</span><span class="p">();</span>
    <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">t</span><span class="o">&lt;=</span><span class="n">frame</span> <span class="o">||</span> <span class="n">frame</span><span class="o">==-</span><span class="mi">1</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">RESTORE_LOCATE</span><span class="p">();</span>
        <span class="c">/* 表示前に次の状態を計算 */</span>
        <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">HEIGHT</span><span class="p">;</span> <span class="n">h</span> <span class="o">++</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span><span class="p">(</span> <span class="kt">int</span> <span class="n">w</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">WIDTH</span><span class="p">;</span> <span class="n">w</span> <span class="o">++</span> <span class="p">)</span>
            <span class="p">{</span>
                <span class="n">set_next_life</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">cells</span><span class="p">[</span> <span class="n">h</span> <span class="p">][</span> <span class="n">w</span> <span class="p">]</span> <span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="c">/* 表示 */</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;t=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
        <span class="n">print_cells</span><span class="p">();</span>

        <span class="c">/* ディレイ */</span>
        <span class="n">nanosleep</span><span class="p">(</span><span class="o">&amp;</span><span class="n">interval</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">initialize</span><span class="p">();</span>
    <span class="n">play</span><span class="p">(</span> <span class="p">(</span><span class="n">argc</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)</span><span class="o">?</span><span class="n">atoi</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">)</span><span class="o">:-</span><span class="mi">1</span> <span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5446/addtag/" class="addtag" id="addtag_5446">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/C99/">C99</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5446/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5446/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5446"
  >-</span><span
  class="button yellow"
  id="rating_z_5446"
  >0</span><span 
  class="button green"
  id="rating_p_5446"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5446/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5447">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/686/" target="_top">futoase</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5447/">#5447</a>(<script language="JavaScript">print_time(new Date("2008/01/24 13:45 GMT"));</script><noscript>2008/01/24 13:45 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>グライダーが動いているので大丈夫だと思います。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">time</span>

<span class="n">X_MAX</span> <span class="o">=</span> <span class="mi">9</span>
<span class="n">Y_MAX</span> <span class="o">=</span> <span class="mi">9</span>

<span class="k">def</span> <span class="nf">lefx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">mx</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">mx</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">rigx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">mx</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">mx</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">up_y</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">my</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">my</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">dowy</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">my</span><span class="p">):</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">my</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">list_search</span><span class="p">(</span><span class="n">motherlist</span><span class="p">):</span>
    <span class="n">buflist</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">motherlist</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">motherlist</span><span class="p">))]</span>
    <span class="c">#range(9) = [0,1,2,3,4,5,6,7,8]</span>
    <span class="c">#range(9+1) = [0,1,2,3,4,5,6,7,8,9]</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">Y_MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">lefx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">X_MAX</span><span class="p">)][</span><span class="n">up_y</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">Y_MAX</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">lefx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">X_MAX</span><span class="p">)][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">lefx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">X_MAX</span><span class="p">)][</span><span class="n">dowy</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">Y_MAX</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">up_y</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">Y_MAX</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">dowy</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">Y_MAX</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">rigx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">X_MAX</span><span class="p">)][</span><span class="n">up_y</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">Y_MAX</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">rigx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">X_MAX</span><span class="p">)][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">rigx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">X_MAX</span><span class="p">)][</span><span class="n">dowy</span><span class="p">(</span><span class="n">y</span><span class="p">,</span><span class="n">Y_MAX</span><span class="p">)]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">buflist</span>

<span class="k">def</span> <span class="nf">list_weight</span><span class="p">(</span><span class="n">motherlist</span><span class="p">,</span><span class="n">buflist</span><span class="p">):</span>
    <span class="n">buflist2</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">motherlist</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">motherlist</span><span class="p">))]</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">X_MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">Y_MAX</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">buflist2</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist2</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">buflist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span> <span class="ow">and</span> <span class="n">motherlist</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">buflist2</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">buflist2</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">motherlist</span><span class="p">,</span><span class="n">count</span><span class="p">,</span><span class="n">sleep</span><span class="p">):</span>
    
    <span class="k">while</span><span class="p">(</span><span class="n">count</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>

        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">motherlist</span><span class="p">)):</span>
            <span class="k">print</span><span class="p">(</span><span class="n">motherlist</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        
        <span class="k">print</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
        <span class="n">motherlist</span> <span class="o">=</span> <span class="n">list_weight</span><span class="p">(</span><span class="n">motherlist</span><span class="p">,</span><span class="n">list_search</span><span class="p">(</span><span class="n">motherlist</span><span class="p">))</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">sleep</span><span class="p">)</span>
        <span class="n">count</span> <span class="o">-=</span> <span class="mi">1</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">testlist</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">)]</span>
    <span class="n">testlist</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">testlist</span><span class="p">[</span><span class="mi">6</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">testlist</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">testlist</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">6</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">testlist</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">main</span><span class="p">(</span><span class="n">testlist</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5447/addtag/" class="addtag" id="addtag_5447">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5447/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5447/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5447"
  >-</span><span
  class="button yellow"
  id="rating_z_5447"
  >0</span><span 
  class="button green"
  id="rating_p_5447"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5447/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5449">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5449/">#5449</a>(<script language="JavaScript">print_time(new Date("2008/01/24 16:55 GMT"));</script><noscript>2008/01/24 16:55 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/postscript/">
	  PostScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffcf;">1/3=0.33</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  PostScript で書いてみました。
このままプリンタに流すと1世代1枚の紙を浪費しますのでご注意下さい。

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102</pre></td><td class="code"><div class="highlight"><pre>!PS

%---------------- Initialize -----------
/TestMap [ % 10x10
   0 1 0 0 0 0 1 1 1 0
   0 0 0 0 1 0 0 1 1 0
   0 0 0 1 0 0 1 0 1 0
   1 0 1 1 0 0 1 0 0 0
   0 1 0 0 0 0 0 0 1 0
   1 0 0 0 1 0 1 1 0 1
   0 1 0 0 0 0 1 0 0 0
   0 0 0 0 0 0 0 0 0 1
   1 0 0 0 0 0 1 0 0 1
   0 0 0 0 1 1 0 0 1 0
] def
/RandomMap {
    realtime srand
    [1 1 MapSize2 { pop rand 1000 mod 300 gt {0} {1} ifelse } for]
} def

/OrgMap { TestMap } def
/MapSizeX 10 def
/MapSizeY 10 def
/Loop 150 def

%              0    1     2     3     4    5    6     7      8    
/RuleBorn [ false false false  true false false false false false ] def
/RuleKeep [ false false  true  true false false false false false ] def

% ----Printout Size-------------------
/MapWidth 500 def
/MapHeight 500 def
/MapOffsetX 20 def
/MapOffsetY 70 def
% -------------------------------------
/Times-Roman findfont 16 scalefont setfont
/MapSizeX2 MapSizeX 2 add def
/MapSize2 MapSizeX MapSizeY mul def
/MapSize3 MapSizeX2 MapSizeY mul def

/Vect [-1 MapSizeX2 sub 0 MapSizeX2 sub 1 MapSizeX2 sub -1 1 MapSizeX2 1 sub M\
apSizeX2 MapSizeX2 1 add] def

/DispMap {
    20 20 moveto (Life Game: Stage=) show
    10 string cvs show
    /Map exch def
    /VX MapWidth MapSizeX idiv def
    /VY MapHeight MapSizeY idiv def
    0 1 MapSizeY 1 sub {
        /y exch def
        0 1 MapSizeX 1 sub {
            /x exch def
            x VX mul MapOffsetX add
            y VY mul -1 mul MapHeight add MapOffsetY add moveto
            VX 0 rlineto 0 VY rlineto 0 VX sub 0 rlineto closepath
            Map x y MapSizeX2 mul add 1 add get 1 eq { fill } { stroke } ifels\
e
        } for
    } for
} def

/ExpandMap {
    /Offset exch def
    /Width MapSizeX Offset 2 mul add def
    /Map exch def
    [
        0 1 MapSizeY 1 sub {
            Width mul Offset add /v exch def
            Map v MapSizeX add 1 sub get
            0 1 MapSizeX 1 sub {
                v add Map exch get
            } for
            Map v get
        } for
    ]
} def

/NewStage {
    1 ExpandMap
    /Map exch def
    [
    0 1 MapSize3 1 sub {
        /v exch def
        /count 0 def
        0 1 7 {
            Vect exch get
            v add MapSize3 add MapSize3 mod /vx exch def
            /count count Map vx get add def
        } for
        0
        Map v get 0 eq {RuleBorn count get { pop 1 } if }
            {RuleKeep count get { pop 1 } if } ifelse
    } for
    ]
} def

/OrgMap OrgMap 0 ExpandMap def
0 1 Loop {
    OrgMap exch DispMap showpage
    /OrgMap OrgMap NewStage def
} for
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5449/addtag/" class="addtag" id="addtag_5449">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/postscript/">
		PostScript
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5449/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5449/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffcf;"
  >1/3=0.33</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5449"
  >-</span><span
  class="button yellow"
  id="rating_z_5449"
  >0</span><span 
  class="button green"
  id="rating_p_5449"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5449/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5449/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5451">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5451/">#5451</a>(<script language="JavaScript">print_time(new Date("2008/01/24 17:44 GMT"));</script><noscript>2008/01/24 17:44 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>投稿とちりました。
1行目先頭に "%" が必要、41、57行は継続行です。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5451/addtag/" class="addtag" id="addtag_5451">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5451"
  >-</span><span
  class="button yellow"
  id="rating_z_5451"
  >0</span><span 
  class="button green"
  id="rating_p_5451"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5449/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5451/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5451/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5454">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/218/" target="_top">susu</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5454/">#5454</a>(<script language="JavaScript">print_time(new Date("2008/01/25 10:18 GMT"));</script><noscript>2008/01/25 10:18 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>お題のサンプルは一部違う動きをするのですが、
間引きが無いからでしょうか？</p>
<p>値をtrue,falseに限定すると生死判定の部分は少し短くできます。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre><span class="c">(*範囲指定fold  x.(pos)からlen幅  はみ出し分はループ*)</span>
<span class="kr">let</span> <span class="n">loop_fold_left_in</span> <span class="n">f</span> <span class="n">acc</span> <span class="n">x</span> <span class="n">pos</span> <span class="n">len</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">alen</span> <span class="k">=</span> <span class="n">Array</span><span class="k">.</span><span class="n">length</span> <span class="n">x</span> <span class="kr">in</span>
  <span class="kr">let</span> <span class="n">pos</span> <span class="k">=</span> <span class="kr">if</span> <span class="k">-</span><span class="n">alen</span><span class="k">&lt;=</span><span class="n">pos</span> <span class="k">&amp;&amp;</span> <span class="n">pos</span><span class="k">&lt;</span><span class="mi">0</span> <span class="kr">then</span> <span class="n">alen</span><span class="k">+</span><span class="n">pos</span> <span class="kr">else</span> <span class="n">pos</span> <span class="kr">in</span>
  <span class="kr">let</span> <span class="n">r</span><span class="k">,</span><span class="n">co</span> <span class="k">=</span> <span class="n">ref</span> <span class="n">acc</span><span class="k">,</span> <span class="n">ref</span> <span class="mi">0</span> <span class="kr">in</span>
  
  <span class="kr">for</span> <span class="n">i</span> <span class="k">=</span> <span class="n">pos</span> <span class="kr">to</span> <span class="n">pos</span><span class="k">+</span><span class="n">len</span><span class="k">-</span><span class="mi">1</span> <span class="kr">do</span>
    <span class="kr">if</span> <span class="k">(</span><span class="n">i</span> <span class="k">-</span> <span class="o">!</span><span class="n">co</span><span class="k">)&gt;=</span><span class="n">alen</span> <span class="kr">then</span> <span class="n">co</span><span class="k">:=</span><span class="o">!</span><span class="n">co</span><span class="k">+</span><span class="n">alen</span><span class="k">;</span>
    <span class="n">r</span> <span class="k">:=</span> <span class="n">f</span> <span class="o">!</span><span class="n">r</span> <span class="k">(</span><span class="n">Array</span><span class="k">.</span><span class="n">get</span> <span class="n">x</span> <span class="k">(</span><span class="n">i</span> <span class="k">-</span> <span class="o">!</span><span class="n">co</span><span class="k">));</span>
  <span class="kr">done</span><span class="k">;</span> <span class="o">!</span><span class="n">r</span><span class="k">;;</span>

<span class="c">(*arr.(xpos).(ypos)中心の3*3マスでfがtrueとなる値の数*)</span>
<span class="kr">let</span> <span class="n">count9</span> <span class="n">f</span> <span class="n">arr</span> <span class="n">xpos</span> <span class="n">ypos</span> <span class="k">=</span>
  <span class="n">loop_fold_left_in</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">accx</span> <span class="n">y</span> <span class="k">-&gt;</span> 
    <span class="n">loop_fold_left_in</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">accy</span> <span class="n">z</span> <span class="k">-&gt;</span> 
      <span class="kr">if</span> <span class="n">f</span> <span class="n">z</span> <span class="kr">then</span> <span class="n">accy</span><span class="k">+</span><span class="mi">1</span> <span class="kr">else</span> <span class="n">accy</span>
    <span class="k">)</span> <span class="mi">0</span> <span class="n">y</span> <span class="k">(</span><span class="n">ypos</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span> <span class="mi">3</span> <span class="k">+</span> <span class="n">accx</span>
  <span class="k">)</span> <span class="mi">0</span> <span class="n">arr</span> <span class="k">(</span><span class="n">xpos</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span> <span class="mi">3</span> <span class="k">;;</span>

<span class="kr">let</span> <span class="n">mapi</span> <span class="n">f</span> <span class="n">arr</span> <span class="k">=</span>
  <span class="n">Array</span><span class="k">.</span><span class="n">init</span> <span class="k">(</span><span class="n">Array</span><span class="k">.</span><span class="n">length</span> <span class="n">arr</span><span class="k">)</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">i</span> <span class="k">-&gt;</span>
    <span class="n">Array</span><span class="k">.</span><span class="n">init</span> <span class="k">(</span><span class="n">Array</span><span class="k">.</span><span class="n">length</span> <span class="n">arr</span><span class="k">.(</span><span class="n">i</span><span class="k">))</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">j</span> <span class="k">-&gt;</span> <span class="n">f</span> <span class="n">i</span> <span class="n">j</span> <span class="n">arr</span><span class="k">.(</span><span class="n">i</span><span class="k">).(</span><span class="n">j</span><span class="k">))</span>
  <span class="k">);;</span>

<span class="c">(* t:生の値 f:死の値 arr:二次元array *)</span>
<span class="kr">let</span> <span class="n">next</span> <span class="n">t</span> <span class="n">f</span> <span class="n">arr</span> <span class="k">=</span>
  <span class="n">mapi</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">i</span> <span class="n">j</span> <span class="n">b</span> <span class="k">-&gt;</span> 
    <span class="kr">if</span> <span class="n">j</span><span class="k">=</span><span class="mi">0</span> <span class="kr">then</span> <span class="n">print_newline</span> <span class="k">();</span>
    <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;[%c]&quot;</span> <span class="k">(</span><span class="kr">if</span> <span class="n">b</span><span class="k">=</span><span class="n">t</span> <span class="kr">then</span> <span class="sc">&#39;*&#39;</span> <span class="kr">else</span> <span class="sc">&#39; &#39;</span><span class="k">);</span>
    
    <span class="kr">let</span> <span class="n">num</span> <span class="k">=</span> <span class="n">count9</span> <span class="k">((=)</span> <span class="n">t</span><span class="k">)</span> <span class="n">arr</span> <span class="n">i</span> <span class="n">j</span> <span class="kr">in</span>
    <span class="kr">if</span> <span class="k">(</span><span class="n">b</span><span class="k">=</span><span class="n">t</span><span class="k">)</span> <span class="kr">then</span> 
      <span class="kr">if</span> <span class="k">(</span><span class="n">num</span><span class="k">=</span><span class="mi">3</span> <span class="k">||</span> <span class="n">num</span><span class="k">=</span><span class="mi">4</span><span class="k">)</span> <span class="kr">then</span> <span class="n">t</span> <span class="kr">else</span> <span class="n">f</span>
    <span class="kr">else</span> 
      <span class="kr">if</span> <span class="k">(</span><span class="n">num</span><span class="k">=</span><span class="mi">3</span><span class="k">)</span> <span class="kr">then</span> <span class="n">t</span> <span class="kr">else</span> <span class="n">f</span>
  <span class="k">)</span> <span class="n">arr</span><span class="k">;;</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">preview</span> <span class="n">t</span> <span class="n">f</span> <span class="n">arr</span> <span class="n">n</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">arr</span> <span class="n">i</span> <span class="k">=</span>
    <span class="kr">if</span> <span class="n">n</span><span class="k">&lt;</span><span class="n">i</span> <span class="kr">then</span> <span class="k">()</span> <span class="kr">else</span> <span class="k">(</span>
      <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">t=%d&quot;</span> <span class="n">i</span><span class="k">;</span>
      <span class="n">loop</span> <span class="k">(</span><span class="n">next</span> <span class="n">t</span> <span class="n">f</span> <span class="n">arr</span><span class="k">)</span> <span class="k">(</span><span class="n">i</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span>
    <span class="k">)</span>
  <span class="kr">in</span> <span class="n">loop</span> <span class="n">arr</span> <span class="mi">0</span><span class="k">;;</span>
  
<span class="c">(*使用例</span>
<span class="c">    preview 1 0 </span>
<span class="c">      [|[|0; 0; 0; 0; 0|];</span>
<span class="c">        [|0; 0; 1; 0; 0|];</span>
<span class="c">        [|0; 0; 1; 0; 0|];</span>
<span class="c">        [|0; 0; 1; 0; 0|];</span>
<span class="c">        [|0; 0; 0; 0; 0|]|] 5;;</span>
<span class="c">*)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5454/addtag/" class="addtag" id="addtag_5454">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5454/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5454/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5454"
  >-</span><span
  class="button yellow"
  id="rating_z_5454"
  >0</span><span 
  class="button green"
  id="rating_p_5454"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5454/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5459">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/673/" target="_top">uti</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5459/">#5459</a>(<script language="JavaScript">print_time(new Date("2008/01/26 06:58 GMT"));</script><noscript>2008/01/26 06:58 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/sql/">
	  SQL
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  まだ投稿されていないようなのでSQLで書いてみました。<br/>Microsoft&nbsp;SQL&nbsp;Server&nbsp;2005&nbsp;で確認しています。<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="cm">/* 生存セルを格納する表: G=世代 */</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">LIFE</span> <span class="p">(</span><span class="k">G</span> <span class="nb">INT</span><span class="p">,</span> <span class="n">X</span> <span class="nb">INT</span><span class="p">,</span> <span class="n">Y</span> <span class="nb">INT</span><span class="p">)</span>

<span class="cm">/* 周囲9セルを求めるための補助的な表 */</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">NEAR</span> <span class="p">(</span><span class="n">X</span> <span class="nb">INT</span><span class="p">,</span> <span class="n">Y</span> <span class="nb">INT</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="mi">0</span><span class="p">,</span>  <span class="mi">0</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">0</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">NEAR</span> <span class="k">VALUES</span> <span class="p">(</span> <span class="mi">1</span><span class="p">,</span>  <span class="mi">1</span><span class="p">)</span>

<span class="cm">/* 初期配置 (グライダー) */</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">LIFE</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">LIFE</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">LIFE</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">LIFE</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">LIFE</span> <span class="k">VALUES</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="cm">/* 処理本体: 実行するたびにLIFE表に次世代を挿入します */</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">LIFE</span>
<span class="k">SELECT</span> <span class="n">L1</span><span class="p">.</span><span class="k">G</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">L1</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">L1</span><span class="p">.</span><span class="n">Y</span>
<span class="k">FROM</span> <span class="p">(</span><span class="k">SELECT</span> <span class="n">L</span><span class="p">.</span><span class="k">G</span> <span class="k">AS</span> <span class="k">G</span><span class="p">,</span> <span class="n">L</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">N</span><span class="p">.</span><span class="n">X</span> <span class="k">AS</span> <span class="n">X</span><span class="p">,</span> <span class="n">L</span><span class="p">.</span><span class="n">Y</span> <span class="o">+</span> <span class="n">N</span><span class="p">.</span><span class="n">Y</span> <span class="k">AS</span> <span class="n">Y</span><span class="p">,</span> <span class="k">COUNT</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">AS</span> <span class="k">C</span>
      <span class="k">FROM</span> <span class="n">LIFE</span> <span class="n">L</span><span class="p">,</span> <span class="n">NEAR</span> <span class="n">N</span>
      <span class="k">WHERE</span> <span class="n">L</span><span class="p">.</span><span class="k">G</span> <span class="o">&gt;=</span> <span class="k">ALL</span><span class="p">(</span><span class="k">SELECT</span> <span class="k">G</span> <span class="k">FROM</span> <span class="n">LIFE</span><span class="p">)</span>
      <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">L</span><span class="p">.</span><span class="k">G</span><span class="p">,</span> <span class="n">L</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">N</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">L</span><span class="p">.</span><span class="n">Y</span> <span class="o">+</span> <span class="n">N</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span> <span class="n">L1</span>
      <span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">LIFE</span> <span class="n">L2</span> <span class="k">ON</span> <span class="n">L2</span><span class="p">.</span><span class="k">G</span> <span class="o">=</span> <span class="n">L1</span><span class="p">.</span><span class="k">G</span> <span class="k">AND</span> <span class="n">L2</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="n">L1</span><span class="p">.</span><span class="n">X</span> <span class="k">AND</span> <span class="n">L2</span><span class="p">.</span><span class="n">Y</span> <span class="o">=</span> <span class="n">L1</span><span class="p">.</span><span class="n">Y</span>
<span class="k">WHERE</span> <span class="n">L1</span><span class="p">.</span><span class="k">C</span> <span class="o">=</span> <span class="mi">3</span> <span class="k">OR</span> <span class="n">L2</span><span class="p">.</span><span class="k">G</span> <span class="k">IS</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">AND</span> <span class="n">L1</span><span class="p">.</span><span class="k">C</span> <span class="o">=</span> <span class="mi">4</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5459/addtag/" class="addtag" id="addtag_5459">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/sql/">
		SQL
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5459/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5459/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5459"
  >-</span><span
  class="button yellow"
  id="rating_z_5459"
  >0</span><span 
  class="button green"
  id="rating_p_5459"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080325151021/http://ja.doukaku.org/comment/5459/">
    1
    reply
  </a>

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5459/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5461">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5461/">#5461</a>(<script language="JavaScript">print_time(new Date("2008/01/26 07:40 GMT"));</script><noscript>2008/01/26 07:40 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>おもしろいですね

でも、2次元で表示しないといけないのでは</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5461/addtag/" class="addtag" id="addtag_5461">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5461"
  >-</span><span
  class="button yellow"
  id="rating_z_5461"
  >0</span><span 
  class="button green"
  id="rating_p_5461"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5459/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5461/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5461/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5466">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5466/">#5466</a>(<script language="JavaScript">print_time(new Date("2008/01/26 11:01 GMT"));</script><noscript>2008/01/26 11:01 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Gaucheでライフゲームを実装しました(間引き処理は実装していません)。あと、この実装過程をニコニコ動画にアップロードしてみました(<a class="reference" href="/web/20080325151021/http://www.nicovideo.jp/watch/sm2143250">http://www.nicovideo.jp/watch/sm2143250</a>)。</p>
<p>プログラムの説明ですが、Gauche-rfbを使っているので、ブラウザでライフゲームを見ることができます。</p>
<p>実行方法は、以下のように画面のサイズ(ドット数)とフィールドのサイズと初期分布の確率を引数に与えてください。</p>
<p>% gosh lifegame.scm 400 400 10 10 0.3</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134</pre></td><td class="code"><div class="highlight"><pre><span class="o">#</span><span class="nv">!/usr/bin/env</span> <span class="nv">gosh</span>
<span class="c1">;; lifegame</span>

<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">math</span><span class="o">.</span><span class="nv">mt-random</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">rfb</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">match</span><span class="p">)</span>

<span class="c1">;; point</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-point</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">point-x</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">car </span><span class="nv">p</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">point-y</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">cdr </span><span class="nv">p</span><span class="p">))</span>


<span class="c1">;; field</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-field</span> <span class="nv">w</span> <span class="nv">h</span> <span class="nv">lifes</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">list </span><span class="nv">w</span> <span class="nv">h</span> <span class="nv">lifes</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">field-width</span> <span class="nv">field</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">ref</span> <span class="nv">field</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">field-height</span> <span class="nv">field</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">ref</span> <span class="nv">field</span> <span class="mi">1</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">field-lifes</span> <span class="nv">field</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">ref</span> <span class="nv">field</span> <span class="mi">2</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">make-random-field</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">m</span> <span class="p">(</span><span class="nf">make</span> <span class="nv">&lt;mersenne-twister&gt;</span> <span class="nv">:seed</span> <span class="p">(</span><span class="nf">sys-time</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w</span> <span class="nv">h</span> <span class="nv">prob</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">make-field</span> <span class="nv">w</span> <span class="nv">h</span> <span class="p">(</span><span class="nf">list-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">x</span> <span class="mi">0</span> <span class="nv">w</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">:</span> <span class="nv">y</span> <span class="mi">0</span> <span class="nv">h</span><span class="p">)</span>
                               <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nf">mt-random-real</span> <span class="nv">m</span><span class="p">)</span>
                                       <span class="nv">prob</span><span class="p">))</span>
                               <span class="p">(</span><span class="nf">make-point</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">field-adjacent-point</span> <span class="nv">field</span> <span class="nv">p</span> <span class="nv">dx</span> <span class="nv">dy</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">make-point</span> <span class="p">(</span><span class="nb">modulo </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">point-x</span> <span class="nv">p</span><span class="p">)</span> <span class="nv">dx</span><span class="p">)</span>
                      <span class="p">(</span><span class="nf">field-width</span> <span class="nv">field</span><span class="p">))</span>
              <span class="p">(</span><span class="nb">modulo </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">point-y</span> <span class="nv">p</span><span class="p">)</span> <span class="nv">dy</span><span class="p">)</span>
                      <span class="p">(</span><span class="nf">field-height</span> <span class="nv">field</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">count-up-adjacent-points</span> <span class="nv">tbl</span> <span class="nv">field</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for-each</span>
   <span class="p">(</span><span class="nf">match-lambda</span>
    <span class="p">((</span><span class="nf">dx</span> <span class="nv">dy</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">hash-table-update!</span> <span class="nv">tbl</span>
                         <span class="p">(</span><span class="nf">field-adjacent-point</span> <span class="nv">field</span>
                                               <span class="nv">p</span>
                                               <span class="nv">dx</span>
                                               <span class="nv">dy</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">cut</span> <span class="nv">+</span> <span class="mi">1</span> <span class="nv">&lt;&gt;</span><span class="p">)</span>
                         <span class="mi">0</span><span class="p">)))</span>
   <span class="p">(</span><span class="nf">list-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">x</span> <span class="mi">-1</span> <span class="mi">2</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">:</span> <span class="nv">y</span> <span class="mi">-1</span> <span class="mi">2</span><span class="p">)</span>
            <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">y</span> <span class="mi">0</span><span class="p">)))</span>
            <span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">survive-lifes</span> <span class="nv">tbl</span> <span class="nv">field</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">lifes</span> <span class="p">(</span><span class="nf">field-lifes</span> <span class="nv">field</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">hash-table-fold</span>
     <span class="nv">tbl</span>
     <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span> <span class="nv">v</span> <span class="nv">lst</span><span class="p">)</span>
       <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">v</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">v</span> <span class="mi">3</span><span class="p">))</span>
                     <span class="p">(</span><span class="nb">member </span><span class="nv">p</span> <span class="nv">lifes</span><span class="p">))</span>
               <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">v</span> <span class="mi">3</span><span class="p">)</span>
                    <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">member </span><span class="nv">p</span> <span class="nv">lifes</span><span class="p">))))</span>
           <span class="p">(</span><span class="nb">cons </span><span class="nv">p</span> <span class="nv">lst</span><span class="p">)</span>
           <span class="nv">lst</span><span class="p">))</span>
     <span class="o">&#39;</span><span class="p">())))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-field</span> <span class="nv">field</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">tbl</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">count-up-adjacent-points</span> <span class="nv">tbl</span>
                                          <span class="nv">field</span>
                                          <span class="nv">p</span><span class="p">))</span>
              <span class="p">(</span><span class="nf">field-lifes</span> <span class="nv">field</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">make-field</span> <span class="p">(</span><span class="nf">field-width</span> <span class="nv">field</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">field-height</span> <span class="nv">field</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">survive-lifes</span> <span class="nv">tbl</span> <span class="nv">field</span><span class="p">))))</span>

<span class="c1">;; screen</span>
<span class="p">(</span><span class="k">define </span><span class="nv">*screen-width*</span> <span class="mi">200</span><span class="p">)</span>
<span class="p">(</span><span class="k">define </span><span class="nv">*screen-height*</span> <span class="mi">200</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">screen-draw-box</span> <span class="nv">w</span> <span class="nv">h</span> <span class="nv">p</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">cx</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*screen-width*</span> <span class="nv">w</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">cy</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*screen-height*</span> <span class="nv">h</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">x</span> <span class="p">(</span><span class="nb">* </span><span class="nv">cx</span> <span class="p">(</span><span class="nf">point-x</span> <span class="nv">p</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">y</span> <span class="p">(</span><span class="nb">* </span><span class="nv">cy</span> <span class="p">(</span><span class="nf">point-y</span> <span class="nv">p</span><span class="p">))))</span>
    <span class="p">(</span><span class="nf">rfb-box</span> <span class="nv">x</span> <span class="nv">y</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">cx</span> <span class="mi">-1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="nv">cy</span> <span class="mi">-1</span><span class="p">)</span> <span class="ss">&#39;white</span>
             <span class="nv">:filled?</span> <span class="no">#t</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">screen-clear</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">rfb-clear</span> <span class="ss">&#39;black</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">screen-draw-field</span> <span class="nv">field</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">screen-draw-box</span> <span class="p">(</span><span class="nf">field-width</span> <span class="nv">field</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">field-height</span> <span class="nv">field</span><span class="p">)</span>
                               <span class="nv">p</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">field-lifes</span> <span class="nv">field</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">lifegame</span> <span class="nv">w</span> <span class="nv">h</span> <span class="nv">prob</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">f</span> <span class="p">(</span><span class="nf">make-random-field</span> <span class="nv">w</span> <span class="nv">h</span> <span class="nv">prob</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">while</span> <span class="no">#t</span>
      <span class="p">(</span><span class="nf">with-rfb-transaction</span>
       <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
         <span class="p">(</span><span class="nf">screen-clear</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">screen-draw-field</span> <span class="nv">f</span><span class="p">)))</span>
      <span class="p">(</span><span class="k">set! </span><span class="nv">f</span> <span class="p">(</span><span class="nf">next-field</span> <span class="nv">f</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">match-let1</span> <span class="p">(</span><span class="nf">_</span> <span class="nv">scr-w-str</span> <span class="nv">scr-h-str</span>
                 <span class="nv">field-w-str</span> <span class="nv">field-h-str</span>
                 <span class="nv">prob-str</span><span class="p">)</span> <span class="nv">args</span>
    <span class="p">(</span><span class="k">set! </span><span class="nv">*screen-width*</span>
          <span class="p">(</span><span class="nb">string-&gt;number </span><span class="nv">scr-w-str</span><span class="p">))</span>
    <span class="p">(</span><span class="k">set! </span><span class="nv">*screen-height*</span>
          <span class="p">(</span><span class="nb">string-&gt;number </span><span class="nv">scr-h-str</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">rfb-init</span> <span class="nv">*screen-width*</span>
              <span class="nv">*screen-height*</span>
              <span class="nv">:port</span> <span class="mi">8080</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">apply </span><span class="nv">lifegame</span> <span class="p">(</span><span class="nb">map </span><span class="nv">string-&gt;number</span>
                         <span class="p">(</span><span class="nb">list </span><span class="nv">field-w-str</span>
                               <span class="nv">field-h-str</span>
                               <span class="nv">prob-str</span><span class="p">)))</span>
    <span class="mi">0</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5466/addtag/" class="addtag" id="addtag_5466">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/gauche-rfb/">gauche-rfb</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5466/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5466/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5466"
  >-</span><span
  class="button yellow"
  id="rating_z_5466"
  >0</span><span 
  class="button green"
  id="rating_p_5466"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5466/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5474">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/415/" target="_top">yohei</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5474/">#5474</a>(<script language="JavaScript">print_time(new Date("2008/01/27 04:57 GMT"));</script><noscript>2008/01/27 04:57 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/prolog/">
	  Prolog
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>SWI-Prologで．間引きは実装してません．</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre>in_range(X, L) :- Max is L - 1, between(0, Max, X).

surround((LX,LY), (X,Y), (X1,Y1), B) :-
    member((DX, DY), [(-1,-1),(0,-1),(1,-1),(-1,0),(1,0),(-1,1),(0,1),(1,1)]),
    X1 is (LX + X + DX) mod LX, Y1 is (LY + Y + DY) mod LY, member((X1,Y1), B).

live((LX,LY), (X,Y), B) :-
    in_range(X, LX), in_range(Y, LY),
    findall(T, surround((LX,LY), (X,Y), T, B), S),
    length(S, N), (member((X,Y), B) -&gt; (N = 2; N = 3); (N = 3)).

print_board((LX, LY), B) :- 
    forall(in_range(Y, LY), (forall(in_range(X, LX),
        (member((X,Y), B) -&gt; write(&#39;■&#39;); write(&#39;□&#39;))
    ), writeln(&#39;&#39;))), writeln(&#39;&#39;).

lifegame(L, B) :-
    print_board(L, B), sleep(1),
    findall(X, live(L, X, B), B1), lifegame(L, B1).

init_board((LX,LY), (X,Y)) :- in_range(X, LX), in_range(Y, LY), random(10) &lt; 3.

:- L= (10,10), findall(X, init_board(L, X), B), lifegame(L, B).
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5474/addtag/" class="addtag" id="addtag_5474">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/SWI-Prolog/">SWI-Prolog</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/prolog/">
		Prolog
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5474/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5474/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5474"
  >-</span><span
  class="button yellow"
  id="rating_z_5474"
  >0</span><span 
  class="button green"
  id="rating_p_5474"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5474/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5491">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5491/">#5491</a>(<script language="JavaScript">print_time(new Date("2008/01/27 16:54 GMT"));</script><noscript>2008/01/27 16:54 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk の（Erlang にこそ及ばないものの…）比較的軽量なスレッドを利用して、全セルにおける生死の判断をマルチスレッドで処理してみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre>| 行数 マス目 ワーカ再開用 メイン中断用 スレッド群 |
行数 := 10.
マス目 := Matrix new: 行数 tabulate: [:行＃ :列＃ | #value -&gt; #(0 0 1) atRandom].
ワーカ再開用 := OrderedCollection new.
メイン中断用 := OrderedCollection new.
スレッド群 := OrderedCollection new.
マス目 withIndicesDo: [:セル :行＃ :列＃ |
    | 再開指示 完了伝達 隣接セル群  |
    再開指示 := ワーカ再開用 add: Semaphore new.
    完了伝達 := メイン中断用 add: Semaphore new.
    隣接セル群 := {0@1. 1@1. 1@0. 1@-1. 0@-1. -1@-1. -1@0. -1@1} collect: [:Δ |
        | 位置 |
        位置 := 行＃@列＃ + Δ - 1 \\ 行数 + 1.
        マス目 at: 位置 x at: 位置 y].
    スレッド群 add: [[
        | 計 |
        再開指示 wait.
        計 := 隣接セル群 count: [:隣接セル | 隣接セル value &gt; 0].
        計 = 2 ifTrue: [計 := 計 + セル value].
        完了伝達 signal.
        再開指示 wait.
        セル value: (計 = 3 ifTrue: [1] ifFalse: [0]).
        完了伝達 signal] repeat
    ] fixTemps fork].

World findATranscript: nil.
[50 timesRepeat: [
    Transcript cr; show: (String streamContents: [:ss |
        (1 to: 行数) do: [:行＃ | (マス目 atRow: 行＃) do: [:セル |
            ss nextPut: (&#39;■□&#39; atWrap: セル value)].
            ss cr]]).

    ワーカ再開用 do: [:再開指示 | 再開指示 signal].
    メイン中断用 do: [:完了伝達 | 完了伝達 wait].
    ワーカ再開用 do: [:再開指示 | 再開指示 signal].
    メイン中断用 do: [:完了伝達 | 完了伝達 wait]].
] ensure: [スレッド群 do: [:スレッド | スレッド terminate]]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5491/addtag/" class="addtag" id="addtag_5491">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5491/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5491/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5491"
  >-</span><span
  class="button yellow"
  id="rating_z_5491"
  >0</span><span 
  class="button green"
  id="rating_p_5491"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5399/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080325151021/http://ja.doukaku.org/comment/5491/root/"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5491/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5512">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/167/" target="_top">TGBT</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5512/">#5512</a>(<script language="JavaScript">print_time(new Date("2008/01/28 04:33 GMT"));</script><noscript>2008/01/28 04:33 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>シェーダ言語のHLSLで書いてみました。
これ以外にシェーダを駆動するためのコードが500行以上必要なので、参考ページURLに載せておきました。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20080325151021/http://exth.net/~ohshima/cgi-bin/fswiki/wiki.cgi?page=GPU%A4%C7%A5%E9%A5%A4%A5%D5%A5%B2%A1%BC%A5%E0">GPUでライフゲーム - Satoshi OHSHIMA's web site:</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></td><td class="code"><div class="highlight"><pre>// Cから変更できる変数の宣言。問題サイズに対応。座標計算に使う。
float F_X;
float F_Y;
// テクスチャの宣言
texture SrcTex1;
// テクスチャの定義
sampler Samp1 = sampler_state
{
    Texture        = &lt;SrcTex1&gt;;
    MinFilter    = POINT;
    MagFilter    = POINT;
    MipFilter    = NONE;
    AddressU    = WRAP;
    AddressV    = WRAP;
};
// 頂点シェーダの出力形式
struct VS_OUTPUT
{
    float4 Pos        : POSITION;
    float2 Tex        : TEXCOORD;
};
// 頂点シェーダ(未使用)
VS_OUTPUT VS_DEFAULT (
    float4 Pos        : POSITION,
    float2 Tex        : TEXCOORD
){
    VS_OUTPUT Out    = (VS_OUTPUT)0;
    return Out;
}
// ピクセルシェーダ
float4 PS_TEST ( VS_OUTPUT In ) : COLOR
{
    float4 Color        = {0.0f, 0.0f, 0.0f, 0.0f};
    float2 TexA            = {0.0f, 0.0f};
    float4 Color0        = {0.0f, 0.0f, 0.0f, 0.0f};
    int num;
    int sum;
    int ret;

    TexA                = In.Tex + float2(F_X*0.5f, F_Y*0.5f);

    Color                += tex2D( Samp1, TexA+float2(-F_X, -F_Y) );
    Color                += tex2D( Samp1, TexA+float2(0.0f, -F_Y) );
    Color                += tex2D( Samp1, TexA+float2( F_X, -F_Y) );
    Color                += tex2D( Samp1, TexA+float2(-F_X,  0.0f) );
    Color0                =  tex2D( Samp1, TexA+float2( 0.0f,  0.0f) );
    Color                += tex2D( Samp1, TexA+float2( F_X,  0.0f) );
    Color                += tex2D( Samp1, TexA+float2(-F_X,  F_Y) );
    Color                += tex2D( Samp1, TexA+float2(0.0f,  F_Y) );
    Color                += tex2D( Samp1, TexA+float2( F_X,  F_Y) );
    num                    = round(Color0.r);
    sum                    = round(Color.r);
    ret                    = (sum==3) + (sum==2) * num;
    /*
    // 上の行は以下の条件式をまとめたもの。
    // 分岐をなくしたので多くのGPUで実行可能なはず。
    if(num==0)
    {
        ret                = sum==3;
    }else{
        ret                = ((sum==2)+(sum==3)) != 0;
    }
    */
    return float4((float)(ret*0xff), 0.0f, 0.0f, 1.0f);    // RGBA
}
// テクニック
technique RenderScene
{
    pass P0
    {
        VertexShader    = compile vs_2_0 VS_DEFAULT();
        PixelShader        = compile ps_2_0 PS_TEST();
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5512/addtag/" class="addtag" id="addtag_5512">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/HLSL/">HLSL</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5512/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5512/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5512"
  >-</span><span
  class="button yellow"
  id="rating_z_5512"
  >0</span><span 
  class="button green"
  id="rating_p_5512"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5512/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5580">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/440/" target="_top">はやみず</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5580/">#5580</a>(<script language="JavaScript">print_time(new Date("2008/01/30 19:45 GMT"));</script><noscript>2008/01/30 19:45 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>生まれてはじめてライフゲームを書いてみました。いままで人の書いたものを見たことはあったのですが。</p>
<p>ポイントとしては、循環リストを使って実装したことでしょうか。循環リストを使うことで、マップ境界に関する処理を一切考えなくてもよいようにしました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170</pre></td><td class="code"><div class="highlight"><pre><span class="o">#</span><span class="nv">!/usr/bin/env</span> <span class="nv">gosh</span>
<span class="c1">;; -*- coding: utf-8 mode: scheme -*-</span>


<span class="p">(</span><span class="nf">use</span> <span class="nv">math</span><span class="o">.</span><span class="nv">mt-random</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">map-size</span> <span class="mi">10</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">m</span>
      <span class="p">(</span><span class="nf">map-init</span>
       <span class="o">#</span><span class="nv">?=</span><span class="p">(</span><span class="nf">let1</span> <span class="nv">init-data</span> <span class="p">()</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">mt</span> <span class="p">(</span><span class="nf">make</span> <span class="nv">&lt;mersenne-twister&gt;</span> <span class="nv">:seed</span> <span class="p">(</span><span class="nf">sys-time</span><span class="p">))))</span>
       <span class="p">(</span><span class="nf">for-each</span>
        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">for-each</span>
           <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">y</span><span class="p">)</span>
         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="p">(</span><span class="nf">mt-random-real</span> <span class="nv">mt</span><span class="p">)</span> <span class="mf">0.3</span><span class="p">)</span>
             <span class="p">(</span><span class="k">set! </span><span class="nv">init-data</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">init-data</span><span class="p">))))</span>
           <span class="p">(</span><span class="nf">iota</span> <span class="nv">map-size</span> <span class="mi">1</span><span class="p">)))</span>
        <span class="p">(</span><span class="nf">iota</span> <span class="nv">map-size</span> <span class="mi">1</span><span class="p">)))</span>
     <span class="nv">init-data</span><span class="p">))</span>
    <span class="c1">;; (print-map m)</span>
    <span class="p">(</span><span class="nf">lifegame-loop</span> <span class="nv">m</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="mi">0</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-init</span> <span class="nv">init-data</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">map-data</span> <span class="p">(</span><span class="nf">make-map</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">for-each</span>
     <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">datum</span><span class="p">)</span>
       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="p">(</span><span class="nb">car </span><span class="nv">datum</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">y</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">datum</span><span class="p">)))</span>
     <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">map-data</span> <span class="no">#t</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
     <span class="nv">init-data</span><span class="p">)</span>
    <span class="nv">map-data</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-map</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">list-&gt;ring</span> <span class="nv">ls</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span><span class="p">((</span><span class="nf">ls_</span> <span class="nv">ls</span><span class="p">))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">ls_</span><span class="p">))</span>
        <span class="p">(</span><span class="k">begin </span><span class="p">(</span><span class="nb">set-cdr! </span><span class="nv">ls_</span> <span class="nv">ls</span><span class="p">)</span> <span class="nv">ls</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">ls_</span><span class="p">)))))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-ring-line</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">list-&gt;ring</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">map-size</span> <span class="no">#f</span><span class="p">)))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-ring-map</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">let1</span> <span class="nv">ls</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span><span class="p">((</span><span class="nf">ret</span> <span class="p">())</span> <span class="p">(</span><span class="nf">itr</span> <span class="nv">map-size</span><span class="p">))</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">itr</span><span class="p">)</span>
          <span class="nv">ret</span>
          <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">make-ring-line</span><span class="p">)</span> <span class="nv">ret</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">itr</span> <span class="mi">1</span><span class="p">))))</span>
      <span class="p">(</span><span class="nf">list-&gt;ring</span> <span class="nv">ls</span><span class="p">)))</span>

  <span class="p">(</span><span class="nf">make-ring-map</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">print-map</span> <span class="nv">map-data</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">print-line</span> <span class="nv">line</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span><span class="p">((</span><span class="nf">itr</span> <span class="mi">1</span><span class="p">))</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">itr</span> <span class="nv">map-size</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">begin</span>
        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">ref</span> <span class="nv">line</span> <span class="nv">itr</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">&quot;[*]&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="s">&quot;[ ]&quot;</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">itr</span> <span class="mi">1</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">itr</span> <span class="mi">1</span><span class="p">))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">itr</span> <span class="nv">map-size</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">newline</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">begin</span>
      <span class="p">(</span><span class="nf">print-line</span> <span class="p">(</span><span class="nf">ref</span> <span class="nv">map-data</span> <span class="nv">itr</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="nv">itr</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">delete-map</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">for-each</span>
   <span class="nv">display</span>
   <span class="p">(</span><span class="nf">make-list</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="nv">map-size</span> <span class="nv">map-size</span> <span class="p">)</span> <span class="nv">map-size</span><span class="p">)</span> <span class="s">&quot;\x08&quot;</span><span class="p">))</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-examine</span> <span class="nv">map-data</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">args</span>
      <span class="p">(</span><span class="nf">map</span>
       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">while</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="k">set! </span><span class="nv">x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">map-size</span><span class="p">)))</span>
     <span class="nv">x</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">(</span><span class="k">set! </span><span class="nv">x</span> <span class="p">(</span><span class="nb">car </span><span class="nv">args</span><span class="p">))</span>
    <span class="p">(</span><span class="k">set! </span><span class="nv">y</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">ref</span> <span class="p">(</span><span class="nf">ref</span> <span class="nv">map-data</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-on!</span> <span class="nv">map-data</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print-map</span> <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">map-data</span> <span class="no">#t</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-off!</span> <span class="nv">map-data</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print-map</span> <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">map-data</span> <span class="no">#f</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-set!</span> <span class="nv">map-data</span> <span class="nv">new-val</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">nth-cdr</span> <span class="nv">ls</span> <span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span><span class="p">((</span><span class="nf">ret</span> <span class="nv">ls</span><span class="p">)</span> <span class="p">(</span><span class="nf">n</span> <span class="nv">n</span><span class="p">))</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
      <span class="nv">ret</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">ret</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))))</span>

  <span class="p">(</span><span class="nf">let1</span> <span class="nv">args</span>
      <span class="p">(</span><span class="nf">map</span>
       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">while</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="k">set! </span><span class="nv">x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">map-size</span><span class="p">)))</span>
     <span class="nv">x</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">(</span><span class="k">set! </span><span class="nv">x</span> <span class="p">(</span><span class="nb">car </span><span class="nv">args</span><span class="p">))</span>
    <span class="p">(</span><span class="k">set! </span><span class="nv">y</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)))</span>
  
  <span class="p">(</span><span class="nb">set-car! </span><span class="p">(</span><span class="nf">nth-cdr</span> <span class="p">(</span><span class="nf">ref</span> <span class="nv">map-data</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
        <span class="nv">new-val</span><span class="p">)</span>
  <span class="nv">map-data</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">count-neighbors</span> <span class="nv">map-data</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">let1</span> <span class="nv">count</span> <span class="mi">0</span>
      <span class="p">(</span><span class="nf">for-each</span>
       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">arg</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">x</span> <span class="p">(</span><span class="nb">car </span><span class="nv">arg</span><span class="p">))</span> <span class="p">(</span><span class="nf">y</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">arg</span><span class="p">)))</span>
       <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">map-examine</span> <span class="nv">map-data</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
           <span class="p">(</span><span class="k">set! </span><span class="nv">count</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">count</span> <span class="mi">1</span><span class="p">)))))</span>
       <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">ret</span> <span class="p">())</span> <span class="p">(</span><span class="nf">nx</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">ny</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)))</span>
     <span class="p">(</span><span class="nf">cond</span>
      <span class="p">((</span><span class="nb">&gt; </span><span class="nv">ny</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span>
       <span class="nv">ret</span><span class="p">)</span>
      <span class="p">((</span><span class="nb">&gt; </span><span class="nv">nx</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))</span>
       <span class="p">(</span><span class="nf">loop</span> <span class="nv">ret</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">ny</span> <span class="mi">1</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">else</span>
       <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">x</span> <span class="nv">nx</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">y</span> <span class="nv">ny</span><span class="p">))</span>
             <span class="nv">ret</span>
             <span class="p">(</span><span class="nb">cons </span><span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="nv">nx</span> <span class="o">.</span> <span class="o">,</span><span class="nv">ny</span><span class="p">)</span> <span class="nv">ret</span><span class="p">))</span>
         <span class="p">(</span><span class="nb">+ </span><span class="nv">nx</span> <span class="mi">1</span><span class="p">)</span>
         <span class="nv">ny</span><span class="p">)))))</span>
      <span class="nv">count</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-next-step</span> <span class="nv">old-map</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">new-map</span>
      <span class="p">(</span><span class="nf">make-map</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">for-each</span>
     <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">for-each</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">y</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">let1</span> <span class="nv">count</span> <span class="p">(</span><span class="nf">count-neighbors</span> <span class="nv">old-map</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">map-examine</span> <span class="nv">old-map</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
        <span class="c1">;;; if alive</span>
        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="mi">3</span> <span class="nv">count</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">new-map</span> <span class="no">#t</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">new-map</span> <span class="no">#f</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>

        <span class="c1">;;; if dead</span>
        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="mi">3</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">new-map</span> <span class="no">#t</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">map-set!</span> <span class="nv">new-map</span> <span class="no">#f</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
      <span class="p">)</span>
    <span class="p">(</span><span class="nf">iota</span> <span class="nv">map-size</span> <span class="mi">1</span><span class="p">)))</span>
     <span class="p">(</span><span class="nf">iota</span> <span class="nv">map-size</span> <span class="mi">1</span><span class="p">))</span>
    <span class="nv">new-map</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">lifegame-loop</span> <span class="nv">map-data</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print-map</span> <span class="nv">map-data</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span><span class="p">((</span><span class="nf">m</span> <span class="nv">map-data</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">delete-map</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">print-map</span> <span class="nv">m</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">sys-nanosleep</span> <span class="mi">100000000</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nf">map-next-step</span> <span class="nv">m</span><span class="p">))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5580/addtag/" class="addtag" id="addtag_5580">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5580/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5580/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5580"
  >-</span><span
  class="button yellow"
  id="rating_z_5580"
  >0</span><span 
  class="button green"
  id="rating_p_5580"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5580/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5581">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/326/" target="_top">UK</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5581/">#5581</a>(<script language="JavaScript">print_time(new Date("2008/01/30 20:09 GMT"));</script><noscript>2008/01/30 20:09 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>何か適当なキーをぽちぽちすると世代が進みます。
生きているセルの周りをスコア付けして、維持・誕生・消滅の判断をしています。
テストコードを書いてないので合っているかちょっと不安ですが・・・</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;curses&#39;</span>

<span class="k">module</span> <span class="nn">LifeWorld</span>
  <span class="k">class</span> <span class="nc">World</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">map</span><span class="p">)</span>
      <span class="vi">@map</span> <span class="o">=</span> <span class="n">map</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">to_s</span> 
      <span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
      <span class="vi">@map</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
        <span class="n">line</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">cell</span><span class="o">|</span>
          <span class="n">str</span> <span class="o">+=</span> <span class="s2">&quot;[</span><span class="si">#{</span><span class="n">cell</span><span class="si">}</span><span class="s2">]&quot;</span>
        <span class="k">end</span>
        <span class="n">str</span> <span class="o">+=</span> <span class="s2">&quot;¥n&quot;</span>
      <span class="k">end</span>

      <span class="n">str</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">next</span> 
      <span class="n">ranking</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">h</span><span class="o">|</span>
        <span class="vi">@map</span><span class="o">[</span><span class="n">h</span><span class="o">]</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">cell</span><span class="o">|</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="n">cell</span><span class="p">)</span> <span class="p">?</span> <span class="s1">&#39;*&#39;</span> <span class="p">:</span> <span class="s1">&#39; &#39;</span> <span class="p">}</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">live_list</span>
      <span class="n">list</span> <span class="o">=</span> <span class="o">[]</span>
      <span class="vi">@map</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">h</span><span class="o">|</span>
        <span class="n">line</span><span class="o">.</span><span class="n">each_with_index</span> <span class="p">{</span><span class="o">|</span><span class="n">cell</span><span class="p">,</span> <span class="n">w</span><span class="o">|</span> <span class="n">list</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">h</span><span class="p">,</span><span class="n">w</span><span class="o">]</span> <span class="k">if</span> <span class="n">cell</span> <span class="o">==</span> <span class="s1">&#39;*&#39;</span><span class="p">}</span>
      <span class="k">end</span>

      <span class="n">list</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">set_score</span><span class="p">(</span><span class="n">rank_map</span><span class="p">,</span> <span class="n">live</span><span class="p">)</span>
      <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
        <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="o">|</span>
          <span class="n">score</span> <span class="o">=</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span> <span class="o">&amp;&amp;</span> <span class="n">y</span>  <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">10</span> <span class="p">:</span> <span class="mi">1</span>
          <span class="n">rank_map</span><span class="o">[</span><span class="n">live</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="n">x</span><span class="o">][</span><span class="n">live</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="n">y</span><span class="o">]</span> <span class="o">=</span> <span class="n">rank_map</span><span class="o">[</span><span class="n">live</span><span class="o">[</span><span class="mi">0</span><span class="o">]+</span><span class="n">x</span><span class="o">][</span><span class="n">live</span><span class="o">[</span><span class="mi">1</span><span class="o">]+</span><span class="n">y</span><span class="o">]</span> <span class="o">+</span> <span class="n">score</span>
        <span class="k">end</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">ranking</span>
      <span class="n">rank_map</span> <span class="o">=</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span>
      <span class="vi">@map</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span> <span class="n">rank_map</span> <span class="o">&lt;&lt;</span> <span class="no">List</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@map</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">size</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}</span>

      <span class="n">live_list</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">live</span><span class="o">|</span>
        <span class="n">set_score</span><span class="p">(</span><span class="n">rank_map</span><span class="o">.</span><span class="n">clone</span><span class="p">,</span> <span class="n">live</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">rank_map</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">List</span> <span class="o">&lt;</span> <span class="nb">Array</span>
    <span class="k">alias</span> <span class="n">original_get</span> <span class="o">[]</span>
    <span class="k">alias</span> <span class="n">original_set</span> <span class="o">[]=</span>

      <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">index</span><span class="p">)</span>
        <span class="n">original_get</span><span class="p">(</span><span class="n">index</span> <span class="o">%</span> <span class="n">size</span><span class="p">)</span>
      <span class="k">end</span>

    <span class="k">def</span> <span class="nf">[]=</span><span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="n">original_set</span><span class="p">(</span><span class="n">index</span> <span class="o">%</span> <span class="n">size</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$0</span>
  <span class="k">begin</span>
    <span class="n">game</span> <span class="o">=</span> <span class="no">LifeWorld</span><span class="o">::</span><span class="no">World</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="o">]</span><span class="p">,</span>
                                <span class="o">[</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;*&#39;</span><span class="p">,</span> <span class="s1">&#39; &#39;</span><span class="o">]]</span><span class="p">)</span>

    <span class="n">window</span> <span class="o">=</span> <span class="no">Curses</span><span class="o">::</span><span class="no">Window</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Curses</span><span class="o">.</span><span class="n">lines</span><span class="p">,</span> <span class="no">Curses</span><span class="o">.</span><span class="n">cols</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="kp">loop</span> <span class="k">do</span>
      <span class="n">window</span><span class="o">.</span><span class="n">setpos</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">window</span><span class="o">.</span><span class="n">addstr</span><span class="p">(</span><span class="n">game</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>
      <span class="n">game</span><span class="o">.</span><span class="n">next</span> 
      <span class="n">window</span><span class="o">.</span><span class="n">getch</span>
    <span class="k">end</span>
  <span class="k">ensure</span>
    <span class="n">window</span><span class="o">.</span><span class="n">close</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5581/addtag/" class="addtag" id="addtag_5581">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5581/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5581/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5581"
  >-</span><span
  class="button yellow"
  id="rating_z_5581"
  >0</span><span 
  class="button green"
  id="rating_p_5581"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5581/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5641">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/674/" target="_top">ryugate</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5641/">#5641</a>(<script language="JavaScript">print_time(new Date("2008/02/02 12:46 GMT"));</script><noscript>2008/02/02 12:46 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>Scala実装がなかったので、作ってみました。
まだまだ、Scalaになれてないので、
ツッコミどころ満載とおもいます。（バグもあるかも・・・）
ばしばし、ご指摘いただければ幸いです。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113</pre></td><td class="code"><div class="highlight"><pre>object lifegame {
  def main(args:Array[String]) {

    println(&quot;make field&quot;)
    val size = 10
    val fields = new Array[Lifefield](2)
    fields.update(0, new Lifefield(size))
    fields.update(1, new Lifefield(size))

    println(&quot;init cell&quot;)
    val f = fields.apply(0)
    f.rndinit
    // glider
    //f.setcell(0,1,1)
    //f.setcell(1,0,1)
    //f.setcell(2,0,1)
    //f.setcell(2,1,1)
    //f.setcell(2,2,1)
    println(fields.apply(0))

    println(&quot;start&quot;)
    Iterator.range(0,1000).foreach {i =&gt;
      val fi = i % 2
      val nfi = if (fi == 0) 1 else 0
      fields.apply(fi).makenext(fields.apply(nfi))

      println(&quot;age = &quot; + i.toString)
      println(fields.apply(nfi))
      Thread.sleep(200)
    }
  }
}

class Lifefield {
  var sx:int = 0
  var sy:int = 0
  var field:Array[Array[int]] = null

  def this(x:int, y:int) {
    this()
    sx = x; sy = y
    field = new Array[Array[int]](sx)
    field.indices.foreach {i =&gt; field.update(i, new Array[int](sy)) }

    field.foreach {line =&gt;
      line.indices.foreach {i =&gt;
        line.update(i, 0)
      }
    }
  }
  def this(size:int) = this(size,size)
  
  def setcell(x:int,y:int,value:int) = field.apply(y).update(x, value)
  
  def makenext(newfield:Lifefield) = {
    Iterator.range(0,sy).foreach {y =&gt;
      Iterator.range(0,sx).foreach {x =&gt;
        val cellvalue = field.apply(y).apply(x)
        val num = checkaround(x,y)
        if (cellvalue == 0 &amp;&amp; num == 3)
          newfield.setcell(x,y, 1)
        else
          if (cellvalue == 1 &amp;&amp; (num == 2 || num == 3))
            newfield.setcell(x,y, 1)
          else  
            newfield.setcell(x,y, 0)
      }
    }
  }
  
  def checkaround(x:int,y:int) = {
    val r = Iterator.range(-1,2)
    var n:int = 0
    r.foreach {i1 =&gt;
      r.foreach {i2 =&gt;
        if(i1==0 &amp;&amp; i2==0)
          null
        else
          n += cellvalue(x + i1, y + i2)
      }
    }
    n
  }
  
  def cellvalue(x:int, y:int) = {
    val xx = if (x &lt; 0) x + sx else x % sx
    val yy = if (y &lt; 0) y + sy else y % sy
    field.apply(yy).apply(xx)
  }

  def rndinit {
    val rnd = new Random()
    field.foreach {line =&gt;
      line.indices.foreach {i =&gt;
        if (rnd.nextInt(3) == 0)
          line.update(i, 1)
        else
          line.update(i, 0)
      }
    }
  }

  override def toString() = {
    var ret = &quot;&quot;
    field.foreach {line =&gt;
      line.foreach {cell =&gt;
        ret += (if (cell == 1) &quot;[*]&quot; else &quot;[ ]&quot;)
      }
      ret += &quot;\n&quot;
    }
    ret
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5641/addtag/" class="addtag" id="addtag_5641">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5641/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5641/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5641"
  >-</span><span
  class="button yellow"
  id="rating_z_5641"
  >0</span><span 
  class="button green"
  id="rating_p_5641"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5641/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5674">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/701/" target="_top">ygnon</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5674/">#5674</a>(<script language="JavaScript">print_time(new Date("2008/02/03 20:41 GMT"));</script><noscript>2008/02/03 20:41 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<p>思いつきでビット操作で書いたものです。読みにくくて済みません。</p>
<p>ちょっと動作に自信が無かったり...(グライダーは動いた、と思う)</p>
<p>間引きはしていません。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre><span class="kr">let</span> <span class="n">most</span> <span class="k">=</span> <span class="mi">0</span><span class="n">x400</span>
<span class="kr">let</span> <span class="n">size</span> <span class="k">=</span> <span class="mi">10</span>
  
<span class="kr">let</span> <span class="n">exist</span> <span class="n">num</span> <span class="n">pos</span> <span class="k">=</span> <span class="n">num</span> <span class="kr">land</span> <span class="n">pos</span> <span class="k">!=</span> <span class="mi">0</span>
<span class="kr">let</span> <span class="n">i_of_b</span> <span class="n">f</span> <span class="k">=</span> <span class="kr">if</span> <span class="n">f</span> <span class="kr">then</span> <span class="mi">1</span> <span class="kr">else</span> <span class="mi">0</span>
  
<span class="c">(* 左右端ループ対策 *)</span>
<span class="kr">let</span> <span class="n">ring</span> <span class="n">num</span> <span class="k">=</span> <span class="n">num</span> <span class="kr">lor</span> <span class="k">(</span><span class="n">num</span> <span class="kr">lsl</span> <span class="n">size</span><span class="k">)</span> <span class="kr">lor</span> <span class="k">(</span><span class="n">num</span> <span class="kr">lsr</span> <span class="n">size</span><span class="k">)</span>
  
<span class="kr">let</span> <span class="kr">rec</span> <span class="n">update_line</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">pos</span> <span class="k">=</span>
  <span class="kr">if</span> <span class="n">pos</span> <span class="k">=</span> <span class="mi">1</span> <span class="kr">then</span>
    <span class="mi">0</span>
  <span class="kr">else</span>
    <span class="kr">let</span> <span class="n">count</span> <span class="n">num</span> <span class="n">p</span> <span class="k">=</span>
      <span class="n">i_of_b</span> <span class="k">(</span><span class="n">exist</span> <span class="n">num</span> <span class="n">p</span><span class="k">)</span> <span class="k">+</span> <span class="n">i_of_b</span> <span class="k">(</span><span class="n">exist</span> <span class="n">num</span> <span class="k">(</span><span class="n">p</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">))</span> <span class="k">+</span> <span class="n">i_of_b</span> <span class="k">(</span><span class="n">exist</span> <span class="n">num</span> <span class="k">(</span><span class="n">p</span> <span class="kr">lsl</span> <span class="mi">1</span><span class="k">))</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">alive</span> <span class="k">=</span> <span class="n">count</span> <span class="n">a</span> <span class="n">pos</span> <span class="k">+</span> <span class="n">count</span> <span class="n">b</span> <span class="n">pos</span> <span class="k">+</span> <span class="n">count</span> <span class="n">c</span> <span class="n">pos</span> <span class="kr">in</span>
      <span class="kr">if</span> <span class="n">alive</span> <span class="k">=</span> <span class="mi">3</span> <span class="k">||</span> <span class="n">alive</span> <span class="k">=</span> <span class="mi">4</span> <span class="k">&amp;&amp;</span> <span class="n">exist</span> <span class="n">b</span> <span class="n">pos</span> <span class="kr">then</span>
        <span class="n">pos</span> <span class="k">+</span> <span class="n">update_line</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="k">(</span><span class="n">pos</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span>
      <span class="kr">else</span>
        <span class="n">update_line</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="k">(</span><span class="n">pos</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span>
          
<span class="kr">let</span> <span class="kr">rec</span> <span class="n">update_field</span> <span class="k">=</span> <span class="kr">function</span>
    <span class="k">[]</span>          <span class="k">-&gt;</span> <span class="k">[]</span>
  <span class="k">|</span> <span class="k">_::[]</span>       <span class="k">-&gt;</span> <span class="k">[]</span>
  <span class="k">|</span> <span class="k">_::_::[]</span>    <span class="k">-&gt;</span> <span class="k">[]</span>
  <span class="k">|</span> <span class="n">a</span><span class="k">::</span><span class="n">b</span><span class="k">::</span><span class="n">c</span><span class="k">::</span><span class="n">xs</span> <span class="k">-&gt;</span> <span class="n">ring</span> <span class="k">(</span><span class="n">update_line</span> <span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="n">most</span><span class="k">)</span> <span class="k">::</span> <span class="n">update_field</span> <span class="k">(</span><span class="n">b</span><span class="k">::</span><span class="n">c</span><span class="k">::</span><span class="n">xs</span><span class="k">)</span>
      
<span class="kr">let</span> <span class="kr">rec</span> <span class="n">mk_line</span> <span class="n">n</span> <span class="k">=</span>
  <span class="kr">if</span> <span class="n">n</span> <span class="k">&lt;=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="mi">0</span> <span class="kr">else</span> <span class="k">(</span><span class="n">i_of_b</span> <span class="k">(</span><span class="n">Random</span><span class="k">.</span><span class="n">int</span> <span class="mi">10</span> <span class="k">&lt;</span> <span class="mi">3</span><span class="k">)</span> <span class="k">+</span> <span class="n">mk_line</span> <span class="k">(</span><span class="n">n</span><span class="k">-</span><span class="mi">1</span><span class="k">))</span> <span class="kr">lsl</span> <span class="mi">1</span>
    
<span class="kr">let</span> <span class="kr">rec</span> <span class="n">mk_field</span> <span class="n">n</span> <span class="k">=</span>
  <span class="kr">if</span> <span class="n">n</span> <span class="k">&lt;=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="k">[]</span> <span class="kr">else</span> <span class="n">ring</span> <span class="k">(</span><span class="n">mk_line</span> <span class="n">size</span><span class="k">)</span> <span class="k">::</span> <span class="n">mk_field</span> <span class="k">(</span><span class="n">n</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span>
    
<span class="kr">let</span> <span class="kr">rec</span> <span class="n">print_field</span> <span class="k">=</span> <span class="kr">function</span>
    <span class="k">[]</span>    <span class="k">-&gt;</span> <span class="k">()</span>
  <span class="k">|</span> <span class="n">x</span><span class="k">::</span><span class="n">xs</span> <span class="k">-&gt;</span>
      <span class="kr">for</span> <span class="n">i</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">to</span> <span class="n">size</span><span class="k">-</span><span class="mi">1</span> <span class="kr">do</span>
        <span class="kr">if</span> <span class="n">x</span> <span class="kr">land</span> <span class="k">(</span><span class="n">most</span> <span class="kr">lsr</span> <span class="n">i</span><span class="k">)</span> <span class="k">!=</span> <span class="mi">0</span> <span class="kr">then</span>
          <span class="n">print_string</span> <span class="s2">&quot;[*]&quot;</span>
        <span class="kr">else</span>
          <span class="n">print_string</span> <span class="s2">&quot;[ ]&quot;</span><span class="k">;</span>
      <span class="kr">done</span><span class="k">;</span>
      <span class="n">print_string</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">;</span>
      <span class="n">print_field</span> <span class="n">xs</span>
        
<span class="kr">let</span> <span class="kr">rec</span> <span class="n">main_loop</span> <span class="n">n</span> <span class="n">fld</span> <span class="k">=</span>
  <span class="n">print_string</span> <span class="k">(</span><span class="s2">&quot;t=&quot;</span> <span class="o">^</span> <span class="n">string_of_int</span> <span class="n">n</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);</span>
  <span class="n">print_field</span> <span class="n">fld</span><span class="k">;</span>
  <span class="kr">if</span> <span class="n">String</span><span class="k">.</span><span class="n">compare</span> <span class="k">(</span><span class="n">read_line</span> <span class="k">())</span> <span class="s2">&quot;exit&quot;</span> <span class="k">!=</span> <span class="mi">0</span> <span class="kr">then</span>
    <span class="c">(* 上下端ループ対策 *)</span>
    <span class="kr">let</span> <span class="n">fld_</span> <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">concat</span> <span class="k">[[</span><span class="n">List</span><span class="k">.</span><span class="n">nth</span> <span class="n">fld</span> <span class="mi">9</span><span class="k">];</span> <span class="n">fld</span><span class="k">;</span> <span class="k">[</span><span class="n">List</span><span class="k">.</span><span class="n">hd</span> <span class="n">fld</span><span class="k">]]</span> <span class="kr">in</span>
      <span class="n">main_loop</span> <span class="k">(</span><span class="n">n</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">update_field</span> <span class="n">fld_</span><span class="k">)</span>
        
<span class="kr">let</span> <span class="k">()</span> <span class="k">=</span>
  <span class="n">Random</span><span class="k">.</span><span class="n">self_init</span> <span class="k">();</span>
  <span class="n">main_loop</span> <span class="mi">0</span> <span class="k">(</span><span class="n">mk_field</span> <span class="n">size</span><span class="k">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5674/addtag/" class="addtag" id="addtag_5674">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5674/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5674/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5674"
  >-</span><span
  class="button yellow"
  id="rating_z_5674"
  >0</span><span 
  class="button green"
  id="rating_p_5674"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5674/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5769">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/717/" target="_top">Uminchu</a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5769/">#5769</a>(<script language="JavaScript">print_time(new Date("2008/02/18 03:52 GMT"));</script><noscript>2008/02/18 03:52 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>初めて投稿します。
よろしくお願いします。
普段はC++を扱う事が多いのですが、趣味でSchemeを勉強しています。
書き方が変なところなどがあれば、ご指摘くださいませ。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-27</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-43</span><span class="p">)</span>

<span class="c1">;;主手続き</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">life-game</span> <span class="nv">n</span> <span class="nv">t</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">board</span> <span class="p">(</span><span class="nf">make-initial-board</span> <span class="nv">n</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">count</span> <span class="mi">0</span><span class="p">))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">count</span> <span class="nv">t</span><span class="p">)</span>
        <span class="no">#f</span>
        <span class="p">(</span><span class="nf">begin</span>
          <span class="p">(</span><span class="nf">display-life-game</span> <span class="nv">board</span> <span class="nv">n</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nf">next-step</span> <span class="nv">board</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">count</span> <span class="mi">1</span><span class="p">))))))</span>

<span class="c1">;;画面出力</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">display-life-game</span> <span class="nv">board</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">begin</span>
    <span class="p">(</span><span class="nf">vector-for-each</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">position</span> <span class="nv">state</span><span class="p">)</span>
                  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nb">remainder </span><span class="p">(</span><span class="nb">+ </span><span class="nv">position</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
                      <span class="p">(</span><span class="nf">print</span> <span class="nv">state</span><span class="p">)</span>
                      <span class="p">(</span><span class="nb">display </span><span class="nv">state</span><span class="p">)))</span>
                <span class="nv">board</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">newline</span><span class="p">)))</span>

<span class="c1">;;初期の盤面を作成</span>
<span class="c1">;;ランダムな盤面を作成</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-initial-board</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">board</span> <span class="p">(</span><span class="nb">make-vector </span><span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">vector-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
                  <span class="p">(</span><span class="nf">random-integer</span> <span class="mi">2</span><span class="p">))</span>
                <span class="nv">board</span><span class="p">)))</span>

<span class="c1">;;盤面を更新</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">next-step</span> <span class="nv">board</span> <span class="nv">size</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">vector-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">loc</span> <span class="nv">stat</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">state-change-rule</span> <span class="nv">stat</span>
                                   <span class="p">(</span><span class="nf">fold</span> <span class="nv">+</span>
                                         <span class="mi">0</span>
                                         <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">pa$</span> <span class="nv">vector-ref</span> <span class="nv">board</span><span class="p">)</span>
                                              <span class="p">(</span><span class="nf">neighbor-cell</span> <span class="nv">loc</span> <span class="nv">size</span><span class="p">)))))</span>
              <span class="nv">board</span><span class="p">))</span>

<span class="c1">;;状態を変えるルール</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">state-change-rule</span> <span class="nv">self</span> <span class="nv">neighbor-sum</span><span class="p">)</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">self</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">neighbor-sum</span> <span class="mi">3</span><span class="p">)</span>
          <span class="mi">1</span>
          <span class="mi">0</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">neighbor-sum</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="nv">neighbor-sum</span> <span class="mi">3</span><span class="p">))</span>
          <span class="mi">1</span>
          <span class="mi">0</span><span class="p">)))</span>

<span class="c1">;;近傍セルを取得</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">neighbor-cell</span> <span class="nv">r</span> <span class="nv">size</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">boundary-check</span> <span class="nv">x</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">&lt; </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">size</span><span class="p">))</span>
          <span class="p">((</span><span class="nb">&gt;= </span><span class="nv">x</span> <span class="nv">size</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">size</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-coodinate-change-proc</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">offset</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">boundary-check</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="p">(</span><span class="nb">car </span><span class="nv">offset</span><span class="p">)))</span>
         <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">boundary-check</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">offset</span><span class="p">)))</span>
            <span class="nv">size</span><span class="p">))))</span>

  <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">y</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">quotient&amp;remainder</span> <span class="nv">r</span> <span class="nv">size</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">make-coodinate-change-proc</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">0</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">-1</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">0</span> <span class="mi">-1</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">-1</span> <span class="mi">-1</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">-1</span> <span class="mi">0</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">-1</span> <span class="mi">1</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">0</span> <span class="mi">1</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cons </span><span class="mi">1</span> <span class="mi">1</span><span class="p">)))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5769/addtag/" class="addtag" id="addtag_5769">タグ</a>:
	
    
    <a href="/web/20080325151021/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5769/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5769/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5769"
  >-</span><span
  class="button yellow"
  id="rating_z_5769"
  >0</span><span 
  class="button green"
  id="rating_p_5769"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5769/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5964">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/750/" target="_top">IOG</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5964/">#5964</a>(<script language="JavaScript">print_time(new Date("2008/03/06 06:56 GMT"));</script><noscript>2008/03/06 06:56 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Haskell の勉強中です．
間引きはありません．
初期状態を表す，
&quot;0001000:0010010:001000...&quot;のような文字列を，引数として与えます（':' は行の区切り）．</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">List</span>
<span class="kr">import</span> <span class="n">System</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Posix</span><span class="o">.</span><span class="n">Unistd</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">args</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="kr">let</span> <span class="nv">initState</span>    <span class="o">=</span> <span class="p">[[</span><span class="nv">read</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="o">::</span> <span class="n">Int</span><span class="o">|</span> <span class="nv">c</span> <span class="o">&lt;-</span> <span class="nv">line</span><span class="p">]</span><span class="o">|</span> <span class="nv">line</span> <span class="o">&lt;-</span> <span class="nv">initStateStr</span><span class="p">]</span>
              <span class="nv">initStateStr</span> <span class="o">=</span> <span class="nv">split</span> <span class="sc">&#39;:&#39;</span> <span class="o">$</span> <span class="nv">head</span> <span class="nv">args</span>
                  <span class="kr">where</span>
                    <span class="nv">split</span> <span class="o">::</span> <span class="p">(</span><span class="n">Eq</span> <span class="nv">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="nv">a</span><span class="p">]]</span>
                    <span class="nv">split</span> <span class="nv">d</span> <span class="nv">xs</span>
                        <span class="o">|</span> <span class="nv">null</span> <span class="nv">xs</span>   <span class="o">=</span> <span class="p">[]</span>
                        <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">break</span> <span class="p">(</span><span class="o">==</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">xs</span> <span class="kr">of</span>
                                        <span class="p">(</span><span class="nv">fxs</span><span class="p">,[])</span>  <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">fxs</span><span class="p">]</span>
                                        <span class="p">(</span><span class="nv">fxs</span><span class="p">,</span><span class="nv">sxs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">fxs</span> <span class="o">:</span> <span class="nv">split</span> <span class="nv">d</span> <span class="p">(</span><span class="nv">tail</span> <span class="nv">sxs</span><span class="p">)</span>
          <span class="p">(</span><span class="nv">putEachStrWithSleep</span> <span class="mi">400000</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">stateToStr</span><span class="p">)</span> <span class="o">$</span> <span class="nv">lifeGame</span> <span class="nv">initState</span>

<span class="nv">putEachStrWithSleep</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">putEachStrWithSleep</span> <span class="kr">_</span> <span class="p">[]</span>        <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;&quot;</span>
<span class="nv">putEachStrWithSleep</span> <span class="nv">usec</span> <span class="p">(</span><span class="nv">s</span><span class="o">:</span><span class="nv">ss</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">replace0</span> <span class="o">.</span> <span class="nv">replace1</span><span class="p">)</span> <span class="nv">s</span> <span class="o">&gt;&gt;</span> 
                                  <span class="nv">usleep</span> <span class="nv">usec</span> <span class="o">&gt;&gt;</span> 
                                  <span class="nv">putEachStrWithSleep</span> <span class="nv">usec</span> <span class="nv">ss</span>
    <span class="kr">where</span>
      <span class="nv">replace0</span> <span class="o">=</span> <span class="nv">replaceStr</span> <span class="sc">&#39;0&#39;</span> <span class="sc">&#39;.&#39;</span>
      <span class="nv">replace1</span> <span class="o">=</span> <span class="nv">replaceStr</span> <span class="sc">&#39;1&#39;</span> <span class="sc">&#39;@&#39;</span>

      <span class="nv">replaceStr</span> <span class="o">::</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="n">String</span>
      <span class="nv">replaceStr</span> <span class="kr">_</span> <span class="kr">_</span> <span class="s">&quot;&quot;</span>      <span class="o">=</span> <span class="p">[]</span>
      <span class="nv">replaceStr</span> <span class="nv">c</span> <span class="nv">c&#39;</span> <span class="p">(</span><span class="nv">s</span><span class="o">:</span><span class="nv">ss</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kr">if</span> <span class="p">(</span><span class="nv">c</span> <span class="o">==</span> <span class="nv">s</span><span class="p">)</span> <span class="kr">then</span> <span class="nv">c&#39;</span> <span class="kr">else</span> <span class="nv">s</span><span class="p">)</span> <span class="o">:</span> <span class="nv">replaceStr</span> <span class="nv">c</span> <span class="nv">c&#39;</span> <span class="nv">ss</span>

<span class="kr">infixl</span> <span class="mi">9</span> <span class="o">!!&gt;</span>

<span class="p">(</span><span class="o">!!&gt;</span><span class="p">)</span> <span class="o">::</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="nv">a</span>
<span class="p">(</span><span class="o">!!&gt;</span><span class="p">)</span> <span class="nv">xs</span> <span class="nv">n</span>
    <span class="o">|</span> <span class="nv">null</span> <span class="nv">xs</span>   <span class="o">=</span> <span class="nv">error</span> <span class="s">&quot;Main.(!!&gt;): empty list\n.&quot;</span>
    <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="nv">xs</span> <span class="o">!!</span> <span class="p">(</span><span class="nv">n</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="nv">length</span> <span class="nv">xs</span><span class="p">)</span>

<span class="kr">type</span> <span class="n">State</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Int</span><span class="p">]]</span>

<span class="nv">stateToStr</span> <span class="o">::</span> <span class="n">State</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">stateToStr</span> <span class="p">[]</span>     <span class="o">=</span> <span class="s">&quot;&quot;</span>
<span class="nv">stateToStr</span> <span class="p">(</span><span class="nv">s</span><span class="o">:</span><span class="nv">ss</span><span class="p">)</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="nv">show</span> <span class="nv">s</span> <span class="o">++</span> <span class="s">&quot;\n&quot;</span> <span class="o">++</span> <span class="nv">stateToStr</span> <span class="nv">ss</span>

<span class="nv">lifeGame</span> <span class="o">::</span> <span class="n">State</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">State</span><span class="p">]</span>
<span class="nv">lifeGame</span> <span class="nv">state</span> <span class="o">=</span> <span class="nv">state</span> <span class="o">:</span> <span class="p">(</span><span class="nv">lifeGame</span> <span class="o">.</span> <span class="nv">nextState</span><span class="p">)</span> <span class="nv">state</span>

<span class="nv">nextState</span> <span class="o">::</span> <span class="n">State</span> <span class="o">-&gt;</span> <span class="n">State</span>
<span class="nv">nextState</span> <span class="nv">state</span> <span class="o">=</span> <span class="p">[[</span><span class="nv">nextCell</span> <span class="nv">state</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span><span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">maxX</span><span class="p">]]</span><span class="o">|</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">maxY</span><span class="p">]]</span>
    <span class="kr">where</span>
      <span class="nv">maxX</span> <span class="o">=</span> <span class="p">((</span><span class="nv">length</span> <span class="o">.</span> <span class="nv">head</span><span class="p">)</span> <span class="nv">state</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="nv">maxY</span> <span class="o">=</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">state</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>

<span class="nv">nextCell</span> <span class="o">::</span> <span class="n">State</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">nextCell</span> <span class="nv">state</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>
    <span class="o">|</span> <span class="nv">numNeighborLives</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">=</span> <span class="nv">targetCell</span>
    <span class="o">|</span> <span class="nv">numNeighborLives</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">=</span> <span class="kr">if</span> <span class="p">(</span><span class="nv">targetCell</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="kr">then</span> <span class="mi">1</span> <span class="kr">else</span> <span class="nv">targetCell</span>
    <span class="o">|</span> <span class="nv">otherwise</span>             <span class="o">=</span> <span class="mi">0</span>
    <span class="kr">where</span>
      <span class="nv">targetCell</span> <span class="o">::</span> <span class="n">Int</span>
      <span class="nv">targetCell</span> <span class="o">=</span> <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>

      <span class="nv">numNeighborLives</span> <span class="o">::</span> <span class="n">Int</span>
      <span class="nv">numNeighborLives</span> <span class="o">=</span> <span class="p">(</span><span class="nv">length</span> <span class="o">.</span> <span class="nv">filter</span> <span class="p">(</span><span class="o">==</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">neighborCells</span>

      <span class="nv">neighborCells</span> <span class="o">::</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
      <span class="nv">neighborCells</span>
          <span class="o">=</span> <span class="p">[</span><span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span>
             <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>  <span class="p">,</span>               <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>  <span class="p">,</span>
             <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

      <span class="nv">cell</span> <span class="o">::</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Int</span>
      <span class="nv">cell</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">=</span> <span class="nv">state</span> <span class="o">!!&gt;</span> <span class="nv">y</span> <span class="o">!!&gt;</span> <span class="nv">x</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/5964/addtag/" class="addtag" id="addtag_5964">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5964/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/5964/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5964"
  >-</span><span
  class="button yellow"
  id="rating_z_5964"
  >0</span><span 
  class="button green"
  id="rating_p_5964"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/5964/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6021">
  <p class="banner"><a href="/web/20080325151021/http://ja.doukaku.org/user/762/" target="_top">mizyo</a><a href="/web/20080325151021/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/6021/">#6021</a>(<script language="JavaScript">print_time(new Date("2008/03/18 15:19 GMT"));</script><noscript>2008/03/18 15:19 GMT</noscript>)
	
	
	
	[<a href="/web/20080325151021/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  ランダムな初期環境を作り、50世代分を表示します。
（ただし、乱数処理が手抜きです）
間引きとかはやっていません。

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="p">(</span><span class="nv">main</span><span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Array</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span> <span class="p">(</span><span class="nv">iterate</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Random</span> <span class="p">(</span><span class="nv">randomRs</span><span class="p">,</span> <span class="nv">newStdGen</span><span class="p">)</span>

<span class="kr">newtype</span> <span class="n">World</span> <span class="o">=</span> <span class="n">World</span> <span class="p">(</span><span class="n">Array</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="n">Bool</span><span class="p">)</span>
<span class="kr">instance</span> <span class="n">Show</span> <span class="n">World</span> <span class="kr">where</span>
    <span class="nv">show</span> <span class="p">(</span><span class="n">World</span> <span class="nv">cells</span><span class="p">)</span> <span class="o">=</span> <span class="nv">concat</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">f</span> <span class="o">$</span> <span class="nv">assocs</span> <span class="nv">cells</span>
        <span class="kr">where</span> <span class="nv">showCell</span> <span class="nv">c</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">c</span> <span class="kr">then</span> <span class="s">&quot;[*]&quot;</span> <span class="kr">else</span> <span class="s">&quot;[ ]&quot;</span>
              <span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="p">(</span><span class="nv">lastx</span><span class="p">,</span> <span class="kr">_</span><span class="p">))</span> <span class="o">=</span> <span class="nv">bounds</span> <span class="nv">cells</span>
              <span class="nv">f</span> <span class="p">((</span><span class="kr">_</span><span class="p">,</span> <span class="nv">x</span><span class="p">),</span> <span class="nv">c</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">lastx</span> <span class="o">=</span> <span class="nv">showCell</span> <span class="nv">c</span> <span class="o">++</span> <span class="s">&quot;\n&quot;</span>
                            <span class="o">|</span> <span class="nv">otherwise</span>  <span class="o">=</span> <span class="nv">showCell</span> <span class="nv">c</span>

<span class="p">(</span><span class="o">!@</span><span class="p">)</span> <span class="o">::</span> <span class="n">World</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
<span class="p">(</span><span class="n">World</span> <span class="nv">cells</span><span class="p">)</span> <span class="o">!@</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span> <span class="o">=</span> <span class="nv">cells</span> <span class="o">!</span> <span class="p">(</span><span class="nv">wrap</span> <span class="nv">x</span><span class="p">,</span> <span class="nv">wrap</span> <span class="nv">y</span><span class="p">)</span>
    <span class="kr">where</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="p">(</span><span class="nv">size</span><span class="p">,</span> <span class="kr">_</span><span class="p">))</span> <span class="o">=</span> <span class="nv">bounds</span> <span class="nv">cells</span>
          <span class="nv">wrap</span> <span class="nv">n</span> <span class="o">|</span> <span class="nv">n</span> <span class="o">&lt;</span> <span class="mi">0</span>     <span class="o">=</span> <span class="nv">size</span>
                 <span class="o">|</span> <span class="nv">n</span> <span class="o">&gt;</span> <span class="nv">size</span>  <span class="o">=</span> <span class="mi">0</span>
                 <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="nv">n</span>

<span class="nv">next</span> <span class="o">::</span> <span class="n">World</span> <span class="o">-&gt;</span> <span class="n">World</span>
<span class="nv">next</span> <span class="nv">w</span><span class="o">@</span><span class="p">(</span><span class="n">World</span> <span class="nv">cells</span><span class="p">)</span> <span class="o">=</span> <span class="nv">rebuild</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">step</span> <span class="o">$</span> <span class="nv">assocs</span> <span class="nv">cells</span>
    <span class="kr">where</span> <span class="nv">rebuild</span> <span class="o">=</span> <span class="n">World</span> <span class="o">.</span> <span class="nv">array</span> <span class="p">(</span><span class="nv">bounds</span> <span class="nv">cells</span><span class="p">)</span>
          <span class="nv">around</span> <span class="p">(</span><span class="nv">px</span><span class="p">,</span> <span class="nv">py</span><span class="p">)</span> <span class="o">=</span> <span class="nv">length</span> <span class="o">$</span> <span class="nv">filter</span> <span class="nv">id</span> <span class="p">[</span><span class="nv">w</span> <span class="o">!@</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">px</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">..</span> <span class="nv">px</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
                                                              <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">py</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">..</span> <span class="nv">py</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span>
                                                              <span class="nv">x</span> <span class="o">/=</span> <span class="nv">px</span> <span class="o">||</span> <span class="nv">y</span> <span class="o">/=</span> <span class="nv">py</span><span class="p">]</span>
          <span class="nv">step</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="n">True</span><span class="p">)</span>  <span class="o">=</span> <span class="kr">let</span> <span class="nv">a</span> <span class="o">=</span> <span class="nv">around</span> <span class="nv">p</span> <span class="kr">in</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="nv">a</span> <span class="o">==</span> <span class="mi">2</span> <span class="o">||</span> <span class="nv">a</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>
          <span class="nv">step</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="n">False</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="nv">around</span> <span class="nv">p</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>

<span class="nv">mkWorld</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">World</span>
<span class="nv">mkWorld</span> <span class="nv">size</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">g1</span> <span class="o">&lt;-</span> <span class="nv">newStdGen</span>
                  <span class="nv">g2</span> <span class="o">&lt;-</span> <span class="nv">newStdGen</span>
                  <span class="nv">return</span> <span class="o">$</span> <span class="nv">w</span> <span class="nv">g1</span> <span class="nv">g2</span>
    <span class="kr">where</span> <span class="nv">ix</span>       <span class="o">=</span> <span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="nv">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
          <span class="nv">init</span>     <span class="o">=</span> <span class="p">[((</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">),</span> <span class="n">False</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span> <span class="o">..</span> <span class="nv">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">],</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span> <span class="o">..</span> <span class="nv">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]]</span>
          <span class="nv">w</span> <span class="nv">g1</span> <span class="nv">g2</span>  <span class="o">=</span> <span class="n">World</span> <span class="o">$</span> <span class="nv">array</span> <span class="nv">ix</span> <span class="nv">init</span> <span class="o">//</span> <span class="nv">ps</span> <span class="nv">g1</span> <span class="nv">g2</span>
          <span class="nv">ps</span> <span class="nv">g1</span> <span class="nv">g2</span> <span class="o">=</span> <span class="nv">take</span> <span class="p">(</span><span class="nv">size</span> <span class="o">*</span> <span class="nv">size</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">3</span><span class="p">)</span> <span class="o">$</span>
                     <span class="nv">flip</span> <span class="nv">zip</span> <span class="p">(</span><span class="nv">repeat</span> <span class="n">True</span><span class="p">)</span> <span class="o">$</span>
                     <span class="nv">zipWith</span> <span class="p">(,)</span> <span class="p">(</span><span class="nv">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">g1</span><span class="p">)</span> <span class="p">(</span><span class="nv">randomRs</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">g2</span><span class="p">)</span>

<span class="nv">generations</span> <span class="o">::</span> <span class="n">World</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">World</span><span class="p">]</span>
<span class="nv">generations</span> <span class="o">=</span> <span class="nv">iterate</span> <span class="nv">next</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">mkWorld</span> <span class="mi">10</span> <span class="o">&gt;&gt;=</span> <span class="nv">mapM_</span> <span class="nv">print</span> <span class="o">.</span> <span class="nv">take</span> <span class="mi">50</span> <span class="o">.</span> <span class="nv">generations</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080325151021/http://ja.doukaku.org/comment/6021/addtag/" class="addtag" id="addtag_6021">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080325151021/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20080325151021/http://ja.doukaku.org/comment/6021/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080325151021/http://ja.doukaku.org/comment/6021/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6021"
  >-</span><span
  class="button yellow"
  id="rating_z_6021"
  >0</span><span 
  class="button green"
  id="rating_p_6021"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080325151021/http://ja.doukaku.org/126/reply_to/6021/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20080325151021if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20080325151021/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20080325151021/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20080325151021/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20080325151021/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20080325151021/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20080325151021/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20080325151021/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20080325151021/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20080325151021/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20080325151021/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20080325151021im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20080325151021/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20080325151021/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20080325151021/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20080325151021/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20080325151021/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20080325151021/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20080325151021/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20080325151021/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20080325151021im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20080325151021/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20080325151021/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20080325151021/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20080325151021js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 15:10:21 Mar 25, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:19:25 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
