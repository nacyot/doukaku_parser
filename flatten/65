
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
格子点の列挙
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100612150759cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100612150759cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100612150759cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20100612150759/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100612150759/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100612150759js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100612150759js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100612150759js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100612150759js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app2.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/65\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "12";
var displayMonth = "Jun";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/65/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100612150759" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100324085458/http://ja.doukaku.org/65/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="24 Mar 2010"><strong>MAR</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 15:07:59 Jun 12, 2010">JUN</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jul
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20100324085458/http://ja.doukaku.org/65/flatten/" title="8:54:58 Mar 24, 2010" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 15:07:59 Jun 12, 2010">12</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202210317/http://ja.doukaku.org/65/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 15:07:59 Jun 12, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100612150759*/http://ja.doukaku.org/65/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>7 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 12 Jun 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000100_2008:-1:010100000001_2009:-1:000000000000_2010:5:001001000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100612150759/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100612150759/http://ja.doukaku.org/65/">格子点の列挙</a>
</h2>

    





<div class="comment" id="comment3421">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/67/" target="_top">かも</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3421/">#3421</a>(<script language="JavaScript">print_time(new Date("2007/10/05 09:31 GMT"));</script><noscript>2007/10/05 09:31 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  二次元平面上の格子点(X,Y座標がともに整数の点)を、原点から近い順に列挙してください。
<p>
同じ距離の点はどういう順番でも構いませんが、可能であればX軸に一番近い第一象限の点から原点を中心として反時計回りの順に列挙してください。
列挙の方法は、1行に一つの点の、X,Y座標を出力することとします。
<p>
サンプル出力
<pre>
0, 0
1, 0
0, 1
-1, 0
0, -1
1, 1
-1, 1
1, -1
-1, -1
2, 0
</pre>
<p>
最低でも1000件まで列挙できることを確認してください。
また「反時計回り」の条件も満たしている場合は、1000番目の頂点が何かも併せて答えてください。
<p>
このお題はかもさんの投稿を元にしています。ご協力ありがとうございました。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3421/addtag/" class="addtag" id="addtag_3421">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3421"
  >-</span><span
  class="button yellow"
  id="rating_z_3421"
  >0</span><span 
  class="button green"
  id="rating_p_3421"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3421/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3421/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3607">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/490/" target="_top">ぴょん</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/">#3607</a>(<script language="JavaScript">print_time(new Date("2007/10/30 19:16 GMT"));</script><noscript>2007/10/30 19:16 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Perl がなかったので。力技。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$PI</span> <span class="o">=</span> <span class="nb">atan2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$MAXR</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">sqrt</span><span class="p">(</span><span class="mi">1000</span> <span class="o">/</span> <span class="nv">$PI</span><span class="p">)</span> <span class="o">+</span> <span class="nb">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">@res</span> <span class="o">=</span> <span class="p">();</span>

<span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">$MAXR</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;=</span> <span class="nv">$MAXR</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">sqrt</span><span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="nv">$i</span> <span class="o">+</span> <span class="nv">$j</span> <span class="o">*</span> <span class="nv">$j</span><span class="p">);</span>
        <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$i</span><span class="p">)]);</span>
        <span class="p">(</span><span class="nv">$i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="o">-</span><span class="nv">$i</span><span class="p">)]);</span>
        <span class="p">(</span><span class="nv">$j</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="nv">$i</span><span class="p">,</span> <span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$PI</span><span class="p">]);</span>
        <span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="nv">$j</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="nv">$i</span><span class="p">,</span> <span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="o">-</span><span class="nv">$i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$PI</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$p</span> <span class="p">(</span><span class="nb">sort</span> <span class="p">{(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">3</span><span class="p">])}</span> <span class="nv">@res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">printf</span><span class="p">(</span><span class="s">&quot;%3d, %3d\n&quot;</span><span class="p">,</span> <span class="nb">splice</span><span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$p</span><span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/addtag/" class="addtag" id="addtag_3607">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3607"
  >-</span><span
  class="button yellow"
  id="rating_z_3607"
  >0</span><span 
  class="button green"
  id="rating_p_3607"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3421/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3607/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  



<div class="indent">
<a href="/web/20100612150759/http://ja.doukaku.org/65/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20100612150759/http://ja.doukaku.org/65/nested/">ネスト表示</a>
<a href="/web/20100612150759/http://ja.doukaku.org/65/">非表示</a> 


  
  




<div class="comment" id="comment3254">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/105/" target="_top">rubikitch</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3254/">#3254</a>(<script language="JavaScript">print_time(new Date("2007/10/05 10:13 GMT"));</script><noscript>2007/10/05 10:13 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ff9f9f;">-6/6=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>1000番目は[1250,-1250]かな？

[[0, 0], [1, 0], [0, 1], [-1, 0], [0, -1], [1, 1], [-1, 1], [-1, -1], ...]
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">lattice</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
  <span class="n">ary</span> <span class="o">=</span> <span class="o">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]]</span>
  <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">limit</span>
    <span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[-</span><span class="n">n</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="n">n</span><span class="o">]</span>
    <span class="n">ary</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[-</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[-</span><span class="n">n</span><span class="p">,</span><span class="o">-</span><span class="n">n</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">n</span><span class="p">,</span><span class="o">-</span><span class="n">n</span><span class="o">]</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">8</span>
    <span class="n">n</span><span class="o">+=</span><span class="mi">1</span>
  <span class="k">end</span>
  <span class="n">ary</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3254/addtag/" class="addtag" id="addtag_3254">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3254/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3254/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ff9f9f;"
  >-6/6=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3254"
  >-</span><span
  class="button yellow"
  id="rating_z_3254"
  >0</span><span 
  class="button green"
  id="rating_p_3254"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3254/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3254/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3255">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3255/">#3255</a>(<script language="JavaScript">print_time(new Date("2007/10/05 10:28 GMT"));</script><noscript>2007/10/05 10:28 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ええと。
[1, 2]が[2, 2]より近い格子点だと言うことを忘れていませんか？</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3255/addtag/" class="addtag" id="addtag_3255">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3255"
  >-</span><span
  class="button yellow"
  id="rating_z_3255"
  >0</span><span 
  class="button green"
  id="rating_p_3255"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3254/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3255/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3255/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3256">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3256/">#3256</a>(<script language="JavaScript">print_time(new Date("2007/10/05 10:52 GMT"));</script><noscript>2007/10/05 10:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>1000番目は(-8, 16)？Tkinterで視覚的に表示
するコードもつけました。debug()という関数を
実行してください。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">itertools</span>

<span class="k">def</span> <span class="nf">distance2</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">a</span>
    <span class="k">return</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span>

<span class="k">def</span> <span class="nf">rotate_90</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span>

<span class="k">def</span> <span class="nf">grid_points</span><span class="p">():</span>
    <span class="k">yield</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">grid_points_in_first_quadrant</span><span class="p">():</span>
        <span class="n">table</span> <span class="o">=</span> <span class="p">[]</span> <span class="c"># index: y, value: x ( y &gt;= 0 and x &gt;= 1 )</span>
        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">def</span> <span class="nf">candidates</span><span class="p">():</span>
                <span class="k">for</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">table</span><span class="p">):</span>
                    <span class="k">yield</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span>
                <span class="k">yield</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
            <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">candidates</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">distance2</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
            <span class="k">if</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">table</span><span class="p">):</span>
                <span class="n">table</span><span class="p">[</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">assert</span> <span class="n">y</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">table</span><span class="p">)</span>
                <span class="n">table</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">it</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">grid_points_in_first_quadrant</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="n">distance2</span><span class="p">):</span>
        <span class="n">points</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">it</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">points</span><span class="p">:</span>
                <span class="k">yield</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">points</span><span class="p">)):</span>
                <span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">rotate_90</span><span class="p">(</span><span class="o">*</span><span class="n">points</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">debug</span><span class="p">():</span> <span class="c"># show points visually</span>
    <span class="k">import</span> <span class="nn">Tkinter</span> <span class="k">as</span> <span class="nn">Tk</span>
    <span class="k">import</span> <span class="nn">math</span>

    <span class="n">root</span> <span class="o">=</span> <span class="n">Tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
    <span class="n">canvas</span> <span class="o">=</span> <span class="n">Tk</span><span class="o">.</span><span class="n">Canvas</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">400</span><span class="p">)</span>
    <span class="n">canvas</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="n">Tk</span><span class="o">.</span><span class="n">BOTH</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">draw_point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="n">y</span>
        <span class="n">n</span> <span class="o">=</span> <span class="mi">10</span>
        <span class="n">m</span> <span class="o">=</span> <span class="mi">5</span>
        <span class="n">offset</span> <span class="o">=</span> <span class="mi">200</span>
        <span class="n">canvas</span><span class="o">.</span><span class="n">create_oval</span><span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">n</span> <span class="o">-</span> <span class="n">m</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="n">x</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="n">m</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">n</span> <span class="o">+</span> <span class="n">m</span> <span class="o">+</span> <span class="n">offset</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="s">&quot;red&quot;</span><span class="p">)</span>

    <span class="n">it</span> <span class="o">=</span> <span class="n">grid_points</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">command</span><span class="p">():</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">it</span><span class="o">.</span><span class="n">next</span><span class="p">()</span>
        <span class="n">draw_point</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">print</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">math</span><span class="o">.</span><span class="n">hypot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>

    <span class="n">button</span> <span class="o">=</span> <span class="n">Tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s">&quot;Next&quot;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">command</span><span class="p">)</span>
    <span class="n">button</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="n">fill</span><span class="o">=</span><span class="n">Tk</span><span class="o">.</span><span class="n">X</span><span class="p">)</span>

    <span class="n">root</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">islice</span><span class="p">(</span><span class="n">grid_points</span><span class="p">(),</span> <span class="mi">1000</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="c">#   debug()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3256/addtag/" class="addtag" id="addtag_3256">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3256/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3256/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3256"
  >-</span><span
  class="button yellow"
  id="rating_z_3256"
  >0</span><span 
  class="button green"
  id="rating_p_3256"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3256/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3257">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/124/" target="_top">tsekine</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3257/">#3257</a>(<script language="JavaScript">print_time(new Date("2007/10/05 12:16 GMT"));</script><noscript>2007/10/05 12:16 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/bash/">
	  Bash
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  1000番目は (-8, 16) だと思います。

配列 x, y のダミーはかなり変ですが、もう直す気がしないのでそのままにしておきます。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/bin/bash</span>

<span class="nb">set</span> -ue

<span class="nv">FMT</span><span class="o">=</span><span class="s2">&quot;%d, %d\n&quot;</span>

print_lattice <span class="o">()</span> <span class="o">{</span>
  <span class="c"># distance^2</span>
  <span class="nb">local</span> -i d
  <span class="c"># cache of square of integers</span>
  <span class="nb">local</span> -ia <span class="nv">scache</span><span class="o">=(</span>0<span class="o">)</span>
  <span class="c"># #scache</span>
  <span class="nb">local</span> -i <span class="nv">n_scache</span><span class="o">=</span><span class="s2">&quot;${#scache[@]}&quot;</span>

  <span class="nb">local</span> -i i j
  <span class="nb">local</span> -ia x
  <span class="nb">local</span> -ia y

  <span class="k">for</span> <span class="o">((</span><span class="nv">d</span> <span class="o">=</span> 0;; d++<span class="o">))</span>; <span class="k">do</span>
    <span class="c"># set dummy data(due to &quot;set -u&quot;)</span>
    <span class="nv">x</span><span class="o">=(</span>-1<span class="o">)</span>
    <span class="nv">y</span><span class="o">=(</span>-1<span class="o">)</span>

    <span class="k">if</span> <span class="o">[</span> <span class="nv">$d</span> -gt <span class="k">${</span><span class="nv">scache</span><span class="p">[n_scache-1]</span><span class="k">}</span> <span class="o">]</span>; <span class="k">then</span>
<span class="k">      </span>scache<span class="o">[</span>n_scache++<span class="o">]=</span><span class="k">$(</span><span class="o">(</span> n_scache * n_scache <span class="k">)</span><span class="o">)</span>
    <span class="k">fi</span>

<span class="k">    for</span> <span class="o">((</span><span class="nv">i</span> <span class="o">=</span> n_scache-1; i &gt;<span class="o">=</span> 0; i--<span class="o">))</span>; <span class="k">do</span>
<span class="k">      for</span> <span class="o">((</span><span class="nv">j</span> <span class="o">=</span> 0; j &lt; n_scache; j++<span class="o">))</span>; <span class="k">do</span>
<span class="k">        if </span><span class="nb">let</span> <span class="s2">&quot;scache[i]+scache[j]-d&quot;</span>; <span class="k">then</span>
<span class="k">          continue</span>
<span class="k">        fi</span>

<span class="k">        </span><span class="nv">x</span><span class="o">=(</span><span class="s2">&quot;${x[@]}&quot;</span> <span class="nv">$i</span><span class="o">)</span>
        <span class="nv">y</span><span class="o">=(</span><span class="s2">&quot;${y[@]}&quot;</span> <span class="nv">$j</span><span class="o">)</span>
      <span class="k">done</span>
<span class="k">    done</span>

<span class="k">    if</span> <span class="o">[</span> <span class="k">${#</span><span class="nv">x</span><span class="p">[@]</span><span class="k">}</span> -gt <span class="m">1</span> <span class="o">]</span>; <span class="k">then</span>
      <span class="c"># origin</span>
      <span class="k">if</span> ! <span class="nb">let</span> <span class="s2">&quot;x[1] + y[1]&quot;</span>; <span class="k">then</span>
<span class="k">        </span><span class="nb">printf</span> <span class="s2">&quot;$FMT&quot;</span> <span class="m">0</span> 0
      <span class="k">fi</span>
      <span class="c"># quadrant 1</span>
      <span class="k">for</span> <span class="o">((</span><span class="nv">i</span> <span class="o">=</span> 1; i &lt; <span class="k">${#</span><span class="nv">x</span><span class="p">[@]</span><span class="k">}</span>; i++<span class="o">))</span>; <span class="k">do</span>
<span class="k">        if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">x</span><span class="p">[i]</span><span class="k">}</span> -ne <span class="m">0</span> <span class="o">]</span>; <span class="k">then</span>
<span class="k">          </span><span class="nb">printf</span> <span class="s2">&quot;$FMT&quot;</span> <span class="k">${</span><span class="nv">x</span><span class="p">[i]</span><span class="k">}</span> <span class="k">${</span><span class="nv">y</span><span class="p">[i]</span><span class="k">}</span>
        <span class="k">fi</span>
<span class="k">      done</span>
      <span class="c"># quadrant 2</span>
      <span class="k">for</span> <span class="o">((</span><span class="nv">i</span> <span class="o">=</span> <span class="k">${#</span><span class="nv">x</span><span class="p">[@]</span><span class="k">}</span> -1 ; i &gt; 0; i--<span class="o">))</span>; <span class="k">do</span>
<span class="k">        if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">y</span><span class="p">[i]</span><span class="k">}</span> -ne <span class="m">0</span> <span class="o">]</span>; <span class="k">then</span>
<span class="k">          </span><span class="nb">printf</span> <span class="s2">&quot;$FMT&quot;</span> -<span class="k">${</span><span class="nv">x</span><span class="p">[i]</span><span class="k">}</span> <span class="k">${</span><span class="nv">y</span><span class="p">[i]</span><span class="k">}</span>
        <span class="k">fi</span>
<span class="k">      done</span>
      <span class="c"># quadrant 3</span>
      <span class="k">for</span> <span class="o">((</span><span class="nv">i</span> <span class="o">=</span> 1; i &lt; <span class="k">${#</span><span class="nv">x</span><span class="p">[@]</span><span class="k">}</span>; i++<span class="o">))</span>; <span class="k">do</span>
<span class="k">        if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">x</span><span class="p">[i]</span><span class="k">}</span> -ne <span class="m">0</span> <span class="o">]</span>; <span class="k">then</span>
<span class="k">          </span><span class="nb">printf</span> <span class="s2">&quot;$FMT&quot;</span> -<span class="k">${</span><span class="nv">x</span><span class="p">[i]</span><span class="k">}</span> -<span class="k">${</span><span class="nv">y</span><span class="p">[i]</span><span class="k">}</span>
        <span class="k">fi</span>
<span class="k">      done</span>
      <span class="c"># quadrant 4</span>
      <span class="k">for</span> <span class="o">((</span><span class="nv">i</span> <span class="o">=</span> <span class="k">${#</span><span class="nv">x</span><span class="p">[@]</span><span class="k">}</span> -1 ; i &gt; 0; i--<span class="o">))</span>; <span class="k">do</span>
<span class="k">        if</span> <span class="o">[</span> <span class="k">${</span><span class="nv">y</span><span class="p">[i]</span><span class="k">}</span> -ne <span class="m">0</span> <span class="o">]</span>; <span class="k">then</span>
<span class="k">          </span><span class="nb">printf</span> <span class="s2">&quot;$FMT&quot;</span> <span class="k">${</span><span class="nv">x</span><span class="p">[i]</span><span class="k">}</span> -<span class="k">${</span><span class="nv">y</span><span class="p">[i]</span><span class="k">}</span>
        <span class="k">fi</span>
<span class="k">      done</span>
<span class="k">    fi</span>
<span class="k">  done</span>
<span class="o">}</span>

print_lattice
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3257/addtag/" class="addtag" id="addtag_3257">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/bash/">
		Bash
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3257/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3257/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3257"
  >-</span><span
  class="button yellow"
  id="rating_z_3257"
  >0</span><span 
  class="button green"
  id="rating_p_3257"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3257/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3258">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3258/">#3258</a>(<script language="JavaScript">print_time(new Date("2007/10/05 12:34 GMT"));</script><noscript>2007/10/05 12:34 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>無駄が多いですが、普通に解いてみました。
ところで、反時計回りだとサンプルの出力は以下のようになるべきでは?  

0, 0
1, 0
0, 1
-1, 0
0, -1
1, 1
-1, 1
-1, -1
1, -1
2, 0
※(1, -1)と(-1, -1)が逆のはず。

ちなみに1,000番目は -8, 16 です。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">math</span><span class="o">.</span><span class="nv">const</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-point-list</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">a</span> <span class="p">(</span><span class="nf">ceiling-&gt;exact</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">sqrt </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">n</span><span class="p">))</span> <span class="mi">2</span><span class="p">))))</span>
    <span class="p">(</span><span class="nf">list-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">a</span> <span class="mi">1</span><span class="p">))</span>
             <span class="p">(</span><span class="nb">make-rectangular </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sort-point-list</span> <span class="nv">lst</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">%angle</span> <span class="nv">z</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">let1</span> <span class="nv">t</span> <span class="p">(</span><span class="nb">angle </span><span class="nv">z</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">t</span> <span class="mi">0</span><span class="p">)</span>
          <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">pi</span><span class="p">)</span> <span class="nv">t</span><span class="p">)</span>
          <span class="nv">t</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">sort</span> <span class="nv">lst</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">z1</span> <span class="nv">z2</span><span class="p">)</span>
              <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">r1</span> <span class="p">(</span><span class="nb">magnitude </span><span class="nv">z1</span><span class="p">))</span>
                    <span class="p">(</span><span class="nf">r2</span> <span class="p">(</span><span class="nb">magnitude </span><span class="nv">z2</span><span class="p">)))</span>
                <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">r1</span> <span class="nv">r2</span><span class="p">)</span>
                    <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">%angle</span> <span class="nv">z1</span><span class="p">)</span> <span class="p">(</span><span class="nf">%angle</span> <span class="nv">z2</span><span class="p">))</span>
                    <span class="p">(</span><span class="nb">&lt; </span><span class="nv">r1</span> <span class="nv">r2</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">lattice-point-list</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">z</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">format</span> <span class="no">#t</span> <span class="s">&quot;~d, ~d~%&quot;</span>
                      <span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">real-part </span><span class="nv">z</span><span class="p">))</span>
                      <span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">imag-part </span><span class="nv">z</span><span class="p">))))</span>
            <span class="p">(</span><span class="nf">take</span> <span class="p">(</span><span class="nf">sort-point-list</span> <span class="p">(</span><span class="nf">make-point-list</span> <span class="nv">n</span><span class="p">))</span> <span class="nv">n</span><span class="p">)))</span>

<span class="c1">;; (lattice-point-list 1000)を実行すると答えが出ます</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3258/addtag/" class="addtag" id="addtag_3258">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3258/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3258/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3258"
  >-</span><span
  class="button yellow"
  id="rating_z_3258"
  >0</span><span 
  class="button green"
  id="rating_p_3258"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3258/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3260">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/">#3260</a>(<script language="JavaScript">print_time(new Date("2007/10/05 14:08 GMT"));</script><noscript>2007/10/05 14:08 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>xとyのループ範囲の計算方法を#3258から拝借しました(n2の値)。
ただし、なぜこうなるのかは理解できていません。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">math</span> <span class="k">import</span> <span class="n">sqrt</span>

<span class="k">def</span> <span class="nf">f0</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="k">else</span> <span class="p">(</span><span class="mi">2</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">3</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">else</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">else</span> <span class="nb">cmp</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">else</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">n2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">f0</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">n2</span><span class="p">,</span> <span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">n2</span><span class="p">,</span> <span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">sorted</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">cmp</span><span class="o">=</span><span class="n">f</span><span class="p">)[:</span><span class="n">n</span><span class="p">]:</span>
  <span class="k">print</span> <span class="n">t</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">t</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/addtag/" class="addtag" id="addtag_3260">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3260"
  >-</span><span
  class="button yellow"
  id="rating_z_3260"
  >0</span><span 
  class="button green"
  id="rating_p_3260"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/">
    2
    replies
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3260/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3261">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3261/">#3261</a>(<script language="JavaScript">print_time(new Date("2007/10/05 14:20 GMT"));</script><noscript>2007/10/05 14:20 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  簡単に説明すると、xとyが[-sqrt(n)/2,&nbsp;sqrt(n)/2]の範囲の正方形を考えた場合、その中の格子点の数はn個以上あります。<br/><br/>なので、この正方形の外接円内に含まれる格子点の数もn個以上あるはずです。よってこの円内に含まれる格子点を列挙して、ソートして最初のn個を表示すれば問題は解けます。<br/><br/>ただ、円内に含まれる格子点の列挙は面倒なので、この円に外接する正方形を考え、そこに含まれる格子点を列挙することで問題を解いています(ただし無駄が多くなる)。その正方形は&nbsp;x,&nbsp;yが[-sqrt(2n)/2,&nbsp;sqrt(2n)/2]となるので、#3258のような計算式となります。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3261/addtag/" class="addtag" id="addtag_3261">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3261"
  >-</span><span
  class="button yellow"
  id="rating_z_3261"
  >0</span><span 
  class="button green"
  id="rating_p_3261"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3261/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3261/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3261/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3262">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3262/">#3262</a>(<script language="JavaScript">print_time(new Date("2007/10/05 14:26 GMT"));</script><noscript>2007/10/05 14:26 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>効率はよくないけど、ナイーブな実装
1000番目(1-origin) は(-8,16)
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre><span class="nv">grids</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Integer</span><span class="p">,</span><span class="n">Integer</span><span class="p">)]</span>
<span class="nv">grids</span> <span class="o">=</span> <span class="nv">concat</span> <span class="p">[</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">z</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">],</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">z</span><span class="p">],</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">y</span><span class="o">..</span><span class="nv">z</span><span class="p">],</span> <span class="nv">x</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span><span class="nv">y</span><span class="o">^</span><span class="mi">2</span><span class="o">==</span><span class="nv">z</span> <span class="p">]</span>
  <span class="kr">where</span>
    <span class="nv">f</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">y</span>    <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
            <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>

<span class="cm">{-</span>
<span class="cm">*Main&gt; mapM_ print $ take 1000 $ grids</span>
<span class="cm">(0,0)</span>
<span class="cm">(1,0)</span>
<span class="cm">(0,1)</span>
<span class="cm">(-1,0)</span>
<span class="cm">(0,-1)</span>
<span class="cm">(1,1)</span>
<span class="cm">(-1,1)</span>
<span class="cm">(-1,-1)</span>
<span class="cm">(1,-1)</span>
<span class="cm">(2,0)</span>
<span class="cm">... 中略 ...</span>
<span class="cm">(16,8)</span>
<span class="cm">(8,16)</span>
<span class="cm">(-8,16)               -- 1000番目(1-origin)</span>
<span class="cm">*Main&gt;</span>
<span class="cm">-}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3262/addtag/" class="addtag" id="addtag_3262">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3262/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3262/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3262"
  >-</span><span
  class="button yellow"
  id="rating_z_3262"
  >0</span><span 
  class="button green"
  id="rating_p_3262"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3262/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3262/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3263">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3263/">#3263</a>(<script language="JavaScript">print_time(new Date("2007/10/05 14:34 GMT"));</script><noscript>2007/10/05 14:34 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。<br/><br/>1.&nbsp;円形のブラシを描く機能（#dotOfSize:）があるので、これで描いた円形のドット数を数え（primCountBits）て、同心円内に列挙すべき格子点をすべて含む最少の矩形格子を探し、その&nbsp;x&nbsp;（もしくは&nbsp;y）の最大値（max）を求めます。<br/><br/>2.&nbsp;-max&nbsp;から&nbsp;max&nbsp;まで整数で、重複を許す二項の順列組み合わせを生成（asDigitsToPower:&nbsp;2&nbsp;do:&nbsp;[...]）し、それぞれの項目を&nbsp;x、y&nbsp;に持つ、ポイントオブジェクト（x@y）としてコレクション（points）に収めます。<br/><br/>3.&nbsp;pointsを、各要素の原点からの距離（r）、距離が同じなら&nbsp;x&nbsp;軸となす角度（theta）の小さい順に並べ変えます。<br/><br/>4.&nbsp;前から&nbsp;n&nbsp;個をとり（first:&nbsp;n）、各ポイントの&nbsp;x、y&nbsp;を出力。終了後、ファイルを開いて表示（edit）し、最後の出力を結果として返して（^last）います。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre>| n count max out points last |
n := 1000.
count := [:m | (Form dotOfSize: (m + 1 * 2)) primCountBits - (m + 1 * 4) + 1].
max := (1 to: Float infinity) detect: [:r | (count value: r) &gt;= n].
out := FileStream forceNewFileNamed: &#39;doukaku65.out.txt&#39;.
points := OrderedCollection new: max * max.
(max negated to: max) asDigitsToPower: 2 do: [:xy | points add: xy first @ xy second].
points := points asArray sort: [:a :b | a r &lt; b r or: [a r = b r and: [a theta &lt; b theta]]].
points := points first: n. 
points do: [:pt | out nextPutAll: (last := &#39;{1}, {2}&#39; format: {pt x. pt y}); cr].
out edit.
^last   &quot;=&gt; &#39;-8, 16&#39; &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3263/addtag/" class="addtag" id="addtag_3263">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3263/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3263/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3263"
  >-</span><span
  class="button yellow"
  id="rating_z_3263"
  >0</span><span 
  class="button green"
  id="rating_p_3263"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3263/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3264">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/">#3264</a>(<script language="JavaScript">print_time(new Date("2007/10/05 15:54 GMT"));</script><noscript>2007/10/05 15:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>格子点のリストを適当に生成しておいて、
原点からの距離でソートすることで近い順に並べてます。
反時計回りにはなってません。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="highlight"><pre>(defun distance (point)
  (let ((x (first point)) (y (second point)))
    (+ (* x x) (* y y))))

(defun list-lattice-points (n)
    (loop with a = (ceiling (sqrt (/ n 2)))
      for i from (- a) to a
      nconc (loop for j from (- a) to a collect (list i j)) into points
      finally (format t &quot;~V{~{~D, ~D~}~%~}&quot;
                      n (sort points #&#39;&lt;= :key #&#39;distance))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/addtag/" class="addtag" id="addtag_3264">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3264"
  >-</span><span
  class="button yellow"
  id="rating_z_3264"
  >0</span><span 
  class="button green"
  id="rating_p_3264"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/">
    2
    replies
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3264/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3265">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/">#3265</a>(<script language="JavaScript">print_time(new Date("2007/10/05 15:55 GMT"));</script><noscript>2007/10/05 15:55 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>前出のコードでは

[ (x,y) | z &lt;- [0..], y &lt;- [0..z], x &lt;- [y..z], x^2 + y^2 == z ]

で仰角０°から４５°の間で原点から近いほうから，かつ，仰角の小さい方か
ら格子点がならびます．上のコードでは y の上限 z になっていますが，これ
は√(z/2)を超えない自然数であればよいはずで，手抜きした分，余分な値を
チェックすることになってしまっています．

この部分を改良して，さらに monadic スタイルで書いたコードにしてみました．
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span>
<span class="nv">grids</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Integer</span><span class="p">,</span><span class="n">Integer</span><span class="p">)]</span>
<span class="nv">grids</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">z</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>
           <span class="p">;</span> <span class="kr">let</span> <span class="nv">z&#39;</span> <span class="o">=</span> <span class="nv">floor</span> <span class="p">(</span><span class="nv">sqrt</span> <span class="p">(</span><span class="nv">fromInteger</span> <span class="nv">z</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
           <span class="p">;</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">z&#39;</span><span class="p">]</span>
           <span class="p">;</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">y</span><span class="o">..</span><span class="nv">z</span><span class="p">]</span>
           <span class="p">;</span> <span class="nv">guard</span> <span class="p">(</span><span class="nv">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">==</span> <span class="nv">z</span><span class="p">)</span>
           <span class="p">;</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>
           <span class="p">}</span>
  <span class="kr">where</span>
    <span class="nv">f</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">y</span>    <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
            <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/addtag/" class="addtag" id="addtag_3265">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/Control.Monad/">Control.Monad</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3265"
  >-</span><span
  class="button yellow"
  id="rating_z_3265"
  >0</span><span 
  class="button green"
  id="rating_p_3265"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3262/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3265/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3266">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3266/">#3266</a>(<script language="JavaScript">print_time(new Date("2007/10/05 15:58 GMT"));</script><noscript>2007/10/05 15:58 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>距離の二乗を返してるから distance って関数名はちょっと嘘ですね。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3266/addtag/" class="addtag" id="addtag_3266">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3266"
  >-</span><span
  class="button yellow"
  id="rating_z_3266"
  >0</span><span 
  class="button green"
  id="rating_p_3266"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3266/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3266/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3266/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3267">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3267/">#3267</a>(<script language="JavaScript">print_time(new Date("2007/10/05 16:11 GMT"));</script><noscript>2007/10/05 16:11 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>詳細な説明ありがとうございます。

私も先の投稿後、自分なりに考えてみました。

最初は1000個のペアがあればいいのだから、
　n = 1000
　n2 = sqrt(n) / 2
でいいかと考えましたが、この場合の最大値であるsqrt(2 * n2 ** 2)より小さくなる
(x, 0)あるいは(0, y)の組み合わせが存在するので
　n2 = sqrt(2 * (sqrt(n) / 2) ** 2)
とすべきで、変形すれば
　n2 = sqrt(n / 2)
となって、同じ結論になりました。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3267/addtag/" class="addtag" id="addtag_3267">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3267"
  >-</span><span
  class="button yellow"
  id="rating_z_3267"
  >0</span><span 
  class="button green"
  id="rating_p_3267"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3261/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3267/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3267/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3268">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/">#3268</a>(<script language="JavaScript">print_time(new Date("2007/10/05 16:14 GMT"));</script><noscript>2007/10/05 16:14 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>x の上限も√z でいいはずだ。
さらに効率アップ(って、最初からこう書くべきだった)
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span>
<span class="nv">grids</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Integer</span><span class="p">,</span><span class="n">Integer</span><span class="p">)]</span>
<span class="nv">grids</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">z</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>
           <span class="p">;</span> <span class="kr">let</span> <span class="nv">z&#39;</span>  <span class="o">=</span> <span class="nv">floor</span> <span class="p">(</span><span class="nv">sqrt</span> <span class="p">(</span><span class="nv">fromInteger</span> <span class="nv">z</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>
           <span class="p">;</span> <span class="kr">let</span> <span class="nv">z&#39;&#39;</span> <span class="o">=</span> <span class="nv">floor</span> <span class="p">(</span><span class="nv">sqrt</span> <span class="p">(</span><span class="nv">fromInteger</span> <span class="nv">z</span><span class="p">))</span> 
           <span class="p">;</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">z&#39;</span><span class="p">]</span>
           <span class="p">;</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">y</span><span class="o">..</span><span class="nv">z&#39;&#39;</span><span class="p">]</span>
           <span class="p">;</span> <span class="nv">guard</span> <span class="p">(</span><span class="nv">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">==</span> <span class="nv">z</span><span class="p">)</span>
           <span class="p">;</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>
           <span class="p">}</span>
  <span class="kr">where</span>
    <span class="nv">f</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">y</span>    <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
            <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/addtag/" class="addtag" id="addtag_3268">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3268"
  >-</span><span
  class="button yellow"
  id="rating_z_3268"
  >0</span><span 
  class="button green"
  id="rating_p_3268"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3265/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3268/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3269">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3269/">#3269</a>(<script language="JavaScript">print_time(new Date("2007/10/05 16:38 GMT"));</script><noscript>2007/10/05 16:38 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ユークリッド距離でなくても、距離の公理を満たせば distance と呼んでもいいんじゃないかしらん。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3269/addtag/" class="addtag" id="addtag_3269">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3269"
  >-</span><span
  class="button yellow"
  id="rating_z_3269"
  >0</span><span 
  class="button green"
  id="rating_p_3269"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3266/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3269/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3269/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3269/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3271">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/415/" target="_top">yohei</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3271/">#3271</a>(<script language="JavaScript">print_time(new Date("2007/10/05 16:43 GMT"));</script><noscript>2007/10/05 16:43 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>円周をたどって。1000個目は -8, 16。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">lattice</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;</span> <span class="n">v</span><span class="p">;</span>
	<span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;&gt;::</span><span class="n">iterator</span> <span class="n">ite</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">x_start</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	
	<span class="k">if</span> <span class="p">(</span><span class="n">num</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;0, 0&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

	<span class="k">while</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">r</span> <span class="o">==</span> <span class="n">x_start</span> <span class="o">*</span> <span class="n">x_start</span><span class="p">)</span> <span class="o">++</span><span class="n">x_start</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x_start</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
		<span class="kt">int</span> <span class="n">next_r</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span><span class="p">;</span>
		<span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
			<span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span><span class="p">;</span>
			<span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">)</span> <span class="p">{</span>
				<span class="o">++</span><span class="n">x</span><span class="p">;</span> <span class="o">++</span><span class="n">y</span><span class="p">;</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&lt;</span> <span class="n">next_r</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">v</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
					<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
					<span class="n">next_r</span> <span class="o">=</span> <span class="n">d</span><span class="p">;</span>
				<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">==</span> <span class="n">next_r</span><span class="p">)</span> <span class="p">{</span>
					<span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">));</span>
				<span class="p">}</span>
				<span class="o">--</span><span class="n">x</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
		
		<span class="k">for</span> <span class="p">(</span><span class="n">ite</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">ite</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">ite</span><span class="p">,</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ite</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ite</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="n">ite</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">ite</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">ite</span><span class="p">,</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="n">ite</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ite</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="n">ite</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">ite</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">ite</span><span class="p">,</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="n">ite</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="n">ite</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="n">ite</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">ite</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="o">++</span><span class="n">ite</span><span class="p">,</span> <span class="o">++</span><span class="n">n</span><span class="p">)</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ite</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;, &quot;</span> <span class="o">&lt;&lt;</span> <span class="o">-</span><span class="n">ite</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

		<span class="n">v</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
		<span class="n">r</span> <span class="o">=</span> <span class="n">next_r</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">lattice</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3271/addtag/" class="addtag" id="addtag_3271">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3271/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3271/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3271"
  >-</span><span
  class="button yellow"
  id="rating_z_3271"
  >0</span><span 
  class="button green"
  id="rating_p_3271"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3271/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3272">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/424/" target="_top">satooM</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3272/">#3272</a>(<script language="JavaScript">print_time(new Date("2007/10/05 16:57 GMT"));</script><noscript>2007/10/05 16:57 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>0&lt;=x&lt;=yの格子点をn^2&lt;x^2+y^2&lt;=(n+1)^2の有限領域に切って、
そこをソートしていきます。
span2は有限領域を切り出すために定義しました。
(いい名前が思いつかなかった)

いささか汚いのが不満ですが、投稿してしまいます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span> <span class="p">(</span><span class="nv">nub</span><span class="p">,</span> <span class="nv">groupBy</span><span class="p">,</span> <span class="nv">sortBy</span><span class="p">)</span>

<span class="nv">span2</span> <span class="o">::</span> <span class="p">(</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">([</span><span class="nv">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">Bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="nv">a</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="p">([[</span><span class="nv">a</span><span class="p">]],[[</span><span class="nv">a</span><span class="p">]])</span>
<span class="nv">span2</span> <span class="nv">p1</span> <span class="nv">p2</span> <span class="nv">zss</span> <span class="o">=</span> <span class="p">(</span><span class="nv">xss</span><span class="p">,</span> <span class="nv">yss&#39;</span><span class="o">++</span><span class="nv">zss&#39;</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="p">(</span><span class="nv">yss</span><span class="p">,</span><span class="nv">zss&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">span</span> <span class="nv">p2</span> <span class="nv">zss</span>
    <span class="p">(</span><span class="nv">xss</span><span class="p">,</span><span class="nv">yss&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">unzip</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">span</span> <span class="nv">p1</span><span class="p">)</span> <span class="nv">yss</span>

<span class="nv">ans</span> <span class="o">=</span> <span class="nv">iter</span> <span class="mi">0</span> <span class="nv">triangle</span>
  <span class="kr">where</span>
    <span class="nv">triangle</span> <span class="o">=</span> <span class="p">[[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="o">*</span><span class="nv">x</span><span class="o">+</span><span class="nv">y</span><span class="o">*</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">y</span><span class="o">..</span><span class="p">]]</span> <span class="o">|</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]]</span>

    <span class="nv">iter</span> <span class="nv">n</span> <span class="nv">zss</span> <span class="o">=</span> <span class="nv">xs</span> <span class="o">++</span> <span class="nv">iter</span> <span class="p">(</span><span class="nv">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">zss&#39;</span>
      <span class="kr">where</span>
        <span class="p">(</span><span class="nv">yss</span><span class="p">,</span><span class="nv">zss&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">span2</span> <span class="nv">p1</span> <span class="nv">p2</span> <span class="nv">zss</span>
        <span class="nv">p1</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="kr">_</span><span class="p">,</span><span class="nv">d</span><span class="p">)</span>       <span class="o">=</span> <span class="nv">d</span> <span class="o">&lt;=</span> <span class="nv">n</span><span class="o">*</span><span class="nv">n</span>
        <span class="nv">p2</span> <span class="p">((</span><span class="kr">_</span><span class="p">,</span><span class="nv">y</span><span class="p">,</span><span class="kr">_</span><span class="p">)</span><span class="o">:</span><span class="nv">xss</span><span class="p">)</span> <span class="o">=</span> <span class="nv">y</span> <span class="o">&lt;=</span> <span class="nv">ceiling</span> <span class="p">(</span><span class="nv">fromInteger</span> <span class="nv">n</span> <span class="o">/</span> <span class="nv">sqrt</span> <span class="mi">2</span><span class="p">)</span>
        <span class="nv">xs</span> <span class="o">=</span> <span class="nv">concat</span>
           <span class="o">$</span> <span class="nv">map</span> <span class="nv">mirror</span>
           <span class="o">$</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="kr">_</span><span class="p">,</span><span class="nv">d1</span><span class="p">)</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="kr">_</span><span class="p">,</span><span class="nv">d2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">d1</span> <span class="o">==</span> <span class="nv">d2</span><span class="p">)</span>
           <span class="o">$</span> <span class="nv">sortBy</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="kr">_</span><span class="p">,</span><span class="nv">d1</span><span class="p">)</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="kr">_</span><span class="p">,</span><span class="nv">d2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">compare</span> <span class="nv">d1</span> <span class="nv">d2</span><span class="p">)</span>
           <span class="o">$</span> <span class="nv">concat</span> <span class="nv">yss</span>
        <span class="c1">-- sortByが安定であることを仮定</span>

    <span class="nv">mirror</span> <span class="o">=</span> <span class="nv">nub</span>
           <span class="o">.</span> <span class="nv">starling</span> <span class="p">(</span><span class="o">++</span><span class="p">)</span> <span class="p">(</span><span class="nv">reverse</span><span class="o">.</span><span class="nv">r3</span><span class="p">)</span>
           <span class="o">.</span> <span class="nv">starling</span> <span class="p">(</span><span class="o">++</span><span class="p">)</span> <span class="p">(</span><span class="nv">reverse</span><span class="o">.</span><span class="nv">r2</span><span class="p">)</span>
           <span class="o">.</span> <span class="nv">starling</span> <span class="p">(</span><span class="o">++</span><span class="p">)</span> <span class="p">(</span><span class="nv">reverse</span><span class="o">.</span><span class="nv">r1</span><span class="p">)</span>
           <span class="o">.</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">,</span><span class="kr">_</span><span class="p">)</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">))</span>
      <span class="kr">where</span>
        <span class="nv">r1</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">))</span>
        <span class="nv">r2</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">))</span>
        <span class="nv">r3</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">))</span>
        <span class="nv">starling</span> <span class="nv">f</span> <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3272/addtag/" class="addtag" id="addtag_3272">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3272/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3272/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3272"
  >-</span><span
  class="button yellow"
  id="rating_z_3272"
  >0</span><span 
  class="button green"
  id="rating_p_3272"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3272/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3273">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/424/" target="_top">satooM</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3273/">#3273</a>(<script language="JavaScript">print_time(new Date("2007/10/05 17:24 GMT"));</script><noscript>2007/10/05 17:24 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>fを作用させる以前に同距離にある点に関して、出力順がお題を満たしていない気がします。
((5,0)と(4,3) など)</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3273/addtag/" class="addtag" id="addtag_3273">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3273"
  >-</span><span
  class="button yellow"
  id="rating_z_3273"
  >0</span><span 
  class="button green"
  id="rating_p_3273"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3268/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3273/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3273/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3273/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3274">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3274/">#3274</a>(<script language="JavaScript">print_time(new Date("2007/10/05 18:09 GMT"));</script><noscript>2007/10/05 18:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>(n,0) ～ (n,n)
を配列に追加したら距離でソートして
距離が n 以下の部分を取り出して全周に展開して表示
…を繰り返すことで n&lt;0x8000 あたりまで表示出来るはず。
コードはとりあえず1000番目を越えたら止まる設定ですが…。
1000番目は(-8,16)でした。

最初配列の先頭から要素を取り出すのに array_shift を使ったら
配列の残りのキーが0からの連番に上書きされてしまう事に気がつかなくて
困ったことに。
逆順にソートして array_pop なら良かったのか…。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nv">$c</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
<span class="nf">printf</span><span class="p">(</span><span class="s2">&quot;%4d: %4d,%4d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="o">++</span><span class="nv">$c</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">);</span>
<span class="nv">$a</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="m">1</span><span class="p">;</span> <span class="c">/*$i&lt;0x8000*/</span> <span class="nv">$c</span><span class="o">&lt;=</span><span class="m">1000</span><span class="p">;</span><span class="o">++</span><span class="nv">$i</span><span class="p">)</span>
<span class="p">{</span>	<span class="k">for</span><span class="p">(</span><span class="nv">$j</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$j</span><span class="o">&lt;=</span><span class="nv">$i</span><span class="p">;</span><span class="o">++</span><span class="nv">$j</span><span class="p">)</span>
		<span class="nv">$a</span><span class="p">[</span><span class="nv">$i</span><span class="o">*</span><span class="nv">$i</span><span class="o">+</span><span class="nv">$j</span><span class="o">*</span><span class="nv">$j</span><span class="p">][</span><span class="nv">$i</span><span class="p">]</span><span class="o">=</span><span class="nv">$j</span><span class="p">;</span>
	<span class="nf">ksort</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$d</span><span class="o">=</span><span class="nv">$i</span><span class="o">*</span><span class="nv">$i</span><span class="p">;</span><span class="nf">key</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span><span class="o">&lt;=</span><span class="nv">$d</span><span class="p">;)</span>
	<span class="p">{</span>	<span class="nv">$b</span><span class="o">=</span><span class="nf">current</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
		<span class="nf">unset</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="nf">key</span><span class="p">(</span><span class="nv">$a</span><span class="p">)]);</span>
		<span class="k">foreach</span><span class="p">(</span><span class="nv">$b</span> <span class="k">as</span> <span class="nv">$x</span> <span class="o">=&gt;</span> <span class="nv">$y</span><span class="p">)</span>
		<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$y</span> <span class="o">&amp;&amp;</span> <span class="nv">$x</span><span class="o">!=</span><span class="nv">$y</span><span class="p">)</span>
				<span class="nv">$b</span><span class="p">[</span><span class="nv">$y</span><span class="p">]</span><span class="o">=</span><span class="nv">$x</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nf">krsort</span><span class="p">(</span><span class="nv">$b</span><span class="p">);</span>
		<span class="k">for</span><span class="p">(</span><span class="nv">$j</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$j</span><span class="o">&lt;</span><span class="m">4</span><span class="p">;</span><span class="o">++</span><span class="nv">$j</span><span class="p">)</span>
		<span class="p">{</span>	<span class="k">foreach</span><span class="p">(</span><span class="nv">$b</span> <span class="k">as</span> <span class="nv">$x</span> <span class="o">=&gt;</span> <span class="nv">$y</span><span class="p">)</span>
			<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$j</span><span class="o">&amp;</span><span class="m">1</span><span class="p">)</span> <span class="p">{</span> <span class="nv">$t</span><span class="o">=</span><span class="nv">$x</span><span class="p">;</span> <span class="nv">$x</span><span class="o">=</span><span class="nv">$y</span><span class="p">;</span> <span class="nv">$y</span><span class="o">=</span><span class="nv">$t</span><span class="p">;</span> <span class="p">}</span>
				<span class="k">if</span><span class="p">((</span><span class="nv">$j</span><span class="o">+</span><span class="m">1</span><span class="p">)</span><span class="o">&amp;</span><span class="m">2</span><span class="p">)</span> <span class="nv">$x</span><span class="o">=-</span><span class="nv">$x</span><span class="p">;</span>
				<span class="k">if</span><span class="p">(</span><span class="nv">$j</span><span class="o">&amp;</span><span class="m">2</span><span class="p">)</span> <span class="nv">$y</span><span class="o">=-</span><span class="nv">$y</span><span class="p">;</span>
				<span class="nf">printf</span><span class="p">(</span><span class="s2">&quot;%4d: %4d,%4d</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="o">++</span><span class="nv">$c</span><span class="p">,</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">);</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3274/addtag/" class="addtag" id="addtag_3274">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3274/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3274/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3274"
  >-</span><span
  class="button yellow"
  id="rating_z_3274"
  >0</span><span 
  class="button green"
  id="rating_p_3274"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3274/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3275">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/383/" target="_top">shg</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3275/">#3275</a>(<script language="JavaScript">print_time(new Date("2007/10/05 19:50 GMT"));</script><noscript>2007/10/05 19:50 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/matlab/">
	  Matlab
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
<p>求める個数を引数として与えると、格子点を行列を返す。最後の三行のコメントを外すと求めた格子点をグラフ上に表示する。
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>function r = latticepointsaroundorigin(num)
% r = latticepointssorted(n) retruns a list of lattice points,
% in the order of  distance from the origin and polar angle.
% Uncomment the last three lines to show the locations of the points.
% (ja.doukaku.org Q65)
rg = ceil(sqrt(num)/2);
[x y] = meshgrid(-rg:rg);
pts = [x(:) y(:) x(:).^2+y(:).^2 atan2(-y(:),-x(:))];
r = sortrows(pts, [3,4]);
r = r(1:num,1:2);
% figure
% axis([-rg rg -rg rg])
% text(r(:,1),r(:,2),num2cell(1:num))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3275/addtag/" class="addtag" id="addtag_3275">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/MATLAB7.5/">MATLAB7.5</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/matlab/">
		Matlab
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3275/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3275/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3275"
  >-</span><span
  class="button yellow"
  id="rating_z_3275"
  >0</span><span 
  class="button green"
  id="rating_p_3275"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3275/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3275/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3276">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/383/" target="_top">shg</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3276/">#3276</a>(<script language="JavaScript">print_time(new Date("2007/10/05 20:16 GMT"));</script><noscript>2007/10/05 20:16 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/matlab/">
	  Matlab
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
<p>範囲の計算が変なまま出してしまったので再投稿。
</p>
<p>同じく最後三行のコメントを外すと求めた格子点図示する。等距離の場合の順序をx軸を起点とした偏角の順にソートするという条件も満たしている。1000個目は [-8, 16]。
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>function r = latticepointsaroundorigin(num)
% r = latticepointssorted(n) retruns a list of lattice points,
% in the order of  distance from the origin and polar angle.
% Uncomment the last three lines to show the locations of the points.
% (ja.doukaku.org Q65)
rg = ceil(sqrt(num/pi));
[x y] = meshgrid(-rg:rg);
pts = [x(:) y(:) sqrt(x(:).^2+y(:).^2) atan2(-y(:),-x(:))];
r = sortrows(pts, [3,4]);
r = r(1:num,1:2);
% figure
% axis([-rg rg -rg rg])
% text(r(:,1),r(:,2),num2cell(1:num))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3276/addtag/" class="addtag" id="addtag_3276">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/MATLAB7.5/">MATLAB7.5</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/matlab/">
		Matlab
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3276/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3276/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3276"
  >-</span><span
  class="button yellow"
  id="rating_z_3276"
  >0</span><span 
  class="button green"
  id="rating_p_3276"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3275/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3276/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3276/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3277">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3277/">#3277</a>(<script language="JavaScript">print_time(new Date("2007/10/06 01:51 GMT"));</script><noscript>2007/10/06 01:51 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ああ。ご指摘のとおりです。
結局仰角でsortすることにしてしまいました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Complex</span>

<span class="nv">binapp</span> <span class="nv">o</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">o</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">cmpapp</span> <span class="o">::</span> <span class="n">Ord</span> <span class="nv">b</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">Ordering</span>
<span class="nv">cmpapp</span> <span class="o">=</span> <span class="nv">binapp</span> <span class="nv">compare</span>

<span class="nv">grid</span> <span class="o">::</span> <span class="n">Integer</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">Integer</span><span class="p">,</span><span class="n">Integer</span><span class="p">)]</span>
<span class="nv">grid</span> <span class="nv">z</span> <span class="o">=</span> <span class="kr">let</span> <span class="nv">z&#39;</span>  <span class="o">=</span> <span class="nv">floor</span> <span class="o">$</span> <span class="nv">sqrt</span> <span class="p">(</span><span class="nv">fromInteger</span> <span class="nv">z</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
             <span class="nv">z&#39;&#39;</span> <span class="o">=</span> <span class="nv">floor</span> <span class="o">$</span> <span class="nv">sqrt</span> <span class="p">(</span><span class="nv">fromInteger</span> <span class="nv">z</span><span class="p">)</span>
         <span class="kr">in</span>  <span class="nv">sortBy</span> <span class="nv">g</span> <span class="o">$</span> <span class="nv">concat</span> <span class="p">[</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">z&#39;</span><span class="p">],</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="nv">y</span><span class="o">..</span><span class="nv">z&#39;&#39;</span><span class="p">],</span> <span class="nv">x</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span> <span class="nv">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">==</span> <span class="nv">z</span> <span class="p">]</span>
  <span class="kr">where</span> 
    <span class="nv">f</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span> 
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>             <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="mi">0</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">)]</span>
    <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">y</span>    <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
            <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">),(</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">)]</span>
    <span class="nv">g</span> <span class="o">=</span> <span class="nv">cmpapp</span> <span class="p">(</span><span class="nv">h</span> <span class="o">.</span> <span class="nv">phase</span> <span class="o">.</span> <span class="nv">uncurry</span> <span class="p">(</span><span class="o">:+</span><span class="p">)</span> <span class="o">.</span> <span class="nv">e</span><span class="p">)</span>
    <span class="nv">h</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">x</span> <span class="o">+</span> <span class="kr">if</span> <span class="nv">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="mi">2</span><span class="o">*</span><span class="nv">pi</span> <span class="kr">else</span> <span class="mi">0</span>
    <span class="nv">e</span> <span class="o">=</span> <span class="nv">uncurry</span> <span class="p">(</span><span class="nv">binapp</span> <span class="p">(,)</span> <span class="nv">fromInteger</span><span class="p">)</span>

<span class="nv">grids</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Integer</span><span class="p">,</span><span class="n">Integer</span><span class="p">)]</span>
<span class="nv">grids</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="nv">grid</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>

<span class="cm">{-</span>
<span class="cm">*Main&gt; mapM_ print $ take 1000 $ grids</span>
<span class="cm">(0,0)</span>
<span class="cm">(1,0)</span>
<span class="cm">(0,1)</span>
<span class="cm">(-1,0)</span>
<span class="cm">(0,-1)</span>
<span class="cm">(1,1)</span>
<span class="cm">(-1,1)</span>
<span class="cm">(-1,-1)</span>
<span class="cm">(1,-1)</span>
<span class="cm">(2,0)</span>
<span class="cm">... 中略 ...</span>
<span class="cm">(16,8)</span>
<span class="cm">(8,16)</span>
<span class="cm">(-8,16)                      -- 1000番目(1-origin)</span>
<span class="cm">*Main&gt;</span>
<span class="cm">-}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3277/addtag/" class="addtag" id="addtag_3277">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3277/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3277/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3277"
  >-</span><span
  class="button yellow"
  id="rating_z_3277"
  >0</span><span 
  class="button green"
  id="rating_p_3277"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3273/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3277/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3277/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3278">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3278/">#3278</a>(<script language="JavaScript">print_time(new Date("2007/10/06 03:36 GMT"));</script><noscript>2007/10/06 03:36 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ソート用比較関数を見直し。

1000番目の座標は他の人と同じく(-8, 16)になりました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">math</span> <span class="k">import</span> <span class="n">sqrt</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">((</span><span class="n">x0</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">z0</span><span class="p">),</span> <span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">z1</span><span class="p">)):</span>
  <span class="k">if</span> <span class="n">z0</span> <span class="o">&lt;</span> <span class="n">z1</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">if</span> <span class="n">z0</span> <span class="o">&gt;</span> <span class="n">z1</span><span class="p">:</span> <span class="k">return</span> <span class="mi">1</span>
  <span class="k">if</span> <span class="n">y0</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">y1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">x0</span> <span class="o">&gt;</span> <span class="n">x1</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">else</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">y1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">x0</span> <span class="o">&lt;</span> <span class="n">x1</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">return</span> <span class="mi">1</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">n2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">n</span> <span class="o">/</span> <span class="mi">2</span><span class="p">))</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">n2</span><span class="p">,</span> <span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">n2</span><span class="p">,</span> <span class="n">n2</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

<span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span> <span class="ow">in</span> <span class="n">sorted</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="nb">cmp</span><span class="o">=</span><span class="n">f</span><span class="p">)[:</span><span class="n">n</span><span class="p">]:</span>
  <span class="k">print</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3278/addtag/" class="addtag" id="addtag_3278">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3278/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3278/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3278"
  >-</span><span
  class="button yellow"
  id="rating_z_3278"
  >0</span><span 
  class="button green"
  id="rating_p_3278"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3260/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3278/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3278/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3279">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3279/">#3279</a>(<script language="JavaScript">print_time(new Date("2007/10/06 06:28 GMT"));</script><noscript>2007/10/06 06:28 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>それはそうなんですが、二乗すると三角不等式が成り立っていないという。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3279/addtag/" class="addtag" id="addtag_3279">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3279"
  >-</span><span
  class="button yellow"
  id="rating_z_3279"
  >0</span><span 
  class="button green"
  id="rating_p_3279"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3269/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3279/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3279/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3279/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3280">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3280/">#3280</a>(<script language="JavaScript">print_time(new Date("2007/10/06 06:43 GMT"));</script><noscript>2007/10/06 06:43 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>そうでした、(1/2)^2+(1/2)^2 &lt; 1^2 ですもんね。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3280/addtag/" class="addtag" id="addtag_3280">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3280"
  >-</span><span
  class="button yellow"
  id="rating_z_3280"
  >0</span><span 
  class="button green"
  id="rating_p_3280"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3279/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3280/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3280/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3282">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/456/" target="_top">kenaxt</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3282/">#3282</a>(<script language="JavaScript">print_time(new Date("2007/10/06 11:58 GMT"));</script><noscript>2007/10/06 11:58 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>距離、反時計回り（0-360°）の順にソートするために、setOrder(x,y)中で、角度/360を小数部にセットしています。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre><span class="kp">include</span> <span class="no">Math</span>

<span class="k">def</span> <span class="nf">gridPoint</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
  <span class="n">r</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="n">n</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">limit</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span> <span class="o">/</span> <span class="mi">2</span> <span class="c1">#--- search square size</span>
  <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">y</span><span class="o">|</span>
      <span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span>
    <span class="p">}}</span>
  <span class="n">r</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span><span class="n">setOrder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">setOrder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
  <span class="n">deg</span> <span class="o">=</span> <span class="n">atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="o">*</span> <span class="mi">180</span> <span class="o">/</span> <span class="no">PI</span>
  <span class="n">deg</span> <span class="o">+=</span> <span class="mi">360</span> <span class="k">if</span> <span class="n">deg</span> <span class="o">&lt;</span> <span class="mi">0</span>   <span class="c1">#--- degree correct</span>
  <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">deg</span> <span class="o">/</span> <span class="mi">360</span> <span class="c1">#--- distance + degree/360</span>
<span class="k">end</span>

<span class="n">limit</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">k</span> <span class="o">=</span> <span class="n">gridPoint</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>
<span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.limit</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="nb">p</span> <span class="n">k</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3282/addtag/" class="addtag" id="addtag_3282">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/Ruby1.8.5/">Ruby1.8.5</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3282/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3282/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3282"
  >-</span><span
  class="button yellow"
  id="rating_z_3282"
  >0</span><span 
  class="button green"
  id="rating_p_3282"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3282/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3283">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3283/">#3283</a>(<script language="JavaScript">print_time(new Date("2007/10/06 13:55 GMT"));</script><noscript>2007/10/06 13:55 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>探索範囲を狭めました。
ついでに反時計回りになるようにしました。

評価の方法ですが、
円内の格子点に正方形を対応させると円の被覆ができるので、
これを使って格子点の数を円の面積で見積もるというのが大まかな方針です。

細かい計算は以下。
軸の周りで一対一対応にならなくてややこしいことになってます。

C: 原点を中心とする半径 r の閉円板
f: 単位正方形に対し、その頂点のうち最も原点に近いものを対応させる写像

C に属する格子点の数を K とすると、
f による像が C に入っているような単位正方形の数は
 原点に写るものが 4 個
 原点以外で軸上に写るものが 8r 個
 それ以外の点に写るものが K-4r-1 個
合わせて K+4r+3 個となります。
これらの単位正方形の和集合を S とします。

C は S の部分集合なので、S の面積は C の面積以上になります。
S は K+4r+3 個の単位正方形からなるので、その面積は K+4r+3 です。
また C の面積は pi*r^2 なので
pi*r^2 &lt;= K + 4r + 3
が得られます。K が格子点の数だったので、格子点は少なくとも
pi*r^2 - 4r -3 個以上あることがわかります。

というわけで、格子点の数が n 以上となる半径 r を見つけるには
pi*r^2 - 4r - 3 &gt;= n
を解けばよく、その結果
r &gt;= (sqrt(4 + (3 + n) * pi) + 2) / pi
となります。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>(defun point&lt; (p1 p2)
  (destructuring-bind ((x1 y1) (x2 y2)) `(,p1 ,p2)
     (let ((a1 (+ (* x1 x1) (* y1 y1)))
           (a2 (+ (* x2 x2) (* y2 y2))))
       (or (&lt; a1 a2)
           (and (= a1 a2)
                (if (&gt;= y1 0)
                    (or (&gt; 0 y2) (&gt; x1 x2))
                  (and (&gt; 0 y2) (&lt; x1 x2))))))))

(defun list-lattice-points (n)
  (loop with a = (ceiling (/ (+ (sqrt (+ 4 (* (+ 3 n) pi))) 2) pi))
    for i from (- a) to a
    nconc (loop with b = (floor (sqrt (- (* a a) (* i i))))
            for j from (- b) to b collect (list i j)) into points
    finally (format t &quot;~V{~{~D, ~D~}~%~}&quot;
                    n (sort points #&#39;point&lt;))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3283/addtag/" class="addtag" id="addtag_3283">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3283/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3283/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3283"
  >-</span><span
  class="button yellow"
  id="rating_z_3283"
  >0</span><span 
  class="button green"
  id="rating_p_3283"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3264/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3283/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3283/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3284">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3284/">#3284</a>(<script language="JavaScript">print_time(new Date("2007/10/07 03:04 GMT"));</script><noscript>2007/10/07 03:04 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  なんか旨い方法はないかと思っていたのですが、結局、普通の方法になってしまいました。その代わり反時計回りの条件を満たしています。<br/><br/>1000個目は<br/>-8,&nbsp;16<br/>です。<br/><br/>ちなみに、最初の10個（反時計回り）は<br/>0,&nbsp;0<br/>1,&nbsp;0<br/>0,&nbsp;1<br/>-1,&nbsp;0<br/>0,&nbsp;-1<br/>1,&nbsp;1<br/>-1,&nbsp;1<br/>-1,&nbsp;-1<br/>1,&nbsp;-1<br/>2,&nbsp;0<br/>になります。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="n">lattice</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="o">-</span><span class="mi">20</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">lattice</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Point</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">lattice</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Point</span> <span class="n">p</span> <span class="o">:</span> <span class="n">lattice</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;%d, %d%n&quot;</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">x</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">y</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(++</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">1000</span><span class="o">)</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">class</span> <span class="nc">Point</span> <span class="k">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Point</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">abs2</span><span class="o">;</span>
    <span class="kt">double</span> <span class="n">theta</span><span class="o">;</span>
    <span class="k">public</span> <span class="n">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="n">abs2</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span><span class="o">;</span>
        <span class="n">theta</span> <span class="o">=</span> <span class="n">Math</span><span class="o">.</span><span class="na">atan2</span><span class="o">(</span><span class="n">y</span><span class="o">,</span> <span class="n">x</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">theta</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="n">theta</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">*</span><span class="n">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">compareTo</span><span class="o">(</span><span class="n">Point</span> <span class="n">p</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">abs2</span> <span class="o">!=</span> <span class="n">p</span><span class="o">.</span><span class="na">abs2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">abs2</span> <span class="o">-</span> <span class="n">p</span><span class="o">.</span><span class="na">abs2</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">theta</span><span class="o">,</span> <span class="n">p</span><span class="o">.</span><span class="na">theta</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">&quot;(&quot;</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="s">&quot;):&quot;</span> <span class="o">+</span> <span class="n">abs2</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3284/addtag/" class="addtag" id="addtag_3284">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3284/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3284/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3284"
  >-</span><span
  class="button yellow"
  id="rating_z_3284"
  >0</span><span 
  class="button green"
  id="rating_p_3284"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3284/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3286">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/190/" target="_top">fkmn</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3286/">#3286</a>(<script language="JavaScript">print_time(new Date("2007/10/07 09:55 GMT"));</script><noscript>2007/10/07 09:55 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/sql/">
	  SQL
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>MySQL 限定。
最初に整数の組み合わせを作ってしまってから、
それをソートしています。

1000番目は (-8, 16) と出ました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">digits</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">digits</span><span class="p">(</span><span class="n">n</span> <span class="nb">INTEGER</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">digits</span> <span class="k">VALUES</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="p">(</span><span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="p">(</span><span class="mi">5</span><span class="p">),</span> <span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="p">(</span><span class="mi">7</span><span class="p">),</span> <span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="p">(</span><span class="mi">9</span><span class="p">);</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">integers</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">integers</span>
<span class="k">SELECT</span> <span class="n">n</span> 
<span class="k">FROM</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">n</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="k">AS</span> <span class="n">n</span> <span class="k">FROM</span> <span class="n">digits</span> <span class="n">a</span><span class="p">,</span> <span class="n">digits</span> <span class="n">b</span>
        <span class="k">UNION</span>
       <span class="k">SELECT</span> <span class="o">-</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">n</span> <span class="o">*</span> <span class="mi">10</span><span class="p">))</span> <span class="k">AS</span> <span class="n">n</span> <span class="k">FROM</span> <span class="n">digits</span> <span class="n">a</span><span class="p">,</span> <span class="n">digits</span> <span class="n">b</span><span class="p">)</span> <span class="n">a</span><span class="p">;</span>

<span class="k">SET</span> <span class="o">@</span><span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">SELECT</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span>
  <span class="k">FROM</span> <span class="p">(</span> <span class="k">SELECT</span> <span class="n">a</span><span class="p">.</span><span class="n">n</span> <span class="k">AS</span> <span class="n">x</span>
              <span class="p">,</span> <span class="n">b</span><span class="p">.</span><span class="n">n</span> <span class="k">AS</span> <span class="n">y</span>
              <span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">n</span> <span class="o">*</span> <span class="n">a</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="n">b</span><span class="p">.</span><span class="n">n</span> <span class="o">*</span> <span class="n">b</span><span class="p">.</span><span class="n">n</span> <span class="k">AS</span> <span class="n">magnitude</span>
              <span class="p">,</span> <span class="n">atan</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">n</span><span class="p">)</span> <span class="o">+</span> <span class="k">CASE</span> <span class="k">WHEN</span> <span class="n">atan</span><span class="p">(</span><span class="n">b</span><span class="p">.</span><span class="n">n</span><span class="p">,</span> <span class="n">a</span><span class="p">.</span><span class="n">n</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span>
                                      <span class="k">THEN</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">pi</span><span class="p">()</span>
                                      <span class="k">ELSE</span> <span class="mi">0</span> <span class="k">END</span> <span class="k">AS</span> <span class="n">angle</span>
              <span class="p">,</span> <span class="p">(</span><span class="o">@</span><span class="n">r</span> <span class="p">:</span><span class="o">=</span> <span class="o">@</span><span class="n">r</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="k">row</span>   
           <span class="k">FROM</span> <span class="n">integers</span> <span class="n">a</span><span class="p">,</span> <span class="n">integers</span> <span class="n">b</span>
       <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">magnitude</span><span class="p">,</span> <span class="n">angle</span><span class="p">)</span> <span class="k">c</span>
 <span class="k">WHERE</span> <span class="k">row</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3286/addtag/" class="addtag" id="addtag_3286">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/MySQL/">MySQL</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/sql/">
		SQL
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3286/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3286/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3286"
  >-</span><span
  class="button yellow"
  id="rating_z_3286"
  >0</span><span 
  class="button green"
  id="rating_p_3286"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3286/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3287">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/461/" target="_top">gemma</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3287/">#3287</a>(<script language="JavaScript">print_time(new Date("2007/10/07 21:30 GMT"));</script><noscript>2007/10/07 21:30 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>r≦√(n/2), 0°≦Θ≦45°の格子点を計算して、それを平面に8回、正方形のピザのように貼りつけると、見積もるべき格子点のリストができる。
それを原点からの距離で安定ソートする。
安定ソートで8回貼りつけたときの順番が保たれるので、仰角での順序付けを前もってやったことになる。
1000番めは同じく (-8 . 16)</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3287/addtag/" class="addtag" id="addtag_3287">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3287"
  >-</span><span
  class="button yellow"
  id="rating_z_3287"
  >0</span><span 
  class="button green"
  id="rating_p_3287"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3287/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3287/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3288">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/461/" target="_top">gemma</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/">#3288</a>(<script language="JavaScript">print_time(new Date("2007/10/07 21:35 GMT"));</script><noscript>2007/10/07 21:35 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'></pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">test</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">take</span> <span class="p">(</span><span class="nf">stable-sort</span> <span class="p">(</span><span class="nf">append-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                   <span class="p">(</span><span class="nf">append-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">y</span><span class="p">)</span>
                                                 <span class="p">(</span><span class="k">cond </span>
                                                  <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">zero? </span><span class="nv">y</span><span class="p">))</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
                                                  <span class="p">((</span><span class="nb">zero? </span><span class="nv">x</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="nv">x</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">))))</span>
                                                  <span class="p">((</span><span class="nb">zero? </span><span class="nv">y</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="nv">x</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">))))</span>
                                                  <span class="p">((</span><span class="nb">eq? </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">))</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">))))</span>
                                                  <span class="p">(</span><span class="k">else </span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="nv">x</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">))</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">))</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">))</span>
                                                         <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">))))))</span>
                                               <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">))))</span>
                                 <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">ceiling </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">sqrt </span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">ceiling </span><span class="p">(</span><span class="nb">sqrt </span><span class="nv">n</span><span class="p">)))</span> <span class="mi">2</span><span class="p">)))))))</span>
                     <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p0</span> <span class="nv">p1</span><span class="p">)</span>
                       <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">car </span><span class="nv">p0</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">p0</span><span class="p">)</span> <span class="mi">2</span><span class="p">))</span>
                          <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">car </span><span class="nv">p1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">p1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))))</span> <span class="nv">n</span><span class="p">))</span>

<span class="p">(</span><span class="nb">for-each </span><span class="nv">print</span> <span class="p">(</span><span class="nf">test</span> <span class="mi">1000</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/addtag/" class="addtag" id="addtag_3288">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3288"
  >-</span><span
  class="button yellow"
  id="rating_z_3288"
  >0</span><span 
  class="button green"
  id="rating_p_3288"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3287/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3288/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3289">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3289/">#3289</a>(<script language="JavaScript">print_time(new Date("2007/10/07 23:51 GMT"));</script><noscript>2007/10/07 23:51 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>#3273 でも出てますが、これだと (4 . 3) が (5 . 0) より先になりません？</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3289/addtag/" class="addtag" id="addtag_3289">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3289"
  >-</span><span
  class="button yellow"
  id="rating_z_3289"
  >0</span><span 
  class="button green"
  id="rating_p_3289"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3288/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3289/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3289/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3289/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3290">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/456/" target="_top">kenaxt</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3290/">#3290</a>(<script language="JavaScript">print_time(new Date("2007/10/08 04:10 GMT"));</script><noscript>2007/10/08 04:10 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>あえて三角関数atan2を使わずに、n象限の点に評価値n.xxx(xxx=0〜1未満)を設定。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre><span class="kp">include</span> <span class="no">Math</span>

<span class="k">def</span> <span class="nf">gridPoint</span><span class="p">(</span><span class="n">limit</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="o">[]</span><span class="p">)</span>
  <span class="n">n</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">limit</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span> <span class="o">/</span> <span class="mi">2</span> <span class="c1">#--- search square size</span>
  <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="o">.</span><span class="n">.n</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">y</span><span class="o">|</span>
      <span class="n">r</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span>
    <span class="p">}}</span>
  <span class="n">r</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span><span class="n">setOrder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">setOrder</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span> <span class="o">!=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">)</span>
    <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">y</span><span class="p">,</span> <span class="o">-</span><span class="n">x</span>
    <span class="n">r</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">end</span>
  <span class="p">(</span><span class="n">r</span> <span class="o">+=</span> <span class="n">y</span> <span class="o">/</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">))</span> <span class="o">/</span> <span class="mi">4</span> <span class="o">+</span> <span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">limit</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="nb">p</span> <span class="n">gridPoint</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span><span class="o">[</span><span class="n">limit</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="c1"># -&gt; [-8, 16]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3290/addtag/" class="addtag" id="addtag_3290">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/Ruby1.8.5/">Ruby1.8.5</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3290/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3290/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3290"
  >-</span><span
  class="button yellow"
  id="rating_z_3290"
  >0</span><span 
  class="button green"
  id="rating_p_3290"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3290/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3291">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/461/" target="_top">gemma</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3291/">#3291</a>(<script language="JavaScript">print_time(new Date("2007/10/08 05:16 GMT"));</script><noscript>2007/10/08 05:16 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ご指摘のとおりです。
反時計回りに何枚目のピザカットかを保存するようにしました。
これならatan使ったほうがいいでしょう。
ピザカット戦略はろくなことがないと、うちの祖母も言ってました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">test</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">R</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">1</span> <span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">ceiling </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">sqrt </span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">quotient </span><span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">ceiling </span><span class="p">(</span><span class="nb">sqrt </span><span class="nv">n</span><span class="p">)))</span> <span class="mi">2</span><span class="p">))))))</span>
  <span class="p">(</span><span class="nf">take</span> <span class="p">(</span><span class="nf">stable-sort</span> <span class="p">(</span><span class="nf">append-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">y</span><span class="p">)</span>
                                   <span class="p">(</span><span class="nf">append-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                                 <span class="p">(</span><span class="k">cond </span>
                                                  <span class="p">((</span><span class="k">and </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">zero? </span><span class="nv">y</span><span class="p">))</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span> <span class="mi">0</span><span class="p">)))</span>
                                                  <span class="p">((</span><span class="nb">zero? </span><span class="nv">x</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span> <span class="mi">0</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">y</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">4</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="mi">6</span><span class="p">)))</span>
                                                  <span class="p">((</span><span class="nb">zero? </span><span class="nv">y</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span> <span class="mi">0</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">y</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="nv">y</span> <span class="mi">4</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="mi">6</span><span class="p">)))</span>
                                                  <span class="p">((</span><span class="nb">eq? </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span> <span class="mi">1</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">3</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="mi">5</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="mi">7</span><span class="p">)))</span>
                                                  <span class="p">(</span><span class="k">else </span>
                                                   <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span> <span class="mi">0</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">y</span> <span class="nv">x</span> <span class="mi">1</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="nv">y</span> <span class="mi">3</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="mi">4</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="mi">5</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span><span class="p">)</span> <span class="mi">6</span><span class="p">)</span>
                                                         <span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span><span class="p">)</span> <span class="mi">7</span><span class="p">)))))</span>
                                               <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">- </span><span class="nv">R</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">y</span><span class="p">)))</span>
                                 <span class="p">(</span><span class="nf">iota</span> <span class="nv">R</span><span class="p">))</span>
                     <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p0</span> <span class="nv">p1</span><span class="p">)</span>
		       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">r0</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">car </span><span class="nv">p0</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">p0</span><span class="p">)</span> <span class="mi">2</span><span class="p">)))</span>
			     <span class="p">(</span><span class="nf">r1</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">car </span><span class="nv">p1</span><span class="p">)</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">p1</span><span class="p">)</span> <span class="mi">2</span><span class="p">))))</span>
			 <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">r0</span> <span class="nv">r1</span><span class="p">)</span>
			     <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">caddr </span><span class="nv">p0</span><span class="p">)</span> <span class="p">(</span><span class="nb">caddr </span><span class="nv">p1</span><span class="p">))</span>
			     <span class="p">(</span><span class="nb">&lt; </span><span class="nv">r0</span> <span class="nv">r1</span><span class="p">)))))</span> <span class="nv">n</span><span class="p">))</span>

<span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
	    <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nf">take</span> <span class="nv">x</span> <span class="mi">2</span><span class="p">)))</span>
	  <span class="p">(</span><span class="nf">test</span> <span class="mi">1000</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3291/addtag/" class="addtag" id="addtag_3291">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3291/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3291/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3291"
  >-</span><span
  class="button yellow"
  id="rating_z_3291"
  >0</span><span 
  class="button green"
  id="rating_p_3291"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3289/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3291/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3291/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3292">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/448/" target="_top">naranja</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3292/">#3292</a>(<script language="JavaScript">print_time(new Date("2007/10/08 08:52 GMT"));</script><noscript>2007/10/08 08:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ソートを自前で実装したので長くなってます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">math</span>;

<span class="kt">void</span> <span class="n">main</span>(){
    <span class="kt">uint</span> <span class="n">n</span> = <span class="mi">1000</span>;
    <span class="kt">uint</span> <span class="n">r</span> = <span class="k">cast</span>(<span class="kt">uint</span>)<span class="n">ceil</span>(<span class="n">sqrt</span>(<span class="n">n</span> / <span class="mf">2.0</span>));
    <span class="kt">int</span>[][] <span class="n">gridPoints</span> = [[<span class="mi">0</span>, <span class="mi">0</span>]];

    <span class="k">for</span>(<span class="kt">uint</span> <span class="n">y</span>; <span class="n">y</span> &lt;= <span class="n">r</span>; <span class="n">y</span>++){
        <span class="k">for</span>(<span class="kt">uint</span> <span class="n">x</span> = <span class="mi">1</span>; (<span class="n">x</span> * <span class="n">x</span> + <span class="n">y</span> * <span class="n">y</span>) &lt;= <span class="n">r</span> * <span class="n">r</span>; <span class="n">x</span>++){
            <span class="n">gridPoints</span> ~= [[<span class="n">x</span>, <span class="n">y</span>], [-<span class="n">y</span>, <span class="n">x</span>], [-<span class="n">x</span>, -<span class="n">y</span>], [<span class="n">y</span>, -<span class="n">x</span>]];
        }
    }

    <span class="n">gridPoints</span>.<span class="n">qsort</span>();

    <span class="k">foreach</span>(<span class="n">e</span>; <span class="n">gridPoints</span>){
        <span class="n">writefln</span>(<span class="n">e</span>);
    }

    <span class="n">writefln</span>(<span class="n">n</span>, <span class="s">&quot;: &quot;</span>, <span class="n">gridPoints</span>[<span class="n">n</span> - <span class="mi">1</span>]);
}

<span class="kt">void</span> <span class="n">qsort</span>(<span class="kt">int</span>[][] <span class="n">array</span>){
    <span class="k">if</span>(<span class="n">array</span>.<span class="n">length</span> &lt; <span class="mi">2</span>) <span class="k">return</span>;

    <span class="kt">void</span> <span class="n">swap</span>(<span class="kt">uint</span> <span class="n">i</span>, <span class="kt">uint</span> <span class="n">j</span>){
        <span class="kt">int</span>[] <span class="n">tmp</span> = <span class="n">array</span>[<span class="n">i</span>].<span class="n">dup</span>;
        <span class="n">array</span>[<span class="n">i</span>] = <span class="n">array</span>[<span class="n">j</span>].<span class="n">dup</span>;
        <span class="n">array</span>[<span class="n">j</span>] = <span class="n">tmp</span>;
    }
    <span class="kt">int</span> <span class="n">cmp</span>(<span class="kt">int</span>[] <span class="n">a</span>, <span class="kt">int</span>[] <span class="n">b</span>){
        <span class="k">if</span>(<span class="n">squareDistance</span>(<span class="n">a</span>) == <span class="n">squareDistance</span>(<span class="n">b</span>)){
            <span class="kt">real</span> <span class="n">arctanDiff</span> = <span class="n">arctan</span>(<span class="n">a</span>) - <span class="n">arctan</span>(<span class="n">b</span>);
            <span class="k">if</span>(<span class="n">arctanDiff</span> &gt; <span class="mi">0</span>) <span class="k">return</span> <span class="mi">1</span>;
            <span class="k">else</span> <span class="k">if</span>(<span class="n">arctanDiff</span> &lt; <span class="mi">0</span>) <span class="k">return</span> -<span class="mi">1</span>;
        }
        <span class="k">else</span>{
            <span class="k">return</span> <span class="n">squareDistance</span>(<span class="n">a</span>) - <span class="n">squareDistance</span>(<span class="n">b</span>);
        }
        <span class="k">return</span> <span class="mi">0</span>;
    }

    <span class="kt">uint</span> <span class="n">left</span> = <span class="mi">0</span>;
    <span class="kt">uint</span> <span class="n">right</span> = <span class="n">array</span>.<span class="n">length</span> - <span class="mi">1</span>;
    <span class="k">while</span>(<span class="kc">true</span>){
        <span class="k">while</span>(<span class="n">cmp</span>(<span class="n">array</span>[<span class="n">left</span>], <span class="n">array</span>[<span class="mi">0</span>]) &lt; <span class="mi">0</span>) <span class="n">left</span>++;
        <span class="k">while</span>(<span class="n">cmp</span>(<span class="n">array</span>[<span class="mi">0</span>], <span class="n">array</span>[<span class="n">right</span>]) &lt; <span class="mi">0</span>) <span class="n">right</span>--;
        <span class="k">if</span>(<span class="n">right</span> &lt;= <span class="n">left</span>) <span class="k">break</span>;
        <span class="n">swap</span>(<span class="n">left</span>++, <span class="n">right</span>--);
    }
    <span class="n">qsort</span>(<span class="n">array</span>[<span class="mf">0.</span>.<span class="n">left</span>]);
    <span class="n">qsort</span>(<span class="n">array</span>[(<span class="n">right</span> + <span class="mi">1</span>)..<span class="n">length</span>]);
}

<span class="kt">int</span> <span class="n">squareDistance</span>(<span class="kt">int</span>[] <span class="n">grid</span>){
    <span class="k">return</span> <span class="n">grid</span>[<span class="mi">0</span>] * <span class="n">grid</span>[<span class="mi">0</span>] + <span class="n">grid</span>[<span class="mi">1</span>] * <span class="n">grid</span>[<span class="mi">1</span>];
}

<span class="kt">real</span> <span class="n">arctan</span>(<span class="kt">int</span>[] <span class="n">grid</span>){
    <span class="kt">real</span> <span class="n">arctan</span> = <span class="n">atan2</span>(<span class="n">grid</span>[<span class="mi">1</span>], <span class="n">grid</span>[<span class="mi">0</span>]);
    <span class="k">if</span>(<span class="n">arctan</span> &lt; <span class="mi">0</span>) <span class="n">arctan</span> += <span class="n">PI</span> * <span class="mi">2</span>;
    <span class="k">return</span> <span class="n">arctan</span>;
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3292/addtag/" class="addtag" id="addtag_3292">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3292/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3292/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3292"
  >-</span><span
  class="button yellow"
  id="rating_z_3292"
  >0</span><span 
  class="button green"
  id="rating_p_3292"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3292/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3293">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/461/" target="_top">gemma</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3293/">#3293</a>(<script language="JavaScript">print_time(new Date("2007/10/08 09:00 GMT"));</script><noscript>2007/10/08 09:00 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>0≦x,y≦√(n/2)
の範囲に限って列挙してから、xy軸ごとの対称性を利用する。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">test</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">R</span> <span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">ceiling </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">sqrt </span><span class="mi">2</span><span class="p">)</span>
                                        <span class="p">(</span><span class="nf">quotient</span>
                                         <span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">ceiling </span><span class="p">(</span><span class="nb">sqrt </span><span class="nv">n</span><span class="p">)))</span>
                                         <span class="mi">2</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">h</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;eq?</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">y</span><span class="p">)</span>
              <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                          <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">h</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">expt </span><span class="nv">x</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nb">expt </span><span class="nv">y</span> <span class="mi">2</span><span class="p">))</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
                        <span class="p">(</span><span class="nf">iota</span> <span class="nv">R</span> <span class="mi">1</span><span class="p">)))</span>
            <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">R</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">R</span> <span class="mi">-1</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">key</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">hash-table-update!</span> <span class="nv">h</span> <span class="nv">key</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                          <span class="p">(</span><span class="nf">append</span>
                                           <span class="nv">x</span>
                                           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span>
                                                  <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">p</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">p</span><span class="p">)))</span>
                                                <span class="nv">x</span><span class="p">)</span>
                                           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span>
                                                  <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">car </span><span class="nv">p</span><span class="p">))</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">p</span><span class="p">))))</span>
                                                <span class="nv">x</span><span class="p">)</span>
                                           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span>
                                                  <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">car </span><span class="nv">p</span><span class="p">))))</span>
                                                <span class="nv">x</span><span class="p">)))))</span>
            <span class="p">(</span><span class="nf">hash-table-keys</span> <span class="nv">h</span><span class="p">))</span>
 <span class="p">(</span><span class="nf">take</span> <span class="p">(</span><span class="nf">acons</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">append-map</span> <span class="nv">cdr</span> <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nf">hash-table-map</span> <span class="nv">h</span> <span class="nv">cons</span><span class="p">)</span>
                                        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p0</span> <span class="nv">p1</span><span class="p">)</span>
                                          <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">car </span><span class="nv">p0</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">p1</span><span class="p">))))))</span>
       <span class="nv">n</span><span class="p">))</span>

<span class="p">(</span><span class="nb">for-each </span><span class="nv">print</span> <span class="p">(</span><span class="nf">test</span> <span class="mi">1000</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3293/addtag/" class="addtag" id="addtag_3293">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3293/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3293/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3293"
  >-</span><span
  class="button yellow"
  id="rating_z_3293"
  >0</span><span 
  class="button green"
  id="rating_p_3293"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3293/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3296">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/343/" target="_top">matyr</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3296/">#3296</a>(<script language="JavaScript">print_time(new Date("2007/10/08 18:02 GMT"));</script><noscript>2007/10/08 18:02 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  &nbsp;原点からの距離(の二乗)と角度でソート。<br/>&nbsp;これだけだと二番煎じなので，出力をドリトルのソース(実行するとカメが格子点を辿る)にしてみました。
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100612150759/http://dolittle.eplang.jp/">プログラミング言語「ドリトル」 </a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">doukaku65</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span>
  <span class="k">with</span><span class="p">(</span><span class="nb">Math</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">p</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">sqrt</span><span class="p">(</span><span class="nx">n</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">|</span><span class="mi">0</span><span class="o">,</span> <span class="nx">y</span><span class="o">,</span> <span class="nx">x</span> <span class="o">=</span> <span class="o">-</span><span class="nx">m</span><span class="o">;</span> <span class="nx">x</span> <span class="o">&lt;=</span> <span class="nx">m</span><span class="o">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="nx">y</span> <span class="o">=</span> <span class="o">-</span><span class="nx">m</span><span class="o">;</span> <span class="nx">y</span> <span class="o">&lt;=</span> <span class="nx">m</span><span class="o">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">)</span>
    <span class="p">(</span><span class="nx">p</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="p">]).</span><span class="nx">keys</span> <span class="o">=</span> <span class="p">[</span><span class="nx">x</span><span class="o">*</span><span class="nx">x</span> <span class="o">+</span> <span class="nx">y</span><span class="o">*</span><span class="nx">y</span><span class="o">,</span> <span class="nx">atan</span><span class="p">(</span><span class="nx">y</span><span class="o">/</span><span class="nx">x</span><span class="p">)</span> <span class="o">+</span> <span class="nx">PI</span> <span class="o">*</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">0</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="p">){</span> <span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">||</span> <span class="nx">a</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">}).</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="nx">n</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>
<span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">print</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">WSH</span> <span class="o">&amp;&amp;</span> <span class="k">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span> <span class="nx">WSH</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">}</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nb">document</span> <span class="o">&amp;&amp;</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">)</span>
  <span class="p">(</span><span class="s1">&#39;//&lt;pre&gt;\n&#39;</span><span class="o">+</span>
   <span class="s1">&#39;亀＝タートル！作る 1 線の太さ。&#39;</span><span class="o">+</span>
   <span class="s1">&#39;点＝配列！\n&#39;</span><span class="o">+</span> <span class="nx">doukaku65</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/,/g</span><span class="o">,</span> <span class="s1">&#39; &#39;</span><span class="p">)</span> <span class="o">+</span><span class="s1">&#39;\n作る。&#39;</span><span class="o">+</span>
   <span class="s1">&#39;タイマー！作る &#39;</span><span class="o">+</span> <span class="mi">1</span><span class="o">/</span><span class="nx">i</span> <span class="o">+</span><span class="s1">&#39; 間隔 &#39;</span><span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39; 回数&#39;</span><span class="o">+</span>
   <span class="s1">&#39;「｜回｜亀！((点！(回＊２－１)見る)＊10)((点！(回＊２)見る)＊10)位置」実行。&#39;</span><span class="o">+</span>
   <span class="s1">&#39;\n//&lt;/pre&gt;&#39;</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3296/addtag/" class="addtag" id="addtag_3296">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/Dolittle/">Dolittle</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3296/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3296/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3296"
  >-</span><span
  class="button yellow"
  id="rating_z_3296"
  >0</span><span 
  class="button green"
  id="rating_p_3296"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3296/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3299">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3299/">#3299</a>(<script language="JavaScript">print_time(new Date("2007/10/08 23:58 GMT"));</script><noscript>2007/10/08 23:58 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>やってることは他の人とほとんど同じだけど、
とりあえず綺麗に書いたつもり。
VBAで仕事した直後で、ループ範囲が混乱したｗ
ちなみに1000番目は(-8, 16)でした</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">math</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">r</span><span class="p">,</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="n">r</span><span class="p">,</span><span class="n">r</span><span class="o">+</span><span class="mi">1</span><span class="p">):</span>
            <span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span> <span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">toInt</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">d</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">if</span> <span class="n">d</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span>
            <span class="k">return</span> <span class="mi">0</span>
            
        <span class="k">if</span> <span class="n">p1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">p2</span><span class="p">[</span><span class="mi">0</span><span class="p">]:</span>
            <span class="k">return</span> <span class="n">toInt</span><span class="p">(</span><span class="n">p1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">p2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">t1</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">atan2</span><span class="p">(</span><span class="n">p1</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">p1</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">t2</span> <span class="o">=</span> <span class="n">math</span><span class="o">.</span><span class="n">atan2</span><span class="p">(</span><span class="n">p2</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">p2</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">t1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">t1</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="mi">2</span>
        <span class="k">if</span> <span class="n">t2</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">t2</span> <span class="o">+=</span> <span class="n">math</span><span class="o">.</span><span class="n">pi</span><span class="o">*</span><span class="mi">2</span>
        <span class="k">return</span> <span class="n">toInt</span><span class="p">(</span><span class="n">t1</span> <span class="o">-</span> <span class="n">t2</span><span class="p">)</span>

    <span class="n">data</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="nb">cmp</span><span class="p">)</span>

    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">&gt;</span> <span class="mi">1000</span> <span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot;No.1000 is&quot;</span> <span class="p">,</span><span class="n">data</span><span class="p">[</span><span class="mi">1000</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">print</span> <span class="n">pos</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">pos</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="n">test</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3299/addtag/" class="addtag" id="addtag_3299">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3299/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3299/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3299"
  >-</span><span
  class="button yellow"
  id="rating_z_3299"
  >0</span><span 
  class="button green"
  id="rating_p_3299"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3299/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3302">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3302/">#3302</a>(<script language="JavaScript">print_time(new Date("2007/10/09 18:01 GMT"));</script><noscript>2007/10/09 18:01 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>1. bufにはソート済みの点が入っていて、
  距離n以上の点はまだ追加される可能性があります。
  （距離n未満の点は追加される可能性がないので出力しても良い)

2. bufが空になるか、n未満の距離の点が無くなったら、
  bufに(-n,-n)...(-n,n)...(n,n)...(n,-n)...と辺上の点を追加します。
  これらの点で一番距離が近い物はnとなります。
  bufは距離と角度でソートし、nは一つ増やします。

という感じで。

1000番目は(-8 16)になります。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">match</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">pi</span> <span class="p">(</span><span class="nb">atan </span><span class="mi">0</span> <span class="mi">-1</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">point</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">buf</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)))</span>
        <span class="p">(</span><span class="nf">n</span> <span class="mi">1</span><span class="p">))</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">dist</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">sqrt </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">y</span> <span class="nv">y</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">deg</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">let1</span> <span class="nv">d0</span> <span class="p">(</span><span class="nb">atan </span><span class="nv">y</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">negative? </span><span class="nv">d0</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">d0</span> <span class="p">(</span><span class="nb">* </span><span class="nv">pi</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">d0</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">define </span><span class="nv">cmp</span> <span class="p">(</span><span class="nf">match-lambda*</span> <span class="p">(((</span><span class="nf">dis1</span> <span class="nv">deg1</span> <span class="o">.</span> <span class="nv">_</span><span class="p">)</span> <span class="p">(</span><span class="nf">dis2</span> <span class="nv">deg2</span> <span class="o">.</span> <span class="nv">_</span><span class="p">))</span>
                  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">dis1</span> <span class="nv">dis2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">deg1</span> <span class="nv">deg2</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">dis1</span> <span class="nv">dis2</span><span class="p">)))))</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">points</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nf">append-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">- </span><span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">n</span><span class="p">)</span> <span class="o">`</span><span class="p">((</span><span class="o">,</span><span class="nv">i</span> <span class="o">,</span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="o">,</span><span class="nv">i</span> <span class="o">,</span><span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">))</span>
                                           <span class="p">(</span><span class="o">,</span><span class="nv">n</span> <span class="o">,</span><span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)</span> <span class="o">,</span><span class="nv">i</span><span class="p">)))</span>
              <span class="o">`</span><span class="p">((</span><span class="o">,</span><span class="nv">n</span> <span class="o">,</span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)</span> <span class="o">,</span><span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="o">,</span><span class="nv">n</span> <span class="o">,</span><span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">))</span> <span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)</span> <span class="o">,</span><span class="p">(</span><span class="nb">- </span><span class="nv">n</span><span class="p">)))))</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fetch-p</span><span class="p">)</span>
      <span class="p">(</span><span class="k">set! </span><span class="nv">buf</span> <span class="p">(</span><span class="nf">sort!</span>
                  <span class="p">(</span><span class="nb">append </span><span class="nv">buf</span>
                    <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">match-lambda</span> <span class="p">((</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
                           <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">dist</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">deg</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)))</span>
                         <span class="p">(</span><span class="nf">points</span><span class="p">)))</span>
                  <span class="nv">cmp</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">inc!</span> <span class="nv">n</span><span class="p">))</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
      <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">null? </span><span class="nv">buf</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">n</span> <span class="p">(</span><span class="nb">caar </span><span class="nv">buf</span><span class="p">)))</span> <span class="p">(</span><span class="nf">fetch-p</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">pop!</span> <span class="nv">buf</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">dotimes</span> <span class="p">(</span><span class="nf">i</span> <span class="mi">1000</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">cddr </span><span class="p">(</span><span class="nf">point</span><span class="p">)))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3302/addtag/" class="addtag" id="addtag_3302">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3302/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3302/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3302"
  >-</span><span
  class="button yellow"
  id="rating_z_3302"
  >0</span><span 
  class="button green"
  id="rating_p_3302"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3302/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3305">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/136/" target="_top">matarillo</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3305/">#3305</a>(<script language="JavaScript">print_time(new Date("2007/10/10 12:22 GMT"));</script><noscript>2007/10/10 12:22 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffdfdf;">-2/2=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>1000個目は(-8. 20)で合ってる？</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConsoleApplication1</span>
<span class="k">{</span>
  <span class="k">class</span> <span class="nc">Program</span>
  <span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="n">SortedList</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">,</span> <span class="n">LatticePoint</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">,</span> <span class="n">LatticePoint</span><span class="p">&gt;();</span>
      <span class="n">LatticePoint</span> <span class="n">origin</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
      <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">origin</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&lt;</span> <span class="m">1000</span><span class="p">)</span>
      <span class="k">{</span>
        <span class="n">LatticePoint</span> <span class="n">point</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Keys</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
        <span class="n">list</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">LatticePoint</span> <span class="n">p</span> <span class="k">in</span> <span class="n">point</span><span class="p">.</span><span class="n">GetRotatedPoints</span><span class="p">())</span>
        <span class="k">{</span>
          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}: {1}&quot;</span><span class="p">,</span> <span class="p">++</span><span class="n">count</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">LatticePoint</span> <span class="n">p</span> <span class="k">in</span> <span class="n">point</span><span class="p">.</span><span class="n">GetNeighborhood</span><span class="p">())</span>
        <span class="k">{</span>
          <span class="k">if</span> <span class="p">(!(</span><span class="n">list</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">p</span><span class="p">)))</span>
          <span class="k">{</span>
            <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
          <span class="k">}</span>
        <span class="k">}</span>
      <span class="k">}</span>
      <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
    <span class="k">}</span>
  <span class="k">}</span>
  <span class="k">struct</span> <span class="nc">LatticePoint</span> <span class="p">:</span> <span class="n">IEquatable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;,</span> <span class="n">IComparable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;</span>
  <span class="k">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">X</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LatticePoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">this</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}, {1}&quot;</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">if</span> <span class="p">(!(</span><span class="n">obj</span> <span class="k">is</span> <span class="n">LatticePoint</span><span class="p">))</span>
      <span class="k">{</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
      <span class="k">}</span>
      <span class="k">return</span> <span class="n">Equals</span><span class="p">((</span><span class="n">LatticePoint</span><span class="p">)</span><span class="n">obj</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">LatticePoint</span> <span class="n">p</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">X</span> <span class="p">==</span> <span class="n">X</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Y</span> <span class="p">==</span> <span class="n">Y</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="n">X</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">()</span> <span class="p">*</span> <span class="m">31</span> <span class="p">+</span> <span class="n">Y</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="p">==(</span><span class="n">LatticePoint</span> <span class="n">p1</span><span class="p">,</span> <span class="n">LatticePoint</span> <span class="n">p2</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="n">p1</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="p">!=(</span><span class="n">LatticePoint</span> <span class="n">p1</span><span class="p">,</span> <span class="n">LatticePoint</span> <span class="n">p2</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="p">!</span><span class="n">p1</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">long</span> <span class="n">SquaredSum</span>
    <span class="k">{</span>
      <span class="k">get</span>
      <span class="k">{</span>
        <span class="kt">long</span> <span class="n">x2</span> <span class="p">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">X</span> <span class="p">*</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">X</span><span class="p">;</span>
        <span class="kt">long</span> <span class="n">y2</span> <span class="p">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">Y</span> <span class="p">*</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">Y</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">x2</span> <span class="p">+</span> <span class="n">y2</span><span class="p">;</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="nf">CompareTo</span><span class="p">(</span><span class="n">LatticePoint</span> <span class="n">other</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="k">this</span><span class="p">.</span><span class="n">SquaredSum</span> <span class="p">-</span> <span class="n">other</span><span class="p">.</span><span class="n">SquaredSum</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;</span> <span class="n">GetNeighborhood</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="n">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">X</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">X</span> <span class="p">&gt;</span> <span class="n">Y</span><span class="p">)</span>
      <span class="k">{</span>
        <span class="n">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">LatticePoint</span> <span class="nf">RotateSquare</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(-</span><span class="n">Y</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;</span> <span class="n">GetRotatedPoints</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">if</span> <span class="p">((</span><span class="n">X</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">Y</span> <span class="p">==</span> <span class="m">0</span><span class="p">))</span>
      <span class="k">{</span>
        <span class="n">yield</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="n">yield</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">}</span>
      <span class="n">LatticePoint</span> <span class="n">p</span> <span class="p">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="n">LatticePoint</span> <span class="n">f</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span>
      <span class="n">LatticePoint</span> <span class="n">r</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">RotateSquare</span><span class="p">();</span>
      <span class="kt">bool</span> <span class="n">withFlip</span> <span class="p">=</span> <span class="p">((</span><span class="n">p</span> <span class="p">!=</span> <span class="n">f</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">f</span> <span class="p">!=</span> <span class="n">r</span><span class="p">));</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
      <span class="k">{</span>
        <span class="n">yield</span> <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">p</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">RotateSquare</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">withFlip</span><span class="p">)</span>
        <span class="k">{</span>
          <span class="n">yield</span> <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
          <span class="n">f</span> <span class="p">=</span> <span class="n">f</span><span class="p">.</span><span class="n">RotateSquare</span><span class="p">();</span>
        <span class="k">}</span>
      <span class="k">}</span>
    <span class="k">}</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3305/addtag/" class="addtag" id="addtag_3305">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3305/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3305/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffdfdf;"
  >-2/2=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3305"
  >-</span><span
  class="button yellow"
  id="rating_z_3305"
  >0</span><span 
  class="button green"
  id="rating_p_3305"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3305/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3305/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3307">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/136/" target="_top">matarillo</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3307/">#3307</a>(<script language="JavaScript">print_time(new Date("2007/10/10 12:35 GMT"));</script><noscript>2007/10/10 12:35 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>間違ってますね。CompareToの返す値が不正。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3307/addtag/" class="addtag" id="addtag_3307">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3307"
  >-</span><span
  class="button yellow"
  id="rating_z_3307"
  >0</span><span 
  class="button green"
  id="rating_p_3307"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3305/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3307/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3307/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3309">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3309/">#3309</a>(<script language="JavaScript">print_time(new Date("2007/10/11 07:51 GMT"));</script><noscript>2007/10/11 07:51 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
<p>短めに。
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>import scala.util.Sorting.stableSort
import java.lang.Math.{sqrt,PI,pow,atan2}

def lat(limit:int) = {
  type Coord = Pair[int,int]
  var i = sqrt(2*(limit-1)).toInt / 2
  stableSort((List[Coord]() /: (-i to i)){(lst, x) =&gt;
    (lst /: (-i to i)){(lst2, y) =&gt; (x,y)::lst2}
    }, {p:Coord =&gt; p match {case (x,y) =&gt;
    pow(x,2) + pow(y,2) +
    ((d:double)=&gt;{if(d&lt;0){d+360}else{d}})(atan2(y,x)*180/PI)/360
  }}){v=&gt;v}
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3309/addtag/" class="addtag" id="addtag_3309">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3309/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3309/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3309"
  >-</span><span
  class="button yellow"
  id="rating_z_3309"
  >0</span><span 
  class="button green"
  id="rating_p_3309"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3309/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3313">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/304/" target="_top">[1..100]&gt;&gt;=pen</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/">#3313</a>(<script language="JavaScript">print_time(new Date("2007/10/12 17:37 GMT"));</script><noscript>2007/10/12 17:37 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>#3312 はログインせずに投稿していました。投稿し直し。
---

Haskell でラマヌジャン数を小さい順に列挙するときなどに
使われる手法を用いています。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">List</span> <span class="p">(</span><span class="nv">groupBy</span><span class="p">)</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="nv">print</span>
  <span class="o">$</span> <span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">concat</span>
  <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">rotate</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">fst</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">d1</span><span class="p">)</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">d2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">d1</span> <span class="o">==</span> <span class="nv">d2</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">msort</span> <span class="p">[[((</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span><span class="nv">x</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span><span class="nv">y</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span><span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]]</span> <span class="o">|</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]]</span>

<span class="nv">msort</span> <span class="p">((</span><span class="nv">z</span><span class="o">:</span><span class="nv">zs</span><span class="p">)</span><span class="o">:</span><span class="nv">zss</span><span class="p">)</span> <span class="o">=</span> <span class="nv">z</span><span class="o">:</span> <span class="nv">fsort</span> <span class="nv">zs</span> <span class="p">(</span><span class="nv">msort</span> <span class="nv">zss</span><span class="p">)</span>
<span class="nv">fsort</span> <span class="nv">zs</span><span class="o">@</span><span class="p">(</span><span class="nv">z</span><span class="o">@</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">d1</span><span class="p">)</span><span class="o">:</span><span class="nv">zs&#39;</span><span class="p">)</span> <span class="nv">ws</span><span class="o">@</span><span class="p">(</span><span class="nv">w</span><span class="o">@</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">d2</span><span class="p">)</span><span class="o">:</span><span class="nv">ws&#39;</span><span class="p">)</span>
  <span class="o">|</span> <span class="nv">d1</span> <span class="o">&lt;=</span> <span class="nv">d2</span> <span class="o">=</span> <span class="nv">z</span><span class="o">:</span> <span class="nv">fsort</span> <span class="nv">zs&#39;</span> <span class="nv">ws</span>
  <span class="o">|</span> <span class="nv">d1</span> <span class="o">&gt;</span>  <span class="nv">d2</span> <span class="o">=</span> <span class="nv">w</span><span class="o">:</span> <span class="nv">fsort</span> <span class="nv">zs</span>  <span class="nv">ws&#39;</span>

<span class="nv">rotate</span> <span class="nv">zs</span> <span class="o">=</span> <span class="nv">zs&#39;</span> <span class="o">++</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">))</span> <span class="nv">zs&#39;</span> <span class="kr">where</span>
  <span class="nv">zs&#39;</span> <span class="o">=</span> <span class="nv">zs</span> <span class="o">++</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">))</span> <span class="nv">zs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/addtag/" class="addtag" id="addtag_3313">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3313"
  >-</span><span
  class="button yellow"
  id="rating_z_3313"
  >0</span><span 
  class="button green"
  id="rating_p_3313"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/">
    2
    replies
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3313/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3314">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/424/" target="_top">satooM</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3314/">#3314</a>(<script language="JavaScript">print_time(new Date("2007/10/12 23:44 GMT"));</script><noscript>2007/10/12 23:44 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>美しい…。感動しました。

蛇足ですが、8行目を
  $ tail $ msort [[((x,y),x^2+y^2)| x &lt;- [y..]] | y &lt;- [0..]]

rotateを
rotate zs = zs''' where
  zs'   = zs   ++ reverse [(y,x) | (x,y) &lt;- zs, y /= 0, x /= y]
  zs''  = zs'  ++ map (\(x,y) -&gt; (-y,x)) zs'
  zs''' = zs'' ++ map (\(x,y) -&gt; (-x,-y)) zs''

とすると高速化が図れますね。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3314/addtag/" class="addtag" id="addtag_3314">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3314"
  >-</span><span
  class="button yellow"
  id="rating_z_3314"
  >0</span><span 
  class="button green"
  id="rating_p_3314"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3314/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3314/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  <br/>

  
  




<div class="comment" id="comment3467">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/136/" target="_top">matarillo</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3467/">#3467</a>(<script language="JavaScript">print_time(new Date("2007/10/19 10:19 GMT"));</script><noscript>2007/10/19 10:19 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>CompareTo()を修正したので、1000番目は(-8, 16)になりました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConsoleApplication1</span>
<span class="k">{</span>
  <span class="k">class</span> <span class="nc">Program</span>
  <span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="n">SortedList</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">,</span> <span class="n">LatticePoint</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">,</span> <span class="n">LatticePoint</span><span class="p">&gt;();</span>
      <span class="n">LatticePoint</span> <span class="n">origin</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
      <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">origin</span><span class="p">,</span> <span class="n">origin</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">count</span> <span class="p">&lt;</span> <span class="m">1000</span><span class="p">)</span>
      <span class="k">{</span>
        <span class="n">LatticePoint</span> <span class="n">point</span> <span class="p">=</span> <span class="n">list</span><span class="p">.</span><span class="n">Keys</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
        <span class="n">list</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">LatticePoint</span> <span class="n">p</span> <span class="k">in</span> <span class="n">point</span><span class="p">.</span><span class="n">GetRotatedPoints</span><span class="p">())</span>
        <span class="k">{</span>
          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}: {1}&quot;</span><span class="p">,</span> <span class="p">++</span><span class="n">count</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">LatticePoint</span> <span class="n">p</span> <span class="k">in</span> <span class="n">point</span><span class="p">.</span><span class="n">GetNeighborhood</span><span class="p">())</span>
        <span class="k">{</span>
          <span class="k">if</span> <span class="p">(!(</span><span class="n">list</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">p</span><span class="p">)))</span>
          <span class="k">{</span>
            <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">p</span><span class="p">);</span>
          <span class="k">}</span>
        <span class="k">}</span>
      <span class="k">}</span>
      <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">();</span>
    <span class="k">}</span>
  <span class="k">}</span>
  <span class="k">struct</span> <span class="nc">LatticePoint</span> <span class="p">:</span> <span class="n">IEquatable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;,</span> <span class="n">IComparable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;</span>
  <span class="k">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">X</span><span class="p">;</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Y</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LatticePoint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">this</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}, {1}&quot;</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">if</span> <span class="p">(!(</span><span class="n">obj</span> <span class="k">is</span> <span class="n">LatticePoint</span><span class="p">))</span>
      <span class="k">{</span>
        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
      <span class="k">}</span>
      <span class="k">return</span> <span class="n">Equals</span><span class="p">((</span><span class="n">LatticePoint</span><span class="p">)</span><span class="n">obj</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">LatticePoint</span> <span class="n">p</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">X</span> <span class="p">==</span> <span class="n">X</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">Y</span> <span class="p">==</span> <span class="n">Y</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="n">X</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">()</span> <span class="p">*</span> <span class="m">31</span> <span class="p">+</span> <span class="n">Y</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="p">==(</span><span class="n">LatticePoint</span> <span class="n">p1</span><span class="p">,</span> <span class="n">LatticePoint</span> <span class="n">p2</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="n">p1</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="p">!=(</span><span class="n">LatticePoint</span> <span class="n">p1</span><span class="p">,</span> <span class="n">LatticePoint</span> <span class="n">p2</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="p">!</span><span class="n">p1</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">p2</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">long</span> <span class="n">SquaredSum</span>
    <span class="k">{</span>
      <span class="k">get</span>
      <span class="k">{</span>
        <span class="kt">long</span> <span class="n">x2</span> <span class="p">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">X</span> <span class="p">*</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">X</span><span class="p">;</span>
        <span class="kt">long</span> <span class="n">y2</span> <span class="p">=</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">Y</span> <span class="p">*</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">Y</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">x2</span> <span class="p">+</span> <span class="n">y2</span><span class="p">;</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="nf">CompareTo</span><span class="p">(</span><span class="n">LatticePoint</span> <span class="n">other</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="kt">long</span> <span class="n">r2</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">SquaredSum</span> <span class="p">-</span> <span class="n">other</span><span class="p">.</span><span class="n">SquaredSum</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">r2</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">r2</span><span class="p">;</span>
      <span class="kt">bool</span> <span class="n">f1</span> <span class="p">=</span> <span class="p">(</span><span class="n">other</span><span class="p">.</span><span class="n">Y</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">);</span>
      <span class="kt">bool</span> <span class="n">f2</span> <span class="p">=</span> <span class="p">!((</span><span class="k">this</span><span class="p">.</span><span class="n">Y</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span> <span class="p">^</span> <span class="n">f1</span><span class="p">);</span>
      <span class="k">return</span> <span class="p">(</span><span class="n">f1</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="p">-</span><span class="m">1</span><span class="p">)</span> <span class="p">*</span> <span class="p">(</span><span class="n">f2</span> <span class="p">?</span> <span class="k">this</span><span class="p">.</span><span class="n">X</span> <span class="p">-</span> <span class="n">other</span><span class="p">.</span><span class="n">X</span> <span class="p">:</span> <span class="m">1</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;</span> <span class="n">GetNeighborhood</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="n">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">X</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">Y</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">X</span> <span class="p">&gt;</span> <span class="n">Y</span><span class="p">)</span>
      <span class="k">{</span>
        <span class="n">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">Y</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">LatticePoint</span> <span class="nf">RotateSquare</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(-</span><span class="n">Y</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">LatticePoint</span><span class="p">&gt;</span> <span class="n">GetRotatedPoints</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">if</span> <span class="p">((</span><span class="n">X</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">Y</span> <span class="p">==</span> <span class="m">0</span><span class="p">))</span>
      <span class="k">{</span>
        <span class="n">yield</span> <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
        <span class="n">yield</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">}</span>
      <span class="n">LatticePoint</span> <span class="n">p</span> <span class="p">=</span> <span class="k">this</span><span class="p">;</span>
      <span class="n">LatticePoint</span> <span class="n">f</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">Y</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span>
      <span class="n">LatticePoint</span> <span class="n">r</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">RotateSquare</span><span class="p">();</span>
      <span class="kt">bool</span> <span class="n">withFlip</span> <span class="p">=</span> <span class="p">((</span><span class="n">p</span> <span class="p">!=</span> <span class="n">f</span><span class="p">)</span> <span class="p">&amp;&amp;</span> <span class="p">(</span><span class="n">f</span> <span class="p">!=</span> <span class="n">r</span><span class="p">));</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
      <span class="k">{</span>
        <span class="n">yield</span> <span class="k">return</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">p</span> <span class="p">=</span> <span class="n">p</span><span class="p">.</span><span class="n">RotateSquare</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">withFlip</span><span class="p">)</span>
        <span class="k">{</span>
          <span class="n">yield</span> <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
          <span class="n">f</span> <span class="p">=</span> <span class="n">f</span><span class="p">.</span><span class="n">RotateSquare</span><span class="p">();</span>
        <span class="k">}</span>
      <span class="k">}</span>
    <span class="k">}</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3467/addtag/" class="addtag" id="addtag_3467">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3467/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3467/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3467"
  >-</span><span
  class="button yellow"
  id="rating_z_3467"
  >0</span><span 
  class="button green"
  id="rating_p_3467"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3467/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3540">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3540/">#3540</a>(<script language="JavaScript">print_time(new Date("2007/10/27 09:34 GMT"));</script><noscript>2007/10/27 09:34 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>三角波を使って生成。
1,000番目は 8, -14 でいいのかな。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="nv">triangle_wave</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">triangle_wave</span> <span class="nv">i</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">abs</span><span class="p">(</span><span class="nv">i</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="p">(</span><span class="nv">n</span> <span class="o">*</span> <span class="mi">4</span><span class="p">)</span> <span class="o">-</span> <span class="nv">n</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-</span> <span class="nv">n</span>

<span class="nv">n_grids</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span>
<span class="nv">n_grids</span> <span class="mi">0</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>
<span class="nv">n_grids</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">triangle_wave</span> <span class="nv">x</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">triangle_wave</span> <span class="p">(</span><span class="nv">x</span> <span class="o">-</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">n</span><span class="p">))</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nv">n</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span>

<span class="nv">grids</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)]</span>
<span class="nv">grids</span> <span class="o">=</span> <span class="nv">concat</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">n_grids</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="nv">print</span> <span class="o">$</span> <span class="nv">take</span> <span class="mi">1000</span> <span class="nv">grids</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3540/addtag/" class="addtag" id="addtag_3540">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3540/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3540/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3540"
  >-</span><span
  class="button yellow"
  id="rating_z_3540"
  >0</span><span 
  class="button green"
  id="rating_p_3540"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/3540/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3540/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3541">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3541/">#3541</a>(<script language="JavaScript">print_time(new Date("2007/10/27 09:56 GMT"));</script><noscript>2007/10/27 09:56 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>あれ、よく見ると問題の主旨にあっていない。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3541/addtag/" class="addtag" id="addtag_3541">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3541"
  >-</span><span
  class="button yellow"
  id="rating_z_3541"
  >0</span><span 
  class="button green"
  id="rating_p_3541"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3540/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3541/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3541/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3589">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3589/">#3589</a>(<script language="JavaScript">print_time(new Date("2007/10/30 06:52 GMT"));</script><noscript>2007/10/30 06:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>多めに取っておく
（1000個の格子点は半径18以内にある）

        [,1] [,2]      [,3]
   [1,]    0    0  0.000000
   [2,]   -1    0  1.000000
   [3,]    0   -1  1.000000
   [4,]    0    1  1.000000
   [5,]    1    0  1.000000
   [6,]   -1   -1  1.414214
   [7,]   -1    1  1.414214
   [8,]    1   -1  1.414214
   [9,]    1    1  1.414214
  [10,]   -2    0  2.000000
中略 
 [995,]   11   14 17.804494
 [996,]   14  -11 17.804494
 [997,]   14   11 17.804494
 [998,]  -16   -8 17.888544
 [999,]  -16    8 17.888544
[1000,]   -8  -16 17.888544
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3</pre></td><td class="code"><div class="highlight"><pre>d &lt;- outer(-25:25, -25:25, function(i, j) sqrt(i^2+j^2))
o &lt;- order(d)
cbind(rep(-25:25, each=51)[o], rep(-25:25, 51)[o], d[o])[1:1000,]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3589/addtag/" class="addtag" id="addtag_3589">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3589/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3589/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3589"
  >-</span><span
  class="button yellow"
  id="rating_z_3589"
  >0</span><span 
  class="button green"
  id="rating_p_3589"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3589/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3590">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3590/">#3590</a>(<script language="JavaScript">print_time(new Date("2007/10/30 06:53 GMT"));</script><noscript>2007/10/30 06:53 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>多めに取っておく
（1000個の格子点は半径18以内にある）

        [,1] [,2]      [,3]
   [1,]    0    0  0.000000
   [2,]   -1    0  1.000000
   [3,]    0   -1  1.000000
   [4,]    0    1  1.000000
   [5,]    1    0  1.000000
   [6,]   -1   -1  1.414214
   [7,]   -1    1  1.414214
   [8,]    1   -1  1.414214
   [9,]    1    1  1.414214
  [10,]   -2    0  2.000000
中略 
 [995,]   11   14 17.804494
 [996,]   14  -11 17.804494
 [997,]   14   11 17.804494
 [998,]  -16   -8 17.888544
 [999,]  -16    8 17.888544
[1000,]   -8  -16 17.888544
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3</pre></td><td class="code"><div class="highlight"><pre>d &lt;- outer(-25:25, -25:25, function(i, j) sqrt(i^2+j^2))
o &lt;- order(d)
cbind(rep(-25:25, each=51)[o], rep(-25:25, 51)[o], d[o])[1:1000,]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3590/addtag/" class="addtag" id="addtag_3590">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3590/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3590/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3590"
  >-</span><span
  class="button yellow"
  id="rating_z_3590"
  >0</span><span 
  class="button green"
  id="rating_p_3590"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3590/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3607">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/490/" target="_top">ぴょん</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/">#3607</a>(<script language="JavaScript">print_time(new Date("2007/10/30 19:16 GMT"));</script><noscript>2007/10/30 19:16 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>Perl がなかったので。力技。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$PI</span> <span class="o">=</span> <span class="nb">atan2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">4</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$MAXR</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">sqrt</span><span class="p">(</span><span class="mi">1000</span> <span class="o">/</span> <span class="nv">$PI</span><span class="p">)</span> <span class="o">+</span> <span class="nb">sqrt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">@res</span> <span class="o">=</span> <span class="p">();</span>

<span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">$MAXR</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;=</span> <span class="nv">$MAXR</span><span class="p">;</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$r</span> <span class="o">=</span> <span class="nb">sqrt</span><span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="nv">$i</span> <span class="o">+</span> <span class="nv">$j</span> <span class="o">*</span> <span class="nv">$j</span><span class="p">);</span>
        <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$i</span><span class="p">)]);</span>
        <span class="p">(</span><span class="nv">$i</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="nv">$j</span><span class="p">,</span> <span class="o">-</span><span class="nv">$i</span><span class="p">)]);</span>
        <span class="p">(</span><span class="nv">$j</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="nv">$i</span><span class="p">,</span> <span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$PI</span><span class="p">]);</span>
        <span class="p">(</span><span class="nv">$i</span> <span class="o">*</span> <span class="nv">$j</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">push</span><span class="p">(</span><span class="nv">@res</span><span class="p">,</span> <span class="p">[</span><span class="o">-</span><span class="nv">$i</span><span class="p">,</span> <span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="nv">$r</span><span class="p">,</span> <span class="nb">atan2</span><span class="p">(</span><span class="o">-</span><span class="nv">$j</span><span class="p">,</span> <span class="o">-</span><span class="nv">$i</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">*</span> <span class="nv">$PI</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">foreach</span> <span class="k">my</span> <span class="nv">$p</span> <span class="p">(</span><span class="nb">sort</span> <span class="p">{(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">||</span> <span class="p">(</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">3</span><span class="p">])}</span> <span class="nv">@res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">printf</span><span class="p">(</span><span class="s">&quot;%3d, %3d\n&quot;</span><span class="p">,</span> <span class="nb">splice</span><span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$p</span><span class="p">},</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/addtag/" class="addtag" id="addtag_3607">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3607"
  >-</span><span
  class="button yellow"
  id="rating_z_3607"
  >0</span><span 
  class="button green"
  id="rating_p_3607"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3421/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3607/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3607/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3628">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3628/">#3628</a>(<script language="JavaScript">print_time(new Date("2007/10/31 13:33 GMT"));</script><noscript>2007/10/31 13:33 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ソート部分は単純なものを採用。
今はR，昔は awk を使っていたもので，R のプログラムと同様。でも，R は遙かに楽だなあ。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre>BEGIN {
    n = 0
    for (i = -18; i &lt;= 18; i++) {
        for (j = -18; j &lt;= 18; j++) {
            x[n] = i
            y[n] = j
            d[n++] = sqrt(i^2+j^2)
        }
    }
    for (i = 0; i &lt; n-1; i++) {
        mini = d[i]
        minp = i
        for (j = i+1; j &lt; n; j++) {
            if (d[j] &lt; mini) {
                mini = d[j]
                minp = j
            }
        }
        if (i != minp) {
            d[minp] = d[i]
            d[i] = mini
            t = x[i]
            x[i] = x[minp]
            x[minp] = t
            t = y[i]
            y[i] = y[minp]
            y[minp] = t
        }
    }
    printf &quot;%4s %3s %3s %10s\n&quot;, &quot;No.&quot;, &quot;x&quot;, &quot;y&quot;, &quot;r&quot;
    for (i = 0; i &lt; 1000; i++) {
        printf &quot;%4i: %3i %3i %10.6f\n&quot;, i+1, x[i], y[i], d[i]
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3628/addtag/" class="addtag" id="addtag_3628">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3628/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3628/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3628"
  >-</span><span
  class="button yellow"
  id="rating_z_3628"
  >0</span><span 
  class="button green"
  id="rating_p_3628"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3628/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3646">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/304/" target="_top">[1..100]&gt;&gt;=pen</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3646/">#3646</a>(<script language="JavaScript">print_time(new Date("2007/11/01 10:08 GMT"));</script><noscript>2007/11/01 10:08 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>遅延評価を使わないバージョン。

(1,0)--&gt;(1,1)--&gt;(1,2)--&gt;(1,3)--&gt;...
     +-&gt;(2,0)--&gt;(2,1)-&gt;(2,2)-&gt;(2,3)-&gt;...
             +-&gt;(3,0)-&gt;(3,1)-&gt;(3,2)-&gt;(3,3)-&gt;...
                ...
という tree を走査する。

oceanさんの #3256 と多分本質部分は同じ。（Python 勉強してないので自信なし）
「議席数をドント方式で」の#1439（基はにしおさんの#1214）とも通じるところがある。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Graph</span><span class="o">.</span><span class="n">Inductive</span><span class="o">.</span><span class="n">Internal</span><span class="o">.</span><span class="n">Heap</span> <span class="p">(</span><span class="nv">empty</span><span class="p">,</span> <span class="nv">insert</span><span class="p">,</span> <span class="nv">splitMin</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">List</span> <span class="p">(</span><span class="nv">unfoldr</span><span class="p">,</span> <span class="nv">groupBy</span><span class="p">)</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="nv">print</span>
  <span class="o">$</span> <span class="p">((</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">concat</span>
  <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">rotate</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">fst</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">d1</span><span class="p">)</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">d2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">d1</span> <span class="o">==</span> <span class="nv">d2</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">unfoldr</span> <span class="nv">f</span>
  <span class="o">$</span> <span class="nv">insertPs</span> <span class="p">[(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span> <span class="nv">empty</span>

<span class="nv">f</span> <span class="nv">heap</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">((</span><span class="nv">p</span><span class="p">,</span><span class="nv">d</span><span class="p">),</span> <span class="nv">heap&#39;&#39;</span><span class="p">)</span> <span class="kr">where</span>
  <span class="p">((</span><span class="nv">d</span><span class="p">,</span><span class="kr">_</span><span class="p">),</span> <span class="nv">p</span><span class="o">@</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span> <span class="nv">heap&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">splitMin</span> <span class="nv">heap</span>
  <span class="nv">children</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span> <span class="o">++</span> <span class="kr">if</span> <span class="p">(</span><span class="nv">y</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="kr">then</span> <span class="p">[]</span> <span class="kr">else</span> <span class="p">[(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span>
  <span class="nv">heap&#39;&#39;</span> <span class="o">=</span> <span class="nv">insertPs</span> <span class="nv">children</span> <span class="nv">heap&#39;</span>

<span class="nv">insertPs</span> <span class="nv">ps</span> <span class="nv">heap</span> <span class="o">=</span> <span class="nv">foldr</span> <span class="nv">insert</span> <span class="nv">heap</span>
  <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">((</span><span class="nv">x</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span><span class="nv">y</span><span class="o">^</span><span class="mi">2</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)))</span> <span class="nv">ps</span>

<span class="nv">rotate</span> <span class="nv">zs</span> <span class="o">=</span> <span class="kr">let</span>
  <span class="nv">zs&#39;</span> <span class="o">=</span> <span class="nv">zs</span> <span class="o">++</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">))</span> <span class="nv">zs</span>
  <span class="nv">zs&#39;&#39;</span> <span class="o">=</span> <span class="nv">zs&#39;</span> <span class="o">++</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">))</span> <span class="nv">zs&#39;</span>
  <span class="kr">in</span> <span class="nv">zs&#39;&#39;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3646/addtag/" class="addtag" id="addtag_3646">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3646/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/3646/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3646"
  >-</span><span
  class="button yellow"
  id="rating_z_3646"
  >0</span><span 
  class="button green"
  id="rating_p_3646"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3313/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/3646/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3646/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3995">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/497/" target="_top">Otter</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3995/">#3995</a>(<script language="JavaScript">print_time(new Date("2007/11/14 05:55 GMT"));</script><noscript>2007/11/14 05:55 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>「反時計回り」の定義ですが、ある点の次に出てくる点はその点に最も近く、
かつ今まで出現していない点の中で一番原点に近いものと解釈するべきですよね？
だとしたら、
( 0, 0)
( 1, 0)
( 0, 1)
(-1, 0)
( 0,-1)
の次にくる座標は
( 1, 1)ではなく、（1, -1)のほうが正しいのでは？

この違いが１０００番目の座標に影響を及ぼすかはまだ理解していないのですが…
まぁ、サンプルがそうなってはいないので、ここでの解釈は違う？</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/3995/addtag/" class="addtag" id="addtag_3995">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3995"
  >-</span><span
  class="button yellow"
  id="rating_z_3995"
  >0</span><span 
  class="button green"
  id="rating_p_3995"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/3995/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4025">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/554/" target="_top">Psychs</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4025/">#4025</a>(<script language="JavaScript">print_time(new Date("2007/11/14 14:07 GMT"));</script><noscript>2007/11/14 14:07 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/objectivec/">
	  Objective-C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>あらかじめ点の配列を作っておいてソートするという力業。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@interface</span> <span class="nc">MyPoint</span> : <span class="nc">NSObject</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">distance</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">+</span> <span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="nl">pointWithX:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span> <span class="nl">y:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">distance</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">NSComparisonResult</span><span class="p">)</span><span class="nl">compareWithPoint:</span><span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="n">rhs</span><span class="p">;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">MyPoint</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span> <span class="p">}</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span> <span class="p">{</span> <span class="k">return</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">distance</span> <span class="p">{</span> <span class="k">return</span> <span class="n">distance</span><span class="p">;</span> <span class="p">}</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setX:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">px</span> <span class="nl">y:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">py</span>
<span class="p">{</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">px</span><span class="p">;</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">py</span><span class="p">;</span>
  <span class="n">distance</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">+</span> <span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="nl">pointWithX:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span> <span class="nl">y:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span>
<span class="p">{</span>
  <span class="n">MyPoint</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">MyPoint</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
  <span class="p">[</span><span class="n">obj</span> <span class="nl">setX:</span><span class="n">x</span> <span class="nl">y:</span><span class="n">y</span><span class="p">];</span>
  <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">-</span> <span class="p">(</span><span class="n">NSComparisonResult</span><span class="p">)</span><span class="nl">compareWithPoint:</span><span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="n">rhs</span>
<span class="p">{</span>
  <span class="kt">long</span> <span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="n">rhs</span> <span class="n">distance</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&lt;</span> <span class="n">d</span><span class="p">)</span> <span class="k">return</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">)</span> <span class="k">return</span> <span class="n">NSOrderedDescending</span><span class="p">;</span>
  
  <span class="kt">int</span> <span class="n">rx</span> <span class="o">=</span> <span class="p">[</span><span class="n">rhs</span> <span class="n">x</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">ry</span> <span class="o">=</span> <span class="p">[</span><span class="n">rhs</span> <span class="n">y</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ry</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">rx</span> <span class="o">?</span> <span class="n">NSOrderedDescending</span> <span class="o">:</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ry</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">NSOrderedDescending</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">rx</span> <span class="o">?</span> <span class="n">NSOrderedAscending</span> <span class="o">:</span> <span class="n">NSOrderedDescending</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">@end</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">NSAutoreleasePool</span><span class="o">*</span> <span class="n">pool</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSAutoreleasePool</span> <span class="n">new</span><span class="p">];</span>
  
  <span class="n">NSMutableArray</span><span class="o">*</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=-</span><span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=-</span><span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
      <span class="p">[</span><span class="n">input</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">MyPoint</span> <span class="nl">pointWithX:</span><span class="n">i</span> <span class="nl">y:</span><span class="n">j</span><span class="p">]];</span>

  <span class="n">NSArray</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">input</span> <span class="nl">sortedArrayUsingSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">compareWithPoint:</span><span class="p">)];</span>
  
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;count: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">result</span> <span class="n">count</span><span class="p">]);</span>
  <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">p</span> <span class="n">in</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d, %3d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">x</span><span class="p">],</span> <span class="p">[</span><span class="n">p</span> <span class="n">y</span><span class="p">]);</span>
    <span class="n">i</span><span class="o">++</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="p">[</span><span class="n">pool</span> <span class="n">release</span><span class="p">];</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4025/addtag/" class="addtag" id="addtag_4025">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/objectivec/">
		Objective-C
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4025/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4025/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4025"
  >-</span><span
  class="button yellow"
  id="rating_z_4025"
  >0</span><span 
  class="button green"
  id="rating_p_4025"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100612150759/http://ja.doukaku.org/comment/4025/">
    1
    reply
  </a>

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/4025/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4028">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/554/" target="_top">Psychs</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4028/">#4028</a>(<script language="JavaScript">print_time(new Date("2007/11/14 15:08 GMT"));</script><noscript>2007/11/14 15:08 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/objectivec/">
	  Objective-C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>デバッグ用のコードが残っていたので削除しました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#import &lt;Foundation/Foundation.h&gt;</span>

<span class="k">@interface</span> <span class="nc">MyPoint</span> : <span class="nc">NSObject</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
  <span class="kt">long</span> <span class="n">distance</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">+</span> <span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="nl">pointWithX:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span> <span class="nl">y:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">distance</span><span class="p">;</span>
<span class="o">-</span> <span class="p">(</span><span class="n">NSComparisonResult</span><span class="p">)</span><span class="nl">compareWithPoint:</span><span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="n">rhs</span><span class="p">;</span>

<span class="k">@end</span>

<span class="k">@implementation</span> <span class="nc">MyPoint</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span> <span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="p">;</span> <span class="p">}</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span> <span class="p">{</span> <span class="k">return</span> <span class="n">y</span><span class="p">;</span> <span class="p">}</span>
<span class="o">-</span> <span class="p">(</span><span class="kt">long</span><span class="p">)</span><span class="n">distance</span> <span class="p">{</span> <span class="k">return</span> <span class="n">distance</span><span class="p">;</span> <span class="p">}</span>

<span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setX:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">px</span> <span class="nl">y:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">py</span>
<span class="p">{</span>
  <span class="n">x</span> <span class="o">=</span> <span class="n">px</span><span class="p">;</span>
  <span class="n">y</span> <span class="o">=</span> <span class="n">py</span><span class="p">;</span>
  <span class="n">distance</span> <span class="o">=</span> <span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="o">*</span><span class="n">y</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">+</span> <span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="nl">pointWithX:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">x</span> <span class="nl">y:</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">y</span>
<span class="p">{</span>
  <span class="n">MyPoint</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">MyPoint</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
  <span class="p">[</span><span class="n">obj</span> <span class="nl">setX:</span><span class="n">x</span> <span class="nl">y:</span><span class="n">y</span><span class="p">];</span>
  <span class="k">return</span> <span class="n">obj</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">-</span> <span class="p">(</span><span class="n">NSComparisonResult</span><span class="p">)</span><span class="nl">compareWithPoint:</span><span class="p">(</span><span class="n">MyPoint</span><span class="o">*</span><span class="p">)</span><span class="n">rhs</span>
<span class="p">{</span>
  <span class="kt">long</span> <span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="n">rhs</span> <span class="n">distance</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&lt;</span> <span class="n">d</span><span class="p">)</span> <span class="k">return</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">distance</span> <span class="o">&gt;</span> <span class="n">d</span><span class="p">)</span> <span class="k">return</span> <span class="n">NSOrderedDescending</span><span class="p">;</span>
  
  <span class="kt">int</span> <span class="n">rx</span> <span class="o">=</span> <span class="p">[</span><span class="n">rhs</span> <span class="n">x</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">ry</span> <span class="o">=</span> <span class="p">[</span><span class="n">rhs</span> <span class="n">y</span><span class="p">];</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ry</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">rx</span> <span class="o">?</span> <span class="n">NSOrderedDescending</span> <span class="o">:</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">NSOrderedAscending</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ry</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">NSOrderedDescending</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">rx</span> <span class="o">?</span> <span class="n">NSOrderedAscending</span> <span class="o">:</span> <span class="n">NSOrderedDescending</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="k">@end</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">NSAutoreleasePool</span><span class="o">*</span> <span class="n">pool</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSAutoreleasePool</span> <span class="n">new</span><span class="p">];</span>
  
  <span class="n">NSMutableArray</span><span class="o">*</span> <span class="n">input</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=-</span><span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">r</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">j</span><span class="o">=-</span><span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">r</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">[</span><span class="n">input</span> <span class="nl">addObject:</span><span class="p">[</span><span class="n">MyPoint</span> <span class="nl">pointWithX:</span><span class="n">i</span> <span class="nl">y:</span><span class="n">j</span><span class="p">]];</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">NSArray</span><span class="o">*</span> <span class="n">result</span> <span class="o">=</span> <span class="p">[</span><span class="n">input</span> <span class="nl">sortedArrayUsingSelector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">compareWithPoint:</span><span class="p">)];</span>
  
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;count: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">result</span> <span class="n">count</span><span class="p">]);</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">id</span> <span class="n">p</span> <span class="n">in</span> <span class="n">result</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%3d, %3d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">p</span> <span class="n">x</span><span class="p">],</span> <span class="p">[</span><span class="n">p</span> <span class="n">y</span><span class="p">]);</span>
  <span class="p">}</span>
  
  <span class="p">[</span><span class="n">pool</span> <span class="n">release</span><span class="p">];</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4028/addtag/" class="addtag" id="addtag_4028">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/objectivec/">
		Objective-C
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4028/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4028/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4028"
  >-</span><span
  class="button yellow"
  id="rating_z_4028"
  >0</span><span 
  class="button green"
  id="rating_p_4028"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/4025/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100612150759/http://ja.doukaku.org/comment/4028/root/"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/4028/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4035">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/533/" target="_top">yappy</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4035/">#4035</a>(<script language="JavaScript">print_time(new Date("2007/11/14 18:54 GMT"));</script><noscript>2007/11/14 18:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  個数をコマンドラインパラメータにして、きりのいいところの点のみstderrにも出力するようにしました。<br/><br/>Windows&nbsp;XP&nbsp;+&nbsp;cygwin<br/>800Mhz&nbsp;512MB<br/>100000個めまでで0.7sくらい<br/>1000000個めまでで10sくらい<br/>10000000個めまでで2m12sくらい<br/><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1:&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;10:&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;100:&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;-4,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-4)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1000:&nbsp;(&nbsp;&nbsp;&nbsp;&nbsp;-8,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16)<br/>&nbsp;&nbsp;&nbsp;&nbsp;10000:&nbsp;(&nbsp;&nbsp;&nbsp;-34,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;45)<br/>&nbsp;&nbsp;&nbsp;100000:&nbsp;(&nbsp;&nbsp;&nbsp;132,&nbsp;&nbsp;&nbsp;-120)<br/>&nbsp;&nbsp;1000000:&nbsp;(&nbsp;&nbsp;&nbsp;497,&nbsp;&nbsp;&nbsp;-267)<br/>&nbsp;10000000:&nbsp;(&nbsp;&nbsp;&nbsp;474,&nbsp;&nbsp;-1720)<br/><br/>正直なところ、間違ってないかすごく怖いので、だれか他の人もやってみてほしいです。<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;math.h&gt;</span>
<span class="cp">#define PI 3.14159265358979</span>

<span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">len2</span><span class="p">;</span>
    <span class="kt">double</span> <span class="n">theta</span><span class="p">;</span>
<span class="p">}</span> <span class="n">POINT</span><span class="p">;</span>

<span class="n">POINT</span> <span class="o">*</span><span class="n">points</span><span class="p">;</span>
<span class="n">POINT</span> <span class="o">**</span><span class="n">pPoints</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">compair</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_a</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_b</span><span class="p">){</span>
    <span class="n">POINT</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">POINT</span> <span class="o">**</span><span class="p">)</span><span class="n">_a</span><span class="p">;</span>
    <span class="n">POINT</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">POINT</span> <span class="o">**</span><span class="p">)</span><span class="n">_b</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">len2</span> <span class="o">!=</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">len2</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">len2</span> <span class="o">-</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">len2</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">-&gt;</span><span class="n">theta</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">theta</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">ind</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">n</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">*</span> <span class="mi">3</span> <span class="o">&gt;</span> <span class="n">n</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="n">max</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">max</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span>
    <span class="n">points</span> <span class="o">=</span> <span class="p">(</span><span class="n">POINT</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">POINT</span><span class="p">)</span> <span class="o">*</span> <span class="n">size</span><span class="p">);</span>
    <span class="n">pPoints</span> <span class="o">=</span> <span class="p">(</span><span class="n">POINT</span> <span class="o">**</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">POINT</span> <span class="o">*</span><span class="p">)</span> <span class="o">*</span> <span class="n">size</span><span class="p">);</span>
    <span class="n">ind</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=-</span><span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;=</span><span class="n">max</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=-</span><span class="n">max</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;=</span><span class="n">max</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">){</span>
            <span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">x</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">y</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
            <span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">len2</span> <span class="o">=</span> <span class="n">i</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="n">j</span><span class="o">*</span><span class="n">j</span><span class="p">;</span>
            <span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">theta</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">j</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">atan2</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
            <span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">theta</span> <span class="o">+=</span> <span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">].</span><span class="n">theta</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">PI</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">pPoints</span><span class="p">[</span><span class="n">ind</span><span class="p">]</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">points</span><span class="p">[</span><span class="n">ind</span><span class="p">];</span>
            <span class="n">ind</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">qsort</span><span class="p">(</span><span class="n">pPoints</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">POINT</span> <span class="o">*</span><span class="p">),</span> <span class="o">&amp;</span><span class="n">compair</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d, %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">pPoints</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">,</span> <span class="n">pPoints</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">);</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">){</span>
        <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">10</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">100</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">1000</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">10000</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">100000</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">1000000</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">10000000</span><span class="o">:</span>
        <span class="k">case</span> <span class="mi">100000000</span><span class="o">:</span>
            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;%9d: (%6d, %6d)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">pPoints</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">x</span><span class="p">,</span> <span class="n">pPoints</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">y</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">free</span><span class="p">(</span><span class="n">pPoints</span><span class="p">);</span>
    <span class="n">free</span><span class="p">(</span><span class="n">points</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4035/addtag/" class="addtag" id="addtag_4035">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4035/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4035/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4035"
  >-</span><span
  class="button yellow"
  id="rating_z_4035"
  >0</span><span 
  class="button green"
  id="rating_p_4035"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/4035/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4694">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/601/" target="_top">れい</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4694/">#4694</a>(<script language="JavaScript">print_time(new Date("2007/12/09 07:01 GMT"));</script><noscript>2007/12/09 07:01 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/vbnet/">
	  VB.net
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>少しメモリ消費量とか速度を考えて。
1000番目は(-8,16)、
1000000番目は(497,-267)、
100000000番目は(5554,-992)。
計算時間は200秒くらい。

もっと頭いい方法がありそうな。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159</pre></td><td class="code"><div class="highlight"><pre><span class="k">Module</span> <span class="n">Module1</span>

    <span class="k">Sub</span> <span class="n">Main</span><span class="p">()</span>
        <span class="k">Dim</span> <span class="n">e</span> <span class="ow">As</span> <span class="n">IEnumerator</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span> <span class="o">=</span> <span class="k">New</span> <span class="n">LatticePointEnumerator</span><span class="p">()</span>
        <span class="k">Dim</span> <span class="n">i</span> <span class="ow">As</span> <span class="kt">Integer</span>
        <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">To</span> <span class="mi">999</span>
            <span class="n">e</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>
        <span class="k">Next</span>
        <span class="n">e</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">&amp;</span> <span class="s">&quot;:&quot;</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>

        <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1001</span> <span class="k">To</span> <span class="mi">999999</span>
            <span class="n">e</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>
        <span class="k">Next</span>
        <span class="n">e</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">&amp;</span> <span class="s">&quot;:&quot;</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>

        <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1000001</span> <span class="k">To</span> <span class="mi">99999999</span>
            <span class="n">e</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>
        <span class="k">Next</span>
        <span class="n">e</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">ToString</span><span class="p">()</span> <span class="o">&amp;</span> <span class="s">&quot;:&quot;</span> <span class="o">&amp;</span> <span class="n">e</span><span class="p">.</span><span class="n">Current</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>

        <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">()</span>
    <span class="k">End</span> <span class="k">Sub</span>

<span class="k">End</span> <span class="k">Module</span>

<span class="k">Public</span> <span class="k">Class</span> <span class="nc">LatticePointEnumerator</span>
    <span class="k">Implements</span> <span class="n">IEnumerator</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>

    <span class="k">Private</span> <span class="n">_list</span> <span class="ow">As</span> <span class="n">LinkedList</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>
    <span class="k">Private</span> <span class="n">_r</span> <span class="ow">As</span> <span class="kt">Integer</span>
    <span class="k">Private</span> <span class="n">_pointlist</span> <span class="ow">As</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>
    <span class="k">Private</span> <span class="n">_enumerator</span> <span class="ow">As</span> <span class="n">IEnumerator</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>

    <span class="k">Public</span> <span class="k">Sub</span> <span class="k">New</span><span class="p">()</span>
        <span class="n">_list</span> <span class="o">=</span> <span class="k">New</span> <span class="n">LinkedList</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>
        <span class="n">_pointlist</span> <span class="o">=</span> <span class="k">New</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>
        <span class="n">Reset</span><span class="p">()</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Public</span> <span class="k">Sub</span> <span class="n">Reset</span><span class="p">()</span> <span class="k">Implements</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">.</span><span class="n">IEnumerator</span><span class="p">.</span><span class="n">Reset</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">Clear</span><span class="p">()</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>
        <span class="n">_r</span> <span class="o">=</span> <span class="mi">4</span>
        <span class="n">_pointlist</span><span class="p">.</span><span class="n">Clear</span><span class="p">()</span>
        <span class="n">_enumerator</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Public</span> <span class="k">ReadOnly</span> <span class="k">Property</span> <span class="n">Current</span><span class="p">()</span> <span class="ow">As</span> <span class="n">LatticePoint</span> <span class="k">Implements</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">.</span><span class="n">Generic</span><span class="p">.</span><span class="n">IEnumerator</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">).</span><span class="n">Current</span>
        <span class="k">Get</span>
            <span class="k">Return</span> <span class="n">_enumerator</span><span class="p">.</span><span class="n">Current</span>
        <span class="k">End</span> <span class="k">Get</span>
    <span class="k">End</span> <span class="k">Property</span>

    <span class="k">Public</span> <span class="k">ReadOnly</span> <span class="k">Property</span> <span class="n">Current1</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Object</span> <span class="k">Implements</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">.</span><span class="n">IEnumerator</span><span class="p">.</span><span class="n">Current</span>
        <span class="k">Get</span>
            <span class="k">Return</span> <span class="k">DirectCast</span><span class="p">(</span><span class="n">_enumerator</span><span class="p">,</span> <span class="n">IEnumerator</span><span class="p">).</span><span class="n">Current</span>
        <span class="k">End</span> <span class="k">Get</span>
    <span class="k">End</span> <span class="k">Property</span>

    <span class="k">Public</span> <span class="k">Function</span> <span class="n">MoveNext</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Boolean</span> <span class="k">Implements</span> <span class="n">System</span><span class="p">.</span><span class="n">Collections</span><span class="p">.</span><span class="n">IEnumerator</span><span class="p">.</span><span class="n">MoveNext</span>
        <span class="k">If</span> <span class="n">_enumerator</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span> <span class="k">Then</span> <span class="k">Return</span> <span class="k">True</span>

        <span class="k">If</span> <span class="n">_list</span><span class="p">.</span><span class="n">First</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">_r2</span> <span class="o">&gt;=</span> <span class="n">_r</span> <span class="o">*</span> <span class="n">_r</span> <span class="k">Then</span>
            <span class="k">Dim</span> <span class="n">node</span> <span class="ow">As</span> <span class="n">LinkedListNode</span><span class="p">(</span><span class="k">Of</span> <span class="n">LatticePoint</span><span class="p">)</span>
            <span class="k">Dim</span> <span class="n">p</span> <span class="ow">As</span> <span class="n">LatticePoint</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">_list</span><span class="p">.</span><span class="n">First</span>
            <span class="k">For</span> <span class="n">y</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">To</span> <span class="n">_r</span>
                <span class="n">p</span> <span class="o">=</span> <span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">_r</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
                <span class="k">While</span> <span class="n">node</span> <span class="ow">IsNot</span> <span class="k">Nothing</span> <span class="ow">AndAlso</span> <span class="n">p</span><span class="p">.</span><span class="n">_r2</span> <span class="o">&gt;</span> <span class="n">node</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">_r2</span>
                    <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">Next</span>
                <span class="k">End</span> <span class="k">While</span>
                <span class="k">If</span> <span class="n">node</span> <span class="ow">Is</span> <span class="k">Nothing</span> <span class="k">Then</span> <span class="n">_list</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="n">p</span><span class="p">)</span> <span class="k">Else</span> <span class="n">_list</span><span class="p">.</span><span class="n">AddBefore</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
            <span class="k">Next</span>
            <span class="n">_r</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">End</span> <span class="k">If</span>

        <span class="n">_pointlist</span><span class="p">.</span><span class="n">Clear</span><span class="p">()</span>
        <span class="n">_pointlist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">_list</span><span class="p">.</span><span class="n">First</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
        <span class="n">_list</span><span class="p">.</span><span class="n">RemoveFirst</span><span class="p">()</span>
        <span class="k">While</span> <span class="n">_list</span><span class="p">.</span><span class="n">First</span><span class="p">.</span><span class="n">Value</span><span class="p">.</span><span class="n">_r2</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">_r2</span>
            <span class="n">_pointlist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">_list</span><span class="p">.</span><span class="n">First</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
            <span class="n">_list</span><span class="p">.</span><span class="n">RemoveFirst</span><span class="p">()</span>
        <span class="k">End</span> <span class="k">While</span>

        <span class="k">Dim</span> <span class="n">j</span> <span class="ow">As</span> <span class="kt">Integer</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">.</span><span class="n">Count</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">If</span> <span class="n">_pointlist</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">X</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">Y</span> <span class="k">Then</span> <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">For</span> <span class="n">i</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="n">j</span> <span class="k">To</span> <span class="mi">0</span> <span class="k">Step</span> <span class="o">-</span><span class="mi">1</span>
            <span class="n">_pointlist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">_pointlist</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">Y</span><span class="p">,</span> <span class="n">_pointlist</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">X</span><span class="p">))</span>
        <span class="k">Next</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">.</span><span class="n">Count</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">If</span> <span class="n">_pointlist</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">X</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">Then</span> <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">For</span> <span class="n">i</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="n">j</span> <span class="k">To</span> <span class="mi">0</span> <span class="k">Step</span> <span class="o">-</span><span class="mi">1</span>
            <span class="n">_pointlist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="o">-</span><span class="n">_pointlist</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">X</span><span class="p">,</span> <span class="n">_pointlist</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">Y</span><span class="p">))</span>
        <span class="k">Next</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">.</span><span class="n">Count</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">If</span> <span class="n">_pointlist</span><span class="p">(</span><span class="n">j</span><span class="p">).</span><span class="n">Y</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">Then</span> <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">For</span> <span class="n">i</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="n">j</span> <span class="k">To</span> <span class="mi">1</span> <span class="k">Step</span> <span class="o">-</span><span class="mi">1</span>
            <span class="n">_pointlist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">_pointlist</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">X</span><span class="p">,</span> <span class="o">-</span><span class="n">_pointlist</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="n">Y</span><span class="p">))</span>
        <span class="k">Next</span>
        <span class="k">If</span> <span class="n">_pointlist</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">Y</span> <span class="o">&lt;&gt;</span> <span class="mi">0</span> <span class="k">Then</span> <span class="n">_pointlist</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">New</span> <span class="n">LatticePoint</span><span class="p">(</span><span class="n">_pointlist</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">X</span><span class="p">,</span> <span class="o">-</span><span class="n">_pointlist</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="n">Y</span><span class="p">))</span>

        <span class="n">_enumerator</span> <span class="o">=</span> <span class="n">_pointlist</span><span class="p">.</span><span class="n">GetEnumerator</span><span class="p">()</span>
        <span class="n">_enumerator</span><span class="p">.</span><span class="n">MoveNext</span><span class="p">()</span>

        <span class="k">Return</span> <span class="k">True</span>
    <span class="k">End</span> <span class="k">Function</span>

    <span class="k">Public</span> <span class="k">Sub</span> <span class="n">Dispose</span><span class="p">()</span> <span class="k">Implements</span> <span class="n">IDisposable</span><span class="p">.</span><span class="n">Dispose</span>
    <span class="k">End</span> <span class="k">Sub</span>

<span class="k">End</span> <span class="k">Class</span>

<span class="nc">Public</span> <span class="k">Class</span> <span class="nc">LatticePoint</span>
    <span class="k">Friend</span> <span class="n">_x</span> <span class="ow">As</span> <span class="kt">Integer</span>
    <span class="k">Friend</span> <span class="n">_y</span> <span class="ow">As</span> <span class="kt">Integer</span>
    <span class="k">Friend</span> <span class="n">_r2</span> <span class="ow">As</span> <span class="kt">Long</span>

    <span class="k">Friend</span> <span class="k">Sub</span> <span class="k">New</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">x</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">y</span> <span class="ow">As</span> <span class="kt">Integer</span><span class="p">)</span>
        <span class="n">_x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="n">_y</span> <span class="o">=</span> <span class="n">y</span>
        <span class="n">_r2</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span> <span class="o">*</span> <span class="n">y</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Public</span> <span class="k">ReadOnly</span> <span class="k">Property</span> <span class="n">X</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Integer</span>
        <span class="k">Get</span>
            <span class="k">Return</span> <span class="n">_x</span>
        <span class="k">End</span> <span class="k">Get</span>
    <span class="k">End</span> <span class="k">Property</span>

    <span class="k">Public</span> <span class="k">ReadOnly</span> <span class="k">Property</span> <span class="n">Y</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Integer</span>
        <span class="k">Get</span>
            <span class="k">Return</span> <span class="n">_y</span>
        <span class="k">End</span> <span class="k">Get</span>
    <span class="k">End</span> <span class="k">Property</span>

    <span class="k">Public</span> <span class="k">ReadOnly</span> <span class="k">Property</span> <span class="n">SquaredRadius</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Long</span>
        <span class="k">Get</span>
            <span class="k">Return</span> <span class="n">_r2</span>
        <span class="k">End</span> <span class="k">Get</span>
    <span class="k">End</span> <span class="k">Property</span>

    <span class="k">Public</span> <span class="k">Overrides</span> <span class="k">Function</span> <span class="n">ToString</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span>
        <span class="k">Return</span> <span class="kt">String</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;({0}, {1}) [{2}]&quot;</span><span class="p">,</span> <span class="n">_x</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">_y</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">_r2</span><span class="p">.</span><span class="n">ToString</span><span class="p">())</span>
    <span class="k">End</span> <span class="k">Function</span>

<span class="k">End</span> <span class="k">Class</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4694/addtag/" class="addtag" id="addtag_4694">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/vbnet/">
		VB.net
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4694/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4694/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4694"
  >-</span><span
  class="button yellow"
  id="rating_z_4694"
  >0</span><span 
  class="button green"
  id="rating_p_4694"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/4694/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4918">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/514/" target="_top">ocaml-nagoya</a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4918/">#4918</a>(<script language="JavaScript">print_time(new Date("2007/12/21 14:19 GMT"));</script><noscript>2007/12/21 14:19 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>インスタンス宣言のとこが汚いですが。
第一象限で近い順に格子点を求め、それらを90度ずつ回転させてコピーします。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">newtype</span> <span class="n">Pt</span> <span class="o">=</span> <span class="n">Pt</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="kr">deriving</span> <span class="p">(</span><span class="n">Eq</span><span class="p">,</span> <span class="n">Show</span><span class="p">)</span>
<span class="kr">instance</span> <span class="n">Ord</span> <span class="n">Pt</span> <span class="kr">where</span>
    <span class="n">Pt</span> <span class="p">(</span><span class="nv">x1</span><span class="p">,</span><span class="nv">y1</span><span class="p">)</span> <span class="o">&lt;</span>  <span class="n">Pt</span> <span class="p">(</span><span class="nv">x2</span><span class="p">,</span><span class="nv">y2</span><span class="p">)</span>
        <span class="o">|</span> <span class="nv">x1</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y1</span><span class="o">^</span><span class="mi">2</span> <span class="o">==</span>  <span class="nv">x2</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y2</span><span class="o">^</span><span class="mi">2</span> <span class="o">&amp;&amp;</span> <span class="nv">y1</span><span class="o">==</span><span class="nv">y2</span> <span class="o">=</span> <span class="nv">x1</span> <span class="o">&gt;</span> <span class="nv">x2</span>
        <span class="o">|</span> <span class="nv">x1</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y1</span><span class="o">^</span><span class="mi">2</span> <span class="o">==</span>  <span class="nv">x2</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y2</span><span class="o">^</span><span class="mi">2</span> <span class="o">=</span> <span class="nv">y2</span> <span class="o">&gt;</span> <span class="nv">y1</span>
        <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="nv">x1</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y1</span><span class="o">^</span><span class="mi">2</span> <span class="o">&lt;</span>  <span class="nv">x2</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y2</span><span class="o">^</span><span class="mi">2</span>
    <span class="n">Pt</span> <span class="p">(</span><span class="nv">x1</span><span class="p">,</span><span class="nv">y1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">Pt</span> <span class="p">(</span><span class="nv">x2</span><span class="p">,</span><span class="nv">y2</span><span class="p">)</span> <span class="o">=</span> <span class="nv">x1</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y1</span><span class="o">^</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="nv">x2</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="nv">y2</span><span class="o">^</span><span class="mi">2</span>
<span class="nv">mirror</span> <span class="p">(</span><span class="n">Pt</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">))</span> <span class="o">=</span> <span class="p">[</span><span class="n">Pt</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span> <span class="n">Pt</span> <span class="p">(</span><span class="o">-</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">),</span> <span class="n">Pt</span> <span class="p">(</span><span class="o">-</span><span class="nv">x</span><span class="p">,</span><span class="o">-</span><span class="nv">y</span><span class="p">),</span> <span class="n">Pt</span> <span class="p">(</span><span class="nv">y</span><span class="p">,</span><span class="o">-</span><span class="nv">x</span><span class="p">)]</span>
<span class="nv">minimums</span> <span class="nv">l</span> <span class="o">=</span> <span class="nv">partition</span> <span class="p">(</span><span class="o">==</span><span class="nv">m</span><span class="p">)</span> <span class="nv">l</span>
    <span class="kr">where</span> <span class="nv">m</span> <span class="o">=</span> <span class="nv">minimum</span> <span class="nv">l</span>
<span class="nv">getMin</span> <span class="nv">plain</span> <span class="o">=</span> <span class="p">(</span><span class="nv">concatMap</span> <span class="nv">mirror</span> <span class="o">$</span> <span class="nv">sort</span> <span class="nv">ms</span><span class="p">)</span>
               <span class="o">++</span> <span class="nv">getMin</span> <span class="p">(</span><span class="nv">concatMap</span> <span class="nv">f</span> <span class="nv">ms</span> <span class="o">++</span> <span class="nv">cand</span><span class="p">)</span>
    <span class="kr">where</span> <span class="nv">f</span> <span class="p">(</span><span class="n">Pt</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="p">))</span> <span class="o">=</span> <span class="p">[</span><span class="n">Pt</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span> <span class="n">Pt</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
          <span class="nv">f</span> <span class="p">(</span><span class="n">Pt</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">))</span> <span class="o">=</span> <span class="p">[</span><span class="n">Pt</span> <span class="p">(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nv">y</span><span class="p">)]</span>
          <span class="p">(</span><span class="nv">ms</span><span class="p">,</span> <span class="nv">cand</span><span class="p">)</span> <span class="o">=</span> <span class="nv">minimums</span> <span class="nv">plain</span>
<span class="nv">koushiten</span> <span class="o">=</span> <span class="n">Pt</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span> <span class="o">:</span> <span class="nv">getMin</span> <span class="p">[(</span><span class="n">Pt</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">))]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4918/addtag/" class="addtag" id="addtag_4918">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4918/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4918/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4918"
  >-</span><span
  class="button yellow"
  id="rating_z_4918"
  >0</span><span 
  class="button green"
  id="rating_p_4918"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/4918/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4972">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/606/" target="_top">pooq</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4972/">#4972</a>(<script language="JavaScript">print_time(new Date("2007/12/25 22:05 GMT"));</script><noscript>2007/12/25 22:05 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/j/">
	  J
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>格子点と対応させて複素数の行列をつくり、絶対値で
ソートしました。反時計回りの順には、なっていません。
   f 1000
 0  0
_1  0
 0 _1
 0  1
 1  0
  ...
 14 _11
 14  11
_16  _8
_16   8
 _8 _16
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="highlight"><pre>f=.3 :&#39;y{.,/+.,.(/:|),(i:a)j./i:a=.&gt;:-:&gt;.%:y&#39;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/4972/addtag/" class="addtag" id="addtag_4972">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/j/">
		J
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4972/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/4972/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4972"
  >-</span><span
  class="button yellow"
  id="rating_z_4972"
  >0</span><span 
  class="button green"
  id="rating_p_4972"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/4972/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5272">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/5272/">#5272</a>(<script language="JavaScript">print_time(new Date("2008/01/12 05:53 GMT"));</script><noscript>2008/01/12 05:53 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>充分な数サンプリングしていることを証明していないので, そこが問題点として残っていますが.</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;matrix&#39;</span>
<span class="kp">include</span> <span class="no">Math</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="k">class</span> <span class="nc">Vector</span>
  <span class="kp">include</span> <span class="no">Enumerable</span> <span class="c1">#for all?</span>
  <span class="k">def</span> <span class="nf">x</span><span class="p">;</span> <span class="nb">self</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">;</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">y</span><span class="p">;</span> <span class="nb">self</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">;</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">each</span><span class="p">;</span> <span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="k">yield</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">}</span> <span class="k">end</span>
  <span class="k">def</span> <span class="nf">rot</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span>
    <span class="no">Vector</span><span class="o">[</span><span class="nb">self</span><span class="o">[</span><span class="mi">0</span><span class="o">]*</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span><span class="o">-</span><span class="nb">self</span><span class="o">[</span><span class="mi">1</span><span class="o">]*</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">),</span> <span class="nb">self</span><span class="o">[</span><span class="mi">1</span><span class="o">]*</span><span class="n">cos</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span><span class="o">+</span><span class="nb">self</span><span class="o">[</span><span class="mi">0</span><span class="o">]*</span><span class="n">sin</span><span class="p">(</span><span class="n">rad</span><span class="p">)</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="k">def</span> <span class="nf">gen_rot_vectors</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
  <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">rot</span><span class="p">(</span><span class="no">PI</span><span class="o">*</span><span class="n">i</span><span class="o">.</span><span class="n">quo</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">round</span><span class="p">}}</span> 
<span class="k">end</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">while</span> <span class="n">n</span><span class="o">**</span><span class="mi">2</span><span class="o">*</span><span class="no">PI</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="c1">#グリッドを十分な数生成するため</span>
<span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">y</span><span class="o">|</span> <span class="no">Vector</span><span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">]</span><span class="p">}}</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span> <span class="c1"># 第1象限内でベクトルを生成. </span>
  <span class="n">delete_if</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">unless</span> <span class="n">v</span><span class="o">.</span><span class="n">x</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span><span class="o">.</span> <span class="c1"># 重複を避けるため原点を除くy軸上の点を削除</span>
  <span class="n">sort</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">r</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">r</span> <span class="p">?</span> <span class="n">a</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">x</span> <span class="p">:</span> <span class="n">a</span><span class="o">.</span><span class="n">r</span> <span class="o">&lt;=&gt;</span> <span class="n">b</span><span class="o">.</span><span class="n">r</span><span class="p">}</span><span class="o">.</span>
  <span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">all?</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span> <span class="o">==</span> <span class="mi">0</span><span class="p">}</span> <span class="p">?</span> <span class="n">v</span> <span class="p">:</span> <span class="n">gen_rot_vectors</span><span class="p">(</span><span class="n">v</span><span class="p">)}</span><span class="o">.</span> <span class="c1">#原点以外のとき回転ベクトルを生成</span>
  <span class="n">flatten</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="o">.</span><span class="n">to_a</span><span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.N</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="nb">p</span> <span class="n">e</span><span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/5272/addtag/" class="addtag" id="addtag_5272">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/5272/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/5272/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5272"
  >-</span><span
  class="button yellow"
  id="rating_z_5272"
  >0</span><span 
  class="button green"
  id="rating_p_5272"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/5272/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5273">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/581/" target="_top">割と普通</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/5273/">#5273</a>(<script language="JavaScript">print_time(new Date("2008/01/12 06:02 GMT"));</script><noscript>2008/01/12 06:02 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>以下のソースコードの場合には、1000番目の点は（-10,16）でした。
格子点生成時に、ｘとｙの範囲を「-17&lt;=x&lt;=17、-17&lt;=y&lt;=17」に変更すると(-8,16)になってしまいました。
この辺りを誰か検証してくださると面白そうですね。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MyPoint</span>
<span class="k">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">x</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">y</span><span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">dist</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">public</span> <span class="kt">double</span> <span class="n">theta</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
<span class="k">}</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="k">{</span>
        <span class="n">ArrayList</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="p">();</span>
        <span class="kt">double</span> <span class="n">theta</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="p">-</span><span class="m">16</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;=</span> <span class="m">16</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
        <span class="k">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="p">-</span><span class="m">16</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;=</span> <span class="m">16</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="n">theta</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Atan2</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">theta</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">theta</span> <span class="p">+=</span> <span class="n">Math</span><span class="p">.</span><span class="n">PI</span> <span class="p">*</span> <span class="m">2</span><span class="p">;</span>
                <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">MyPoint</span> <span class="k">{</span> <span class="n">x</span> <span class="p">=</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="p">=</span> <span class="n">y</span><span class="p">,</span> <span class="n">dist</span> <span class="p">=</span> <span class="n">x</span> <span class="p">*</span> <span class="n">x</span> <span class="p">+</span> <span class="n">y</span> <span class="p">*</span> <span class="n">y</span><span class="p">,</span> <span class="n">theta</span> <span class="p">=</span> <span class="n">theta</span> <span class="k">}</span><span class="p">);</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="n">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="n">from</span> <span class="n">MyPoint</span> <span class="n">point</span> <span class="k">in</span> <span class="n">list</span>
                    <span class="n">orderby</span> <span class="n">point</span><span class="p">.</span><span class="n">dist</span> <span class="n">ascending</span><span class="p">,</span> <span class="n">point</span><span class="p">.</span><span class="n">theta</span> <span class="n">ascending</span>
                    <span class="n">select</span> <span class="n">point</span><span class="p">.</span><span class="n">x</span> <span class="p">+</span> <span class="s">&quot;,&quot;</span> <span class="p">+</span> <span class="n">point</span><span class="p">.</span><span class="n">y</span><span class="p">).</span><span class="n">Take</span><span class="p">(</span><span class="m">1000</span><span class="p">);</span>
        <span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">str</span> <span class="k">in</span> <span class="n">query</span><span class="p">)</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/5273/addtag/" class="addtag" id="addtag_5273">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/5273/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/5273/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5273"
  >-</span><span
  class="button yellow"
  id="rating_z_5273"
  >0</span><span 
  class="button green"
  id="rating_p_5273"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/5273/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5278">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/5278/">#5278</a>(<script language="JavaScript">print_time(new Date("2008/01/12 11:58 GMT"));</script><noscript>2008/01/12 11:58 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>すみません. 先程の投稿の修正です. 
充分なグリッド数のサンプリングには, サンプリング
が最低必要なグリッド数Nを含む正方形に外接す
る円を考え, それが内接している, 正方形グリッドを
考えればいいので, 
16, 17行目は, 
n = (sqrt(2)*sqrt(N).ceil).ceil
とするべきでした. 
ceilメソッドを二度も使いたくない方には, 
n = ((2+sqrt(2))*sqrt(N)).truncate
がお勧めです. </pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/5278/addtag/" class="addtag" id="addtag_5278">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5278"
  >-</span><span
  class="button yellow"
  id="rating_z_5278"
  >0</span><span 
  class="button green"
  id="rating_p_5278"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/5278/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6524">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/793/" target="_top">genzou</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/6524/">#6524</a>(<script language="JavaScript">print_time(new Date("2008/06/16 22:44 GMT"));</script><noscript>2008/06/16 22:44 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>他の方と同様、
1000番目は(-8, 16)でした。</p>
<p>もう少し数学的にきれいに解く方法があるんでしょうけどね。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre>def kakudo( x, y ) {
    def k = Math.acos(x/Math.sqrt(x**2 + y**2))
    if (y&lt;0)
        k = 2*Math.PI - k
    k
}

// 座標リスト作成
def points = []
def range = 20
(-range..range).each{ x-&gt;
    (-range..range).each{ y-&gt;
        points &lt;&lt; [x:x, y:y]
    }
}

// 出力
points.sort{ point -&gt;
    def result = 0
    if(point.x != 0 || point.y != 0)
        result = ((point.x**2 + point.y**2)*100 + kakudo(point.x, point.y)*10).toInteger()
    result
}.each{ point -&gt;
    println point
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/6524/addtag/" class="addtag" id="addtag_6524">タグ</a>:
	
    
    <a href="/web/20100612150759/http://ja.doukaku.org/tag/groovy/">groovy</a>
    
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/6524/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/6524/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6524"
  >-</span><span
  class="button yellow"
  id="rating_z_6524"
  >0</span><span 
  class="button green"
  id="rating_p_6524"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/6524/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6530">
  <p class="banner"><a href="/web/20100612150759/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20100612150759/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/6530/">#6530</a>(<script language="JavaScript">print_time(new Date("2008/06/17 09:23 GMT"));</script><noscript>2008/06/17 09:23 GMT</noscript>)
	
	
	
	[<a href="/web/20100612150759/http://ja.doukaku.org/lang/postscript/">
	  PostScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>力技で..
Bubble Sort したら遅かったので無理矢理 Quick Sort を実装。まだ荒削りですが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94</pre></td><td class="code"><div class="highlight"><pre>%!PS

/CompareVal { % [R X Y Theta] [R2 X2 Y2 Theta2 ] CompareXY  integer
    2 copy 0 get exch 0 get sub
    dup 0 eq
    {
        pop
        3 get exch 3 get sub
    } {
        exch pop exch pop
    } ifelse
    neg
} bind def

/QSort { %  [Array] /CompareFunction  QSort  [Array&#39;]
    cvx
    1 index 0 get
    0 3 index length 1 sub
    % [Array] Comp pivot l r
    {
        2 copy ge { exit } if 
        {
            2 copy ge { exit } if
            4 index 1 index get 3 index 5 index
            exec 0 lt { exit } if
            1 sub
        } loop
        2 copy ne {
            4 index 1 index get
            5 index exch 3 index exch put
            exch 1 add exch
        } if
        {
            2 copy ge { exit } if
            4 index 2 index get 3 index 5 index exec 0 gt { exit } if
            exch 1 add exch
        } loop
        2 copy ne {
            4 index 2 index get
            5 index exch 2 index exch put
            1 sub
        } if
    } loop
    4 index 2 index 4 index put 
    1 index 1 gt {
        4 index 0 3 index getinterval
        4 index QSort pop
    } if
    % [Array] Comp pivot l r
    4 index length 1 index 2 add gt {
        4 index dup length 3 index sub 1 sub  3 index 1 add exch getinterval
        4 index
        QSort pop
    } if
    pop pop pop pop
} bind def


/GenLattice { % N  GenLattice  [ [r^2 x1 y1 angle] ... ]
    [ exch
    2 div sqrt 1 add cvi
    dup neg exch 1 exch
    % [ -X0 1 X0 
    3 copy {
        % [ -X0 1 X0 Y
        4 copy pop {
            % [ -X0 1 X0 Y X
            2 copy [ 3 1 roll
            % [ -X0 1 X0 Y X  [ Y X
            2 copy dup mul exch dup mul add sqrt
            3 1 roll
            2 index 0 eq { 0 } { 2 copy atan } ifelse
            ]
            % [ -X0 1 X0 Y X  [ r^2 Y X theta ]
            6 1 roll pop
            % [ [] -X0 1 X0 Y 
        } for
        pop
    } for
    pop pop pop ]
} bind def

/DisplayLatticePoints { % N  DisplayLatticePoints  -
    dup GenLattice /CompareVal QSort
    0 1 4 -1 roll
    {
        1 index exch get aload pop pop
        10 string cvs print (, ) print =
        pop
    } for
    pop
} bind def

1000 DisplayLatticePoints
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100612150759/http://ja.doukaku.org/comment/6530/addtag/" class="addtag" id="addtag_6530">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100612150759/http://ja.doukaku.org/lang/postscript/">
		PostScript
      </a>]
	  
      [<a href="/web/20100612150759/http://ja.doukaku.org/comment/6530/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100612150759/http://ja.doukaku.org/comment/6530/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6530"
  >-</span><span
  class="button yellow"
  id="rating_z_6530"
  >0</span><span 
  class="button green"
  id="rating_p_6530"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100612150759/http://ja.doukaku.org/65/reply_to/6530/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100612150759if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100612150759/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100612150759/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100612150759/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100612150759/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100612150759/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100612150759/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100612150759/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100612150759/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100612150759/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100612150759/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100612150759im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100612150759/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100612150759/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100612150759/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100612150759/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100612150759/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100612150759/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100612150759/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100612150759/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100612150759im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100612150759/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100612150759/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100612150759/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100612150759js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 15:07:59 Jun 12, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:39:58 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
