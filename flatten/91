
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
printfの自作
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20090422063755cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20090422063755cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20090422063755cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20090422063755/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20090422063755/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20090422063755js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20090422063755js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20090422063755js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20090422063755js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app16.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/91\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "22";
var displayMonth = "Apr";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/91/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090422063755" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202171139/http://ja.doukaku.org/91/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 6:37:55 Apr 22, 2009">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081202171139/http://ja.doukaku.org/91/flatten/" title="17:11:39 Dec 2, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 6:37:55 Apr 22, 2009">22</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080331051641/http://ja.doukaku.org/91/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="31 Mar 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 6:37:55 Apr 22, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20090422063755*/http://ja.doukaku.org/91/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>4 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">29 Dec 07 - 22 Apr 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000001_2008:-1:001000000001_2009:3:000100000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20090422063755/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20090422063755/http://ja.doukaku.org/91/">printfの自作</a>
</h2>

    





<div class="comment" id="comment4119">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/533/" target="_top">yappy</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4119/">#4119</a>(<script language="JavaScript">print_time(new Date("2007/11/16 17:00 GMT"));</script><noscript>2007/11/16 17:00 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffbb00;">-4/18=-0.22</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="line-block">
<div class="line">printf関数を自作してください。</div>
<div class="line">printfの説明は不要だと思います。とりあえずWikiPediaのリンクをはっておきます。</div>
<div class="line"><a class="reference" href="/web/20090422063755/http://ja.wikipedia.org/wiki/Printf">http://ja.wikipedia.org/wiki/Printf</a></div>
<div class="line"><br /></div>
<div class="line">実際にはsprintf関数を作ってください。</div>
<div class="line">注意事項</div>
</div>
<ul class="simple">
<li>標準でついているprintf系関数の使用禁止</li>
<li>標準でついているライブラリ以外の使用禁止</li>
<li>引数・返り値等の仕様はできるだけ似せればよい</li>
</ul>
<div class="line-block">
<div class="line"><br /></div>
<div class="line">可変長引数など、言語によっては難しい/不可能な仕様もありますが、いろいろ工夫して本物に近づくようにしてみてください。</div>
</div>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;string.h&gt;</span>

<span class="c">// なにもフォーマットしてない</span>
<span class="kt">int</span> <span class="n">mysprintf</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,</span> <span class="p">...</span> <span class="p">){</span>
    <span class="n">strcpy</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">format</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4119/addtag/" class="addtag" id="addtag_4119">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4119/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4119/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffbb00;"
  >-4/18=-0.22</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4119"
  >-</span><span
  class="button yellow"
  id="rating_z_4119"
  >0</span><span 
  class="button green"
  id="rating_p_4119"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4119/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20090422063755/http://ja.doukaku.org/91/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20090422063755/http://ja.doukaku.org/91/nested/">ネスト表示</a>
<a href="/web/20090422063755/http://ja.doukaku.org/91/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment4395">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4395/">#4395</a>(<script language="JavaScript">print_time(new Date("2007/11/25 11:52 GMT"));</script><noscript>2007/11/25 11:52 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  場合わけが多くなるのでなかなかきれいにまとまりませんが、仕事ではこういうベタな仕様をえいやっと書くことも多い気がするので、書いとけば参考になるかなと。<br/><br/>さぼったところ：<br/>-&nbsp;浮動小数点数はeEfFgGを区別せず。いい加減です。<br/>-&nbsp;変換指定子&nbsp;aApnはサポートせず。<br/>-&nbsp;長さ修飾子はSchemeはサポートせず(Schemeでは意味がないかな)<br/>-&nbsp;n$による引数の並べかえはサポートせず。<br/><br/>後はそれなりにサポートしているつもりです。<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%d|"&nbsp;123)<br/>"|123|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10d|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;123|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%-10d|"&nbsp;123)<br/>"|123&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10.5d|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;00123|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%+10.5d|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;+00123|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%+10d|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+123|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%+10o|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+173|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10o|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;173|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%#10o|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0173|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10x|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7b|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10X|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7B|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%#10x|"&nbsp;123)<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x7b|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%f|"&nbsp;3.14)<br/>"|3.14|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%.6f|"&nbsp;(sqrt&nbsp;2))<br/>"|1.414214|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10.6f|"&nbsp;(sqrt&nbsp;2))<br/>"|&nbsp;&nbsp;1.414214|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10.6f|"&nbsp;(-&nbsp;(sqrt&nbsp;2)))<br/>"|&nbsp;-1.414214|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%*.*f|"&nbsp;10&nbsp;6&nbsp;(log&nbsp;10))<br/>"|&nbsp;&nbsp;2.302585|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%f|"&nbsp;10e100)<br/>"|1.0e101|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%f|"&nbsp;1e100)<br/>"|1.0e100|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%.6f|"&nbsp;1e100)<br/>"|1.000000e100|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%s|"&nbsp;"abc")<br/>"|abc|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%10s|"&nbsp;"abc")<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abc|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%-10s|"&nbsp;"abc")<br/>"|abc&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%*s|"&nbsp;10&nbsp;"abc")<br/>"|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abc|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%c|"&nbsp;#\z)<br/>"|z|"<br/>gosh&gt;&nbsp;(sprintf&nbsp;"|%%|")<br/>"|%|"<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">sequence</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">match</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">text</span><span class="o">.</span><span class="nv">tree</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sprintf</span> <span class="nv">fmt</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">get-var-arg</span> <span class="nv">name</span> <span class="nv">v</span> <span class="nv">args</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if </span><span class="nv">v</span>
      <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">string-&gt;number </span><span class="nv">v</span><span class="p">)</span> <span class="k">=&gt; </span><span class="p">(</span><span class="nf">cut</span> <span class="nv">values</span> <span class="nv">&lt;&gt;</span> <span class="nv">args</span><span class="p">)</span><span class="err">]</span>
            <span class="err">[</span><span class="p">(</span><span class="nb">equal? </span><span class="nv">v</span> <span class="s">&quot;*&quot;</span><span class="p">)</span>     <span class="p">(</span><span class="nb">values </span><span class="p">(</span><span class="nb">car </span><span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">args</span><span class="p">))</span><span class="err">]</span>
            <span class="err">[</span><span class="k">else </span><span class="p">(</span><span class="nf">error</span> <span class="o">#`</span><span class="s">&quot;,name needs to be a number or &#39;*&#39;, but got:&quot;</span> <span class="nv">v</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">values </span><span class="no">#f</span> <span class="nv">args</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">pick-arg</span> <span class="nv">conv</span> <span class="nv">args</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="nv">conv</span> <span class="s">&quot;%&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="no">#f</span> <span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="nf">car+cdr</span> <span class="nv">args</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">rec</span> <span class="nv">fmt</span> <span class="nv">args</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">rxmatch-case</span> <span class="nv">fmt</span>
      <span class="err">[</span><span class="o">#</span><span class="nv">/</span><span class="p">(</span><span class="o">.</span><span class="nv">*</span><span class="p">)</span><span class="nv">%</span><span class="p">(</span><span class="err">[</span><span class="nv">-+</span> <span class="o">#</span><span class="mi">0</span><span class="err">]</span><span class="nv">*</span><span class="p">)(</span><span class="err">\</span><span class="nv">d+</span><span class="err">|\</span><span class="nv">*</span><span class="p">)</span><span class="nv">?</span><span class="p">(</span><span class="nf">?:</span><span class="err">\</span><span class="o">.</span><span class="p">(</span><span class="err">\</span><span class="nv">d*</span><span class="err">|\</span><span class="nv">*</span><span class="p">))</span><span class="nv">?</span><span class="p">(</span><span class="err">[</span><span class="nv">diouxXeEfFgGaAcspn%</span><span class="err">]</span><span class="p">)(</span><span class="o">.</span><span class="nv">*</span><span class="p">)</span><span class="nv">/</span>
       <span class="p">(</span><span class="nf">_</span> <span class="nv">before</span> <span class="nv">flags</span> <span class="nv">width</span> <span class="nv">prec</span> <span class="nv">conv</span> <span class="nv">after</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">width</span> <span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="nf">get-var-arg</span> <span class="ss">&#39;width</span> <span class="nv">width</span> <span class="nv">args</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">prec</span> <span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="nf">get-var-arg</span> <span class="ss">&#39;prec</span> <span class="nv">prec</span> <span class="nv">args</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">arg</span> <span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="nf">pick-arg</span> <span class="nv">conv</span> <span class="nv">args</span><span class="p">)</span>
             <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="nv">before</span>
               <span class="o">,</span><span class="p">(</span><span class="nf">fill</span> <span class="nv">width</span> <span class="nv">flags</span> <span class="p">(</span><span class="nf">dispatch</span> <span class="nv">arg</span> <span class="nv">prec</span> <span class="nv">flags</span> <span class="nv">conv</span><span class="p">))</span>
               <span class="o">,</span><span class="p">(</span><span class="nf">rec</span> <span class="nv">after</span> <span class="nv">args</span><span class="p">)))))</span><span class="err">]</span>
      <span class="err">[</span><span class="k">else </span><span class="nv">fmt</span><span class="err">]</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">dispatch</span> <span class="nv">arg</span> <span class="nv">prec</span> <span class="nv">flags</span> <span class="nv">conv</span><span class="p">)</span>
    <span class="p">(</span><span class="k">case </span><span class="p">(</span><span class="nf">ref</span> <span class="nv">conv</span> <span class="mi">0</span><span class="p">)</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\d</span> <span class="sc">#\i</span> <span class="sc">#\u</span><span class="p">)</span> <span class="p">(</span><span class="nf">int</span> <span class="nv">arg</span> <span class="nv">prec</span> <span class="nv">flags</span> <span class="mi">10</span> <span class="nv">conv</span><span class="p">)</span><span class="err">]</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\o</span><span class="p">)</span>         <span class="p">(</span><span class="nf">int</span> <span class="nv">arg</span> <span class="nv">prec</span> <span class="nv">flags</span> <span class="mi">8</span> <span class="nv">conv</span><span class="p">)</span><span class="err">]</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\x</span> <span class="sc">#\X</span><span class="p">)</span>     <span class="p">(</span><span class="nf">int</span> <span class="nv">arg</span> <span class="nv">prec</span> <span class="nv">flags</span> <span class="mi">16</span> <span class="nv">conv</span><span class="p">)</span><span class="err">]</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\e</span> <span class="sc">#\E</span> <span class="sc">#\f</span> <span class="sc">#\F</span> <span class="sc">#\g</span> <span class="sc">#\G</span><span class="p">)</span> <span class="p">(</span><span class="nf">real</span> <span class="nv">arg</span> <span class="nv">prec</span> <span class="nv">flags</span> <span class="nv">conv</span><span class="p">)</span><span class="err">]</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\c</span><span class="p">)</span>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">char? </span><span class="nv">arg</span><span class="p">)</span>
                       <span class="p">(</span><span class="nb">string </span><span class="nv">arg</span><span class="p">)</span>
                       <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;char required for %c conversion:&quot;</span> <span class="nv">arg</span><span class="p">))</span><span class="err">]</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\s</span><span class="p">)</span>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">string? </span><span class="nv">arg</span><span class="p">)</span>
                       <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="nv">prec</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">prec</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">arg</span><span class="p">)))</span>
                         <span class="p">(</span><span class="nf">string-take</span> <span class="nv">arg</span> <span class="nv">prec</span><span class="p">)</span>
                         <span class="nv">arg</span><span class="p">)</span>
                       <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;string required for %s conversion:&quot;</span> <span class="nv">arg</span><span class="p">))</span><span class="err">]</span>
      <span class="err">[</span><span class="p">(</span><span class="sc">#\%</span><span class="p">)</span>         <span class="s">&quot;%&quot;</span><span class="err">]</span>
      <span class="err">[</span><span class="k">else </span>         <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;unsupported conversion:&quot;</span> <span class="nv">conv</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">fill</span> <span class="nv">w</span> <span class="nv">f</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">and-let*</span> <span class="p">(</span><span class="err">[</span> <span class="nv">w</span> <span class="err">]</span>
                   <span class="err">[</span><span class="nv">len</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">s</span><span class="p">)</span><span class="err">]</span>
                   <span class="err">[</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">len</span> <span class="nv">w</span><span class="p">)</span><span class="err">]</span>
                   <span class="err">[</span><span class="nv">pad</span> <span class="p">(</span><span class="nb">- </span><span class="nv">w</span> <span class="nv">len</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">string-index</span> <span class="nv">f</span> <span class="sc">#\-</span><span class="p">)</span>
            <span class="p">(</span><span class="nb">cons </span><span class="nv">s</span> <span class="p">(</span><span class="nb">make-string </span><span class="nv">pad</span> <span class="sc">#\space</span><span class="p">))</span>
            <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">make-string </span><span class="nv">pad</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">string-index</span> <span class="nv">f</span> <span class="sc">#\0</span><span class="p">)</span> <span class="sc">#\0</span> <span class="sc">#\space</span><span class="p">))</span> <span class="nv">s</span><span class="p">)))</span>
        <span class="nv">s</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sign</span> <span class="nv">arg</span> <span class="nv">f</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">pos-sign</span><span class="p">)</span>
      <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nf">string-index</span> <span class="nv">f</span> <span class="sc">#\+</span><span class="p">)</span> <span class="s">&quot;+&quot;</span><span class="err">]</span>
            <span class="err">[</span><span class="p">(</span><span class="nf">string-index</span> <span class="nv">f</span> <span class="sc">#\space</span><span class="p">)</span> <span class="s">&quot; &quot;</span><span class="err">]</span>
            <span class="err">[</span><span class="k">else </span><span class="s">&quot;&quot;</span><span class="err">]</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">string-append </span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">negative? </span><span class="nv">arg</span><span class="p">)</span> <span class="s">&quot;-&quot;</span> <span class="p">(</span><span class="nf">pos-sign</span><span class="p">))</span> <span class="nv">s</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">minpad</span> <span class="nv">p</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="nv">p</span> <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">string-length </span><span class="nv">s</span><span class="p">)</span> <span class="nv">p</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">string-append </span><span class="p">(</span><span class="nb">make-string </span><span class="p">(</span><span class="nb">- </span><span class="nv">p</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">s</span><span class="p">))</span> <span class="sc">#\0</span><span class="p">)</span> <span class="nv">s</span><span class="p">)</span>
      <span class="nv">s</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">prefix</span> <span class="nv">f</span> <span class="nv">c</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">string-index</span> <span class="nv">f</span> <span class="o">#</span><span class="err">\</span><span class="o">#</span><span class="p">)</span>
      <span class="p">(</span><span class="k">case </span><span class="p">(</span><span class="nf">ref</span> <span class="nv">c</span> <span class="mi">0</span><span class="p">)</span>
        <span class="err">[</span><span class="p">(</span><span class="sc">#\o</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;0&quot;</span> <span class="nv">s</span><span class="p">)</span><span class="err">]</span>

        <span class="err">[</span><span class="p">(</span><span class="sc">#\x</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;0x&quot;</span> <span class="nv">s</span><span class="p">)</span><span class="err">]</span>
        <span class="err">[</span><span class="p">(</span><span class="sc">#\X</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;0X&quot;</span> <span class="nv">s</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
      <span class="nv">s</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">int</span> <span class="nv">arg</span> <span class="nv">p</span> <span class="nv">f</span> <span class="nv">r</span> <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">exact? </span><span class="nv">arg</span><span class="p">)</span> <span class="p">(</span><span class="nb">integer? </span><span class="nv">arg</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;exact integer required for conversion:&quot;</span> <span class="nv">c</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">sign</span> <span class="nv">arg</span> <span class="nv">f</span> <span class="p">(</span><span class="nf">prefix</span> <span class="nv">f</span> <span class="nv">c</span> <span class="p">(</span><span class="nf">minpad</span> <span class="nv">p</span> <span class="p">(</span><span class="nb">number-&gt;string </span><span class="p">(</span><span class="nb">abs </span><span class="nv">arg</span><span class="p">)</span> <span class="nv">r</span> <span class="p">(</span><span class="nb">equal? </span><span class="nv">c</span> <span class="s">&quot;X&quot;</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">maxprec</span> <span class="nv">p</span> <span class="nv">s</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">not </span><span class="nv">p</span><span class="p">)</span> <span class="nv">s</span><span class="err">]</span>
          <span class="err">[</span><span class="nv">else</span>
           <span class="p">(</span><span class="nf">regexp-replace*</span>
            <span class="nv">s</span> <span class="o">#</span><span class="nv">/</span><span class="err">\</span><span class="o">.</span><span class="p">(</span><span class="err">\</span><span class="nv">d+</span><span class="p">)</span><span class="nv">/</span>
            <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span>
              <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">zero? </span><span class="nv">p</span><span class="p">)</span> <span class="s">&quot;&quot;</span><span class="err">]</span>
                    <span class="err">[</span><span class="nv">else</span>
                     <span class="p">(</span><span class="nf">let1</span> <span class="nv">oprec</span> <span class="p">(</span><span class="nb">string-length </span><span class="p">(</span><span class="nf">m</span> <span class="mi">1</span><span class="p">))</span>
                       <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">p</span> <span class="nv">oprec</span><span class="p">)</span>
                              <span class="o">#`</span><span class="s">&quot;.,(round-&gt;exact (/. (string-&gt;number (m 1)) (expt 10 (- oprec p))))&quot;</span><span class="err">]</span>
                             <span class="err">[</span><span class="nv">else</span>
                              <span class="o">#`</span><span class="s">&quot;.,(m 1),(make-string (- p oprec) #\\0)&quot;</span><span class="err">]</span><span class="p">))</span>
                     <span class="err">]</span><span class="p">)))</span>
           <span class="err">]</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">real</span> <span class="nv">arg</span> <span class="nv">p</span> <span class="nv">f</span> <span class="nv">c</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">real? </span><span class="nv">arg</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;real number required for conversion:&quot;</span> <span class="nv">c</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">maxprec</span> <span class="nv">p</span> <span class="p">(</span><span class="nb">number-&gt;string </span><span class="nv">arg</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">tree-&gt;string</span> <span class="p">(</span><span class="nf">rec</span> <span class="nv">fmt</span> <span class="nv">args</span><span class="p">)))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4395/addtag/" class="addtag" id="addtag_4395">タグ</a>:
	
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4395/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4395/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4395"
  >-</span><span
  class="button yellow"
  id="rating_z_4395"
  >0</span><span 
  class="button green"
  id="rating_p_4395"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4395/">
    1
    reply
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4395/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4396">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4396/">#4396</a>(<script language="JavaScript">print_time(new Date("2007/11/25 11:58 GMT"));</script><noscript>2007/11/25 11:58 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>しまった。複数のフォーマット指示子がある場合にちゃんと動きませんでした。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre>*** t.scm    2007-11-25 01:51:56.000000000 -1000
<span class="gd">--- t2.scm    2007-11-25 01:53:52.000000000 -1000</span>
***************
*** 13,28 ****
    (define (pick-arg conv args)
      (if (equal? conv &quot;%&quot;) (values #f args) (car+cdr args)))
    (define (rec fmt args)
<span class="gs">!     (rxmatch-case fmt</span>
<span class="gs">!       [#/(.*)%([-+ #0]*)(\d+|\*)?(?:\.(\d*|\*))?([diouxXeEfFgGaAcspn%])(.*)/</span>
<span class="gs">!        (_ before flags width prec conv after)</span>
<span class="gs">!        (receive (width args) (get-var-arg &#39;width width args)</span>
<span class="gs">!          (receive (prec args) (get-var-arg &#39;prec prec args)</span>
<span class="gs">!            (receive (arg args) (pick-arg conv args)</span>
<span class="gs">!              `(,before</span>
<span class="gs">!                ,(fill width flags (dispatch arg prec flags conv))</span>
<span class="gs">!                ,(rec after args)))))]</span>
<span class="gs">!       [else fmt]))</span>
    (define (dispatch arg prec flags conv)
      (case (ref conv 0)
        [(#\d #\i #\u) (int arg prec flags 10 conv)]
<span class="gd">--- 13,31 ----</span>
    (define (pick-arg conv args)
      (if (equal? conv &quot;%&quot;) (values #f args) (car+cdr args)))
    (define (rec fmt args)
<span class="gs">!     (receive (pre post) (string-scan fmt #\% &#39;both)</span>
<span class="gs">!       (if post</span>
<span class="gs">!         (rxmatch-case post</span>
<span class="gs">!           [#/([-+ #0]*)(\d+|\*)?(?:\.(\d*|\*))?([diouxXeEfFgGaAcspn%])(.*)/</span>
<span class="gs">!            (_ flags width prec conv after)</span>
<span class="gs">!            (receive (width args) (get-var-arg &#39;width width args)</span>
<span class="gs">!              (receive (prec args) (get-var-arg &#39;prec prec args)</span>
<span class="gs">!                (receive (arg args) (pick-arg conv args)</span>
<span class="gs">!                  `(,pre</span>
<span class="gs">!                    ,(fill width flags (dispatch arg prec flags conv))</span>
<span class="gs">!                    ,(rec after args)))))]</span>
<span class="gs">!           [else (error &quot;bad format string:&quot; fmt)])</span>
<span class="gs">!         fmt)))</span>
    (define (dispatch arg prec flags conv)
      (case (ref conv 0)
        [(#\d #\i #\u) (int arg prec flags 10 conv)]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4396/addtag/" class="addtag" id="addtag_4396">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4396/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4396/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4396"
  >-</span><span
  class="button yellow"
  id="rating_z_4396"
  >0</span><span 
  class="button green"
  id="rating_p_4396"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4395/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4396/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4396/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4401">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4401/">#4401</a>(<script language="JavaScript">print_time(new Date("2007/11/25 19:21 GMT"));</script><noscript>2007/11/25 19:21 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefaf;">-1/5=-0.20</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Haskellの場合，可変長引数の扱いに工夫が必要です．</p>
<p>下手なコードを書くより，ghcのライブラリを読んで実際にどうしているかを見る方が勉強になると思うので，ライブラリのコード(Text.Printfモジュール)をそのまま掲載します．</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313</pre></td><td class="code"><div class="highlight"><pre><span class="c1">-----------------------------------------------------------------------------</span>
<span class="c1">-- |</span>
<span class="c1">-- Module      :  Text.Printf</span>
<span class="c1">-- Copyright   :  (c) Lennart Augustsson, 2004</span>
<span class="c1">-- License     :  BSD-style (see the file libraries/base/LICENSE)</span>
<span class="c1">-- </span>
<span class="c1">-- Maintainer  :  lennart@augustsson.net</span>
<span class="c1">-- Stability   :  provisional</span>
<span class="c1">-- Portability :  portable</span>
<span class="c1">--</span>
<span class="c1">-- A C printf like formatter.</span>
<span class="c1">--</span>
<span class="c1">-----------------------------------------------------------------------------</span>

<span class="kr">module</span> <span class="n">Text</span><span class="o">.</span><span class="n">Printf</span><span class="p">(</span>
   <span class="nv">printf</span><span class="p">,</span> <span class="nv">hPrintf</span><span class="p">,</span>
   <span class="n">PrintfType</span><span class="p">,</span> <span class="n">HPrintfType</span><span class="p">,</span> <span class="n">PrintfArg</span><span class="p">,</span> <span class="n">IsChar</span>
<span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Prelude</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Char</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Int</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Word</span>
<span class="kr">import</span> <span class="n">Numeric</span><span class="p">(</span><span class="nv">showEFloat</span><span class="p">,</span> <span class="nv">showFFloat</span><span class="p">,</span> <span class="nv">showGFloat</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>

<span class="c1">-------------------</span>

<span class="c1">-- | Format a variable number of arguments with the C-style formatting string.</span>
<span class="c1">-- The return value is either &#39;String&#39; or @(&#39;IO&#39; a)@.</span>
<span class="c1">--</span>
<span class="c1">-- The format string consists of ordinary characters and /conversion</span>
<span class="c1">-- specifications/, which specify how to format one of the arguments</span>
<span class="c1">-- to printf in the output string.  A conversion specification begins with the</span>
<span class="c1">-- character @%@, followed by one or more of the following flags:</span>
<span class="c1">--</span>
<span class="c1">-- &gt;    -      left adjust (default is right adjust)</span>
<span class="c1">-- &gt;    +      always use a sign (+ or -) for signed conversions</span>
<span class="c1">-- &gt;    0      pad with zeroes rather than spaces</span>
<span class="c1">--</span>
<span class="c1">-- followed optionally by a field width:</span>
<span class="c1">-- </span>
<span class="c1">-- &gt;    num    field width</span>
<span class="c1">-- &gt;    *      as num, but taken from argument list</span>
<span class="c1">--</span>
<span class="c1">-- followed optionally by a precision:</span>
<span class="c1">--</span>
<span class="c1">-- &gt;    .num   precision (number of decimal places)</span>
<span class="c1">--</span>
<span class="c1">-- and finally, a format character:</span>
<span class="c1">--</span>
<span class="c1">-- &gt;    c      character               Char, Int, Integer, ...</span>
<span class="c1">-- &gt;    d      decimal                 Char, Int, Integer, ...</span>
<span class="c1">-- &gt;    o      octal                   Char, Int, Integer, ...</span>
<span class="c1">-- &gt;    x      hexadecimal             Char, Int, Integer, ...</span>
<span class="c1">-- &gt;    X      hexadecimal             Char, Int, Integer, ...</span>
<span class="c1">-- &gt;    u      unsigned decimal        Char, Int, Integer, ...</span>
<span class="c1">-- &gt;    f      floating point          Float, Double</span>
<span class="c1">-- &gt;    g      general format float    Float, Double</span>
<span class="c1">-- &gt;    G      general format float    Float, Double</span>
<span class="c1">-- &gt;    e      exponent format float   Float, Double</span>
<span class="c1">-- &gt;    E      exponent format float   Float, Double</span>
<span class="c1">-- &gt;    s      string                  String</span>
<span class="c1">--</span>
<span class="c1">-- Mismatch between the argument types and the format string will cause</span>
<span class="c1">-- an exception to be thrown at runtime.</span>
<span class="c1">--</span>
<span class="c1">-- Examples:</span>
<span class="c1">--</span>
<span class="c1">-- &gt;   &gt; printf &quot;%d\n&quot; (23::Int)</span>
<span class="c1">-- &gt;   23</span>
<span class="c1">-- &gt;   &gt; printf &quot;%s %s\n&quot; &quot;Hello&quot; &quot;World&quot;</span>
<span class="c1">-- &gt;   Hello World</span>
<span class="c1">-- &gt;   &gt; printf &quot;%.2f\n&quot; pi</span>
<span class="c1">-- &gt;   3.14</span>
<span class="c1">--</span>
<span class="nv">printf</span> <span class="o">::</span> <span class="p">(</span><span class="n">PrintfType</span> <span class="nv">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="nv">r</span>
<span class="nv">printf</span> <span class="nv">fmts</span> <span class="o">=</span> <span class="nv">spr</span> <span class="nv">fmts</span> <span class="p">[]</span>

<span class="c1">-- | Similar to &#39;printf&#39;, except that output is via the specified</span>
<span class="c1">-- &#39;Handle&#39;.  The return type is restricted to @(&#39;IO&#39; a)@.</span>
<span class="nv">hPrintf</span> <span class="o">::</span> <span class="p">(</span><span class="n">HPrintfType</span> <span class="nv">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">Handle</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="nv">r</span>
<span class="nv">hPrintf</span> <span class="nv">hdl</span> <span class="nv">fmts</span> <span class="o">=</span> <span class="nv">hspr</span> <span class="nv">hdl</span> <span class="nv">fmts</span> <span class="p">[]</span>

<span class="c1">-- |The &#39;PrintfType&#39; class provides the variable argument magic for</span>
<span class="c1">-- &#39;printf&#39;.  Its implementation is intentionally not visible from</span>
<span class="c1">-- this module. If you attempt to pass an argument of a type which</span>
<span class="c1">-- is not an instance of this class to &#39;printf&#39; or &#39;hPrintf&#39;, then</span>
<span class="c1">-- the compiler will report it as a missing instance of &#39;PrintfArg&#39;.</span>
<span class="kr">class</span> <span class="n">PrintfType</span> <span class="nv">t</span> <span class="kr">where</span>
    <span class="nv">spr</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">UPrintf</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">t</span>

<span class="c1">-- | The &#39;HPrintfType&#39; class provides the variable argument magic for</span>
<span class="c1">-- &#39;hPrintf&#39;.  Its implementation is intentionally not visible from</span>
<span class="c1">-- this module.</span>
<span class="kr">class</span> <span class="n">HPrintfType</span> <span class="nv">t</span> <span class="kr">where</span>
    <span class="nv">hspr</span> <span class="o">::</span> <span class="n">Handle</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">UPrintf</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="nv">t</span>

<span class="cm">{- not allowed in Haskell 98</span>
<span class="cm">instance PrintfType String where</span>
<span class="cm">    spr fmt args = uprintf fmt (reverse args)</span>
<span class="cm">-}</span>
<span class="kr">instance</span> <span class="p">(</span><span class="n">IsChar</span> <span class="nv">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">PrintfType</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="kr">where</span>
    <span class="nv">spr</span> <span class="nv">fmts</span> <span class="nv">args</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">fromChar</span> <span class="p">(</span><span class="nv">uprintf</span> <span class="nv">fmts</span> <span class="p">(</span><span class="nv">reverse</span> <span class="nv">args</span><span class="p">))</span>

<span class="kr">instance</span> <span class="n">PrintfType</span> <span class="p">(</span><span class="n">IO</span> <span class="nv">a</span><span class="p">)</span> <span class="kr">where</span>
    <span class="nv">spr</span> <span class="nv">fmts</span> <span class="nv">args</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">putStr</span> <span class="p">(</span><span class="nv">uprintf</span> <span class="nv">fmts</span> <span class="p">(</span><span class="nv">reverse</span> <span class="nv">args</span><span class="p">))</span>
    <span class="nv">return</span> <span class="nv">undefined</span>

<span class="kr">instance</span> <span class="n">HPrintfType</span> <span class="p">(</span><span class="n">IO</span> <span class="nv">a</span><span class="p">)</span> <span class="kr">where</span>
    <span class="nv">hspr</span> <span class="nv">hdl</span> <span class="nv">fmts</span> <span class="nv">args</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">hPutStr</span> <span class="nv">hdl</span> <span class="p">(</span><span class="nv">uprintf</span> <span class="nv">fmts</span> <span class="p">(</span><span class="nv">reverse</span> <span class="nv">args</span><span class="p">))</span>
    <span class="nv">return</span> <span class="nv">undefined</span>

<span class="kr">instance</span> <span class="p">(</span><span class="n">PrintfArg</span> <span class="nv">a</span><span class="p">,</span> <span class="n">PrintfType</span> <span class="nv">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">PrintfType</span> <span class="p">(</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">r</span><span class="p">)</span> <span class="kr">where</span>
    <span class="nv">spr</span> <span class="nv">fmts</span> <span class="nv">args</span> <span class="o">=</span> <span class="o">\</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">spr</span> <span class="nv">fmts</span> <span class="p">(</span><span class="nv">toUPrintf</span> <span class="nv">a</span> <span class="o">:</span> <span class="nv">args</span><span class="p">)</span>

<span class="kr">instance</span> <span class="p">(</span><span class="n">PrintfArg</span> <span class="nv">a</span><span class="p">,</span> <span class="n">HPrintfType</span> <span class="nv">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">HPrintfType</span> <span class="p">(</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">r</span><span class="p">)</span> <span class="kr">where</span>
    <span class="nv">hspr</span> <span class="nv">hdl</span> <span class="nv">fmts</span> <span class="nv">args</span> <span class="o">=</span> <span class="o">\</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">hspr</span> <span class="nv">hdl</span> <span class="nv">fmts</span> <span class="p">(</span><span class="nv">toUPrintf</span> <span class="nv">a</span> <span class="o">:</span> <span class="nv">args</span><span class="p">)</span>

<span class="kr">class</span> <span class="n">PrintfArg</span> <span class="nv">a</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">::</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">UPrintf</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Char</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="nv">c</span> <span class="o">=</span> <span class="n">UChar</span> <span class="nv">c</span>

<span class="cm">{- not allowed in Haskell 98</span>
<span class="cm">instance PrintfArg String where</span>
<span class="cm">    toUPrintf s = UString s</span>
<span class="cm">-}</span>
<span class="kr">instance</span> <span class="p">(</span><span class="n">IsChar</span> <span class="nv">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">PrintfArg</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="n">UString</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">toChar</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Int</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Int8</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Int16</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Int32</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Int64</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="o">#</span><span class="nv">ifndef</span> <span class="nv">__NHC__</span>
<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Word</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>
<span class="o">#</span><span class="nv">endif</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Word8</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Word16</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Word32</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Word64</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="nv">uInteger</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Integer</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="n">UInteger</span> <span class="mi">0</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Float</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="n">UFloat</span>

<span class="kr">instance</span> <span class="n">PrintfArg</span> <span class="n">Double</span> <span class="kr">where</span>
    <span class="nv">toUPrintf</span> <span class="o">=</span> <span class="n">UDouble</span>

<span class="nv">uInteger</span> <span class="o">::</span> <span class="p">(</span><span class="n">Integral</span> <span class="nv">a</span><span class="p">,</span> <span class="n">Bounded</span> <span class="nv">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">UPrintf</span>
<span class="nv">uInteger</span> <span class="nv">x</span> <span class="o">=</span> <span class="n">UInteger</span> <span class="p">(</span><span class="nv">toInteger</span> <span class="o">$</span> <span class="nv">minBound</span> <span class="p">`</span><span class="nv">asTypeOf</span><span class="p">`</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">toInteger</span> <span class="nv">x</span><span class="p">)</span>

<span class="kr">class</span> <span class="n">IsChar</span> <span class="nv">c</span> <span class="kr">where</span>
    <span class="nv">toChar</span> <span class="o">::</span> <span class="nv">c</span> <span class="o">-&gt;</span> <span class="n">Char</span>
    <span class="nv">fromChar</span> <span class="o">::</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="nv">c</span>

<span class="kr">instance</span> <span class="n">IsChar</span> <span class="n">Char</span> <span class="kr">where</span>
    <span class="nv">toChar</span> <span class="nv">c</span> <span class="o">=</span> <span class="nv">c</span>
    <span class="nv">fromChar</span> <span class="nv">c</span> <span class="o">=</span> <span class="nv">c</span>

<span class="c1">-------------------</span>

<span class="kr">data</span> <span class="n">UPrintf</span> <span class="o">=</span> <span class="n">UChar</span> <span class="n">Char</span> <span class="o">|</span> <span class="n">UString</span> <span class="n">String</span> <span class="o">|</span> <span class="n">UInteger</span> <span class="n">Integer</span> <span class="n">Integer</span> <span class="o">|</span> <span class="n">UFloat</span> <span class="n">Float</span> <span class="o">|</span> <span class="n">UDouble</span> <span class="n">Double</span>

<span class="nv">uprintf</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">UPrintf</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">uprintf</span> <span class="s">&quot;&quot;</span>       <span class="p">[]</span>       <span class="o">=</span> <span class="s">&quot;&quot;</span>
<span class="nv">uprintf</span> <span class="s">&quot;&quot;</span>       <span class="p">(</span><span class="kr">_</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span>    <span class="o">=</span> <span class="nv">fmterr</span>
<span class="nv">uprintf</span> <span class="p">(</span><span class="sc">&#39;%&#39;</span><span class="o">:</span><span class="sc">&#39;%&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span>   <span class="o">=</span> <span class="sc">&#39;%&#39;</span><span class="o">:</span><span class="nv">uprintf</span> <span class="nv">cs</span> <span class="nv">us</span>
<span class="nv">uprintf</span> <span class="p">(</span><span class="sc">&#39;%&#39;</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span>  <span class="p">[]</span>       <span class="o">=</span> <span class="nv">argerr</span>
<span class="nv">uprintf</span> <span class="p">(</span><span class="sc">&#39;%&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span><span class="o">@</span><span class="p">(</span><span class="kr">_</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="nv">fmt</span> <span class="nv">cs</span> <span class="nv">us</span>
<span class="nv">uprintf</span> <span class="p">(</span><span class="nv">c</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span>   <span class="nv">us</span>       <span class="o">=</span> <span class="nv">c</span><span class="o">:</span><span class="nv">uprintf</span> <span class="nv">cs</span> <span class="nv">us</span>

<span class="nv">fmt</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">UPrintf</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">fmt</span> <span class="nv">cs</span> <span class="nv">us</span> <span class="o">=</span>
    <span class="kr">let</span> <span class="p">(</span><span class="nv">width</span><span class="p">,</span> <span class="nv">prec</span><span class="p">,</span> <span class="nv">ladj</span><span class="p">,</span> <span class="nv">zero</span><span class="p">,</span> <span class="nv">plus</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">,</span> <span class="nv">us&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">getSpecs</span> <span class="n">False</span> <span class="n">False</span> <span class="n">False</span> <span class="nv">cs</span> <span class="nv">us</span>
        <span class="nv">adjust</span> <span class="p">(</span><span class="nv">pre</span><span class="p">,</span> <span class="nv">str</span><span class="p">)</span> <span class="o">=</span> 
        <span class="kr">let</span> <span class="nv">lstr</span> <span class="o">=</span> <span class="nv">length</span> <span class="nv">str</span>
            <span class="nv">lpre</span> <span class="o">=</span> <span class="nv">length</span> <span class="nv">pre</span>
            <span class="nv">fill</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">lstr</span><span class="o">+</span><span class="nv">lpre</span> <span class="o">&lt;</span> <span class="nv">width</span> <span class="kr">then</span> <span class="nv">take</span> <span class="p">(</span><span class="nv">width</span><span class="o">-</span><span class="p">(</span><span class="nv">lstr</span><span class="o">+</span><span class="nv">lpre</span><span class="p">))</span> <span class="p">(</span><span class="nv">repeat</span> <span class="p">(</span><span class="kr">if</span> <span class="nv">zero</span> <span class="kr">then</span> <span class="sc">&#39;0&#39;</span> <span class="kr">else</span> <span class="sc">&#39; &#39;</span><span class="p">))</span> <span class="kr">else</span> <span class="s">&quot;&quot;</span>
        <span class="kr">in</span>  <span class="kr">if</span> <span class="nv">ladj</span> <span class="kr">then</span> <span class="nv">pre</span> <span class="o">++</span> <span class="nv">str</span> <span class="o">++</span> <span class="nv">fill</span> <span class="kr">else</span> <span class="kr">if</span> <span class="nv">zero</span> <span class="kr">then</span> <span class="nv">pre</span> <span class="o">++</span> <span class="nv">fill</span> <span class="o">++</span> <span class="nv">str</span> <span class="kr">else</span> <span class="nv">fill</span> <span class="o">++</span> <span class="nv">pre</span> <span class="o">++</span> <span class="nv">str</span>
            <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">str</span><span class="p">)</span> <span class="o">|</span> <span class="nv">plus</span> <span class="o">=</span> <span class="nv">adjust</span> <span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="nv">str</span><span class="p">)</span>
            <span class="nv">adjust&#39;</span> <span class="nv">ps</span> <span class="o">=</span> <span class="nv">adjust</span> <span class="nv">ps</span>
        <span class="kr">in</span>
    <span class="kr">case</span> <span class="nv">cs&#39;</span> <span class="kr">of</span>
    <span class="p">[]</span>     <span class="o">-&gt;</span> <span class="nv">fmterr</span>
    <span class="nv">c</span><span class="o">:</span><span class="nv">cs&#39;&#39;</span> <span class="o">-&gt;</span>
        <span class="kr">case</span> <span class="nv">us&#39;</span> <span class="kr">of</span>
        <span class="p">[]</span>     <span class="o">-&gt;</span> <span class="nv">argerr</span>
        <span class="nv">u</span><span class="o">:</span><span class="nv">us&#39;&#39;</span> <span class="o">-&gt;</span>
        <span class="p">(</span><span class="kr">case</span> <span class="nv">c</span> <span class="kr">of</span>
        <span class="sc">&#39;c&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust</span>  <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="p">[</span><span class="nv">toEnum</span> <span class="p">(</span><span class="nv">toint</span> <span class="nv">u</span><span class="p">)])</span>
        <span class="sc">&#39;d&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">fmti</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;i&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">fmti</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;x&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust</span>  <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">fmtu</span> <span class="mi">16</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;X&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust</span>  <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">map</span> <span class="nv">toUpper</span> <span class="o">$</span> <span class="nv">fmtu</span> <span class="mi">16</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;o&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust</span>  <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">fmtu</span> <span class="mi">8</span>  <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;u&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust</span>  <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">fmtu</span> <span class="mi">10</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;e&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">prec</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;E&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">prec</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;f&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">prec</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;g&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">prec</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;G&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust&#39;</span> <span class="p">(</span><span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">prec</span> <span class="nv">u</span><span class="p">)</span>
        <span class="sc">&#39;s&#39;</span> <span class="o">-&gt;</span> <span class="nv">adjust</span>  <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">tostr</span> <span class="nv">u</span><span class="p">)</span>
        <span class="kr">_</span>   <span class="o">-&gt;</span> <span class="nv">perror</span> <span class="p">(</span><span class="s">&quot;bad formatting char &quot;</span> <span class="o">++</span> <span class="p">[</span><span class="nv">c</span><span class="p">])</span>
         <span class="p">)</span> <span class="o">++</span> <span class="nv">uprintf</span> <span class="nv">cs&#39;&#39;</span> <span class="nv">us&#39;&#39;</span>

<span class="nv">fmti</span> <span class="o">::</span> <span class="n">UPrintf</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
<span class="nv">fmti</span> <span class="p">(</span><span class="n">UInteger</span> <span class="kr">_</span> <span class="nv">i</span><span class="p">)</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="nv">show</span> <span class="p">(</span><span class="o">-</span><span class="nv">i</span><span class="p">))</span> <span class="kr">else</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nv">show</span> <span class="nv">i</span><span class="p">)</span>
<span class="nv">fmti</span> <span class="p">(</span><span class="n">UChar</span> <span class="nv">c</span><span class="p">)</span>      <span class="o">=</span> <span class="nv">fmti</span> <span class="p">(</span><span class="nv">uInteger</span> <span class="p">(</span><span class="nv">fromEnum</span> <span class="nv">c</span><span class="p">))</span>
<span class="nv">fmti</span> <span class="kr">_</span>            <span class="o">=</span> <span class="nv">baderr</span>

<span class="nv">fmtu</span> <span class="o">::</span> <span class="n">Integer</span> <span class="o">-&gt;</span> <span class="n">UPrintf</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">fmtu</span> <span class="nv">b</span> <span class="p">(</span><span class="n">UInteger</span> <span class="nv">l</span> <span class="nv">i</span><span class="p">)</span> <span class="o">=</span> <span class="nv">itosb</span> <span class="nv">b</span> <span class="p">(</span><span class="kr">if</span> <span class="nv">i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nv">l</span> <span class="o">+</span> <span class="nv">i</span> <span class="kr">else</span> <span class="nv">i</span><span class="p">)</span>
<span class="nv">fmtu</span> <span class="nv">b</span> <span class="p">(</span><span class="n">UChar</span> <span class="nv">c</span><span class="p">)</span>      <span class="o">=</span> <span class="nv">itosb</span> <span class="nv">b</span> <span class="p">(</span><span class="nv">toInteger</span> <span class="p">(</span><span class="nv">fromEnum</span> <span class="nv">c</span><span class="p">))</span>
<span class="nv">fmtu</span> <span class="kr">_</span> <span class="kr">_</span>              <span class="o">=</span> <span class="nv">baderr</span>

<span class="nv">toint</span> <span class="o">::</span> <span class="n">UPrintf</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">toint</span> <span class="p">(</span><span class="n">UInteger</span> <span class="kr">_</span> <span class="nv">i</span><span class="p">)</span> <span class="o">=</span> <span class="nv">fromInteger</span> <span class="nv">i</span>
<span class="nv">toint</span> <span class="p">(</span><span class="n">UChar</span> <span class="nv">c</span><span class="p">)</span>      <span class="o">=</span> <span class="nv">fromEnum</span> <span class="nv">c</span>
<span class="nv">toint</span> <span class="kr">_</span>             <span class="o">=</span> <span class="nv">baderr</span>

<span class="nv">tostr</span> <span class="o">::</span> <span class="n">UPrintf</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">tostr</span> <span class="p">(</span><span class="n">UString</span> <span class="nv">s</span><span class="p">)</span> <span class="o">=</span> <span class="nv">s</span>
<span class="nv">tostr</span> <span class="kr">_</span>          <span class="o">=</span> <span class="nv">baderr</span>

<span class="nv">itosb</span> <span class="o">::</span> <span class="n">Integer</span> <span class="o">-&gt;</span> <span class="n">Integer</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">itosb</span> <span class="nv">b</span> <span class="nv">n</span> <span class="o">=</span> 
    <span class="kr">if</span> <span class="nv">n</span> <span class="o">&lt;</span> <span class="nv">b</span> <span class="kr">then</span> 
        <span class="p">[</span><span class="nv">intToDigit</span> <span class="o">$</span> <span class="nv">fromInteger</span> <span class="nv">n</span><span class="p">]</span>
    <span class="kr">else</span>
        <span class="kr">let</span> <span class="p">(</span><span class="nv">q</span><span class="p">,</span> <span class="nv">r</span><span class="p">)</span> <span class="o">=</span> <span class="nv">quotRem</span> <span class="nv">n</span> <span class="nv">b</span> <span class="kr">in</span>
        <span class="nv">itosb</span> <span class="nv">b</span> <span class="nv">q</span> <span class="o">++</span> <span class="p">[</span><span class="nv">intToDigit</span> <span class="o">$</span> <span class="nv">fromInteger</span> <span class="nv">r</span><span class="p">]</span>

<span class="nv">stoi</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
<span class="nv">stoi</span> <span class="nv">a</span> <span class="p">(</span><span class="nv">c</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="o">|</span> <span class="nv">isDigit</span> <span class="nv">c</span> <span class="o">=</span> <span class="nv">stoi</span> <span class="p">(</span><span class="nv">a</span><span class="o">*</span><span class="mi">10</span> <span class="o">+</span> <span class="nv">digitToInt</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">cs</span>
<span class="nv">stoi</span> <span class="nv">a</span> <span class="nv">cs</span>                 <span class="o">=</span> <span class="p">(</span><span class="nv">a</span><span class="p">,</span> <span class="nv">cs</span><span class="p">)</span>

<span class="nv">getSpecs</span> <span class="o">::</span> <span class="n">Bool</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="o">-&gt;</span> <span class="n">Bool</span> <span class="o">-&gt;</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">UPrintf</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">,</span> <span class="n">Bool</span><span class="p">,</span> <span class="n">Bool</span><span class="p">,</span> <span class="n">Bool</span><span class="p">,</span> <span class="n">String</span><span class="p">,</span> <span class="p">[</span><span class="n">UPrintf</span><span class="p">])</span>
<span class="nv">getSpecs</span> <span class="kr">_</span> <span class="nv">z</span> <span class="nv">s</span> <span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span> <span class="o">=</span> <span class="nv">getSpecs</span> <span class="n">True</span> <span class="nv">z</span> <span class="nv">s</span> <span class="nv">cs</span> <span class="nv">us</span>
<span class="nv">getSpecs</span> <span class="nv">l</span> <span class="nv">z</span> <span class="kr">_</span> <span class="p">(</span><span class="sc">&#39;+&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span> <span class="o">=</span> <span class="nv">getSpecs</span> <span class="nv">l</span> <span class="nv">z</span> <span class="n">True</span> <span class="nv">cs</span> <span class="nv">us</span>
<span class="nv">getSpecs</span> <span class="nv">l</span> <span class="kr">_</span> <span class="nv">s</span> <span class="p">(</span><span class="sc">&#39;0&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span> <span class="o">=</span> <span class="nv">getSpecs</span> <span class="nv">l</span> <span class="n">True</span> <span class="nv">s</span> <span class="nv">cs</span> <span class="nv">us</span>
<span class="nv">getSpecs</span> <span class="nv">l</span> <span class="nv">z</span> <span class="nv">s</span> <span class="p">(</span><span class="sc">&#39;*&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span> <span class="o">=</span> 
        <span class="kr">case</span> <span class="nv">us</span> <span class="kr">of</span>
        <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nv">argerr</span>
        <span class="nv">nu</span> <span class="o">:</span> <span class="nv">us&#39;</span> <span class="o">-&gt;</span>
        <span class="kr">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">toint</span> <span class="nv">nu</span>
        <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="nv">cs&#39;&#39;</span><span class="p">,</span> <span class="nv">us&#39;&#39;</span><span class="p">)</span> <span class="o">=</span>
            <span class="kr">case</span> <span class="nv">cs</span> <span class="kr">of</span>
                    <span class="sc">&#39;.&#39;</span><span class="o">:</span><span class="sc">&#39;*&#39;</span><span class="o">:</span><span class="nv">r</span> <span class="o">-&gt;</span> <span class="kr">case</span> <span class="nv">us&#39;</span> <span class="kr">of</span> <span class="p">{</span> <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nv">argerr</span><span class="p">;</span> <span class="nv">pu</span><span class="o">:</span><span class="nv">us&#39;&#39;&#39;</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">toint</span> <span class="nv">pu</span><span class="p">,</span> <span class="nv">r</span><span class="p">,</span> <span class="nv">us&#39;&#39;&#39;</span><span class="p">)</span> <span class="p">}</span>
            <span class="sc">&#39;.&#39;</span><span class="o">:</span><span class="nv">r</span>     <span class="o">-&gt;</span> <span class="kr">let</span> <span class="p">(</span><span class="nv">n&#39;</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">stoi</span> <span class="mi">0</span> <span class="nv">r</span> <span class="kr">in</span> <span class="p">(</span><span class="nv">n&#39;</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">,</span> <span class="nv">us&#39;</span><span class="p">)</span>
            <span class="kr">_</span>         <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">cs</span><span class="p">,</span> <span class="nv">us&#39;</span><span class="p">)</span>
        <span class="kr">in</span>  <span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">p</span><span class="p">,</span> <span class="nv">l</span><span class="p">,</span> <span class="nv">z</span><span class="p">,</span> <span class="nv">s</span><span class="p">,</span> <span class="nv">cs&#39;&#39;</span><span class="p">,</span> <span class="nv">us&#39;&#39;</span><span class="p">)</span>
<span class="nv">getSpecs</span> <span class="nv">l</span> <span class="nv">z</span> <span class="nv">s</span> <span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="nv">us</span> <span class="o">=</span>
    <span class="kr">let</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">stoi</span> <span class="mi">0</span> <span class="nv">cs</span>
    <span class="kr">in</span>  <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">p</span><span class="p">,</span> <span class="nv">l</span><span class="p">,</span> <span class="nv">z</span><span class="p">,</span> <span class="nv">s</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">,</span> <span class="nv">us</span><span class="p">)</span>
<span class="nv">getSpecs</span> <span class="nv">l</span> <span class="nv">z</span> <span class="nv">s</span> <span class="nv">cs</span><span class="o">@</span><span class="p">(</span><span class="nv">c</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span> <span class="nv">us</span> <span class="o">|</span> <span class="nv">isDigit</span> <span class="nv">c</span> <span class="o">=</span>
    <span class="kr">let</span> <span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="nv">stoi</span> <span class="mi">0</span> <span class="nv">cs</span>
        <span class="p">(</span><span class="nv">p</span><span class="p">,</span> <span class="nv">cs&#39;&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">cs&#39;</span> <span class="kr">of</span>
            <span class="sc">&#39;.&#39;</span><span class="o">:</span><span class="nv">r</span> <span class="o">-&gt;</span> <span class="nv">stoi</span> <span class="mi">0</span> <span class="nv">r</span>
            <span class="kr">_</span>     <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">cs&#39;</span><span class="p">)</span>
    <span class="kr">in</span>  <span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">p</span><span class="p">,</span> <span class="nv">l</span><span class="p">,</span> <span class="nv">z</span><span class="p">,</span> <span class="nv">s</span><span class="p">,</span> <span class="nv">cs&#39;&#39;</span><span class="p">,</span> <span class="nv">us</span><span class="p">)</span>
<span class="nv">getSpecs</span> <span class="nv">l</span> <span class="nv">z</span> <span class="nv">s</span> <span class="nv">cs</span>       <span class="nv">us</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nv">l</span><span class="p">,</span> <span class="nv">z</span><span class="p">,</span> <span class="nv">s</span><span class="p">,</span> <span class="nv">cs</span><span class="p">,</span> <span class="nv">us</span><span class="p">)</span>

<span class="nv">dfmt&#39;</span> <span class="o">::</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">UPrintf</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
<span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">p</span> <span class="p">(</span><span class="n">UDouble</span> <span class="nv">d</span><span class="p">)</span> <span class="o">=</span> <span class="nv">dfmt</span> <span class="nv">c</span> <span class="nv">p</span> <span class="nv">d</span>
<span class="nv">dfmt&#39;</span> <span class="nv">c</span> <span class="nv">p</span> <span class="p">(</span><span class="n">UFloat</span> <span class="nv">f</span><span class="p">)</span>  <span class="o">=</span> <span class="nv">dfmt</span> <span class="nv">c</span> <span class="nv">p</span> <span class="nv">f</span>
<span class="nv">dfmt&#39;</span> <span class="kr">_</span> <span class="kr">_</span> <span class="kr">_</span>           <span class="o">=</span> <span class="nv">baderr</span>

<span class="nv">dfmt</span> <span class="o">::</span> <span class="p">(</span><span class="n">RealFloat</span> <span class="nv">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="n">String</span><span class="p">)</span>
<span class="nv">dfmt</span> <span class="nv">c</span> <span class="nv">p</span> <span class="nv">d</span> <span class="o">=</span>
    <span class="kr">case</span> <span class="p">(</span><span class="kr">if</span> <span class="nv">isUpper</span> <span class="nv">c</span> <span class="kr">then</span> <span class="nv">map</span> <span class="nv">toUpper</span> <span class="kr">else</span> <span class="nv">id</span><span class="p">)</span> <span class="o">$</span>
             <span class="p">(</span><span class="kr">case</span> <span class="nv">toLower</span> <span class="nv">c</span> <span class="kr">of</span>
                  <span class="sc">&#39;e&#39;</span> <span class="o">-&gt;</span> <span class="nv">showEFloat</span>
                  <span class="sc">&#39;f&#39;</span> <span class="o">-&gt;</span> <span class="nv">showFFloat</span>
                  <span class="sc">&#39;g&#39;</span> <span class="o">-&gt;</span> <span class="nv">showGFloat</span>
                  <span class="kr">_</span>   <span class="o">-&gt;</span> <span class="nv">error</span> <span class="s">&quot;Printf.dfmt: impossible&quot;</span>
             <span class="p">)</span>
               <span class="p">(</span><span class="kr">if</span> <span class="nv">p</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">Nothing</span> <span class="kr">else</span> <span class="n">Just</span> <span class="nv">p</span><span class="p">)</span> <span class="nv">d</span> <span class="s">&quot;&quot;</span> <span class="kr">of</span>
    <span class="sc">&#39;-&#39;</span><span class="o">:</span><span class="nv">cs</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="nv">cs</span><span class="p">)</span>
    <span class="nv">cs</span>     <span class="o">-&gt;</span> <span class="p">(</span><span class="s">&quot;&quot;</span> <span class="p">,</span> <span class="nv">cs</span><span class="p">)</span>

<span class="nv">perror</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="nv">a</span>
<span class="nv">perror</span> <span class="nv">s</span> <span class="o">=</span> <span class="nv">error</span> <span class="p">(</span><span class="s">&quot;Printf.printf: &quot;</span><span class="o">++</span><span class="nv">s</span><span class="p">)</span>
<span class="nv">fmterr</span><span class="p">,</span> <span class="nv">argerr</span><span class="p">,</span> <span class="nv">baderr</span> <span class="o">::</span> <span class="nv">a</span>
<span class="nv">fmterr</span> <span class="o">=</span> <span class="nv">perror</span> <span class="s">&quot;formatting string ended prematurely&quot;</span>
<span class="nv">argerr</span> <span class="o">=</span> <span class="nv">perror</span> <span class="s">&quot;argument list ended prematurely&quot;</span>
<span class="nv">baderr</span> <span class="o">=</span> <span class="nv">perror</span> <span class="s">&quot;bad argument&quot;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4401/addtag/" class="addtag" id="addtag_4401">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4401/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4401/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefaf;"
  >-1/5=-0.20</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4401"
  >-</span><span
  class="button yellow"
  id="rating_z_4401"
  >0</span><span 
  class="button green"
  id="rating_p_4401"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4401/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4402">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4402/">#4402</a>(<script language="JavaScript">print_time(new Date("2007/11/26 01:03 GMT"));</script><noscript>2007/11/26 01:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #7fff7f;">8/8=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>仕様削ってもいいから、シンプルに実装しろとかなら良かったのに。
組み込みとかの厳しい環境だと、printfの関数を入れると、かなりのメモリが圧迫されるケースがあるわけで、そういう奴用に。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4402/addtag/" class="addtag" id="addtag_4402">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #7fff7f;"
  >8/8=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4402"
  >-</span><span
  class="button yellow"
  id="rating_z_4402"
  >0</span><span 
  class="button green"
  id="rating_p_4402"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4402/">
    2
    replies
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4402/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4404">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4404/">#4404</a>(<script language="JavaScript">print_time(new Date("2007/11/26 05:09 GMT"));</script><noscript>2007/11/26 05:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>前に作ったやつがあるので恥ずかしながら投げてみます。
shiroさんがきっと書いてくれると思ったのでshiroさんの投稿を待った事をここに告白します。
ライブラリにntというディレクトリを作ってその下に置き、
(use nt.printf) して使います。

Gauche 0.8.12で動きます。0.8.11以前では正規表現にmatchしなかった場合に#fではなく""が返るので一部修正が必要です。
なお、104行目の (d o x X) のところを (d b o x X) にすると、%bで２進表記をするオレオレ拡張が入ります。

テストコードも以下に付けておきます。
;;; nt/test/printf.scm
(use gauche.test)

(test-start "nt.printf")
(use nt.printf)
(test-module 'nt.printf)

(test-section "escaped symbols")
(test* "\\t" "\t" (sprintf "\t"))
(test* "\\n" "\n" (sprintf "\n"))
(test* "\\\"" "\"" (sprintf "\""))
(test* "\\\\" "\\" (sprintf "\\"))
(test* "%%" "%" (sprintf "%%"))

(test-section "%d")
(test* "%d 1" "1" (sprintf "%d" 1))
(test* "%3d 1" "  1" (sprintf "%3d" 1))
(test* "%3d 1111" "1111" (sprintf "%3d" 1111))
(test* "%03d 1" "001" (sprintf "%03d" 1))
(test* "%-3d" "1  " (sprintf "%-3d" 1))
(test* "%+d 1" "+1" (sprintf "%+d" 1))
(test* "%+3d 1" " +1" (sprintf "%+3d" 1))

(test* "%d zero" "0" (sprintf "%d" 0))

(test* "%d minusvalue" "-1" (sprintf "%d" -1))
(test* "%3d minusvalue" " -1" (sprintf "%3d" -1))
;(test* "%03d minusvalue" "-01" (sprintf "%03d" -1))
(test* "%-d minusvalue" "-1" (sprintf "%-d" -1))
(test* "%+d minusvalue" "-1" (sprintf "%+d" -1))
(test* "%+3d minusvalue" " -1" (sprintf "%+3d" -1))

(test-section "%d with non-integer values")
(test* "%d float 2.71828" "2" (sprintf "%d" 2.71828))
(test* "%d rational 3/2" "1" (sprintf "%d" 3/2))
(test* "%d string \"123\"" "123" (sprintf "%d" "123"))
(test* "%d string \"abc\"" "0" (sprintf "%d" "abc"))
(test* "%d symbol '1" "1" (sprintf "%d" '1))
(test* "%d symbol 'a" "0" (sprintf "%d" 'a))

(test-section "%i %u")
(test* "%i" "999" (sprintf "%i" 999))
(test* "%u" "999" (sprintf "%u" 999))

(test-section "%x %X")
(test* "%x 15" "f" (sprintf "%x" 15))
(test* "%3x 15" "  f" (sprintf "%3x" 15))
(test* "%03x 15" "00f" (sprintf "%03x" 15))
(test* "%03x 65535" "ffff" (sprintf "%03x" 65535))
;(test* "%-3x 15" "f  " (sprintf "%-3x" 15))

(test* "%X 15" "F" (sprintf "%X" 15))
(test* "%3X 15" "  F" (sprintf "%3X" 15))
(test* "%03X 15" "00F" (sprintf "%03X" 15))
(test* "%03X 65535" "FFFF" (sprintf "%03X" 65535))
;(test* "%-3x 15" "f  " (sprintf "%-3x" 15))

(test-section "%o")
(test* "%o 9" "11" (sprintf "%o" 9))
(test* "%3o 9" " 11" (sprintf "%3o" 9))
(test* "%03o 9" "011" (sprintf "%03o" 9))
(test* "%3o 255" "377" (sprintf "%3o" 255))
(test* "%3o 511" "777" (sprintf "%3o" 511))
(test* "%3o 585" "1111" (sprintf "%3o" 585))
;(test* "%-3o" "11 " (sprintf "%-3o" 9))

;(test-section "%b") ; original feature
;(test* "%b 2" "10" (sprintf "%b" 2))
;(test* "%3b 2" " 10" (sprintf "%3b" 2))
;(test* "%03b 2" "010" (sprintf "%03b" 2))
;(test* "%3b 15" "1111" (sprintf "%3b" 15))
;;(test* "%-3b 2" "10 " (sprintf "%-3b" 3))

(test-section "%c")
(test* "%c 9" "\t" (sprintf "%c" 9))
(test* "%c 13" "\r" (sprintf "%c" 13))
(test* "%c 32" " " (sprintf "%c" #x20)) ; 32
(test* "%c 55" "7" (sprintf "%c" #x37)) ; 55
(test* "%c 69" "E" (sprintf "%c" #x45)) ; 69
(test* "%c 12354" "あ" (sprintf "%c" #x3042)) ; = 12354

(test* "%c \"abc\"" "a" (sprintf "%c" "a"))
(test* "%c \"いろは\"" "い" (sprintf "%c" "いろは"))

(test-section "%s")
(test* "%s" "\n" (sprintf "%s" "\n"))
(test* "%s" "a" (sprintf "%s" "a"))
(test* "%3s" "   " (sprintf "%3s" ""))
(test* "%3s" "  a" (sprintf "%3s" "a"))
(test* "%3s" " aa" (sprintf "%3s" "aa"))
(test* "%3s" "aaa" (sprintf "%3s" "aaa"))
(test* "%3s" "aaaa" (sprintf "%3s" "aaaa"))
(test* "%-3s" "   " (sprintf "%-3s" ""))
(test* "%-3s" "a  " (sprintf "%-3s" "a"))
(test* "%-3s" "aa " (sprintf "%-3s" "aa"))
(test* "%-3s" "aaa" (sprintf "%-3s" "aaa"))
(test* "%-3s" "aaaa" (sprintf "%-3s" "aaaa"))

(test-section "%s with non-string values")
(test* "%s integer 5" "5" (sprintf "%s" 5))
(test* "%s float 3.14" "3.14" (sprintf "%s" 3.14))
(test* "%s rational 3/2" "3/2" (sprintf "%s" 3/2))
(test* "%s symbol 'abc" "abc" (sprintf "%s" 'abc))
(test* "%s list (1 2 3)" "(1 2 3)" (sprintf "%s" '(1 2 3)))
(test* "%s empty list ()" "()" (sprintf "%s" '()))
(test* "%s dotted list (1 . 2)" "(1 . 2)" (sprintf "%s" '(1 . 2)))
(test* "%s #t" "#t" (sprintf "%s" #t))
(test* "%s #f" "#f" (sprintf "%s" #f))

(test-section "%f")
(test* "%f" "3.140000" (sprintf "%f" 3.14))
(test* "%f" "3.141593" (sprintf "%f" 3.1415926))

(test* "%f" "-3.140000" (sprintf "%f" -3.14))
(test* "%f" "-3.141593" (sprintf "%f" -3.1415926))

(test* "%.0f" "3" (sprintf "%.0f" 3.14))
(test* "%.1f" "3.1" (sprintf "%.1f" 3.14))
(test* "%.2f" "3.14" (sprintf "%.2f" 3.14))
(test* "%.3f" "3.140" (sprintf "%.3f" 3.14))
(test* "%.4f" "3.1400" (sprintf "%.4f" 3.14))

(test* "%1.0f 3.14" "3" (sprintf "%1.0f" 3.14))
(test* "%1.1f 3.14" "3.1" (sprintf "%1.1f" 3.14))
(test* "%1.2f 3.14" "3.14" (sprintf "%1.2f" 3.14))
(test* "%1.0f 3.15" "3" (sprintf "%1.0f" 3.15))
(test* "%1.1f 3.15" "3.2" (sprintf "%1.1f" 3.15))
(test* "%1.2f 3.15" "3.15" (sprintf "%1.2f" 3.15))

(test* "%2.0f" " 3" (sprintf "%2.0f" 3.14))
(test* "%2.1f" "3.1" (sprintf "%2.1f" 3.14))
(test* "%2.2f" "3.14" (sprintf "%2.2f" 3.14))
(test* "%-2.0f" "3 " (sprintf "%-2.0f" 3.14))
(test* "%-2.1f" "3.1" (sprintf "%-2.1f" 3.14))
(test* "%-2.2f" "3.14" (sprintf "%-2.2f" 3.14))

(test* "%3.0f" "  3" (sprintf "%3.0f" 3.14))
(test* "%3.1f" "3.1" (sprintf "%3.1f" 3.14))
(test* "%3.2f" "3.14" (sprintf "%3.2f" 3.14))
(test* "%3.3f" "3.140" (sprintf "%3.3f" 3.14))
(test* "%-3.0f" "3  " (sprintf "%-3.0f" 3.14))
(test* "%-3.1f" "3.1" (sprintf "%-3.1f" 3.14))
(test* "%-3.2f" "3.14" (sprintf "%-3.2f" 3.14))
(test* "%-3.3f" "3.140" (sprintf "%-3.3f" 3.14))

(test* "%4.0f" "   3" (sprintf "%4.0f" 3.14))
(test* "%4.1f" " 3.1" (sprintf "%4.1f" 3.14))
(test* "%4.2f" "3.14" (sprintf "%4.2f" 3.14))
(test* "%4.3f" "3.140" (sprintf "%4.3f" 3.14))
(test* "%4.4f" "3.1400" (sprintf "%4.4f" 3.14))
(test* "%-4.0f" "3   " (sprintf "%-4.0f" 3.14))
(test* "%-4.1f" "3.1 " (sprintf "%-4.1f" 3.14))
(test* "%-4.2f" "3.14" (sprintf "%-4.2f" 3.14))
(test* "%-4.3f" "3.140" (sprintf "%-4.3f" 3.14))
(test* "%-4.4f" "3.1400" (sprintf "%-4.4f" 3.14))

(test* "%5.0f" "    3" (sprintf "%5.0f" 3.14))
(test* "%5.1f" "  3.1" (sprintf "%5.1f" 3.14))
(test* "%5.2f" " 3.14" (sprintf "%5.2f" 3.14))
(test* "%5.3f" "3.140" (sprintf "%5.3f" 3.14))
(test* "%5.4f" "3.1400" (sprintf "%5.4f" 3.14))
(test* "%5.5f" "3.14000" (sprintf "%5.5f" 3.14))
(test* "%-5.0f" "3    " (sprintf "%-5.0f" 3.14))
(test* "%-5.1f" "3.1  " (sprintf "%-5.1f" 3.14))
(test* "%-5.2f" "3.14 " (sprintf "%-5.2f" 3.14))
(test* "%-5.3f" "3.140" (sprintf "%-5.3f" 3.14))
(test* "%-5.4f" "3.1400" (sprintf "%-5.4f" 3.14))
(test* "%-5.5f" "3.14000" (sprintf "%-5.5f" 3.14))

(test-section "%e %E")
(test* "%e 0.0000314" "3.140000e-05" (sprintf "%e" 0.0000314))
(test* "%e 0.000314" "3.140000e-04" (sprintf "%e" 0.000314))
(test* "%e 0.00314" "3.140000e-03" (sprintf "%e" 0.00314))
(test* "%e 0.0314" "3.140000e-02" (sprintf "%e" 0.0314))
(test* "%e 0.314" "3.140000e-01" (sprintf "%e" 0.314))
(test* "%e 3.14" "3.140000e+00" (sprintf "%e" 3.14))
(test* "%e 31.4" "3.140000e+01" (sprintf "%e" 31.4))
(test* "%e 314" "3.140000e+02" (sprintf "%e" 314))
(test* "%e 3140" "3.140000e+03" (sprintf "%e" 3140))
(test* "%e 31400" "3.140000e+04" (sprintf "%e" 31400))
(test* "%e 314000" "3.140000e+05" (sprintf "%e" 314000))
(test* "%.0e 31415926" "3e+07" (sprintf "%.0e" 31415926))
(test* "%.1e 31415926" "3.1e+07" (sprintf "%.1e" 31415926))
(test* "%.2e 31415926" "3.14e+07" (sprintf "%.2e" 31415926))
(test* "%.3e 31415926" "3.142e+07" (sprintf "%.3e" 31415926))
(test* "%.4e 31415926" "3.1416e+07" (sprintf "%.4e" 31415926))
(test* "%.5e 31415926" "3.14159e+07" (sprintf "%.5e" 31415926))

(test* "%E" "3.140000E+00" (sprintf "%E" 3.14))

(test-section "%g")
(test* "%g" "3.14" (sprintf "%g" 3.14))
(test* "%g" "-3.14" (sprintf "%g" -3.14))
(test* "%g" "3.1415926" (sprintf "%g" 3.1415926))

(test-end)
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138</pre></td><td class="code"><div class="highlight"><pre><span class="c1">;;; nt/printf.scm</span>
<span class="p">(</span><span class="nf">define-module</span> <span class="nv">nt</span><span class="o">.</span><span class="nv">printf</span>
  <span class="p">(</span><span class="nf">export</span>
   <span class="nv">printf</span>
   <span class="nv">sprintf</span>
   <span class="p">))</span>

<span class="p">(</span><span class="nf">select-module</span> <span class="nv">nt</span><span class="o">.</span><span class="nv">printf</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">log10</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">log </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">log </span><span class="mf">10.0</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sprintf</span> <span class="nv">fmt</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">out</span> <span class="p">(</span><span class="nf">open-output-string</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">fmt</span> <span class="nv">fmt</span><span class="p">)</span> <span class="p">(</span><span class="nf">args</span> <span class="nv">args</span><span class="p">))</span>
      <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">ret</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="nv">fmt</span> <span class="nv">out</span><span class="p">)</span> <span class="p">(</span><span class="nf">get-output-string</span> <span class="nv">out</span><span class="p">))</span>
      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">match</span> <span class="p">(</span><span class="o">#</span><span class="nv">/%</span><span class="p">(</span><span class="nf">?&lt;flag&gt;</span><span class="err">[</span><span class="nv">-+</span><span class="o">#</span> <span class="mi">0</span><span class="err">]</span><span class="nv">*</span><span class="p">)(</span><span class="nf">?&lt;num&gt;</span><span class="err">[</span><span class="mi">1-9</span><span class="err">][</span><span class="mi">0-9</span><span class="err">]</span><span class="nv">*</span><span class="p">)</span><span class="nv">?</span><span class="p">(</span><span class="err">\</span><span class="o">.</span><span class="p">(</span><span class="nf">?&lt;below&gt;</span><span class="err">[</span><span class="mi">0-9</span><span class="err">]</span><span class="nv">+</span><span class="p">))</span><span class="nv">?</span><span class="p">(</span><span class="nf">?&lt;type&gt;</span><span class="err">[</span><span class="nv">%diouxXfeEgGbcs</span><span class="err">]</span><span class="p">)</span><span class="nv">/</span> <span class="nv">fmt</span><span class="p">)))</span>
        <span class="p">(</span><span class="k">if </span><span class="nv">match</span>
            <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">flags</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;flag</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-&gt;list </span><span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;flag</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">()))</span>
                   <span class="p">(</span><span class="nf">num</span> <span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;num</span><span class="p">))</span> <span class="c1">;str/指定がなければ#f. ※0.8.11までは#fではなく&quot;&quot;が返る</span>
                   <span class="p">(</span><span class="nf">below</span> <span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;below</span><span class="p">))</span> <span class="c1">;str/指定がなければ#f. ※0.8.11までは#fではなく&quot;&quot;が返る</span>
                   <span class="p">(</span><span class="nf">type</span> <span class="p">(</span><span class="nb">string-&gt;symbol </span><span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;type</span><span class="p">)))</span>
                   <span class="p">(</span><span class="nf">consumes-an-arg?</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">eq? </span><span class="ss">&#39;%</span> <span class="nv">type</span><span class="p">)))</span>
                   <span class="p">(</span><span class="nf">flush-left?</span> <span class="p">(</span><span class="nb">memq </span><span class="sc">#\-</span> <span class="nv">flags</span><span class="p">))</span>
                   <span class="p">(</span><span class="nf">signed?</span> <span class="p">(</span><span class="nb">memq </span><span class="sc">#\+</span> <span class="nv">flags</span><span class="p">))</span>
                   <span class="p">(</span><span class="nf">zero-pad?</span> <span class="p">(</span><span class="nb">memq </span><span class="sc">#\0</span> <span class="nv">flags</span><span class="p">))</span>
                   <span class="p">)</span>
              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="k">and </span><span class="nv">consumes-an-arg?</span> <span class="p">(</span><span class="nb">null? </span><span class="nv">args</span><span class="p">))</span>
                  <span class="p">(</span><span class="nf">ret</span><span class="p">)</span> <span class="c1">;;; arguments-exhausted</span>
                  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">arg</span> <span class="p">(</span><span class="k">if </span><span class="nv">consumes-an-arg?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">args</span><span class="p">)</span> <span class="ss">&#39;not-eaten</span><span class="p">)))</span>
                    
                    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">format-int-value</span> <span class="nv">type</span><span class="p">)</span>
                      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">%value</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">integer? </span><span class="nv">arg</span><span class="p">)</span> <span class="nv">arg</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="p">(</span><span class="nb">truncate </span><span class="p">(</span><span class="nf">x-&gt;number</span> <span class="nv">arg</span><span class="p">))))))</span>
                        <span class="p">(</span><span class="k">if </span><span class="nv">flush-left?</span>
                            <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">%fmt</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;~&quot;</span> <span class="nv">type</span><span class="p">)))</span>
                              <span class="p">(</span><span class="nf">format</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;~&quot;</span> <span class="p">(</span><span class="k">or </span><span class="nv">num</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="s">&quot;a&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">format</span> <span class="nv">%fmt</span> <span class="nv">%value</span><span class="p">)))</span>
                            <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">%fmt</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;~&quot;</span> <span class="p">(</span><span class="k">or </span><span class="nv">num</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="s">&quot;,&quot;</span> <span class="p">(</span><span class="k">if </span><span class="nv">zero-pad?</span> <span class="s">&quot;&#39;0&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
                                                       <span class="p">(</span><span class="k">if </span><span class="nv">signed?</span> <span class="s">&quot;@&quot;</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="nv">type</span><span class="p">)))</span>
                              <span class="p">(</span><span class="nf">format</span> <span class="nv">%fmt</span> <span class="nv">%value</span><span class="p">)))))</span>

                    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">format-float-value</span><span class="p">)</span><span class="c1">; type)</span>
                      <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">%value</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">real? </span><span class="nv">arg</span><span class="p">)</span> <span class="nv">arg</span> <span class="p">(</span><span class="nf">x-&gt;number</span> <span class="nv">arg</span><span class="p">)))</span>
                             <span class="p">(</span><span class="nf">%e-offset</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="p">(</span><span class="nb">floor </span><span class="p">(</span><span class="nf">log10</span> <span class="p">(</span><span class="nb">abs </span><span class="nv">%value</span><span class="p">)))))</span>
                             <span class="p">(</span><span class="nf">%precision</span> <span class="p">(</span><span class="k">case </span><span class="nv">type</span>
                                           <span class="p">((</span><span class="nf">f</span><span class="p">)</span>
<span class="c1">;                                            (if (string=? &quot;&quot; below) 6 (x-&gt;integer below))) ; &lt; 0.8.12</span>
                                            <span class="p">(</span><span class="k">if </span><span class="nv">below</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="nv">below</span><span class="p">)</span> <span class="mi">6</span><span class="p">))</span>
                                           <span class="p">((</span><span class="nf">e</span> <span class="nv">E</span><span class="p">)</span>
                                            <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">&gt; </span><span class="nv">%e-offset</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">;;; sorry i&#39;m using (set!)</span>
                                                   <span class="p">(</span><span class="k">set! </span><span class="nv">%value</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">%value</span> <span class="p">(</span><span class="nb">expt </span><span class="mi">10</span> <span class="nv">%e-offset</span><span class="p">))))</span>
                                                  <span class="p">((</span><span class="nb">&lt; </span><span class="nv">%e-offset</span> <span class="mi">0</span><span class="p">)</span>
                                                   <span class="p">(</span><span class="k">set! </span><span class="nv">%value</span> <span class="p">(</span><span class="nb">* </span><span class="nv">%value</span> <span class="p">(</span><span class="nb">expt </span><span class="mi">10</span> <span class="p">(</span><span class="nb">abs </span><span class="nv">%e-offset</span><span class="p">)))))</span>
                                                  <span class="p">(</span><span class="k">else </span><span class="no">#t</span><span class="p">))</span>
<span class="c1">;                                            (if (string=? &quot;&quot; below) 6 (x-&gt;integer below))) ;&lt; 0.8.12</span>
                                            <span class="p">(</span><span class="k">if </span><span class="nv">below</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="nv">below</span><span class="p">)</span> <span class="mi">6</span><span class="p">))</span>
<span class="c1">;                                           (else (if (string=? &quot;&quot; below) 12 (x-&gt;integer below))))) ;&lt; 0.8.12</span>
                                           <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="k">if </span><span class="nv">below</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="nv">below</span><span class="p">)</span> <span class="mi">12</span><span class="p">))))</span>
                             <span class="p">)</span>
                        <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">%int</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">%precision</span><span class="p">)</span>
                                                     <span class="p">(</span><span class="nb">round </span><span class="nv">%value</span><span class="p">)</span>
                                                     <span class="p">(</span><span class="nb">truncate </span><span class="nv">%value</span><span class="p">))))</span>
                               <span class="p">(</span><span class="nf">%fract</span> <span class="p">(</span><span class="nb">abs </span><span class="p">(</span><span class="nb">- </span><span class="nv">%value</span> <span class="nv">%int</span><span class="p">)))</span>
                               <span class="p">(</span><span class="nf">%rounded</span> <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="p">(</span><span class="nb">round </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">expt </span><span class="mf">0.1</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">%precision</span> <span class="mi">1</span><span class="p">))</span>
                                                               <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">expt </span><span class="mi">10</span> <span class="nv">%precision</span><span class="p">)</span> <span class="nv">%fract</span><span class="p">)))))</span>
                               <span class="p">(</span><span class="nf">%str</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">0</span> <span class="nv">%precision</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;~d&quot;</span> <span class="nv">%int</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">format</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;~d.~&quot;</span> <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;~d&quot;</span> <span class="nv">%precision</span><span class="p">)</span> <span class="s">&quot;,&#39;0d&quot;</span><span class="p">)</span>
                                                 <span class="nv">%int</span> <span class="nv">%rounded</span><span class="p">)))</span>
                               <span class="p">(</span><span class="nf">%f-fmt</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;~&quot;</span> <span class="p">(</span><span class="k">or </span><span class="nv">num</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="c1">;&quot;,&quot; (if zero-pad? &quot;&#39;0&quot; &quot;&quot;)</span>
                                                      <span class="p">(</span><span class="k">if </span><span class="nv">flush-left?</span> <span class="s">&quot;&quot;</span> <span class="s">&quot;@&quot;</span><span class="p">)</span> <span class="s">&quot;a&quot;</span><span class="p">))</span>
                               <span class="p">(</span><span class="nf">%e-fmt</span> <span class="p">(</span><span class="nb">string-append </span><span class="nv">%f-fmt</span>
                                                      <span class="s">&quot;~a&quot;</span> <span class="c1">; [eE]</span>
                                                      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">%e-offset</span> <span class="mi">0</span><span class="p">)</span> <span class="s">&quot;-&quot;</span> <span class="s">&quot;+&quot;</span><span class="p">)</span>
                                                      <span class="s">&quot;~2,&#39;0d&quot;</span><span class="p">))</span>
                               <span class="p">)</span>
                          <span class="p">(</span><span class="k">case </span><span class="nv">type</span>
                            <span class="p">((</span><span class="nf">f</span><span class="p">)</span>
                             <span class="p">(</span><span class="nf">format</span> <span class="nv">%f-fmt</span> <span class="nv">%str</span><span class="p">))</span>
                            <span class="p">((</span><span class="nf">g</span> <span class="nv">G</span><span class="p">)</span>
                             <span class="p">(</span><span class="nf">format</span> <span class="nv">%f-fmt</span> <span class="p">(</span><span class="nf">regexp-replace</span> <span class="o">#</span><span class="nv">/0+$/</span> <span class="nv">%str</span> <span class="s">&quot;&quot;</span><span class="p">)))</span>
                            <span class="p">((</span><span class="nf">e</span> <span class="nv">E</span><span class="p">)</span>
                             <span class="p">(</span><span class="nf">format</span> <span class="nv">%e-fmt</span> <span class="nv">%str</span> <span class="nv">type</span> <span class="p">(</span><span class="nb">abs </span><span class="nv">%e-offset</span><span class="p">))</span>
                             <span class="p">)</span>
                            <span class="p">))))</span>
                    
                    <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;before</span><span class="p">)</span> <span class="nv">out</span><span class="p">)</span>
                    <span class="c1">;; warnings</span>
<span class="c1">;                    (case type</span>
<span class="c1">;                      ((d i)</span>
<span class="c1">;                       (when (not (integer? arg))</span>
<span class="c1">;                             (print &quot;warning: %~a requires &lt;integer&gt;&quot; type) ))</span>
<span class="c1">;                      ((b o u X x c)</span>
<span class="c1">;                       (when (not (and (integer? arg) (&lt; 0 arg)))</span>
<span class="c1">;                             (print &quot;warning: %~a requires &lt;unsigned integer&gt;&quot; type) ))</span>
<span class="c1">;                      ((f e E g G)</span>
<span class="c1">;                       (when (not (real? arg))</span>
<span class="c1">;                             (print &quot;warning: %~a requires &lt;real&gt;&quot; type)))</span>
<span class="c1">;;                      ((b)) ; we use %b for unsigned binary</span>
<span class="c1">;                      ((s)</span>
<span class="c1">;                       (when (not (string? arg))</span>
<span class="c1">;                             (format &quot;warning: %s requires &lt;string&gt;&quot;)))</span>
<span class="c1">;                      )</span>
                    <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="k">case </span><span class="nv">type</span>
                               <span class="p">((</span><span class="nf">d</span> <span class="nv">o</span> <span class="nv">x</span> <span class="nv">X</span><span class="p">)</span> <span class="c1">;;  %bを２進表記に使いたい場合は (d b o x X)</span>
                                <span class="p">(</span><span class="nf">format-int-value</span> <span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;type</span><span class="p">)))</span>
                               <span class="p">((</span><span class="nf">i</span> <span class="nv">u</span><span class="p">)</span> <span class="c1">; signed/unsigned decimal</span>
                                <span class="p">(</span><span class="nf">format-int-value</span> <span class="s">&quot;d&quot;</span><span class="p">))</span>
                               <span class="p">((</span><span class="nf">f</span><span class="p">)</span> <span class="c1">;float ; [-]ddd.ddd</span>
                                <span class="p">(</span><span class="nf">format-float-value</span><span class="p">))</span>
                               <span class="p">((</span><span class="nf">e</span> <span class="nv">E</span><span class="p">)</span> <span class="c1">;&#39;not-supported) ; [-]d.ddde+-dd</span>
                                <span class="p">(</span><span class="nf">format-float-value</span><span class="p">))</span>
                               <span class="p">((</span><span class="nf">g</span> <span class="nv">G</span><span class="p">)</span> <span class="c1">; &#39;not-supported) ;</span>
                                <span class="p">(</span><span class="nf">format-float-value</span><span class="p">))</span>
<span class="c1">;                               ((b) &#39;not-supported) ; backslash-escape seq</span>
                               <span class="p">((</span><span class="nf">c</span><span class="p">)</span> <span class="c1">; first-char</span>
                                <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">integer? </span><span class="nv">arg</span><span class="p">)</span>
                                       <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">integer-&gt;char </span><span class="nv">arg</span><span class="p">)))</span>
                                      <span class="p">((</span><span class="nb">string? </span><span class="nv">arg</span><span class="p">)</span>
                                       <span class="p">(</span><span class="nb">string-ref </span><span class="nv">arg</span> <span class="mi">0</span><span class="p">))</span>
                                      <span class="p">(</span><span class="k">else </span>
                                       <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">integer-&gt;char </span><span class="p">(</span><span class="nb">truncate </span><span class="p">(</span><span class="nf">x-&gt;number</span> <span class="nv">arg</span><span class="p">)))))</span> <span class="p">))</span>
                               <span class="p">((</span><span class="nf">s</span><span class="p">)</span> <span class="c1">; &#39;str</span>
                                <span class="p">(</span><span class="nf">let1</span> <span class="nv">%s-fmt</span> <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;~&quot;</span>
                                                            <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;~a~a&quot;</span>
                                                                    <span class="p">(</span><span class="k">or </span><span class="nv">num</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
                                                                    <span class="p">(</span><span class="k">if </span><span class="nv">flush-left?</span> <span class="s">&quot;&quot;</span> <span class="s">&quot;@&quot;</span><span class="p">)</span>
                                                                    <span class="p">)</span>
                                                            <span class="s">&quot;a&quot;</span><span class="p">)</span>
                                      <span class="p">(</span><span class="nf">format</span> <span class="nv">%s-fmt</span> <span class="nv">arg</span><span class="p">)))</span>
                               <span class="p">((</span><span class="nf">%</span><span class="p">)</span> <span class="s">&quot;%&quot;</span><span class="p">))</span> <span class="nv">out</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nf">match</span> <span class="ss">&#39;after</span><span class="p">)</span>
                          <span class="p">(</span><span class="k">if </span><span class="nv">consumes-an-arg?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">args</span><span class="p">)</span> <span class="nv">args</span><span class="p">))</span>
                    <span class="p">)))</span>
            <span class="p">(</span><span class="nf">ret</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">printf</span> <span class="nv">fmt</span> <span class="o">.</span> <span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="nb">display </span><span class="p">(</span><span class="nb">apply </span><span class="nv">sprintf</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">fmt</span> <span class="nv">args</span><span class="p">))))</span>

<span class="p">(</span><span class="nf">provide</span> <span class="s">&quot;nt/printf&quot;</span><span class="p">)</span>
<span class="c1">;;EOF</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4404/addtag/" class="addtag" id="addtag_4404">タグ</a>:
	
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4404/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4404/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4404"
  >-</span><span
  class="button yellow"
  id="rating_z_4404"
  >0</span><span 
  class="button green"
  id="rating_p_4404"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4404/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4407">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4407/">#4407</a>(<script language="JavaScript">print_time(new Date("2007/11/26 07:30 GMT"));</script><noscript>2007/11/26 07:30 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>これ。できたらお題じゃなくて、トピックに回してもらえませんかねぇ…(^_^;)。←泣きそう</p>
<p>あと、以前の B+-Tree、一つ前のクイズスタイルのお題のときにも感じたのですが、お題の投稿に際して出題者には、ご自身の答えの事前の登録も義務づける（公開は一定時間経過後なされる）ようにしてはどうかと思いました。実際、書くとなると（出題者が）想像していたよりたいへんじゃん…てなことにならないように。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4407/addtag/" class="addtag" id="addtag_4407">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4407"
  >-</span><span
  class="button yellow"
  id="rating_z_4407"
  >0</span><span 
  class="button green"
  id="rating_p_4407"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4407/">
    2
    replies
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4407/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4408">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4408/">#4408</a>(<script language="JavaScript">print_time(new Date("2007/11/26 08:57 GMT"));</script><noscript>2007/11/26 08:57 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>そうですねぇ…</p>
<p>とりあえずこのお題はマイナス評価の激しさから見て
カバレッジ計算の対象から外した方がよさそうですね。</p>
<p>残りの二つに関しては今のところプラス評価とマイナス評価が拮抗しているようなので、このコメントを見て「このお題も外すべき」と思った人はマイナス評価、「残すべき」と思った人はプラス評価を押すということでどうでしょう。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4408/addtag/" class="addtag" id="addtag_4408">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4408"
  >-</span><span
  class="button yellow"
  id="rating_z_4408"
  >0</span><span 
  class="button green"
  id="rating_p_4408"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4407/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4408/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4408/">
    1
    reply
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4408/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4409">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/582/" target="_top">jijixi</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4409/">#4409</a>(<script language="JavaScript">print_time(new Date("2007/11/26 09:01 GMT"));</script><noscript>2007/11/26 09:01 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>超手抜き実装。単に int, float, char, string を単純に変換して埋め込むだけのものです。
OCaml ではコンパイラをいじらないと、まともに使えるものはできっこないので、こんなもんで良いんです。

3 ファイルを同じディレクトリに置き、
% ocamlbuild tiny_printf.cma
などとします。

% ocaml -I _build tiny_printf.cma
# let r = Obj.repr;;               
val r : 'a -&gt; Obj.t = &lt;fun&gt;
# Tiny_printf.sprintf "hoge %% %d %s %c %f" [r 10; r "fuga"; r 'C'; r 2.1];;
- : string = "hoge % 10 fuga C 2.1"

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre><span class="o">/*</span> <span class="n">parser</span><span class="k">.</span><span class="n">mly</span> <span class="k">*</span><span class="o">/</span>
<span class="o">%</span><span class="n">token</span> <span class="k">&lt;</span><span class="n">string</span><span class="k">&gt;</span> <span class="n">CONV</span>
<span class="o">%</span><span class="n">token</span> <span class="k">&lt;</span><span class="n">string</span><span class="k">&gt;</span> <span class="n">STR</span>
<span class="o">%</span><span class="n">start</span> <span class="n">expr</span>
<span class="o">%</span><span class="kr">type</span> <span class="k">&lt;</span><span class="n">string</span><span class="k">&gt;</span> <span class="n">expr</span>
<span class="o">%%</span>
<span class="n">expr</span><span class="k">:</span>
     <span class="n">CONV</span>  <span class="k">{</span> <span class="o">$</span><span class="mi">1</span> <span class="k">}</span>
   <span class="k">|</span> <span class="n">STR</span>   <span class="k">{</span> <span class="o">$</span><span class="mi">1</span> <span class="k">}</span>
<span class="k">;</span>

<span class="c">(* lexer.mll *)</span>
<span class="k">{</span>
<span class="kr">open</span> <span class="n">Parser</span>
<span class="kr">exception</span> <span class="n">Eof</span>
<span class="k">}</span>
<span class="kr">let</span> <span class="n">conv</span> <span class="k">=</span> <span class="k">[</span><span class="sc">&#39;d&#39;</span> <span class="sc">&#39;f&#39;</span> <span class="sc">&#39;c&#39;</span> <span class="sc">&#39;s&#39;</span><span class="k">]</span>
<span class="n">rule</span> <span class="n">token</span> <span class="k">=</span> <span class="n">parse</span>
     <span class="k">(</span><span class="sc">&#39;%&#39;</span> <span class="k">(</span><span class="n">conv</span> <span class="k">|</span> <span class="sc">&#39;%&#39;</span><span class="k">))</span> <span class="kr">as</span> <span class="n">str</span>   <span class="k">{</span> <span class="n">CONV</span><span class="k">(</span><span class="n">str</span><span class="k">)</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">([</span><span class="o">^</span><span class="sc">&#39;%&#39;</span><span class="k">]</span> <span class="k">+)</span> <span class="kr">as</span> <span class="n">str</span>           <span class="k">{</span> <span class="n">STR</span><span class="k">(</span><span class="n">str</span><span class="k">)</span> <span class="k">}</span>
   <span class="k">|</span> <span class="n">eof</span>                         <span class="k">{</span> <span class="n">raise</span> <span class="n">Eof</span> <span class="k">}</span>

<span class="c">(* tiny_printf.ml *)</span>
<span class="kr">let</span> <span class="n">sprintf</span> <span class="n">format_str</span> <span class="n">args</span> <span class="k">=</span>
   <span class="kr">let</span> <span class="n">strbuf</span> <span class="k">=</span> <span class="n">Buffer</span><span class="k">.</span><span class="n">create</span> <span class="mi">10</span> <span class="kr">in</span>
   <span class="kr">let</span> <span class="n">add</span>    <span class="k">=</span> <span class="n">Buffer</span><span class="k">.</span><span class="n">add_string</span> <span class="n">strbuf</span> <span class="kr">in</span>
   <span class="kr">let</span> <span class="n">lexbuf</span> <span class="k">=</span> <span class="n">Lexing</span><span class="k">.</span><span class="n">from_string</span> <span class="n">format_str</span> <span class="kr">in</span>
   <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">args&#39;</span> <span class="k">=</span>
      <span class="kr">match</span> <span class="n">Parser</span><span class="k">.</span><span class="n">expr</span> <span class="n">Lexer</span><span class="k">.</span><span class="n">token</span> <span class="n">lexbuf</span> <span class="kr">with</span>
      <span class="k">|</span> <span class="s2">&quot;%%&quot;</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">add</span> <span class="s2">&quot;%&quot;</span><span class="k">;</span> <span class="n">loop</span> <span class="n">args&#39;</span><span class="k">)</span>
      <span class="k">|</span> <span class="n">s</span> <span class="kr">when</span> <span class="n">s</span><span class="k">.[</span><span class="mi">0</span><span class="k">]</span> <span class="k">=</span> <span class="sc">&#39;%&#39;</span> <span class="k">-&gt;</span> <span class="kr">begin</span>
           <span class="kr">let</span> <span class="n">arg</span><span class="k">,</span> <span class="n">rest</span> <span class="k">=</span>
              <span class="kr">match</span> <span class="n">args&#39;</span> <span class="kr">with</span>
              <span class="k">|</span> <span class="n">x</span><span class="k">::</span><span class="n">xs</span> <span class="k">-&gt;</span> <span class="n">x</span><span class="k">,</span> <span class="n">xs</span>
              <span class="k">|</span> <span class="k">_</span> <span class="k">-&gt;</span> <span class="n">failwith</span> <span class="s2">&quot;number of args mismatch!&quot;</span>
           <span class="kr">in</span>
           <span class="n">add</span> <span class="kr">begin</span>
              <span class="kr">match</span> <span class="n">s</span> <span class="kr">with</span>
              <span class="k">|</span> <span class="s2">&quot;%%&quot;</span> <span class="k">-&gt;</span> <span class="s2">&quot;%&quot;</span>
              <span class="k">|</span> <span class="s2">&quot;%d&quot;</span> <span class="kr">when</span> <span class="n">Obj</span><span class="k">.</span><span class="n">is_int</span> <span class="n">arg</span> <span class="k">-&gt;</span>
                   <span class="n">string_of_int</span> <span class="k">(</span><span class="n">Obj</span><span class="k">.</span><span class="n">obj</span> <span class="n">arg</span><span class="k">)</span>
              <span class="k">|</span> <span class="s2">&quot;%f&quot;</span> <span class="kr">when</span> <span class="n">Obj</span><span class="k">.</span><span class="n">tag</span> <span class="n">arg</span> <span class="k">=</span> <span class="n">Obj</span><span class="k">.</span><span class="n">double_tag</span> <span class="k">-&gt;</span>
                   <span class="n">string_of_float</span> <span class="k">(</span><span class="n">Obj</span><span class="k">.</span><span class="n">obj</span> <span class="n">arg</span><span class="k">)</span>
              <span class="k">|</span> <span class="s2">&quot;%c&quot;</span> <span class="kr">when</span> <span class="n">Obj</span><span class="k">.</span><span class="n">is_int</span> <span class="n">arg</span> <span class="k">-&gt;</span>
                   <span class="n">String</span><span class="k">.</span><span class="n">make</span> <span class="mi">1</span> <span class="k">(</span><span class="n">Obj</span><span class="k">.</span><span class="n">obj</span> <span class="n">arg</span><span class="k">)</span>
              <span class="k">|</span> <span class="s2">&quot;%s&quot;</span> <span class="kr">when</span> <span class="n">Obj</span><span class="k">.</span><span class="n">tag</span> <span class="n">arg</span> <span class="k">=</span> <span class="n">Obj</span><span class="k">.</span><span class="n">string_tag</span> <span class="k">-&gt;</span>
                   <span class="n">Obj</span><span class="k">.</span><span class="n">obj</span> <span class="n">arg</span>
              <span class="k">|</span> <span class="k">_</span> <span class="k">-&gt;</span>
                   <span class="n">failwith</span> <span class="s2">&quot;type mismatch!&quot;</span>
           <span class="kr">end</span><span class="k">;</span>
           <span class="n">loop</span> <span class="n">rest</span>
        <span class="kr">end</span>
      <span class="k">|</span> <span class="n">s</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">add</span> <span class="n">s</span><span class="k">;</span> <span class="n">loop</span> <span class="n">args&#39;</span><span class="k">)</span>
   <span class="kr">in</span>
   <span class="kr">try</span> <span class="n">loop</span> <span class="n">args</span>
   <span class="kr">with</span> <span class="n">Lexer</span><span class="k">.</span><span class="n">Eof</span> <span class="k">-&gt;</span> <span class="n">Buffer</span><span class="k">.</span><span class="n">contents</span> <span class="n">strbuf</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4409/addtag/" class="addtag" id="addtag_4409">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4409/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4409/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4409"
  >-</span><span
  class="button yellow"
  id="rating_z_4409"
  >0</span><span 
  class="button green"
  id="rating_p_4409"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4409/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4410">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4410/">#4410</a>(<script language="JavaScript">print_time(new Date("2007/11/26 09:22 GMT"));</script><noscript>2007/11/26 09:22 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #afffaf;">5/5=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>そうですね。printfの仕様自体が大きいので、問題の焦点がどこにあるかぼやけちゃってる感じがします。</p>
<p>フラグとwidth, precision等をオミットして%d, %f, %s, %cくらいに絞れば、(1)文字列のスキャン、 (2)オブジェクトから文字列への変換、(3)数も型も不定な引数リスト、あたりで課題がはっきりするので、「マルチリンガルレシピ」としてもわりと有用なものになったような気がします。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4410/addtag/" class="addtag" id="addtag_4410">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #afffaf;"
  >5/5=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4410"
  >-</span><span
  class="button yellow"
  id="rating_z_4410"
  >0</span><span 
  class="button green"
  id="rating_p_4410"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4402/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4410/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4410/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4412">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/96/" target="_top">ether</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4412/">#4412</a>(<script language="JavaScript">print_time(new Date("2007/11/26 14:30 GMT"));</script><noscript>2007/11/26 14:30 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #9fff9f;">6/6=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>OCaml で、サポートする書式指定は #4409 の jijixi さんのと大体同じですが、ちゃんと型チェックする版。</p>
<p>基本は参考ページの手法を使って、でもそれだけだと printf っぽく見えないので Camlp4 を被せました。</p>
<pre class="literal-block">
KURO-BOX% ocaml
        Objective Caml version 3.09.2

# #load &quot;camlp4o.cma&quot;;;
        Camlp4 Parsing version 3.09.2

# #load &quot;pa_printf.cmo&quot;;;
# myprintf &quot;hoge %% %d %s %c %f&quot; 10 &quot;fuga&quot; 'C' 2.1;;
- : string = &quot;hoge % 10 fuga C 2.1&quot;
# myprintf &quot;hoge %% %d %s %c %f&quot; 3.14 &quot;fuga&quot; 'C' 2.1;;
This expression has type float but is here used with type int
</pre>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20090422063755/http://www.brics.dk/RS/98/12/index.html">Olivier Danvy (1998) "Functional Unparsing"</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="c">(* ocamlc -c -I +camlp4 -pp &#39;camlp4o pa_extend.cmo q_MLast.cmo&#39; pa_printf.ml *)</span>

<span class="kr">let</span> <span class="n">make_printf</span> <span class="k">_</span><span class="n">loc</span> <span class="n">format</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">parse_format</span> <span class="n">format</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">lit</span> <span class="n">e</span> <span class="n">s</span> <span class="k">=</span> <span class="n">parser</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="sc">&#39;%&#39;</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">esc</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="k">(</span><span class="n">lit</span> <span class="o">$</span><span class="n">str</span><span class="k">:</span><span class="n">s</span><span class="o">$</span><span class="k">)</span> <span class="k">&gt;&gt;</span>  <span class="s2">&quot;&quot;</span> <span class="n">strm</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="n">c</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">lit</span> <span class="n">e</span> <span class="k">(</span><span class="n">s</span>  <span class="o">^</span> <span class="n">String</span><span class="k">.</span><span class="n">make</span> <span class="mi">1</span> <span class="n">c</span><span class="k">)</span> <span class="n">strm</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="k">(</span><span class="n">lit</span> <span class="o">$</span><span class="n">str</span><span class="k">:</span><span class="n">s</span><span class="o">$</span><span class="k">)</span> <span class="k">&gt;&gt;</span>
    <span class="kr">and</span> <span class="n">esc</span> <span class="n">e</span> <span class="n">s</span> <span class="k">=</span> <span class="n">parser</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="sc">&#39;d&#39;</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">lit</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="n">int</span> <span class="k">&gt;&gt;</span> <span class="s2">&quot;&quot;</span> <span class="n">strm</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="sc">&#39;f&#39;</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">lit</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="n">float</span> <span class="k">&gt;&gt;</span> <span class="s2">&quot;&quot;</span> <span class="n">strm</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="sc">&#39;c&#39;</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">lit</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="n">char</span> <span class="k">&gt;&gt;</span> <span class="s2">&quot;&quot;</span> <span class="n">strm</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="sc">&#39;s&#39;</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">lit</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="n">str</span> <span class="k">&gt;&gt;</span> <span class="s2">&quot;&quot;</span> <span class="n">strm</span>
    <span class="k">|</span> <span class="k">[&lt;</span> <span class="k">&#39;</span><span class="sc">&#39;%&#39;</span><span class="k">;</span> <span class="n">strm</span> <span class="k">&gt;]</span> <span class="k">-&gt;</span> <span class="n">lit</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">compose</span> <span class="o">$</span><span class="n">e</span><span class="o">$</span> <span class="k">(</span><span class="n">lit</span> <span class="s2">&quot;%&quot;</span><span class="k">)</span> <span class="k">&gt;&gt;</span> <span class="s2">&quot;&quot;</span> <span class="n">strm</span>
    <span class="kr">in</span>
    <span class="n">lit</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="kr">fun</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="n">x</span> <span class="k">&gt;&gt;</span> <span class="s2">&quot;&quot;</span> <span class="k">(</span><span class="n">Stream</span><span class="k">.</span><span class="n">of_string</span> <span class="n">format</span><span class="k">)</span>
  <span class="kr">in</span>
  <span class="kr">let</span> <span class="n">parsed_format</span> <span class="k">=</span> <span class="n">parse_format</span> <span class="n">format</span> <span class="kr">in</span>
  <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span>
    <span class="kr">let</span> <span class="n">compose</span> <span class="n">f</span> <span class="n">g</span> <span class="n">x</span> <span class="k">=</span> <span class="n">f</span> <span class="k">(</span><span class="n">g</span> <span class="n">x</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">lit</span> <span class="n">x</span> <span class="n">k</span> <span class="n">s</span> <span class="k">=</span> <span class="n">k</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">x</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">int</span> <span class="n">k</span> <span class="n">s</span> <span class="n">x</span> <span class="k">=</span> <span class="n">k</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">string_of_int</span> <span class="n">x</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">str</span> <span class="n">k</span> <span class="n">s</span> <span class="n">x</span> <span class="k">=</span> <span class="n">k</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">x</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">float</span> <span class="n">k</span> <span class="n">s</span> <span class="n">x</span> <span class="k">=</span> <span class="n">k</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">string_of_float</span> <span class="n">x</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">char</span> <span class="n">k</span> <span class="n">s</span> <span class="n">x</span> <span class="k">=</span> <span class="n">k</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="n">String</span><span class="k">.</span><span class="n">make</span> <span class="mi">1</span> <span class="n">x</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">format</span> <span class="n">p</span> <span class="k">=</span> <span class="n">p</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">s</span> <span class="k">-&gt;</span> <span class="n">s</span><span class="k">)</span> <span class="s2">&quot;&quot;</span> <span class="kr">in</span>
    <span class="n">format</span> <span class="o">$</span><span class="n">parsed_format</span><span class="o">$</span>
  <span class="k">&gt;&gt;</span>
<span class="k">;;</span>

<span class="n">EXTEND</span>
  <span class="n">Pcaml</span><span class="k">.</span><span class="n">expr</span><span class="k">:</span> <span class="n">LEVEL</span> <span class="s2">&quot;expr1&quot;</span> <span class="k">[</span>
    <span class="k">[</span> <span class="s2">&quot;myprintf&quot;</span><span class="k">;</span> <span class="n">format</span> <span class="k">=</span> <span class="n">STRING</span> <span class="k">-&gt;</span> <span class="n">make_printf</span> <span class="k">_</span><span class="n">loc</span> <span class="n">format</span> <span class="k">]</span>
  <span class="k">];</span>
<span class="n">END</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4412/addtag/" class="addtag" id="addtag_4412">タグ</a>:
	
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/Camlp4/">Camlp4</a>
    
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4412/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4412/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #9fff9f;"
  >6/6=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4412"
  >-</span><span
  class="button yellow"
  id="rating_z_4412"
  >0</span><span 
  class="button green"
  id="rating_p_4412"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4412/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4415">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/96/" target="_top">ether</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4415/">#4415</a>(<script language="JavaScript">print_time(new Date("2007/11/26 14:56 GMT"));</script><noscript>2007/11/26 14:56 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>「引数・返り値等の仕様はできるだけ似せればよい」っていうのは仕様の適当なサブセットを決めるのが投稿者に任されてるってことじゃないですかね。「できるだけ」っていう言葉の解釈の問題かな？</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4415/addtag/" class="addtag" id="addtag_4415">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4415"
  >-</span><span
  class="button yellow"
  id="rating_z_4415"
  >0</span><span 
  class="button green"
  id="rating_p_4415"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4402/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4415/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4415/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4416">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4416/">#4416</a>(<script language="JavaScript">print_time(new Date("2007/11/26 15:24 GMT"));</script><noscript>2007/11/26 15:24 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>そんなに神経質にならなくてもという気がします。もちろん言語のカバレッジや一番を目指すというのはモチベーションとしてはいいと思います。でもコンテストで何かの優劣をつけるのが目的ではないと思うのですがどうでしょう。いろいろな言語で同じお題を解いてみることで、一人ではとても収集できない対訳集のようなものが形成できるのが楽しみであってもいいと思っています。
もちろん質のよいコードを集められる良問であればそれは素晴らしいことなので大いに評価すればよいし、残念ながらそうでない場合はそのような評価になってしまうのはしょうがないです。それでもネタが出ないよりもいいと思います。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4416/addtag/" class="addtag" id="addtag_4416">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4416"
  >-</span><span
  class="button yellow"
  id="rating_z_4416"
  >0</span><span 
  class="button green"
  id="rating_p_4416"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4408/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4416/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4416/">
    2
    replies
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4416/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4418">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/533/" target="_top">yappy</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4418/">#4418</a>(<script language="JavaScript">print_time(new Date("2007/11/26 18:20 GMT"));</script><noscript>2007/11/26 18:20 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  出題した者です。<br/>確かにここに出すには適当でない問題でした。軽率でした。<br/>申し訳ありません。<br/><br/>このお題の処理は管理人さんの判断に任せます。<br/>問題の質に対する対応を考える機会にしてくだされば幸いです。<br/><br/>(関連リンクのところにJavaScriptで実装していて感動したものを載せておきます・・・)
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090422063755/http://www.onicos.com/staff/iz/amuse/javascript/expert/">高度な JavaScript 技集</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4418/addtag/" class="addtag" id="addtag_4418">タグ</a>:
	
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/%E5%8F%82%E8%80%83%E3%81%AB%E3%81%AA%E3%82%8B/">参考になる</a>
    
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4418"
  >-</span><span
  class="button yellow"
  id="rating_z_4418"
  >0</span><span 
  class="button green"
  id="rating_p_4418"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4416/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4418/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4418/">
    1
    reply
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4418/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4419">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4419/">#4419</a>(<script language="JavaScript">print_time(new Date("2007/11/26 23:53 GMT"));</script><noscript>2007/11/26 23:53 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'> #4418は/.的に『参考になる』か『興味深い』でモデレートしたいところ。

モデレートの種類が無いとモデレートしにくいなぁ。
コメントそのものが優れているわけじゃなくて、コメントの先が優れているので。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4419/addtag/" class="addtag" id="addtag_4419">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4419"
  >-</span><span
  class="button yellow"
  id="rating_z_4419"
  >0</span><span 
  class="button green"
  id="rating_p_4419"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4418/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4419/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4419/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4421">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/564/" target="_top">herumi</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4421/">#4421</a>(<script language="JavaScript">print_time(new Date("2007/11/27 03:16 GMT"));</script><noscript>2007/11/27 03:16 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<p>問題を「作法」とか「思考」などのラベルで分類できるようになればよいのでしょうか．</p>
<p>・doukaku.orgが目指す「他の言語でどう書くの?」的データを増やすための，一つ一つの答えはルーチンワークっぽいけど的確なものが要求される問題，</p>
<p>・もう一つの「コロシアム」的側面としてのプログラマのアイデアやセンスも必要とされる問題，</p>
<p>など．前者だけだとつまんないなーという気はします．</p>
<p></p>
<p>今回のクイズについては(出題者としてどうなるかと思いつつ)，</p>
<p></p>
<p>・問題自体は簡単で紙と鉛筆でも答えの一つは見つけられる，</p>
<p>・小さい部分では総当たりでもそこそこ簡単に解が求まり，</p>
<p>・1桁絞りはそんなに難しくなく，その場合は，実はその一つ前の自然数の分割が伏線だったりする(ruckerさんご指摘)，</p>
<p>・やってるうちに法則性が見えて効率のよい枝刈りをして高速な答えが，</p>
<p>・最終的には完全に答えを出せる，</p>
<p></p>
<p>あたりで全体としてはよい流れだったなあと思っているのですが，ご不満な方も多いようで難しいですね．</p>
</div>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4421/addtag/" class="addtag" id="addtag_4421">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4421"
  >-</span><span
  class="button yellow"
  id="rating_z_4421"
  >0</span><span 
  class="button green"
  id="rating_p_4421"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4407/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4421/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4421/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4422">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4422/">#4422</a>(<script language="JavaScript">print_time(new Date("2007/11/27 03:34 GMT"));</script><noscript>2007/11/27 03:34 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>nobsunの意見に大賛成です。野球にたとえると、一つのゲームの中でピッチャーが「ストライクゾーンに入らない球」を投げることはよくあることですし、逆にピッチャーがストライクゾーンを外すのをおそれてど真ん中ばかり投げたのではゲームになりません。</p>
<p>yappyさんにはかわいそうなことになってしまいましたけど、今回投げた球はストライクゾーンよりちょっと「めんどくさい度高い側」にそれてしまったようです。でもそれに関してyappyさんを責める人がいるとしたらそれは間違いです。こういう処理が得意な言語があるかもしれないですから。実際下の方のOCamlでの解答(<a class="reference" href="/web/20090422063755/http://ja.doukaku.org/comment/4412/">http://ja.doukaku.org/comment/4412/</a>)なんか想像以上に短いと思いました。
なのでこのお題がストライクなのかボールなのかはすごく判断の難しいところかなと思います。かなり悩んでいます。</p>
<p>一方、ボール球はトピックに移すべきかと思います。これは単純な理由で「言語詳細ページの『未解決問題』に表示して注目を集めつづける対象として適切か？」の答えがNoだと思うからなんです。投稿者を責めたり投稿を削除したりはしないんですが、初めてこのサイトに来た人が一番最初にたどり着くお題は自分の一番得意な言語の未解決問題だと思うんです。その最初に見る問題がマイナス評価のたくさん付いているお題なのはよくないかな、と。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4422/addtag/" class="addtag" id="addtag_4422">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4422"
  >-</span><span
  class="button yellow"
  id="rating_z_4422"
  >0</span><span 
  class="button green"
  id="rating_p_4422"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4416/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4422/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4422/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4423">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/375/" target="_top">nskj77</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4423/">#4423</a>(<script language="JavaScript">print_time(new Date("2007/11/27 04:39 GMT"));</script><noscript>2007/11/27 04:39 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<p>ちょっと前に作ったのがあるので投稿します。template haskellのサンプルほぼそのままです。</p>
<p></p>
<p>&gt; ghci -fth Print.hs</p>
<p>&gt; print ($(printf "%d %d %d %x %o") 1 2 3 10 10)</p>
<p>"1 2 3 a 12"</p>
<p>&gt; print ($(printf "Hello, %s") "World!")</p>
<p>"Hello, World!"</p>
</div>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090422063755/http://www.haskell.org/th/">template haskell</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="nv">qualified</span> <span class="n">Numeric</span> <span class="nv">as</span> <span class="n">N</span>
<span class="kr">import</span> <span class="n">Language</span><span class="o">.</span><span class="n">Haskell</span><span class="o">.</span><span class="n">TH</span>
<span class="kr">import</span> <span class="n">Text</span><span class="o">.</span><span class="n">ParserCombinators</span><span class="o">.</span><span class="n">Parsec</span>

<span class="kr">data</span> <span class="n">Format</span> <span class="o">=</span> <span class="n">S</span> <span class="o">|</span> <span class="n">D</span> <span class="o">|</span> <span class="n">X</span> <span class="o">|</span> <span class="n">O</span> <span class="o">|</span> <span class="n">L</span> <span class="n">String</span> <span class="kr">deriving</span> <span class="n">Show</span>

<span class="nv">run</span> <span class="nv">s</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">parse</span> <span class="nv">myParser</span> <span class="s">&quot;print&quot;</span> <span class="nv">s</span> <span class="kr">of</span>
            <span class="n">Left</span> <span class="nv">err</span> <span class="o">-&gt;</span> <span class="nv">error</span> <span class="o">$</span> <span class="nv">show</span> <span class="nv">err</span>
            <span class="n">Right</span> <span class="nv">x</span>  <span class="o">-&gt;</span> <span class="nv">x</span>

<span class="nv">myParser</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">x</span> <span class="o">&lt;-</span> <span class="nv">lineParser</span> <span class="o">&lt;|&gt;</span> <span class="nv">return</span> <span class="p">(</span><span class="n">L</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
  <span class="kr">case</span> <span class="nv">x</span> <span class="kr">of</span>
    <span class="n">L</span> <span class="s">&quot;&quot;</span>      <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">[]</span>
    <span class="nv">otherwise</span> <span class="o">-&gt;</span> <span class="kr">do</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="nv">myParser</span><span class="p">;</span> <span class="nv">return</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">y</span><span class="p">)</span>

<span class="nv">lineParser</span> <span class="o">=</span> <span class="p">(</span><span class="nv">try</span> <span class="p">(</span><span class="nv">char</span> <span class="sc">&#39;%&#39;</span> <span class="o">&gt;&gt;</span> <span class="nv">choice</span> <span class="p">[</span><span class="nv">s</span><span class="p">,</span> <span class="nv">d</span><span class="p">,</span> <span class="nv">x</span><span class="p">,</span> <span class="nv">o</span><span class="p">,</span> <span class="nv">l</span><span class="p">]))</span>
             <span class="o">&lt;|&gt;</span> <span class="p">(</span><span class="nv">try</span> <span class="p">(</span><span class="nv">many1</span> <span class="p">(</span><span class="nv">noneOf</span> <span class="s">&quot;%&quot;</span><span class="p">))</span> <span class="o">&gt;&gt;=</span> <span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">(</span><span class="n">L</span> <span class="nv">x</span><span class="p">))</span>
  <span class="kr">where</span> <span class="nv">s</span> <span class="o">=</span> <span class="nv">char</span> <span class="sc">&#39;s&#39;</span> <span class="o">&gt;&gt;</span> <span class="nv">return</span> <span class="n">S</span>
        <span class="nv">d</span> <span class="o">=</span> <span class="nv">char</span> <span class="sc">&#39;d&#39;</span> <span class="o">&gt;&gt;</span> <span class="nv">return</span> <span class="n">D</span>
        <span class="nv">x</span> <span class="o">=</span> <span class="nv">char</span> <span class="sc">&#39;x&#39;</span> <span class="o">&gt;&gt;</span> <span class="nv">return</span> <span class="n">X</span>
        <span class="nv">o</span> <span class="o">=</span> <span class="nv">char</span> <span class="sc">&#39;o&#39;</span> <span class="o">&gt;&gt;</span> <span class="nv">return</span> <span class="n">O</span>
        <span class="nv">l</span> <span class="o">=</span> <span class="nv">anyChar</span> <span class="o">&gt;&gt;=</span> <span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">(</span><span class="n">L</span> <span class="p">(</span><span class="sc">&#39;%&#39;</span><span class="o">:</span><span class="p">[</span><span class="nv">x</span><span class="p">]))</span>

<span class="nv">gen</span> <span class="o">::</span> <span class="p">[</span><span class="n">Format</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">ExpQ</span> <span class="o">-&gt;</span> <span class="n">ExpQ</span>
<span class="nv">gen</span> <span class="p">[]</span>        <span class="nv">x</span> <span class="o">=</span> <span class="nv">x</span>
<span class="nv">gen</span> <span class="p">(</span><span class="n">D</span>  <span class="o">:</span> <span class="nv">xs</span><span class="p">)</span> <span class="nv">x</span> <span class="o">=</span> <span class="p">[</span><span class="o">|\</span><span class="nv">n</span> <span class="o">-&gt;</span> <span class="o">$</span><span class="p">(</span><span class="nv">gen</span> <span class="nv">xs</span> <span class="p">[</span><span class="o">|$</span><span class="nv">x</span> <span class="o">++</span> <span class="nv">show</span> <span class="nv">n</span><span class="o">|</span><span class="p">])</span><span class="o">|</span><span class="p">]</span>
<span class="nv">gen</span> <span class="p">(</span><span class="n">X</span>  <span class="o">:</span> <span class="nv">xs</span><span class="p">)</span> <span class="nv">x</span> <span class="o">=</span> <span class="p">[</span><span class="o">|\</span><span class="nv">n</span> <span class="o">-&gt;</span> <span class="o">$</span><span class="p">(</span><span class="nv">gen</span> <span class="nv">xs</span> <span class="p">[</span><span class="o">|$</span><span class="nv">x</span> <span class="o">++</span> <span class="nv">toHex</span> <span class="nv">n</span><span class="o">|</span><span class="p">])</span><span class="o">|</span><span class="p">]</span>
<span class="nv">gen</span> <span class="p">(</span><span class="n">O</span>  <span class="o">:</span> <span class="nv">xs</span><span class="p">)</span> <span class="nv">x</span> <span class="o">=</span> <span class="p">[</span><span class="o">|\</span><span class="nv">n</span> <span class="o">-&gt;</span> <span class="o">$</span><span class="p">(</span><span class="nv">gen</span> <span class="nv">xs</span> <span class="p">[</span><span class="o">|$</span><span class="nv">x</span> <span class="o">++</span> <span class="nv">toOct</span> <span class="nv">n</span><span class="o">|</span><span class="p">])</span><span class="o">|</span><span class="p">]</span>
<span class="nv">gen</span> <span class="p">(</span><span class="n">S</span>  <span class="o">:</span> <span class="nv">xs</span><span class="p">)</span> <span class="nv">x</span> <span class="o">=</span> <span class="p">[</span><span class="o">|\</span><span class="nv">s</span> <span class="o">-&gt;</span> <span class="o">$</span><span class="p">(</span><span class="nv">gen</span> <span class="nv">xs</span> <span class="p">[</span><span class="o">|$</span><span class="nv">x</span> <span class="o">++</span> <span class="nv">s</span><span class="o">|</span><span class="p">])</span><span class="o">|</span><span class="p">]</span>
<span class="nv">gen</span> <span class="p">(</span><span class="n">L</span> <span class="nv">s</span><span class="o">:</span> <span class="nv">xs</span><span class="p">)</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">gen</span> <span class="nv">xs</span> <span class="p">[</span><span class="o">|$</span><span class="nv">x</span> <span class="o">++</span> <span class="o">$</span><span class="p">(</span><span class="nv">stringE</span> <span class="nv">s</span><span class="p">)</span><span class="o">|</span><span class="p">]</span> 

<span class="nv">toHex</span> <span class="nv">n</span> <span class="o">=</span> <span class="n">N</span><span class="o">.</span><span class="nv">showHex</span> <span class="nv">n</span> <span class="s">&quot;&quot;</span>
<span class="nv">toOct</span> <span class="nv">n</span> <span class="o">=</span> <span class="n">N</span><span class="o">.</span><span class="nv">showOct</span> <span class="nv">n</span> <span class="s">&quot;&quot;</span>

<span class="nv">printf</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="n">ExpQ</span>
<span class="nv">printf</span> <span class="nv">s</span> <span class="o">=</span> <span class="nv">gen</span> <span class="p">(</span><span class="nv">run</span> <span class="nv">s</span><span class="p">)</span> <span class="p">[</span><span class="o">|</span><span class="s">&quot;&quot;</span><span class="o">|</span><span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4423/addtag/" class="addtag" id="addtag_4423">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4423/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4423/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4423"
  >-</span><span
  class="button yellow"
  id="rating_z_4423"
  >0</span><span 
  class="button green"
  id="rating_p_4423"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4423/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4430">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4430/">#4430</a>(<script language="JavaScript">print_time(new Date("2007/11/27 08:53 GMT"));</script><noscript>2007/11/27 08:53 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre>| printf |
printf := [:args |
    | formStrm valsStrm outStrm |
    formStrm := args first readStream.
    valsStrm := args allButFirst readStream.
    outStrm := String new writeStream.
    [formStrm atEnd] whileFalse: [
        | next width print scale format |
        outStrm nextPutAll: (formStrm upTo: $%).
        next := formStrm next.
        width := scale := 0.
        next ifNotNil: [
            next isDigit ifTrue: [
                formStrm back.
                width := Integer readFrom: formStrm.
                next := formStrm next].
            next = $. ifTrue: [
                scale := Integer readFrom: formStrm.
                next := formStrm next]].
        print := [:val |
            | str |
            str := val asString.
            width := width max: str size.
            outStrm nextPutAll: (str forceTo: width paddingStartWith: $ )].
        format := [:float |
            | str idx |
            str := (scale &gt; 0 ifTrue: [float asScaledDecimal: scale] ifFalse: [float]) asString.
            (idx := str indexOf: $s) &gt; 0 ifTrue: [str := str first: idx - 1].
            str].
        next caseOf: {
            [$%] -&gt; [outStrm nextPut: $%].
            [$d] -&gt; [print value: valsStrm next asInteger].
            [$f] -&gt; [print value: (format value: valsStrm next asFloat)].
            [$o] -&gt; [print value: (valsStrm next radix: 16)].
            [$x] -&gt; [print value: (valsStrm next radix: 8)].
            [$c] -&gt; [outStrm nextPut: valsStrm next asCharacter].
            [$s] -&gt; [outStrm nextPutAll: valsStrm next asString]} otherwise: []].
    outStrm contents].

printf value: {&#39;hoge %6.2f %6d %o %x %c %s %% fuga&#39;. 1.234. 1234. 1234. 1234. &#39;a&#39;. &#39;abc&#39;}
&quot;=&gt; &#39;hoge   1.23   1234 4D2 2322 a abc % fuga&#39; &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4430/addtag/" class="addtag" id="addtag_4430">タグ</a>:
	
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4430/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4430/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4430"
  >-</span><span
  class="button yellow"
  id="rating_z_4430"
  >0</span><span 
  class="button green"
  id="rating_p_4430"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4430/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4436">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4436/">#4436</a>(<script language="JavaScript">print_time(new Date("2007/11/27 11:42 GMT"));</script><noscript>2007/11/27 11:42 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffff9f;">0/6=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
<p>反則にしか見えないが、これでも注意事項の
</p>
<ul>
 <li>
     標準でついているprintf系関数の使用禁止
 </li>

 <li>
     標準でついているライブラリ以外の使用禁止
 </li>
</ul>
<p>を満たしている点に注目。
</p>
<p>Dan the Perl Monger
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">sub </span><span class="nf">mysprintf</span><span class="p">{</span>
    <span class="k">my</span> <span class="nv">$cmd</span> <span class="o">=</span> <span class="nb">join</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">,</span> <span class="s">&#39;printf&#39;</span><span class="p">,</span> <span class="nv">@_</span><span class="p">);</span>
    <span class="k">return</span> <span class="sb">`$cmd`</span>
<span class="p">}</span>

<span class="k">if</span> <span class="p">(</span><span class="n">__FILE__</span> <span class="ow">eq</span> <span class="nv">$0</span><span class="p">){</span>
    <span class="k">print</span> <span class="n">mysprintf</span><span class="p">(</span><span class="s">&quot;%.6g&quot;</span><span class="p">,</span> <span class="nb">exp</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span>
<span class="p">}</span>
<span class="cp">__END__</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4436/addtag/" class="addtag" id="addtag_4436">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4436/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4436/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffff9f;"
  >0/6=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4436"
  >-</span><span
  class="button yellow"
  id="rating_z_4436"
  >0</span><span 
  class="button green"
  id="rating_p_4436"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4436/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4442">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/573/" target="_top">greentea</a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4442/">#4442</a>(<script language="JavaScript">print_time(new Date("2007/11/27 14:09 GMT"));</script><noscript>2007/11/27 14:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>%%, %d, %f, %sに対応。フラグ文字はつけても無視されます。(glib拡張にある'I'など[A-Za-z]にマッチするフラグがあった場合、結果がおかしくなるかエラーになります)

14行目、int(arg.next()).__str__()でなくstr(int(arg.next()))とすると
    elif fmt[-1] == "d": return str(int(arg.next()))
TypeError: 'str' object is not callable
のようなエラーが出たので__str__()を使いました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">re</span>

<span class="k">def</span> <span class="nf">sprintf</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">getPercent</span><span class="p">():</span>
    <span class="n">index</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">index</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
      <span class="k">yield</span> <span class="n">index</span>
      <span class="n">t</span> <span class="o">=</span> <span class="nb">str</span><span class="p">[</span><span class="n">index</span><span class="o">+</span><span class="mi">2</span><span class="p">:]</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;%&quot;</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span> <span class="k">raise</span> <span class="ne">StopIteration</span>
      <span class="n">index</span> <span class="o">+=</span> <span class="n">t</span> <span class="o">+</span> <span class="mi">2</span>

  <span class="k">def</span> <span class="nf">parseFormat</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">fmt</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;%&quot;</span><span class="p">:</span> <span class="k">return</span> <span class="s">&quot;%&quot;</span>
    <span class="k">elif</span> <span class="n">fmt</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;d&quot;</span><span class="p">:</span> <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">next</span><span class="p">())</span><span class="o">.</span><span class="n">__str__</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">fmt</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;s&quot;</span><span class="p">:</span> <span class="k">return</span> <span class="n">arg</span><span class="o">.</span><span class="n">next</span><span class="p">()</span><span class="o">.</span><span class="n">__str__</span><span class="p">()</span>
    <span class="k">elif</span> <span class="n">fmt</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;f&quot;</span><span class="p">:</span> <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">arg</span><span class="o">.</span><span class="n">next</span><span class="p">())</span><span class="o">.</span><span class="n">__str__</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="s">&quot;__Error or Unsupported__&quot;</span>

  <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
  <span class="n">arg</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">args</span><span class="p">)</span>
  <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">getPercent</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">[</span><span class="n">index</span><span class="p">:</span><span class="n">i</span><span class="p">]</span>
    <span class="n">fmt</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">&quot;%.*?[A-Za-z%]&quot;</span><span class="p">,</span> <span class="nb">str</span><span class="p">[</span><span class="n">i</span><span class="p">:])</span><span class="o">.</span><span class="n">group</span><span class="p">()</span>
    <span class="n">s</span> <span class="o">+=</span> <span class="n">parseFormat</span><span class="p">(</span><span class="n">fmt</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>
    <span class="n">index</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">fmt</span><span class="p">)</span>
  <span class="n">s</span> <span class="o">+=</span> <span class="nb">str</span><span class="p">[</span><span class="n">index</span><span class="p">:]</span>
  <span class="k">return</span> <span class="n">s</span>

<span class="k">print</span> <span class="n">sprintf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%d</span><span class="s">, </span><span class="si">%s%d</span><span class="s">(</span><span class="si">%s</span><span class="s">)&quot;</span><span class="p">,</span> <span class="mi">2007</span><span class="p">,</span> <span class="s">&quot;Nov.&quot;</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="s">&quot;Tue&quot;</span><span class="p">)</span> <span class="c"># =&gt; 2007, Nov.27(Tue)</span>
<span class="k">print</span> <span class="n">sprintf</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%d</span><span class="s">/</span><span class="si">%d</span><span class="s"> = </span><span class="si">%f%%</span><span class="s">&quot;</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mf">12.0</span><span class="o">/</span><span class="mi">34</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span> <span class="c"># =&gt; 12/34 = 35.2941176471%</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4442/addtag/" class="addtag" id="addtag_4442">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4442/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4442/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4442"
  >-</span><span
  class="button yellow"
  id="rating_z_4442"
  >0</span><span 
  class="button green"
  id="rating_p_4442"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4442/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4540">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4540/">#4540</a>(<script language="JavaScript">print_time(new Date("2007/12/01 09:22 GMT"));</script><noscript>2007/12/01 09:22 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>マクロ、クロージャ、高階関数を使って。わりと Lisp らしく書けたかも？</p>
<p>d,x,o,f,c,s,% に対応。フラグなどは実装してないし手抜き感はありますが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre>(defconstant *format-char-table* (make-hash-table))
(defmacro define-format-char (char lambda-list &amp;body body)
  `(setf (gethash ,char *format-char-table*)
         (lambda ,lambda-list ,@body)))

(defun process-format-char (char args stream)
  (let ((fn (gethash char *format-char-table*)))
    (if fn (funcall fn args stream)
      (error &quot;Undefined format character: ~C&quot; char))))

(defun sprintf (fmt &amp;rest args)
  (let ((rest args))
    (flet ((getarg (&amp;optional n) (if n (nth n args) (pop rest))))
      (with-output-to-string (out)
        (with-input-from-string (in fmt)
          (do () ((null (peek-char nil in nil)))
            (let ((c (read-char in)))
              (if (char= c #\%)
                  (process-format-char (read-char in) #&#39;getarg out)
                (write-char c out)))))))))

(define-format-char #\f (fn stream) (write (funcall fn) :stream stream))
(define-format-char #\c (fn stream) (write-char (funcall fn) stream))
(define-format-char #\s (fn stream) (princ (funcall fn) stream))
(define-format-char #\% (fn stream) (write-char #\% stream))

(defun format-integer (n base stream)
  (write n :base base :stream stream))

(defmacro define-integer-format-char (char base)
  `(define-format-char ,char (fn stream)
     (format-integer (funcall fn) ,base stream)))

(define-integer-format-char #\d 10)
(define-integer-format-char #\x 16)
(define-integer-format-char #\o 8)

;;; test
(sprintf (sprintf &quot;%s/%%%c&quot; &quot;%x/%d/%o&quot; #\f)
         11259375 (* 9 3607 3803) 2054353 3.141592653589793d0)
;; =&gt; &quot;ABCDEF/123456789/7654321/3.141592653589793d0&quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4540/addtag/" class="addtag" id="addtag_4540">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4540/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4540/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4540"
  >-</span><span
  class="button yellow"
  id="rating_z_4540"
  >0</span><span 
  class="button green"
  id="rating_p_4540"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4540/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4592">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/592/" target="_top">t_ishida</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4592/">#4592</a>(<script language="JavaScript">print_time(new Date("2007/12/03 14:39 GMT"));</script><noscript>2007/12/03 14:39 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>多分、printfのオリジナルの仕様の5分の１とかくらいなんじゃないかと思うんですが・・・</p>
<p>全部やってたらキリが無いので、
一旦アップします。
もし、「ここの実装だけは行って欲しい」と言う仕様があったら、コメント下さい。
追加で作ってみます。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre><span class="c">//WScript.Echo( printf(&quot;%5x%x&quot;, 1234, 1234 ) );</span>
<span class="c">//WScript.Echo( printf(&quot;%5d%d&quot;, &quot;F&quot;, &quot;F&quot; ) );</span>
<span class="c">//WScript.Echo( printf(&quot;%5o%o&quot;, 1234, 1234 ) );</span>
<span class="c">//WScript.Echo( printf(&quot;%%%%&quot;, 1234, 1234 ) );</span>

<span class="k">function</span> <span class="nx">printf</span><span class="p">(){</span>
  <span class="k">var</span> <span class="nx">re</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="o">,</span> <span class="nx">arg</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">arg</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="k">var</span> <span class="nx">_</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;d&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;0x&quot;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">,</span><span class="nx">$</span> <span class="p">);}</span> <span class="o">,</span>  <span class="c">//10進</span>
    <span class="s1">&#39;o&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nb">eval</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>  <span class="o">,</span><span class="nx">$</span> <span class="p">);}</span> <span class="o">,</span>  <span class="c">//8進</span>
    <span class="s1">&#39;x&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nb">eval</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">,</span><span class="nx">$</span> <span class="p">);}</span> <span class="o">,</span>  <span class="c">//16進(小文字)</span>
    <span class="s1">&#39;%&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;%&#39;</span><span class="o">;</span><span class="p">}</span>
  <span class="p">};</span>
  <span class="k">var</span> <span class="nx">mk</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">_</span><span class="p">)</span> <span class="nx">mk</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="s2">&quot;%(\\d\*)(&quot;</span> <span class="o">+</span> <span class="nx">mk</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="o">;</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arg</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">)</span> <span class="k">continue</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">re</span><span class="p">.</span><span class="nx">$1</span> <span class="o">||</span> <span class="mi">0</span><span class="o">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">re</span><span class="p">.</span><span class="nx">$2</span><span class="o">;</span>
    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="nx">re</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">,</span> <span class="nx">_</span><span class="p">[</span><span class="nx">y</span><span class="p">](</span> <span class="nx">arg</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="nx">x</span> <span class="p">)</span> <span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">s</span><span class="o">;</span>
  <span class="k">function</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">len</span> <span class="p">){</span> <span class="k">while</span><span class="p">(</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">len</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span> <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span><span class="o">;</span>    <span class="k">return</span> <span class="nx">s</span><span class="o">;</span> <span class="p">}</span>
  <span class="k">function</span> <span class="nx">LPAD</span><span class="p">(</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">len</span> <span class="p">){</span> <span class="k">while</span><span class="p">(</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">len</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">s</span><span class="o">;</span> <span class="k">return</span> <span class="nx">s</span><span class="o">;</span> <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4592/addtag/" class="addtag" id="addtag_4592">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4592/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4592/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4592"
  >-</span><span
  class="button yellow"
  id="rating_z_4592"
  >0</span><span 
  class="button green"
  id="rating_p_4592"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090422063755/http://ja.doukaku.org/comment/4592/">
    1
    reply
  </a>

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4592/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4594">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/592/" target="_top">t_ishida</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4594/">#4594</a>(<script language="JavaScript">print_time(new Date("2007/12/03 16:17 GMT"));</script><noscript>2007/12/03 16:17 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>要求仕様どころか、バグってましたね。
申し訳無いです。
修正します。</p>
<p>っていうか、</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td class="code"><div class="highlight"><pre><span class="c">//WScript.Echo( printf(&quot;%5x%x&quot;, 1234, 1234 ) );</span>
<span class="c">//WScript.Echo( printf(&quot;%5d%d&quot;, &quot;F&quot;, 10 ) );</span>
<span class="c">//WScript.Echo( printf(&quot;%5o%o&quot;, 1234, 1234 ) );</span>
<span class="c">//WScript.Echo( printf(&quot;%%%%&quot;, 1234, 1234 ) );</span>

<span class="k">function</span> <span class="nx">printf</span><span class="p">(){</span>
  <span class="k">var</span> <span class="nx">re</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="o">,</span> <span class="nx">arg</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">arg</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
  <span class="k">var</span> <span class="nx">_</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;d&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span>   <span class="c">//10進</span>
      <span class="k">if</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/[a-fA-F]/</span><span class="p">)</span> <span class="p">)</span> <span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span> <span class="s2">&quot;0x&quot;</span> <span class="o">+</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">,</span><span class="nx">$</span> <span class="p">);</span>
      <span class="k">else</span>                      <span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">,</span><span class="nx">$</span> <span class="p">);</span>
    <span class="p">}</span> <span class="o">,</span>
    <span class="s1">&#39;o&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nb">eval</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>  <span class="o">,</span><span class="nx">$</span> <span class="p">);}</span> <span class="o">,</span>  <span class="c">//8進</span>
    <span class="s1">&#39;x&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nb">eval</span><span class="p">(</span> <span class="nx">a</span><span class="p">.</span><span class="nx">toString</span><span class="p">()</span> <span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">,</span><span class="nx">$</span> <span class="p">);}</span> <span class="o">,</span>  <span class="c">//16進(小文字)</span>
    <span class="s1">&#39;%&#39;</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span><span class="nx">$</span><span class="p">){</span><span class="k">return</span> <span class="s1">&#39;%&#39;</span><span class="o">;</span><span class="p">}</span>
  <span class="p">};</span>
  <span class="k">var</span> <span class="nx">mk</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">_</span><span class="p">)</span> <span class="nx">mk</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">key</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="s2">&quot;%(\\d\*)(&quot;</span> <span class="o">+</span> <span class="nx">mk</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;)&quot;</span><span class="o">;</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arg</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="nx">s</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span> <span class="p">)</span> <span class="k">continue</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">re</span><span class="p">.</span><span class="nx">$1</span> <span class="o">||</span> <span class="mi">0</span><span class="o">,</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">re</span><span class="p">.</span><span class="nx">$2</span><span class="o">;</span>
    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span> <span class="nx">re</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span><span class="o">,</span> <span class="nx">_</span><span class="p">[</span><span class="nx">y</span><span class="p">](</span> <span class="nx">arg</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="nx">x</span> <span class="p">)</span> <span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">s</span><span class="o">;</span>
  <span class="k">function</span> <span class="nx">RPAD</span><span class="p">(</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">len</span> <span class="p">){</span> <span class="k">while</span><span class="p">(</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">len</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span> <span class="nx">s</span> <span class="o">+=</span> <span class="s1">&#39; &#39;</span><span class="o">;</span>    <span class="k">return</span> <span class="nx">s</span><span class="o">;</span> <span class="p">}</span>
  <span class="k">function</span> <span class="nx">LPAD</span><span class="p">(</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">len</span> <span class="p">){</span> <span class="k">while</span><span class="p">(</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="p">(</span><span class="nx">len</span> <span class="o">-</span> <span class="mi">0</span><span class="p">)</span> <span class="p">)</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39; &#39;</span> <span class="o">+</span> <span class="nx">s</span><span class="o">;</span> <span class="k">return</span> <span class="nx">s</span><span class="o">;</span> <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4594/addtag/" class="addtag" id="addtag_4594">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4594/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4594/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4594"
  >-</span><span
  class="button yellow"
  id="rating_z_4594"
  >0</span><span 
  class="button green"
  id="rating_p_4594"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4592/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090422063755/http://ja.doukaku.org/comment/4594/root/"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4594/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4606">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/343/" target="_top">matyr</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4606/">#4606</a>(<script language="JavaScript">print_time(new Date("2007/12/04 22:30 GMT"));</script><noscript>2007/12/04 22:30 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffcf;">1/3=0.33</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Ruby&nbsp;の&nbsp;sprintf&nbsp;を参考にしました。あまりテストしてないのでバグだらけの可能性があります。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">sprintf</span><span class="p">(</span><span class="nx">format</span><span class="p">){</span>
  <span class="k">var</span> <span class="nx">args</span> <span class="o">=</span> <span class="nx">arguments</span><span class="o">,</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="k">function</span> <span class="nx">addZero</span><span class="p">(</span><span class="nx">s</span><span class="o">,</span> <span class="nx">p</span><span class="p">){</span> <span class="k">return</span> <span class="p">((</span><span class="nx">p</span> <span class="o">-=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">p</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="nx">s</span> <span class="o">:</span> <span class="nx">s</span> <span class="p">}</span>
  <span class="k">return</span> <span class="nb">String</span><span class="p">(</span><span class="nx">format</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span>
    <span class="sr">/%(?:(\d+)\$)?([-+ #0]*)(\d*|\*(?:(\d+)\$)?)(?:\.(\d+|\*(?:(\d+)\$)?))?([diubBoOxXeEfFgGaAcsp%])/g</span><span class="o">,</span>
    <span class="k">function</span><span class="p">(</span><span class="nx">$</span><span class="o">,</span> <span class="nx">pos_s</span><span class="o">,</span> <span class="nx">flag</span><span class="o">,</span> <span class="nx">width</span><span class="o">,</span> <span class="nx">pos_w</span><span class="o">,</span> <span class="nx">prec</span><span class="o">,</span> <span class="nx">pos_p</span><span class="o">,</span> <span class="nx">type</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">type</span> <span class="o">===</span> <span class="s1">&#39;%&#39;</span><span class="p">)</span> <span class="k">return</span> <span class="s1">&#39;%&#39;</span><span class="o">;</span>
      <span class="k">if</span><span class="p">(</span><span class="o">~</span><span class="nx">width</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">))</span> <span class="nx">width</span> <span class="o">=</span> <span class="nx">pos_w</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="nx">args</span><span class="p">[</span><span class="nx">pos_w</span><span class="p">]</span> <span class="o">:</span> <span class="nx">args</span><span class="p">[</span><span class="nx">x</span><span class="o">++</span><span class="p">];</span>
      <span class="nx">prec</span> <span class="o">=</span> <span class="nx">prec</span> <span class="o">===</span> <span class="kc">undefined</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span>
        <span class="o">:</span> <span class="o">~</span><span class="nx">prec</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="nx">pos_p</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="nx">args</span><span class="p">[</span><span class="nx">pos_p</span><span class="p">]</span> <span class="o">:</span> <span class="nx">args</span><span class="p">[</span><span class="nx">x</span><span class="o">++</span><span class="p">])</span> <span class="o">:</span> <span class="o">+</span><span class="nx">prec</span><span class="o">;</span>
      <span class="k">var</span> <span class="nx">r</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">pos_s</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="nx">args</span><span class="p">[</span><span class="nx">pos_s</span><span class="p">]</span> <span class="o">:</span> <span class="nx">args</span><span class="p">[</span><span class="nx">x</span><span class="o">++</span><span class="p">]</span><span class="o">,</span> <span class="nx">sharp</span> <span class="o">=</span> <span class="o">~</span><span class="nx">flag</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">);</span>
      <span class="k">var</span> <span class="nx">sign</span> <span class="o">=</span> <span class="nx">a</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;-&#39;</span> <span class="o">:</span> <span class="o">~</span><span class="nx">flag</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;+&#39;</span> <span class="o">:</span> <span class="o">~</span><span class="nx">flag</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">?</span><span class="s1">&#39; &#39;</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="o">;</span>
      <span class="nx">switch</span><span class="p">(</span><span class="nx">type</span><span class="p">){</span>
       <span class="nx">case</span><span class="s1">&#39;d&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;i&#39;</span><span class="o">:</span> <span class="nx">r</span> <span class="o">=</span> <span class="o">!</span><span class="nx">r</span> <span class="o">&amp;&amp;</span> <span class="nx">prec</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;&#39;</span> <span class="o">:</span> <span class="nx">sign</span> <span class="o">+</span> <span class="nx">addZero</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">+</span> <span class="p">(</span><span class="nx">a</span> <span class="o">|</span> <span class="mi">0</span><span class="p">)</span><span class="o">,</span> <span class="nx">prec</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;u&#39;</span><span class="o">:</span>
        <span class="nx">a</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span> <span class="o">?</span> <span class="p">(</span><span class="nx">sign</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="mh">0x100000000</span> <span class="o">-</span> <span class="p">(</span><span class="nx">a</span> <span class="o">|</span> <span class="mi">0</span><span class="p">))</span> <span class="o">:</span> <span class="nx">a</span> <span class="o">|</span> <span class="mi">0</span><span class="o">;</span>
        <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="nx">addZero</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="o">+</span> <span class="nx">a</span><span class="o">,</span> <span class="nx">prec</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;b&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;B&#39;</span><span class="o">:</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="nx">sharp</span> <span class="o">?</span> <span class="s1">&#39;0b&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">addZero</span><span class="p">((</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span>  <span class="nx">prec</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;o&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;O&#39;</span><span class="o">:</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="nx">sharp</span> <span class="o">?</span> <span class="s1">&#39;0&#39;</span>  <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">addZero</span><span class="p">((</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span><span class="o">,</span>  <span class="nx">prec</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;x&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;X&#39;</span><span class="o">:</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="nx">sharp</span> <span class="o">?</span> <span class="s1">&#39;0x&#39;</span> <span class="o">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="nx">addZero</span><span class="p">((</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">,</span> <span class="nx">prec</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;f&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;F&#39;</span><span class="o">:</span>
        <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="o">~</span><span class="nx">prec</span> <span class="o">?</span> <span class="nx">prec</span> <span class="o">:</span> <span class="mi">6</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">prec</span> <span class="o">&amp;&amp;</span> <span class="nx">sharp</span><span class="p">)</span> <span class="nx">r</span> <span class="o">+=</span> <span class="s1">&#39;.&#39;</span><span class="o">;</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;e&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;E&#39;</span><span class="o">:</span>
        <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toExponential</span><span class="p">(</span><span class="o">~</span><span class="nx">prec</span> <span class="o">?</span> <span class="nx">prec</span> <span class="o">:</span> <span class="mi">6</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">prec</span> <span class="o">&amp;&amp;</span> <span class="nx">sharp</span><span class="p">)</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/e/</span><span class="o">,</span> <span class="s1">&#39;.e&#39;</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;g&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;G&#39;</span><span class="o">:</span>
        <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toPrecision</span><span class="p">(</span><span class="o">~</span><span class="nx">prec</span> <span class="o">?</span> <span class="nx">prec</span> <span class="o">:</span> <span class="mi">6</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">sharp</span><span class="p">)</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/\.?0+(?=e|$)/</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;a&#39;</span><span class="o">:</span> <span class="nx">case</span><span class="s1">&#39;A&#39;</span><span class="o">:</span>
        <span class="nx">r</span> <span class="o">=</span> <span class="nx">sign</span> <span class="o">+</span> <span class="p">(</span><span class="o">+</span><span class="nx">a</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="o">~</span><span class="nx">prec</span><span class="p">)</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/([^.]+)\.?([^\(]*)(.*)/</span><span class="o">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">i</span><span class="o">,</span><span class="nx">d</span><span class="o">,</span><span class="nx">e</span><span class="p">){</span>
          <span class="k">return</span> <span class="nx">i</span> <span class="o">+</span> <span class="p">(</span><span class="nx">prec</span> <span class="o">?</span> <span class="s1">&#39;.&#39;</span><span class="o">+</span> <span class="p">(</span><span class="nx">d</span> <span class="o">+</span><span class="s1">&#39;0000000000000&#39;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="nx">prec</span><span class="p">)</span> <span class="o">+</span> <span class="nx">e</span> <span class="o">:</span> <span class="nx">sharp</span><span class="o">?</span><span class="s1">&#39;.&#39;</span><span class="o">:</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">});</span>
       <span class="nx">case</span><span class="s1">&#39;c&#39;</span><span class="o">:</span> <span class="nx">r</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">a</span> <span class="o">|</span> <span class="mi">0</span><span class="p">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="nx">case</span><span class="s1">&#39;p&#39;</span><span class="o">:</span> <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">uneval</span> <span class="o">==</span> <span class="s1">&#39;function&#39;</span><span class="p">)</span> <span class="nx">a</span> <span class="o">=</span> <span class="nx">uneval</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span> <span class="c">// fallthrough</span>
       <span class="nx">case</span><span class="s1">&#39;s&#39;</span><span class="o">:</span> <span class="nx">r</span> <span class="o">+=</span> <span class="o">~</span><span class="nx">prec</span> <span class="o">?</span> <span class="nx">a</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="nx">prec</span><span class="p">)</span> <span class="o">:</span> <span class="nx">a</span><span class="o">;</span> <span class="k">break</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">if</span><span class="p">(</span><span class="sr">/[BXEGA]/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">type</span><span class="p">))</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
      <span class="k">if</span><span class="p">((</span><span class="nx">width</span> <span class="o">-=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span>
        <span class="k">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">width</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="nx">join</span><span class="p">(</span><span class="o">~</span><span class="nx">flag</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="sr">/[^cs]/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">type</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="s1">&#39; &#39;</span><span class="p">);</span>
        <span class="nx">r</span> <span class="o">=</span> <span class="o">~</span><span class="nx">flag</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">r</span> <span class="o">+</span> <span class="nx">t</span> <span class="o">:</span> <span class="nx">t</span> <span class="o">+</span> <span class="nx">r</span><span class="o">;</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="nx">r</span><span class="o">;</span>
    <span class="p">});</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/4606/addtag/" class="addtag" id="addtag_4606">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4606/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/4606/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffcf;"
  >1/3=0.33</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4606"
  >-</span><span
  class="button yellow"
  id="rating_z_4606"
  >0</span><span 
  class="button green"
  id="rating_p_4606"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/4606/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5220">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/648/" target="_top">szktty</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5220/">#5220</a>(<script language="JavaScript">print_time(new Date("2008/01/08 03:56 GMT"));</script><noscript>2008/01/08 03:56 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Mac OS X (PowerPC 32bit) アセンブリで、大雑把ですが。%%, %s, %d, %fのみ実装しています。精度指定はできません。</p>
<p>浮動小数点数の命令がよくわからず、小数点を出力するのに「10倍した浮動小数点数の一の位を出力する」ことを精度分やってます。</p>
<p>可変長引数はコンパイラ依存なので、次の専用の型を想定することにしました。</p>
<pre class="literal-block">
typedef union dk_va {
  char *sval;
  int ival;
  float fval;
} dk_va, *dk_va_list_t;

int dk_sprintf(char *dest, const char *format, dk_va_list_t args);
</pre>
<p>例:</p>
<pre class="literal-block">
dk_va args[3];
int i;
args[0].sval = &quot;hello&quot;;
args[1].ival = 1510;
args[2].fval = -384.148388;
i = dk_sprintf(dest, &quot;%%, %s, %d, %f&quot;, args);
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231</pre></td><td class="code"><div class="highlight"><pre>;; ------------------------------------------------
;; mysprintf.s for Mac OS X (PowerPC 32bit)
;; % as -o dk_sprintf.o dk_sprintf.s
;; ------------------------------------------------

        .machine ppc
        .globl  _dk_sprintf

;; typedef union dk_va {
;;   char *sval;
;;   int ival;
;;   float fval;
;; } dk_va, *dk_va_list_t;
;; 
;; int dk_sprintf(char *dest, const char *format, dk_va_list_t args)

;; r3: char *dest
;; r4: const char *format
;; r5: dk_va_list_t args
;;
;; r7(buf):  dest の書き込み用コピー
;; r8(c):    スキャンする文字
;; r9(flag): 前の文字が % なら 1
_dk_sprintf:
        ;; 初期化
        mr      r7, r3
        li      r9, 0

_scan:
        ;; format から一文字読み込む
        lbz     r8, 0(r4)       ; c = *format

        ;; ディレクティブ
        cmpli   cr7, r9, 1      ; flag == 1
        beq     cr7, _scan_directive
        cmpli   cr7, r8, 37     ; c == &#39;%&#39;
        beq     cr7, _switch_directive
                
        ;; format から読み込んだ文字を書き込む
        stb     r8, 0(r7)       ; *buf = c
        addi    r7, r7, 1       ; buf++

        ;; 文字列の終端
        cmpli   cr7, r8, 0      ; c == 0
        beq     cr7, _dk_sprintf_return

        ;; 繰り返し
        addi    r4, r4, 1       ; format++
        b       _scan

_switch_directive:
        li      r9, 1           ; flag = 1
        addi    r4, r4, 1       ; format++
        b       _scan

_scan_directive:
        li      r9, 0           ; flag = 0

        ;; %%
        cmpli   cr7, r8, 37     ; c == &#39;%&#39;
        beq     cr7, _write_escape

        ;; %s   
        cmpli   cr7, r8, 115    ; c == &#39;s&#39;
        beq     cr7, _write_s
        
        ;; %d
        cmpli   cr7, r8, 100    ; c == &#39;d&#39;
        beq     cr7, _write_d
        
        ;; %f
        cmpli   cr7, r8, 102    ; c == &#39;f&#39;
        beq     cr7, _write_f
        
        ;; 未定義のディレクティブ
        li      r10, 37         ; &#39;%&#39;
        stb     r10, 0(r7)      ; *buf = &#39;%&#39;
        stb     r8, 1(r7)       ; *(buf+1) = c
        addi    r7, r7, 2       ; buf += 2
        addi    r4, r4, 1       ; format++
        b       _scan

;; %%
_write_escape:
        li      r10, 37         ; &#39;%&#39;
        stb     r10, 0(r7)      ; *buf = &#39;%&#39;
        addi    r7, r7, 1       ; buf++
        addi    r4, r4, 1       ; format++
        b       _scan

;; %s
_write_s:
        lwz     r10, 0(r5)      ; args-&gt;sval
        addi    r5, r5, 4
        addi    r4, r4, 1       ; format++

__write_s:
        lbz     r11, 0(r10)     ; s = args-&gt;sval
        cmpli   cr7, r11, 0
        beq     cr7, _scan
        stb     r11, 0(r7)      ; *buf = s
        addi    r7, r7, 1       ; buf++
        addi    r10, r10, 1     ; args-&gt;sval++
        b       __write_s

;; %d
_write_d:
        lwz     r10, 0(r5)      ; i = args-&gt;ival
        addi    r5, r5, 4
        addi    r4, r4, 1       ; format++
        mflr    r16             ; リンクレジスタをスタックに退避
        bl      _write_digit
        mtlr    r16             ; リンクレジスタをスタックから復帰
        b       _scan

;; %f
;; r17: 精度
;; f0: 元の数値
;; f1: 整数部
;; f5: 0
;; f6: 10
_write_f:
        ;; 定数の準備など
        lis     r13, hi16(zero)
        addi    r13, r13, lo16(zero)
        lfs     f5, 0(r13)      ; 0
        lis     r13, hi16(ten)
        addi    r13, r13, lo16(ten)
        lfs     f6, 0(r13)      ; 10
        li      r17, 6          ; 精度
        
        lfs     f0, 0(r5)       ; f = args-&gt;fval
        addi    r5, r5, 4
        addi    r4, r4, 1       ; format++

        ;; 整数部
        fctiwz  f1, f0          ; (int)f, ビットは整数表現になる
        stfd    f1, -8(r1)      ; スタックを通して
        lwz     r10, -4(r1)     ; 汎用レジスタに入れる
        mflr    r16
        bl      _write_digit
        mtlr    r16

        ;; 区切り
        li      r14, 46         ; &#39;.&#39;
        stb     r14, 0(r7)      ; *buf = &#39;.&#39;
        addi    r7, r7, 1       ; buf++

        fabs    f2, f0
        li      r11, 10
        
;; 小数部
_write_fpointpart:
        fmuls   f2, f2, f6
        fctiwz  f3, f2
        stfd    f3, -8(r1)
        lwz     r10, -4(r1)

        divwu   r12, r10, r11
        mullw   r12, r12, r11
        sub     r10, r10, r12
        
        addi    r10, r10, 48    ; ASCII
        stb     r10, 0(r7)
        addi    r7, r7, 1       ; buf++

        subi    r17, r17, 1
        cmpli   cr7, r17, 0
        bgt     cr7, _write_fpointpart

        b       _scan


;; 整数を10進数で書き込む
;; r10: 書き込む整数
_write_digit:
        li      r11, 25000      ; fig, 桁
        mulli   r11, r11, 4
        li      r14, 10         ; 桁の除算用
        li      r15, 0          ; 残りを数字をすべて表示するか

        ;; 負の数
        cmpi    cr7, r10, 0
        bgt     cr7, _write_each_digit
        li      r12, 45         ; &#39;-&#39;
        stb     r12, 0(r7)      ; *buf = &#39;-&#39;
        addi    r7, r7, 1       ; buf++
        mulli   r10, r10, -1    ; i = -i

;; 上の桁から順に出力する
_write_each_digit:
        divw    r12, r10, r11   ; d = i / fig
        mullw   r13, r11, r12   ; rem = i - fig * d
        sub     r10, r10, r13
        divw    r11, r11, r14   ; fig /= 10

        cmpli   cr7, r15, 0
        cmpli   cr6, r12, 0     ; d == 0
        crand   2, 30, 26       ; cr0[eq] = cr7[eq] &amp;&amp; cr6[eq]
        beq     cr0, _write_each_digit

        li      r15, 1
        addi    r12, r12, 48    ; ASCIIコードにする
        stb     r12, 0(r7)      ; *buf = s
        addi    r7, r7, 1       ; buf++

        ;; 最後の桁
        cmpli   cr7, r11, 1     ; fig = 1
        bgt     cr7, _write_each_digit
        mr      r12, r10
        addi    r12, r12, 48    ; ASCIIコードにする
        stb     r12, 0(r7)      ; *buf = s
        addi    r7, r7, 1       ; buf++ 

        blr                     ; 終了

_dk_sprintf_return:
        sub     r3, r7, r3      ; return buf - dest
        subi    r3, r3, 1
        blr

        .data
        .align  2

zero:
        .single 0.0
        .align  2

ten:
        .single 10
        .align  2
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5220/addtag/" class="addtag" id="addtag_5220">タグ</a>:
	
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/Assembly/">Assembly</a>
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/MacOSX/">MacOSX</a>
    
    <a href="/web/20090422063755/http://ja.doukaku.org/tag/PowerPC/">PowerPC</a>
    
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5220/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5220/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5220"
  >-</span><span
  class="button yellow"
  id="rating_z_5220"
  >0</span><span 
  class="button green"
  id="rating_p_5220"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/5220/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5256">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/643/" target="_top">squld</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5256/">#5256</a>(<script language="JavaScript">print_time(new Date("2008/01/09 11:07 GMT"));</script><noscript>2008/01/09 11:07 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>やっつけで解いてみました。

実行結果
------------------
abcdefg
abc%defg
abc1010e\fg
%c = あ.
%f = 10.5.
%8ld =       10.
%8d =       10.
%s = abcdefg.
%08s = 0abcdefg.
%08x = 0000000a.
%08X = 0000000A.
------------------</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.regex.Matcher</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">PrintFormat</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">Pattern</span> <span class="n">PATTERN</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;%%|%0??[0-9]*?l??[dfcsxX]&quot;</span><span class="o">);</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">String</span> <span class="n">format</span><span class="o">(</span><span class="n">String</span> <span class="n">aFormat</span><span class="o">,</span> <span class="n">Object</span><span class="o">...</span> <span class="n">aValues</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">tBuffer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">tValueIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="n">Matcher</span> <span class="n">tMatcher</span> <span class="o">=</span> <span class="n">PATTERN</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">aFormat</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">tPreviousIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">tMatcher</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">aFormat</span><span class="o">,</span> <span class="n">tPreviousIndex</span><span class="o">,</span> <span class="n">tMatcher</span><span class="o">.</span><span class="na">start</span><span class="o">());</span>
            <span class="n">tPreviousIndex</span> <span class="o">=</span> <span class="n">tMatcher</span><span class="o">.</span><span class="na">end</span><span class="o">();</span>
            <span class="n">String</span> <span class="n">tMatch</span> <span class="o">=</span> <span class="n">tMatcher</span><span class="o">.</span><span class="na">group</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;%%&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;%&#39;</span><span class="o">);</span> <span class="c">// エスケープ</span>
                <span class="k">continue</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="kt">boolean</span> <span class="n">tZeroPadding</span> <span class="o">=</span> <span class="n">tMatch</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">&quot;%0&quot;</span><span class="o">);</span>
            <span class="kt">boolean</span> <span class="n">tLongType</span> <span class="o">=</span> <span class="n">tMatch</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="sc">&#39;l&#39;</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">tDigitNumber</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">Character</span><span class="o">.</span><span class="na">isDigit</span><span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">1</span><span class="o">)))</span> <span class="o">{</span>
                <span class="n">tDigitNumber</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">tZeroPadding</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="o">,</span> <span class="n">tMatch</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="o">(</span><span class="n">tLongType</span> <span class="o">?</span> <span class="mi">2</span> <span class="o">:</span> <span class="mi">1</span><span class="o">)));</span>
            <span class="o">}</span>

            <span class="n">Object</span> <span class="n">tValue</span> <span class="o">=</span> <span class="n">aValues</span><span class="o">[</span><span class="n">tValueIndex</span><span class="o">++];</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;c&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">tValue</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;f&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">tValue</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;d&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">tValue</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;s&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">tValue</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tLongType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">toHexString</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">tValue</span><span class="o">),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">tValue</span><span class="o">),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tMatch</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;X&quot;</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tLongType</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">Long</span><span class="o">.</span><span class="na">toHexString</span><span class="o">((</span><span class="n">Long</span><span class="o">)</span> <span class="n">tValue</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">(),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">padding</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span> <span class="n">tValue</span><span class="o">).</span><span class="na">toUpperCase</span><span class="o">(),</span> <span class="n">tDigitNumber</span><span class="o">,</span> <span class="n">tZeroPadding</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">tBuffer</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">aFormat</span><span class="o">,</span> <span class="n">tPreviousIndex</span><span class="o">,</span> <span class="n">aFormat</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">tBuffer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">String</span> <span class="n">padding</span><span class="o">(</span><span class="n">String</span> <span class="n">aText</span><span class="o">,</span> <span class="kt">int</span> <span class="n">aLength</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">aZeroPadding</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">aLength</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">aText</span><span class="o">;</span> <span class="c">// 長さ指定なし</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">tDelta</span> <span class="o">=</span> <span class="n">aLength</span> <span class="o">-</span> <span class="n">aText</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">tDelta</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">aText</span><span class="o">.</span><span class="na">substring</span><span class="o">(-</span><span class="n">tDelta</span><span class="o">);</span> <span class="c">// 長すぎる</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">tDelta</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">aText</span><span class="o">;</span> <span class="c">// ぴったり</span>
        <span class="o">}</span>

        <span class="n">StringBuilder</span> <span class="n">tBuilder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">aLength</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tDelta</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">tBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">aZeroPadding</span> <span class="o">?</span> <span class="sc">&#39;0&#39;</span> <span class="o">:</span> <span class="sc">&#39; &#39;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">tBuilder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">aText</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">tBuilder</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;abcdefg&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;abc%%defg&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;abc%ld%de\\fg&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">10L</span><span class="o">,</span> <span class="mi">10</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%c = %c.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="sc">&#39;あ&#39;</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%f = %f.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="mf">10.5</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%8ld = %8ld.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">10L</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%8d = %8d.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">10</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%s = %s.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;abcdefg&quot;</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%08s = %08s.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="s">&quot;abcdefg&quot;</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%08x = %08x.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">10</span> <span class="o">}));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">format</span><span class="o">(</span><span class="s">&quot;%%08X = %08X.&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">10</span> <span class="o">}));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5256/addtag/" class="addtag" id="addtag_5256">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5256/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5256/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5256"
  >-</span><span
  class="button yellow"
  id="rating_z_5256"
  >0</span><span 
  class="button green"
  id="rating_p_5256"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/5256/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5265">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5265/">#5265</a>(<script language="JavaScript">print_time(new Date("2008/01/11 08:02 GMT"));</script><noscript>2008/01/11 08:02 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Rubyのsprintfの仕様に従って実装しました.
pフラグは仕様が不明瞭だったので実装しませんでした.</p>
<p>format系のメソッドは仕様不可ということで, 指数表示変換は自前で容易したのでバグが潜在している可能性が高いです.</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#%[フラグ][最小フィールド幅][.精度][長さ修飾子]変換指定子</span>
<span class="no">MATCH_STR</span> <span class="o">=</span> <span class="s1">&#39;%([\+\-\s#0\*]*)(\d*)((?:\.\d+)?)([hliztl]*)([\w%]*)&#39;</span>
<span class="k">def</span> <span class="nf">mysprintf</span><span class="p">(</span><span class="o">*</span><span class="n">argv</span><span class="p">)</span>
  <span class="k">def</span> <span class="nf">check_flag</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">precision</span><span class="p">)</span>
    <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">to_s</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">width</span><span class="o">.</span><span class="n">to_i</span>
    <span class="n">pos</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>
    <span class="n">sign</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/\A([\-\+])\w+\z/</span> <span class="o">=~</span> <span class="n">str</span> <span class="ow">or</span> <span class="n">flag</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;+&#39;</span><span class="p">))</span>
    <span class="n">zero</span> <span class="o">=</span> <span class="n">flag</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">)</span>
    <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">width</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="n">str</span><span class="o">.</span><span class="n">size</span> <span class="p">?</span> <span class="n">width</span><span class="o">-</span><span class="n">str</span><span class="o">.</span><span class="n">size</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">sign</span>
      <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">abs</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;+&#39;</span> <span class="p">:</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span>
      <span class="n">w</span> <span class="o">=</span> <span class="p">(</span><span class="n">w</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="o">?</span> <span class="n">w</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">else</span>
      <span class="n">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
    <span class="k">end</span>
    <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="sr">/\.(\d+)/</span> <span class="o">=~</span> <span class="n">precision</span> <span class="ow">and</span> <span class="vg">$1</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&lt;=</span> <span class="n">w</span> <span class="ow">and</span> <span class="vg">$1</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">?</span> <span class="vg">$i</span><span class="o">.</span><span class="n">to_i</span><span class="o">+</span><span class="mi">1</span> <span class="p">:</span> <span class="mi">0</span>
    <span class="n">filler</span> <span class="o">=</span> <span class="p">(</span><span class="n">zero</span> <span class="p">?</span> <span class="s1">&#39;0&#39;</span> <span class="p">:</span> <span class="s1">&#39; &#39;</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">w</span><span class="o">-</span><span class="n">num</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;0&#39;</span><span class="o">*</span><span class="n">num</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">pos</span> <span class="p">?</span> <span class="s1">&#39;&#39;</span> <span class="p">:</span> <span class="n">filler</span><span class="si">}#{</span><span class="n">s</span><span class="si">}#{</span><span class="n">str</span><span class="si">}#{</span><span class="n">pos</span> <span class="p">?</span> <span class="n">filler</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">check_spec</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">spec</span><span class="p">,</span> <span class="n">opt</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">exp_expr</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="c1">#有理数を指数表示に変換</span>
      <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
      <span class="k">break</span> <span class="k">if</span> <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;10**</span><span class="si">#{</span><span class="n">n</span><span class="o">.</span><span class="n">abs</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;1&#39;</span> <span class="p">:</span> <span class="s1">&#39;0&#39;</span><span class="si">}</span><span class="s2">*10**(i</span><span class="si">#{</span><span class="n">n</span><span class="o">.</span><span class="n">abs</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">?</span> <span class="s1">&#39;+= 1) &gt;&#39;</span> <span class="p">:</span> <span class="s1">&#39;-= 1) &lt;=&#39;</span><span class="si">}#{</span><span class="s1">&#39;-1*&#39;</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="si">}</span><span class="s2">n&quot;</span><span class="p">)</span> <span class="k">while</span> <span class="mi">1</span>
      <span class="s2">&quot;</span><span class="si">#{</span><span class="n">n</span><span class="o">.</span><span class="n">quo</span><span class="p">(</span><span class="mi">10</span><span class="o">**</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span><span class="si">}</span><span class="s2">e</span><span class="si">#{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">e_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">str</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">str</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span>
          <span class="n">str</span>
        <span class="k">else</span>
          <span class="s2">&quot;</span><span class="si">#{</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="si">}</span><span class="s2">.e</span><span class="si">#{</span><span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;e&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="k">end</span>
      <span class="k">else</span>
        <span class="n">exp_expr</span><span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">to_f</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">g_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
      <span class="n">str</span><span class="o">.</span><span class="n">to_f</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="n">e</span><span class="o">-</span><span class="mi">3</span> <span class="o">?</span> <span class="n">e_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_f</span><span class="o">.</span><span class="n">to_s</span>
    <span class="k">end</span>
    <span class="k">if</span> <span class="n">opt</span>
      <span class="k">case</span> <span class="n">spec</span>
      <span class="k">when</span> <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="s2">&quot;0b</span><span class="si">#{</span><span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">when</span> <span class="s1">&#39;o&#39;</span><span class="p">:</span> <span class="s2">&quot;0</span><span class="si">#{</span><span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">oct</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">when</span> <span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="s2">&quot;0x</span><span class="si">#{</span><span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">hex</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="k">when</span> <span class="s1">&#39;X&#39;</span><span class="p">:</span> <span class="s2">&quot;0x</span><span class="si">#{</span><span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">hex</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;f&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">?</span> <span class="n">str</span> <span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">.&quot;</span>
      <span class="k">when</span> <span class="s1">&#39;F&#39;</span><span class="p">:</span> <span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">include</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="p">?</span> <span class="n">str</span> <span class="p">:</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">.&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;e&#39;</span><span class="p">:</span> <span class="n">e_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
      <span class="k">when</span> <span class="s1">&#39;E&#39;</span><span class="p">:</span> <span class="n">e_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;g&#39;</span><span class="p">:</span> <span class="n">g_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
      <span class="k">when</span> <span class="s1">&#39;G&#39;</span><span class="p">:</span> <span class="n">g_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">else</span>
      <span class="k">end</span>
    <span class="k">else</span>
      <span class="k">case</span> <span class="n">spec</span>
      <span class="k">when</span> <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span>
      <span class="k">when</span> <span class="s1">&#39;i&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span>
      <span class="k">when</span> <span class="s1">&#39;u&#39;</span><span class="p">:</span> <span class="p">(</span><span class="n">str</span><span class="o">.</span><span class="n">to_i</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">2</span><span class="o">**</span><span class="mi">32</span> <span class="o">+</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span> <span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
      <span class="k">when</span> <span class="s1">&#39;o&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">oct</span>
      <span class="k">when</span> <span class="s1">&#39;x&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">hex</span>
      <span class="k">when</span> <span class="s1">&#39;X&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">hex</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;e&#39;</span><span class="p">:</span> <span class="n">e_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
      <span class="k">when</span> <span class="s1">&#39;E&#39;</span><span class="p">:</span> <span class="n">e_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;f&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_f</span>
      <span class="k">when</span> <span class="s1">&#39;F&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_f</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;g&#39;</span><span class="p">:</span> <span class="n">g_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
      <span class="k">when</span> <span class="s1">&#39;G&#39;</span><span class="p">:</span> <span class="n">g_flag</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span>
      <span class="k">when</span> <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">chr</span>
      <span class="k">when</span> <span class="s1">&#39;s&#39;</span><span class="p">:</span> <span class="n">str</span><span class="o">.</span><span class="n">to_s</span>
      <span class="k">when</span> <span class="s1">&#39;%&#39;</span><span class="p">:</span> <span class="s1">&#39;%&#39;</span>
      <span class="k">else</span>
        <span class="k">raise</span> <span class="no">ArgumentError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;malformed format string - </span><span class="si">#{</span><span class="n">spec</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="n">f</span> <span class="o">=</span> <span class="n">argv</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">match</span><span class="p">(</span><span class="sr">/\A</span><span class="si">#{</span><span class="no">MATCH_STR</span><span class="si">}</span><span class="sr">\z/</span><span class="p">)</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
  <span class="k">if</span> <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;*&#39;</span><span class="p">)</span>
    <span class="n">str</span> <span class="o">=</span> <span class="n">argv</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">to_s</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">argv</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
  <span class="k">else</span>
    <span class="n">str</span> <span class="o">=</span> <span class="n">argv</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_s</span>
    <span class="n">width</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
  <span class="k">end</span>
  <span class="k">if</span><span class="sr"> /\A[di]\z/</span> <span class="o">=~</span> <span class="n">f</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="ow">and</span> <span class="n">str</span><span class="o">.</span><span class="n">to_f</span> <span class="o">!=</span> <span class="n">str</span><span class="o">.</span><span class="n">to_i</span>
    <span class="k">raise</span> <span class="no">ArgumentError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;invalid value for Integer: </span><span class="si">#{</span><span class="n">str</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="n">flag</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
  <span class="n">prec</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
  <span class="n">spec</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="mi">4</span><span class="o">]</span>
  <span class="n">opt</span> <span class="o">=</span> <span class="n">f</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s1">&#39;#&#39;</span><span class="p">)</span>
  <span class="n">check_flag</span><span class="p">(</span><span class="n">check_spec</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">spec</span><span class="p">,</span> <span class="n">opt</span><span class="p">),</span> <span class="n">flag</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">prec</span><span class="p">)</span>
<span class="k">end</span>
<span class="nb">p</span> <span class="n">mysprintf</span><span class="p">(</span><span class="s2">&quot;%%&quot;</span><span class="p">,</span> <span class="s2">&quot;testtest&quot;</span><span class="p">)</span> <span class="c1"># =&gt; &quot;%&quot;</span>
<span class="nb">p</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%%&quot;</span><span class="p">,</span> <span class="s2">&quot;testtest&quot;</span><span class="p">)</span>   <span class="c1"># =&gt; &quot;%&quot;</span>
<span class="nb">p</span> <span class="n">mysprintf</span><span class="p">(</span><span class="s2">&quot;%5.0u&quot;</span><span class="p">,</span> <span class="s1">&#39;-1&#39;</span><span class="p">)</span>    <span class="c1"># =&gt; &quot;4294967295&quot;</span>
<span class="nb">p</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%5.0u&quot;</span><span class="p">,</span> <span class="s1">&#39;-1&#39;</span><span class="p">)</span>      <span class="c1"># =&gt; &quot;4294967295&quot;</span>
<span class="nb">p</span> <span class="n">mysprintf</span><span class="p">(</span><span class="s2">&quot;% 2d&quot;</span><span class="p">,</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &quot; 1&quot;</span>
<span class="nb">p</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;% 2d&quot;</span><span class="p">,</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">)</span>   <span class="c1"># =&gt; &quot; 1&quot;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5265/addtag/" class="addtag" id="addtag_5265">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5265/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5265/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5265"
  >-</span><span
  class="button yellow"
  id="rating_z_5265"
  >0</span><span 
  class="button green"
  id="rating_p_5265"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/5265/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5724">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/136/" target="_top">matarillo</a><a href="/web/20090422063755/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5724/">#5724</a>(<script language="JavaScript">print_time(new Date("2008/02/10 16:01 GMT"));</script><noscript>2008/02/10 16:01 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>まじめに実装するのは面倒だし、クックブックに向かないので
#4410に書かれていたように、仕様を限定して（%d %f %s %cのみに対応して）実装。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="k">static</span> <span class="kt">string</span> <span class="nf">PrintF</span><span class="p">(</span><span class="kt">string</span> <span class="n">format</span><span class="p">,</span> <span class="k">params</span> <span class="kt">object</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
<span class="k">{</span>
  <span class="n">Regex</span> <span class="n">re</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="s">@&quot;%[dfsc%]&quot;</span><span class="p">);</span>
  <span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">re</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="n">format</span><span class="p">,</span> <span class="k">delegate</span><span class="p">(</span><span class="n">Match</span> <span class="n">m</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">m</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="kt">object</span> <span class="n">o</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="n">i</span><span class="p">++];</span>
    <span class="kt">string</span> <span class="n">r</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="k">switch</span> <span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">Value</span><span class="p">[</span><span class="m">1</span><span class="p">])</span>
    <span class="k">{</span>
      <span class="k">case</span> <span class="sc">&#39;d&#39;</span><span class="p">:</span>
        <span class="n">r</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToDecimal</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="n">ToString</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;f&#39;</span><span class="p">:</span>
        <span class="n">r</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToDecimal</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="n">ToString</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;s&#39;</span><span class="p">:</span>
        <span class="n">r</span> <span class="p">=</span> <span class="p">(</span><span class="n">o</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">?</span> <span class="s">&quot;&quot;</span> <span class="p">:</span> <span class="n">o</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;c&#39;</span><span class="p">:</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="n">GetType</span><span class="p">().</span><span class="n">IsValueType</span><span class="p">)</span>
        <span class="k">{</span>
          <span class="n">r</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToString</span><span class="p">((</span><span class="kt">char</span><span class="p">)</span><span class="n">o</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">else</span>
        <span class="k">{</span>
          <span class="kt">string</span> <span class="n">s</span> <span class="p">=</span> <span class="p">(</span><span class="n">o</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">?</span> <span class="s">&quot;&quot;</span> <span class="p">:</span> <span class="n">o</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
          <span class="n">r</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">?</span> <span class="k">new</span> <span class="n">String</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="m">1</span><span class="p">)</span> <span class="p">:</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">default</span><span class="p">:</span>
        <span class="n">r</span> <span class="p">=</span> <span class="n">m</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">;</span>
  <span class="k">}</span><span class="p">);</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/5724/addtag/" class="addtag" id="addtag_5724">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5724/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/5724/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5724"
  >-</span><span
  class="button yellow"
  id="rating_z_5724"
  >0</span><span 
  class="button green"
  id="rating_p_5724"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/5724/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6182">
  <p class="banner"><a href="/web/20090422063755/http://ja.doukaku.org/user/787/" target="_top">虹原いんく</a>

	
	&nbsp;
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/6182/">#6182</a>(<script language="JavaScript">print_time(new Date("2008/04/18 15:36 GMT"));</script><noscript>2008/04/18 15:36 GMT</noscript>)
	
	
	
	[<a href="/web/20090422063755/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>超簡易板です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114</pre></td><td class="code"><div class="highlight"><pre><span class="c">/*-</span>
<span class="c"> * The MIT License</span>
<span class="c"> * </span>
<span class="c"> * Copyright (c) 2008 虹原いんく</span>
<span class="c"> * </span>
<span class="c"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span>
<span class="c"> * of this software and associated documentation files (the &quot;Software&quot;), to deal</span>
<span class="c"> * in the Software without restriction, including without limitation the rights</span>
<span class="c"> * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell</span>
<span class="c"> * copies of the Software, and to permit persons to whom the Software is</span>
<span class="c"> * furnished to do so, subject to the following conditions:</span>
<span class="c"> * </span>
<span class="c"> * The above copyright notice and this permission notice shall be included in</span>
<span class="c"> * all copies or substantial portions of the Software.</span>
<span class="c"> * </span>
<span class="c"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span>
<span class="c"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span>
<span class="c"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span>
<span class="c"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span>
<span class="c"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span>
<span class="c"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN</span>
<span class="c"> * THE SOFTWARE.</span>
<span class="c"> */</span>

<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdarg.h&gt;</span>

<span class="kt">char</span> <span class="o">*</span><span class="nf">itoa</span><span class="p">(</span> <span class="kt">int</span> <span class="n">num</span> <span class="p">,</span><span class="kt">char</span><span class="o">*</span> <span class="n">buf</span><span class="p">,</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">step</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="n">table</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;0123456789abcdef&quot;</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">buf</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">tmp</span><span class="p">;</span>

    <span class="k">if</span><span class="p">(</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="o">*</span><span class="n">p</span><span class="o">++</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
        <span class="n">num</span> <span class="o">=</span> <span class="o">-</span> <span class="n">num</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="n">tmp</span><span class="o">=</span><span class="n">num</span><span class="p">;</span><span class="n">tmp</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">tmp</span> <span class="o">/=</span> <span class="n">step</span><span class="p">)</span> <span class="n">p</span><span class="o">++</span><span class="p">;</span>
    <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">tmp</span><span class="o">=</span><span class="n">num</span><span class="p">;</span><span class="n">tmp</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">;</span><span class="n">tmp</span> <span class="o">/=</span> <span class="n">step</span><span class="p">)</span> <span class="o">*--</span><span class="n">p</span><span class="o">=</span><span class="n">table</span><span class="p">[</span><span class="n">tmp</span><span class="o">%</span><span class="n">step</span><span class="p">];</span>

    <span class="k">return</span> <span class="n">buf</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">mysprintf</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">format</span><span class="p">,</span> <span class="p">...</span> <span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="mi">64</span><span class="p">];</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="o">*</span><span class="n">np</span><span class="p">;</span>
    
    <span class="kt">char</span> <span class="o">*</span><span class="n">cp</span><span class="p">;</span>
    <span class="kt">int</span>  <span class="n">num</span><span class="p">;</span>
    
    <span class="n">va_list</span> <span class="n">va</span><span class="p">;</span>
    <span class="n">va_start</span><span class="p">(</span><span class="n">va</span><span class="p">,</span> <span class="n">format</span><span class="p">);</span>

    <span class="n">fp</span><span class="o">=</span> <span class="n">format</span><span class="p">;</span>
    <span class="n">s</span><span class="o">=</span> <span class="n">str</span><span class="p">;</span>
    <span class="n">b</span><span class="o">=</span> <span class="n">str</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">fp</span><span class="o">!=</span><span class="sc">&#39;\0&#39;</span><span class="p">;)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="o">*</span><span class="n">fp</span> <span class="o">!=</span> <span class="sc">&#39;%&#39;</span> <span class="p">)</span> <span class="p">{</span>
            <span class="o">*</span><span class="n">s</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">fp</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="o">*</span><span class="n">fp</span><span class="o">++</span><span class="p">;</span> <span class="c">/* skip % */</span>
            <span class="k">switch</span><span class="p">((</span><span class="kt">int</span><span class="p">)(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span> <span class="o">*</span><span class="n">fp</span><span class="p">)</span>
            <span class="p">{</span>
            <span class="k">case</span> <span class="sc">&#39;%&#39;</span><span class="o">:</span>
                <span class="o">*</span><span class="n">s</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">fp</span><span class="o">++</span><span class="p">;</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;s&#39;</span><span class="o">:</span>
                <span class="n">np</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">va_arg</span><span class="p">(</span> <span class="n">va</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;b&#39;</span><span class="o">:</span>
                <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">va_arg</span><span class="p">(</span> <span class="n">va</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span>
                <span class="n">np</span> <span class="o">=</span> <span class="n">itoa</span><span class="p">(</span> <span class="n">num</span> <span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">2</span> <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;o&#39;</span><span class="o">:</span>
                <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">va_arg</span><span class="p">(</span> <span class="n">va</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span>
                <span class="n">np</span> <span class="o">=</span> <span class="n">itoa</span><span class="p">(</span> <span class="n">num</span> <span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">8</span> <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;x&#39;</span><span class="o">:</span>
                <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">va_arg</span><span class="p">(</span> <span class="n">va</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span>
                <span class="n">np</span> <span class="o">=</span> <span class="n">itoa</span><span class="p">(</span> <span class="n">num</span> <span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">16</span> <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;d&#39;</span><span class="o">:</span>
                <span class="n">num</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">va_arg</span><span class="p">(</span> <span class="n">va</span><span class="p">,</span> <span class="kt">int</span> <span class="p">);</span>
                <span class="n">np</span> <span class="o">=</span> <span class="n">itoa</span><span class="p">(</span> <span class="n">num</span> <span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="mi">10</span> <span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="o">*</span><span class="n">fp</span><span class="o">++</span><span class="p">;</span> <span class="c">/* skip %V */</span>
            <span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">np</span><span class="o">!=</span><span class="sc">&#39;\0&#39;</span><span class="p">;</span><span class="o">*</span><span class="n">s</span><span class="o">++</span> <span class="o">=</span> <span class="o">*</span><span class="n">np</span><span class="o">++</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="o">*</span><span class="n">s</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="n">va_end</span><span class="p">(</span><span class="n">va</span><span class="p">);</span>
    
    <span class="k">return</span> <span class="p">(</span><span class="n">s</span> <span class="o">-</span> <span class="n">str</span><span class="p">);</span>
<span class="p">}</span>

<span class="c">/* ------------------------------------------------------------------ */</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
    
    <span class="n">ret</span> <span class="o">=</span> <span class="n">mysprintf</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">&quot;%s %d%%%s%%&quot;</span><span class="p">,</span> <span class="s">&quot;ABCD&quot;</span><span class="p">,</span> <span class="o">-</span><span class="mi">12345678</span><span class="p">,</span> <span class="s">&quot;EFGHIJK&quot;</span> <span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;len = %d [%s]&quot;</span><span class="p">,</span> <span class="n">ret</span><span class="p">,</span> <span class="n">str</span> <span class="p">);</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090422063755/http://ja.doukaku.org/comment/6182/addtag/" class="addtag" id="addtag_6182">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090422063755/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090422063755/http://ja.doukaku.org/comment/6182/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090422063755/http://ja.doukaku.org/comment/6182/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6182"
  >-</span><span
  class="button yellow"
  id="rating_z_6182"
  >0</span><span 
  class="button green"
  id="rating_p_6182"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090422063755/http://ja.doukaku.org/91/reply_to/6182/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20090422063755if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20090422063755/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20090422063755/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20090422063755/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20090422063755/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20090422063755/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20090422063755/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20090422063755/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20090422063755/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090422063755/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090422063755/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20090422063755im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20090422063755/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20090422063755/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20090422063755/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20090422063755/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20090422063755/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20090422063755/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20090422063755/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20090422063755/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20090422063755im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20090422063755/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20090422063755/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20090422063755/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20090422063755js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 6:37:55 Apr 22, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:32:21 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
