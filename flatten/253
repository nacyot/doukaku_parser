
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
IPv4アドレスのマスクの変換
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20110320070546cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20110320070546cs_/http://ja.doukaku.org/static/style/style.css" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20110320070546cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<script src="/web/20110320070546js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20110320070546js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20110320070546js_/http://ja.doukaku.org/static/js/addtag.js" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20110320070546js_/http://ja.doukaku.org/static/js/utils.js" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app12.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/253\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "20";
var displayMonth = "Mar";
var displayYear = "2011";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/253/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20110320070546" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20091213144056/http://ja.doukaku.org/253/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 Dec 2009"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 7:05:46 Mar 20, 2011">MAR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Apr
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20091213144056/http://ja.doukaku.org/253/flatten/" title="14:40:56 Dec 13, 2009" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 7:05:46 Mar 20, 2011">20</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20091213144056/http://ja.doukaku.org/253/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 Dec 2009"><strong>2009</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 7:05:46 Mar 20, 2011">2011</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2012
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20110320070546*/http://ja.doukaku.org/253/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 Dec 09 - 20 Mar 11</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000000001_2010:-1:000000000000_2011:2:001000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20110320070546/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20110320070546im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20110320070546/http://ja.doukaku.org/253/">IPv4アドレスのマスクの変換</a>
</h2>

    




<div class="comment" id="comment9039"><!--dj-->
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/341/" target="_top">znz</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9039/">#9039</a>(<script language="JavaScript">print_time(new Date("2009/06/03 06:14 GMT"));</script><noscript>2009/06/03 06:14 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<ul>
<li>
 "255.255.255.0" から 24
</li>
<li>
 "255.255.255.128" から 25
</li>
<li> "255.255.255.255" から 32</li>
</ul>
<p>などのようにネットマスクの数値への変換を作ってみてください。</p>
<p>出来れば逆変換も作ってみてください。</p>
</div>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9039/addtag/" class="addtag" id="addtag_9039">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9039"
  >-</span><span
  class="button yellow"
  id="rating_z_9039"
  >0</span><span 
  class="button green"
  id="rating_p_9039"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110320070546/http://reply_to/9039/">
  返信
  </a>]
  </div>
</div>
</div>



  



<div class="indent">
<a href="/web/20110320070546/http://ja.doukaku.org/253/post_comment/">
コメントを投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20110320070546/http://ja.doukaku.org/253/nested/">ネスト表示</a>
<a href="/web/20110320070546/http://ja.doukaku.org/253/">非表示</a> 


  
  




<div class="comment" id="comment9098">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1025/" target="_top">tanakahisateru</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9098/">#9098</a>(<script language="JavaScript">print_time(new Date("2009/06/10 08:59 GMT"));</script><noscript>2009/06/10 08:59 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ビット演算で基本に忠実に実装しました。どのぐらいの長さになるか心配だったけど、そんなに悪くない行数で収まっています。</p>
<p>また、できるだけ例外処理をやって、さらにどのぐらい行が増えるかも試しています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">netmask_num_of</span><span class="p">(</span><span class="n">addr</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">addrs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">(</span><span class="nb">long</span><span class="p">,</span> <span class="n">addr</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">)):</span>
            <span class="k">if</span> <span class="n">a</span> <span class="o">&gt;</span> <span class="mi">255</span> <span class="ow">or</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span> <span class="k">raise</span>
            <span class="n">addrs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">addrs</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span> <span class="k">raise</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">raise</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> may not be an address string.&quot;</span> <span class="o">%</span> <span class="n">addr</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">reduce</span><span class="p">(</span><span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="mi">256</span> <span class="o">+</span> <span class="nb">long</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">addrs</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">topbit</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">31</span>
    <span class="n">allbits</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">while</span> <span class="n">n</span> <span class="o">&amp;</span> <span class="n">topbit</span><span class="p">:</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">allbits</span>
    <span class="k">if</span> <span class="n">n</span><span class="p">:</span>
        <span class="k">raise</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> is not valid for netmask.&quot;</span> <span class="o">%</span> <span class="n">addr</span>
    <span class="k">return</span> <span class="n">num</span>

<span class="k">print</span> <span class="n">netmask_num_of</span><span class="p">(</span><span class="s">&quot;255.255.255.0&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="n">netmask_num_of</span><span class="p">(</span><span class="s">&quot;255.255.255.128&quot;</span><span class="p">)</span>
<span class="k">print</span> <span class="n">netmask_num_of</span><span class="p">(</span><span class="s">&quot;255.255.255.255&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">netmask_str_of</span><span class="p">(</span><span class="n">num</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">num</span> <span class="o">&gt;</span> <span class="mi">32</span> <span class="ow">or</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">raise</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> is out of range for netmask.&quot;</span> <span class="o">%</span> <span class="n">num</span>
    <span class="n">n</span> <span class="o">=</span> <span class="il">0L</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">32</span><span class="p">):</span>
        <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">num</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">1</span> <span class="ow">or</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">addrs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
        <span class="n">addrs</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">))</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span>
    <span class="k">return</span> <span class="s">&#39;.&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">addrs</span><span class="p">)</span>

<span class="k">print</span> <span class="n">netmask_str_of</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
<span class="k">print</span> <span class="n">netmask_str_of</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
<span class="k">print</span> <span class="n">netmask_str_of</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9098/addtag/" class="addtag" id="addtag_9098">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9098/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9098/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9098"
  >-</span><span
  class="button yellow"
  id="rating_z_9098"
  >0</span><span 
  class="button green"
  id="rating_p_9098"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9098/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9127">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9127/">#9127</a>(<script language="JavaScript">print_time(new Date("2009/06/11 20:29 GMT"));</script><noscript>2009/06/11 20:29 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ナイーブに。

 *Main&gt; mask2nbits "255.255.255.0"
 24
 *Main&gt; mask2nbits "255.255.255.128"
 25
 *Main&gt; mask2nbits "255.255.255.255"
 32
 *Main&gt; nbits2mask 24
 "255.255.255.0"
 *Main&gt; nbits2mask 25
 "255.255.255.128"
 *Main&gt; nbits2mask 28
 "255.255.255.240"
 *Main&gt; nbits2mask 32
 "255.255.255.255"

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Word</span>

<span class="nv">mask2nbits</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">mask2nbits</span> <span class="o">=</span> <span class="nv">length</span> <span class="o">.</span> <span class="nv">takeWhile</span> <span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="p">)</span> <span class="o">.</span> <span class="nv">toNArry</span> <span class="mi">2</span> <span class="mi">32</span> <span class="o">.</span> <span class="nv">addr2int</span> 

<span class="nv">nbits2mask</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">nbits2mask</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">int2addr</span> <span class="o">$</span> <span class="nv">maxBound</span> <span class="o">-</span> <span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="nv">n</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="nv">int2addr</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">int2addr</span> <span class="o">=</span> <span class="nv">concat</span> <span class="o">.</span> <span class="nv">intersperse</span> <span class="s">&quot;.&quot;</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">show</span> <span class="o">.</span> <span class="nv">toNArry</span> <span class="mi">256</span> <span class="mi">4</span>

<span class="nv">addr2int</span> <span class="o">::</span> <span class="n">String</span> <span class="o">-&gt;</span> <span class="n">Word32</span>
<span class="nv">addr2int</span> <span class="o">=</span> <span class="nv">foldl</span> <span class="p">((</span><span class="o">+</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="mi">256</span> <span class="o">*</span><span class="p">))</span> <span class="mi">0</span> <span class="o">.</span> <span class="nv">unfoldr</span> <span class="nv">phi</span>
  <span class="kr">where</span> 
    <span class="nv">phi</span> <span class="s">&quot;&quot;</span> <span class="o">=</span> <span class="n">Nothing</span>
    <span class="nv">phi</span> <span class="nv">s</span>  <span class="o">=</span> <span class="kr">case</span> <span class="nv">break</span> <span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="o">==</span><span class="p">)</span> <span class="nv">s</span> <span class="kr">of</span>
               <span class="p">(</span><span class="nv">xs</span><span class="p">,</span><span class="kr">_</span><span class="o">:</span><span class="nv">ys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">xs</span><span class="p">,</span><span class="nv">ys</span><span class="p">)</span>
               <span class="p">(</span><span class="nv">xs</span><span class="p">,[])</span>   <span class="o">-&gt;</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">xs</span><span class="p">,[])</span>

<span class="nv">toNArry</span> <span class="o">::</span> <span class="p">(</span><span class="n">Integral</span> <span class="nv">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="nv">i</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
<span class="nv">toNArry</span> <span class="nv">n</span> <span class="nv">k</span> <span class="nv">i</span> 
 <span class="o">=</span> <span class="nv">map</span> <span class="nv">fromInteger</span> 
 <span class="o">$</span> <span class="nv">snd</span> 
 <span class="o">$</span> <span class="nv">mapAccumR</span> <span class="p">(</span><span class="nv">flip</span> <span class="nv">id</span><span class="p">)</span> <span class="p">(</span><span class="nv">toInteger</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nv">replicate</span> <span class="nv">k</span> <span class="p">(`</span><span class="nv">divMod</span><span class="p">`</span> <span class="p">(</span><span class="nv">toInteger</span> <span class="nv">n</span><span class="p">)))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9127/addtag/" class="addtag" id="addtag_9127">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9127/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9127/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9127"
  >-</span><span
  class="button yellow"
  id="rating_z_9127"
  >0</span><span 
  class="button green"
  id="rating_p_9127"
  >+</span></span></span>
  


<p>

  

  <a href="/web/20110320070546/http://ja.doukaku.org/comment/9127/">
    1
    reply
  </a>

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9127/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9149">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1064/" target="_top">yamamoto</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9149/">#9149</a>(<script language="JavaScript">print_time(new Date("2009/06/13 12:21 GMT"));</script><noscript>2009/06/13 12:21 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/erlang/">
	  Erlang
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Scala(#9133)をErlangに移植しました。
効率はともかく、例外処理をしているので・・・</p>
<p>関数の仕様は、Erlang的で、成功時は
{ok,****}
のようなタプルが返ります。失敗時はok以外のアトム。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre>-module(netmask).
-export([numbits_of/1,from_numbits/1,test/0]).

numbits_of(StrMask) -&gt; 
    try
        {ok,Mask} = inet_parse:address(StrMask) ,
        {Class,MaskByte} = case Mask of
                        {255,255,255,X} -&gt; {24,X};
                        {255,255,  X,0} -&gt; {16,X};
                        {255,  X,  0,0} -&gt; { 8,X};
                        _ -&gt; throw(&quot;bad mask&quot;)
                        end,
        {ok,
        case MaskByte of
            (256-  1)-&gt; 8;
            (256-  2)-&gt; 7;
            (256-  4)-&gt; 6;
            (256-  8)-&gt; 5;
            (256- 16)-&gt; 4;
            (256- 32)-&gt; 3;
            (256- 64)-&gt; 2;
            (256-128)-&gt; 1;
            0        -&gt; 0
        end + Class }% &lt;--- result
    catch
        throw:E -&gt; {thrown,E};
        exit :E -&gt; {exited,E};
        error:E -&gt; {error ,E}
    end.

from_numbits(Numbits)-&gt;
    try
        {Class,Maskbits} = 
                        case Numbits of
                            N when N&gt;=24 -&gt; {24,N-24} ;
                            N when N&gt;=16 -&gt; {16,N-16} ;
                            N when N&gt;= 8 -&gt; { 8,N- 8} 
                        end ,
        Maskbyte = 
                case Maskbits of 
                    8 -&gt; (256-  1) ;
                    7 -&gt; (256-  2) ;
                    6 -&gt; (256-  4) ;
                    5 -&gt; (256-  8) ;
                    4 -&gt; (256- 16) ;
                    3 -&gt; (256- 32) ;
                    2 -&gt; (256- 64) ;
                    1 -&gt; (256-128) ;
                    0 -&gt; 0
                end ,
        %
        {ok , 
        case Class of
            24 -&gt; inet_parse:ntoa( {255,255,255,Maskbyte} ) ;
            16 -&gt; inet_parse:ntoa( {255,255,Maskbyte  ,0} ) ;
            8  -&gt; inet_parse:ntoa( {255,Maskbyte    ,0,0} ) 
        end }% &lt;--- result
    catch
        throw:E -&gt; {thrown,E};
        exit :E -&gt; {exited,E};
        error:E -&gt; {error ,E}
    end.

test()-&gt;
    lists:foreach(fun(I)-&gt;
                    {ok , M} = from_numbits(I),
                    {ok , N} = numbits_of(M),
                    io:format(&quot;Numbits=~p , Mask=~p , Result=~p~n&quot;,[I,M,(I==N)])
                  end , lists:seq(8,31) ).
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9149/addtag/" class="addtag" id="addtag_9149">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/erlang/">
		Erlang
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9149/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9149/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9149"
  >-</span><span
  class="button yellow"
  id="rating_z_9149"
  >0</span><span 
  class="button green"
  id="rating_p_9149"
  >+</span></span></span>
  


<p>

  
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9113/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9149/root/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9149/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9084">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/760/" target="_top">turugina</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9084/">#9084</a>(<script language="JavaScript">print_time(new Date("2009/06/10 07:48 GMT"));</script><noscript>2009/06/10 07:48 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ふつーに実装。MASKアドレスじゃない場合のエラー処理とかは特にしてないです。</p>
<p>逆変換も付けました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">addr2bits</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$addr</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">$bits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="nb">split</span> <span class="sr">/\./</span><span class="p">,</span> <span class="nv">$addr</span><span class="p">)</span> <span class="p">{</span>
    <span class="nv">$_</span> <span class="o">&amp;=</span> <span class="mi">0</span><span class="n">xff</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="mi">0</span><span class="n">xff</span> <span class="o">==</span> <span class="nv">$_</span> <span class="p">)</span> <span class="p">{</span>
      <span class="nv">$bits</span> <span class="o">+=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="k">my</span> <span class="nv">$b</span> <span class="o">=</span> <span class="nb">sprintf</span> <span class="s">&#39;%08b&#39;</span><span class="p">,</span> <span class="nv">$_</span><span class="p">;</span>
      <span class="nv">$bits</span> <span class="o">+=</span> <span class="nb">index</span><span class="p">(</span><span class="nv">$b</span><span class="p">,</span><span class="s">&#39;0&#39;</span><span class="p">);</span>
      <span class="k">last</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nv">$bits</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">bits2addr</span>
<span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$bits</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>

  <span class="k">my</span> <span class="nv">@addr</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">4</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span> <span class="nv">$bits</span> <span class="o">&gt;=</span> <span class="mi">8</span> <span class="p">)</span> <span class="p">{</span>
      <span class="nb">push</span> <span class="nv">@addr</span><span class="p">,</span> <span class="mi">0</span><span class="n">xff</span><span class="p">;</span>
      <span class="nv">$bits</span> <span class="o">-=</span> <span class="mi">8</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$bits</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
      <span class="nb">push</span> <span class="nv">@addr</span><span class="p">,</span> <span class="nb">oct</span><span class="p">(</span><span class="s">&#39;0b&#39;</span> <span class="o">.</span> <span class="s">&#39;1&#39;</span> <span class="n">x</span> <span class="nv">$bits</span> <span class="o">.</span> <span class="s">&#39;0&#39;</span> <span class="n">x</span> <span class="p">(</span><span class="mi">8</span><span class="o">-</span><span class="nv">$bits</span><span class="p">));</span>
      <span class="nv">$bits</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
      <span class="nb">push</span> <span class="nv">@addr</span><span class="p">,</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nb">join</span><span class="p">(</span><span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="nv">@addr</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$addr</span> <span class="o">=</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="k">my</span> <span class="nv">$bits</span> <span class="o">=</span> <span class="n">addr2bits</span><span class="p">(</span><span class="nv">$addr</span><span class="p">);</span>
<span class="k">print</span> <span class="s">&quot;$addr =&gt; $bits\n&quot;</span><span class="p">;</span>

<span class="nv">$addr</span> <span class="o">=</span> <span class="n">bits2addr</span><span class="p">(</span><span class="nv">$bits</span><span class="p">);</span>
<span class="k">print</span> <span class="s">&quot;$bits =&gt; $addr\n&quot;</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9084/addtag/" class="addtag" id="addtag_9084">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9084/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9084/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9084"
  >-</span><span
  class="button yellow"
  id="rating_z_9084"
  >0</span><span 
  class="button green"
  id="rating_p_9084"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9084/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9819">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1132/" target="_top">taka_2</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9819/">#9819</a>(<script language="JavaScript">print_time(new Date("2010/01/13 19:32 GMT"));</script><noscript>2010/01/13 19:32 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'></pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79</pre></td><td class="code"><div class="highlight"><pre>Option Explicit

&#39; 与えられた数値を二進数に変換したときの1の数をカウントして返却する
Function countBinaryBits(num)
    Dim result, currentNum

    result = 0
    currentNum = num
    While currentNum &gt; 0
        result = result + (currentNum Mod 2)
        currentNum = Int(currentNum / 2)
    Wend

    countBinaryBits = result
End Function

&#39; IPv4のネットマスクアドレスを受け取って、マスクビット数を返却する
Function IPv4NetMaskToBits(strIpv4NetMask)
    Dim result, strIpv4NetMaskList, netMask

    result = 0
    strIpv4NetMaskList = Split(strIpv4NetMask, &quot;.&quot;)
    For Each netMask In strIpv4NetMaskList
        result = result + countBinaryBits(CInt(netMask))
    Next

    IPv4NetMaskToBits = result
End Function

&#39; マスク数を2進数に変換
Function getMaskFromBits(bits)
    Dim result, currentBits, i

    result = 0
    currentBits = bits
    For i = 7 to 0 Step - 1
        If currentBits &gt; 0 Then
            result = result + 2 ^ i
            currentBits = currentBits - 1
        End If
    Next

    getMaskFromBits = result
End Function

&#39; マスクビット数を受け取って、IPv4のネットマスクアドレスを返却する
Function bitsToIPv4NetMask(bits)
    Dim currentBits
    Dim result
    Dim i

    currentBits = bits
    result = &quot;&quot;
    For i = 1 to 4
        If result &lt;&gt; &quot;&quot; Then
            result = result &amp; &quot;.&quot;
        End If

        If currentBits &gt;= 8 Then
            result = result &amp; CStr(getMaskFromBits(8))
            currentBits = currentBits - 8
        ElseIf currentBits &gt; 0 Then
            result = result &amp; CStr(getMaskFromBits(currentBits))
            currentBits = 0
        Else
            result = result &amp; &quot;0&quot;
        End If
    Next

    bitsToIPv4NetMask = result
End Function

msgbox IPv4NetMaskToBits(&quot;255.255.255.0&quot;)
msgbox IPv4NetMaskToBits(&quot;255.255.255.128&quot;)
msgbox IPv4NetMaskToBits(&quot;255.255.255.255&quot;)

msgbox bitsToIPv4NetMask(24)
msgbox bitsToIPv4NetMask(25)
msgbox bitsToIPv4NetMask(32)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9819/addtag/" class="addtag" id="addtag_9819">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9819/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9819/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9819"
  >-</span><span
  class="button yellow"
  id="rating_z_9819"
  >0</span><span 
  class="button green"
  id="rating_p_9819"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9819/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9112">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/785/" target="_top">Dubhead</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9112/">#9112</a>(<script language="JavaScript">print_time(new Date("2009/06/11 04:18 GMT"));</script><noscript>2009/06/11 04:18 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>x86のBSF命令 (下から数えて何ビット目が立っているか) を使ってみました。
また、uintは4バイト固定です。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">intrinsic</span>: <span class="n">bsf</span>;      <span class="c">// x86&#39;s BSF instruction</span>
<span class="k">import</span> <span class="n">std</span>.<span class="n">socket</span>;

<span class="n">immutable</span> <span class="kt">ushort</span> <span class="n">DUMMY_PORT</span> = <span class="mi">0</span>;

<span class="kt">uint</span> <span class="n">mask2bits</span>(<span class="k">in</span> <span class="n">string</span> <span class="n">mask</span>)
{
    <span class="kt">uint</span> <span class="n">addr</span> = (<span class="k">new</span> <span class="n">InternetAddress</span>(<span class="n">mask</span>, <span class="n">DUMMY_PORT</span>)).<span class="n">addr</span>;
    <span class="k">return</span> <span class="mi">32</span> - <span class="n">bsf</span>(<span class="n">addr</span>);
}

<span class="n">string</span> <span class="n">bits2mask</span>(<span class="k">in</span> <span class="kt">uint</span> <span class="n">bits</span>)
{
    <span class="kt">uint</span> <span class="n">addr</span> = <span class="mh">0xFFFF_FFFF</span> &lt;&lt; (<span class="mi">32</span> - <span class="n">bits</span>);
    <span class="k">return</span> (<span class="k">new</span> <span class="n">InternetAddress</span>(<span class="n">addr</span>, <span class="n">DUMMY_PORT</span>)).<span class="n">toAddrString</span>;
}

<span class="kt">void</span> <span class="n">main</span>()
{
    <span class="k">assert</span> (<span class="n">mask2bits</span>(<span class="s">&quot;255.255.255.0&quot;</span>) == <span class="mi">24</span>);
    <span class="k">assert</span> (<span class="n">mask2bits</span>(<span class="s">&quot;255.255.255.128&quot;</span>) == <span class="mi">25</span>);
    <span class="k">assert</span> (<span class="n">mask2bits</span>(<span class="s">&quot;255.255.255.255&quot;</span>) == <span class="mi">32</span>);
    <span class="k">assert</span> (<span class="n">bits2mask</span>(<span class="mi">24</span>) == <span class="s">&quot;255.255.255.0&quot;</span>);
    <span class="k">assert</span> (<span class="n">bits2mask</span>(<span class="mi">25</span>) == <span class="s">&quot;255.255.255.128&quot;</span>);
    <span class="k">assert</span> (<span class="n">bits2mask</span>(<span class="mi">32</span>) == <span class="s">&quot;255.255.255.255&quot;</span>);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9112/addtag/" class="addtag" id="addtag_9112">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9112/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9112/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9112"
  >-</span><span
  class="button yellow"
  id="rating_z_9112"
  >0</span><span 
  class="button green"
  id="rating_p_9112"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9112/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9454">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/959/" target="_top">uehaj</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9454/">#9454</a>(<script language="JavaScript">print_time(new Date("2009/08/07 18:47 GMT"));</script><noscript>2009/08/07 18:47 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Groovyでの逆変換。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre>def mask2addr(mask){
  mask = (-1 &lt;&lt; (32-mask))
  (3..0).collect{(mask &gt;&gt; it*8) &amp; 0xff}.join(&#39;.&#39;)
}


assert mask2addr(24)==&quot;255.255.255.0&quot;
assert mask2addr(25)==&quot;255.255.255.128&quot;
assert mask2addr(32)==&quot;255.255.255.255&quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9454/addtag/" class="addtag" id="addtag_9454">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9454/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9454/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9454"
  >-</span><span
  class="button yellow"
  id="rating_z_9454"
  >0</span><span 
  class="button green"
  id="rating_p_9454"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9454/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9102">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1025/" target="_top">tanakahisateru</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9102/">#9102</a>(<script language="JavaScript">print_time(new Date("2009/06/10 12:01 GMT"));</script><noscript>2009/06/10 12:01 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>正変換は単に立っているビットの数を数えているだけ、逆変換は頭からビットを立たせているだけです。それだけしか出来ていないのに、ここで息切れしてしまいました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></td><td class="code"><div class="highlight"><pre><span class="k">#</span><span class="n">load</span> <span class="s2">&quot;str.cma&quot;</span>

<span class="kr">let</span> <span class="n">ni0</span> <span class="k">=</span> <span class="n">Nativeint</span><span class="k">.</span><span class="n">zero</span><span class="k">;;</span>
<span class="kr">let</span> <span class="n">ni1</span> <span class="k">=</span> <span class="n">Nativeint</span><span class="k">.</span><span class="n">one</span><span class="k">;;</span>
<span class="kr">let</span> <span class="k">(&lt;&lt;</span><span class="o">@</span><span class="k">)</span> <span class="k">=</span> <span class="n">Nativeint</span><span class="k">.</span><span class="n">shift_left</span><span class="k">;;</span>
<span class="kr">let</span> <span class="k">(&amp;</span><span class="o">@</span><span class="k">)</span> <span class="k">=</span> <span class="n">Nativeint</span><span class="k">.</span><span class="n">logand</span><span class="k">;;</span>
<span class="kr">let</span> <span class="k">(|</span><span class="o">@</span><span class="k">)</span> <span class="k">=</span> <span class="n">Nativeint</span><span class="k">.</span><span class="n">logor</span><span class="k">;;</span>

<span class="kr">let</span> <span class="n">netmask_num_of</span> <span class="n">addr</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">onbits_of</span> <span class="n">byte</span> <span class="k">=</span> 
        <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">ptr</span> <span class="k">=</span>
            <span class="kr">if</span> <span class="n">ptr</span> <span class="k">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="mi">0</span> <span class="kr">else</span>
            <span class="kr">let</span> <span class="n">checker</span> <span class="k">=</span> <span class="n">ni1</span> <span class="k">&lt;&lt;</span><span class="o">@</span> <span class="n">ptr</span> <span class="kr">in</span>
            <span class="kr">if</span> <span class="n">byte</span> <span class="k">&amp;</span><span class="o">@</span> <span class="n">checker</span> <span class="k">=</span> <span class="n">ni0</span> <span class="kr">then</span> <span class="mi">0</span> <span class="kr">else</span>
                <span class="mi">1</span> <span class="k">+</span> <span class="k">(</span><span class="n">loop</span> <span class="k">(</span><span class="n">ptr</span> <span class="k">-</span> <span class="mi">1</span><span class="k">))</span>
        <span class="kr">in</span>
            <span class="n">loop</span> <span class="mi">7</span>
    <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">addrs</span> <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">map</span> <span class="n">Nativeint</span><span class="k">.</span><span class="n">of_string</span>
            <span class="k">(</span><span class="n">Str</span><span class="k">.</span><span class="n">split</span> <span class="k">(</span><span class="n">Str</span><span class="k">.</span><span class="n">regexp</span> <span class="s2">&quot;</span><span class="err">\\</span><span class="s2">.&quot;</span><span class="k">)</span> <span class="n">addr</span><span class="k">)</span> <span class="kr">in</span>
        <span class="n">List</span><span class="k">.</span><span class="n">fold_left</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="k">-&gt;</span> <span class="n">a</span> <span class="k">+</span> <span class="k">(</span><span class="n">onbits_of</span> <span class="n">b</span><span class="k">))</span> <span class="mi">0</span> <span class="n">addrs</span> 
<span class="k">;;</span>
<span class="n">print_string</span> <span class="k">((</span><span class="n">string_of_int</span> <span class="k">(</span>
    <span class="n">netmask_num_of</span> <span class="s2">&quot;255.255.255.0&quot;</span><span class="k">))</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);;</span>
<span class="n">print_string</span> <span class="k">((</span><span class="n">string_of_int</span> <span class="k">(</span>
    <span class="n">netmask_num_of</span> <span class="s2">&quot;255.255.255.128&quot;</span><span class="k">))</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);;</span>
<span class="n">print_string</span> <span class="k">((</span><span class="n">string_of_int</span> <span class="k">(</span>
    <span class="n">netmask_num_of</span> <span class="s2">&quot;255.255.255.255&quot;</span><span class="k">))</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);;</span>

<span class="kr">let</span> <span class="n">netmask_str_of</span> <span class="n">num</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">byteloop</span> <span class="n">num</span> <span class="n">n</span> <span class="k">=</span>
        <span class="kr">if</span> <span class="n">n</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="k">[]</span> <span class="kr">else</span>
        <span class="kr">let</span> <span class="kr">rec</span> <span class="n">bitloop</span> <span class="n">num</span> <span class="n">b</span> <span class="k">=</span>
            <span class="kr">if</span> <span class="n">num</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">or</span> <span class="n">b</span> <span class="k">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">ni0</span> <span class="kr">else</span>
            <span class="k">(</span><span class="n">ni1</span> <span class="k">&lt;&lt;</span><span class="o">@</span> <span class="n">b</span><span class="k">)</span> <span class="k">|</span><span class="o">@</span> <span class="k">(</span><span class="n">bitloop</span> <span class="k">(</span><span class="n">num</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">b</span> <span class="k">-</span> <span class="mi">1</span><span class="k">))</span>
        <span class="kr">in</span>
            <span class="k">[</span><span class="n">Nativeint</span><span class="k">.</span><span class="n">to_string</span> <span class="k">(</span><span class="n">bitloop</span> <span class="n">num</span> <span class="mi">7</span><span class="k">)]</span> <span class="o">@</span>
                <span class="k">(</span><span class="n">byteloop</span> <span class="k">(</span><span class="n">num</span> <span class="k">-</span> <span class="mi">8</span><span class="k">)</span> <span class="k">(</span><span class="n">n</span> <span class="k">-</span> <span class="mi">1</span><span class="k">))</span>
    <span class="kr">in</span>
        <span class="n">String</span><span class="k">.</span><span class="n">concat</span> <span class="s2">&quot;.&quot;</span> <span class="k">(</span><span class="n">byteloop</span> <span class="n">num</span> <span class="mi">4</span><span class="k">)</span>
<span class="k">;;</span>
<span class="n">print_string</span> <span class="k">((</span><span class="n">netmask_str_of</span> <span class="mi">24</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);;</span>
<span class="n">print_string</span> <span class="k">((</span><span class="n">netmask_str_of</span> <span class="mi">25</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);;</span>
<span class="n">print_string</span> <span class="k">((</span><span class="n">netmask_str_of</span> <span class="mi">32</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">);;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9102/addtag/" class="addtag" id="addtag_9102">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9102/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9102/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9102"
  >-</span><span
  class="button yellow"
  id="rating_z_9102"
  >0</span><span 
  class="button green"
  id="rating_p_9102"
  >+</span></span></span>
  


<p>

  

  <a href="/web/20110320070546/http://ja.doukaku.org/comment/9102/">
    1
    reply
  </a>

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9102/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9219">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/136/" target="_top">matarillo</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9219/">#9219</a>(<script language="JavaScript">print_time(new Date("2009/06/22 02:37 GMT"));</script><noscript>2009/06/22 02:37 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>string→intの変換のみ</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">P</span>
<span class="k">{</span>
  <span class="k">static</span> <span class="kt">int</span> <span class="nf">ToI</span><span class="p">(</span><span class="kt">string</span> <span class="n">mask</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="k">try</span>
    <span class="k">{</span>
      <span class="kt">string</span><span class="p">[]</span> <span class="n">a</span> <span class="p">=</span> <span class="n">mask</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">Length</span> <span class="p">!=</span> <span class="m">4</span><span class="p">)</span> <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
      <span class="kt">long</span> <span class="n">l</span> <span class="p">=</span> <span class="n">a</span><span class="p">.</span><span class="n">Aggregate</span><span class="p">(</span><span class="m">1L</span><span class="p">,</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;&lt;</span> <span class="m">8</span><span class="p">)</span> <span class="p">+</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToByte</span><span class="p">(</span><span class="n">y</span><span class="p">));</span>
      <span class="kt">string</span> <span class="n">b</span> <span class="p">=</span> <span class="n">Convert</span><span class="p">.</span><span class="n">ToString</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="m">2</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">32</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">p</span> <span class="p">=</span> <span class="n">b</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
      <span class="k">return</span> <span class="n">p</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">?</span> <span class="m">32</span> <span class="p">:</span> <span class="n">b</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="sc">&#39;1&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">?</span> <span class="n">p</span> <span class="p">:</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="k">catch</span>
    <span class="k">{</span>
      <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="k">}</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9219/addtag/" class="addtag" id="addtag_9219">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9219/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9219/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9219"
  >-</span><span
  class="button yellow"
  id="rating_z_9219"
  >0</span><span 
  class="button green"
  id="rating_p_9219"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9219/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9830">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9830/">#9830</a>(<script language="JavaScript">print_time(new Date("2010/01/17 14:34 GMT"));</script><noscript>2010/01/17 14:34 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Lost_dogです。</p>
<p>wordsByとsplitsAtは自分のユーティリティから引っ張ってきました。あると便利です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Numeric</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>

<span class="nv">ipMaskToInt</span> <span class="o">=</span> <span class="nv">length</span><span class="o">.</span><span class="nv">takeWhile</span> <span class="p">(</span><span class="o">==</span><span class="sc">&#39;1&#39;</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="o">&gt;&gt;=</span> <span class="nv">f</span><span class="p">)</span><span class="o">.</span><span class="nv">wordsBy</span> <span class="p">(</span><span class="o">==</span><span class="sc">&#39;.&#39;</span><span class="p">)</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">xs</span> <span class="o">=</span> <span class="nv">showIntAtBase</span> <span class="mi">2</span> <span class="p">(</span><span class="s">&quot;01&quot;</span><span class="o">!!</span><span class="p">)</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">xs</span><span class="p">)</span> <span class="s">&quot;&quot;</span>

<span class="nv">intToIpMask</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">intercalate</span> <span class="s">&quot;.&quot;</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">f</span> <span class="o">$</span> <span class="nv">splitsAt</span> <span class="mi">8</span> <span class="o">$</span> <span class="p">([</span><span class="mi">1</span><span class="o">..</span><span class="nv">x</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="s">&quot;1&quot;</span><span class="p">)</span><span class="o">++</span><span class="p">([</span><span class="mi">1</span><span class="o">..</span><span class="mi">32</span><span class="o">-</span><span class="nv">x</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="s">&quot;0&quot;</span><span class="p">)</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="o">=</span> <span class="nv">show</span><span class="o">.</span><span class="nv">fst</span><span class="o">.</span><span class="nv">head</span><span class="o">.</span><span class="nv">readInt</span> <span class="mi">2</span> <span class="p">(`</span><span class="nv">elem</span><span class="p">`</span><span class="s">&quot;01&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nv">read</span><span class="o">.</span><span class="p">(</span><span class="o">:</span><span class="p">[]))</span>

<span class="nv">wordsBy</span> <span class="nv">p</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">wordsBy</span> <span class="nv">p</span> <span class="nv">xs</span> <span class="o">=</span> <span class="nv">ys</span> <span class="o">:</span> <span class="nv">wordsBy</span> <span class="nv">p</span> <span class="p">(</span><span class="nv">drop</span> <span class="mi">1</span> <span class="nv">zs</span><span class="p">)</span> <span class="kr">where</span> <span class="p">(</span><span class="nv">ys</span><span class="p">,</span><span class="nv">zs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">break</span> <span class="nv">p</span> <span class="nv">xs</span>

<span class="nv">splitsAt</span> <span class="nv">n</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">splitsAt</span> <span class="nv">n</span> <span class="nv">xs</span> <span class="o">=</span> <span class="nv">ys</span> <span class="o">:</span> <span class="nv">splitsAt</span> <span class="nv">n</span> <span class="nv">zs</span> <span class="kr">where</span> <span class="p">(</span><span class="nv">ys</span><span class="p">,</span><span class="nv">zs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">splitAt</span> <span class="nv">n</span> <span class="nv">xs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9830/addtag/" class="addtag" id="addtag_9830">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9830/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9830/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9830"
  >-</span><span
  class="button yellow"
  id="rating_z_9830"
  >0</span><span 
  class="button green"
  id="rating_p_9830"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9830/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment10448">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1157/" target="_top">kom_xxx</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/10448/">#10448</a>(<script language="JavaScript">print_time(new Date("2010/04/20 10:47 GMT"));</script><noscript>2010/04/20 10:47 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  unix 限定???
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;sys/types.h&gt;</span>
<span class="cp">#include &lt;sys/socket.h&gt;</span>
<span class="cp">#include &lt;netinet/in.h&gt;</span>
<span class="cp">#include &lt;arpa/inet.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;strings.h&gt;</span>

<span class="kt">int</span>
<span class="nf">mask_bits</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">addr</span><span class="p">)</span>
<span class="p">{</span>
        <span class="n">in_addr_t</span> <span class="n">a</span> <span class="o">=</span> <span class="n">inet_network</span><span class="p">(</span><span class="n">addr</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">33</span> <span class="o">-</span> <span class="n">ffs</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">char</span><span class="o">*</span>
<span class="nf">to_mask</span><span class="p">(</span><span class="kt">int</span> <span class="n">bits</span><span class="p">)</span>
<span class="p">{</span>
        <span class="k">struct</span> <span class="n">in_addr</span> <span class="n">a</span><span class="p">;</span>
        <span class="kt">char</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">INET_ADDRSTRLEN</span><span class="p">);</span>
        <span class="n">a</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="mh">0xffffffff</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">bits</span><span class="p">));</span>
        <span class="k">return</span> <span class="n">inet_ntoa_r</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">INET_ADDRSTRLEN</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/10448/addtag/" class="addtag" id="addtag_10448">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/10448/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/10448/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10448"
  >-</span><span
  class="button yellow"
  id="rating_z_10448"
  >0</span><span 
  class="button green"
  id="rating_p_10448"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/10448/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9339">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/647/" target="_top">ivoryworks</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9339/">#9339</a>(<script language="JavaScript">print_time(new Date("2009/07/10 14:47 GMT"));</script><noscript>2009/07/10 14:47 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>無味乾燥。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre><span class="x">function mask2bits($ddn_str)</span>
<span class="x">{</span>
<span class="x">    $bits = 0;</span>
<span class="x">    $decs = explode(&#39;.&#39;, $ddn_str);</span>
<span class="x">    foreach ( $decs as $dec ) {</span>
<span class="x">        $bits += substr_count(decbin($dec), &#39;1&#39;);</span>
<span class="x">    }</span>
<span class="x">    return $bits;</span>
<span class="x">}</span>

<span class="x">function bits2mask($bits)</span>
<span class="x">{</span>
<span class="x">    $bits_str = strrev(sprintf(&#39;%032s&#39;, str_repeat(&quot;1&quot;, $bits)));</span>
<span class="x">    $bins = str_split($bits_str, 8);</span>
<span class="x">    foreach ($bins as $bin) {</span>
<span class="x">        $decs[] = bindec($bin);</span>
<span class="x">    }</span>
<span class="x">    return implode(&#39;.&#39;, $decs);</span>
<span class="x">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9339/addtag/" class="addtag" id="addtag_9339">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9339/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9339/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9339"
  >-</span><span
  class="button yellow"
  id="rating_z_9339"
  >0</span><span 
  class="button green"
  id="rating_p_9339"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9339/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9133">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9133/">#9133</a>(<script language="JavaScript">print_time(new Date("2009/06/12 15:30 GMT"));</script><noscript>2009/06/12 15:30 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>InetAddressを引数にしてネットマスクのbit数を返すメソッドと、bit数からInet4Address を返すメソッドです。ネットマスクが n bit の時、ビットパターンが2の補数表現で -2^(32 - n) になる事を利用しています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="o">{</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">maskLength</span><span class="o">(</span><span class="n">InetAddress</span> <span class="n">adrs</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">BigInteger</span> <span class="n">a</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BigInteger</span><span class="o">(</span><span class="n">adrs</span><span class="o">.</span><span class="na">getAddress</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">a</span><span class="o">.</span><span class="na">bitCount</span><span class="o">()</span> <span class="o">!=</span> <span class="n">a</span><span class="o">.</span><span class="na">bitLength</span><span class="o">())</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Illegal mask.&quot;</span><span class="o">);</span>
        <span class="k">return</span> <span class="mi">8</span> <span class="o">*</span> <span class="n">adrs</span><span class="o">.</span><span class="na">getAddress</span><span class="o">().</span><span class="na">length</span> <span class="o">-</span> <span class="n">a</span><span class="o">.</span><span class="na">bitCount</span><span class="o">();</span>
    <span class="o">}</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="n">InetAddress</span> <span class="n">getMask</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">ByteArrayOutputStream</span> <span class="n">bs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
            <span class="n">DataOutputStream</span> <span class="n">dos</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DataOutputStream</span><span class="o">(</span><span class="n">bs</span><span class="o">);</span>
            <span class="n">dos</span><span class="o">.</span><span class="na">writeInt</span><span class="o">(-(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="o">(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">n</span><span class="o">)));</span>
            <span class="k">return</span> <span class="n">Inet4Address</span><span class="o">.</span><span class="na">getByAddress</span><span class="o">(</span><span class="n">bs</span><span class="o">.</span><span class="na">toByteArray</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalStateException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">UnknownHostException</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maskLength</span><span class="o">(</span><span class="n">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s">&quot;255.255.255.0&quot;</span><span class="o">)));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maskLength</span><span class="o">(</span><span class="n">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s">&quot;255.255.255.128&quot;</span><span class="o">)));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maskLength</span><span class="o">(</span><span class="n">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s">&quot;255.255.255.255&quot;</span><span class="o">)));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">maskLength</span><span class="o">(</span><span class="n">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="s">&quot;ffff:ffff:ffff::&quot;</span><span class="o">)));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getMask</span><span class="o">(</span><span class="mi">24</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getMask</span><span class="o">(</span><span class="mi">25</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">getMask</span><span class="o">(</span><span class="mi">32</span><span class="o">));</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9133/addtag/" class="addtag" id="addtag_9133">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9133/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9133/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9133"
  >-</span><span
  class="button yellow"
  id="rating_z_9133"
  >0</span><span 
  class="button green"
  id="rating_p_9133"
  >+</span></span></span>
  


<p>

  

  <a href="/web/20110320070546/http://ja.doukaku.org/comment/9133/">
    1
    reply
  </a>

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9133/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9106">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9106/">#9106</a>(<script language="JavaScript">print_time(new Date("2009/06/10 21:55 GMT"));</script><noscript>2009/06/10 21:55 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>F#で、
実行例
&gt; maskstr2num "255.255.255.0";;
val it : int = 24
&gt; maskstr2num "255.255.255.128";;
val it : int = 25
&gt; maskstr2num "255.255.255.255";;
val it : int = 32
&gt; num2maskstr 24;;
val it : string = "255.255.255.0"
&gt; num2maskstr 25;;
val it : string = "255.255.255.128"
&gt; num2maskstr 32;;
val it : string = "255.255.255.255"</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20110320070546/http://www.nminoru.jp/~nminoru/programming/bitcount.html">ビットを数える・探すアルゴリズム</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre><span class="kr">let</span> <span class="n">bitcount</span> <span class="n">bits</span><span class="k">:</span><span class="n">int</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">bits</span> <span class="k">=</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x55555555</span><span class="k">)</span> <span class="k">+</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&gt;&gt;&gt;</span> <span class="mi">1</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x55555555</span><span class="k">)</span>
  <span class="kr">let</span> <span class="n">bits</span> <span class="k">=</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x33333333</span><span class="k">)</span> <span class="k">+</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&gt;&gt;&gt;</span> <span class="mi">2</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x33333333</span><span class="k">)</span>
  <span class="kr">let</span> <span class="n">bits</span> <span class="k">=</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x0f0f0f0f</span><span class="k">)</span> <span class="k">+</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&gt;&gt;&gt;</span> <span class="mi">4</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x0f0f0f0f</span><span class="k">)</span>
  <span class="kr">let</span> <span class="n">bits</span> <span class="k">=</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x00ff00ff</span><span class="k">)</span> <span class="k">+</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&gt;&gt;&gt;</span> <span class="mi">8</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x00ff00ff</span><span class="k">)</span> <span class="kr">in</span> 
      <span class="k">(</span><span class="n">bits</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x0000ffff</span><span class="k">)</span> <span class="k">+</span> <span class="k">(</span><span class="n">bits</span> <span class="k">&gt;&gt;&gt;</span><span class="mi">16</span> <span class="k">&amp;&amp;&amp;</span> <span class="mi">0</span><span class="n">x0000ffff</span><span class="k">)</span>

<span class="kr">let</span> <span class="n">maskstr2num</span> <span class="k">(</span><span class="n">mask</span><span class="k">:</span><span class="n">string</span><span class="k">)</span> <span class="k">=</span>
  <span class="n">bitcount</span>  <span class="k">&lt;|</span> <span class="n">Seq</span><span class="k">.</span><span class="n">fold</span> <span class="k">(</span> <span class="kr">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="k">-&gt;</span> <span class="n">a</span> <span class="k">*</span> <span class="mi">256</span> <span class="k">+</span> <span class="n">int</span> <span class="n">b</span> <span class="k">)</span> <span class="mi">0</span> <span class="k">(</span><span class="n">mask</span><span class="k">.</span><span class="n">Split</span><span class="k">(</span><span class="sc">&#39;.&#39;</span><span class="k">))</span>

<span class="kr">let</span> <span class="n">num2maskstr</span> <span class="k">(</span><span class="n">num</span><span class="k">:</span><span class="n">int</span><span class="k">)</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">unum</span> <span class="k">=</span> <span class="n">uint32</span> <span class="k">(</span><span class="mi">2</span><span class="k">.</span><span class="mi">0</span> <span class="k">**</span> <span class="k">(</span><span class="n">float</span> <span class="n">num</span><span class="k">))-</span><span class="mi">1</span><span class="n">u</span> <span class="k">&lt;&lt;&lt;</span> <span class="k">(</span><span class="mi">32</span><span class="k">-</span><span class="n">num</span><span class="k">)</span>
  <span class="n">System</span><span class="k">.</span><span class="n">String</span><span class="k">.</span><span class="n">Join</span><span class="k">(</span><span class="s2">&quot;.&quot;</span><span class="k">,</span> <span class="k">[|</span><span class="kr">for</span> <span class="n">i</span><span class="k">=</span><span class="mi">3</span> <span class="kr">downto</span> <span class="mi">0</span> <span class="kr">do</span> <span class="n">yield</span> <span class="k">((</span><span class="n">unum</span> <span class="k">&amp;&amp;&amp;</span> <span class="k">(</span><span class="mi">0</span><span class="n">xFFu</span> <span class="k">&lt;&lt;&lt;</span> <span class="n">i</span><span class="k">*</span><span class="mi">8</span><span class="k">)</span> <span class="k">&gt;&gt;&gt;</span> <span class="n">i</span><span class="k">*</span><span class="mi">8</span><span class="k">).</span><span class="n">ToString</span><span class="k">())</span> <span class="k">|])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9106/addtag/" class="addtag" id="addtag_9106">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9106/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9106/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9106"
  >-</span><span
  class="button yellow"
  id="rating_z_9106"
  >0</span><span 
  class="button green"
  id="rating_p_9106"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9106/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9444">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/647/" target="_top">ivoryworks</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9444/">#9444</a>(<script language="JavaScript">print_time(new Date("2009/08/05 03:00 GMT"));</script><noscript>2009/08/05 03:00 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/hidemaru_macro/">
	  秀丸マクロ
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>・Mask2Bit：
　　ネットマスク(文字型)を渡すとビット値(数値型)を返却します。
・Bit2Mask：
　　ビット値(数値型)を渡すとネットマスク(文字型)を返却します。

/* ネットマスクをビット値に変換 */
call Mask2Bit input("input netmask.");
message str(##return);

/* 逆変換 */
call Bit2Mask val(input("input value."));
message $$return;

* パラメータの妥当性はチェックしてません。
* Bin2DecとDec2Binは2進数⇔10進数のサブルーチンです。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre>Mask2Bit:
    ##c=0;
    ##bit=0;
    while (strlen($$1)) {
        $b = leftstr($$1,1);
        $$1 = rightstr($$1, strlen($$1)-1);
        if ($b == &quot;.&quot;) {
            ##c = ##c + 1;
        } else if (val($b) == 0 &amp;&amp; $b != &quot;0&quot;) {
            break;
        } else {
            $$aar[##c] = $$aar[##c] + $b;
        }
    }
    while (0 &lt;= ##c) {
        call Dec2Bin val($$aar[##c]);
        while (strlen($$return)) {
            ##bit = ##bit + val(leftstr($$return,1));
            $$return = rightstr($$return, strlen($$return)-1);
        }
        ##c = ##c - 1;
    }
    return ##bit;

Bit2Mask:
    $$b_str = &quot;&quot;;
    $$mask = &quot;&quot;;
    while (strlen($$b_str) &lt; 32) {
        if (0&lt;##1) {
            $$b_str = $$b_str + &quot;1&quot;;
        } else {
            $$b_str = $$b_str + &quot;0&quot;;
        }
        ##1 = ##1 - 1;
    }
    while (strlen($$b_str)) {
        call Bin2Dec leftstr($$b_str, 8);
        $$mask = $$mask + str(##return);
        $$b_str = rightstr($$b_str, strlen($$b_str)-8);
        if (strlen($$b_str)) {
            $$mask = $$mask + &quot;.&quot;;
        }
    }
    return $$mask;

Bin2Dec:
    ##dec = 0;
    ##val = 1;
    while (strlen($$1)) {
        if (rightstr($$1, 1) == &quot;1&quot;) {
            ##dec = ##dec + ##val;
        }
        ##val = ##val*2;
        $$1 = leftstr($$1, strlen($$1)-1);
    }
    return ##dec;

Dec2Bin:
    $$str = &quot;&quot;;
    if (##1!=0) {
        while (##1!=1) {
            $$str = str(##1%2)+$$str;
            ##1 = ##1/2;
        }
        $$str = &quot;1&quot;+$$str;
    } else {
        $$str = &quot;0&quot;;
    }
    return $$str;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9444/addtag/" class="addtag" id="addtag_9444">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/hidemaru_macro/">
		秀丸マクロ
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9444/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9444/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9444"
  >-</span><span
  class="button yellow"
  id="rating_z_9444"
  >0</span><span 
  class="button green"
  id="rating_p_9444"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9444/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9083">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/732/" target="_top">bleis-tift</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9083/">#9083</a>(<script language="JavaScript">print_time(new Date("2009/06/10 07:45 GMT"));</script><noscript>2009/06/10 07:45 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/sql/">
	  SQL
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>SQL Server 2008 で確認しました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73</pre></td><td class="code"><div class="highlight"><pre><span class="k">WITH</span>
  <span class="k">Input</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">subnetmask</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;255.255.255.0&#39;</span>
    <span class="k">UNION</span> <span class="k">ALL</span> <span class="k">SELECT</span> <span class="mi">2</span><span class="p">,</span> <span class="s1">&#39;255.255.255.128&#39;</span>
    <span class="k">UNION</span> <span class="k">ALL</span> <span class="k">SELECT</span> <span class="mi">3</span><span class="p">,</span> <span class="s1">&#39;255.255.255.255&#39;</span>
  <span class="p">)</span>
<span class="p">,</span> <span class="n">Input_</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">subnetmask</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">subnetmask</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span> <span class="k">FROM</span> <span class="k">Input</span>
  <span class="p">)</span>
<span class="p">,</span> <span class="n">ToNums</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">element</span><span class="p">,</span> <span class="k">input</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">id</span>
      <span class="p">,</span> <span class="mi">1</span>
      <span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="k">LEFT</span><span class="p">(</span><span class="n">subnetmask</span><span class="p">,</span> <span class="n">CHARINDEX</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">subnetmask</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">int</span><span class="p">)</span>
      <span class="p">,</span> <span class="k">SUBSTRING</span><span class="p">(</span><span class="n">subnetmask</span><span class="p">,</span> <span class="n">CHARINDEX</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="n">subnetmask</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">LEN</span><span class="p">(</span><span class="n">subnetmask</span><span class="p">))</span>
    <span class="k">FROM</span>
        <span class="n">Input_</span>
    <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="k">SELECT</span>
        <span class="n">id</span>
      <span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="k">LEFT</span><span class="p">(</span><span class="k">input</span><span class="p">,</span> <span class="n">CHARINDEX</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">input</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">AS</span> <span class="nb">int</span><span class="p">)</span>
      <span class="p">,</span> <span class="k">SUBSTRING</span><span class="p">(</span><span class="k">input</span><span class="p">,</span> <span class="n">CHARINDEX</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="k">input</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">LEN</span><span class="p">(</span><span class="k">input</span><span class="p">))</span>
    <span class="k">FROM</span>
        <span class="n">ToNums</span>
    <span class="k">WHERE</span>
        <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span>
  <span class="p">)</span>
<span class="p">,</span> <span class="n">ToBin</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">bin</span><span class="p">,</span> <span class="n">deci</span><span class="p">,</span> <span class="n">crnt</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">id</span>
      <span class="p">,</span> <span class="n">i</span>
      <span class="p">,</span> <span class="k">CAST</span><span class="p">(</span><span class="k">CASE</span>
             <span class="k">WHEN</span> <span class="n">element</span> <span class="o">&gt;=</span> <span class="mi">128</span> <span class="k">THEN</span> <span class="mi">10000000</span>
                                 <span class="k">ELSE</span> <span class="mi">0</span>
             <span class="k">END</span> <span class="k">AS</span> <span class="nb">bigint</span><span class="p">)</span>
      <span class="p">,</span> <span class="k">CASE</span>
        <span class="k">WHEN</span> <span class="n">element</span> <span class="o">&gt;=</span> <span class="mi">128</span> <span class="k">THEN</span> <span class="n">element</span> <span class="o">-</span> <span class="mi">128</span>
                            <span class="k">ELSE</span> <span class="n">element</span>
        <span class="k">END</span>
      <span class="p">,</span> <span class="mi">6</span>
    <span class="k">FROM</span>
        <span class="n">ToNums</span>
    <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="k">SELECT</span>
        <span class="n">id</span>
      <span class="p">,</span> <span class="n">i</span>
      <span class="p">,</span> <span class="k">CASE</span>
        <span class="k">WHEN</span> <span class="n">deci</span> <span class="o">&gt;=</span> <span class="n">POWER</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">crnt</span><span class="p">)</span> <span class="k">THEN</span> <span class="n">POWER</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">crnt</span><span class="p">)</span>
                                    <span class="k">ELSE</span> <span class="mi">0</span>
        <span class="k">END</span> <span class="o">+</span> <span class="n">bin</span>
      <span class="p">,</span> <span class="k">CASE</span>
        <span class="k">WHEN</span> <span class="n">deci</span> <span class="o">&gt;=</span> <span class="n">POWER</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">crnt</span><span class="p">)</span> <span class="k">THEN</span> <span class="n">deci</span> <span class="o">-</span> <span class="n">POWER</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="n">crnt</span><span class="p">)</span>
                                    <span class="k">ELSE</span> <span class="n">deci</span>
        <span class="k">END</span>
      <span class="p">,</span> <span class="n">crnt</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">FROM</span>
        <span class="n">ToBin</span>
    <span class="k">WHERE</span>
        <span class="n">crnt</span> <span class="o">&gt;=</span> <span class="mi">0</span>
  <span class="p">)</span>
<span class="p">,</span> <span class="n">CountOne</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="k">result</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">id</span>
      <span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">LEN</span><span class="p">(</span><span class="k">REPLACE</span><span class="p">(</span><span class="n">STR</span><span class="p">(</span><span class="n">bin</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)))</span>
    <span class="k">FROM</span>
        <span class="n">ToBin</span>
    <span class="k">WHERE</span>
        <span class="n">crnt</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="k">GROUP</span> <span class="k">BY</span>
        <span class="n">id</span>
  <span class="p">)</span>
<span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="k">result</span> <span class="k">FROM</span> <span class="n">CountOne</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9083/addtag/" class="addtag" id="addtag_9083">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/sql/">
		SQL
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9083/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9083/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9083"
  >-</span><span
  class="button yellow"
  id="rating_z_9083"
  >0</span><span 
  class="button green"
  id="rating_p_9083"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9083/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9132">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9132/">#9132</a>(<script language="JavaScript">print_time(new Date("2009/06/12 08:08 GMT"));</script><noscript>2009/06/12 08:08 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>PPCRE を使ってみました。逆はビット演算で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="highlight"><pre>(asdf:operate &#39;asdf:load-op :cl-ppcre)

(defun mask-to-bits (s)
  (position #\0 (format nil &quot;~{~8,&#39;0B~}0&quot;
                        (mapcar #&#39;parse-integer (ppcre:split &quot;\\.&quot; s)))))

(defun bits-to-mask (n)
  (let ((m (deposit-field #xffffffff (byte n (- 32 n)) 0)))
    (format nil &quot;~D.~D.~D.~D&quot;
            (ldb (byte 8 24) m) (ldb (byte 8 16) m)
            (ldb (byte 8 8) m) (ldb (byte 8 0) m))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9132/addtag/" class="addtag" id="addtag_9132">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9132/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9132/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9132"
  >-</span><span
  class="button yellow"
  id="rating_z_9132"
  >0</span><span 
  class="button green"
  id="rating_p_9132"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9132/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment10326">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/10326/">#10326</a>(<script language="JavaScript">print_time(new Date("2010/03/06 06:35 GMT"));</script><noscript>2010/03/06 06:35 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>もっと美しく書ける気がします。
これが今の僕の限界です orz</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20110320070546/http://d.hatena.ne.jp/regerege/"></a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre>namespace Doukakuorg

open System
open System.Text.RegularExpressions

type C253 public () =
    member this.MaskToBit ip =
        if Regex.IsMatch(ip, @&quot;^\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}$&quot;) then
            ip.Split(&#39;.&#39;)
                |&gt; Array.map (fun a -&gt; Convert.ToInt32(a))
                |&gt; Array.map (fun a -&gt; Convert.ToString(a, 2))
                |&gt; Array.fold (fun s n -&gt; s + n) &quot;&quot;
                |&gt; (fun a -&gt; a.Replace(&quot;0&quot;, &quot;&quot;).Length)
        else
            0

    member this.BitToMask bit =
        if 1 &lt;= bit &amp;&amp; bit &lt;= 32 then
            (new String(&#39;1&#39;, bit)).PadRight(32, &#39;0&#39;)
                |&gt; (fun a -&gt; [for i in 0..8..(a.Length-1) do yield a.[i .. (i+7)]])
                |&gt; List.map (fun a -&gt; Convert.ToInt32(a, 2))
                |&gt; List.fold (fun s n -&gt; String.Format(&quot;{0}.{1}&quot;, s, n)) &quot;&quot;
                |&gt; (fun a -&gt; a.[1..])
        else
            &quot;0.0.0.0&quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/10326/addtag/" class="addtag" id="addtag_10326">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/10326/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/10326/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10326"
  >-</span><span
  class="button yellow"
  id="rating_z_10326"
  >0</span><span 
  class="button green"
  id="rating_p_10326"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/10326/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9100">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/589/" target="_top">nido</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9100/">#9100</a>(<script language="JavaScript">print_time(new Date("2009/06/10 09:42 GMT"));</script><noscript>2009/06/10 09:42 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>エラー処理はしていません。
実行環境がRuby 1.8.6以前の場合
map(&amp;:to_i) の部分を map{|e| e.to_i} にして下さい。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">mask2bits</span><span class="p">(</span><span class="n">mask_str</span><span class="p">)</span>
  <span class="n">mask_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">){</span><span class="o">|</span><span class="n">r</span><span class="p">,</span><span class="n">e</span><span class="o">|</span> <span class="mi">8</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="n">r</span><span class="o">+=</span><span class="p">(</span><span class="n">e</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">);</span><span class="n">e</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">};</span><span class="n">r</span><span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">bits2mask</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
  <span class="o">[</span><span class="s1">&#39;1&#39;</span><span class="o">*</span><span class="n">num</span> <span class="o">+</span> <span class="s1">&#39;0&#39;</span><span class="o">*</span><span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="n">num</span><span class="p">)</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;B*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;C*&#39;</span><span class="p">)</span><span class="o">*</span><span class="s1">&#39;.&#39;</span>
<span class="k">end</span>

<span class="k">if</span> <span class="vg">$0</span> <span class="o">==</span> <span class="bp">__FILE__</span>
    <span class="nb">puts</span> <span class="n">mask2bits</span><span class="p">(</span><span class="s1">&#39;255.255.255.0&#39;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">mask2bits</span><span class="p">(</span><span class="s1">&#39;255.255.255.128&#39;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">mask2bits</span><span class="p">(</span><span class="s1">&#39;255.255.255.255&#39;</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">bits2mask</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">bits2mask</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="n">bits2mask</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9100/addtag/" class="addtag" id="addtag_9100">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9100/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9100/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9100"
  >-</span><span
  class="button yellow"
  id="rating_z_9100"
  >0</span><span 
  class="button green"
  id="rating_p_9100"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9100/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9135">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1064/" target="_top">yamamoto</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9135/">#9135</a>(<script language="JavaScript">print_time(new Date("2009/06/12 15:47 GMT"));</script><noscript>2009/06/12 15:47 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>#9133の移植です。
便利なクラスがあるんですねえ。
勉強になりました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>// Java版(#9133)の移植です。
import java.net._
import java.math._
import java.io._

object IPNetMask9133 {
  def main(args : Array[String]) : Unit = {
    System.out.println(maskLength(InetAddress.getByName(&quot;255.255.255.0&quot;)));
    System.out.println(maskLength(InetAddress.getByName(&quot;255.255.255.128&quot;)));
    System.out.println(maskLength(InetAddress.getByName(&quot;255.255.255.255&quot;)));
    System.out.println(maskLength(InetAddress.getByName(&quot;ffff:ffff:ffff::&quot;)));
    System.out.println(getMask(24));
    System.out.println(getMask(25));
    System.out.println(getMask(32));
  }
  
  def maskLength(adrs:InetAddress):Int = {
    val a = new BigInteger(adrs.getAddress());
    if (a.bitCount() != a.bitLength())
       throw new IllegalArgumentException(&quot;Illegal mask.&quot;)
    //
    return 8 * adrs.getAddress().length - a.bitCount();
  }
  
  def getMask(n:Int) :InetAddress = {
    try {
      val bs = new ByteArrayOutputStream();
      val dos = new DataOutputStream(bs);
      dos.writeInt(-(1 &lt;&lt; (32 - n)));
      return InetAddress.getByAddress(bs.toByteArray());
    } catch {
      case e:Exception =&gt;throw new IllegalStateException(e);
    }
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9135/addtag/" class="addtag" id="addtag_9135">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9135/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9135/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9135"
  >-</span><span
  class="button yellow"
  id="rating_z_9135"
  >0</span><span 
  class="button green"
  id="rating_p_9135"
  >+</span></span></span>
  


<p>

  
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9133/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9135/root/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9135/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9087">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/763/" target="_top">Songmu</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9087/">#9087</a>(<script language="JavaScript">print_time(new Date("2009/06/10 08:33 GMT"));</script><noscript>2009/06/10 08:33 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>もっとpackをかっこよく使いたい。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">maskstr2num</span><span class="p">{</span>
    <span class="k">my</span> <span class="nv">$mask</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">if</span> <span class="nv">$mask</span> <span class="o">!~</span> <span class="sr">/^(\d{1,3}\.){3}\d+$/</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@mask_sections</span> <span class="o">=</span> <span class="nb">split</span> <span class="sr">/\./</span><span class="p">,</span><span class="nv">$mask</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$bit_mask</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="nv">@mask_sections</span><span class="p">){</span>
        <span class="k">return</span> <span class="k">if</span> <span class="nv">$_</span> <span class="o">&gt;</span> <span class="mi">255</span><span class="p">;</span>
        <span class="nv">$bit_mask</span> <span class="o">.=</span> <span class="nb">unpack</span><span class="p">(</span><span class="s">&quot;B8&quot;</span><span class="p">,</span><span class="nb">pack</span><span class="p">(</span><span class="s">&quot;C&quot;</span><span class="p">,</span><span class="nv">$_</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">if</span> <span class="nv">$bit_mask</span> <span class="o">!~</span> <span class="sr">/^1+0+$/</span><span class="p">;</span>
    
    <span class="k">my</span> <span class="nv">$cnt</span> <span class="o">=</span> <span class="nb">scalar</span><span class="p">(()</span> <span class="o">=</span> <span class="nv">$bit_mask</span> <span class="o">=~</span><span class="sr"> /1/g</span><span class="p">);</span>
    <span class="k">return</span> <span class="nv">$cnt</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">num2maskstr</span><span class="p">{</span>
    <span class="k">my</span> <span class="nv">$mask</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">if</span> <span class="nv">$mask</span> <span class="o">&gt;</span> <span class="mi">32</span> <span class="o">||</span> <span class="nv">$mask</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$mask</span> <span class="o">=</span> <span class="s">&#39;1&#39;</span><span class="n">x</span><span class="nv">$mask</span> <span class="o">.</span> <span class="s">&#39;0&#39;</span><span class="n">x</span><span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="nv">$mask</span><span class="p">);</span>
    
    <span class="k">my</span> <span class="nv">@mask_sections</span> <span class="o">=</span> <span class="nv">$mask</span> <span class="o">=~</span><span class="sr"> /^(\d{8})(\d{8})(\d{8})(\d{8})$/</span><span class="p">;</span>
    <span class="nv">$_</span> <span class="o">=</span> <span class="nb">unpack</span><span class="p">(</span><span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="nb">pack</span><span class="p">(</span><span class="s">&quot;B8&quot;</span><span class="p">,</span><span class="nv">$_</span><span class="p">))</span> <span class="k">for</span> <span class="nv">@mask_sections</span><span class="p">;</span>
    
    <span class="nv">$mask</span> <span class="o">=</span> <span class="nb">join</span> <span class="s">&#39;.&#39;</span><span class="p">,</span><span class="nv">@mask_sections</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$mask</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9087/addtag/" class="addtag" id="addtag_9087">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9087/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9087/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9087"
  >-</span><span
  class="button yellow"
  id="rating_z_9087"
  >0</span><span 
  class="button green"
  id="rating_p_9087"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9087/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9103">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/242/" target="_top">lufia</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9103/">#9103</a>(<script language="JavaScript">print_time(new Date("2009/06/10 13:15 GMT"));</script><noscript>2009/06/10 13:15 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <ul class="simple">
<li>Limboのキャストはtype exprのように書きます。</li>
<li>int &quot;1&quot;の場合、数値に変換してくれます。</li>
</ul>
<p>極力、定数は使わないように書きました。
8(ビット数)は名前を思いつかなかったので。</p>
<p>テストコードも含めてみましたが、
かえって見づらくなっただけかもしれません。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70</pre></td><td class="code"><div class="highlight"><pre>implement Netmask;

include &quot;sys.m&quot;;
    sys: Sys;
    fprint, sprint: import sys;
include &quot;draw.m&quot;;

Netmask: module
{
    init: fn(nil: ref Draw-&gt;Context, argv: list of string);
};

IPv4len: con 4;

data := array[] of {
    (&quot;255.128.0.0&quot;, 9),
    (&quot;255.255.255.0&quot;, 24),
    (&quot;255.255.255.128&quot;, 25),
    (&quot;255.255.255.255&quot;, 32),
};

init(nil: ref Draw-&gt;Context, nil: list of string)
{
    sys = load Sys Sys-&gt;PATH;
    stderr := sys-&gt;fildes(2);

    for(i := 0; i &lt; len data; i++){
        (addr, expected) := data[i];
        actual := toint(addr);
        if(actual != expected)
            fprint(stderr, &quot;%s %d vs %d\n&quot;, addr, actual, expected);
        r := toaddr(expected);
        if(addr != r)
            fprint(stderr, &quot;%d %s vs %s\n&quot;, expected, r, addr);
    }
}

toint(addr: string): int
{
    (n, l) := sys-&gt;tokenize(addr, &quot;.&quot;);
    if(n != IPv4len)
        return -1;

    sum := 0;
    for(p := l; p != nil; p = tl p)
        sum += bitcount(byte hd p);
    return sum;
}

bitcount(b: byte): int
{
    sum := 0;
    for(n := int b; n; n &amp;= n-1)
        sum++;
    return sum;
}

toaddr(n: int): string
{
    N: con IPv4len*8;

    if(n &lt; 0 || n &gt; N)
        return nil;
    t := (big 1 &lt;&lt; n) - big 1;
    t &lt;&lt;= N-n;
    s := &quot;&quot;;
    for(i := 0; i &lt; IPv4len; i++)
        s += sprint(&quot;.%d&quot;, int byte (t &gt;&gt; (IPv4len-i-1)*8));
    return s[1:];
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9103/addtag/" class="addtag" id="addtag_9103">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9103/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9103/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9103"
  >-</span><span
  class="button yellow"
  id="rating_z_9103"
  >0</span><span 
  class="button green"
  id="rating_p_9103"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9103/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9089">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/606/" target="_top">pooq</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9089/">#9089</a>(<script language="JavaScript">print_time(new Date("2009/06/10 05:55 GMT"));</script><noscript>2009/06/10 05:55 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/j/">
	  J
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>   a2m '255.255.255.0'
24
   a2m '255.255.255.128'
25
   a2m '255.255.255.255'
32
   m2a 24
255.255.255.0
   m2a 25
255.255.255.128
   m2a 32
255.255.255.255
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="highlight"><pre>a2m =: 3 : &#39;+/ , #: &quot;. &gt; &#39;&#39;.&#39;&#39; cutopen y&#39;
m2a =: 3 : &#39;}: ; ,&amp;&#39;&#39;.&#39;&#39; @ &quot;: each 256 #. inv #. 32 {. y # 1&#39;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9089/addtag/" class="addtag" id="addtag_9089">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/j/">
		J
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9089/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9089/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9089"
  >-</span><span
  class="button yellow"
  id="rating_z_9089"
  >0</span><span 
  class="button green"
  id="rating_p_9089"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9089/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9128">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1066/" target="_top">onoue</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9128/">#9128</a>(<script language="JavaScript">print_time(new Date("2009/06/11 23:08 GMT"));</script><noscript>2009/06/11 23:08 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>変換・逆変換の過程をたどりやすくしてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Word</span>        <span class="p">(</span> <span class="n">Word32</span><span class="p">,</span> <span class="n">Word8</span> <span class="p">)</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>        <span class="p">(</span> <span class="nv">unfoldr</span><span class="p">,</span> <span class="nv">intersperse</span> <span class="p">)</span>

<span class="c1">-- Int &lt;-&gt; String</span>
<span class="nv">nbits2mask</span> <span class="o">=</span> <span class="nv">str_w8s</span> <span class="o">.</span> <span class="nv">w8s_w32</span> <span class="o">.</span> <span class="nv">w32_int</span>
<span class="nv">mask2nbits</span> <span class="o">=</span> <span class="nv">int_w32</span> <span class="o">.</span> <span class="nv">w32_w8s</span> <span class="o">.</span> <span class="nv">w8s_str</span>

<span class="c1">-- Int &lt;-&gt; Word32</span>
<span class="nv">w32_int</span> <span class="o">=</span> <span class="p">(</span><span class="nv">maxBound</span><span class="o">-</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">+</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="p">)</span>
<span class="nv">int_w32</span> <span class="o">=</span> <span class="p">(</span><span class="mi">32</span><span class="o">-</span><span class="p">)</span> <span class="o">.</span> <span class="nv">round</span> <span class="o">.</span> <span class="nv">logBase</span> <span class="mi">2</span> <span class="o">.</span> <span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="p">)</span> <span class="o">.</span> <span class="nv">fromIntegral</span> <span class="o">.</span> <span class="p">(</span><span class="nv">maxBound</span><span class="o">-</span><span class="p">)</span>

<span class="c1">-- Word32 &lt;-&gt; [Word8]</span>
<span class="nv">w8s_w32</span> <span class="o">=</span> <span class="nv">reverse</span> <span class="o">.</span> <span class="nv">take</span> <span class="mi">4</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">w8_w32</span> <span class="o">.</span> <span class="nv">unfoldr</span> <span class="p">(</span><span class="n">Just</span> <span class="o">.</span> <span class="nv">swap</span> <span class="o">.</span> <span class="p">(`</span><span class="nv">divMod</span><span class="p">`</span><span class="mi">256</span><span class="p">))</span>
<span class="nv">w32_w8s</span> <span class="o">=</span> <span class="nv">foldl</span> <span class="p">((</span><span class="o">+</span><span class="p">)</span> <span class="o">.</span> <span class="p">(</span><span class="mi">256</span><span class="o">*</span><span class="p">))</span> <span class="mi">0</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">w32_w8</span>

<span class="c1">-- [Word8] &lt;-&gt; String</span>
<span class="nv">str_w8s</span> <span class="o">=</span> <span class="nv">concat</span> <span class="o">.</span> <span class="nv">intersperse</span> <span class="s">&quot;.&quot;</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">show</span>
<span class="nv">w8s_str</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">read</span> <span class="o">.</span> <span class="nv">unfoldr</span> <span class="nv">phi</span> <span class="o">.</span> <span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="o">:</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="nv">phi</span> <span class="p">[]</span>     <span class="o">=</span> <span class="n">Nothing</span>
    <span class="nv">phi</span> <span class="p">(</span><span class="kr">_</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="o">=</span> <span class="n">Just</span> <span class="o">$</span> <span class="nv">break</span> <span class="p">(</span><span class="sc">&#39;.&#39;</span><span class="o">==</span><span class="p">)</span> <span class="nv">cs</span>


<span class="c1">-- misc</span>
<span class="nv">swap</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">y</span><span class="p">,</span><span class="nv">x</span><span class="p">)</span>

<span class="nv">w8_w32</span> <span class="o">=</span> <span class="nv">toEnum</span> <span class="o">.</span> <span class="nv">fromEnum</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Word8</span>           <span class="c1">-- 0 &lt;= arg &lt; 2^8</span>
<span class="nv">w32_w8</span> <span class="o">=</span> <span class="nv">toEnum</span> <span class="o">.</span> <span class="nv">fromEnum</span> <span class="o">::</span> <span class="n">Word8</span>  <span class="o">-&gt;</span> <span class="n">Word32</span>          <span class="c1">-- 0 &lt;= arg &lt; 2^8</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="nv">print</span> <span class="o">.</span> <span class="nv">test</span><span class="p">)</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">32</span><span class="p">]</span>
  <span class="kr">where</span>
    <span class="nv">test</span> <span class="nv">n</span> <span class="o">=</span> <span class="kr">let</span> <span class="p">{</span> <span class="nv">m</span> <span class="o">=</span> <span class="nv">nbits2mask</span> <span class="nv">n</span><span class="p">;</span> <span class="nv">n&#39;</span> <span class="o">=</span> <span class="nv">mask2nbits</span> <span class="nv">m</span> <span class="p">}</span> <span class="kr">in</span> <span class="p">(</span><span class="nv">n</span><span class="p">,</span> <span class="nv">m</span><span class="p">,</span> <span class="nv">n</span><span class="o">==</span><span class="nv">n&#39;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9128/addtag/" class="addtag" id="addtag_9128">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9128/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9128/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9128"
  >-</span><span
  class="button yellow"
  id="rating_z_9128"
  >0</span><span 
  class="button green"
  id="rating_p_9128"
  >+</span></span></span>
  


<p>

  
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9127/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9128/root/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9128/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9117">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/833/" target="_top">mattsan</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9117/">#9117</a>(<script language="JavaScript">print_time(new Date("2009/06/11 08:30 GMT"));</script><noscript>2009/06/11 08:30 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>結構乱暴。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;bitset&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;sstream&gt;</span>
<span class="cp">#include &lt;cassert&gt;</span>

<span class="kt">int</span> <span class="n">mask2bits</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span>  <span class="n">n</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
    <span class="kt">char</span> <span class="n">c</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span>

    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istringstream</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">count</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">3</span><span class="p">,</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span>                                                <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind1st</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">less_equal</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(),</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span>         <span class="o">&amp;&amp;</span>
        <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">count_if</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">4</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind2nd</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">less_equal</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(),</span> <span class="mi">255</span><span class="p">))</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span>       <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span><span class="p">((</span><span class="n">n</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">n</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">n</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="n">n</span><span class="p">[</span><span class="mi">3</span><span class="p">]).</span><span class="n">count</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">bits2mask</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">((</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">32</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="mi">32</span><span class="o">&gt;</span> <span class="n">bits</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">bits</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="mi">31</span> <span class="o">-</span> <span class="n">i</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">m</span> <span class="o">=</span> <span class="n">bits</span><span class="p">.</span><span class="n">to_ulong</span><span class="p">();</span>
        <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">oss</span><span class="p">;</span>
        <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="n">u</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;.&#39;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="n">u</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;.&#39;</span> <span class="o">&lt;&lt;</span> <span class="p">((</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="n">u</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;.&#39;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">m</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="n">u</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">oss</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="p">[])</span>
<span class="p">{</span>
    <span class="n">assert</span> <span class="p">(</span><span class="n">mask2bits</span><span class="p">(</span><span class="s">&quot;255.255.255.0&quot;</span><span class="p">)</span>   <span class="o">==</span> <span class="mi">24</span><span class="p">);</span>
    <span class="n">assert</span> <span class="p">(</span><span class="n">mask2bits</span><span class="p">(</span><span class="s">&quot;255.255.255.128&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">25</span><span class="p">);</span>
    <span class="n">assert</span> <span class="p">(</span><span class="n">mask2bits</span><span class="p">(</span><span class="s">&quot;255.255.255.255&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">32</span><span class="p">);</span>
    <span class="n">assert</span> <span class="p">(</span><span class="n">bits2mask</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span> <span class="o">==</span> <span class="s">&quot;255.255.255.0&quot;</span><span class="p">);</span>
    <span class="n">assert</span> <span class="p">(</span><span class="n">bits2mask</span><span class="p">(</span><span class="mi">25</span><span class="p">)</span> <span class="o">==</span> <span class="s">&quot;255.255.255.128&quot;</span><span class="p">);</span>
    <span class="n">assert</span> <span class="p">(</span><span class="n">bits2mask</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span> <span class="o">==</span> <span class="s">&quot;255.255.255.255&quot;</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9117/addtag/" class="addtag" id="addtag_9117">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9117/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9117/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9117"
  >-</span><span
  class="button yellow"
  id="rating_z_9117"
  >0</span><span 
  class="button green"
  id="rating_p_9117"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9117/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9393">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/913/" target="_top">nattou_curry</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9393/">#9393</a>(<script language="JavaScript">print_time(new Date("2009/07/19 11:16 GMT"));</script><noscript>2009/07/19 11:16 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Javaでシンプルに。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135</pre></td><td class="code"><div class="highlight"><pre><span class="k">public</span> <span class="k">class</span> <span class="nc">SubnetMask</span> <span class="o">{</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">getMaskLength</span><span class="o">(</span> <span class="s">&quot;255.255.255.0&quot;</span> <span class="o">)</span> <span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">getMaskLength</span><span class="o">(</span> <span class="s">&quot;255.255.255.128&quot;</span> <span class="o">)</span> <span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">getMaskLength</span><span class="o">(</span> <span class="s">&quot;255.255.255.255&quot;</span> <span class="o">)</span> <span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">getMask</span><span class="o">(</span> <span class="mi">24</span> <span class="o">)</span> <span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">getMask</span><span class="o">(</span> <span class="mi">25</span> <span class="o">)</span> <span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">getMask</span><span class="o">(</span> <span class="mi">32</span> <span class="o">)</span> <span class="o">);</span>
    <span class="o">}</span>
        
    <span class="c">// サブネットマスクの長さを求める。</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">getMaskLength</span><span class="o">(</span> <span class="n">String</span> <span class="n">subnetMask</span> <span class="o">)</span> <span class="o">{</span>
        
        <span class="c">/////////////////////////////////////////////////////////////</span>
        <span class="c">// サブネットマスクの妥当性確認</span>
        <span class="c">/////////////////////////////////////////////////////////////</span>

        <span class="c">// サブネットマスクが「数値.数値.数値.数値」の形式であることを確認する。</span>
        <span class="k">if</span> <span class="o">(</span> <span class="o">!</span> <span class="n">subnetMask</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span> <span class="s">&quot;[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+&quot;</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span> <span class="s">&quot;指定されたサブネットマスクが不正です。&quot;</span> <span class="o">);</span>
        <span class="o">}</span>

        <span class="c">// サブネットマスクの数値が以下の順に並んでいることを確認する。</span>
        <span class="c">// 1. 255が0個以上</span>
        <span class="c">// 2. 254と252と248と240と224と192と128のいずれかが0個か1個</span>
        <span class="c">// 3. 0が0個以上」</span>
        <span class="n">String</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">subnetMask</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span> <span class="o">!</span> <span class="n">temp</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span> <span class="s">&quot;(255\\.)*((254|252|248|240|224|192|128)\\.)?(0\\.)*&quot;</span> <span class="o">)</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span> <span class="s">&quot;指定されたサブネットマスクが不正です。&quot;</span> <span class="o">);</span>
        <span class="o">}</span>

        <span class="c">/////////////////////////////////////////////////////////////</span>
        <span class="c">// サブネットマスクを長さに変換</span>
        <span class="c">/////////////////////////////////////////////////////////////</span>

        <span class="c">// サブネットマスクを4つの数値に分割する。</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">partsStr</span> <span class="o">=</span> <span class="n">subnetMask</span><span class="o">.</span><span class="na">split</span><span class="o">(</span> <span class="s">&quot;\\.&quot;</span> <span class="o">);</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">parts</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span> <span class="n">partsStr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">);</span>
        <span class="o">}</span>
            
        <span class="c">// 各数値のビット数を求め、ビット数を合計して長さを求める。</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">switch</span> <span class="o">(</span> <span class="n">parts</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">)</span> <span class="o">{</span>
                <span class="k">case</span> <span class="mi">255</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">8</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">254</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">7</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">252</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">6</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">248</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">5</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">240</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">4</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">224</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">3</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">192</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">2</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">128</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="mi">0</span><span class="o">:</span>
                    <span class="n">result</span> <span class="o">+=</span> <span class="mi">0</span><span class="o">;</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
            
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c">// 長さからサブネットマスクを求める。</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">String</span> <span class="n">getMask</span><span class="o">(</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">length</span> <span class="o">)</span> <span class="o">{</span>
        
        <span class="c">/////////////////////////////////////////////////////////////</span>
        <span class="c">// 長さの妥当性確認</span>
        <span class="c">/////////////////////////////////////////////////////////////</span>
        
        <span class="k">if</span> <span class="o">(</span> <span class="n">length</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="mi">32</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span> <span class="s">&quot;指定された長さが不正です。&quot;</span> <span class="o">);</span>
        <span class="o">}</span>

        <span class="c">/////////////////////////////////////////////////////////////</span>
        <span class="c">// 長さをサブネットマスクに変換</span>
        <span class="c">/////////////////////////////////////////////////////////////</span>
        
        <span class="c">// サブネットマスクの4つ数値</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span> <span class="o">};</span>
        
        <span class="c">// 4つ数値のうち、先頭から「長さを8で割った商」個の数値を255にする。</span>
        <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="n">length</span> <span class="o">/</span> <span class="mi">8</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">q</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">parts</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="mi">255</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="c">// 「長さを8で割った余り」がある場合、</span>
        <span class="c">// 4つの数値のうち、先頭から「長さを8で割った商 + 1」番目の数値を、「余り」から求める。</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">length</span> <span class="o">%</span> <span class="mi">8</span><span class="o">;</span>
        <span class="k">switch</span> <span class="o">(</span> <span class="n">r</span> <span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="mi">7</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">254</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">252</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">248</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">240</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">224</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">192</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
                <span class="n">parts</span><span class="o">[</span><span class="n">q</span><span class="o">]</span> <span class="o">=</span> <span class="mi">128</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="c">// 4つの数値を連結して、サブネットマスクを作成する。</span>
        <span class="k">return</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">parts</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;.&quot;</span> <span class="o">+</span> <span class="n">parts</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9393/addtag/" class="addtag" id="addtag_9393">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9393/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9393/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9393"
  >-</span><span
  class="button yellow"
  id="rating_z_9393"
  >0</span><span 
  class="button green"
  id="rating_p_9393"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9393/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9120">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9120/">#9120</a>(<script language="JavaScript">print_time(new Date("2009/06/11 11:15 GMT"));</script><noscript>2009/06/11 11:15 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre>| maskStrToBits |
maskStrToBits := [:maskStr |
    ((maskStr subStrings: &#39;.&#39;) collect: [:each | each asInteger radix: 2]) 
        concatenation occurrencesOf: $1].

maskStrToBits value: &#39;255.255.255.0&#39;.     &quot;=&gt; 24 &quot;
maskStrToBits value: &#39;255.255.255.128&#39;.   &quot;=&gt; 25 &quot;
maskStrToBits value: &#39;255.255.255.255&#39;.   &quot;=&gt; 32 &quot;


| bitsToMaskStr |
bitsToMaskStr := [:int |
    String streamContents: [:ss |
        (((String new: int withAll: $1) forceTo: 32 paddingWith: $0)
                groupsOf: 8 atATimeCollect: [:each | (&#39;2r&#39;, each) asNumber printString])
            do: [:each | ss nextPutAll: each] separatedBy: [ss nextPut: $.]]].

bitsToMaskStr value: 24.   &quot;=&gt; &#39;255.255.255.0&#39; &quot;
bitsToMaskStr value: 25.   &quot;=&gt; &#39;255.255.255.128&#39; &quot;
bitsToMaskStr value: 32.   &quot;=&gt; &#39;255.255.255.255&#39; &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9120/addtag/" class="addtag" id="addtag_9120">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9120/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9120/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9120"
  >-</span><span
  class="button yellow"
  id="rating_z_9120"
  >0</span><span 
  class="button green"
  id="rating_p_9120"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9120/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9122">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1025/" target="_top">tanakahisateru</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9122/">#9122</a>(<script language="JavaScript">print_time(new Date("2009/06/11 11:18 GMT"));</script><noscript>2009/06/11 11:18 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>すみません、昨日無駄にNativeintを使ったあげく、末尾再帰最適化されないコードを書いてしまいました。同じアルゴリズムをより正しく実装したものがこっちです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="k">#</span><span class="n">load</span> <span class="s2">&quot;str.cma&quot;</span>

<span class="kr">let</span> <span class="n">print_string_nl</span> <span class="n">v</span> <span class="k">=</span> <span class="n">print_string</span> <span class="k">(</span><span class="n">v</span> <span class="o">^</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="k">)</span>
<span class="kr">let</span> <span class="n">print_int_nl</span> <span class="n">v</span> <span class="k">=</span> <span class="n">print_string_nl</span> <span class="k">(</span><span class="n">string_of_int</span> <span class="n">v</span><span class="k">)</span>

<span class="kr">let</span> <span class="n">netmask_num_of</span> <span class="n">addr</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">onbits_of</span> <span class="n">byte</span> <span class="k">=</span> 
        <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">ptr</span> <span class="n">v</span> <span class="k">=</span>
            <span class="kr">if</span> <span class="n">ptr</span> <span class="k">&lt;</span> <span class="mi">0</span> <span class="k">||</span> <span class="n">byte</span> <span class="kr">land</span> <span class="k">(</span><span class="mi">1</span> <span class="kr">lsl</span> <span class="n">ptr</span><span class="k">)</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">v</span>
            <span class="kr">else</span> <span class="n">loop</span> <span class="k">(</span><span class="n">ptr</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">v</span> <span class="k">+</span> <span class="mi">1</span><span class="k">)</span>
        <span class="kr">in</span> <span class="n">loop</span> <span class="mi">7</span> <span class="mi">0</span>
    <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">addrs</span> <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">map</span> <span class="n">int_of_string</span> <span class="k">(</span><span class="n">Str</span><span class="k">.</span><span class="n">split</span> <span class="k">(</span><span class="n">Str</span><span class="k">.</span><span class="n">regexp</span> <span class="s2">&quot;</span><span class="err">\\</span><span class="s2">.&quot;</span><span class="k">)</span> <span class="n">addr</span><span class="k">)</span> <span class="kr">in</span>
    <span class="n">List</span><span class="k">.</span><span class="n">fold_left</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="k">-&gt;</span> <span class="n">a</span> <span class="k">+</span> <span class="k">(</span><span class="n">onbits_of</span> <span class="n">b</span><span class="k">))</span> <span class="mi">0</span> <span class="n">addrs</span> 
<span class="k">;;</span>
<span class="n">print_int_nl</span> <span class="k">(</span><span class="n">netmask_num_of</span> <span class="s2">&quot;255.255.255.0&quot;</span><span class="k">);;</span>
<span class="n">print_int_nl</span> <span class="k">(</span><span class="n">netmask_num_of</span> <span class="s2">&quot;255.255.255.128&quot;</span><span class="k">);;</span>
<span class="n">print_int_nl</span> <span class="k">(</span><span class="n">netmask_num_of</span> <span class="s2">&quot;255.255.255.255&quot;</span><span class="k">);;</span>

<span class="kr">let</span> <span class="n">netmask_str_of</span> <span class="n">num</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">byteloop</span> <span class="n">num</span> <span class="n">n</span> <span class="n">v</span> <span class="k">=</span>
        <span class="kr">if</span> <span class="n">n</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">v</span>
        <span class="kr">else</span>
            <span class="kr">let</span> <span class="kr">rec</span> <span class="n">bitloop</span> <span class="n">num</span> <span class="n">b</span> <span class="n">v</span> <span class="k">=</span>
                <span class="kr">if</span> <span class="n">num</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">or</span> <span class="n">b</span> <span class="k">&lt;</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">v</span>
                <span class="kr">else</span> <span class="n">bitloop</span> <span class="k">(</span><span class="n">num</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">b</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">((</span><span class="mi">1</span> <span class="kr">lsl</span> <span class="n">b</span><span class="k">)</span> <span class="kr">lor</span> <span class="n">v</span><span class="k">)</span>
            <span class="kr">in</span> <span class="n">byteloop</span> <span class="k">(</span><span class="n">num</span> <span class="k">-</span> <span class="mi">8</span><span class="k">)</span> <span class="k">(</span><span class="n">n</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">v</span> <span class="o">@</span> <span class="k">[</span><span class="n">string_of_int</span> <span class="k">(</span><span class="n">bitloop</span> <span class="n">num</span> <span class="mi">7</span> <span class="mi">0</span><span class="k">)])</span>
    <span class="kr">in</span> <span class="n">String</span><span class="k">.</span><span class="n">concat</span> <span class="s2">&quot;.&quot;</span> <span class="k">(</span><span class="n">byteloop</span> <span class="n">num</span> <span class="mi">4</span> <span class="k">[])</span>
<span class="k">;;</span>
<span class="n">print_string_nl</span> <span class="k">(</span><span class="n">netmask_str_of</span> <span class="mi">24</span><span class="k">);;</span>
<span class="n">print_string_nl</span> <span class="k">(</span><span class="n">netmask_str_of</span> <span class="mi">25</span><span class="k">);;</span>
<span class="n">print_string_nl</span> <span class="k">(</span><span class="n">netmask_str_of</span> <span class="mi">32</span><span class="k">);;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9122/addtag/" class="addtag" id="addtag_9122">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9122/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9122/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9122"
  >-</span><span
  class="button yellow"
  id="rating_z_9122"
  >0</span><span 
  class="button green"
  id="rating_p_9122"
  >+</span></span></span>
  


<p>

  
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9102/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110320070546/http://ja.doukaku.org/comment/9122/root/"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9122/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9086">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/501/" target="_top">tamanecoplus</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9086/">#9086</a>(<script language="JavaScript">print_time(new Date("2009/06/10 08:13 GMT"));</script><noscript>2009/06/10 08:13 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>C言語で。
netmask_to_prefix() : ネットマスク -&gt; 数値
prefix_to_netmask() : 数値 -&gt; ネットマスク
エラーの場合は-1を返却。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="nf">netmask_to_prefix</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">l</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">b1</span><span class="p">,</span> <span class="n">b2</span><span class="p">,</span> <span class="n">b3</span><span class="p">,</span> <span class="n">b4</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="n">sscanf</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;%d.%d.%d.%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b1</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b4</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">b1</span> <span class="o">|</span> <span class="n">b2</span> <span class="o">|</span> <span class="n">b3</span> <span class="o">|</span> <span class="n">b4</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span> <span class="o">=</span> <span class="p">(</span><span class="n">b1</span> <span class="o">&lt;&lt;</span> <span class="mi">24</span> <span class="o">|</span> <span class="n">b2</span> <span class="o">&lt;&lt;</span> <span class="mi">16</span> <span class="o">|</span> <span class="n">b3</span> <span class="o">&lt;&lt;</span> <span class="mi">8</span> <span class="o">|</span> <span class="n">b4</span><span class="p">)</span> <span class="o">^</span> <span class="mh">0xffffffff</span><span class="n">UL</span><span class="p">;</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">l</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">n</span><span class="o">--</span><span class="p">;</span>
      <span class="n">l</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">l</span> <span class="o">?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="n">n</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">prefix_to_netmask</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">l</span><span class="p">;</span>

  <span class="k">if</span> <span class="p">(</span><span class="mi">0</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">32</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">l</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1L</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="n">n</span><span class="p">);</span>
    <span class="n">sprintf</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&quot;%d.%d.%d.%d&quot;</span><span class="p">,</span>
      <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="mi">24</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">l</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">),</span> <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">l</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">));</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
  <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;netmask? &quot;</span><span class="p">);</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result: %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">netmask_to_prefix</span><span class="p">(</span><span class="n">s</span><span class="p">));</span>

  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;prefix? &quot;</span><span class="p">);</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">prefix_to_netmask</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9086/addtag/" class="addtag" id="addtag_9086">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9086/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9086/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9086"
  >-</span><span
  class="button yellow"
  id="rating_z_9086"
  >0</span><span 
  class="button green"
  id="rating_p_9086"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9086/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9104">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/793/" target="_top">genzou</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9104/">#9104</a>(<script language="JavaScript">print_time(new Date("2009/06/10 15:34 GMT"));</script><noscript>2009/06/10 15:34 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ちょっと汚いかな・・・</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre>def toMask(ip){
    ip.split(/\./).collect{
        Integer.toBinaryString(it.toInteger())
    }*.count(&quot;1&quot;).sum()
}

assert toMask(&quot;255.255.255.0&quot;) == 24
assert toMask(&quot;255.255.255.128&quot;) == 25
assert toMask(&quot;255.255.255.255&quot;) == 32
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9104/addtag/" class="addtag" id="addtag_9104">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9104/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9104/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9104"
  >-</span><span
  class="button yellow"
  id="rating_z_9104"
  >0</span><span 
  class="button green"
  id="rating_p_9104"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9104/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9110">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/755/" target="_top">athos</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9110/">#9110</a>(<script language="JavaScript">print_time(new Date("2009/06/10 21:17 GMT"));</script><noscript>2009/06/10 21:17 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">list</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">mask-&gt;nbits</span> <span class="nv">mask</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">count</span> <span class="p">(</span><span class="nf">cut</span> <span class="nv">eqv?</span> <span class="o">#</span><span class="err">¥</span><span class="mi">1</span> <span class="nv">&lt;&gt;</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">append-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-&gt;list </span><span class="p">(</span><span class="nf">format</span> <span class="s">&quot;~b&quot;</span> <span class="p">(</span><span class="nb">string-&gt;number </span><span class="nv">n</span><span class="p">))))</span>
                     <span class="p">(</span><span class="nf">string-split</span> <span class="nv">mask</span> <span class="o">#</span><span class="err">¥</span><span class="o">.</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">nbits-&gt;mask</span> <span class="nv">nbits</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">string-join</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">bits</span><span class="p">)</span> <span class="o">#`</span><span class="s">&quot;,(string-&gt;number (list-&gt;string bits) 2)&quot;</span><span class="p">)</span>
                    <span class="p">(</span><span class="nf">slices</span> <span class="p">(</span><span class="nf">take*</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">nbits</span> <span class="o">#</span><span class="err">¥</span><span class="mi">1</span><span class="p">)</span> <span class="mi">32</span> <span class="no">#t</span> <span class="o">#</span><span class="err">¥</span><span class="mi">0</span><span class="p">)</span> <span class="mi">8</span><span class="p">))</span>
               <span class="s">&quot;.&quot;</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9110/addtag/" class="addtag" id="addtag_9110">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9110/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9110/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9110"
  >-</span><span
  class="button yellow"
  id="rating_z_9110"
  >0</span><span 
  class="button green"
  id="rating_p_9110"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9110/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9111">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/588/" target="_top">sekia</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9111/">#9111</a>(<script language="JavaScript">print_time(new Date("2009/06/11 03:06 GMT"));</script><noscript>2009/06/11 03:06 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>やった、処理が80文字に収まった！</p>
<p>oct()が2進数文字列を変換できるのはあまり知られていない気がします。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="nn">List::</span><span class="n">Util</span> <span class="n">qw</span><span class="sr">/sum/</span><span class="p">;</span>
<span class="k">sub </span><span class="nf">mask2bits</span><span class="p">($)</span> <span class="p">{</span>
  <span class="n">sum</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="nb">sprintf</span> <span class="s">&#39;%b&#39;</span><span class="p">,</span> <span class="nv">$_</span> <span class="p">}</span> <span class="nb">split</span> <span class="sr">/\./</span><span class="p">,</span> <span class="nb">shift</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">sub </span><span class="nf">bits2mask</span><span class="p">($)</span> <span class="p">{</span>
  <span class="nb">join</span> <span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="nb">map</span> <span class="p">{</span> <span class="nb">oct</span> <span class="s">&quot;0b$_&quot;</span> <span class="p">}</span> <span class="p">(</span><span class="mi">1</span> <span class="n">x</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">.</span> <span class="mi">0</span> <span class="n">x</span> <span class="p">(</span><span class="mi">32</span> <span class="o">-</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">=~</span><span class="sr"> /\d{8}/g</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9111/addtag/" class="addtag" id="addtag_9111">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9111/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9111/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9111"
  >-</span><span
  class="button yellow"
  id="rating_z_9111"
  >0</span><span 
  class="button green"
  id="rating_p_9111"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9111/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9113">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1064/" target="_top">yamamoto</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9113/">#9113</a>(<script language="JavaScript">print_time(new Date("2009/06/11 04:38 GMT"));</script><noscript>2009/06/11 04:38 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>とりあえず、InetAddressを使いました。例外処理があるので効率は・・・・</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60</pre></td><td class="code"><div class="highlight"><pre>import java.net._

object IPNetMask {
  val ipMask2NumBits = Map(
       (256-  1) -&gt; 8 ,
       (256-  2) -&gt; 7 ,
       (256-  4) -&gt; 6 ,
       (256-  8) -&gt; 5 ,
       (256- 16) -&gt; 4 ,
       (256- 32) -&gt; 3 ,
       (256- 64) -&gt; 2 ,
       (256-128) -&gt; 1 ,
               0 -&gt; 0 )
  var ipNumBits2Mask = Map[Int,Int]()
  for( (k,v)&lt;-ipMask2NumBits ) ipNumBits2Mask += v-&gt;k
  
  def main(args : Array[String]) : Unit = {
    //ipMask2NumBits.foreach(println _)
    //ipNumBits2Mask.foreach(println _)
    
    for{ arg &lt;-args
         ip  =InetAddress.getByName(arg) }{
      ip2numbits(ip) match {
        case Some(n) =&gt;
          println(ip+&quot; : &quot; +n+&quot;bits&quot;)
          println(&quot;reverse : &quot;+numbits2ip(n))
        case None =&gt; println(&quot;error&quot;)
      }
    }
    
    ()
  }
  def ip2numbits(ip:InetAddress) : Option[Int] = {
    val rawIP = ip.getAddress.map(0x0FF &amp; _)
    try{
      rawIP match{
        case Seq(255,255,255,a) =&gt; return Some( 24 + ipMask2NumBits(a) )
        case Seq(255,255,  a,0) =&gt; return Some( 16 + ipMask2NumBits(a) )
        case Seq(255,  a,  0,0) =&gt; return Some(  8 + ipMask2NumBits(a))
        case _ =&gt; return None
      }
    }catch{
      case _ =&gt; return None
    }
    None
  }
  
  def numbits2ip(numbits:Int) : Option[InetAddress]={
    try{
      numbits match {
        case n if (n &gt;= 24) =&gt; return Some(InetAddress.getByName( ipNumBits2Mask(n-24).formatted(&quot;255.255.255.%d&quot;)))
        case n if (n &gt;= 16) =&gt; return Some(InetAddress.getByName( ipNumBits2Mask(n-16).formatted(&quot;255.255.%d.0&quot;)))
        case n if (n &gt;=  8) =&gt; return Some(InetAddress.getByName( ipNumBits2Mask(n- 8).formatted(&quot;255.%d.0.0&quot;)))
      }
    }catch{
      case _ =&gt; return None
    }
    None
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9113/addtag/" class="addtag" id="addtag_9113">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9113/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9113/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9113"
  >-</span><span
  class="button yellow"
  id="rating_z_9113"
  >0</span><span 
  class="button green"
  id="rating_p_9113"
  >+</span></span></span>
  


<p>

  

  <a href="/web/20110320070546/http://ja.doukaku.org/comment/9113/">
    1
    reply
  </a>

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9113/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9453">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/959/" target="_top">uehaj</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9453/">#9453</a>(<script language="JavaScript">print_time(new Date("2009/08/07 18:14 GMT"));</script><noscript>2009/08/07 18:14 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>人のを見ないで作ってみた。ドキドキ。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre>def netMask(addr) {
  Long.toString(addr.split(/\./).inject(0) {a,b-&gt;a*256+(b as long)},2).chars.grep{it==&#39;1&#39;}.size()
}

assert netMask(&quot;255.255.255.0&quot;)==24
assert netMask(&quot;255.255.255.128&quot;)==25
assert netMask(&quot;255.255.255.255&quot;)==32
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9453/addtag/" class="addtag" id="addtag_9453">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9453/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9453/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9453"
  >-</span><span
  class="button yellow"
  id="rating_z_9453"
  >0</span><span 
  class="button green"
  id="rating_p_9453"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9453/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9370">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/994/" target="_top">creeper</a><a href="/web/20110320070546/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9370/">#9370</a>(<script language="JavaScript">print_time(new Date("2009/07/15 08:59 GMT"));</script><noscript>2009/07/15 08:59 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>Squirrel3.0で。
bits2mask()のbits=0の時が美しくない・・・
(1&lt;&lt;32が1になってしまう。64bitなら無視できるかも)
結果：
        0.0.0.0 =&gt;  0
      128.0.0.0 =&gt;  1
  255.255.255.0 =&gt; 24
255.255.255.128 =&gt; 25
255.255.255.255 =&gt; 32
 0 =&gt;         0.0.0.0
 1 =&gt;       128.0.0.0
 8 =&gt;       255.0.0.0
32 =&gt; 255.255.255.255</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre>function mask2bits(mask)
{
    local addr = split(mask, &quot;.&quot;).reduce(@(a,b) (a.tointeger()&lt;&lt;8) + b.tointeger());
    for(local i=32; addr; i--, addr=addr&gt;&gt;1) if (addr&amp;1) return i;
    return 0;
}
function bits2mask(bits)
{
    local addr = bits ? -(1&lt;&lt;(32-bits)) : 0;
    return format(&quot;%d.%d.%d.%d&quot;, addr&gt;&gt;24&amp;0xFF, addr&gt;&gt;16&amp;0xFF, addr&gt;&gt;8&amp;0xFF, addr&gt;&gt;0&amp;0xFF);
}

function test_mask2bits(mask)
{
    print(format(&quot;%15s =&gt; %2d\n&quot;, mask, mask2bits(mask)));
}
function test_bits2mask(bits)
{
    print(format(&quot;%2d =&gt; %15s\n&quot;, bits, bits2mask(bits)));
}

test_mask2bits(&quot;0.0.0.0&quot;);
test_mask2bits(&quot;128.0.0.0&quot;);
test_mask2bits(&quot;255.255.255.0&quot;);
test_mask2bits(&quot;255.255.255.128&quot;);
test_mask2bits(&quot;255.255.255.255&quot;);

test_bits2mask(0);
test_bits2mask(1);
test_bits2mask(8);
test_bits2mask(32);
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9370/addtag/" class="addtag" id="addtag_9370">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9370/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9370/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9370"
  >-</span><span
  class="button yellow"
  id="rating_z_9370"
  >0</span><span 
  class="button green"
  id="rating_p_9370"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9370/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9116">
  <p class="banner"><a href="/web/20110320070546/http://ja.doukaku.org/user/1056/" target="_top">tkturbo</a>

	
	&nbsp;
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9116/">#9116</a>(<script language="JavaScript">print_time(new Date("2009/06/11 08:09 GMT"));</script><noscript>2009/06/11 08:09 GMT</noscript>)
	
	
	
	[<a href="/web/20110320070546/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>「ipaddr2mask」でアドレス→数値変換。
「mask2ipaddr」で数値→アドレス変換。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">format</span><span class="p">(</span><span class="nx">num</span><span class="o">,</span> <span class="nx">dec1</span><span class="o">,</span> <span class="nx">dec2</span><span class="o">,</span> <span class="nx">minlen</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">num1</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Number</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">num</span><span class="o">,</span> <span class="nx">dec1</span><span class="p">)).</span><span class="nx">toString</span><span class="p">(</span><span class="nx">dec2</span><span class="p">);;</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">num1</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">minlen</span><span class="p">)</span> <span class="nx">num1</span> <span class="o">=</span> <span class="s2">&quot;0&quot;</span> <span class="o">+</span> <span class="nx">num1</span><span class="o">;</span>
    <span class="k">return</span> <span class="nx">num1</span><span class="o">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">ipaddr2mask</span><span class="p">(</span><span class="nx">ipaddr</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">ad</span> <span class="o">=</span> <span class="nx">ipaddr</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">);</span>
    <span class="k">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">ad</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">str</span> <span class="o">+=</span> <span class="nx">format</span><span class="p">(</span><span class="nx">ad</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">8</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">;</span> <span class="nx">i</span><span class="o">--</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">){</span><span class="k">return</span> <span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span><span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">mask2ipaddr</span><span class="p">(</span><span class="nx">mask</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">m1</span> <span class="o">=</span> <span class="nx">format</span><span class="p">(</span><span class="nx">mask</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="p">){</span> <span class="nx">str</span><span class="o">+=</span> <span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">m1</span><span class="p">)</span> <span class="o">?</span> <span class="s2">&quot;1&quot;</span> <span class="o">:</span> <span class="s2">&quot;0&quot;</span><span class="o">;</span> <span class="p">}</span>
    <span class="k">var</span> <span class="nx">ipaddr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">){</span> <span class="nx">ipaddr</span><span class="o">+=</span><span class="s2">&quot;.&quot;</span><span class="o">;</span> <span class="p">}</span>
        <span class="nx">ipaddr</span><span class="o">+=</span><span class="nx">format</span><span class="p">(</span><span class="nx">str</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="mi">8</span><span class="o">,</span> <span class="mi">8</span><span class="p">)</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span><span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">ipaddr</span><span class="o">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110320070546/http://ja.doukaku.org/comment/9116/addtag/" class="addtag" id="addtag_9116">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110320070546/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9116/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110320070546/http://ja.doukaku.org/comment/9116/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9116"
  >-</span><span
  class="button yellow"
  id="rating_z_9116"
  >0</span><span 
  class="button green"
  id="rating_p_9116"
  >+</span></span></span>
  


<p>

  

  

  [<a href="/web/20110320070546/http://ja.doukaku.org/253/reply_to/9116/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20110320070546if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<li><a href="/web/20110320070546/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20110320070546/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20110320070546/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20110320070546/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20110320070546/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20110320070546/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20110320070546/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20110320070546/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20110320070546im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>

<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20110320070546/http://ja.doukaku.org/qa/">Q&amp;A</a>
<li><a href="/web/20110320070546/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20110320070546/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20110320070546/http://www.djangoproject.com/">Django</a>
</ul>


</div>
</div>


<div id="page_foot" class="bordered">
<a rel="license" href="/web/20110320070546/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20110320070546im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20110320070546/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20110320070546/http://ja.doukaku.org/qa/#licence">[詳細]</a>
</div>

</body>



<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20110320070546/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20110320070546js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>



</html>





<!--
     FILE ARCHIVED ON 7:05:46 Mar 20, 2011 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:40:59 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
