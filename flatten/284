
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
化学反応式の完成
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100712040237cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100712040237cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100712040237cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20100712040237/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100712040237/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100712040237js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100712040237js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100712040237js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100712040237js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app2.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/284\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "12";
var displayMonth = "Jul";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/284/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100712040237" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100506065203/http://ja.doukaku.org/284/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="6 May 2010"><strong>MAY</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 4:02:37 Jul 12, 2010">JUL</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Aug
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20100506065203/http://ja.doukaku.org/284/flatten/" title="6:52:03 May 6, 2010" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 4:02:37 Jul 12, 2010">12</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 4:02:37 Jul 12, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100712040237*/http://ja.doukaku.org/284/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>4 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">4 Sep 09 - 12 Jul 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000001001_2010:6:000010100000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100712040237/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100712040237/http://ja.doukaku.org/284/">化学反応式の完成</a>
</h2>

    





<div class="comment" id="comment9513">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/100/" target="_top">konn</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9513/">#9513</a>(<script language="JavaScript">print_time(new Date("2009/08/25 01:52 GMT"));</script><noscript>2009/08/25 01:52 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffcf;">1/3=0.33</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>整数の係数を持つ化学反応式を完成してください。反応前の物質と反応後の物質は与えられる物とします。例えば、</p>
<p>(前) Mg, O <sub>2</sub> (後) Mg O</p>
<p>(答) 2Mg + O <sub>2</sub> -&gt; 2MgO</p>
<p>(前) C <sub>2</sub>, H <sub>2</sub>, O <sub>2</sub> (後) CO <sub>2</sub> , H <sub>2</sub> O</p>
<p>(答) 2C <sub>2</sub> H <sub>2</sub> + 5O <sub>2</sub> -&gt; 4CO <sub>2</sub> + 2H <sub>2</sub> O</p>
<p>こんな感じです。以前anarchy golf に出題させて貰ったんですが、埋め込み解で解かれてしまったので、今回は埋め込み解はなし、と云うことでおねがいします。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9513/addtag/" class="addtag" id="addtag_9513">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffcf;"
  >1/3=0.33</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9513"
  >-</span><span
  class="button yellow"
  id="rating_z_9513"
  >0</span><span 
  class="button green"
  id="rating_p_9513"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9513/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100712040237/http://ja.doukaku.org/284/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20100712040237/http://ja.doukaku.org/284/nested/">ネスト表示</a>
<a href="/web/20100712040237/http://ja.doukaku.org/284/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment9530">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/759/" target="_top">egtra</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9530/">#9530</a>(<script language="JavaScript">print_time(new Date("2009/08/28 22:35 GMT"));</script><noscript>2009/08/28 22:35 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
<p>次のような考え方で解きました。
</p>
<ol>
 <li>
     両辺に現れる各元素eについて以下の手順を行う。<ol>
 <li>
     eについて各辺それぞれに出現する個数tl, trを求め、さらにalとarの最小公倍数lcmを求める。
 </li>

 <li>
     lcm / tlを左辺の、lcm / trを右辺の係数rとする。
 </li>

 <li>
     eを持つ分子mについて以下の手順を行う（これをf(e, r)とする）。<ol>
 <li>
     係数rを掛ける。
 </li>

 <li>
     各mのうち、e以外に計算済みの元素gがある場合、f(g, r / gの個数)を行う。
 </li>
</ol>

 </li>
</ol>

 </li>

 <li>
     適当な値を掛けて各項を整数にする。
 </li>
</ol>
<p>いやはや、C++のラムダ式の中でラムダ式を使ったときに、外側の外側のローカル変数を束縛できないという制限が意味不明です。f2やbr3などといった一時変数を作れば回避できるのですが、こんな回避策を使わずに済む仕様にしてほしいです。
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;stdexcept&gt;</span>
<span class="cp">#include &lt;numeric&gt;</span>
<span class="cp">#include &lt;boost/math/common_factor.hpp&gt;</span>
<span class="cp">#include &lt;boost/assign.hpp&gt;</span>
<span class="cp">#include &lt;boost/rational.hpp&gt;</span>
<span class="cp">#include &lt;boost/implicit_cast.hpp&gt;</span>

<span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">implicit_cast</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">element_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">element_t</span><span class="p">,</span> <span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">molecule_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;&gt;</span> <span class="n">result_t</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">element_t</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="p">,</span> <span class="kt">unsigned</span><span class="o">&gt;&gt;</span> <span class="n">molecule_total_t</span><span class="p">;</span>

<span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">getTotalElementNum</span><span class="p">(</span><span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">,</span> <span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">u</span><span class="p">,</span> <span class="n">result_t</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span>
    <span class="p">{</span>
        <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">u</span> <span class="o">+</span> <span class="p">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">t</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">()</span>
            <span class="o">?</span> <span class="mi">0</span>
            <span class="o">:</span> <span class="n">t</span><span class="p">.</span><span class="n">second</span> <span class="o">*</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kr">inline</span> <span class="kt">void</span> <span class="n">printRational</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">denominator</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">numerator</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">end</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">;</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printRational</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">os</span><span class="p">](</span><span class="n">molecule_t</span><span class="o">::</span><span class="n">const_reference</span> <span class="n">m</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">printRational</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>

        <span class="o">++</span><span class="n">it</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; + &quot;</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printResult</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
    <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; → &quot;</span><span class="p">;</span>
    <span class="n">printResult</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">result_t</span><span class="p">,</span> <span class="n">result_t</span><span class="o">&gt;</span> <span class="n">calc</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;</span> <span class="n">before</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;</span> <span class="n">after</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">element_t</span><span class="o">&gt;</span> <span class="n">elementSet</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">before</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">elementSet</span><span class="p">](</span><span class="n">molecule_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">m</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">inserter</span><span class="p">(</span><span class="n">elementSet</span><span class="p">,</span> <span class="n">elementSet</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="p">[](</span><span class="n">molecule_t</span><span class="o">::</span><span class="n">const_reference</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">element_t</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">e</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>
    <span class="n">result_t</span> <span class="n">before_result</span><span class="p">,</span> <span class="n">after_result</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">before</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">inserter</span><span class="p">(</span><span class="n">before_result</span><span class="p">,</span> <span class="n">before_result</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">molecule_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">result_t</span><span class="o">::</span><span class="n">value_type</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">after</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">inserter</span><span class="p">(</span><span class="n">after_result</span><span class="p">,</span> <span class="n">after_result</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">molecule_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">result_t</span><span class="o">::</span><span class="n">value_type</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">elementSet</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">elementSet</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="c">// 1. 両辺に現れる各元素eについて……</span>
    <span class="p">{</span>
        <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="n">before_result</span><span class="p">,</span> <span class="n">after_result</span><span class="p">);</span>

        <span class="n">result_t</span><span class="o">&amp;</span> <span class="n">br</span> <span class="o">=</span> <span class="n">before_result</span><span class="p">,</span> <span class="n">ar</span> <span class="o">=</span> <span class="n">after_result</span><span class="p">;</span>
        <span class="k">auto</span> <span class="n">tl</span> <span class="o">=</span> <span class="n">getTotalElementNum</span><span class="p">(</span><span class="n">before_result</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span> <span class="c">// 1.1. tl, trを求める。</span>
        <span class="k">auto</span> <span class="n">tr</span> <span class="o">=</span> <span class="n">getTotalElementNum</span><span class="p">(</span><span class="n">after_result</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
        <span class="kt">unsigned</span> <span class="k">const</span> <span class="n">lcm</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">lcm</span><span class="p">(</span><span class="n">tl</span><span class="p">.</span><span class="n">numerator</span><span class="p">()</span> <span class="o">*</span> <span class="n">tr</span><span class="p">.</span><span class="n">denominator</span><span class="p">(),</span> <span class="n">tr</span><span class="p">.</span><span class="n">numerator</span><span class="p">()</span> <span class="o">*</span> <span class="n">tl</span><span class="p">.</span><span class="n">denominator</span><span class="p">());</span>
        <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="n">result_t</span><span class="o">&amp;</span> <span class="n">result</span><span class="p">,</span> <span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">rate</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">;</span>
        <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">br</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ar</span><span class="p">](</span><span class="n">result_t</span><span class="o">&amp;</span> <span class="n">result</span><span class="p">,</span> <span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">rate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">rate</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">auto</span><span class="o">&amp;</span> <span class="n">br2</span> <span class="o">=</span> <span class="n">br</span><span class="p">,</span> <span class="n">ar2</span> <span class="o">=</span> <span class="n">ar</span><span class="p">;</span>
                <span class="k">auto</span><span class="o">&amp;</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
                <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">result</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">br2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ar2</span><span class="p">,</span> <span class="n">rate</span><span class="p">](</span><span class="n">result_t</span><span class="o">::</span><span class="n">reference</span> <span class="n">m</span><span class="p">)</span> <span class="c">// 1.3. eを持つ分子mについて……</span>
                <span class="p">{</span>
                    <span class="k">auto</span><span class="o">&amp;</span> <span class="n">br3</span> <span class="o">=</span> <span class="n">br2</span><span class="p">,</span> <span class="n">ar3</span> <span class="o">=</span> <span class="n">ar2</span><span class="p">;</span>
                    <span class="k">auto</span><span class="o">&amp;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">f2</span><span class="p">;</span>
                    <span class="k">auto</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e2</span> <span class="o">=</span> <span class="n">e</span><span class="p">;</span>
                    <span class="k">auto</span> <span class="k">const</span> <span class="n">rate2</span> <span class="o">=</span> <span class="n">rate</span><span class="p">;</span>
                    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="c">// 分子mが元素eを含むなら</span>
                    <span class="p">{</span>
                        <span class="n">m</span><span class="p">.</span><span class="n">second</span> <span class="o">*=</span> <span class="n">rate</span><span class="p">;</span> <span class="c">// 1.3.1. 係数rを掛ける。</span>
                        <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">it</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">br3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ar3</span><span class="p">,</span> <span class="n">rate2</span><span class="p">](</span><span class="n">molecule_t</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">g</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">implicit_cast</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">rate2</span><span class="p">)</span> <span class="o">/</span> <span class="n">g</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
                            <span class="n">f</span><span class="p">(</span><span class="n">br3</span><span class="p">,</span> <span class="n">g</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span> <span class="c">// 1.3.2. 各mのうち、e以外に計算済みの元素gがある場合</span>
                            <span class="n">f</span><span class="p">(</span><span class="n">ar3</span><span class="p">,</span> <span class="n">g</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
                        <span class="p">});</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="n">f</span><span class="p">(</span><span class="n">before_result</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">lcm</span> <span class="o">/</span> <span class="n">tl</span><span class="p">);</span> <span class="c">// 1.2. lcm / tlを左辺の、lcm / trを右辺の係数rとする。</span>
        <span class="n">f</span><span class="p">(</span><span class="n">after_result</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">lcm</span> <span class="o">/</span> <span class="n">tr</span><span class="p">);</span>
    <span class="p">});</span>
    <span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="p">[](</span><span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">unsigned</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">1</span><span class="n">u</span><span class="p">,</span> <span class="p">[](</span><span class="kt">unsigned</span> <span class="n">x</span><span class="p">,</span> <span class="n">result_t</span><span class="o">::</span><span class="n">const_reference</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">unsigned</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">lcm</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">denominator</span><span class="p">());</span>
        <span class="p">});</span>
    <span class="p">};</span>
    <span class="k">auto</span> <span class="n">lcm</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">lcm</span><span class="p">(</span><span class="n">g</span><span class="p">(</span><span class="n">before_result</span><span class="p">),</span> <span class="n">g</span><span class="p">(</span><span class="n">after_result</span><span class="p">));</span>
    <span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="n">lcm</span><span class="p">](</span><span class="n">result_t</span><span class="o">::</span><span class="n">reference</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">r</span><span class="p">.</span><span class="n">second</span> <span class="o">*=</span> <span class="n">lcm</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">before_result</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">before_result</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">f</span><span class="p">);</span> <span class="c">// 2. 各項を整数にする。</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">after_result</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">after_result</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">f</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">before_result</span><span class="p">,</span> <span class="n">after_result</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">assign</span><span class="o">::</span><span class="n">map_list_of</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;</span> <span class="n">m1</span><span class="p">,</span> <span class="n">m2</span><span class="p">;</span>
    <span class="c">//m1.push_back(map_list_of(&quot;Mg&quot;, 1)); // MG</span>
    <span class="c">//m1.push_back(map_list_of(&quot;O&quot;, 2)); // O2</span>
    <span class="c">//m2.push_back(map_list_of(&quot;Mg&quot;, 1)(&quot;O&quot;, 1)); // MgO</span>

    <span class="n">m1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="s">&quot;H&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c">// C2H2</span>
    <span class="n">m1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c">// O2</span>
    <span class="n">m2</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;C&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)(</span><span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c">// CO2</span>
    <span class="n">m2</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;H&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)(</span><span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="c">// H2O</span>

    <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span> <span class="n">m2</span><span class="p">);</span>
    <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9530/addtag/" class="addtag" id="addtag_9530">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/Boost/">Boost</a>
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/C%2B%2B0x/">C++0x</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9530/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9530/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9530"
  >-</span><span
  class="button yellow"
  id="rating_z_9530"
  >0</span><span 
  class="button green"
  id="rating_p_9530"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100712040237/http://ja.doukaku.org/comment/9530/">
    1
    reply
  </a>

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9530/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9532">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/759/" target="_top">egtra</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9532/">#9532</a>(<script language="JavaScript">print_time(new Date("2009/08/29 18:38 GMT"));</script><noscript>2009/08/29 18:38 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>同じ処理をpairのfirstとsecondの両方に行うことが多数ありました。そこで、Boost.Fusionを使いました。Fusionは、tupleのようなもの（std::pairも含まれる）に対してfor_eachなどのアルゴリズムを提供するライブラリです。このコードではむしろ行数増やしているだけですけどね。</p>
<p>なお、係数の計算にバグがあり、それの修正の分、少々アルゴリズムにも手を加えてあります。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;numeric&gt;</span>
<span class="cp">#include &lt;boost/math/common_factor.hpp&gt;</span>
<span class="cp">#include &lt;boost/assign.hpp&gt;</span>
<span class="cp">#include &lt;boost/rational.hpp&gt;</span>
<span class="cp">#include &lt;boost/implicit_cast.hpp&gt;</span>
<span class="cp">#include &lt;boost/fusion/adapted.hpp&gt;</span>
<span class="cp">#include &lt;boost/fusion/algorithm.hpp&gt;</span>
<span class="cp">#include &lt;boost/fusion/view.hpp&gt;</span>
<span class="cp">#include &lt;boost/fusion/container.hpp&gt;</span>
<span class="cp">#include &lt;boost/fusion/sequence.hpp&gt;</span>

<span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">implicit_cast</span><span class="p">;</span>

<span class="k">namespace</span> <span class="n">fusion</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">fusion</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">element_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">element_t</span><span class="p">,</span> <span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">molecule_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;&gt;</span> <span class="n">result_t</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="n">element_t</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="p">,</span> <span class="kt">unsigned</span><span class="o">&gt;&gt;</span> <span class="n">molecule_total_t</span><span class="p">;</span>

<span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">getTotalElementNum</span><span class="p">(</span><span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">,</span> <span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">u</span><span class="p">,</span> <span class="n">result_t</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span>
    <span class="p">{</span>
        <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">u</span> <span class="o">+</span> <span class="p">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">t</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">()</span>
            <span class="o">?</span> <span class="mi">0</span>
            <span class="o">:</span> <span class="n">t</span><span class="p">.</span><span class="n">second</span> <span class="o">*</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>

<span class="kr">inline</span> <span class="kt">void</span> <span class="n">printRational</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">denominator</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">.</span><span class="n">numerator</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">x</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">end</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="p">;</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printRational</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">os</span><span class="p">](</span><span class="n">molecule_t</span><span class="o">::</span><span class="n">const_reference</span> <span class="n">m</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">printRational</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">});</span>

        <span class="o">++</span><span class="n">it</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">==</span> <span class="n">end</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; + &quot;</span><span class="p">;</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">,</span> <span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">printResult</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>
    <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; → &quot;</span><span class="p">;</span>
    <span class="n">printResult</span><span class="p">(</span><span class="n">os</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">U</span><span class="o">&gt;</span>
<span class="n">fusion</span><span class="o">::</span><span class="n">zip_view</span><span class="o">&lt;</span><span class="n">fusion</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">U</span><span class="o">&amp;&gt;&gt;</span> <span class="n">make_zip_view</span><span class="p">(</span><span class="n">T</span><span class="o">&amp;</span> <span class="n">t</span><span class="p">,</span> <span class="n">U</span><span class="o">&amp;</span> <span class="n">u</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">fusion</span><span class="o">::</span><span class="n">zip_view</span><span class="o">&lt;</span><span class="n">fusion</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">U</span><span class="o">&amp;&gt;&gt;</span><span class="p">(</span><span class="n">fusion</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">U</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">u</span><span class="p">));</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">result_t</span><span class="p">,</span> <span class="n">result_t</span><span class="o">&gt;</span> <span class="n">calc</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;&gt;</span> <span class="n">exp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">set</span><span class="o">&lt;</span><span class="n">element_t</span><span class="o">&gt;</span> <span class="n">elementSet</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">exp</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">elementSet</span><span class="p">](</span><span class="n">molecule_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">m</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">m</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">inserter</span><span class="p">(</span><span class="n">elementSet</span><span class="p">,</span> <span class="n">elementSet</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="p">[](</span><span class="n">molecule_t</span><span class="o">::</span><span class="n">const_reference</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">element_t</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">e</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
        <span class="p">});</span>
    <span class="p">});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">result_t</span><span class="p">,</span> <span class="n">result_t</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
    <span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">make_zip_view</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">exp</span><span class="p">),</span> <span class="p">[](</span><span class="n">fusion</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">result_t</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;&amp;&gt;</span> <span class="n">t</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">).</span><span class="n">begin</span><span class="p">(),</span> <span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">).</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">inserter</span><span class="p">(</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">at_c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">).</span><span class="n">end</span><span class="p">()),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">molecule_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">result_t</span><span class="o">::</span><span class="n">value_type</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">elementSet</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">elementSet</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="p">](</span><span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="c">// 1. 両辺に現れる各元素eについて……</span>
    <span class="p">{</span>
        <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="p">;</span>
        <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>

        <span class="k">auto</span> <span class="n">total</span> <span class="o">=</span> <span class="n">fusion</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">getTotalElementNum</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="n">e</span><span class="p">));</span> <span class="c">// 1.1. tl, trを求める。</span>
        <span class="k">auto</span> <span class="n">tl</span> <span class="o">=</span> <span class="o">*</span><span class="n">fusion</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">total</span><span class="p">);</span>
        <span class="k">auto</span> <span class="n">tr</span> <span class="o">=</span> <span class="o">*</span><span class="n">fusion</span><span class="o">::</span><span class="n">next</span><span class="p">(</span><span class="n">fusion</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">total</span><span class="p">));</span>
        <span class="k">auto</span><span class="o">&amp;</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">result</span><span class="p">;</span>
        <span class="kt">unsigned</span> <span class="k">const</span> <span class="n">lcm</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">lcm</span><span class="p">(</span><span class="n">tl</span><span class="p">.</span><span class="n">numerator</span><span class="p">()</span> <span class="o">*</span> <span class="n">tr</span><span class="p">.</span><span class="n">denominator</span><span class="p">(),</span> <span class="n">tr</span><span class="p">.</span><span class="n">numerator</span><span class="p">()</span> <span class="o">*</span> <span class="n">tl</span><span class="p">.</span><span class="n">denominator</span><span class="p">());</span>

        <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="n">result_t</span><span class="o">&amp;</span> <span class="n">result</span><span class="p">,</span> <span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">rate</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">;</span>
        <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r1</span><span class="p">](</span><span class="n">result_t</span><span class="o">&amp;</span> <span class="n">result</span><span class="p">,</span> <span class="n">element_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">rate</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">rate</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">auto</span><span class="o">&amp;</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">r1</span><span class="p">;</span>
                <span class="k">auto</span><span class="o">&amp;</span> <span class="n">f2</span> <span class="o">=</span> <span class="n">f</span><span class="p">;</span>
                <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">result</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r2</span><span class="p">,</span> <span class="n">rate</span><span class="p">](</span><span class="n">result_t</span><span class="o">::</span><span class="n">reference</span> <span class="n">m</span><span class="p">)</span> <span class="c">// 1.3. eを持つ分子mについて……</span>
                <span class="p">{</span>
                    <span class="k">auto</span><span class="o">&amp;</span> <span class="n">r3</span> <span class="o">=</span> <span class="n">r2</span><span class="p">;</span>
                    <span class="k">auto</span><span class="o">&amp;</span> <span class="n">f3</span> <span class="o">=</span> <span class="n">f2</span><span class="p">;</span>
                    <span class="k">auto</span> <span class="k">const</span> <span class="n">rate2</span> <span class="o">=</span> <span class="n">rate</span><span class="p">;</span>
                    <span class="k">auto</span> <span class="n">it</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="c">// 分子mが元素eを含むなら</span>
                    <span class="p">{</span>
                        <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;</span> <span class="n">over</span> <span class="o">=</span> <span class="mi">1</span><span class="n">u</span><span class="p">;</span>
                        <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">it</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f3</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">r3</span><span class="p">,</span> <span class="n">rate2</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">over</span><span class="p">](</span><span class="n">molecule_t</span><span class="o">::</span><span class="n">value_type</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">g</span><span class="p">)</span>
                        <span class="p">{</span>
                            <span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="o">::</span><span class="n">placeholders</span><span class="p">;</span>
                            <span class="k">auto</span><span class="o">&amp;</span> <span class="n">f4</span> <span class="o">=</span> <span class="n">f3</span><span class="p">;</span>
                            <span class="k">auto</span> <span class="n">t</span> <span class="o">=</span> <span class="n">implicit_cast</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="n">rate2</span><span class="p">)</span> <span class="o">/</span> <span class="n">g</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
                            <span class="n">over</span> <span class="o">*=</span> <span class="n">t</span><span class="p">;</span>
                            <span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">r3</span><span class="p">,</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">g</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">](</span><span class="n">result_t</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">){</span><span class="n">f4</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">g</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">t</span><span class="p">);});</span> <span class="c">// 1.3.2. 各mのうち、e以外に計算済みの元素gがある場合</span>
                        <span class="p">});</span>
                        <span class="n">m</span><span class="p">.</span><span class="n">second</span> <span class="o">*=</span> <span class="n">rate</span> <span class="o">/</span> <span class="n">over</span><span class="p">;</span> <span class="c">// 1.3.1. 係数rを掛ける。</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">}</span>
        <span class="p">};</span>
        <span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">make_zip_view</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">total</span><span class="p">),</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f</span><span class="p">,</span> <span class="n">lcm</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">e</span><span class="p">](</span><span class="n">fusion</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">result_t</span><span class="o">&amp;</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">rational</span><span class="o">&lt;</span><span class="kt">unsigned</span><span class="o">&gt;&gt;</span> <span class="n">t</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">f</span><span class="p">(</span><span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">lcm</span> <span class="o">/</span> <span class="n">fusion</span><span class="o">::</span><span class="n">at_c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&gt;</span><span class="p">(</span><span class="n">t</span><span class="p">));</span>  <span class="c">// 1.2. lcm / tlを左辺の、lcm / trを右辺の係数rとする。</span>
        <span class="p">});</span>
    <span class="p">});</span>
    <span class="k">auto</span> <span class="n">g</span> <span class="o">=</span> <span class="p">[](</span><span class="n">result_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">unsigned</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">1</span><span class="n">u</span><span class="p">,</span> <span class="p">[](</span><span class="kt">unsigned</span> <span class="n">x</span><span class="p">,</span> <span class="n">result_t</span><span class="o">::</span><span class="n">const_reference</span> <span class="n">e</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">unsigned</span>
        <span class="p">{</span>
            <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">lcm</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">second</span><span class="p">.</span><span class="n">denominator</span><span class="p">());</span>
        <span class="p">});</span>
    <span class="p">};</span>
    <span class="k">auto</span> <span class="n">lcm</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">lcm</span><span class="p">(</span><span class="n">g</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">first</span><span class="p">),</span> <span class="n">g</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="n">second</span><span class="p">));</span>
    <span class="k">auto</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="n">lcm</span><span class="p">](</span><span class="n">result_t</span><span class="o">::</span><span class="n">reference</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">r</span><span class="p">.</span><span class="n">second</span> <span class="o">*=</span> <span class="n">lcm</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="n">fusion</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="p">[</span><span class="n">f</span><span class="p">](</span><span class="n">result_t</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">r</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">f</span><span class="p">);</span> <span class="c">// 2. 各項を整数にする。</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">assign</span><span class="o">::</span><span class="n">map_list_of</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">molecule_t</span><span class="o">&gt;</span> <span class="n">m1</span><span class="p">,</span> <span class="n">m2</span><span class="p">;</span>
    <span class="n">m1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;Mg&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="c">// MG</span>
    <span class="n">m1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span> <span class="c">// O2</span>
    <span class="n">m2</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">map_list_of</span><span class="p">(</span><span class="s">&quot;Mg&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)(</span><span class="s">&quot;O&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span> <span class="c">// MgO</span>

    <span class="c">//m1.push_back(map_list_of(&quot;C&quot;, 2)(&quot;H&quot;, 2)); // C2H2</span>
    <span class="c">//m1.push_back(map_list_of(&quot;O&quot;, 2)); // O2</span>
    <span class="c">//m2.push_back(map_list_of(&quot;C&quot;, 1)(&quot;O&quot;, 2)); // CO2</span>
    <span class="c">//m2.push_back(map_list_of(&quot;H&quot;, 2)(&quot;O&quot;, 1)); // H2O</span>

    <span class="k">auto</span> <span class="n">result</span> <span class="o">=</span> <span class="n">calc</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span> <span class="n">m2</span><span class="p">));</span>
    <span class="n">printResult</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">result</span><span class="p">.</span><span class="n">second</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9532/addtag/" class="addtag" id="addtag_9532">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/Boost/">Boost</a>
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/Boost.Fusion/">Boost.Fusion</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9532/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9532/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9532"
  >-</span><span
  class="button yellow"
  id="rating_z_9532"
  >0</span><span 
  class="button green"
  id="rating_p_9532"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100712040237/http://ja.doukaku.org/comment/9530/"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100712040237/http://ja.doukaku.org/comment/9532/root/"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9532/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9537">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9537/">#9537</a>(<script language="JavaScript">print_time(new Date("2009/08/30 05:47 GMT"));</script><noscript>2009/08/30 05:47 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で。例題のような単純な反応式にしか使えないと思いますが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre>| molecule reactants products atoms ratios rest |
molecule := [:pairs |
    Array streamContents: [:ss | pairs pairsCollect: [:a :b | b timesRepeat: [ss nextPut: a]]]].
reactants := {molecule value: #(C 2 H 2). molecule value: #(O 2)}.
products := {molecule value: #(C 1 O 2). molecule value: #(H 2 O 1)}.
ratios := Array new: reactants size + products size withAll: 0.
atoms := reactants concatenation asSet asArray.
rest := atoms collect: [:atm |
    | reacCounts prodCounts |
    reacCounts := reactants collect: [:reac | reac occurrencesOf: atm].
    prodCounts := products collect: [:prod | prod occurrencesOf: atm].
    ((reacCounts occurrencesOf: 0) = (reacCounts size - 1)
            and: [(prodCounts occurrencesOf: 0) = (prodCounts size - 1)])
        ifTrue: [
            | lcm rats |
            lcm := (reacCounts detect: [:c | c &gt; 0]) lcm: (prodCounts detect: [:c | c &gt; 0]).
            rats := lcm * (reacCounts, prodCounts collect: [:c |
                c isZero ifTrue: [0] ifFalse: [1/c]]).
            ratios with: rats do: [:a :b |
                (b &gt; 0 and: [a &gt; 0]) ifTrue: [
                    ratios := ratios * ((a lcm: b) / a). rats := rats * ((a lcm: b) / b)]].
            ratios := ratios with: rats collect: [:a :b | a isZero ifTrue: [b] ifFalse: [a]].
            nil]
        ifFalse: [reacCounts, prodCounts]] thenSelect: [:each | each notNil].
rest do: [:rats |
    | sum idx |
    sum := (ratios * rats allButFirst: reactants size) sum.
    idx := rats findFirst: [:rat | rat &gt; 0].
    ratios at: idx put: sum / (rats at: idx)].
ratios := ratios * (ratios inject: 1 into: [:lcm :rat |
    rat isFraction ifTrue: [lcm lcm: rat denominator] ifFalse: [lcm]]).
reactants, products with: ratios collect: [:a :b | a -&gt; b]

&quot;=&gt;{#(#C #C #H #H)-&gt;2 . #(#O #O)-&gt;5 . #(#C #O #O)-&gt;4 . #(#H #H #O)-&gt;2} &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9537/addtag/" class="addtag" id="addtag_9537">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9537/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9537/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9537"
  >-</span><span
  class="button yellow"
  id="rating_z_9537"
  >0</span><span 
  class="button green"
  id="rating_p_9537"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9537/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9538">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/959/" target="_top">uehaj</a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9538/">#9538</a>(<script language="JavaScript">print_time(new Date("2009/08/30 07:31 GMT"));</script><noscript>2009/08/30 07:31 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>可読性重視で解いてみました。約分せずに力任せです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre>O = [&quot;O&quot;]
Mg = [&quot;Mg&quot;]
C = [&quot;C&quot;]
H = [&quot;H&quot;]
O2 = O*2
H2 = H*2
C2 = C*2
MgO = Mg + O
CO2 = C + O2
H2O = H2 + O

MAX=5

def expand(list, mult) {
  def result = []
  list.eachWithIndex { it, idx -&gt;
    result += it * mult[idx]
  }
  return result.sort()
}

def printAnswer(list, mult) {
  list.eachWithIndex { it, idx -&gt;
    print mult[idx]==1?&quot;&quot;:mult[idx]
    print it.join().replaceAll(/(.)¥1/, &#39;$12&#39;)
    if (idx != list.size()-1) {
      print &quot; + &quot;
    }
  }
}

def resolv(pre, post) {
  preanswers = (([1..MAX]*pre.size()).combinations())
  postanswers = (([1..MAX]*post.size()).combinations())

  ([preanswers,postanswers].combinations()).grep {
    expand(pre, it[0]) == expand(post, it[1])
  }.eachWithIndex { it, idx -&gt;
    printAnswer(pre, it[0])
    print &quot; ==&gt; &quot;
    printAnswer(post, it[1])
    println();
  }

}

resolv([Mg, O2], [MgO])
// 以下が出力される
// 2Mg + O2 ==&gt; 2MgO
// 4Mg + 2O2 ==&gt; 4MgO

resolv([C2, H2, O2], [CO2, H2O])
// 以下が出力される
//C2 + 2H2 + 3O2 ==&gt; 2CO2 + 2H2O
//2C2 + 2H2 + 5O2 ==&gt; 4CO2 + 2H2O
//C2 + 4H2 + 4O2 ==&gt; 2CO2 + 4H2O
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9538/addtag/" class="addtag" id="addtag_9538">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9538/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9538/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9538"
  >-</span><span
  class="button yellow"
  id="rating_z_9538"
  >0</span><span 
  class="button green"
  id="rating_p_9538"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9538/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9552">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9552/">#9552</a>(<script language="JavaScript">print_time(new Date("2009/09/04 02:07 GMT"));</script><noscript>2009/09/04 02:07 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>連立一次方程式で解くようにしました。単純な掃き出し法です。各化合物に係数を振って、答えを出すために最初の係数だけは１に固定しました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">fractions</span> <span class="k">import</span> <span class="n">Fraction</span> <span class="k">as</span> <span class="n">F</span>
<span class="k">from</span> <span class="nn">fractions</span> <span class="k">import</span> <span class="n">gcd</span>
<span class="k">import</span> <span class="nn">collections</span>
<span class="k">import</span> <span class="nn">itertools</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="k">def</span> <span class="nf">lcm</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">a</span> <span class="o">//</span> <span class="n">gcd</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="o">*</span> <span class="n">b</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">prev_list</span><span class="p">,</span> <span class="n">next_list</span><span class="p">):</span>
    <span class="c"># create unique list of elements</span>
    <span class="n">elements</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">prev_list</span><span class="p">,</span> <span class="n">next_list</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">&#39;[A-Z][a-z]*&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">element</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">elements</span><span class="p">:</span>
                <span class="n">elements</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">element</span><span class="p">)</span>
    <span class="c"># count the number of elements in each terms</span>
    <span class="n">coefs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">the_list</span><span class="p">,</span> <span class="n">sign</span> <span class="ow">in</span> <span class="p">((</span><span class="n">prev_list</span><span class="p">,</span> <span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="n">next_list</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">the_list</span><span class="p">:</span>
            <span class="n">coef</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">re</span><span class="o">.</span><span class="n">finditer</span><span class="p">(</span><span class="s">&#39;([A-Z][a-z]*)(\d*)&#39;</span><span class="p">,</span> <span class="n">s</span><span class="p">):</span>
                <span class="n">coef</span><span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">+=</span> <span class="n">sign</span> <span class="o">*</span> <span class="n">F</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span> <span class="k">if</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">coefs</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">coef</span><span class="p">)</span>
    <span class="c"># create a system of linar equation</span>
    <span class="n">matrix</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">element</span> <span class="ow">in</span> <span class="n">elements</span><span class="p">:</span>
        <span class="n">matrix</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">coef</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">element</span><span class="p">,</span> <span class="n">F</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="k">for</span> <span class="n">coef</span> <span class="ow">in</span> <span class="n">coefs</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">F</span><span class="p">(</span><span class="mi">0</span><span class="p">)])</span>
    <span class="n">matrix</span><span class="o">.</span><span class="n">append</span><span class="p">([</span><span class="n">F</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span> <span class="o">+</span> <span class="p">[</span><span class="n">F</span><span class="p">(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">coefs</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="n">F</span><span class="p">(</span><span class="mi">1</span><span class="p">)])</span>
    <span class="c"># solve a system of linar equation</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">all</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">==</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">col</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]:</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">col</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">],</span> <span class="n">matrix</span><span class="p">[</span><span class="n">col</span><span class="p">]</span>
                <span class="k">break</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;non-zero element cannot be found&quot;</span><span class="p">)</span>
        <span class="n">value</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">col</span><span class="p">][</span><span class="n">col</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">col2</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">matrix</span><span class="p">[</span><span class="n">col</span><span class="p">][</span><span class="n">col2</span><span class="p">]</span> <span class="o">/=</span> <span class="n">value</span>
        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">row</span> <span class="o">==</span> <span class="n">col</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">]</span>
            <span class="k">for</span> <span class="n">col2</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col2</span><span class="p">]</span> <span class="o">-=</span> <span class="n">matrix</span><span class="p">[</span><span class="n">col</span><span class="p">][</span><span class="n">col2</span><span class="p">]</span> <span class="o">*</span> <span class="n">value</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[</span><span class="n">matrix</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
    <span class="c"># normalize answer (erase denominator)</span>
    <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">lcm</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">f</span><span class="o">.</span><span class="n">denominator</span><span class="p">)</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[(</span><span class="n">f</span> <span class="o">*</span> <span class="n">n</span><span class="p">)</span><span class="o">.</span><span class="n">numerator</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">]</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;&quot;</span> <span class="k">if</span> <span class="n">m</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="nb">str</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">ans</span><span class="p">]</span>
    <span class="c"># output</span>
    <span class="k">print</span> \
        <span class="s">&quot; + &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">s</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">prev_list</span><span class="p">))</span> <span class="o">+</span> \
        <span class="s">&quot; -&gt; &quot;</span> <span class="o">+</span> \
        <span class="s">&quot; + &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ans</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">prev_list</span><span class="p">)]</span> <span class="o">+</span> <span class="n">s</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">next_list</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">solve</span><span class="p">((</span><span class="s">&quot;Mg&quot;</span><span class="p">,</span> <span class="s">&quot;O2&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;MgO&quot;</span><span class="p">,))</span>
    <span class="n">solve</span><span class="p">((</span><span class="s">&quot;C2H2&quot;</span><span class="p">,</span> <span class="s">&quot;O2&quot;</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;CO2&quot;</span><span class="p">,</span> <span class="s">&quot;H2O&quot;</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9552/addtag/" class="addtag" id="addtag_9552">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/Python2.6/">Python2.6</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9552/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9552/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9552"
  >-</span><span
  class="button yellow"
  id="rating_z_9552"
  >0</span><span 
  class="button green"
  id="rating_p_9552"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9552/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9653">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9653/">#9653</a>(<script language="JavaScript">print_time(new Date("2009/10/29 06:28 GMT"));</script><noscript>2009/10/29 06:28 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>長くなってしまいましたが、原子毎の連立方程式で整数解を求めました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.regex.Matcher</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>

<span class="k">class</span> <span class="nc">Term</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;([A-Z][a-z]?)([0-9]+)?&quot;</span><span class="o">);</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">Term</span> <span class="n">create</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">isLhs</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Term</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Term</span><span class="o">();</span>
        <span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)?</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">2</span><span class="o">)):</span> <span class="mi">1</span><span class="o">;</span>
            <span class="n">result</span><span class="o">.</span><span class="na">molecules</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Molecule</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">1</span><span class="o">),</span> <span class="n">count</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="n">result</span><span class="o">.</span><span class="na">isLhs</span> <span class="o">=</span> <span class="n">isLhs</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Molecule</span><span class="o">&gt;</span> <span class="n">molecules</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Molecule</span><span class="o">&gt;();</span>
    <span class="k">public</span> <span class="kt">boolean</span> <span class="n">isLhs</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Molecule</span> <span class="nl">m:</span> <span class="n">molecules</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">class</span> <span class="nc">Molecule</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">final</span> <span class="n">String</span> <span class="n">element</span><span class="o">;</span>
    <span class="k">public</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">count</span><span class="o">;</span>

    <span class="k">public</span> <span class="n">Molecule</span><span class="o">(</span><span class="n">String</span> <span class="n">e</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">element</span> <span class="o">=</span> <span class="n">e</span><span class="o">;</span>
        <span class="n">count</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">element</span> <span class="o">+</span> <span class="n">toString</span><span class="o">(</span><span class="n">count</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="n">String</span> <span class="n">toString</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)?</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">):</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample284</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">gcd</span><span class="o">(</span><span class="kt">int</span> <span class="n">m</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">m</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span> <span class="n">gcd</span><span class="o">(</span><span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">m</span><span class="o">),</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">n</span><span class="o">));</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">m</span><span class="o">)</span> <span class="k">return</span> <span class="n">gcd</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">m</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">m</span> <span class="o">%</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)?</span> <span class="nl">n:</span> <span class="n">gcd</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">terms_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;();</span>

    <span class="k">public</span> <span class="n">Sample284</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">lhs</span><span class="o">,</span> <span class="n">String</span><span class="o">[]</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">s:</span> <span class="n">lhs</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">terms_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Term</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">s:</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">terms_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">Term</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="kc">false</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="n">String</span> <span class="n">solve</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span> <span class="o">=</span> <span class="n">createMatrix</span><span class="o">(</span><span class="n">terms_</span><span class="o">);</span>
        <span class="c">//System.out.println(createString(matrix));</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="n">solveEquation</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
        <span class="c">//System.out.println(createString(matrix));</span>
        
        <span class="c">//System.out.println(Arrays.toString(result));</span>
        <span class="k">return</span> <span class="n">createResultString</span><span class="o">(</span><span class="n">terms_</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">solveEquation</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">col</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">searchNotZero</span><span class="o">(</span><span class="n">matrix</span><span class="o">,</span> <span class="n">col</span><span class="o">,</span> <span class="n">col</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">row</span> <span class="o">!=</span> <span class="n">col</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">swapRows</span><span class="o">(</span><span class="n">matrix</span><span class="o">,</span> <span class="n">row</span><span class="o">,</span> <span class="n">col</span><span class="o">);</span>
                <span class="n">row</span> <span class="o">=</span> <span class="n">col</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">r</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">r</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="n">row</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">eraceRow</span><span class="o">(</span><span class="n">matrix</span><span class="o">,</span> <span class="n">col</span><span class="o">,</span> <span class="n">row</span><span class="o">,</span> <span class="n">r</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">reduceResult</span><span class="o">(</span><span class="n">matrix</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">int</span> <span class="n">searchNotZero</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">col</span><span class="o">,</span> <span class="kt">int</span> <span class="n">startRow</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="n">startRow</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">row</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span>
                <span class="k">return</span> <span class="n">row</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="n">createString</span><span class="o">(</span><span class="n">matrix</span><span class="o">));</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="n">swapRows</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">row1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">row2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">work</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row1</span><span class="o">];</span>
        <span class="n">matrix</span><span class="o">[</span><span class="n">row1</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row2</span><span class="o">];</span>
        <span class="n">matrix</span><span class="o">[</span><span class="n">row2</span><span class="o">]</span> <span class="o">=</span> <span class="n">work</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="n">eraceRow</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">,</span> <span class="kt">int</span> <span class="n">baseCol</span><span class="o">,</span> <span class="kt">int</span> <span class="n">baseRow</span><span class="o">,</span> <span class="kt">int</span> <span class="n">row</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">baseVal</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">baseRow</span><span class="o">][</span><span class="n">baseCol</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">baseVal</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="n">createString</span><span class="o">(</span><span class="n">matrix</span><span class="o">));</span>
        <span class="kt">int</span> <span class="n">eraceVal</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">baseCol</span><span class="o">];</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">eraceVal</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">gcd</span><span class="o">(</span><span class="n">baseVal</span><span class="o">,</span> <span class="n">eraceVal</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">col</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">*</span> <span class="o">(</span><span class="n">baseVal</span> <span class="o">/</span> <span class="n">m</span><span class="o">)</span> <span class="o">-</span> <span class="n">matrix</span><span class="o">[</span><span class="n">baseRow</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">*</span> <span class="o">(</span><span class="n">eraceVal</span> <span class="o">/</span> <span class="n">m</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">reduceResult</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">scale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">row</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">gcd</span><span class="o">(</span><span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">row</span><span class="o">],</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]);</span>
            <span class="n">scale</span> <span class="o">*=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">row</span><span class="o">]</span> <span class="o">/</span> <span class="n">m</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="n">matrix</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">row</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">[</span><span class="n">row</span><span class="o">]</span> <span class="o">=</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">col</span><span class="o">]</span> <span class="o">*</span> <span class="n">scale</span> <span class="o">/</span> <span class="n">matrix</span><span class="o">[</span><span class="n">row</span><span class="o">][</span><span class="n">row</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">createMatrix</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">terms</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">keyMap</span> <span class="o">=</span> <span class="n">createKeyMap</span><span class="o">(</span><span class="n">terms</span><span class="o">);</span>
        
        <span class="kt">int</span> <span class="n">rows</span> <span class="o">=</span> <span class="n">keyMap</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">terms</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rows</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">!=</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">rows</span><span class="o">][];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">result</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">length</span><span class="o">];</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">col</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Term</span> <span class="nl">term:</span> <span class="n">terms</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Molecule</span> <span class="nl">m:</span> <span class="n">term</span><span class="o">.</span><span class="na">molecules</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">result</span><span class="o">[</span><span class="n">keyMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">element</span><span class="o">)][</span><span class="n">col</span><span class="o">]</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">count</span> <span class="o">*</span> <span class="o">(</span><span class="n">term</span><span class="o">.</span><span class="na">isLhs</span><span class="o">?</span> <span class="mi">1</span><span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">col</span><span class="o">++;</span>
        <span class="o">}</span>

        <span class="n">result</span><span class="o">[</span><span class="n">keyMap</span><span class="o">.</span><span class="na">size</span><span class="o">()][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">result</span><span class="o">[</span><span class="n">keyMap</span><span class="o">.</span><span class="na">size</span><span class="o">()][</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">createKeyMap</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Term</span> <span class="nl">term:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Molecule</span> <span class="nl">m:</span> <span class="n">term</span><span class="o">.</span><span class="na">molecules</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">result</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">element</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">result</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">element</span><span class="o">,</span> <span class="n">index</span><span class="o">++);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="n">String</span> <span class="n">createString</span><span class="o">(</span><span class="kt">int</span><span class="o">[][]</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>    <span class="c">// for debug</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="nl">row:</span> <span class="n">matrix</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="nl">col:</span> <span class="n">row</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%3d &quot;</span><span class="o">,</span> <span class="n">col</span><span class="o">));</span>
            <span class="o">}</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="k">private</span> <span class="n">String</span> <span class="n">createResultString</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">factors</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">boolean</span> <span class="n">isLhs</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Term</span> <span class="nl">term:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">builder</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">isLhs</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">term</span><span class="o">.</span><span class="na">isLhs</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;=&quot;</span><span class="o">);</span>
                    <span class="n">isLhs</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;+&quot;</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">factors</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">factors</span><span class="o">[</span><span class="n">index</span><span class="o">]);</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">term</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Sample284</span> <span class="n">solver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample284</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;Mg&quot;</span><span class="o">,</span> <span class="s">&quot;O2&quot;</span><span class="o">},</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;MgO&quot;</span><span class="o">});</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">solver</span><span class="o">.</span><span class="na">solve</span><span class="o">());</span>    <span class="c">// 2Mg+O2=2MgO</span>
        
        <span class="n">Sample284</span> <span class="n">solver2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample284</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;C2H2&quot;</span><span class="o">,</span> <span class="s">&quot;O2&quot;</span><span class="o">},</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;CO2&quot;</span><span class="o">,</span> <span class="s">&quot;H2O&quot;</span><span class="o">});</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">solver2</span><span class="o">.</span><span class="na">solve</span><span class="o">());</span>    <span class="c">// 2C2H2+5O2=4CO2+2H2O</span>
        
        <span class="n">Sample284</span> <span class="n">solver3</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample284</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;C2H6O&quot;</span><span class="o">,</span> <span class="s">&quot;O2&quot;</span><span class="o">},</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span><span class="s">&quot;CO2&quot;</span><span class="o">,</span> <span class="s">&quot;H2O&quot;</span><span class="o">});</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">solver3</span><span class="o">.</span><span class="na">solve</span><span class="o">());</span>    <span class="c">// 2C2+2H2+5O2=4CO2+2H2O</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/9653/addtag/" class="addtag" id="addtag_9653">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9653/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/9653/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9653"
  >-</span><span
  class="button yellow"
  id="rating_z_9653"
  >0</span><span 
  class="button green"
  id="rating_p_9653"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/9653/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment10532">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/10532/">#10532</a>(<script language="JavaScript">print_time(new Date("2010/06/06 10:51 GMT"));</script><noscript>2010/06/06 10:51 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>#式の両辺で原子数が互いに等しくなるように、係数を少しずつ増やしています。
#少し複雑な式では係数が安定しないので、計算を中断しています。
#中断例：?C2H5OH + ?O2 = ?CO2 + ?H2O

#環境:ruby 1.8.7 (2010-01-10 patchlevel 249) [i486-linux

実行結果:
--------------------------------------------
NaOH + HCl = H2O + NaCl
5O2 + 2C2H2 = 2H2O + 4CO2
O2 + 2Mg = 2MgO
C + 2CuO = CO2 + 2Cu
2NaHCO3 = H2O + CO2 + Na2CO3
C2H5OH O2, CO2 H2O は本プログラムでは、収束しません。
--------------------------------------------</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><div class="highlight"><pre><span class="c1"># -*- coding: utf-8 -*-</span>
<span class="k">def</span> <span class="nf">siki</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">)</span>
  <span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">s1</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">}</span>
  <span class="n">s2</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span>
 <span class="k">while</span> <span class="p">(</span><span class="n">w</span> <span class="o">=</span> <span class="n">find_mismatch</span><span class="p">(</span><span class="n">h</span><span class="p">))</span> <span class="o">!=</span> <span class="o">[]</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">w</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span>
    <span class="p">(</span><span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%s, %s は本プログラムでは、収束しません。</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">);</span><span class="k">return</span><span class="p">)</span> <span class="k">if</span> <span class="n">b</span> <span class="o">&gt;</span> <span class="mi">100</span>
    <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">?</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;&lt;&#39;</span><span class="o">]</span> <span class="p">:</span> <span class="o">[-</span><span class="mi">1</span><span class="p">,</span><span class="s1">&#39;&gt;&#39;</span><span class="o">]</span><span class="p">)</span>
    <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;h.map{|k, v|h[k] -= b if((v</span><span class="si">#{</span><span class="n">c</span><span class="si">}</span><span class="s2">0)&amp;&amp;k.index(a))}&quot;</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%s = &quot;</span><span class="p">,</span> <span class="n">make_form</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; + &#39;</span><span class="p">))</span>
  <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%s</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>  <span class="n">make_form</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; + &#39;</span><span class="p">))</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">make_form</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">x1</span><span class="p">)</span>
  <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;h.</span>
<span class="s2">        map{|k,v|[k,v] if v</span><span class="si">#{</span><span class="n">x1</span><span class="si">}</span><span class="s2">0}.</span>
<span class="s2">        compact.</span>
<span class="s2">        map{|x|xx=x[1].abs;(xx &gt; 1 ? xx : nil).to_s + x[0]}&quot;</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">find_mismatch</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
  <span class="n">hc</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">h</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
    <span class="n">ww</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">while</span> <span class="n">w</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">shift</span>
      <span class="k">if</span> <span class="n">w</span> <span class="o">=~</span> <span class="sr">/[0-9]/</span>
        <span class="n">hc</span><span class="o">[</span><span class="n">ww</span><span class="o">]</span> <span class="o">+=</span> <span class="n">w</span><span class="o">.</span><span class="n">to_i</span> <span class="o">*</span> <span class="n">v</span>
        <span class="n">ww</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="n">w</span> <span class="o">=~</span> <span class="sr">/[A-Z]/</span>
        <span class="n">hc</span><span class="o">[</span><span class="n">ww</span><span class="o">]</span> <span class="o">+=</span> <span class="n">v</span> <span class="k">if</span> <span class="n">ww</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
        <span class="n">ww</span> <span class="o">=</span> <span class="n">w</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="n">w</span> <span class="o">=~</span> <span class="sr">/[a-z]/</span>
        <span class="n">ww</span> <span class="o">+=</span> <span class="n">w</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="n">hc</span><span class="o">[</span><span class="n">ww</span><span class="o">]</span> <span class="o">+=</span> <span class="n">v</span> <span class="k">if</span> <span class="n">ww</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
  <span class="p">}</span>
  <span class="n">hc</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|[</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">]</span> <span class="k">if</span> <span class="n">v!</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">sort</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">abs</span><span class="o">&lt;=&gt;</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">abs</span><span class="p">}</span>
<span class="k">end</span>

<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;HCl NaOH&quot;</span><span class="p">,</span> <span class="s2">&quot;NaCl H2O&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;C2H2 O2&quot;</span><span class="p">,</span> <span class="s2">&quot;CO2 H2O&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;Mg O2&quot;</span><span class="p">,</span> <span class="s2">&quot;MgO&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;CuO C&quot;</span><span class="p">,</span> <span class="s2">&quot;Cu CO2&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;NaHCO3&quot;</span><span class="p">,</span> <span class="s2">&quot;Na2CO3 CO2 H2O&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;C2H5OH O2&quot;</span><span class="p">,</span> <span class="s2">&quot;CO2 H2O&quot;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/10532/addtag/" class="addtag" id="addtag_10532">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/1.8.7/">1.8.7</a>
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/ruby/">ruby</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/10532/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/10532/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10532"
  >-</span><span
  class="button yellow"
  id="rating_z_10532"
  >0</span><span 
  class="button green"
  id="rating_p_10532"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/10532/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment10534">
  <p class="banner"><a href="/web/20100712040237/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100712040237/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/10534/">#10534</a>(<script language="JavaScript">print_time(new Date("2010/06/06 18:37 GMT"));</script><noscript>2010/06/06 18:37 GMT</noscript>)
	
	
	
	[<a href="/web/20100712040237/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>#10532の改造版です。
# 力任せ。 係数をall 1(1,1,...)からall MAX(MAX,MAX,...)まで変化させて、式両辺の原子数が同じになる組合せを探します。
# 環境:ruby 1.8.7 (2010-01-10 patchlevel 249) [i486-linux]
#  実行結果
#---------------------------------------------------
#  time ruby kagakusiki2.rb
#  NaOH + HCl = H2O + NaCl
#  5O2 + 2C2H2 = 2H2O + 4CO2
#  O2 + 2Mg = 2MgO
#  C + 2CuO = CO2 + 2Cu
#  2NaHCO3 = H2O + CO2 + Na2CO3
#  C2H5OH + 3O2 = 3H2O + 2CO2
#  0.18s user 0.02s system 94% cpu 0.208 total
#---------------------------------------------------</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="no">MAX</span><span class="o">=</span><span class="mi">5</span>
<span class="k">def</span> <span class="nf">siki</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">)</span>
  <span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">s1</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">}</span>
  <span class="n">s2</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span>
  <span class="n">n</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">length</span>
  <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="no">MAX</span> <span class="o">**</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">){</span><span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%0</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">d&quot;</span><span class="p">,</span> <span class="n">x</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="no">MAX</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span><span class="n">x</span><span class="o">.</span><span class="n">to_i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">h</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="o">|[</span><span class="n">a</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]*</span><span class="n">b</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">flatten</span>
    <span class="n">x</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[*</span><span class="n">x</span><span class="o">]</span>
    <span class="p">(</span><span class="n">h</span> <span class="o">=</span> <span class="n">x</span><span class="p">;</span> <span class="k">break</span><span class="p">)</span> <span class="k">if</span> <span class="n">find_mismatch</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">==</span> <span class="o">[]</span>
  <span class="p">}</span>
  <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%s = &quot;</span><span class="p">,</span> <span class="n">make_form</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; + &#39;</span><span class="p">))</span>
  <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%s</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span>  <span class="n">make_form</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="s1">&#39;&lt;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; + &#39;</span><span class="p">))</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">make_form</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">x1</span><span class="p">)</span>
  <span class="nb">eval</span><span class="p">(</span><span class="s2">&quot;h.</span>
<span class="s2">        map{|k,v|[k,v] if v</span><span class="si">#{</span><span class="n">x1</span><span class="si">}</span><span class="s2">0}.</span>
<span class="s2">        compact.</span>
<span class="s2">        map{|x|xx=x[1].abs;(xx &gt; 1 ? xx : nil).to_s + x[0]}&quot;</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">find_mismatch</span><span class="p">(</span><span class="n">h</span><span class="p">)</span>
  <span class="n">hc</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="n">h</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
    <span class="n">ww</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="k">while</span> <span class="n">w</span> <span class="o">=</span> <span class="n">k</span><span class="o">.</span><span class="n">shift</span>
      <span class="k">if</span> <span class="n">w</span> <span class="o">=~</span> <span class="sr">/[0-9]/</span>
        <span class="n">hc</span><span class="o">[</span><span class="n">ww</span><span class="o">]</span> <span class="o">+=</span> <span class="n">w</span><span class="o">.</span><span class="n">to_i</span> <span class="o">*</span> <span class="n">v</span>
        <span class="n">ww</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="n">w</span> <span class="o">=~</span> <span class="sr">/[A-Z]/</span>
        <span class="n">hc</span><span class="o">[</span><span class="n">ww</span><span class="o">]</span> <span class="o">+=</span> <span class="n">v</span> <span class="k">if</span> <span class="n">ww</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
        <span class="n">ww</span> <span class="o">=</span> <span class="n">w</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="n">w</span> <span class="o">=~</span> <span class="sr">/[a-z]/</span>
        <span class="n">ww</span> <span class="o">+=</span> <span class="n">w</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="n">hc</span><span class="o">[</span><span class="n">ww</span><span class="o">]</span> <span class="o">+=</span> <span class="n">v</span> <span class="k">if</span> <span class="n">ww</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span>
  <span class="p">}</span>
  <span class="n">hc</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|[</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">]</span> <span class="k">if</span> <span class="n">v!</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="o">.</span><span class="n">compact</span><span class="o">.</span><span class="n">sort</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span><span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">abs</span><span class="o">&lt;=&gt;</span><span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">abs</span><span class="p">}</span>
<span class="k">end</span>

<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;HCl NaOH&quot;</span><span class="p">,</span> <span class="s2">&quot;NaCl H2O&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;C2H2 O2&quot;</span><span class="p">,</span> <span class="s2">&quot;CO2 H2O&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;Mg O2&quot;</span><span class="p">,</span> <span class="s2">&quot;MgO&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;CuO C&quot;</span><span class="p">,</span> <span class="s2">&quot;Cu CO2&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;NaHCO3&quot;</span><span class="p">,</span> <span class="s2">&quot;Na2CO3 CO2 H2O&quot;</span><span class="p">)</span>
<span class="n">siki</span><span class="p">(</span><span class="s2">&quot;C2H5OH O2&quot;</span><span class="p">,</span> <span class="s2">&quot;CO2 H2O&quot;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100712040237/http://ja.doukaku.org/comment/10534/addtag/" class="addtag" id="addtag_10534">タグ</a>:
	
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/1.8.7/">1.8.7</a>
    
    <a href="/web/20100712040237/http://ja.doukaku.org/tag/ruby/">ruby</a>
    
	&nbsp;

	
      [<a href="/web/20100712040237/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100712040237/http://ja.doukaku.org/comment/10534/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100712040237/http://ja.doukaku.org/comment/10534/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10534"
  >-</span><span
  class="button yellow"
  id="rating_z_10534"
  >0</span><span 
  class="button green"
  id="rating_p_10534"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100712040237/http://ja.doukaku.org/284/reply_to/10534/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100712040237if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100712040237/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100712040237/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100712040237/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100712040237/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100712040237/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100712040237/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100712040237/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100712040237/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100712040237/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100712040237/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100712040237im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100712040237/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100712040237/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100712040237/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100712040237/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100712040237/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100712040237/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100712040237/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100712040237/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100712040237im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100712040237/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100712040237/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100712040237/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100712040237js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 4:02:37 Jul 12, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:33:14 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
