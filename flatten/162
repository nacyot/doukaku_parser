
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
情報オリンピック2007年度国内本選問題5
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081122161717cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081122161717cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081122161717cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20081122161717/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081122161717/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081122161717js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081122161717js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081122161717js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081122161717js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app3.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/162\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "22";
var displayMonth = "Nov";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/162/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081122161717" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Oct
                       
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 16:17:17 Nov 22, 2008">NOV</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Dec
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" />
                       
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 16:17:17 Nov 22, 2008">22</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 16:17:17 Nov 22, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081122161717*/http://ja.doukaku.org/162/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>1 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">22 Nov 08 - 22 Nov 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:10:000000000010_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081122161717/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
[topic]
<a href="/web/20081122161717/http://ja.doukaku.org/162/">情報オリンピック2007年度国内本選問題5</a>
</h2>

    





<div class="comment" id="comment5781">
  <p class="banner"><a href="/web/20081122161717/http://ja.doukaku.org/user/689/" target="_top">yukoba</a>

	
	&nbsp;
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/5781/">#5781</a>(<script language="JavaScript">print_time(new Date("2008/02/19 03:19 GMT"));</script><noscript>2008/02/19 03:19 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>中高生向けの情報オリンピック国内本選2007年度問題5です。</p>
<dl class="docutils">
<dt>問題文（下記PDFの11ページ目）</dt>
<dd><a class="reference" href="/web/20081122161717/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/2008-ho.pdf">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/2008-ho.pdf</a></dd>
<dt>コンテスト概要</dt>
<dd><a class="reference" href="/web/20081122161717/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/index.html">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/index.html</a></dd>
<dt>サンプルデータ（出題時に公開）</dt>
<dd><a class="reference" href="/web/20081122161717/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/joi2008.zip">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/joi2008.zip</a></dd>
<dt>採点データ（出題時に非公開）</dt>
<dd><a class="reference" href="/web/20081122161717/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/data.zip">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/data.zip</a></dd>
</dl>
<p>「問題ごとに、プログラムの実行時間（や使用メモリ量）に制限が設定されています。」にご注意ください。本問では、制限時間1秒、メモリ制限64MBとなっています。</p>
<p>出題時はサンプルデータのみが公開され、採点は、採点データによる、自動採点にて行われます。</p>
<p>実際のコンテストでは、予選通過者48名が対象となっていて、100点満点中38点以上とった、16名が本選通過です。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/5781/addtag/" class="addtag" id="addtag_5781">Tags</a>:
	
    
    <a href="/web/20081122161717/http://ja.doukaku.org/tag/%E6%83%85%E5%A0%B1%E3%82%AA%E3%83%AA%E3%83%B3%E3%83%94%E3%83%83%E3%82%AF/">情報オリンピック</a>
    
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5781"
  >-</span><span
  class="button yellow"
  id="rating_z_5781"
  >0</span><span 
  class="button green"
  id="rating_p_5781"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081122161717/http://ja.doukaku.org/162/reply_to/5781/">
  reply
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20081122161717/http://ja.doukaku.org/162/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Flatten</h2>
<a href="/web/20081122161717/http://ja.doukaku.org/162/nested/">Nested</a>
<a href="/web/20081122161717/http://ja.doukaku.org/162/">Hidden</a> 


  
  <br/>

  
  




<div class="comment" id="comment5811">
  <p class="banner"><a href="/web/20081122161717/http://ja.doukaku.org/user/724/" target="_top">hyon</a>

	
	&nbsp;
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/5811/">#5811</a>(<script language="JavaScript">print_time(new Date("2008/02/20 13:14 GMT"));</script><noscript>2008/02/20 13:14 GMT</noscript>)
	
	
	
	[<a href="/web/20081122161717/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>ブログのほうでリクエストがありましたので書き込ませていただきます。
公式ジャッジデータで時間内に正答することは一応確認しています。
少しでも参考になれば幸いです。
</pre>
	</div>
	
	<p class="link">
	  see: <a href="/web/20081122161717/http://d.hatena.ne.jp/hyon/20080217/1203269032">JOI2007-2008 Honsen</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include&lt;iostream&gt;</span>
<span class="cp">#include&lt;vector&gt;</span>
<span class="cp">#include&lt;algorithm&gt;</span>
<span class="cp">#include&lt;queue&gt;</span>

<span class="cp">#define ALLOF(c) (c).begin(),(c).end()</span>
<span class="cp">#define DEBUG(c) cerr&lt;&lt;&quot;&gt; &quot;&lt;&lt;#c&lt;&lt;&quot; = &quot;&lt;&lt;c&lt;&lt;endl;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">pt</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">coordinate_compression</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pt</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pt</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">tx</span><span class="p">,</span><span class="n">ty</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">tx</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
        <span class="n">ty</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">);</span>
        <span class="n">tx</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">);</span>
        <span class="n">ty</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="n">sort</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">tx</span><span class="p">));</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">ty</span><span class="p">));</span>
    <span class="n">tx</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">tx</span><span class="p">)),</span><span class="n">tx</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">ty</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">unique</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">ty</span><span class="p">)),</span><span class="n">ty</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">tx</span><span class="p">),</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">)</span><span class="o">-</span><span class="n">tx</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">ty</span><span class="p">),</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">)</span><span class="o">-</span><span class="n">ty</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">tx</span><span class="p">),</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">)</span><span class="o">-</span><span class="n">tx</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">ty</span><span class="p">),</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">)</span><span class="o">-</span><span class="n">ty</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
    <span class="p">}</span>
    
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">part_fill</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pt</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p1</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">pt</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">p2</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span>
<span class="p">{</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">pt</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p1</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">p</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">),</span><span class="mi">0</span><span class="p">));</span>
            <span class="n">p</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">),</span><span class="mi">1</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">sort</span><span class="p">(</span><span class="n">ALLOF</span><span class="p">(</span><span class="n">p</span><span class="p">));</span>
    
    <span class="n">pt</span> <span class="n">s</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cnt</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">p</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">pt</span> <span class="n">t</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">flg</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">flg</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">cnt</span><span class="o">++</span><span class="p">)</span>
                <span class="n">s</span><span class="o">=</span><span class="n">t</span><span class="p">;</span>
        <span class="p">}</span>
        
        <span class="k">if</span><span class="p">(</span><span class="n">flg</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!--</span><span class="n">cnt</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">s</span><span class="p">.</span><span class="n">second</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">t</span><span class="p">.</span><span class="n">second</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
                    <span class="n">m</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">s</span><span class="p">.</span><span class="n">first</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">consecutive_part_fill</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">h</span><span class="o">=</span><span class="n">m</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">w</span><span class="o">=</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
    
    <span class="n">queue</span><span class="o">&lt;</span><span class="n">pt</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
    <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">));</span>
    
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">cx</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">cy</span><span class="o">=</span><span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
        <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        
        <span class="k">static</span> <span class="kt">int</span> <span class="n">dx</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
        <span class="k">static</span> <span class="kt">int</span> <span class="n">dy</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">};</span>
        
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="kt">int</span> <span class="n">tx</span><span class="o">=</span><span class="n">cx</span><span class="o">+</span><span class="n">dx</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="kt">int</span> <span class="n">ty</span><span class="o">=</span><span class="n">cy</span><span class="o">+</span><span class="n">dy</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            
            <span class="k">if</span><span class="p">(</span><span class="n">tx</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">tx</span><span class="o">&gt;=</span><span class="n">w</span> <span class="o">||</span> <span class="n">ty</span><span class="o">&lt;</span><span class="mi">0</span> <span class="o">||</span> <span class="n">ty</span><span class="o">&gt;=</span><span class="n">h</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span>
            
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">m</span><span class="p">[</span><span class="n">ty</span><span class="p">][</span><span class="n">tx</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="n">m</span><span class="p">[</span><span class="n">ty</span><span class="p">][</span><span class="n">tx</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
                <span class="n">q</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">tx</span><span class="p">,</span><span class="n">ty</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">w</span><span class="o">&gt;&gt;</span><span class="n">h</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span> <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">pt</span><span class="o">&gt;</span> <span class="n">p1</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="n">p2</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="o">&gt;&gt;</span><span class="n">p1</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="o">&gt;&gt;</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="o">&gt;&gt;</span><span class="n">p2</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
    
    <span class="n">p1</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
    <span class="n">p2</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="n">h</span><span class="p">));</span>
    
    <span class="n">coordinate_compression</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">);</span>
    
    <span class="n">w</span><span class="o">=</span><span class="n">p2</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>
    <span class="n">h</span><span class="o">=</span><span class="n">p2</span><span class="p">.</span><span class="n">back</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>
    <span class="n">p1</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
    <span class="n">p2</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
    
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">m</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
    
    <span class="n">part_fill</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span><span class="n">p2</span><span class="p">,</span><span class="n">m</span><span class="p">);</span>
    
    <span class="kt">int</span> <span class="n">res</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">h</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">w</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">])</span>
            <span class="p">{</span>
                <span class="n">res</span><span class="o">++</span><span class="p">;</span>
                <span class="n">m</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
                <span class="n">consecutive_part_fill</span><span class="p">(</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">m</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">res</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/5811/addtag/" class="addtag" id="addtag_5811">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081122161717/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20081122161717/http://ja.doukaku.org/comment/5811/download/">
		download code
      </a>]
	  [<a href="/web/20081122161717/http://ja.doukaku.org/comment/5811/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5811"
  >-</span><span
  class="button yellow"
  id="rating_z_5811"
  >0</span><span 
  class="button green"
  id="rating_p_5811"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081122161717/http://ja.doukaku.org/162/reply_to/5811/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6324">
  <p class="banner"><a href="/web/20081122161717/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20081122161717/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/6324/">#6324</a>(<script language="JavaScript">print_time(new Date("2008/05/23 14:01 GMT"));</script><noscript>2008/05/23 14:01 GMT</noscript>)
	
	
	
	[<a href="/web/20081122161717/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>時間内に終わらないデータがありますが（確か5-11）せっかくなので投稿。結局 map を少しずつ大きくしていくのは無駄で、hyon さんのようにがばっとマスキングテープの座標を vector に入れて、がばっと map を作成すべき。（あとで試してみるつもり）</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;queue&gt;</span>
<span class="cp">#include &lt;utility&gt;</span>
<span class="cp">#include &lt;cassert&gt;</span>

<span class="cp">#define REP(i, b, e) for (size_t i = b; i &lt; e; ++i)</span>

<span class="n">size_t</span> <span class="n">insert_x</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;&amp;</span> <span class="n">xs</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">map</span><span class="p">,</span> <span class="kt">long</span> <span class="n">x</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">xs</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">xs</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">x</span><span class="p">);</span>

    <span class="k">const</span> <span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">it</span> <span class="o">-</span> <span class="n">xs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">!=</span> <span class="n">x</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">xs</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">x</span><span class="p">);</span>

        <span class="n">assert</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">);</span>

        <span class="n">map</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">map</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">map</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">size_t</span> <span class="n">insert_y</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;&amp;</span> <span class="n">ys</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;&amp;</span> <span class="n">map</span><span class="p">,</span> <span class="kt">long</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ys</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">ys</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">y</span><span class="p">);</span>

    <span class="k">const</span> <span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="n">it</span> <span class="o">-</span> <span class="n">ys</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span> <span class="o">!=</span> <span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ys</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">it</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>

        <span class="n">assert</span><span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">);</span>

        <span class="n">REP</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">map</span><span class="p">.</span><span class="n">size</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="n">map</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">insert</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">map</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">i</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">w</span> <span class="o">&gt;&gt;</span> <span class="n">h</span><span class="p">;</span>

    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">w</span> <span class="o">&amp;&amp;</span> <span class="n">w</span> <span class="o">&lt;=</span> <span class="mi">1000000</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">h</span> <span class="o">&amp;&amp;</span> <span class="n">h</span> <span class="o">&lt;=</span> <span class="mi">1000000</span><span class="p">);</span>

    <span class="n">size_t</span> <span class="n">n</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

    <span class="n">assert</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">xs</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">ys</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="n">ys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">map</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(;</span> <span class="n">n</span><span class="p">;</span> <span class="o">--</span><span class="n">n</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">long</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">top</span><span class="p">;</span> <span class="c">// masking tape</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">left</span> <span class="o">&gt;&gt;</span> <span class="n">bottom</span> <span class="o">&gt;&gt;</span> <span class="n">right</span> <span class="o">&gt;&gt;</span> <span class="n">top</span><span class="p">;</span>

        <span class="n">assert</span><span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">);</span>

        <span class="n">assert</span><span class="p">(</span><span class="n">bottom</span> <span class="o">&lt;</span> <span class="n">top</span><span class="p">);</span>

        <span class="k">const</span> <span class="n">size_t</span> <span class="n">lower_xi</span> <span class="o">=</span> <span class="n">insert_x</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">map</span><span class="p">,</span> <span class="n">left</span><span class="p">);</span>

        <span class="k">const</span> <span class="n">size_t</span> <span class="n">upper_xi</span> <span class="o">=</span> <span class="n">insert_x</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">map</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>

        <span class="k">const</span> <span class="n">size_t</span> <span class="n">lower_yi</span> <span class="o">=</span> <span class="n">insert_y</span><span class="p">(</span><span class="n">ys</span><span class="p">,</span> <span class="n">map</span><span class="p">,</span> <span class="n">bottom</span><span class="p">);</span>

        <span class="k">const</span> <span class="n">size_t</span> <span class="n">upper_yi</span> <span class="o">=</span> <span class="n">insert_y</span><span class="p">(</span><span class="n">ys</span><span class="p">,</span> <span class="n">map</span><span class="p">,</span> <span class="n">top</span><span class="p">);</span>

        <span class="n">REP</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="n">lower_xi</span><span class="p">,</span> <span class="n">upper_xi</span><span class="p">)</span> <span class="n">REP</span><span class="p">(</span><span class="n">yi</span><span class="p">,</span> <span class="n">lower_yi</span><span class="p">,</span> <span class="n">upper_yi</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">map</span><span class="p">[</span><span class="n">xi</span><span class="p">][</span><span class="n">yi</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">const</span> <span class="n">size_t</span> <span class="n">xn</span> <span class="o">=</span> <span class="n">xs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">const</span> <span class="n">size_t</span> <span class="n">yn</span> <span class="o">=</span> <span class="n">ys</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

    <span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">REP</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">xn</span><span class="p">)</span> <span class="n">REP</span><span class="p">(</span><span class="n">yi</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">yn</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">xi</span><span class="p">][</span><span class="n">yi</span><span class="p">])</span>
    <span class="p">{</span>
        <span class="o">++</span><span class="n">count</span><span class="p">;</span>

        <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">size_t</span><span class="p">,</span> <span class="n">size_t</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>

<span class="cp">#define PUSH(XI, YI) if (map[XI][YI]) { map[XI][YI] = false; q.push(std::make_pair(XI, YI)); }</span>

        <span class="n">PUSH</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="n">yi</span><span class="p">);</span>

        <span class="k">while</span> <span class="p">(</span><span class="o">!</span> <span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="k">const</span> <span class="n">size_t</span> <span class="n">xj</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>

            <span class="k">const</span> <span class="n">size_t</span> <span class="n">yj</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>

            <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">xj</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="c">// left</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">yj</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">yj</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="c">// top</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span><span class="p">,</span> <span class="n">yj</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">xj</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">xn</span><span class="p">)</span> <span class="c">// right</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">yj</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">yj</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">yn</span><span class="p">)</span> <span class="c">// bottom</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span><span class="p">,</span> <span class="n">yj</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

<span class="cp">#undef PUSH</span>

    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/6324/addtag/" class="addtag" id="addtag_6324">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081122161717/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20081122161717/http://ja.doukaku.org/comment/6324/download/">
		download code
      </a>]
	  [<a href="/web/20081122161717/http://ja.doukaku.org/comment/6324/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6324"
  >-</span><span
  class="button yellow"
  id="rating_z_6324"
  >0</span><span 
  class="button green"
  id="rating_p_6324"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081122161717/http://ja.doukaku.org/comment/6324/">
    1
    reply
  </a>

  [<a href="/web/20081122161717/http://ja.doukaku.org/162/reply_to/6324/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6325">
  <p class="banner"><a href="/web/20081122161717/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20081122161717/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/">#6325</a>(<script language="JavaScript">print_time(new Date("2008/05/23 14:40 GMT"));</script><noscript>2008/05/23 14:40 GMT</noscript>)
	
	
	
	[<a href="/web/20081122161717/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>map を一気に作るようにしてみましたが、それだけじゃ不足みたいですね・・・速くはなったけど依然時間何に終わらず。飽きたのでとりあえずここまで。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;queue&gt;</span>
<span class="cp">#include &lt;utility&gt;</span>
<span class="cp">#include &lt;cassert&gt;</span>

<span class="cp">#define REP(i, b, e) for (size_t i = b; i &lt; e; ++i)</span>

<span class="k">struct</span> <span class="n">rect</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="n">left</span><span class="p">,</span> <span class="n">bottom</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">top</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="n">sort_and_unique</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="n">v</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">unique</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">()),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
<span class="p">}</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
<span class="n">size_t</span> <span class="n">find</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;&amp;</span> <span class="n">v</span><span class="p">,</span> <span class="k">const</span> <span class="n">T</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">value</span><span class="p">);</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="k">return</span> <span class="n">it</span> <span class="o">-</span> <span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="kt">long</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">w</span> <span class="o">&gt;&gt;</span> <span class="n">h</span><span class="p">;</span>

    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">w</span> <span class="o">&amp;&amp;</span> <span class="n">w</span> <span class="o">&lt;=</span> <span class="mi">1000000</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">h</span> <span class="o">&amp;&amp;</span> <span class="n">h</span> <span class="o">&lt;=</span> <span class="mi">1000000</span><span class="p">);</span>

    <span class="n">size_t</span> <span class="n">n</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>

    <span class="n">assert</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;=</span> <span class="n">n</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">1000</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">rect</span><span class="o">&gt;</span> <span class="n">tapes</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(;</span> <span class="n">n</span><span class="p">;</span> <span class="o">--</span><span class="n">n</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">rect</span> <span class="n">r</span><span class="p">;</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">left</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">bottom</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">right</span> <span class="o">&gt;&gt;</span> <span class="n">r</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>

        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">.</span><span class="n">left</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="p">.</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">.</span><span class="n">right</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="p">.</span><span class="n">right</span> <span class="o">&lt;=</span> <span class="n">w</span><span class="p">);</span>

        <span class="n">assert</span><span class="p">(</span><span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">r</span><span class="p">.</span><span class="n">bottom</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="p">.</span><span class="n">bottom</span> <span class="o">&lt;</span> <span class="n">r</span><span class="p">.</span><span class="n">top</span> <span class="o">&amp;&amp;</span> <span class="n">r</span><span class="p">.</span><span class="n">top</span> <span class="o">&lt;=</span> <span class="n">h</span><span class="p">);</span>

        <span class="n">tapes</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">r</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">xs</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">w</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">long</span><span class="o">&gt;</span> <span class="n">ys</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span> <span class="n">ys</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ys</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">h</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">rect</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">tapes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">tapes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">xs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
        <span class="n">xs</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
        <span class="n">ys</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">bottom</span><span class="p">);</span>
        <span class="n">ys</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">sort_and_unique</span><span class="p">(</span><span class="n">xs</span><span class="p">);</span>
    <span class="n">sort_and_unique</span><span class="p">(</span><span class="n">ys</span><span class="p">);</span>

    <span class="k">const</span> <span class="n">size_t</span> <span class="n">xn</span> <span class="o">=</span> <span class="n">xs</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">size_t</span> <span class="n">yn</span> <span class="o">=</span> <span class="n">ys</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">map</span><span class="p">(</span><span class="n">xn</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">yn</span><span class="p">,</span> <span class="kc">true</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">rect</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">tapes</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">it</span> <span class="o">!=</span> <span class="n">tapes</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">const</span> <span class="n">size_t</span> <span class="n">lower_xi</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">);</span>
        <span class="k">const</span> <span class="n">size_t</span> <span class="n">upper_xi</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">);</span>
        <span class="k">const</span> <span class="n">size_t</span> <span class="n">lower_yi</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">ys</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">bottom</span><span class="p">);</span>
        <span class="k">const</span> <span class="n">size_t</span> <span class="n">upper_yi</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="n">ys</span><span class="p">,</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">top</span><span class="p">);</span>

        <span class="n">REP</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="n">lower_xi</span><span class="p">,</span> <span class="n">upper_xi</span><span class="p">)</span> <span class="n">REP</span><span class="p">(</span><span class="n">yi</span><span class="p">,</span> <span class="n">lower_yi</span><span class="p">,</span> <span class="n">upper_yi</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">map</span><span class="p">[</span><span class="n">xi</span><span class="p">][</span><span class="n">yi</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">REP</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">xn</span><span class="p">)</span> <span class="n">REP</span><span class="p">(</span><span class="n">yi</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">yn</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">xi</span><span class="p">][</span><span class="n">yi</span><span class="p">])</span>
    <span class="p">{</span>
        <span class="o">++</span><span class="n">count</span><span class="p">;</span>

        <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">size_t</span><span class="p">,</span> <span class="n">size_t</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>

<span class="cp">#define PUSH(XI, YI) if (map[XI][YI]) { map[XI][YI] = false; q.push(std::make_pair(XI, YI)); }</span>

        <span class="n">PUSH</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="n">yi</span><span class="p">);</span>

        <span class="k">while</span> <span class="p">(</span><span class="o">!</span> <span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="k">const</span> <span class="n">size_t</span> <span class="n">xj</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">first</span><span class="p">;</span>

            <span class="k">const</span> <span class="n">size_t</span> <span class="n">yj</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">second</span><span class="p">;</span>

            <span class="n">q</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">xj</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="c">// left</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">yj</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">yj</span> <span class="o">&gt;=</span> <span class="mi">1</span><span class="p">)</span> <span class="c">// top</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span><span class="p">,</span> <span class="n">yj</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">xj</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">xn</span><span class="p">)</span> <span class="c">// right</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">yj</span><span class="p">);</span>
            <span class="p">}</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">yj</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">yn</span><span class="p">)</span> <span class="c">// bottom</span>
            <span class="p">{</span>
                <span class="n">PUSH</span><span class="p">(</span><span class="n">xj</span><span class="p">,</span> <span class="n">yj</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>

<span class="cp">#undef PUSH</span>

    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">count</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/addtag/" class="addtag" id="addtag_6325">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081122161717/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/download/">
		download code
      </a>]
	  [<a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6325"
  >-</span><span
  class="button yellow"
  id="rating_z_6325"
  >0</span><span 
  class="button green"
  id="rating_p_6325"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081122161717/http://ja.doukaku.org/comment/6324/"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/root/"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/">
    1
    reply
  </a>

  [<a href="/web/20081122161717/http://ja.doukaku.org/162/reply_to/6325/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6601">
  <p class="banner"><a href="/web/20081122161717/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20081122161717/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/6601/">#6601</a>(<script language="JavaScript">print_time(new Date("2008/06/28 06:35 GMT"));</script><noscript>2008/06/28 06:35 GMT</noscript>)
	
	
	
	[<a href="/web/20081122161717/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>memsetを使うようにしたところ，大幅に高速化しました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- 5.cpp    Wed Jun 25 16:56:20 2008</span>
<span class="gi">+++ 5.cpp    Sat Jun 28 20:33:02 2008</span>
<span class="gu">@@ -5,6 +5,7 @@</span>
 #include &lt;queue&gt;
 #include &lt;utility&gt;
 #include &lt;cassert&gt;
<span class="gi">+#include &lt;cstring&gt; // memset()</span>
 
 #define REP(i, b, e) for (size_t i = b; i &lt; e; ++i)
 
<span class="gu">@@ -24,7 +25,7 @@</span>
 template &lt;typename T&gt;
 size_t find(const std::vector&lt;T&gt;&amp; v, const T&amp; value)
 {
<span class="gd">-    std::vector&lt;T&gt;::const_iterator it = std::lower_bound(v.begin(), v.end(), value);</span>
<span class="gi">+    typename std::vector&lt;T&gt;::const_iterator it = std::lower_bound(v.begin(), v.end(), value);</span>
 
     assert(it != v.end());
 
<span class="gu">@@ -78,7 +79,7 @@</span>
     const size_t xn = xs.size() - 1;
     const size_t yn = ys.size() - 1;
 
<span class="gd">-    std::vector&lt;std::vector&lt;int&gt; &gt; map(xn, std::vector&lt;int&gt;(yn, true));</span>
<span class="gi">+    std::vector&lt;std::vector&lt;unsigned char&gt; &gt; map(xn, std::vector&lt;unsigned char&gt;(yn, 1));</span>
 
     for (std::vector&lt;rect&gt;::const_iterator it = tapes.begin(); it != tapes.end(); ++it)
     {
<span class="gu">@@ -87,9 +88,9 @@</span>
         const size_t lower_yi = find(ys, it-&gt;bottom);
         const size_t upper_yi = find(ys, it-&gt;top);
 
<span class="gd">-        REP(xi, lower_xi, upper_xi) REP(yi, lower_yi, upper_yi)</span>
<span class="gi">+        REP(xi, lower_xi, upper_xi)</span>
         {
<span class="gd">-            map[xi][yi] = false;</span>
<span class="gi">+            std::memset(&amp;map[xi][lower_yi], 0, (upper_yi - lower_yi) * sizeof(unsigned char));</span>
         }
     }
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081122161717/http://ja.doukaku.org/comment/6601/addtag/" class="addtag" id="addtag_6601">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081122161717/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20081122161717/http://ja.doukaku.org/comment/6601/download/">
		download code
      </a>]
	  [<a href="/web/20081122161717/http://ja.doukaku.org/comment/6601/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6601"
  >-</span><span
  class="button yellow"
  id="rating_z_6601"
  >0</span><span 
  class="button green"
  id="rating_p_6601"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081122161717/http://ja.doukaku.org/comment/6325/"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081122161717/http://ja.doukaku.org/comment/6601/root/"><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081122161717/http://ja.doukaku.org/162/reply_to/6601/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20081122161717if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">Index</h4>

<ul>
<!--<li><a href="/web/20081122161717/http://ja.doukaku.org/user/">Users</a>-->
<li><a href="/web/20081122161717/http://ja.doukaku.org/lang/">Languages</a>
<li><a href="/web/20081122161717/http://ja.doukaku.org/challenge/">Challenges</a>
<li><a href="/web/20081122161717/http://ja.doukaku.org/topic/">Topics</a>
<li><a href="/web/20081122161717/http://ja.doukaku.org/comment/">Comments</a>
<li><a href="/web/20081122161717/http://ja.doukaku.org/good_comments/">Good comments</a>
<li><a href="/web/20081122161717/http://ja.doukaku.org/tag/">Tags</a>
</ul>

<h4 class="compact">Feed</h4>
<ul>
<li><a href="/web/20081122161717/http://ja.doukaku.org/feeds/challenges/">Latest challenges</a><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20081122161717/http://ja.doukaku.org/feeds/topics/">Latest topics</a><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20081122161717/http://ja.doukaku.org/feeds/comments/">Latest comments</a><img src="/web/20081122161717im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">Other</h4>
<ul>
<li><a href="/web/20081122161717/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20081122161717/http://ja.doukaku.org/feedback/">Feedback</a>
<!--<li><a href="/web/20081122161717/http://ja.doukaku.org/terms">Terms</a>-->
</ul>


<h4 class="compact">Link</h4>
<ul>
<li><a href="/web/20081122161717/http://www.lingr.com/room/doukaku_ja">Chatroom in Lingr</a>
<li><a href="/web/20081122161717/http://labs.cybozu.co.jp/">Cybozu Labs.</a>
<li><a href="/web/20081122161717/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20081122161717/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20081122161717/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20081122161717im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20081122161717/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20081122161717/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20081122161717/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20081122161717js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 16:17:17 Nov 22, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:11:13 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
