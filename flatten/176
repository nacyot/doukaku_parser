
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
分数の発見
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20091102033936cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20091102033936cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20091102033936cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20091102033936/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20091102033936/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20091102033936js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20091102033936js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20091102033936js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20091102033936js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app3.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/176\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "2";
var displayMonth = "Nov";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/176/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20091102033936" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081203184315/http://ja.doukaku.org/176/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="3 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 3:39:36 Nov 2, 2009">NOV</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Dec
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081203184315/http://ja.doukaku.org/176/flatten/" title="18:43:15 Dec 3, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 3:39:36 Nov 2, 2009">2</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2008
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 3:39:36 Nov 2, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20091102033936*/http://ja.doukaku.org/176/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">3 Dec 08 - 2 Nov 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000001_2009:10:000000000010_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20091102033936/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
[トピック]
<a href="/web/20091102033936/http://ja.doukaku.org/176/">分数の発見</a>
</h2>

    





<div class="comment" id="comment6278">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/780/" target="_top">gandalf</a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6278/">#6278</a>(<script language="JavaScript">print_time(new Date("2008/05/09 23:35 GMT"));</script><noscript>2008/05/09 23:35 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>schemeにはrationalizeという手続きがありますが、これは結果を一つしか返しません。そして、複数の結果が欲しい場合も稀にあります。</p>
<p>そこで、非負の実数aが一つ与えられたときに、以下の条件を満たす分数b/cをaに近い順に全て表示する手続きを考えてみてください。条件は、
1. 分数b/cよりaに近い分数d/cは存在しない
2. 分数b/cは既約
3. cは1桁の整数
です。</p>
<p>例をいくつかあげます(あってると思うけど...)。</p>
<p>a = 1.732051
12/7 7/4 16/9 5/3 9/5 3/2 2/1</p>
<p>a = 3.141593
22/7 25/8 19/6 28/9 16/5 13/4 3/1</p>
<p>a = 1920 / 1080
16/9 9/5 7/4 11/6 12/7 5/3 2/1</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6278/addtag/" class="addtag" id="addtag_6278">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6278"
  >-</span><span
  class="button yellow"
  id="rating_z_6278"
  >0</span><span 
  class="button green"
  id="rating_p_6278"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6278/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20091102033936/http://ja.doukaku.org/176/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20091102033936/http://ja.doukaku.org/176/nested/">ネスト表示</a>
<a href="/web/20091102033936/http://ja.doukaku.org/176/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment6282">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6282/">#6282</a>(<script language="JavaScript">print_time(new Date("2008/05/12 01:40 GMT"));</script><noscript>2008/05/12 01:40 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>この場合はあまり役に立ってませんが、分数クラスを定義してみました。
こんな感じでどうでしょうか？</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample176</span> <span class="o">{</span>

    <span class="k">public</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Rational</span><span class="o">&gt;</span> <span class="n">rationalizes</span><span class="o">(</span><span class="k">final</span> <span class="kt">double</span> <span class="n">d</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Rational</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Rational</span><span class="o">,</span> <span class="n">Double</span><span class="o">&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">nume</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">(</span><span class="n">d</span> <span class="o">*</span> <span class="n">index</span><span class="o">);</span>
            <span class="n">Rational</span> <span class="n">r1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rational</span><span class="o">(</span><span class="n">nume</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
            <span class="n">Rational</span> <span class="n">r2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Rational</span><span class="o">(</span><span class="n">nume</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">((</span><span class="n">r2</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">-</span> <span class="n">d</span><span class="o">)</span> <span class="o">-</span> <span class="o">(</span><span class="n">d</span> <span class="o">-</span> <span class="n">r1</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">())</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">r1</span><span class="o">,</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">r1</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">-</span> <span class="n">d</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">r2</span><span class="o">,</span> <span class="n">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">r2</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">-</span> <span class="n">d</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Rational</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Rational</span><span class="o">&gt;(</span><span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">());</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">result</span><span class="o">,</span> <span class="k">new</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">Rational</span><span class="o">&gt;()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">compare</span><span class="o">(</span><span class="n">Rational</span> <span class="n">o1</span><span class="o">,</span> <span class="n">Rational</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">Double</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">o1</span><span class="o">),</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">o2</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">rationalizes</span><span class="o">(</span><span class="mf">1.732051</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">rationalizes</span><span class="o">(</span><span class="mf">3.141593</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">rationalizes</span><span class="o">((</span><span class="kt">double</span><span class="o">)</span> <span class="mi">1920</span> <span class="o">/</span> <span class="mi">1080</span><span class="o">));</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="k">class</span> <span class="nc">Rational</span> <span class="k">extends</span> <span class="n">Number</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">numerator</span><span class="o">;</span>
    <span class="k">public</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">denominator</span><span class="o">;</span>

    <span class="k">public</span> <span class="n">Rational</span><span class="o">(</span><span class="kt">int</span> <span class="n">p</span><span class="o">,</span> <span class="kt">int</span> <span class="n">q</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">nume</span> <span class="o">=</span> <span class="n">p</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">deno</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">deno</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;#N/A&quot;</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">nume</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">deno</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">deno</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">nume</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="n">deno</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">gcd</span><span class="o">(</span><span class="n">nume</span><span class="o">,</span> <span class="n">deno</span><span class="o">);</span>
        <span class="n">numerator</span> <span class="o">=</span> <span class="n">nume</span> <span class="o">/</span> <span class="n">r</span><span class="o">;</span>
        <span class="n">denominator</span> <span class="o">=</span> <span class="n">deno</span> <span class="o">/</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="kt">int</span> <span class="n">gcd</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">m</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">p</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="n">m</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">p</span> <span class="o">%</span> <span class="n">q</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">p</span> <span class="o">=</span> <span class="n">q</span><span class="o">;</span>
            <span class="n">q</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">p</span> <span class="o">%</span> <span class="n">q</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">q</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">intValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">long</span> <span class="n">longValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">intValue</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">float</span> <span class="n">floatValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">float</span><span class="o">)</span> <span class="k">this</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">double</span> <span class="n">doubleValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="kt">double</span><span class="o">)</span> <span class="n">numerator</span> <span class="o">/</span> <span class="n">denominator</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">numerator</span> <span class="o">+</span> <span class="n">denominator</span> <span class="o">*</span> <span class="mi">7</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">boolean</span> <span class="n">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(!(</span><span class="n">obj</span> <span class="k">instanceof</span> <span class="n">Rational</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="n">Rational</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="n">Rational</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">denominator</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">denominator</span>
            <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">numerator</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">numerator</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;%d/%d&quot;</span><span class="o">,</span> <span class="n">numerator</span><span class="o">,</span> <span class="n">denominator</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6282/addtag/" class="addtag" id="addtag_6282">タグ</a>:
	
    
    <a href="/web/20091102033936/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6282/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6282/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6282"
  >-</span><span
  class="button yellow"
  id="rating_z_6282"
  >0</span><span 
  class="button green"
  id="rating_p_6282"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6282/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6305">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6305/">#6305</a>(<script language="JavaScript">print_time(new Date("2008/05/20 07:41 GMT"));</script><noscript>2008/05/20 07:41 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>表示が不完全だけど、リストを取り出すだけならば
&gt;(rationalize-list 1.732051)
(12/7 7/4 16/9 5/3 9/5 3/2 2)

分数の時が不完全な表示になります。
&gt;(print-rationalize-list 1920/1080 )
16/9 =&gt; 16/9 9/5 7/4 11/6 12/7 5/3 2/1 
NIL

単にニュートン法の応用です。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre>(defun check (given fraction min max)
  (let ((center (floor (/ (+ min max) 2))))
    (if (or (equal center min) (equal center max))
    (/ (check-near given fraction (cons min max)) fraction)
    (if (&gt; (* given fraction) center)
        (check given fraction center max)
        (check given fraction min center)))))

(defun check-near (given fraction list)
  (if (&gt; (- given (/ (car list) fraction))
     (- (/ (cdr list) fraction) given))
      (cdr list)
      (car list)))

(defun rationalize-list (given)
  (let (list)
    (loop for i from 1 to 9 do
     (let ((ans (check given i 0 (* (1+ i) given))))
       (and (not (find ans list))
        (push ans list))))
    (sort list
      #&#39;(lambda(x y)(&lt; (abs (- x given))
               (abs (- given y)))))))

(defun print-rationalize-list (given)
  (let ((list (rationalize-list given)))
    (format t &quot;~s =&gt; &quot; given)
    (loop for v in list do
     (multiple-value-bind (f r) (floor v)
       (if (zerop r)
           (format t &quot;~d/1 &quot; v)
           (format t &quot;~d &quot; v))))
       (format t &quot;~%&quot;)))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6305/addtag/" class="addtag" id="addtag_6305">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6305/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6305/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6305"
  >-</span><span
  class="button yellow"
  id="rating_z_6305"
  >0</span><span 
  class="button green"
  id="rating_p_6305"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6305/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6313">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6313/">#6313</a>(<script language="JavaScript">print_time(new Date("2008/05/21 05:42 GMT"));</script><noscript>2008/05/21 05:42 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">gcd</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="k">assert</span> <span class="n">m</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">assert</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">n</span><span class="p">:</span>
        <span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">%</span> <span class="n">n</span>
    <span class="k">assert</span> <span class="n">m</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">m</span>

<span class="k">class</span> <span class="nc">Rational</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span> <span class="o">//</span> <span class="n">g</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span> <span class="o">//</span> <span class="n">g</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s">/</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">c</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__cmp__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">that</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">*</span> <span class="n">that</span><span class="o">.</span><span class="n">c</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">*</span> <span class="n">that</span><span class="o">.</span><span class="n">b</span>

    <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">)</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">c</span>

<span class="k">def</span> <span class="nf">rationalize</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="n">rationals</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">c</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">Rational</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">r</span><span class="o">.</span><span class="n">b</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span>
            <span class="n">rationals</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
    <span class="n">rationals</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">r</span><span class="p">:</span> <span class="nb">abs</span><span class="p">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">r</span><span class="o">.</span><span class="n">value</span><span class="p">()))</span>
    <span class="k">return</span> <span class="n">rationals</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">a</span><span class="p">):</span>
    <span class="k">print</span> <span class="s">&quot;a = </span><span class="si">%f</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">a</span><span class="p">,</span> <span class="s">&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">repr</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rationalize</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">solve</span><span class="p">(</span><span class="mf">1.732051</span><span class="p">)</span>
    <span class="n">solve</span><span class="p">(</span><span class="mf">3.141593</span><span class="p">)</span>
    <span class="n">solve</span><span class="p">(</span><span class="mf">1920.0</span> <span class="o">/</span> <span class="mi">1080</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6313/addtag/" class="addtag" id="addtag_6313">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6313/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6313/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6313"
  >-</span><span
  class="button yellow"
  id="rating_z_6313"
  >0</span><span 
  class="button green"
  id="rating_p_6313"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6313/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6517">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/760/" target="_top">turugina</a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6517/">#6517</a>(<script language="JavaScript">print_time(new Date("2008/06/16 02:56 GMT"));</script><noscript>2008/06/16 02:56 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  boost::math::gcd で既約分数のチェックは楽できました。
それ以外は普通？
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;cmath&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;stdexcept&gt;</span>

<span class="cp">#include &lt;boost/math/common_factor_rt.hpp&gt;</span>
<span class="cp">#include &lt;boost/lexical_cast.hpp&gt;</span>

<span class="k">class</span> <span class="nc">rational_t</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">n_</span><span class="p">,</span> <span class="n">d_</span><span class="p">;</span>
  <span class="kt">double</span> <span class="n">r_</span><span class="p">;</span>

  <span class="k">public</span><span class="o">:</span>
  <span class="n">rational_t</span><span class="p">(</span><span class="kt">int</span> <span class="n">numerator</span><span class="p">,</span> <span class="kt">int</span> <span class="n">denominator</span><span class="p">)</span>
    <span class="o">:</span> <span class="n">n_</span><span class="p">(</span><span class="n">numerator</span><span class="p">),</span> <span class="n">d_</span><span class="p">(</span><span class="n">denominator</span><span class="p">),</span>
    <span class="n">r_</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">n_</span><span class="p">)</span><span class="o">/</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">d_</span><span class="p">))</span> <span class="p">{}</span>

  <span class="kt">double</span> <span class="n">real</span><span class="p">()</span> <span class="k">const</span>
  <span class="p">{</span> <span class="k">return</span> <span class="n">r_</span><span class="p">;</span> <span class="p">}</span>
  <span class="kt">bool</span> <span class="n">isnan</span><span class="p">()</span> <span class="k">const</span>
  <span class="p">{</span> <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">isnan</span><span class="p">(</span><span class="n">r_</span><span class="p">);</span> <span class="p">}</span>

  <span class="kt">int</span> <span class="n">numerator</span><span class="p">()</span> <span class="k">const</span>
  <span class="p">{</span> <span class="k">return</span> <span class="n">n_</span><span class="p">;</span> <span class="p">}</span>
  <span class="kt">int</span> <span class="n">denominator</span><span class="p">()</span> <span class="k">const</span>
  <span class="p">{</span> <span class="k">return</span> <span class="n">d_</span><span class="p">;</span> <span class="p">}</span>
<span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span>
<span class="k">operator</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">os</span><span class="p">,</span> <span class="k">const</span> <span class="n">rational_t</span><span class="o">&amp;</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="p">(</span><span class="n">os</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="p">.</span><span class="n">numerator</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;/&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">r</span><span class="p">.</span><span class="n">denominator</span><span class="p">());</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">compare_near_to</span>
<span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">binary_function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="n">rational_t</span><span class="p">,</span> <span class="n">rational_t</span><span class="o">&gt;</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">g_</span><span class="p">;</span>
  <span class="k">public</span><span class="o">:</span>
  <span class="n">compare_near_to</span><span class="p">(</span><span class="kt">double</span> <span class="n">goal</span><span class="p">)</span> <span class="o">:</span> <span class="n">g_</span><span class="p">(</span><span class="n">goal</span><span class="p">)</span> <span class="p">{}</span>

  <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span>
      <span class="k">const</span> <span class="n">rational_t</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span>
      <span class="k">const</span> <span class="n">rational_t</span><span class="o">&amp;</span> <span class="n">rhs</span>
      <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">fabs</span><span class="p">(</span><span class="n">g_</span><span class="o">-</span><span class="n">lhs</span><span class="p">.</span><span class="n">real</span><span class="p">())</span> <span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">fabs</span><span class="p">(</span><span class="n">g_</span><span class="o">-</span><span class="n">rhs</span><span class="p">.</span><span class="n">real</span><span class="p">());</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="n">rational_t</span>
<span class="n">find_rational</span><span class="p">(</span>
    <span class="kt">double</span>  <span class="n">goal</span><span class="p">,</span>
    <span class="kt">int</span>     <span class="n">denominator</span>
    <span class="p">)</span>
<span class="p">{</span>
  <span class="kt">double</span> <span class="n">min_diff</span> <span class="o">=</span> <span class="n">goal</span><span class="p">;</span>

  <span class="n">rational_t</span> <span class="n">rat</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">denominator</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">;</span> <span class="o">++</span><span class="n">n</span> <span class="p">)</span> <span class="p">{</span>
    <span class="n">rational_t</span> <span class="n">rat_</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">denominator</span><span class="p">);</span>
    <span class="kt">double</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">fabs</span><span class="p">(</span><span class="n">goal</span> <span class="o">-</span> <span class="n">rat_</span><span class="p">.</span><span class="n">real</span><span class="p">());</span>

    <span class="k">if</span> <span class="p">(</span> <span class="n">diff</span> <span class="o">&gt;</span> <span class="n">min_diff</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>

    <span class="n">min_diff</span> <span class="o">=</span> <span class="n">diff</span><span class="p">;</span>
    <span class="n">rat</span> <span class="o">=</span> <span class="n">rat_</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">boost</span><span class="o">::</span><span class="n">math</span><span class="o">::</span><span class="n">gcd</span><span class="p">(</span><span class="n">rat</span><span class="p">.</span><span class="n">numerator</span><span class="p">(),</span> <span class="n">rat</span><span class="p">.</span><span class="n">denominator</span><span class="p">())</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="k">return</span> <span class="n">rational_t</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span> <span class="c">// causes real is NaN</span>
  <span class="k">return</span> <span class="n">rat</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span> <span class="n">c</span> <span class="o">!=</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; &lt;real number|rational number&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kt">double</span> <span class="n">goal</span><span class="p">;</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">val</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">size_type</span> <span class="n">idx</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">idx</span> <span class="o">=</span> <span class="n">val</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">))</span> <span class="o">!=</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">npos</span> <span class="p">)</span>
      <span class="n">goal</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">lexical_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">val</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">idx</span><span class="p">))</span> <span class="o">/</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">lexical_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">val</span><span class="p">.</span><span class="n">substr</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">val</span><span class="p">.</span><span class="n">length</span><span class="p">()</span><span class="o">-</span><span class="p">(</span><span class="n">idx</span><span class="o">+</span><span class="mi">1</span><span class="p">)));</span>
    <span class="k">else</span>
      <span class="n">goal</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">lexical_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>

    <span class="k">if</span> <span class="p">(</span> <span class="n">goal</span> <span class="o">&lt;=</span> <span class="mf">0.0</span> <span class="p">)</span>
      <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="s">&quot;input number must be positive&quot;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">rational_t</span><span class="o">&gt;</span> <span class="n">rationals</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
    <span class="n">rationals</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">find_rational</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="n">i</span><span class="p">));</span>

  <span class="n">rationals</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span>
      <span class="n">std</span><span class="o">::</span><span class="n">remove_if</span><span class="p">(</span>
        <span class="n">rationals</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span>
        <span class="n">rationals</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
        <span class="n">std</span><span class="o">::</span><span class="n">mem_fun_ref</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rational_t</span><span class="o">::</span><span class="n">isnan</span><span class="p">)</span> <span class="p">),</span>
      <span class="n">rationals</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
  <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span>
      <span class="n">rationals</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span>
      <span class="n">rationals</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">compare_near_to</span><span class="p">(</span><span class="n">goal</span><span class="p">)</span> <span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span>
      <span class="n">rationals</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span>
      <span class="n">rationals</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">std</span><span class="o">::</span><span class="n">ostream_iterator</span><span class="o">&lt;</span><span class="n">rational_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="p">,</span> <span class="s">&quot;, &quot;</span><span class="p">)</span> <span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6517/addtag/" class="addtag" id="addtag_6517">タグ</a>:
	
    
    <a href="/web/20091102033936/http://ja.doukaku.org/tag/Boost/">Boost</a>
    
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6517/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6517/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6517"
  >-</span><span
  class="button yellow"
  id="rating_z_6517"
  >0</span><span 
  class="button green"
  id="rating_p_6517"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6517/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6747">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/845/" target="_top">ISA</a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6747/">#6747</a>(<script language="JavaScript">print_time(new Date("2008/07/16 04:40 GMT"));</script><noscript>2008/07/16 04:40 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>同じ値の分数かどうかを「入力との差が等しいかどうか」で判定しているので、入力の値によっては誤差が出るかも……</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">rationalizes</span> <span class="n">value</span>
  <span class="c1"># [入力との差, [分母, 分子]]からなる配列を作成する</span>
  <span class="n">candidates</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">moderator</span><span class="o">|</span>
    <span class="n">numerator</span>  <span class="o">=</span> <span class="p">(</span><span class="n">value</span><span class="o">*</span><span class="n">moderator</span><span class="p">)</span><span class="o">.</span><span class="n">round</span>
    <span class="n">difference</span> <span class="o">=</span> <span class="p">(</span><span class="n">value</span><span class="o">-</span><span class="n">numerator</span><span class="o">.</span><span class="n">quo</span><span class="p">(</span><span class="n">moderator</span><span class="p">))</span><span class="o">.</span><span class="n">abs</span>
    <span class="o">[</span><span class="n">difference</span><span class="p">,</span> <span class="o">[</span><span class="n">moderator</span><span class="p">,</span> <span class="n">numerator</span><span class="o">]]</span>
  <span class="k">end</span>
  
  <span class="c1"># 入力との差、分母の順に比較してソートすることで、</span>
  <span class="c1"># 入力との差が等しい場合には分母の小さい分数が先に並ぶ</span>
  <span class="c1"># その上で、差が等しい場合は最初の分数のみを選択することで、</span>
  <span class="c1"># 既約分数のみが返却される</span>
  <span class="n">latest_difference</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="n">candidates</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="p">(</span><span class="n">difference</span><span class="p">,</span> <span class="p">(</span><span class="n">moderator</span><span class="p">,</span> <span class="n">numerator</span><span class="p">))</span><span class="o">|</span>
    <span class="k">unless</span> <span class="n">difference</span> <span class="o">==</span> <span class="n">latest_difference</span>
      <span class="n">latest_difference</span> <span class="o">=</span> <span class="n">difference</span>
      <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">numerator</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">moderator</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
    <span class="n">result</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">732051</span><span class="p">)</span>      <span class="c1">#=&gt; [&quot;12/7&quot;, &quot;7/4&quot;, &quot;16/9&quot;, &quot;5/3&quot;, &quot;9/5&quot;, &quot;3/2&quot;, &quot;2/1&quot;]</span>
<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">141593</span><span class="p">)</span>      <span class="c1">#=&gt; [&quot;22/7&quot;, &quot;25/8&quot;, &quot;19/6&quot;, &quot;28/9&quot;, &quot;16/5&quot;, &quot;13/4&quot;, &quot;3/1&quot;]</span>
<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">1920</span> <span class="o">/</span> <span class="mi">1080</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; [&quot;16/9&quot;, &quot;9/5&quot;, &quot;7/4&quot;, &quot;11/6&quot;, &quot;12/7&quot;, &quot;5/3&quot;, &quot;2/1&quot;]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6747/addtag/" class="addtag" id="addtag_6747">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6747/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6747/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6747"
  >-</span><span
  class="button yellow"
  id="rating_z_6747"
  >0</span><span 
  class="button green"
  id="rating_p_6747"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20091102033936/http://ja.doukaku.org/comment/6747/">
    1
    reply
  </a>

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6747/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6752">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/845/" target="_top">ISA</a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6752/">#6752</a>(<script language="JavaScript">print_time(new Date("2008/07/16 21:08 GMT"));</script><noscript>2008/07/16 21:08 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>「差が等しい」だと符号が違う値を同じ分数だとみなしてしまうので、値自体を比較に使用するように修正しました。</p>
<p>また、条件1には抵触しませんが「近い順に全て」という問いなので、「差が等しく」「分母が同じで」「分子が異なる」分数が検知できないのは間違いだと考えて修正しました。</p>
<p>※例えば0.7を入力した場合、分母が5の分数は4/5しか見つけられないが、3/5も4/5と同じだけ近いので検出されるべきではないか？　という話</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">rationalizes</span> <span class="n">value</span>
  <span class="c1"># [浮動小数点数, [分母, 分子]]からなる配列を作成する</span>
  <span class="n">candidates</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">9</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="n">moderator</span><span class="o">|</span>
    <span class="c1"># 四捨五入すれば分母の近似値が求められるが、</span>
    <span class="c1"># .5の場合は両方を使用する</span>
    <span class="n">numerator</span> <span class="o">=</span> <span class="n">value</span> <span class="o">*</span> <span class="n">moderator</span>
    <span class="k">if</span> <span class="n">numerator</span><span class="o">%</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span> <span class="o">==</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
      <span class="n">numerators</span> <span class="o">=</span> <span class="o">[</span><span class="n">numerator</span><span class="o">.</span><span class="n">floor</span><span class="p">,</span> <span class="n">numerator</span><span class="o">.</span><span class="n">ceil</span><span class="o">]</span>
    <span class="k">else</span>
      <span class="n">numerators</span> <span class="o">=</span> <span class="o">[</span><span class="n">numerator</span><span class="o">.</span><span class="n">round</span><span class="o">]</span>
    <span class="k">end</span>
    
    <span class="n">numerators</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">numerator</span><span class="o">|</span>
      <span class="n">float</span> <span class="o">=</span> <span class="n">numerator</span><span class="o">.</span><span class="n">quo</span><span class="p">(</span><span class="n">moderator</span><span class="p">)</span>
      <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">float</span><span class="p">,</span> <span class="o">[</span><span class="n">moderator</span><span class="p">,</span> <span class="n">numerator</span><span class="o">]]</span>
    <span class="k">end</span>
    <span class="n">result</span>
  <span class="k">end</span>
  
  <span class="c1"># 入力との差、分母、分子の順に比較してソートすることで、</span>
  <span class="c1"># 入力との差が等しい場合には分母、分子の小さい分数が先に並ぶ</span>
  <span class="n">candidates</span> <span class="o">=</span> <span class="n">candidates</span><span class="o">.</span><span class="n">sort_by</span> <span class="k">do</span> <span class="o">|</span><span class="n">float</span><span class="p">,</span> <span class="n">fraction</span><span class="o">|</span>
    <span class="o">[</span><span class="p">(</span><span class="n">value</span><span class="o">-</span><span class="n">float</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span><span class="p">,</span> <span class="n">fraction</span><span class="o">]</span>
  <span class="k">end</span>
  
  <span class="c1"># 浮動小数点数が等しい場合は最初の分数のみを選択することで、</span>
  <span class="c1"># 既約分数のみが返却される</span>
  <span class="n">latest_float</span> <span class="o">=</span> <span class="kp">nil</span>
  <span class="n">candidates</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">result</span><span class="p">,</span> <span class="p">(</span><span class="n">float</span><span class="p">,</span> <span class="p">(</span><span class="n">moderator</span><span class="p">,</span> <span class="n">numerator</span><span class="p">))</span><span class="o">|</span>
    <span class="k">unless</span> <span class="n">float</span> <span class="o">==</span> <span class="n">latest_float</span>
      <span class="n">latest_float</span> <span class="o">=</span> <span class="n">float</span>
      <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">numerator</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">moderator</span><span class="si">}</span><span class="s2">&quot;</span>
    <span class="k">end</span>
    <span class="n">result</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="mi">732051</span><span class="p">)</span>      <span class="c1">#=&gt; [&quot;12/7&quot;, &quot;7/4&quot;, &quot;16/9&quot;, &quot;5/3&quot;, &quot;9/5&quot;, &quot;3/2&quot;, &quot;2/1&quot;]</span>
<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">3</span><span class="o">.</span><span class="mi">141593</span><span class="p">)</span>      <span class="c1">#=&gt; [&quot;22/7&quot;, &quot;25/8&quot;, &quot;19/6&quot;, &quot;28/9&quot;, &quot;16/5&quot;, &quot;13/4&quot;, &quot;3/1&quot;]</span>
<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">1920</span> <span class="o">/</span> <span class="mi">1080</span><span class="o">.</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; [&quot;16/9&quot;, &quot;9/5&quot;, &quot;7/4&quot;, &quot;11/6&quot;, &quot;12/7&quot;, &quot;5/3&quot;, &quot;2/1&quot;]</span>

<span class="nb">p</span> <span class="n">rationalizes</span><span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="p">)</span>           <span class="c1">#=&gt; [&quot;5/7&quot;, &quot;2/3&quot;, &quot;3/4&quot;, &quot;3/5&quot;, &quot;4/5&quot;, &quot;1/2&quot;, &quot;1/1&quot;]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6752/addtag/" class="addtag" id="addtag_6752">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6752/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6752/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6752"
  >-</span><span
  class="button yellow"
  id="rating_z_6752"
  >0</span><span 
  class="button green"
  id="rating_p_6752"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091102033936/http://ja.doukaku.org/comment/6747/"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091102033936/http://ja.doukaku.org/comment/6752/root/"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6752/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6753">
  <p class="banner"><a href="/web/20091102033936/http://ja.doukaku.org/user/840/" target="_top">leque</a><a href="/web/20091102033936/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6753/">#6753</a>(<script language="JavaScript">print_time(new Date("2008/07/17 00:16 GMT"));</script><noscript>2008/07/17 00:16 GMT</noscript>)
	
	
	
	[<a href="/web/20091102033936/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>分数が組み込みなので簡単。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sort-by</span> <span class="nv">xs</span> <span class="nv">cmp-fn</span> <span class="nv">key-fn</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">map </span><span class="nv">car</span> <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nf">key-fn</span> <span class="nv">x</span><span class="p">)))</span> <span class="nv">xs</span><span class="p">)</span>
                 <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nf">cmp-fn</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">b</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">n</span> <span class="p">(</span><span class="nb">string-&gt;number </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">))))</span>
    <span class="p">(</span><span class="nf">for-each</span>
     <span class="nv">print</span>
     <span class="p">(</span><span class="nf">sort-by</span> <span class="p">(</span><span class="nf">delete-duplicates</span>
               <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span>
                      <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">inexact-&gt;exact </span><span class="p">(</span><span class="nb">round </span><span class="p">(</span><span class="nb">* </span><span class="nv">m</span> <span class="nv">n</span><span class="p">)))</span> <span class="nv">m</span><span class="p">))</span>
                    <span class="p">(</span><span class="nf">iota</span> <span class="mi">9</span> <span class="mi">1</span><span class="p">)))</span>
              <span class="nv">&lt;</span>
              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">abs </span><span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">n</span><span class="p">)))))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091102033936/http://ja.doukaku.org/comment/6753/addtag/" class="addtag" id="addtag_6753">タグ</a>:
	
    
    <a href="/web/20091102033936/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20091102033936/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6753/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091102033936/http://ja.doukaku.org/comment/6753/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6753"
  >-</span><span
  class="button yellow"
  id="rating_z_6753"
  >0</span><span 
  class="button green"
  id="rating_p_6753"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091102033936/http://ja.doukaku.org/176/reply_to/6753/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20091102033936if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20091102033936/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20091102033936/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20091102033936/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20091102033936/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20091102033936/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20091102033936/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20091102033936/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20091102033936/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20091102033936/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20091102033936/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20091102033936im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20091102033936/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20091102033936/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20091102033936/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20091102033936/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20091102033936/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20091102033936/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20091102033936/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20091102033936/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20091102033936im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20091102033936/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20091102033936/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20091102033936/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20091102033936js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 3:39:36 Nov 2, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:07:20 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
