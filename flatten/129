
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
Schemeもどきの実装
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20080418011027cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20080418011027cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20080418011027cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20080418011027/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20080418011027/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20080418011027js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20080418011027js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20080418011027js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20080418011027js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app18.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/129\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "18";
var displayMonth = "Apr";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/129/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20080418011027" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080213030839/http://ja.doukaku.org/129/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 Feb 2008"><strong>FEB</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 1:10:27 Apr 18, 2008">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080213030839/http://ja.doukaku.org/129/flatten/" title="3:08:39 Feb 13, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 1:10:27 Apr 18, 2008">18</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 1:10:27 Apr 18, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20080418011027*/http://ja.doukaku.org/129/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 Feb 08 - 18 Apr 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:3:010100000000_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20080418011027/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
[トピック]
<a href="/web/20080418011027/http://ja.doukaku.org/129/">Schemeもどきの実装</a>
</h2>

    





<div class="comment" id="comment5413">
  <p class="banner"><a href="/web/20080418011027/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5413/">#5413</a>(<script language="JavaScript">print_time(new Date("2008/01/21 03:31 GMT"));</script><noscript>2008/01/21 03:31 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>先日1000人スピーカカンファレンス(<a class="reference" href="/web/20080418011027/http://ja.doukaku.org/wiki/index.php/1000speakers:1">http://ja.doukaku.org/wiki/index.php/1000speakers:1</a>)の後の突発的ハッカソンでSchemeのようなものを実装しました。ソースコードをブログに貼ると見にくいのでこっちに貼ります。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5413/addtag/" class="addtag" id="addtag_5413">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5413"
  >-</span><span
  class="button yellow"
  id="rating_z_5413"
  >0</span><span 
  class="button green"
  id="rating_p_5413"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080418011027/http://ja.doukaku.org/129/reply_to/5413/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20080418011027/http://ja.doukaku.org/129/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20080418011027/http://ja.doukaku.org/129/nested/">ネスト表示</a>
<a href="/web/20080418011027/http://ja.doukaku.org/129/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment5414">
  <p class="banner"><a href="/web/20080418011027/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/">#5414</a>(<script language="JavaScript">print_time(new Date("2008/01/21 03:36 GMT"));</script><noscript>2008/01/21 03:36 GMT</noscript>)
	
	
	
	[<a href="/web/20080418011027/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>飲み会の後5時間で作ったものなのでかなり適当ですが、いちおう下のコードでフィボナッチ数列が表示されます。</p>
<pre class="literal-block">
print e(parse(&quot;&quot;&quot;
(begin
 (define (fib n)
   (if (&lt; n 2) 1
       (+ (fib (- n 1)) (fib (- n 2)))))
 (display (fib 2))
 (display (fib 3))
 (display (fib 4)))
&quot;&quot;&quot;))
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149</pre></td><td class="code"><div class="highlight"><pre><span class="c"># -*- coding: cp932 -*-</span>
<span class="c"># Scheme</span>
<span class="c"># 文字列リテラルは作らない</span>
<span class="c"># ドットリストのパースもしない</span>

<span class="k">class</span> <span class="nc">Scope</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">parent</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">d</span> <span class="o">=</span> <span class="n">d</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">parent</span>
        <span class="c">#print &quot;scope&quot;, d, parent</span>
    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">d</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">d</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">[</span><span class="n">name</span><span class="p">]</span>

        <span class="k">raise</span> <span class="s">&quot;can&#39;t resolve name:&quot;</span><span class="p">,</span> <span class="n">name</span>

    <span class="k">def</span> <span class="nf">__setitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">d</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">setx</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="s">&quot;impl. of set!&quot;</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">d</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">d</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span>
            <span class="k">return</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">parent</span><span class="o">.</span><span class="n">setx</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>

        <span class="k">raise</span> <span class="s">&quot;can&#39;t resolve name:&quot;</span><span class="p">,</span> <span class="n">name</span>
        

<span class="k">class</span> <span class="nc">Lambda</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">scope</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">body</span> <span class="o">=</span> <span class="n">body</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span>

    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xs</span><span class="p">):</span>
<span class="c">#        print &quot;Lambda&quot;, self.args, xs</span>
        <span class="n">old_scope</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">scope</span>
        <span class="n">e</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="n">Scope</span><span class="p">(</span><span class="nb">dict</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">,</span> <span class="n">xs</span><span class="p">)),</span> <span class="bp">self</span><span class="o">.</span><span class="n">scope</span><span class="p">)</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
        <span class="n">e</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="n">old_scope</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="k">import</span> <span class="nn">re</span>
<span class="n">_PAT_LEAF</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">r&quot;[^\s()]+|\(|\)&quot;</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">_tokenize</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">_PAT_LEAF</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
    
<span class="k">def</span> <span class="nf">parse</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">tokens</span> <span class="o">=</span> <span class="n">_tokenize</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[</span><span class="n">result</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="s">&quot;(&quot;</span><span class="p">:</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">([])</span>
        <span class="k">elif</span> <span class="n">t</span> <span class="o">==</span> <span class="s">&quot;)&quot;</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">del</span> <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">stack</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">mul</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">from</span> <span class="nn">operator</span> <span class="k">import</span> <span class="n">mul</span>
    <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">mul</span><span class="p">,</span> <span class="n">xs</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">xs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nb">sum</span><span class="p">(</span><span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>

<span class="k">def</span> <span class="nf">begin</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">expt</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">**</span> <span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">equal</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">div</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">lt</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">xs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">display</span><span class="p">(</span><span class="n">xs</span><span class="p">):</span>
    <span class="k">print</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">scope</span> <span class="o">=</span> <span class="n">Scope</span><span class="p">({</span><span class="s">&quot;+&quot;</span><span class="p">:</span> <span class="n">add</span><span class="p">,</span> <span class="s">&quot;*&quot;</span><span class="p">:</span> <span class="n">mul</span><span class="p">,</span> <span class="s">&quot;-&quot;</span><span class="p">:</span> <span class="n">sub</span><span class="p">,</span> <span class="s">&quot;=&quot;</span><span class="p">:</span> <span class="n">equal</span><span class="p">,</span> <span class="s">&quot;/&quot;</span><span class="p">:</span> <span class="n">div</span><span class="p">,</span> <span class="s">&quot;&lt;&quot;</span><span class="p">:</span> <span class="n">lt</span><span class="p">},</span> <span class="nb">globals</span><span class="p">())</span>
<span class="n">UNDEF</span> <span class="o">=</span> <span class="s">&quot;#&lt;undef&gt;&quot;</span>

<span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="n">car</span> <span class="o">=</span> <span class="n">tree</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">car</span> <span class="o">==</span> <span class="s">&quot;define&quot;</span><span class="p">:</span>
            <span class="c"># special form</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">str</span><span class="p">):</span> <span class="c"># symbol</span>
                <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="p">[</span><span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">func_name</span> <span class="o">=</span> <span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
                <span class="n">args</span> <span class="o">=</span> <span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">:]</span>
                <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="p">[</span><span class="n">func_name</span><span class="p">]</span> <span class="o">=</span> <span class="n">Lambda</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">tree</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">UNDEF</span>
        
        <span class="k">if</span> <span class="n">car</span> <span class="o">==</span> <span class="s">&quot;lambda&quot;</span><span class="p">:</span>
            <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
            <span class="k">return</span> <span class="n">Lambda</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">tree</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">car</span> <span class="o">==</span> <span class="s">&quot;if&quot;</span><span class="p">:</span>
            <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span> <span class="o">==</span> <span class="mi">4</span>
            <span class="n">cond</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
            <span class="k">if</span> <span class="n">cond</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>

        <span class="k">if</span> <span class="n">car</span> <span class="o">==</span> <span class="s">&quot;let&quot;</span><span class="p">:</span>
            <span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span>
            <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">([(</span><span class="n">k</span><span class="p">,</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="k">for</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
            <span class="n">old_scope</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">scope</span>
            <span class="n">e</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="n">Scope</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
            <span class="n">e</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="n">old_scope</span>
            <span class="k">return</span> <span class="n">result</span>

        <span class="k">if</span> <span class="n">car</span> <span class="o">==</span> <span class="s">&quot;set!&quot;</span><span class="p">:</span>
            <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="o">.</span><span class="n">setx</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span>
            <span class="k">return</span> <span class="n">UNDEF</span>
            
        <span class="n">car</span> <span class="o">=</span> <span class="n">evaluate</span><span class="p">(</span><span class="n">car</span><span class="p">)</span>
        <span class="n">cdr</span> <span class="o">=</span> <span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="n">cdr</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">evaluate</span><span class="p">,</span> <span class="n">cdr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">car</span><span class="p">(</span><span class="n">cdr</span><span class="p">)</span> 
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">tree</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="s">&quot;0123456789&quot;</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">tree</span><span class="p">)</span> <span class="c"># int leteral</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">scope</span><span class="p">[</span><span class="n">tree</span><span class="p">]</span>
   
<span class="n">e</span> <span class="o">=</span> <span class="n">evaluate</span>
<span class="n">e</span><span class="o">.</span><span class="n">scope</span> <span class="o">=</span> <span class="n">scope</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/addtag/" class="addtag" id="addtag_5414">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080418011027/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5414"
  >-</span><span
  class="button yellow"
  id="rating_z_5414"
  >0</span><span 
  class="button green"
  id="rating_p_5414"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/">
    2
    replies
  </a>

  [<a href="/web/20080418011027/http://ja.doukaku.org/129/reply_to/5414/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5417">
  <p class="banner"><a href="/web/20080418011027/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5417/">#5417</a>(<script language="JavaScript">print_time(new Date("2008/01/21 04:19 GMT"));</script><noscript>2008/01/21 04:19 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ブログにいきさつとかを書きました。</p>
<ul class="simple">
<li>PythonでSchemeを作りました - 西尾泰和のはてなダイアリー <a class="reference" href="/web/20080418011027/http://d.hatena.ne.jp/nishiohirokazu/20080121/1200888986">http://d.hatena.ne.jp/nishiohirokazu/20080121/1200888986</a></li>
</ul>
<p>他のハッカソン参加者のエントリー：</p>
<ul class="simple">
<li>Scheme on JavaScript 作りました - yukobaの日記 <a class="reference" href="/web/20080418011027/http://d.hatena.ne.jp/yukoba/20080120/p1">http://d.hatena.ne.jp/yukoba/20080120/p1</a></li>
<li>わーい ＼（＾o＾）／ Scheme もどきを JS で書いたよー！ - IT戦記 <a class="reference" href="/web/20080418011027/http://d.hatena.ne.jp/amachang/20080120/1200850505">http://d.hatena.ne.jp/amachang/20080120/1200850505</a></li>
</ul>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5417/addtag/" class="addtag" id="addtag_5417">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5417"
  >-</span><span
  class="button yellow"
  id="rating_z_5417"
  >0</span><span 
  class="button green"
  id="rating_p_5417"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080418011027/http://ja.doukaku.org/comment/5417/root/"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080418011027/http://ja.doukaku.org/129/reply_to/5417/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5420">
  <p class="banner"><a href="/web/20080418011027/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5420/">#5420</a>(<script language="JavaScript">print_time(new Date("2008/01/21 14:12 GMT"));</script><noscript>2008/01/21 14:12 GMT</noscript>)
	
	
	
	[<a href="/web/20080418011027/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>空気を読まずにPython実装のForthを投下してみる。
未踏ユースOBの合宿で夏くらいに作ったものです。

糞コード過ぎて、読み直したら読めないｗｗｗ

カッコなんて不要です。えらい人にはそれがわからんのですよ。

＃そのうちForthでどう書くの問題を解くか。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293</pre></td><td class="code"><div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>

<span class="k">import</span> <span class="nn">re</span>

<span class="k">class</span> <span class="nc">forth</span><span class="p">():</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">FunctionList</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">VariableList</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ParsedCode</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="n">pc</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">perse</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

        <span class="c">#空文字列を取り除く</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">pc</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">x</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">ParsedCode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">__del__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>


    <span class="k">def</span> <span class="nf">perse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">):</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;#&quot;</span><span class="p">)</span>
            <span class="n">ret</span> <span class="o">+=</span> <span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot; &quot;</span>

        <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;\s+&quot;</span><span class="p">,</span> <span class="n">ret</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">cl</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">ParsedCode</span>
        <span class="n">pc</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">nc</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_execute</span><span class="p">(</span><span class="n">cl</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">nc</span><span class="p">)</span>


    <span class="k">def</span> <span class="nf">_execute</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cl</span><span class="p">,</span> <span class="n">pc</span> <span class="p">,</span> <span class="n">nc</span><span class="p">):</span>
        <span class="k">while</span><span class="p">(</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">cl</span><span class="p">)):</span>
            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">operator</span><span class="p">(</span><span class="n">cl</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">nc</span><span class="p">)):</span>
                <span class="k">pass</span>    <span class="c">#operatorが評価されたので、スタックに積まない</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="c">#数値化できれば数値化する</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">except</span><span class="p">:</span>
                    <span class="c">#数値化できないので、文字列として積む</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>

            <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">operator</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">cl</span><span class="p">,</span> <span class="n">pc</span><span class="p">,</span> <span class="n">nc</span><span class="p">):</span>

        <span class="c">#stack の回転関数 上からn個をm回回転させる n&gt;mが前提</span>
        <span class="k">def</span> <span class="nf">rot_p</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
            <span class="n">front</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="p">[:</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="p">)</span> <span class="o">-</span> <span class="n">n</span><span class="p">]</span>
            <span class="n">back</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="p">[</span><span class="o">-</span><span class="n">n</span><span class="p">:]</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span> <span class="o">=</span> <span class="n">front</span> <span class="o">+</span> <span class="n">back</span><span class="p">[</span><span class="o">-</span><span class="n">m</span><span class="p">:]</span> <span class="o">+</span> <span class="n">back</span><span class="p">[:</span><span class="n">n</span> <span class="o">-</span> <span class="n">m</span><span class="p">]</span>

        <span class="n">ope</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>

        <span class="c">#四則演算系</span>
        <span class="k">if</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;+&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;-&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">-</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;*&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;/&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">/</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>

        <span class="c">#比較演算系</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;&lt;&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;&lt;=&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;&gt;&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">&gt;</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;&gt;=&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">&gt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;==&quot;</span> <span class="ow">or</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;=&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;&lt;&gt;&quot;</span> <span class="ow">or</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;!=&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">!=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>

        <span class="c">#ビット演算系</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;|&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">|</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;&amp;&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">&amp;</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;^&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="o">^</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;~&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="o">~</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>


        <span class="c">#論理演算系 めんどくさいのでドモルガンの定理を利用</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;or&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;and&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()))</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;not&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">))</span>

        <span class="c">#スタック操作系</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;dup&quot;</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;load&quot;</span><span class="p">:</span>
            <span class="n">n</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="p">[</span><span class="o">-</span><span class="n">n</span><span class="p">])</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;drop&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;swap&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;rot&quot;</span><span class="p">:</span>
            <span class="n">rot_p</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;over&quot;</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;dump&quot;</span><span class="p">:</span>
            <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span>



        <span class="c">#表示系</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;.&quot;</span><span class="p">:</span>
            <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>

        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span><span class="s">&quot;if&quot;</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">():</span>
                <span class="n">nc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">pass</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c">#elseか、endifまで読み飛ばす</span>
                <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
                    <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">o</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
                    <span class="k">if</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;if&quot;</span><span class="p">:</span>
                        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">elif</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;else&quot;</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">nc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                            <span class="k">break</span>
                    <span class="k">elif</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;endif&quot;</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="k">break</span>
                        <span class="k">else</span><span class="p">:</span>
                            <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;else&quot;</span><span class="p">:</span>
            <span class="c">#endif まで読み飛ばす</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
                <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">o</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
                <span class="k">if</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;if&quot;</span><span class="p">:</span>
                    <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;endif&quot;</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="k">break</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;endif&quot;</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="c">#手続きの宣言</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;:&quot;</span> <span class="p">:</span>   <span class="c">#これdefか何かに変える？</span>
            <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">FunctionList</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
                <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">c</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
                <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&quot;;&quot;</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">FunctionList</span><span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">FunctionList</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">ope</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_execute</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">FunctionList</span><span class="p">[</span><span class="n">ope</span><span class="p">],[</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">])</span>

        <span class="c">#変数の代入と参照</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;!&quot;</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">VariableList</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;@&quot;</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">VariableList</span><span class="p">[</span><span class="n">name</span><span class="p">])</span>


        <span class="c">#while文</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;while&quot;</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">Stack</span><span class="o">.</span><span class="n">pop</span><span class="p">():</span>
                <span class="k">pass</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c">#対応するrepeat まで読み飛ばす</span>
                <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
                    <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">o</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
                    <span class="k">if</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;while&quot;</span><span class="p">:</span>
                        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">elif</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;repeat&quot;</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="k">break</span>
                        <span class="k">else</span><span class="p">:</span>
                            <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">ope</span> <span class="o">==</span> <span class="s">&quot;repeat&quot;</span><span class="p">:</span>
            <span class="c">#whileの一個前まで戻る</span>
            <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
                <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="n">o</span> <span class="o">=</span> <span class="n">cl</span><span class="p">[</span><span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
                <span class="k">if</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;while&quot;</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="c">#一個前に戻す</span>
                        <span class="n">pc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
                        <span class="k">break</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="n">n</span> <span class="o">-=</span> <span class="mi">1</span>
                <span class="k">elif</span> <span class="n">o</span> <span class="o">==</span> <span class="s">&quot;repeat&quot;</span><span class="p">:</span>
                        <span class="n">n</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>


        <span class="k">return</span> <span class="bp">True</span>



<span class="n">f</span> <span class="o">=</span> <span class="n">forth</span><span class="p">(</span>
<span class="sd">&#39;&#39;&#39;</span>
<span class="sd">1 20 - .                    # 1-20をして表示する</span>
<span class="sd">1 10 &lt; .                    # 1&lt;10をして表示する</span>

<span class="sd">1 if                        # スタックの一番上を評価する</span>
<span class="sd">    here is TRUE . . .      # trueならここが実行される</span>
<span class="sd">    0 if</span>
<span class="sd">        NOTCOMING .         # こない</span>
<span class="sd">    endif</span>
<span class="sd">else</span>
<span class="sd">    here is FALSE . . .     # falseならばここが実行される</span>
<span class="sd">endif</span>

<span class="sd">100 n !                     # nに100を代入する</span>
<span class="sd">n @ .                       # nを参照して表示する</span>
<span class="sd">: hoge n @ 1 - n ! ;        # void hoge(){n = n - 1} を定義する</span>
<span class="sd">hoge hoge hoge              # hogeを三回実行する</span>
<span class="sd">n @ .                       # nを表示してみる(97が表示される)</span>

<span class="sd">                            # 0~9までカウントする</span>
<span class="sd">0 n !                       # nに0を代入する</span>
<span class="sd">1                           # スタックの一番上が真ならwhileを実行</span>
<span class="sd">while</span>
<span class="sd">    n @ .                   # nの値を表示する</span>
<span class="sd">    n @ 1 + n !             # n=n+1</span>
<span class="sd">    n @ 10 &lt;                # n &lt; 10 をpushする</span>
<span class="sd">repeat                      # whileに戻る</span>


<span class="sd">: square dup * ;            # 二乗する関数を定義する</span>
<span class="sd">10 square .</span>

<span class="sd">: fac                       # 再帰で階乗を書いてみる。スタックを二個引数に取る</span>
<span class="sd">    dump                    # 突入時にメモリダンプしてみる</span>
<span class="sd">    dup</span>
<span class="sd">    if</span>
<span class="sd">        over over *</span>
<span class="sd">        over 1 -</span>
<span class="sd">        fac</span>
<span class="sd">        rot drop drop       # ローカル変数を開放する(?)</span>
<span class="sd">        dump</span>
<span class="sd">    else</span>
<span class="sd">        drop</span>
<span class="sd">    endif</span>
<span class="sd">;</span>

<span class="sd">1 10 fac .                  # 1*10!の意味</span>
<span class="sd">&#39;&#39;&#39;</span><span class="p">)</span>

<span class="n">f</span><span class="o">.</span><span class="n">execute</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5420/addtag/" class="addtag" id="addtag_5420">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080418011027/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080418011027/http://ja.doukaku.org/comment/5420/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080418011027/http://ja.doukaku.org/comment/5420/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5420"
  >-</span><span
  class="button yellow"
  id="rating_z_5420"
  >0</span><span 
  class="button green"
  id="rating_p_5420"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080418011027/http://ja.doukaku.org/129/reply_to/5420/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5421">
  <p class="banner"><a href="/web/20080418011027/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/">#5421</a>(<script language="JavaScript">print_time(new Date("2008/01/21 16:39 GMT"));</script><noscript>2008/01/21 16:39 GMT</noscript>)
	
	
	
	[<a href="/web/20080418011027/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>#5420
ぶっ、FORTHきたこれ</p>
<p>ところでマクロを実装したのでもう一度貼る。</p>
<pre class="literal-block">
e(parse(&quot;&quot;&quot;
(begin
(define-macro unless (cond body)
    (if cond () body))
(display (unless 0 1))
(display (unless 2 3))
)&quot;&quot;&quot;))
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181</pre></td><td class="code"><div class="highlight"><pre># -*- coding: cp932 -*-
&#39;&#39;&#39;
Scheme
* 文字列リテラルは作らない
* ドットリストのパースもしない

&#39;&#39;&#39;

class Scope(object):
    def __init__(self, d, parent = None):
        self.d = d
        self.parent = parent
        #print &quot;scope&quot;, d, parent
    def __getitem__(self, name):
        if self.d.has_key(name):
            return self.d[name]
        elif self.parent:
            return self.parent[name]

        raise &quot;can&#39;t resolve name:&quot;, name

    def __setitem__(self, name, value):
        self.d[name] = value

    def setx(self, name, value):
        &quot;impl. of set!&quot;
        if self.d.has_key(name):
            self.d[name] = value
            return
        elif self.parent:
            return self.parent.setx(name, value)

        raise &quot;can&#39;t resolve name:&quot;, name
        

class Lambda(object):
    def __init__(self, args, body, scope):
        self.args = args
        self.body = body
        self.scope = scope

    def __call__(self, xs):
#        print &quot;Lambda&quot;, self.args, xs
        assert len(xs) == len(self.args)
        old_scope = e.scope
        e.scope = Scope(dict(zip(self.args, xs)), self.scope)
        result = evaluate(self.body)
        e.scope = old_scope
        return result

import re
_PAT_LEAF = re.compile(r&quot;[^\s()]+|\(|\)&quot;)
def _tokenize(s):
    return re.findall(_PAT_LEAF, s)
    
def parse(s):
    tokens = _tokenize(s)
    result = []
    stack = [result]
    for t in tokens:
        if t == &quot;(&quot;:
            stack.append([])
        elif t == &quot;)&quot;:
            stack[-2].append(stack[-1])
            del stack[-1]
        else:
            stack[-1].append(t)

    return result[0]

def add(xs):
    return sum(xs)

def mul(xs):
    from operator import mul
    return reduce(mul, xs)

def sub(xs):
    if len(xs) == 1: return -xs[0]
    return xs[0] - sum(xs[1:])

def begin(xs):
    return xs[-1]

def expt(xs):
    return xs[0] ** xs[1]

def equal(xs):
    return xs[0] == xs[1]

def div(xs):
    return xs[0] / xs[1]

def lt(xs):
    return xs[0] &lt; xs[1]

def display(xs):
    print xs[0]
    return xs[0]

def car(xs):
    return xs[0]

def cdr(xs):
    return xs[1:]

scope = Scope({&quot;+&quot;: add, &quot;*&quot;: mul, &quot;-&quot;: sub, &quot;=&quot;: equal, &quot;/&quot;: div, &quot;&lt;&quot;: lt}, globals())
UNDEF = &quot;#&lt;undef&gt;&quot;

##
# macro table
def macro_define(tree):
    if isinstance(tree[1], str): # symbol
        e.scope[tree[1]] = evaluate(tree[2])
    else:
        func_name = tree[1][0]
        args = tree[1][1:]
        e.scope[func_name] = Lambda(args, tree[2], e.scope)
    return UNDEF

def macro_lambda(tree):
    assert len(tree) == 3
    return Lambda(tree[1], tree[2], e.scope)

def macro_if(tree):
    assert len(tree) == 4
    cond = evaluate(tree[1])
    if cond:
        return evaluate(tree[2])
    else:
        return evaluate(tree[3])

def macro_let(tree):
    assert len(tree) == 3
    d = dict([(k, evaluate(v)) for (k, v) in tree[1]])
    old_scope = e.scope
    e.scope = Scope(d, e.scope)
    result = evaluate(tree[2])
    e.scope = old_scope
    return result

def macro_setx(tree):
    e.scope.setx(tree[1], evaluate(tree[2]))
    return UNDEF

def macro_define_macro(tree):
    macro_table[tree[1]] = lambda xs: Lambda(tree[2], tree[3], e.scope)(
        map(evaluate, cdr(xs)))

def macro_quote(tree):
    return tree

macro_table = {
    &quot;define&quot;: macro_define,
    &quot;lambda&quot;: macro_lambda,
    &quot;if&quot;: macro_if,
    &quot;let&quot;: macro_let,
    &quot;set!&quot;: macro_setx,
    &quot;define-macro&quot;: macro_define_macro,
    &quot;quote&quot;: macro_quote,
}

def evaluate(tree):
    if tree == []: return []
    if isinstance(tree, list):
        car = tree[0]
        if car in macro_table:
            return macro_table[car](tree)
            
        car = evaluate(car)
        cdr = tree[1:]
        cdr = map(evaluate, cdr)
        return car(cdr) 
    else:
        if tree[0] in &quot;0123456789&quot;:
            return int(tree) # int leteral
        else:
            return e.scope[tree]
   
e = evaluate
e.scope = scope
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/addtag/" class="addtag" id="addtag_5421">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080418011027/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5421"
  >-</span><span
  class="button yellow"
  id="rating_z_5421"
  >0</span><span 
  class="button green"
  id="rating_p_5421"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080418011027/http://ja.doukaku.org/comment/5414/"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/root/"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/">
    1
    reply
  </a>

  [<a href="/web/20080418011027/http://ja.doukaku.org/129/reply_to/5421/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment5429">
  <p class="banner"><a href="/web/20080418011027/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080418011027/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5429/">#5429</a>(<script language="JavaScript">print_time(new Date("2008/01/22 16:12 GMT"));</script><noscript>2008/01/22 16:12 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>マクロなのに先に引数評価してるっぽい？</p>
<p>(unless 1 (display 999))</p>
<p>999</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080418011027/http://ja.doukaku.org/comment/5429/addtag/" class="addtag" id="addtag_5429">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5429"
  >-</span><span
  class="button yellow"
  id="rating_z_5429"
  >0</span><span 
  class="button green"
  id="rating_p_5429"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080418011027/http://ja.doukaku.org/comment/5421/"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080418011027/http://ja.doukaku.org/comment/5429/root/"><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080418011027/http://ja.doukaku.org/129/reply_to/5429/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20080418011027if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20080418011027/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20080418011027/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20080418011027/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20080418011027/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20080418011027/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20080418011027/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20080418011027/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20080418011027/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20080418011027/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20080418011027/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20080418011027im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20080418011027/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20080418011027/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20080418011027/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20080418011027/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20080418011027/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20080418011027/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20080418011027/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20080418011027/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20080418011027im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20080418011027/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20080418011027/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20080418011027/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20080418011027js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 1:10:27 Apr 18, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:18:25 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
