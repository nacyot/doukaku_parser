
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
復活
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100506131943cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100506131943cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100506131943cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20100506131943/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100506131943/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100506131943js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100506131943js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100506131943js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100506131943js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app10.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/283\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "6";
var displayMonth = "May";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/283/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100506131943" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100212232346/http://ja.doukaku.org/283/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="12 Feb 2010"><strong>FEB</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 13:19:43 May 6, 2010">MAY</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jun
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20100212232346/http://ja.doukaku.org/283/flatten/" title="23:23:46 Feb 12, 2010" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 13:19:43 May 6, 2010">6</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 13:19:43 May 6, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100506131943*/http://ja.doukaku.org/283/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>3 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 Dec 09 - 6 May 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000000001_2010:4:010010000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100506131943/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100506131943/http://ja.doukaku.org/283/">復活</a>
</h2>

    





<div class="comment" id="comment9499">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9499/">#9499</a>(<script language="JavaScript">print_time(new Date("2009/08/20 09:31 GMT"));</script><noscript>2009/08/20 09:31 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  現在のプロセスが終了後、一定時間経過したのち再起動するプログラムを作成してください。一時的にスリープするのではなく、プロセスAが一度終了しアンロードされてから別のプロセスA'が動き出す感じです。AとA'が時間的に重ならないことを要件とします。<br/><br/>プロセスが作成できない言語では、スレッドやオブジェクトなど適当に読み替えてください。<br/><br/>以下のどちらでもかまいません。下のほうが難しいと思います。<br/>　＜レベル１＞　自分から終了して再起動する。<br/>　＜レベル２＞　タスクマネージャーや&nbsp;kill&nbsp;などでいきなり殺されたのち、再起動する。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9499/addtag/" class="addtag" id="addtag_9499">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9499"
  >-</span><span
  class="button yellow"
  id="rating_z_9499"
  >0</span><span 
  class="button green"
  id="rating_p_9499"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9499/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100506131943/http://ja.doukaku.org/283/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20100506131943/http://ja.doukaku.org/283/nested/">ネスト表示</a>
<a href="/web/20100506131943/http://ja.doukaku.org/283/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment9501">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9501/">#9501</a>(<script language="JavaScript">print_time(new Date("2009/08/21 10:30 GMT"));</script><noscript>2009/08/21 10:30 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>監視プロセスを fork し、そのプロセスに自分の状態を監視させ、停止が確認できた 500ms 後に自分と同じ処理（監視プロセスの fork を含む）を再起動させるコードを書きました。動きが確認できるよう、memo にプロセスの id、状態、ミリ秒クロックを記録し、5 サイクル繰り返した後に memo 内容を出力してみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><div class="highlight"><pre>| memo sema block |
memo := OrderedCollection new.
sema := Semaphore new.
block := nil.
block := [
    | process |
    process := Processor activeProcess.
    memo add: {process hash. #start. Time millisecondClockValue}.
    100 milliSeconds asDelay wait.
    [   [Processor yield. process isTerminated] whileFalse.
        memo add: {process hash. #end. Time millisecondClockValue}.
        500 milliSeconds asDelay wait.
        memo size &lt; 10 ifTrue: [block copy fixTemps fork] ifFalse: [sema signal]
    ] fork
].
block copy fixTemps fork.
sema wait.
^memo asArray

=&gt; #(
  #(2387 #start 168089292)
  #(2387 #end 168089395)
  #(286 #start 168089897)
  #(286 #end 168090005)
  #(315 #start 168090505)
  #(315 #end 168090606)
  #(2605 #start 168091107)
  #(2605 #end 168091208)
  #(3727 #start 168091709)
  #(3727 #end 168091809))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9501/addtag/" class="addtag" id="addtag_9501">タグ</a>:
	
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9501/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9501/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9501"
  >-</span><span
  class="button yellow"
  id="rating_z_9501"
  >0</span><span 
  class="button green"
  id="rating_p_9501"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100506131943/http://ja.doukaku.org/comment/9501/">
    1
    reply
  </a>

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9501/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9502">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/759/" target="_top">egtra</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9502/">#9502</a>(<script language="JavaScript">print_time(new Date("2009/08/21 15:51 GMT"));</script><noscript>2009/08/21 15:51 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Windows APIです。CreateRemoteThreadとLoadLibraryによるDLLインジェクションで、別のプロセスへ監視・復活（プロセスA'起動）プログラムを送り込ませました。そのため、ソースコードもDLL部分とメインプログラムの本体EXE部分に分かれます（135行目が境目）。</p>
<p>メインプログラムの初回起動時には、コマンドラインで「main devenv.exe」のようにDLLインジェクションするプロセスの名前を指定できます。</p>
<p>なお、お題のレベル2を実装しています。メインプログラムの初回起動時、「Enterキーを押すと終了します。」の表示が出ますが、ここでEnterを叩かずにタスクマネージャで殺しても問題ありません。</p>
<p>メインプログラムでは、監視プログラムへ監視用に自分のプロセスハンドルを送るため、ファイルマッピングを行っています。また、監視プログラムがプロセスハンドルを読み取る前にファイルマッピングオブジェクトを破棄しないよう、イベントオブジェクトを用いています。メインプログラムのソースのうち、この2つのごちゃごちゃを無視すると、肝心のDLLインジェクションの部分がはっきりと浮かび上がってくると思います。</p>
<p>参考ページは、CreateRemoteThreadとLoadLibaryによるDLLについてググって上のほうに出てきたページです。なお、ここで用いたもの以外の各種コードインジェクションの方法も含めてAdvanced Windowsに詳しく取り上げられていたと思います。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506131943/http://ruffnex.oc.to/kenji/text/dll_inj/">常駐プログラム隠蔽テクニック</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#define _WIN32_WINNT 0x0400</span>
<span class="cp">#define STLSOFT_CF_EXCEPTION_SUPPORT</span>

<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;memory&gt;</span>
<span class="cp">#include &lt;boost/bind.hpp&gt;</span>
<span class="cp">#include &lt;tchar.h&gt;</span>
<span class="cp">#include &lt;windows.h&gt;</span>
<span class="cp">#include &lt;winstl/toolhelp/process_sequence.hpp&gt;</span>
<span class="cp">#include &lt;boost/algorithm/string/predicate.hpp&gt;</span>
<span class="cp">#include &lt;stlsoft/smartptr/scoped_handle.hpp&gt;</span>
<span class="cp">#include &lt;winstl/synch/event.hpp&gt;</span>

<span class="k">const</span> <span class="n">WCHAR</span> <span class="n">LibraryName</span><span class="p">[]</span> <span class="o">=</span> <span class="s">L&quot;h:</span><span class="se">\\</span><span class="s">watcher.dll&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="n">TCHAR</span> <span class="n">MappingObjectName</span><span class="p">[]</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Doukaku.org 復活 マッピング&quot;</span><span class="p">);</span>
<span class="k">const</span> <span class="n">TCHAR</span> <span class="n">EventObjectName</span><span class="p">[]</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Doukaku.org 復活 イベント&quot;</span><span class="p">);</span>

<span class="k">const</span> <span class="n">DWORD</span> <span class="n">TimeOut</span> <span class="o">=</span> <span class="mi">50000</span><span class="p">;</span> <span class="c">// 5秒でタイムアウト</span>

<span class="kt">bool</span> <span class="n">MatchExeName</span><span class="p">(</span><span class="n">PROCESSENTRY32</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">pe</span><span class="p">,</span> <span class="n">LPCTSTR</span> <span class="n">exeName</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">algorithm</span><span class="o">::</span><span class="n">iequals</span><span class="p">(</span><span class="n">exeName</span><span class="p">,</span> <span class="n">pe</span><span class="p">.</span><span class="n">szExeFile</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">HANDLE</span> <span class="n">FindProcess</span><span class="p">(</span><span class="n">LPCTSTR</span> <span class="n">exeName</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">stlsoft</span><span class="o">::</span><span class="n">winstl_project</span><span class="o">::</span><span class="n">process_sequence</span><span class="p">;</span>
    <span class="n">process_sequence</span> <span class="n">s</span><span class="p">;</span>
    <span class="n">process_sequence</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">find_if</span><span class="p">(</span>
        <span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">MatchExeName</span><span class="p">,</span> <span class="n">_1</span><span class="p">,</span> <span class="n">exeName</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">it</span> <span class="o">!=</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">())</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">OpenProcess</span><span class="p">(</span>
            <span class="n">PROCESS_QUERY_INFORMATION</span> <span class="o">|</span> <span class="n">PROCESS_CREATE_THREAD</span>
            <span class="o">|</span> <span class="n">PROCESS_VM_OPERATION</span> <span class="o">|</span> <span class="n">PROCESS_VM_WRITE</span> <span class="o">|</span> <span class="n">PROCESS_DUP_HANDLE</span><span class="p">,</span>
            <span class="n">FALSE</span><span class="p">,</span> <span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">).</span><span class="n">th32ProcessID</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">LPCTSTR</span> <span class="n">GetInjectionTargetName</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">TCHAR</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span>
        <span class="o">?</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
        <span class="o">:</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;explorer.exe&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">TCHAR</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="p">;</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">std</span><span class="o">::</span><span class="n">strcmp</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;/restart&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;2回目の起動です&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">stlsoft</span><span class="o">::</span><span class="n">scoped_handle</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">&gt;</span> <span class="n">hInjectionTarget</span><span class="p">(</span>
                <span class="n">FindProcess</span><span class="p">(</span><span class="n">GetInjectionTargetName</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">)),</span> <span class="n">CloseHandle</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">hInjectionTarget</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;侵入先プロセスが見つからなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="c">// 通信用オブジェクトの準備（送信側）</span>
            <span class="n">stlsoft</span><span class="o">::</span><span class="n">scoped_handle</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">&gt;</span> <span class="n">hMapping</span><span class="p">(</span>
                <span class="n">CreateFileMapping</span><span class="p">(</span><span class="n">INVALID_HANDLE_VALUE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">PAGE_READWRITE</span><span class="p">,</span>
                    <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="p">(</span><span class="n">HANDLE</span><span class="p">),</span> <span class="n">MappingObjectName</span><span class="p">),</span>
                <span class="n">CloseHandle</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">hMapping</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;メモリマッピングオブジェクトが作成できなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="kt">void</span><span class="o">*</span> <span class="n">pMap</span> <span class="o">=</span> <span class="n">MapViewOfFile</span><span class="p">(</span><span class="n">hMapping</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">FILE_MAP_WRITE</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pMap</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;メモリがマップできなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="c">// 自プロセスのハンドルを監視DLLのいるプロセスへ送る。</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">DuplicateHandle</span><span class="p">(</span><span class="n">GetCurrentProcess</span><span class="p">(),</span> <span class="n">GetCurrentProcess</span><span class="p">(),</span>
                <span class="n">hInjectionTarget</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pMap</span><span class="p">),</span> <span class="n">SYNCHRONIZE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;プロセスハンドルの転送ができなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">UnmapViewOfFile</span><span class="p">(</span><span class="n">pMap</span><span class="p">);</span>
            <span class="c">// 挿入に成功したことを伝えるイベントオブジェクト</span>
            <span class="n">stlsoft</span><span class="o">::</span><span class="n">winstl_project</span><span class="o">::</span><span class="n">event</span> <span class="n">startNotifyEvent</span><span class="p">(</span><span class="n">EventObjectName</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
            <span class="c">// DLL挿入の準備</span>
            <span class="kt">void</span><span class="o">*</span> <span class="n">remoteLibraryName</span> <span class="o">=</span> <span class="n">VirtualAllocEx</span><span class="p">(</span><span class="n">hInjectionTarget</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span>
                <span class="k">sizeof</span> <span class="n">LibraryName</span><span class="p">,</span> <span class="n">MEM_COMMIT</span><span class="p">,</span> <span class="n">PAGE_READWRITE</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">remoteLibraryName</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;メモリが確保できなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">WriteProcessMemory</span><span class="p">(</span><span class="n">hInjectionTarget</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">remoteLibraryName</span><span class="p">,</span>
                <span class="n">LibraryName</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">LibraryName</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;対象プロセスのメモリへの書き込みができなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">PTHREAD_START_ROUTINE</span> <span class="n">loadLibrary</span> <span class="o">=</span> <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">PTHREAD_START_ROUTINE</span><span class="o">&gt;</span><span class="p">(</span>
                <span class="n">GetProcAddress</span><span class="p">(</span><span class="n">GetModuleHandle</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;kernel32&quot;</span><span class="p">)),</span> <span class="s">&quot;LoadLibraryW&quot;</span><span class="p">));</span>
            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">loadLibrary</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;LoadLibaryの読み込みができなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">stlsoft</span><span class="o">::</span><span class="n">scoped_handle</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">&gt;</span> <span class="n">hRemoteThread</span><span class="p">(</span>
                <span class="n">CreateRemoteThread</span><span class="p">(</span><span class="n">hInjectionTarget</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">loadLibrary</span><span class="p">,</span>
                    <span class="n">remoteLibraryName</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
                <span class="n">CloseHandle</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">hRemoteThread</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;リモートスレッドの作成ができなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="c">// ファイルマッピングオブジェクトを解放して構わない状態になるまで待機</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">WaitForSingleObject</span><span class="p">(</span><span class="n">startNotifyEvent</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">TimeOut</span><span class="p">)</span> <span class="o">!=</span> <span class="n">WAIT_OBJECT_0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="n">exception</span><span class="p">(</span><span class="s">&quot;リモートスレッドから応答がなかった&quot;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Enterキーを押すと終了します。&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">catch</span><span class="p">(</span><span class="k">const</span> <span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="c">// ここまでMain.exeのソース</span>
<span class="c">//----------------------------------------------</span>
<span class="c">// ここからのWatcher.dllソース</span>
<span class="cp">#include &lt;exception&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>
<span class="cp">#include &lt;windows.h&gt;</span>
<span class="cp">#include &lt;winstl/synch/event.hpp&gt;</span>
<span class="cp">#include &lt;stlsoft/smartptr/scoped_handle.hpp&gt;</span>

<span class="k">const</span> <span class="kt">char</span> <span class="n">MainProgramCommandLine</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;h:</span><span class="se">\\</span><span class="s">main.exe /restart&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="n">TCHAR</span> <span class="n">MappingObjectName</span><span class="p">[]</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Doukaku.org 復活 マッピング&quot;</span><span class="p">);</span>
<span class="k">const</span> <span class="n">TCHAR</span> <span class="n">EventObjectName</span><span class="p">[]</span> <span class="o">=</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Doukaku.org 復活 イベント&quot;</span><span class="p">);</span>

<span class="kr">__declspec</span><span class="p">(</span><span class="n">noreturn</span><span class="p">)</span>
<span class="n">DWORD</span> <span class="n">WINAPI</span> <span class="n">Watch</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span> <span class="n">param</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="p">;</span>
    <span class="n">DWORD</span> <span class="n">exitCode</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">try</span>
    <span class="p">{</span>
        <span class="n">stlsoft</span><span class="o">::</span><span class="n">winstl_project</span><span class="o">::</span><span class="n">event</span> <span class="n">startNotifyEvent</span><span class="p">(</span><span class="n">EventObjectName</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">startNotifyEvent</span><span class="p">.</span><span class="n">set</span><span class="p">();</span>

        <span class="c">// 通信用オブジェクトの準備（受信側）</span>
        <span class="n">stlsoft</span><span class="o">::</span><span class="n">scoped_handle</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">&gt;</span> <span class="n">hMapping</span><span class="p">(</span>
            <span class="n">OpenFileMapping</span><span class="p">(</span><span class="n">FILE_MAP_READ</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">MappingObjectName</span><span class="p">),</span>
            <span class="n">CloseHandle</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">hMapping</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">exception</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="kt">void</span><span class="o">*</span> <span class="n">pMap</span> <span class="o">=</span> <span class="n">MapViewOfFile</span><span class="p">(</span><span class="n">hMapping</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">FILE_MAP_READ</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pMap</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">exception</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="n">stlsoft</span><span class="o">::</span><span class="n">scoped_handle</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">&gt;</span> <span class="n">hProcess</span><span class="p">(</span>
            <span class="o">*</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">HANDLE</span><span class="o">*&gt;</span><span class="p">(</span><span class="n">pMap</span><span class="p">),</span> <span class="n">CloseHandle</span><span class="p">);</span> <span class="c">// プロセスハンドルの取得</span>
        <span class="n">UnmapViewOfFile</span><span class="p">(</span><span class="n">pMap</span><span class="p">);</span>
        <span class="c">// プロセスAの終了待ち</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">WaitForSingleObject</span><span class="p">(</span><span class="n">hProcess</span><span class="p">.</span><span class="n">get</span><span class="p">(),</span> <span class="n">INFINITE</span><span class="p">)</span> <span class="o">!=</span> <span class="n">WAIT_OBJECT_0</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">throw</span> <span class="n">exception</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="c">// 待機</span>
        <span class="n">Sleep</span><span class="p">(</span><span class="mi">2000</span><span class="p">);</span>
        <span class="c">// プロセスA&#39;の起動</span>
        <span class="n">std</span><span class="o">::</span><span class="n">system</span><span class="p">(</span><span class="n">MainProgramCommandLine</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">catch</span><span class="p">(...)</span>
    <span class="p">{</span>
        <span class="n">exitCode</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">FreeLibraryAndExitThread</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="n">HMODULE</span><span class="o">&gt;</span><span class="p">(</span><span class="n">param</span><span class="p">),</span> <span class="n">exitCode</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">BOOL</span> <span class="n">WINAPI</span> <span class="n">DllMain</span><span class="p">(</span><span class="n">HINSTANCE</span> <span class="n">hinstDll</span><span class="p">,</span> <span class="n">DWORD</span> <span class="n">reason</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">reason</span> <span class="o">==</span> <span class="n">DLL_PROCESS_ATTACH</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">DWORD</span> <span class="n">threadId</span><span class="p">;</span>
        <span class="n">CreateThread</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">Watch</span><span class="p">,</span> <span class="n">hinstDll</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">threadId</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">TRUE</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9502/addtag/" class="addtag" id="addtag_9502">タグ</a>:
	
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/Boost/">Boost</a>
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/WinSTL/">WinSTL</a>
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/Windows/">Windows</a>
    
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9502/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9502/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9502"
  >-</span><span
  class="button yellow"
  id="rating_z_9502"
  >0</span><span 
  class="button green"
  id="rating_p_9502"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9502/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9503">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9503/">#9503</a>(<script language="JavaScript">print_time(new Date("2009/08/21 10:52 GMT"));</script><noscript>2009/08/21 10:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>監視プロセスを fork するタイミングはダミーの delay の前であるべきでした。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><div class="highlight"><pre>| memo sema block |
memo := OrderedCollection new.
sema := Semaphore new.
block := nil.
block := [
    | process |
    process := Processor activeProcess.
    memo add: {process hash. #start. Time millisecondClockValue}.
    [   [Processor yield. process isTerminated] whileFalse.
        memo add: {process hash. #end. Time millisecondClockValue}.
        500 milliSeconds asDelay wait.
        memo size &lt; 10 ifTrue: [block copy fixTemps fork] ifFalse: [sema signal]
    ] fork.
    100 milliSeconds asDelay wait
].
block copy fixTemps fork.
sema wait.
^memo asArray

=&gt; #(
  #(1557 #start 170533506)
  #(1557 #end 170533606)
  #(4003 #start 170534107)
  #(4003 #end 170534207)
  #(1921 #start 170534708)
  #(1921 #end 170534808)
  #(3790 #start 170535309)
  #(3790 #end 170535409)
  #(2020 #start 170535910)
  #(2020 #end 170536010))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9503/addtag/" class="addtag" id="addtag_9503">タグ</a>:
	
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9503/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9503/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9503"
  >-</span><span
  class="button yellow"
  id="rating_z_9503"
  >0</span><span 
  class="button green"
  id="rating_p_9503"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100506131943/http://ja.doukaku.org/comment/9501/"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100506131943/http://ja.doukaku.org/comment/9503/root/"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9503/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9508">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/100/" target="_top">konn</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9508/">#9508</a>(<script language="JavaScript">print_time(new Date("2009/08/22 10:43 GMT"));</script><noscript>2009/08/22 10:43 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <div class="section">
<p>Signal.trap版。Ruby 1.8.x、1.9.x両方で動作します。</p>
<p>コマンドライン引数が指定された場合はその秒数だけ休んでから終了し、forkします。</p>
<p></p>
<p>あとは SIGINT なり SIGQUIT なりを受けてもforkするようにはしてあります。</p>
<p>が、素朴な実装なので、前のプロセスが死ぬと同時に起動してしまうのが玉に瑕ですが、まあ、0秒も一定時間後ということで、、、。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">ResurrectionProcess</span>

  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@pid</span> <span class="o">=</span> <span class="vg">$$</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">int</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
    <span class="no">Thread</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span>
      <span class="nb">p</span> <span class="vi">@pid</span>
      <span class="k">if</span> <span class="n">int</span> <span class="o">&gt;</span> <span class="mi">0</span>
        <span class="nb">sleep</span> <span class="n">int</span><span class="o">.</span><span class="n">to_i</span>
      <span class="k">else</span>
        <span class="nb">sleep</span>
      <span class="k">end</span>
    <span class="p">}</span><span class="o">.</span><span class="n">join</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">pid</span>
    <span class="vi">@pid</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="n">interval</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_i</span>
<span class="n">undead</span> <span class="o">=</span> <span class="nb">proc</span> <span class="p">{</span>
  <span class="k">begin</span>
    <span class="n">rp</span> <span class="o">=</span> <span class="no">ResurrectionProcess</span><span class="o">.</span><span class="n">new</span>
    <span class="n">rp</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">interval</span><span class="p">)</span>
  <span class="k">rescue</span> <span class="no">SignalException</span>
    <span class="nb">fork</span> <span class="p">{</span><span class="n">undead</span><span class="o">[]</span><span class="p">}</span>
    <span class="nb">exit!</span>
  <span class="k">ensure</span>
    <span class="nb">fork</span> <span class="p">{</span><span class="n">undead</span><span class="o">[]</span><span class="p">}</span>
  <span class="k">end</span>
<span class="p">}</span>

<span class="n">undead</span><span class="o">[]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9508/addtag/" class="addtag" id="addtag_9508">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9508/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9508/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9508"
  >-</span><span
  class="button yellow"
  id="rating_z_9508"
  >0</span><span 
  class="button green"
  id="rating_p_9508"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9508/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9520">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9520/">#9520</a>(<script language="JavaScript">print_time(new Date("2009/08/26 11:04 GMT"));</script><noscript>2009/08/26 11:04 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/vbnet/">
	  VB.net
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  VBScript&nbsp;+&nbsp;タスクスケジューラで。<br/>電卓を終了すると約１分後に再起動します。<br/>このスクリプト自体＝プロセスAではなく、中で起動するcalc.exeがプロセスAと考えれば、いちおうレベル２です。<br/>最初はJScriptで挑戦しましたが、JobIDを取得するときに参照渡しする方法がわからず断念。JScriptでは不可能？？？<br/>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506131943/http://troi.kbc-ehime.ac.jp/kj/?p=1702&page=2">WSH入門  第4回：Windowsでの運用の自動化について</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="n">strScriptName</span> <span class="o">=</span> <span class="s">&quot;d:\rebirth&quot;</span>

<span class="c">&#39; アプリを実行する</span>
<span class="n">strAppname</span> <span class="o">=</span> <span class="s">&quot;calc.exe&quot;</span>
<span class="n">WScript</span><span class="p">.</span><span class="n">CreateObject</span><span class="p">(</span><span class="s">&quot;WScript.Shell&quot;</span><span class="p">).</span><span class="n">Run</span> <span class="n">strAppname</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="k">true</span>

<span class="n">strComputer</span> <span class="o">=</span> <span class="s">&quot;.&quot;</span>
<span class="k">Set</span> <span class="n">objWMIService</span> <span class="o">=</span> <span class="n">GetObject</span><span class="p">(</span><span class="s">&quot;winmgmts:{impersonationLevel=impersonate}!//&quot;</span><span class="o">+</span><span class="n">strComputer</span><span class="o">+</span><span class="s">&quot;/root/cimv2&quot;</span><span class="p">)</span>

<span class="k">Set</span> <span class="n">args</span> <span class="o">=</span> <span class="n">WScript</span><span class="p">.</span><span class="n">Arguments</span>
<span class="k">If</span> <span class="n">args</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">Then</span>
  <span class="c">&#39; 引数なしならタスク登録</span>
  <span class="k">Set</span> <span class="n">objNewJob</span> <span class="o">=</span> <span class="n">objWMIService</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;Win32_ScheduledJob&quot;</span><span class="p">)</span>
  <span class="n">commandline</span> <span class="o">=</span> <span class="s">&quot;wscript.exe &quot;</span> <span class="o">&amp;</span> <span class="n">strScriptName</span> <span class="o">&amp;</span> <span class="s">&quot;2.js&quot;</span>
  <span class="n">dt</span> <span class="o">=</span> <span class="n">DateAdd</span><span class="p">(</span> <span class="s">&quot;n&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">Now</span> <span class="p">)</span>
  <span class="n">oneMinuteLater</span> <span class="o">=</span> <span class="n">Right</span><span class="p">(</span> <span class="mi">1000000</span> <span class="o">+</span> <span class="n">Hour</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span><span class="o">*</span><span class="mi">10000</span> <span class="o">+</span> <span class="n">Minute</span><span class="p">(</span><span class="n">dt</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span> <span class="o">+</span> <span class="n">Second</span><span class="p">(</span><span class="n">dt</span><span class="p">),</span> <span class="mi">6</span> <span class="p">)</span>
  <span class="n">starttime</span> <span class="o">=</span> <span class="s">&quot;********&quot;</span> <span class="o">&amp;</span> <span class="n">oneMinuteLater</span> <span class="o">&amp;</span> <span class="s">&quot;.000000+540&quot;</span>
  <span class="n">errJobCreated</span> <span class="o">=</span> <span class="n">objNewJob</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span> <span class="n">commandline</span><span class="p">,</span> <span class="n">starttime</span><span class="p">,</span> <span class="k">False</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="k">True</span><span class="p">,</span> <span class="n">JobID</span> <span class="p">)</span>
  <span class="n">WScript</span><span class="p">.</span><span class="n">Echo</span><span class="p">(</span><span class="s">&quot;タスクを登録しました。&quot;</span> <span class="o">&amp;</span> <span class="n">starttime</span> <span class="o">&amp;</span> <span class="s">&quot;  &quot;</span> <span class="o">&amp;</span> <span class="n">errJobCreated</span><span class="p">)</span>

  <span class="c">&#39; サブスクリプト生成</span>
  <span class="k">Set</span> <span class="n">fso</span> <span class="o">=</span> <span class="n">CreateObject</span><span class="p">(</span><span class="s">&quot;Scripting.FileSystemObject&quot;</span><span class="p">)</span>
  <span class="k">Set</span> <span class="n">tfs</span> <span class="o">=</span> <span class="n">fso</span><span class="p">.</span><span class="n">CreateTextFile</span><span class="p">(</span><span class="n">strScriptName</span><span class="o">+</span><span class="s">&quot;2.js&quot;</span><span class="p">)</span>
  <span class="n">tfs</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;WScript.CreateObject(&#39;WScript.Shell&#39;).Run(&#39;wscript.exe &quot;</span> <span class="o">&amp;</span> <span class="n">Replace</span><span class="p">(</span><span class="n">strScriptName</span><span class="p">,</span> <span class="s">&quot;\&quot;</span><span class="p">,</span> <span class="s">&quot;\\&quot;</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">&quot;.vbs &quot;</span> <span class="o">&amp;</span> <span class="n">JobID</span> <span class="o">&amp;</span> <span class="s">&quot;&#39;);&quot;</span><span class="p">)</span>
  <span class="n">tfs</span><span class="p">.</span><span class="n">Close</span><span class="p">()</span>
  <span class="n">WScript</span><span class="p">.</span><span class="n">Echo</span><span class="p">(</span><span class="s">&quot;サブスクリプトを生成しました。&quot;</span><span class="p">)</span>

<span class="k">Else</span>
  <span class="c">&#39; 引数（＝ジョブID）があればタスク削除</span>
  <span class="n">JobID</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="n">Item</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="k">Set</span> <span class="n">objTask</span> <span class="o">=</span> <span class="n">objWMIService</span><span class="p">.</span><span class="n">Get</span><span class="p">(</span><span class="s">&quot;Win32_ScheduledJob.JobID=&quot;</span> <span class="o">&amp;</span> <span class="n">JobID</span><span class="p">)</span>
  <span class="k">If</span> <span class="n">Err</span><span class="p">.</span><span class="n">Number</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">Then</span>
    <span class="n">objTask</span><span class="p">.</span><span class="n">Delete</span>
    <span class="n">WScript</span><span class="p">.</span><span class="n">Echo</span><span class="p">(</span><span class="s">&quot;タスクを削除しました。&quot;</span><span class="p">)</span>
  <span class="k">Else</span>
    <span class="n">WScript</span><span class="p">.</span><span class="n">Echo</span><span class="p">(</span><span class="s">&quot;タスク削除に失敗しました。&quot;</span><span class="p">)</span>
  <span class="k">End</span> <span class="k">If</span>

<span class="k">End</span> <span class="k">If</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9520/addtag/" class="addtag" id="addtag_9520">タグ</a>:
	
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/VBScript/">VBScript</a>
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/WMI/">WMI</a>
    
    <a href="/web/20100506131943/http://ja.doukaku.org/tag/WSH/">WSH</a>
    
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/vbnet/">
		VB.net
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9520/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9520/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9520"
  >-</span><span
  class="button yellow"
  id="rating_z_9520"
  >0</span><span 
  class="button green"
  id="rating_p_9520"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9520/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9539">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/959/" target="_top">uehaj</a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9539/">#9539</a>(<script language="JavaScript">print_time(new Date("2009/08/30 10:31 GMT"));</script><noscript>2009/08/30 10:31 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>終了して起動すればいいんですよね。
MacOSで確認。起動してるかどうかを確認できるようにSwingでウィンドウを作ってます。スクリプトは例えば「selfexec.groovy」で保存し、
groovy selfexec.groovy start
で実行してください。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="highlight"><pre>new javax.swing.JFrame().show()
if (args.size() &gt;= 1 &amp;&amp; args[0] == &#39;start&#39;) {
  cmd = &quot;sleep 3; ${System.getenv(&#39;GROOVY_HOME&#39;)}/bin/groovy ${this.getClass().name}; echo done&quot;
  Process p = Runtime.runtime.exec([&#39;sh&#39;,&#39;-c&#39;, cmd] as String[])
  System.exit(0)
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/9539/addtag/" class="addtag" id="addtag_9539">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9539/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/9539/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9539"
  >-</span><span
  class="button yellow"
  id="rating_z_9539"
  >0</span><span 
  class="button green"
  id="rating_p_9539"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/9539/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment10383">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/10383/">#10383</a>(<script language="JavaScript">print_time(new Date("2010/04/08 09:40 GMT"));</script><noscript>2010/04/08 09:40 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>プロセスではなく、スレッドで実装。
「プロセスA」がFenixというイメージ。</p>
<p>問題の意図が読み取れてない感じがしつつもアップ。</p>
<p>Fenixを即時終了しないようにして、main()のループ中でFenixを殺すようにすればレベル２？</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</pre></td><td class="code"><div class="highlight"><pre><span class="c">/**</span>
<span class="c"> * プロセス終了後、一定時間経過後に再起動</span>
<span class="c"> * さくっと作るためにプロセス→スレッドに読み替え</span>
<span class="c"> */</span>

<span class="c">// 状態表示と仕組みのキック</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FullLife</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">duration</span> <span class="o">=</span> <span class="mi">500</span><span class="o">;</span>

        <span class="n">Thread</span> <span class="n">thWatcher</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">Watcher</span> <span class="n">wat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Watcher</span><span class="o">();</span>
            <span class="n">thWatcher</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">wat</span><span class="o">);</span>
            <span class="n">thWatcher</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="c">// 監視とか復帰はWatcher任せで生きてるよメッセージと生存スレッド数だけ表示(自身を除く)</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;・・・プログラム実行中 生存スレッド数：&quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">activeCount</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">));</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">activeCount</span><span class="o">()</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">duration</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">activeCount</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">class</span> <span class="nc">Watcher</span> <span class="k">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">duration</span> <span class="o">=</span> <span class="mi">2000</span><span class="o">;</span>
        <span class="n">Thread</span> <span class="n">thFenix</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="c">// アンロードではないけど、トゥットゥル後にスレッド終了してるよね？</span>
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">Fenix</span> <span class="n">fen</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Fenix</span><span class="o">();</span>
                <span class="n">thFenix</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">fen</span><span class="o">);</span>
                <span class="n">thFenix</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
                <span class="n">thFenix</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">thFenix</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">duration</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">thFenix</span><span class="o">.</span><span class="na">isAlive</span><span class="o">())</span> <span class="o">{</span>
                        <span class="c">// いっきさん</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;「 この男…まさしくその名のとおり、不死身だとでも言うのか…！」&quot;</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">duration</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="k">class</span> <span class="nc">Fenix</span> <span class="k">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Fenix  :「トゥットゥルー」&quot;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/10383/addtag/" class="addtag" id="addtag_10383">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/10383/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/10383/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10383"
  >-</span><span
  class="button yellow"
  id="rating_z_10383"
  >0</span><span 
  class="button green"
  id="rating_p_10383"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/10383/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment10405">
  <p class="banner"><a href="/web/20100506131943/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506131943/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/10405/">#10405</a>(<script language="JavaScript">print_time(new Date("2010/04/18 23:40 GMT"));</script><noscript>2010/04/18 23:40 GMT</noscript>)
	
	
	
	[<a href="/web/20100506131943/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>プロセスを使って挑戦してみました。
スレッドもプロセスも結局nativeに入っていくので、
Javaでこの辺りを触るのは不安ですね。
　・監視プロセス：FullLifeByProc
　・プロセスA：ProcFenix</p>
<p>＞題主さま
結局は「監視プロセスを作る」というのがお題と考えたのですが、
合っていますでしょうか？</p>
<p>参考にしたページその２
Java外部プロセス起動メモ(Hishidama's Java Process Memo)
<a class="reference" href="/web/20100506131943/http://www.ne.jp/asahi/hishidama/home/tech/java/process.html">http://www.ne.jp/asahi/hishidama/home/tech/java/process.html</a></p>
<p>最後に、もしも試してみたいという奇特な方のために動かす際の注意点をいくつか
・C:workに「hoge.txt」というファイルがあった場合は
　外部プロセスのログが出力される（追記）ので注意下さい
・FullLifeByProc でProcessBuilderのディレクトリを指定している場所は、
　クラスファイルの２階層上を指定します（パッケージ切ってるので）
・「InputStreamThread 」は参考その２（Java外部プロセス起動メモ）を参照下さい
　（そのまま使わせて頂きました）
　http://www.ne.jp/asahi/hishidama/home/tech/java/process.html
・動作確認はJDK1.6（ProcessBuilderを使っているので1.4系では動きません）
・1.4系で動かす場合はRuntime使って下さい</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156</pre></td><td class="code"><div class="highlight"><pre><span class="c">//===========</span>
<span class="c">// 監視プロセス側（起動はこっち）</span>
<span class="k">package</span> <span class="n">how</span><span class="o">;</span>

<span class="k">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.InputStream</span><span class="o">;</span>

<span class="c">// 外部プロセスをｎ回起動し、一定時間内に処理が戻らなければ終了させます</span>
<span class="c">// プロセスAをキックする「監視プロセス」として作成</span>
<span class="c">// http://www.02.246.ne.jp/~torutk/javahow2/exec.html</span>
<span class="c">// http://www.ne.jp/asahi/hishidama/home/tech/java/process.html</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">FullLifeByProc</span> <span class="o">{</span>

    <span class="c">// プロセスAの出力用</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">InputStream</span> <span class="n">stdIn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">InputStream</span> <span class="n">errIn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">InputStreamThread</span> <span class="n">inputTh</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">InputStreamThread</span> <span class="n">errorTh</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">MAX_COUNT_KICK_TARG_PROC</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>

    <span class="c">// プロセスAをn回実行する</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">workingDir</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;user.dir&quot;</span><span class="o">);</span>
        <span class="n">ProcessBuilder</span> <span class="n">pb</span>  <span class="o">=</span><span class="k">new</span> <span class="n">ProcessBuilder</span><span class="o">(</span><span class="s">&quot;java&quot;</span><span class="o">,</span> <span class="s">&quot;how.ProcFenix&quot;</span><span class="o">);</span>
        <span class="n">File</span> <span class="n">dir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">workingDir</span> <span class="o">+</span> <span class="s">&quot;\\bin&quot;</span><span class="o">);</span>
        <span class="c">// binをパスに追加するのがスマートだと思うけどとりあえず版で</span>
        <span class="n">pb</span><span class="o">.</span><span class="na">directory</span><span class="o">(</span><span class="n">dir</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">runCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">while</span><span class="o">(</span><span class="n">runCount</span> <span class="o">&lt;</span> <span class="n">MAX_COUNT_KICK_TARG_PROC</span><span class="o">){</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Process</span> <span class="n">proc</span> <span class="o">=</span> <span class="n">runProc</span><span class="o">(</span><span class="n">pb</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">proc</span><span class="o">.</span><span class="na">exitValue</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;外部プロセスは自ら終了しました。&quot;</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;外部プロセスは強制的に終了させられました。&quot;</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">showOuterMessage</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>

            <span class="c">// タスクマネージャ等でプロセスAの消滅を確認し易くする為に待ちを入れる</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">runCount</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="c">// プロセスAを実行する</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">Process</span> <span class="n">runProc</span><span class="o">(</span><span class="n">ProcessBuilder</span> <span class="n">pb</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span><span class="o">{</span>
        <span class="n">Process</span> <span class="n">proc</span> <span class="o">=</span> <span class="n">pb</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">stdIn</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
            <span class="n">errIn</span> <span class="o">=</span> <span class="n">proc</span><span class="o">.</span><span class="na">getErrorStream</span><span class="o">();</span>
            <span class="n">inputTh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamThread</span><span class="o">(</span><span class="n">stdIn</span><span class="o">,</span> <span class="s">&quot;shift-jis&quot;</span><span class="o">);</span>
            <span class="n">errorTh</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamThread</span><span class="o">(</span><span class="n">errIn</span><span class="o">,</span> <span class="s">&quot;shift-jis&quot;</span><span class="o">);</span>
            <span class="n">inputTh</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="n">errorTh</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>

            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">((</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">25000</span><span class="o">));</span>
            <span class="n">proc</span><span class="o">.</span><span class="na">destroy</span><span class="o">();</span>

            <span class="n">inputTh</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
            <span class="n">errorTh</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span><span class="n">stdIn</span><span class="o">.</span><span class="na">close</span><span class="o">();}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
            <span class="k">try</span> <span class="o">{</span><span class="n">errIn</span><span class="o">.</span><span class="na">close</span><span class="o">();}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">proc</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="c">// プロセスAの出力を表示する</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">showOuterMessage</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">inputTh</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">errorTh</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---show message begin---&quot;</span><span class="o">);</span>
        <span class="c">//標準出力の内容を出力</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">inputTh</span><span class="o">.</span><span class="na">getStringList</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="c">//標準エラーの内容を出力</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">errorTh</span><span class="o">.</span><span class="na">getStringList</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;---show message end---&quot;</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="c">//===========</span>
<span class="c">// プロセスA側</span>
<span class="k">package</span> <span class="n">how</span><span class="o">;</span>

<span class="k">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.FileWriter</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="c">// 不定期にｎ回鳴きます（標準出力＋ログファイル）</span>
<span class="c">// ※ログファイルへの出力は、ファイルがある場合のみ</span>
<span class="c">// FullLifeByProcから起動される「プロセスA」として作成</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ProcFenix</span> <span class="o">{</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">MAX_COUNT_CAW</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">LOG_FILE_PATH</span> <span class="o">=</span> <span class="s">&quot;c:\\work\\hoge.txt&quot;</span><span class="o">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[Start] ProcFenix.main()&quot;</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">lifeTime</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)(</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">()</span> <span class="o">*</span> <span class="mi">5000</span><span class="o">);</span>
        <span class="n">Date</span> <span class="n">date</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">File</span> <span class="n">fl</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">LOG_FILE_PATH</span><span class="o">);</span>
        <span class="kt">boolean</span> <span class="n">existLogFile</span> <span class="o">=</span> <span class="n">fl</span><span class="o">.</span><span class="na">exists</span><span class="o">();</span>
        <span class="n">String</span> <span class="n">lineSep</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;line.separator&quot;</span><span class="o">);</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">MAX_COUNT_CAW</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">date</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
            <span class="c">// ログファイルの書き込みはファイルがある場合だけ</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">existLogFile</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">FileWriter</span> <span class="n">fw</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="n">fw</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileWriter</span><span class="o">(</span><span class="n">fl</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
                    <span class="n">fw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;  「トゥットゥルー」&quot;</span> <span class="o">+</span> <span class="n">lineSep</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="n">fw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">date</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;  「トゥットゥルー」&quot;</span><span class="o">);</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">lifeTime</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="n">i</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;[Exit] ProcFenix.main()&quot;</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506131943/http://ja.doukaku.org/comment/10405/addtag/" class="addtag" id="addtag_10405">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506131943/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100506131943/http://ja.doukaku.org/comment/10405/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506131943/http://ja.doukaku.org/comment/10405/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10405"
  >-</span><span
  class="button yellow"
  id="rating_z_10405"
  >0</span><span 
  class="button green"
  id="rating_p_10405"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506131943/http://ja.doukaku.org/283/reply_to/10405/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100506131943if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100506131943/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100506131943/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100506131943/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100506131943/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100506131943/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100506131943/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100506131943/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100506131943/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100506131943/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100506131943/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100506131943im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100506131943/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100506131943/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100506131943/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100506131943/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100506131943/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100506131943/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100506131943/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100506131943/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100506131943im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100506131943/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100506131943/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100506131943/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100506131943js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 13:19:43 May 6, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:33:35 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
