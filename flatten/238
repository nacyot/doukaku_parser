
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
ナイツ関数（ボケの方）
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20090619074204cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20090619074204cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20090619074204cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20090619074204/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20090619074204/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20090619074204js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20090619074204js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20090619074204js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20090619074204js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app10.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/238\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "19";
var displayMonth = "Jun";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/238/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090619074204" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20090311122552/http://ja.doukaku.org/238/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="11 Mar 2009"><strong>MAR</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 7:42:04 Jun 19, 2009">JUN</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jul
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20090311122552/http://ja.doukaku.org/238/flatten/" title="12:25:52 Mar 11, 2009" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 7:42:04 Jun 19, 2009">19</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2008
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 7:42:04 Jun 19, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20090619074204*/http://ja.doukaku.org/238/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">11 Mar 09 - 19 Jun 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:5:001001000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20090619074204/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20090619074204im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20090619074204/http://ja.doukaku.org/238/">ナイツ関数（ボケの方）</a>
</h2>

    





<div class="comment" id="comment8549">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20090619074204/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8549/">#8549</a>(<script language="JavaScript">print_time(new Date("2009/02/25 07:09 GMT"));</script><noscript>2009/02/25 07:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  入力した文章のところどころを言い間違えて出力する関数を実装してください。<br/>（ナベアツ算を見てて思いつきました）<br/><br/>入出力の方法は標準入出力や引数・戻り値など、扱いやすい方法でかまいません。<br/><br/>文字単位でランダムに間違えても面白くないので、単語のリストから似た単語の候補を探すようにしてください。英単語でもＯＫです。単語のリストは参考ページからダウンロードしたものを加工して利用すると良いと思います。（４０００個あります）<br/><br/>結果がつまらなくても構いませんが、面白いボケをうむ工夫があると良いです。<br/>※人が考えたボケは求めてませんよ！<br/><br/>入力の例として「どう書く？org」の前文をお借りしました。ご自分でヤホーで調べたりして手ごろな文章を見つけて下しあ。<br/>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090619074204/http://www.ais.riec.tohoku.ac.jp/lab/wordlist/index-j.html">日本語単語リスト</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>＜入力例＞
ドウカク org ヘ ヨウコソ
コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ
 プログラマ ノ タメノ コロシアム デス
トウコウ ヲ タメシテ ミタイ カタ ハ テスト
トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス

＜出力例＞
ドウモク org ヘ ヨウコソ
コノ ザレゴト ハ ダサレタ オダイ ヲ イワハダ トシシタ キソイアウ
 プログラマ ノ タチノミ コロシアム デス
トウコウ ヲ ハナシテ ミチノリ カタ ハ プリント
トリアエズ ナガメテ ミツリン カタ ハ ゲンゴ ノ キンラン ガ オススメ デス
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8549/addtag/" class="addtag" id="addtag_8549">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8549/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8549/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8549"
  >-</span><span
  class="button yellow"
  id="rating_z_8549"
  >0</span><span 
  class="button green"
  id="rating_p_8549"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8549/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20090619074204/http://ja.doukaku.org/238/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20090619074204/http://ja.doukaku.org/238/nested/">ネスト表示</a>
<a href="/web/20090619074204/http://ja.doukaku.org/238/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment8567">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090619074204/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090619074204/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8567/">#8567</a>(<script language="JavaScript">print_time(new Date("2009/02/28 09:56 GMT"));</script><noscript>2009/02/28 09:56 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>単語のリストから文字数が似ていて最初と最後の文字が一致するものをピックアップし、該当がないときは元の単語を、複数ある時はランダムにチョイスして出力しています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>| in wordList file |
in := &#39;ドウカク org ヘ ヨウコソ
コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ
プログラマ ノ タメノ コロシアム デス
トウコウ ヲ タメシテ ミタイ カタ ハ テスト
トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス&#39;.

wordList := OrderedCollection new.
#(&#39;25_10&#39; &#39;40_25&#39; &#39;55_40&#39; &#39;70_55&#39;) do: [:range |
    file := FileStream fileNamed: &#39;fam&#39;, range, &#39;.txt&#39;.
    file converter: (TextConverter newForEncoding: &#39;sjis&#39;).
    file wantsLineEndConversion: true.
    [file atEnd] whileFalse: [wordList addAll: (file nextLine subStrings: String tab)].
    file close].

World findATranscript: nil.

in linesDo: [:line |
    Transcript cr.
    (line subStrings: &#39; &#39;)
        do: [:each |
            | foundWords |
            foundWords := wordList select: [:word |
                (word size - each size) abs &lt;= 1 and: [
                    word first = each first and: [word last = each last]]].
            foundWords ifEmpty: [foundWords := foundWords copyWith: each].
            Transcript show: foundWords atRandom]
        separatedBy: [Transcript space]]

&quot;=&gt;
ドクヤク org ヘ ヨワミソ
コノ サトビト ハ ダサレタ オトガイ ヲ イトコニ トシワカ キュウロウ
プラズマ ノ タカドノ コロシアム デス
トクユウ ヲ タメシテ ミタイ カタ ハ テナント
トキワズ ナツバテ ミタイ カタ ハ ゲンゴ ノ イチミン ガ オツトメ デス &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8567/addtag/" class="addtag" id="addtag_8567">タグ</a>:
	
    
    <a href="/web/20090619074204/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8567/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8567/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8567"
  >-</span><span
  class="button yellow"
  id="rating_z_8567"
  >0</span><span 
  class="button green"
  id="rating_p_8567"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8567/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment8573">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090619074204/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090619074204/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8573/">#8573</a>(<script language="JavaScript">print_time(new Date("2009/03/03 07:26 GMT"));</script><noscript>2009/03/03 07:26 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>ボケるのに「レーベンシュタイン距離( <a class="reference" href="/web/20090619074204/http://ja.wikipedia.org/wiki/%E3%83%AC%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%B3%E8%B7%9D%E9%9B%A2">http://ja.wikipedia.org/wiki/%E3%83%AC%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%B3%E8%B7%9D%E9%9B%A2</a> )」を使ってみました。</p>
<p>入力はテキストファイルからで。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98</pre></td><td class="code"><div class="highlight"><pre><span class="c">/*</span>
<span class="c"> * NightsFormula.java</span>
<span class="c"> *</span>
<span class="c"> */</span>
<span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">NightsFormula</span> <span class="o">{</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">double</span> <span class="n">_MINSimilarityRate</span> <span class="o">=</span> <span class="mf">0.51</span><span class="o">;</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        
        <span class="n">String</span><span class="o">[]</span> <span class="n">wordList</span> <span class="o">=</span> <span class="n">getWordList</span><span class="o">(</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;fam25_10.txt&quot;</span><span class="o">,</span><span class="s">&quot;fam40_25.txt&quot;</span><span class="o">,</span><span class="s">&quot;fam55_40.txt&quot;</span><span class="o">,</span><span class="s">&quot;fam70_55.txt&quot;</span><span class="o">});</span>
        
        <span class="n">String</span><span class="o">[]</span> <span class="n">srcList</span> <span class="o">=</span> <span class="n">getWordList</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;inputSample.txt&quot;</span><span class="o">});</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">wordList</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">srcList</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;word list or src list is NULL&quot;</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">StringBuffer</span> <span class="n">outb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">srcList</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">srcList</span><span class="o">[</span><span class="n">i</span><span class="o">]).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">wordList</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++){</span>
                <span class="kt">double</span> <span class="n">sr</span> <span class="o">=</span> <span class="n">getSimilarityRate</span><span class="o">(</span><span class="n">srcList</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">wordList</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
                <span class="k">if</span><span class="o">(</span><span class="n">sr</span> <span class="o">&gt;=</span><span class="n">_MINSimilarityRate</span><span class="o">){</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">wordList</span><span class="o">[</span><span class="n">j</span><span class="o">]).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">String</span><span class="o">[]</span> <span class="n">cand</span> <span class="o">=</span> <span class="n">split</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
            <span class="n">String</span> <span class="n">sc</span> <span class="o">=</span> <span class="n">cand</span><span class="o">[(</span><span class="kt">int</span><span class="o">)(</span><span class="n">cand</span><span class="o">.</span><span class="na">length</span><span class="o">*</span><span class="n">Math</span><span class="o">.</span><span class="na">random</span><span class="o">())];</span>
            <span class="n">outb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">sc</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot; &quot;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">outb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="kt">double</span> <span class="n">getSimilarityRate</span><span class="o">(</span><span class="n">String</span> <span class="n">str1</span><span class="o">,</span> <span class="n">String</span> <span class="n">str2</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">ld</span> <span class="o">=</span> <span class="n">getLevenshteinDistance</span><span class="o">(</span><span class="n">str1</span><span class="o">,</span> <span class="n">str2</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="o">(</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">?</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">:</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
        <span class="kt">double</span> <span class="n">result</span> <span class="o">=</span> <span class="o">((</span><span class="kt">double</span><span class="o">)(</span><span class="n">len</span> <span class="o">-</span> <span class="n">ld</span><span class="o">)</span> <span class="o">/</span> <span class="n">len</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">getLevenshteinDistance</span><span class="o">(</span><span class="n">String</span> <span class="n">str1</span><span class="o">,</span> <span class="n">String</span> <span class="n">str2</span><span class="o">){</span>
        
    <span class="kt">int</span><span class="o">[][]</span> <span class="n">lArr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="mi">1</span><span class="o">][</span><span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()+</span><span class="mi">1</span><span class="o">];</span>
        
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lArr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">lArr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">lArr</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="n">lArr</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
    
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++){</span>
                <span class="kt">int</span> <span class="n">cost</span> <span class="o">=</span> <span class="o">(</span><span class="n">str1</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="n">str2</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">j</span><span class="o">))</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
                <span class="n">lArr</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">getMinimum</span><span class="o">(</span> <span class="n">lArr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lArr</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="n">lArr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span><span class="n">cost</span> <span class="o">);</span>
            <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">lArr</span><span class="o">[</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">()][</span><span class="n">str2</span><span class="o">.</span><span class="na">length</span><span class="o">()];</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">getMinimum</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">){</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&lt;</span> <span class="n">b</span> <span class="o">?</span> <span class="n">a</span> <span class="o">:</span> <span class="n">b</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">c</span> <span class="o">?</span> <span class="n">m</span> <span class="o">:</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">getWordList</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">filenames</span><span class="o">){</span>
        <span class="n">FileReader</span> <span class="n">fr</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">filenames</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="k">try</span><span class="o">{</span>
                <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="n">fr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">filenames</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
                <span class="n">String</span> <span class="n">line</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
                <span class="k">while</span><span class="o">((</span><span class="n">line</span><span class="o">=</span><span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())!=</span> <span class="kc">null</span><span class="o">){</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">line</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;\t&quot;</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">){</span>
                <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
            <span class="o">}</span><span class="k">finally</span><span class="o">{</span>
                <span class="k">if</span><span class="o">(</span><span class="n">in</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span> <span class="k">try</span><span class="o">{</span> <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">){</span> <span class="o">;</span> <span class="o">}</span><span class="k">finally</span><span class="o">{</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;}</span> <span class="o">}</span>
                <span class="k">if</span><span class="o">(</span><span class="n">fr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span> <span class="k">try</span><span class="o">{</span> <span class="n">fr</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">){</span> <span class="o">;</span> <span class="o">}</span><span class="k">finally</span><span class="o">{</span> <span class="n">fr</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;}</span> <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">split</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">split</span><span class="o">(</span><span class="n">StringBuffer</span> <span class="n">sb</span><span class="o">){</span>
        <span class="n">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="s">&quot; \t&quot;</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">countTokens</span><span class="o">();</span>
        <span class="n">String</span><span class="o">[]</span> <span class="n">wlist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="n">wlist</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">wlist</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8573/addtag/" class="addtag" id="addtag_8573">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8573/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8573/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8573"
  >-</span><span
  class="button yellow"
  id="rating_z_8573"
  >0</span><span 
  class="button green"
  id="rating_p_8573"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8573/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment8577">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/852/" target="_top">emasaka</a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8577/">#8577</a>(<script language="JavaScript">print_time(new Date("2009/03/04 17:10 GMT"));</script><noscript>2009/03/04 17:10 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>元ネタがわからないので、外してたらすみません。

コード欄が1つなのでつなげていますが、mkdic.plとnaitsu.plの
2つのプログラムからなります。

mkdic.plは、事前にデータを作るプログラムです。
mecabのipadicのソースに含まれるNoun.csvをカレントディレクトリ
に置いて実行します。
Noun.csvにある60,477語の総当たり（3,657,407,052通り）で、
読みのLevenshtein距離が1になる組み合わせを求め、DB化します。

# 後から考えると、1操作で変換できる組み合わせだけを抜き出す
# （1操作以上は計算しない）のが効率的でしたが、それに気が
# ついたのは1日経過後ぐらい。

naitsu.plは、引数のファイルまたは標準入力から読み込んだ
テキストをText::MeCabで分解して、単語がmkdic.plで作った
DBにあればランダムに置きかえます。


$ perl mkdic.pl
（この間3〜4日ぐらい）
$ cat sample.txt
このサイトは出されたお題をいかに解くか競い合う、プログラマのためのコロシアムです。
$ perl naitsu.pl sample.txt
この細部は出されたお蛇尾をいかに解くか競い合う、プログラムのまめのコロシアムです。
$ perl naitsu.pl sample.txt
この最多は出されたおだてをいかに解くか競い合う、プログラマーのタネのコロシアムです。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>
<span class="c1"># mkdic.pl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Encode</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Text::</span><span class="n">Levenshtein</span> <span class="sx">qw(fastdistance)</span><span class="p">;</span>
<span class="k">use</span> <span class="n">DBI</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$source</span> <span class="o">=</span> <span class="s">&#39;./Noun.csv&#39;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$source_enc</span> <span class="o">=</span> <span class="s">&#39;euc-jp&#39;</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$dbfile</span> <span class="o">=</span> <span class="s">&#39;./ls1.sqlite&#39;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$db_enc</span> <span class="o">=</span> <span class="s">&#39;utf-8&#39;</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">readin</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">@list</span><span class="p">;</span>
    <span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&#39;&lt;&#39;</span><span class="p">,</span> <span class="nv">$source</span> <span class="ow">or</span> <span class="nb">die</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">&lt;</span><span class="nv">$fh</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="p">(</span><span class="nv">$word</span><span class="p">,</span> <span class="nv">$yomi</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nb">split</span><span class="p">(</span><span class="sr">/,/</span><span class="p">,</span> <span class="n">decode</span><span class="p">(</span><span class="nv">$source_enc</span><span class="p">,</span> <span class="nv">$_</span><span class="p">)))[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">11</span><span class="p">];</span>
        <span class="nb">push</span> <span class="nv">@list</span><span class="p">,</span> <span class="p">{</span> <span class="n">word</span> <span class="o">=&gt;</span> <span class="nv">$word</span><span class="p">,</span> <span class="n">yomi</span> <span class="o">=&gt;</span> <span class="nv">$yomi</span> <span class="p">};</span>
    <span class="p">}</span>
    <span class="nb">close</span> <span class="nv">$fh</span><span class="p">;</span>
    <span class="o">\</span><span class="nv">@list</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">make_db</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="k">do</span><span class="p">(</span><span class="s">&#39;CREATE TABLE ls1 (key string, val string)&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">make_ls1</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$list_ref</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">@list</span> <span class="o">=</span> <span class="nv">@</span><span class="p">{</span><span class="nv">$list_ref</span><span class="p">};</span>
    <span class="k">my</span> <span class="nv">$sth</span> <span class="o">=</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="n">prepare</span><span class="p">(</span><span class="s">&#39;INSERT INTO ls1 VALUES (?,?)&#39;</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$word1</span> <span class="o">=</span> <span class="nb">shift</span> <span class="nv">@list</span><span class="p">;</span>
        <span class="k">for</span> <span class="k">my</span> <span class="nv">$word2</span> <span class="p">(</span><span class="nv">@list</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">fastdistance</span><span class="p">(</span><span class="nv">$word1</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">yomi</span><span class="p">},</span> <span class="nv">$word2</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">yomi</span><span class="p">})</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">my</span> <span class="nv">$word1_enc</span> <span class="o">=</span> <span class="n">encode</span><span class="p">(</span><span class="nv">$db_enc</span><span class="p">,</span> <span class="nv">$word1</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">word</span><span class="p">});</span>
                <span class="k">my</span> <span class="nv">$word2_enc</span> <span class="o">=</span> <span class="n">encode</span><span class="p">(</span><span class="nv">$db_enc</span><span class="p">,</span> <span class="nv">$word2</span><span class="o">-&gt;</span><span class="p">{</span><span class="n">word</span><span class="p">});</span>
                <span class="nv">$sth</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">(</span><span class="nv">$word1_enc</span><span class="p">,</span> <span class="nv">$word2_enc</span><span class="p">);</span>
                <span class="nv">$sth</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">(</span><span class="nv">$word2_enc</span><span class="p">,</span> <span class="nv">$word1_enc</span><span class="p">);</span>
                <span class="k">print</span> <span class="p">(</span><span class="s">&quot;$word1_enc:$word2_enc\n&quot;</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$list_ref</span> <span class="o">=</span> <span class="n">readin</span><span class="p">();</span>
<span class="nb">unlink</span> <span class="nv">$dbfile</span> <span class="k">if</span> <span class="p">(</span><span class="o">-</span><span class="n">f</span> <span class="nv">$dbfile</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="n">DBI</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span><span class="s">&quot;dbi:SQLite:dbname=$dbfile&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span>
                       <span class="p">{</span> <span class="n">RaiseError</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">AutoCommit</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="p">});</span>
<span class="n">make_db</span><span class="p">(</span><span class="nv">$dbh</span><span class="p">);</span>
<span class="n">make_ls1</span><span class="p">(</span><span class="nv">$dbh</span><span class="p">,</span> <span class="nv">$list_ref</span><span class="p">);</span>
<span class="nv">$dbh</span><span class="o">-&gt;</span><span class="n">commit</span><span class="p">;</span>
<span class="nv">$dbh</span><span class="o">-&gt;</span><span class="n">disconnect</span><span class="p">();</span>



<span class="c1">#!/usr/bin/perl</span>
<span class="c1"># naitsu.pl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">DBI</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Text::</span><span class="n">MeCab</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$dbfile</span> <span class="o">=</span> <span class="s">&#39;./ls1.sqlite&#39;</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">get_ls1s</span> <span class="p">{</span>
    <span class="k">my</span> <span class="p">(</span><span class="nv">$sth</span><span class="p">,</span> <span class="nv">$word</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
    <span class="nv">$sth</span><span class="o">-&gt;</span><span class="n">execute</span><span class="p">(</span><span class="nv">$word</span><span class="p">);</span>
    <span class="k">my</span> <span class="p">(</span><span class="nv">$word2</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$sth</span><span class="o">-&gt;</span><span class="n">fetchrow_array</span> <span class="ow">or</span> <span class="k">return</span><span class="p">;</span>
    <span class="k">return</span> <span class="nv">$word2</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$text</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span> <span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span> <span class="o">&lt;</span><span class="n">ARGV</span><span class="o">&gt;</span><span class="p">;</span> <span class="p">};</span>

<span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="n">DBI</span><span class="o">-&gt;</span><span class="nb">connect</span><span class="p">(</span><span class="s">&quot;dbi:SQLite:dbname=$dbfile&quot;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,);</span>
<span class="k">my</span> <span class="nv">$sth</span> <span class="o">=</span> <span class="nv">$dbh</span><span class="o">-&gt;</span><span class="n">prepare</span><span class="p">(</span>
    <span class="s">&quot;SELECT val FROM ls1 WHERE key=? ORDER BY random() LIMIT 1&quot;</span> <span class="p">);</span>

<span class="k">my</span> <span class="nv">$mecab</span> <span class="o">=</span> <span class="nn">Text::</span><span class="n">MeCab</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">();</span>
<span class="k">my</span> <span class="nv">$node</span> <span class="o">=</span> <span class="nv">$mecab</span><span class="o">-&gt;</span><span class="n">parse</span><span class="p">(</span><span class="nv">$text</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(;</span> <span class="nv">$node</span><span class="p">;</span> <span class="nv">$node</span> <span class="o">=</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="k">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$word</span> <span class="o">=</span> <span class="nv">$node</span><span class="o">-&gt;</span><span class="n">surface</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$naitsu</span> <span class="o">=</span> <span class="n">get_ls1s</span><span class="p">(</span><span class="nv">$sth</span><span class="p">,</span> <span class="nv">$word</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">print</span> <span class="nv">$naitsu</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">print</span> <span class="nv">$word</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">print</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>

<span class="nv">$sth</span><span class="o">-&gt;</span><span class="n">finish</span><span class="p">;</span>
<span class="nb">undef</span> <span class="nv">$sth</span><span class="p">;</span>
<span class="nv">$dbh</span><span class="o">-&gt;</span><span class="n">disconnect</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8577/addtag/" class="addtag" id="addtag_8577">タグ</a>:
	
    
    <a href="/web/20090619074204/http://ja.doukaku.org/tag/DBI/">DBI</a>
    
    <a href="/web/20090619074204/http://ja.doukaku.org/tag/Text%3A%3ALeveshtein/">Text::Leveshtein</a>
    
    <a href="/web/20090619074204/http://ja.doukaku.org/tag/Text%3A%3AMeCab/">Text::MeCab</a>
    
    <a href="/web/20090619074204/http://ja.doukaku.org/tag/mecab/">mecab</a>
    
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8577/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8577/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8577"
  >-</span><span
  class="button yellow"
  id="rating_z_8577"
  >0</span><span 
  class="button green"
  id="rating_p_8577"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8577/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment8782">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8782/">#8782</a>(<script language="JavaScript">print_time(new Date("2009/04/05 08:11 GMT"));</script><noscript>2009/04/05 08:11 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>　JavaとSmalltalkの投稿を参考に書いてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#! /usr/bin/ruby -Ks</span>

<span class="k">class</span> <span class="nc">LevenshteinDistance</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">distance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
        <span class="n">table</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
            <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.b</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="p">:</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.table</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
            <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.table</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
                <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span>
                        <span class="n">table</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                        <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span>
                        <span class="n">table</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="o">].</span><span class="n">min</span>
            <span class="k">end</span>
        <span class="k">end</span>
        <span class="n">table</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Knights</span>
    <span class="kp">attr_accessor</span> <span class="ss">:dictionary</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">dict_file</span><span class="p">)</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">dictionary</span> <span class="o">=</span> <span class="o">[]</span>
        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dict_file</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">dictionary</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">))</span> <span class="p">}</span> <span class="p">}</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
        <span class="n">source</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span>
            <span class="n">list</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">dictionary</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="k">yield</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="p">}</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
            <span class="n">list</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">list</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">source</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">EOS</span>
<span class="sh">ドウカク org ヘ ヨウコソ</span>
<span class="sh">コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ</span>
<span class="sh">プログラマ ノ タメノ コロシアム デス</span>
<span class="sh">トウコウ ヲ タメシテ ミタイ カタ ハ テスト</span>
<span class="sh">トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス</span>
<span class="no">EOS</span>
<span class="n">knights</span> <span class="o">=</span> <span class="no">Knights</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;./path/to/word_list.txt&quot;</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">&quot;入力:</span><span class="se">\n</span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="nb">puts</span> <span class="s2">&quot;出力:&quot;</span>
<span class="n">source</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
    <span class="nb">puts</span><span class="p">(</span>
        <span class="n">knights</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="o">|</span>
            <span class="no">LevenshteinDistance</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="o">[</span><span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="o">].</span><span class="n">sort</span><span class="o">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">4</span>
        <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
    <span class="p">)</span>
<span class="k">end</span>
<span class="nb">puts</span> <span class="s2">&quot;出力:&quot;</span>
<span class="n">source</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
    <span class="nb">puts</span><span class="p">(</span>
        <span class="n">knights</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="o">|</span>
            <span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">==</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
        <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
    <span class="p">)</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8782/addtag/" class="addtag" id="addtag_8782">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8782/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8782/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8782"
  >-</span><span
  class="button yellow"
  id="rating_z_8782"
  >0</span><span 
  class="button green"
  id="rating_p_8782"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090619074204/http://ja.doukaku.org/comment/8782/">
    1
    reply
  </a>

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8782/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment8792">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8792/">#8792</a>(<script language="JavaScript">print_time(new Date("2009/04/06 10:09 GMT"));</script><noscript>2009/04/06 10:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>　レーベンシュタイン距離の計算処理に間違いがあったので修正したものを。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#! /usr/bin/ruby -Ks</span>

<span class="k">class</span> <span class="nc">LevenshteinDistance</span>
    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">distance</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
        <span class="n">table</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
            <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.b</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span> <span class="p">:</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">b</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">end</span>
        <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.table</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
            <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.table</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
                <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span>
                        <span class="n">table</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                        <span class="n">table</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span>
                        <span class="n">table</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">a</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="n">b</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">[</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="o">].</span><span class="n">min</span>
            <span class="k">end</span>
        <span class="k">end</span>
        <span class="n">table</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">last</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Knights</span>
    <span class="kp">attr_accessor</span> <span class="ss">:dictionary</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">dict_file</span><span class="p">)</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">dictionary</span> <span class="o">=</span> <span class="o">[]</span>
        <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">dict_file</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="nb">self</span><span class="o">.</span><span class="n">dictionary</span><span class="o">.</span><span class="n">concat</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">))</span> <span class="p">}</span> <span class="p">}</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">source</span><span class="p">)</span>
        <span class="n">source</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="o">|</span>
            <span class="p">(</span><span class="n">list</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">dictionary</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">d</span><span class="o">|</span> <span class="k">yield</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="p">})</span><span class="o">.</span><span class="n">empty?</span> <span class="p">?</span> <span class="n">w</span> <span class="p">:</span> <span class="n">list</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="n">list</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
        <span class="k">end</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">source</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">EOS</span>
<span class="sh">ドウカク org ヘ ヨウコソ</span>
<span class="sh">コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ</span>
<span class="sh">プログラマ ノ タメノ コロシアム デス</span>
<span class="sh">トウコウ ヲ タメシテ ミタイ カタ ハ テスト</span>
<span class="sh">トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス</span>
<span class="no">EOS</span>
<span class="nb">puts</span> <span class="s2">&quot;入力:</span><span class="se">\n</span><span class="si">#{</span><span class="n">source</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="nb">puts</span> <span class="s2">&quot;出力:&quot;</span>
<span class="n">knights</span> <span class="o">=</span> <span class="no">Knights</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;/path/to/wordlist.txt&quot;</span><span class="p">)</span>
<span class="n">source</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
    <span class="nb">puts</span><span class="p">(</span>
        <span class="n">knights</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="o">|</span>
            <span class="no">LevenshteinDistance</span><span class="o">.</span><span class="n">distance</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span><span class="o">.</span><span class="n">to_f</span> <span class="o">/</span> <span class="o">[</span><span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">,</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="o">].</span><span class="n">max</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span>
        <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
    <span class="p">)</span>
<span class="k">end</span>
<span class="nb">puts</span> <span class="s2">&quot;出力:&quot;</span>
<span class="n">source</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
    <span class="nb">puts</span><span class="p">(</span>
        <span class="n">knights</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">line</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">w</span><span class="p">,</span> <span class="n">d</span><span class="o">|</span>
            <span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">abs</span> <span class="o">&lt;=</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">==</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">&amp;&amp;</span> <span class="n">w</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span> <span class="o">==</span> <span class="n">d</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span>
        <span class="k">end</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
    <span class="p">)</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8792/addtag/" class="addtag" id="addtag_8792">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8792/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8792/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8792"
  >-</span><span
  class="button yellow"
  id="rating_z_8792"
  >0</span><span 
  class="button green"
  id="rating_p_8792"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090619074204/http://ja.doukaku.org/comment/8782/"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090619074204/http://ja.doukaku.org/comment/8792/root/"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8792/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment8810">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8810/">#8810</a>(<script language="JavaScript">print_time(new Date("2009/04/14 15:10 GMT"));</script><noscript>2009/04/14 15:10 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>　Scalaで。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80</pre></td><td class="code"><div class="highlight"><pre>import    java.io.{File,FileInputStream,InputStreamReader,BufferedReader}
import    scala.util.Random

object LevenshteinDistance {
    def distance(a:String, b:String) = {
        var    t:List[List[Int]] = List.range(a.size, -1, -1).foldLeft(List[List[Int]]())(
            (r,i) =&gt; i match {
                case 0 =&gt; List.range(0, b.size + 1)::r
                case _ =&gt; (i::List.make(b.size, 0))::r
            }
        )
        1.to(t.size - 1).foreach(i =&gt;
            1.to(t(i).size - 1).foreach(j =&gt;
                t = t.take(i) ++
                    List(
                        t(i).take(j) ++
                        List(
                            (t(i - 1)(j) + 1)
                            .min(t(i)(j - 1) + 1)
                            .min(
                                t(i - 1)(j - 1) +
                                ((a(i - 1) == b(j - 1)) match { case true =&gt; 0; case _ =&gt; 1 })
                            )
                        ) ++
                        t(i).takeRight(t(i).size - j - 1)
                    ) ++
                    t.takeRight(t.size - i - 1)
            )
        )
        t.last.last
    }
}

class CKnights(f:String, e:String) {
    var    d:List[String] = List()
    val    i:BufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(f), e))
    val    r:Random = new Random
    while(i.ready) {
        val    l:String = i.readLine
        if (l != &quot;&quot;) d = d:::l.split(&quot;\\s+&quot;).toList
    }
    i.close
    def translate(s:String)(j:(String,String)=&gt;Boolean):List[String] =
        s.split(&quot;\\s+&quot;).foldRight(List[String]())((w,k) =&gt;
            (d.filter(e =&gt; j(w, e)) match {
                case t if t.isEmpty =&gt; w
                case t =&gt; t(r.nextInt(t.size))
            })::k
        )
}

object Knights {
    def source:List[String] = readLine match {
            case null =&gt; List()
            case l =&gt; l::source
        }
    def main(args:Array[String]):Unit = args.size match {
            case a if a != 1 =&gt; println(&quot;usage: Knights DICTFILE&quot;)
            case _ =&gt; {
                var    s:List[String] = source
                var    k:CKnights = new CKnights(args.first, &quot;Shift_JIS&quot;)
                println(&quot;入力:&quot;)
                s.foreach(l =&gt; println(l))
                println(&quot;出力:&quot;)
                s.foreach(l =&gt; println(
                        k.translate(l)((w, e) =&gt;
                            LevenshteinDistance.distance(w, e).toFloat / w.size.max(e.size) &lt; 0.5
                        ).mkString(&quot; &quot;)
                    )
                )
                println(&quot;出力:&quot;)
                s.foreach(l =&gt; println(
                        k.translate(l)((w, e) =&gt;
                            Math.abs(w.size - e.size) &lt;= 1 &amp;&amp; w.first == e.first &amp;&amp; w.last == e.last
                        ).mkString(&quot; &quot;)
                    )
                )
            }
        }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/8810/addtag/" class="addtag" id="addtag_8810">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8810/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/8810/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8810"
  >-</span><span
  class="button yellow"
  id="rating_z_8810"
  >0</span><span 
  class="button green"
  id="rating_p_8810"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/8810/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9134">
  <p class="banner"><a href="/web/20090619074204/http://ja.doukaku.org/user/1025/" target="_top">tanakahisateru</a><a href="/web/20090619074204/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/9134/">#9134</a>(<script language="JavaScript">print_time(new Date("2009/06/12 15:34 GMT"));</script><noscript>2009/06/12 15:34 GMT</noscript>)
	
	
	
	[<a href="/web/20090619074204/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Java版でレーベンシュタイン距離を使っていたのに触発されたRuby版に触発されて、同じようなものを書いてみました。if-else式のために、Python2.5以上です。</p>
<p>Java版そのままだと、総あたり検索していて遅かったので、先頭文字が一致する単語のみに絞ることにしました。あと、候補が複数ある場合はランダムに選択するようにしています。</p>
<p>ちなみに単語辞書は毎回元サイトから拾っているので、オフラインでは動きません。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!coding: utf-8</span>
<span class="k">import</span> <span class="nn">urllib</span><span class="o">,</span> <span class="nn">random</span>

<span class="k">def</span> <span class="nf">download_words</span><span class="p">():</span>
    <span class="n">prefix</span> <span class="o">=</span> <span class="s">&quot;http://www.ais.riec.tohoku.ac.jp/lab/wordlist/&quot;</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;fam70_55.txt&quot;</span><span class="p">,</span> <span class="s">&quot;fam55_40.txt&quot;</span><span class="p">,</span> 
             <span class="s">&quot;fam40_25.txt&quot;</span><span class="p">,</span> <span class="s">&quot;fam25_10.txt&quot;</span><span class="p">]</span>
    <span class="n">words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
        <span class="n">fd</span> <span class="o">=</span> <span class="n">urllib</span><span class="o">.</span><span class="n">urlopen</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="n">f</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fd</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span> <span class="o">!=</span> <span class="s">&quot;&quot;</span><span class="p">:</span>
                <span class="n">words</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;sjis&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">))</span>
        <span class="n">fd</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">words</span>

<span class="n">allwords</span> <span class="o">=</span> <span class="n">download_words</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">Levenshtein_distance</span><span class="p">(</span><span class="n">word0</span><span class="p">,</span> <span class="n">word1</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span> <span class="n">d</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">)]</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span> <span class="n">d</span><span class="p">[(</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="n">j</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">word0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">word1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="n">cost</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">word0</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">word1</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="k">else</span> <span class="mi">1</span>
            <span class="n">d</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">d</span><span class="p">[(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="p">)]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">[(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="p">[(</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span><span class="o">+</span><span class="n">cost</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">d</span><span class="p">[(</span><span class="nb">len</span><span class="p">(</span><span class="n">word0</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">word1</span><span class="p">))]</span>

<span class="k">def</span> <span class="nf">similarity</span><span class="p">(</span><span class="n">word0</span><span class="p">,</span> <span class="n">word1</span><span class="p">):</span>
    <span class="n">l</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">word0</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">word1</span><span class="p">))</span>
    <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">l</span> <span class="o">-</span> <span class="n">Levenshtein_distance</span><span class="p">(</span><span class="n">word0</span><span class="p">,</span> <span class="n">word1</span><span class="p">))</span> <span class="o">/</span> <span class="n">l</span>

<span class="k">def</span> <span class="nf">find_alt_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">alt_words</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span>
        <span class="k">lambda</span> <span class="n">alt</span><span class="p">:</span> <span class="n">alt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">and</span> <span class="n">similarity</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">alt</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mf">0.5</span><span class="p">,</span>
        <span class="n">allwords</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">alt_words</span><span class="p">)</span> <span class="k">if</span> <span class="n">alt_words</span> <span class="k">else</span> <span class="n">word</span>

<span class="k">def</span> <span class="nf">knights</span><span class="p">(</span><span class="n">text</span><span class="p">):</span>
    <span class="k">return</span>  <span class="s">u&quot; &quot;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">find_alt_word</span><span class="p">(</span><span class="n">w</span><span class="p">)</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">u&quot; &quot;</span><span class="p">)])</span>

<span class="k">print</span> <span class="n">knights</span><span class="p">(</span><span class="s">u&#39;&#39;&#39;ドウカク org ヘ ヨウコソ</span>
<span class="s">コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ</span>
<span class="s">プログラマ ノ タメノ コロシアム デス</span>
<span class="s">トウコウ ヲ タメシテ ミタイ カタ ハ テスト</span>
<span class="s">トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス&#39;&#39;&#39;</span>
<span class="p">)</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;sjis&quot;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090619074204/http://ja.doukaku.org/comment/9134/addtag/" class="addtag" id="addtag_9134">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090619074204/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090619074204/http://ja.doukaku.org/comment/9134/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090619074204/http://ja.doukaku.org/comment/9134/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9134"
  >-</span><span
  class="button yellow"
  id="rating_z_9134"
  >0</span><span 
  class="button green"
  id="rating_p_9134"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090619074204/http://ja.doukaku.org/238/reply_to/9134/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20090619074204if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20090619074204/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20090619074204/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20090619074204/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20090619074204/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20090619074204/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20090619074204/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20090619074204/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20090619074204/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090619074204/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090619074204/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20090619074204im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20090619074204/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20090619074204/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20090619074204/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20090619074204/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20090619074204/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20090619074204/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20090619074204/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20090619074204/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20090619074204im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20090619074204/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20090619074204/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20090619074204/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20090619074204js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 7:42:04 Jun 19, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 12:47:44 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
