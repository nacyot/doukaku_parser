
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
小町算
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081204124022cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081204124022cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081204124022cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20081204124022/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081204124022/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081204124022js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081204124022js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081204124022js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081204124022js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app10.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/104\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "4";
var displayMonth = "Dec";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/104/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081204124022" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080329155606/http://ja.doukaku.org/104/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="29 Mar 2008"><strong>MAR</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 12:40:22 Dec 4, 2008">DEC</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jan
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080329155606/http://ja.doukaku.org/104/flatten/" title="15:56:06 Mar 29, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 12:40:22 Dec 4, 2008">4</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20070513180302/http://ja.doukaku.org/104/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 May 2007"><strong>2007</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 12:40:22 Dec 4, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081204124022*/http://ja.doukaku.org/104/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>4 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 4 Dec 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:11:001000000001_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081204124022/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20081204124022/http://ja.doukaku.org/104/">小町算</a>
</h2>

    





<div class="comment" id="comment4509">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/433/" target="_top">dpp</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4509/">#4509</a>(<script language="JavaScript">print_time(new Date("2007/11/30 10:36 GMT"));</script><noscript>2007/11/30 10:36 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>古典的なパズルである小町算を解くプログラムを作成してください。</p>
<p>小町算とは：</p>
<p>1□2□3□4□5□6□7□8□9＝100</p>
<p>四角の中に、空白、＋、－、×、÷のいずれかを一つ入れ、等式が成り立つようにするパズルです。</p>
<p>解答例：</p>
<p>	1－2－3＋4×56÷7＋8×9＝100</p>
<p>	1＋234×5÷6－7－89＝100</p>
<p></p>
<p></p>
<p>参考：　http://ja.wikipedia.org/wiki/%E5%B0%8F%E7%94%BA%E7%AE%97</p>
<p></p>
<ul>
<li>
evalやそれに類するものを使うか否かは自由です。
</li>
<li>
割り算の際には小数点以下の切捨てが起こらないのが望ましいです。(必須ではない)
<ul>
<li>
切捨てが起こる場合の解答例：1÷2÷3＋4＋5÷6＋7＋89＝100
</li>
</ul>
</li>
<li>余裕があれば括弧を含むようにしてもいいかもしれません。</li>
</ul>
<p></p>
<p>手元で20数行ほどのPythonスクリプトを書いてみたところ、101個の解答が得られました。</p>
</div>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4509/addtag/" class="addtag" id="addtag_4509">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4509"
  >-</span><span
  class="button yellow"
  id="rating_z_4509"
  >0</span><span 
  class="button green"
  id="rating_p_4509"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4509/">
  reply
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20081204124022/http://ja.doukaku.org/104/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Flatten</h2>
<a href="/web/20081204124022/http://ja.doukaku.org/104/nested/">Nested</a>
<a href="/web/20081204124022/http://ja.doukaku.org/104/">Hidden</a> 


  
  <br/>

  
  




<div class="comment" id="comment4725">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/589/" target="_top">nido</a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4725/">#4725</a>(<script language="JavaScript">print_time(new Date("2007/12/10 15:06 GMT"));</script><noscript>2007/12/10 15:06 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>枝狩り一切無し。効率悪いと思ふ。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s2">&quot;mathn&quot;</span>
<span class="p">(</span><span class="mi">5</span><span class="o">**</span><span class="mi">8</span><span class="p">)</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="n">s</span><span class="o">=</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="o">.</span><span class="n">.</span><span class="s2">&quot;9&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s2">&quot;1&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span><span class="n">e</span><span class="o">|</span>
    <span class="n">r</span><span class="o">+=[</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;+&quot;</span><span class="p">,</span><span class="s2">&quot;-&quot;</span><span class="p">,</span><span class="s2">&quot;*&quot;</span><span class="p">,</span><span class="s2">&quot;/&quot;</span><span class="o">][</span><span class="n">i</span><span class="o">%</span><span class="mi">5</span><span class="o">]+</span><span class="n">e</span><span class="p">;</span><span class="n">i</span><span class="o">/=</span><span class="mi">5</span><span class="p">;</span><span class="n">r</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="n">s</span> <span class="k">if</span> <span class="nb">eval</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">==</span><span class="mi">100</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4725/addtag/" class="addtag" id="addtag_4725">Tags</a>:
	
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/%E3%82%B3%E3%83%B3%E3%83%91%E3%82%AF%E3%83%88/">コンパクト</a>
    
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4725/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4725/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4725"
  >-</span><span
  class="button yellow"
  id="rating_z_4725"
  >0</span><span 
  class="button green"
  id="rating_p_4725"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4725/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4726">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4726/">#4726</a>(<script language="JavaScript">print_time(new Date("2007/12/10 15:42 GMT"));</script><noscript>2007/12/10 15:42 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>とりあえず投稿。括弧は使わない版。結果は101通り出てきます。

(123 - 45 - 67 + 89)
(1 * 2 - 3 + 4 - 5 + 6 + 7 + 89)
(1 + 2 * 3 - 4 - 5 + 6 + 7 + 89)
(1 - 23 + 4 * 5 + 6 + 7 + 89)
(12 - 3 - 4 + 5 - 6 + 7 + 89)
(1 + 2 + 3 * 4 - 5 - 6 + 7 + 89)
(1 - 23 - 4 + 5 * 6 + 7 + 89)
(1 * 2 / 3 + 4 * 5 / 6 + 7 + 89)
(1 / 2 * 34 - 5 + 6 - 7 + 89)
(12 + 3 + 4 + 5 - 6 - 7 + 89)
(1 * 23 - 4 + 5 - 6 - 7 + 89)
(12 / 3 + 4 * 5 - 6 - 7 + 89)
(1 - 23 - 4 - 5 + 6 * 7 + 89)
(1 * 2 - 3 + 4 + 56 / 7 + 89)
(1 + 2 * 3 - 4 + 56 / 7 + 89)
(12 + 3 + 4 - 56 / 7 + 89)
(1 * 23 - 4 - 56 / 7 + 89)
(123 + 4 - 5 + 67 - 89)
(1 + 234 * 5 / 6 - 7 - 89)
(12 + 3 * 45 + 6 * 7 - 89)
(1 + 2 * 34 - 56 + 78 + 9)
(1 + 2 + 3 - 4 + 5 + 6 + 78 + 9)
(1 * 2 * 3 - 4 + 5 + 6 + 78 + 9)
(1 * 2 + 3 * 4 + 5 - 6 + 78 + 9)
(12 + 3 * 4 - 5 - 6 + 78 + 9)
(1 * 2 * 3 * 4 - 5 - 6 + 78 + 9)
(1 * 2 - 3 + 4 * 5 - 6 + 78 + 9)
(1 + 2 + 3 * 4 * 5 / 6 + 78 + 9)
(1 + 234 * 5 * 6 / 78 + 9)
(1 + 2 * 3 + 4 + 5 + 67 + 8 + 9)
(12 + 3 - 4 + 5 + 67 + 8 + 9)
(1 - 2 + 3 * 4 + 5 + 67 + 8 + 9)
(1 - 2 - 3 + 4 * 5 + 67 + 8 + 9)
(12 * 3 - 4 * 5 + 67 + 8 + 9)
(1 / 2 / 3 * 456 + 7 + 8 + 9)
(1 + 23 - 4 + 56 + 7 + 8 + 9)
(12 + 34 + 5 * 6 + 7 + 8 + 9)
(1 - 2 - 3 + 45 + 6 * 7 + 8 + 9)
(1 * 2 + 34 + 5 + 6 * 7 + 8 + 9)
(12 + 34 - 5 + 6 * 7 + 8 + 9)
(1 * 23 + 4 + 5 + 67 - 8 + 9)
(1 + 2 + 34 - 5 + 67 - 8 + 9)
(1 * 2 + 34 + 56 + 7 - 8 + 9)
(1 + 23 * 4 + 5 - 6 + 7 - 8 + 9)
(1 + 2 + 3 * 4 * 56 / 7 - 8 + 9)
(12 + 3 * 4 + 5 + 6 + 7 * 8 + 9)
(1 * 2 * 3 * 4 + 5 + 6 + 7 * 8 + 9)
(12 - 3 + 4 * 5 + 6 + 7 * 8 + 9)
(1 - 2 - 3 + 45 - 6 + 7 * 8 + 9)
(1 * 2 + 34 + 5 - 6 + 7 * 8 + 9)
(12 + 34 - 5 - 6 + 7 * 8 + 9)
(12 - 3 - 4 + 5 * 6 + 7 * 8 + 9)
(1 * 23 + 4 + 56 / 7 * 8 + 9)
(1 * 23 * 4 - 56 / 7 / 8 + 9)
(1 + 23 - 4 + 5 + 6 + 78 - 9)
(1 * 2 + 3 + 4 * 5 + 6 + 78 - 9)
(12 * 3 - 4 + 5 - 6 + 78 - 9)
(1 * 2 + 3 - 4 + 5 * 6 + 78 - 9)
(12 / 3 / 4 + 5 * 6 + 78 - 9)
(123 + 45 - 67 + 8 - 9)
(1 + 23 * 4 - 5 + 6 + 7 + 8 - 9)
(123 - 4 - 5 - 6 - 7 + 8 - 9)
(1 - 2 + 3 * 4 * 5 + 6 * 7 + 8 - 9)
(123 + 4 * 5 - 6 * 7 + 8 - 9)
(1 + 23 * 4 + 56 / 7 + 8 - 9)
(1 * 2 + 3 + 45 + 67 - 8 - 9)
(1 * 2 * 34 + 56 - 7 - 8 - 9)
(12 / 3 + 4 * 5 * 6 - 7 - 8 - 9)
(1 - 2 + 3 + 45 + 6 + 7 * 8 - 9)
(1 - 2 + 3 * 4 * 5 - 6 + 7 * 8 - 9)
(12 / 3 + 4 * 5 * 6 * 7 / 8 - 9)
(1 + 2 + 3 - 45 + 67 + 8 * 9)
(1 * 2 * 3 - 45 + 67 + 8 * 9)
(1 - 2 - 34 + 56 + 7 + 8 * 9)
(1 / 2 * 3 / 4 * 56 + 7 + 8 * 9)
(1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 * 9)
(1 * 2 * 3 + 4 + 5 + 6 + 7 + 8 * 9)
(1 + 23 - 4 - 5 + 6 + 7 + 8 * 9)
(1 - 2 * 3 + 4 * 5 + 6 + 7 + 8 * 9)
(12 * 3 - 4 - 5 - 6 + 7 + 8 * 9)
(1 + 2 * 3 + 4 * 5 - 6 + 7 + 8 * 9)
(1 - 2 * 3 - 4 + 5 * 6 + 7 + 8 * 9)
(1 + 2 - 3 * 4 + 5 * 6 + 7 + 8 * 9)
(1 + 2 * 3 * 4 * 5 / 6 + 7 + 8 * 9)
(12 + 3 * 4 + 5 + 6 - 7 + 8 * 9)
(1 * 2 * 3 * 4 + 5 + 6 - 7 + 8 * 9)
(12 - 3 + 4 * 5 + 6 - 7 + 8 * 9)
(1 - 2 - 3 + 45 - 6 - 7 + 8 * 9)
(1 * 2 + 34 + 5 - 6 - 7 + 8 * 9)
(12 + 34 - 5 - 6 - 7 + 8 * 9)
(12 - 3 - 4 + 5 * 6 - 7 + 8 * 9)
(1 - 2 * 3 - 4 - 5 + 6 * 7 + 8 * 9)
(1 + 2 - 3 * 4 - 5 + 6 * 7 + 8 * 9)
(1 + 2 + 3 - 4 * 5 + 6 * 7 + 8 * 9)
(1 * 2 * 3 - 4 * 5 + 6 * 7 + 8 * 9)
(1 + 23 - 4 + 56 / 7 + 8 * 9)
(1 * 2 + 34 - 56 / 7 + 8 * 9)
(1 - 2 - 3 + 4 * 56 / 7 + 8 * 9)
(1 * 234 + 5 - 67 - 8 * 9)
(1 + 234 - 56 - 7 - 8 * 9)
(1 + 2 + 34 * 5 + 6 - 7 - 8 * 9)
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">atom?</span> <span class="nv">x</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))))</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">atom-list?</span> <span class="nv">ls</span><span class="p">)</span>
  <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">ls</span><span class="p">)</span> <span class="p">(</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">my-flatten</span> <span class="nv">ls</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">ls</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
        <span class="p">((</span><span class="nb">pair? </span><span class="nv">ls</span><span class="p">)</span>
         <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="nv">ls</span><span class="p">))</span>
               <span class="p">((</span><span class="nf">atom-list?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">))</span>
                <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">))</span> <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">ls</span><span class="p">))))</span>
               <span class="p">(</span><span class="nf">else</span>
                <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">))</span> <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">ls</span><span class="p">))))))</span>
        <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">list </span><span class="nv">ls</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">_</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
  <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">10</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">10</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">100</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">100</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">1000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">1000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">10000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">10000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">100000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">100000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">1000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">1000000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">10000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">10000000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">100000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">100000000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
        <span class="p">((</span><span class="nb">&lt; </span><span class="nv">b</span> <span class="mi">1000000000</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">a</span> <span class="mi">1000000000</span><span class="p">)</span> <span class="nv">b</span><span class="p">))</span>
<span class="c1">;        (else #f)</span>
        <span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">ops</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">_</span> <span class="nv">+</span> <span class="nv">-</span> <span class="nv">*</span> <span class="nv">/</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">apply-op</span> <span class="nv">op</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">case </span><span class="nv">op</span>
    <span class="p">((</span><span class="nf">_</span><span class="p">)</span> <span class="p">(</span><span class="nf">_</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">+</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">-</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">*</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">/</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">apply-rev-op</span> <span class="nv">op</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">case </span><span class="nv">op</span>
<span class="c1">;    ((_) (_ x y))</span>
    <span class="p">((</span><span class="nf">+</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">-</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">*</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">/</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">komachi</span> <span class="nv">n</span> <span class="nv">sum</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">append-op-n</span> <span class="nv">ls</span> <span class="nv">op</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">append </span><span class="nv">ls</span> <span class="p">(</span><span class="nb">list </span><span class="nv">op</span> <span class="nv">n</span><span class="p">)))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k=</span> <span class="nv">k</span> <span class="nv">p</span><span class="p">)</span>
<span class="c1">; [1..k] = p となる組み合わせ</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">k</span><span class="p">)</span> <span class="c1">;</span>
      <span class="c1">; 1 = 1   ; p!=1ならアウト</span>
        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">p</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">((</span><span class="mi">1</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())</span>
    <span class="c1">; [1..k-1] ?? k = p</span>
        <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">op</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k</span> <span class="p">(</span><span class="nb">- </span><span class="nv">k</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">op</span> <span class="nv">k</span> <span class="nv">p</span><span class="p">))</span> <span class="nv">ops</span><span class="p">))</span>
        <span class="p">))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">eval-exp</span> <span class="nv">exp</span><span class="p">)</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">iter</span> <span class="nv">rest</span> <span class="nv">product</span><span class="p">)</span>
      <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">rest</span><span class="p">)</span> <span class="nv">product</span><span class="p">)</span>
            <span class="p">((</span><span class="nb">eq? </span><span class="ss">&#39;*</span> <span class="p">(</span><span class="nb">car </span><span class="nv">rest</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">cddr </span><span class="nv">rest</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">product</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">rest</span><span class="p">))))</span>
            <span class="p">((</span><span class="nb">eq? </span><span class="ss">&#39;/</span> <span class="p">(</span><span class="nb">car </span><span class="nv">rest</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">cddr </span><span class="nv">rest</span><span class="p">)</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">product</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">rest</span><span class="p">))))</span>
            <span class="p">))</span>
    <span class="p">(</span><span class="nf">iter</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">exp</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">exp</span><span class="p">)))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k?&lt;</span><span class="o">..</span><span class="nv">&gt;=</span> <span class="nv">k</span> <span class="nv">op</span> <span class="nv">exp</span> <span class="nv">p</span><span class="p">)</span>
<span class="c1">; [1..k] op (exp) = p</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">k</span><span class="p">)</span>
        <span class="p">(</span><span class="k">case </span><span class="nv">op</span>
          <span class="p">((</span><span class="nf">_</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">let1</span> <span class="nv">exp*</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">_</span> <span class="mi">1</span> <span class="p">(</span><span class="nb">car </span><span class="nv">exp</span><span class="p">))</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">exp</span><span class="p">))</span>
                 <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">eval-exp</span> <span class="nv">exp*</span><span class="p">)</span> <span class="nv">p</span><span class="p">)</span>
                     <span class="nv">exp*</span>
                     <span class="o">&#39;</span><span class="p">())))</span>
          <span class="p">((</span><span class="nb">+ </span><span class="nv">-</span><span class="p">)</span> <span class="c1">; 1 +- exp = p</span>
           <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">apply-op</span> <span class="nv">op</span> <span class="mi">1</span> <span class="p">(</span><span class="nf">eval-exp</span> <span class="nv">exp</span><span class="p">))</span> <span class="nv">p</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="nv">op</span><span class="p">)</span> <span class="nv">exp</span><span class="p">)</span>
               <span class="o">&#39;</span><span class="p">()))</span>
          <span class="p">((</span><span class="nb">* </span><span class="nv">/</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">let1</span> <span class="nv">exp*</span> <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="nv">op</span><span class="p">)</span> <span class="nv">exp</span><span class="p">)</span>
                 <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">eval-exp</span> <span class="nv">exp*</span><span class="p">)</span> <span class="nv">p</span><span class="p">)</span>
                     <span class="nv">exp*</span>
                     <span class="o">&#39;</span><span class="p">())))</span>
          <span class="p">)</span>
        <span class="p">(</span><span class="k">case </span><span class="nv">op</span>
          <span class="p">((</span><span class="nf">_</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">my-flatten</span>
            <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">op2</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k?&lt;</span><span class="o">..</span><span class="nv">&gt;=</span> <span class="p">(</span><span class="nb">- </span><span class="nv">k</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">op2</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">_</span> <span class="nv">k</span> <span class="p">(</span><span class="nb">car </span><span class="nv">exp</span><span class="p">))</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">exp</span><span class="p">))</span> <span class="nv">p</span><span class="p">))</span> <span class="nv">ops</span><span class="p">)))</span>
          <span class="p">((</span><span class="nb">+ </span><span class="nv">-</span><span class="p">)</span>
           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">append </span><span class="nv">x</span> <span class="p">(</span><span class="nb">list </span><span class="nv">op</span><span class="p">)</span> <span class="nv">exp</span><span class="p">))</span>
                <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k=</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">apply-rev-op</span> <span class="nv">op</span> <span class="nv">p</span> <span class="p">(</span><span class="nf">eval-exp</span> <span class="nv">exp</span><span class="p">))))</span>
                <span class="p">))</span>
          <span class="p">((</span><span class="nb">* </span><span class="nv">/</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">my-flatten</span>
            <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">op2</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k?&lt;</span><span class="o">..</span><span class="nv">&gt;=</span> <span class="p">(</span><span class="nb">- </span><span class="nv">k</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">op2</span> <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nb">list </span><span class="nv">k</span> <span class="nv">op</span><span class="p">)</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">p</span><span class="p">))</span> <span class="nv">ops</span><span class="p">)))</span>
          <span class="p">)</span>
        <span class="p">))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k</span> <span class="nv">k</span> <span class="nv">op</span> <span class="nv">n</span> <span class="nv">p</span><span class="p">)</span>
<span class="c1">; [1..k] op n = p となる組み合わせが全部ほしい</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="mi">1</span> <span class="nv">k</span><span class="p">)</span>
      <span class="c1">;k=1 : [1] op n = p</span>
        <span class="p">(</span><span class="k">case </span><span class="nv">op</span>
          <span class="p">((</span><span class="nf">_</span><span class="p">)</span>
           <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">_</span> <span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">_</span> <span class="mi">1</span> <span class="nv">n</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">()))</span>
          <span class="p">((</span><span class="nb">+ </span><span class="nv">-</span><span class="p">)</span>
           <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">apply-op</span> <span class="nv">op</span> <span class="mi">1</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="nv">op</span> <span class="nv">n</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
          <span class="p">((</span><span class="nf">*</span><span class="p">)</span>
           <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="nv">n</span> <span class="nv">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="mi">1</span> <span class="ss">&#39;*</span> <span class="nv">n</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))</span>
          <span class="p">((</span><span class="nf">/</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span> <span class="c1">; 1/n (n&gt;1) cannot be p</span>
          <span class="p">)</span>
      <span class="c1">;k&gt;1</span>
        <span class="p">(</span><span class="k">case </span><span class="nv">op</span>
          <span class="p">((</span><span class="nf">_</span><span class="p">)</span><span class="c1">; [1..k-1] ?? k_n = p</span>
           <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">op2</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k</span> <span class="p">(</span><span class="nb">- </span><span class="nv">k</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">op2</span> <span class="p">(</span><span class="nf">_</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">p</span><span class="p">))</span> <span class="nv">ops</span><span class="p">)))</span>
          <span class="p">((</span><span class="nb">+ </span><span class="nv">-</span><span class="p">)</span> <span class="c1">; [1..k] ± n = p ;</span>
           <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">append-op-n</span> <span class="nv">x</span> <span class="nv">op</span> <span class="nv">n</span><span class="p">))</span>
                <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k=</span> <span class="nv">k</span> <span class="p">(</span><span class="nf">apply-rev-op</span> <span class="nv">op</span> <span class="nv">p</span> <span class="nv">n</span><span class="p">)))))</span>
          <span class="p">((</span><span class="nb">* </span><span class="nv">/</span><span class="p">)</span> <span class="c1">; [1..k] */ n = p :: [1..c] ? ([c+1..k] */ n) = p</span>
           <span class="p">(</span><span class="nf">my-flatten</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">op2</span><span class="p">)</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k?&lt;</span><span class="o">..</span><span class="nv">&gt;=</span> <span class="p">(</span><span class="nb">- </span><span class="nv">k</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">op2</span> <span class="p">(</span><span class="nb">list </span><span class="nv">k</span> <span class="nv">op</span> <span class="nv">n</span><span class="p">)</span> <span class="nv">p</span><span class="p">))</span> <span class="nv">ops</span><span class="p">)))</span>
           <span class="c1">; 結合則が加減算とは違う</span>
          <span class="p">)</span>
        <span class="p">))</span>

  <span class="p">(</span><span class="nf">remove</span> <span class="nv">null?</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">k=</span> <span class="nv">n</span> <span class="nv">sum</span><span class="p">)))</span>

<span class="p">(</span><span class="nb">map </span><span class="nv">print</span> <span class="p">(</span><span class="nf">komachi</span> <span class="mi">9</span> <span class="mi">100</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4726/addtag/" class="addtag" id="addtag_4726">Tags</a>:
	
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/%E5%86%97%E9%95%B7/">冗長</a>
    
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4726/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4726/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4726"
  >-</span><span
  class="button yellow"
  id="rating_z_4726"
  >0</span><span 
  class="button green"
  id="rating_p_4726"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081204124022/http://ja.doukaku.org/comment/4726/">
    1
    reply
  </a>

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4726/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4728">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4728/">#4728</a>(<script language="JavaScript">print_time(new Date("2007/12/10 17:24 GMT"));</script><noscript>2007/12/10 17:24 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>pythonでナイーブな実装。
括弧なしで101個でした。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">komachi</span><span class="p">():</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
    <span class="n">ope</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="s">&quot;.0+&quot;</span><span class="p">,</span><span class="s">&quot;.0-&quot;</span><span class="p">,</span><span class="s">&quot;.0*&quot;</span><span class="p">,</span><span class="s">&quot;.0/&quot;</span><span class="p">]</span>
    <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">5</span><span class="o">**</span><span class="mi">8</span><span class="p">):</span>
        <span class="n">formula</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">9</span><span class="p">):</span>
            <span class="n">formula</span> <span class="o">+=</span> <span class="n">ope</span><span class="p">[</span><span class="n">x</span><span class="o">%</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">num</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
            <span class="n">x</span> <span class="o">/=</span> <span class="mi">5</span>
        <span class="k">if</span> <span class="nb">eval</span><span class="p">(</span><span class="n">formula</span><span class="p">)</span> <span class="o">==</span> <span class="mi">100</span><span class="p">:</span>
           <span class="k">print</span> <span class="n">formula</span><span class="p">,</span><span class="n">c</span>
           <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
           

<span class="n">komachi</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4728/addtag/" class="addtag" id="addtag_4728">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4728/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4728/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4728"
  >-</span><span
  class="button yellow"
  id="rating_z_4728"
  >0</span><span 
  class="button green"
  id="rating_p_4728"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4728/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4731">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4731/">#4731</a>(<script language="JavaScript">print_time(new Date("2007/12/10 18:17 GMT"));</script><noscript>2007/12/10 18:17 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  「C# には eval が無いなぁ。動的コンパイルでもしようかな。あ待てよアレがあったな」 ということで C#2.0 + IronPython1.1 です。ところてんさんの #4728 を参考に、Python のコードを片っ端から生成して IronPython で Execute しています。komachi 関数は C# 側で作成。括弧なしで 101 個を、６分程度(orz)で調べ上げます。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">IronPython</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">IronPython.Hosting</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">IronPython.Runtime</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">IronPython.Runtime.Calls</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Program</span> <span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">PythonEngine</span> <span class="n">python</span> <span class="p">=</span> <span class="k">new</span> <span class="n">PythonEngine</span><span class="p">();</span>
        <span class="n">EngineModule</span> <span class="n">module</span> <span class="p">=</span> <span class="n">python</span><span class="p">.</span><span class="n">CreateModule</span><span class="p">();</span>
        <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;</span> <span class="n">locals</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">object</span><span class="p">&gt;();</span>
        <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="n">locals</span><span class="p">[</span><span class="s">&quot;komachi&quot;</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CallTarget2</span><span class="p">(</span><span class="k">delegate</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">,</span> <span class="kt">object</span> <span class="n">obj2</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">obj2</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="m">100.0</span><span class="p">))</span> <span class="k">{</span>
                <span class="n">count</span><span class="p">++;</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">obj</span> <span class="p">+</span> <span class="s">&quot; = &quot;</span> <span class="p">+</span> <span class="n">obj2</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">}</span><span class="p">);</span>
        <span class="n">DateTime</span> <span class="n">before</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">code</span> <span class="k">in</span> <span class="n">GenPythonCode</span><span class="p">())</span> <span class="k">{</span>
            <span class="n">python</span><span class="p">.</span><span class="n">Execute</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">module</span><span class="p">,</span> <span class="n">locals</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;time: {0}&quot;</span><span class="p">,</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span> <span class="p">-</span> <span class="n">before</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;total: {0}&quot;</span><span class="p">,</span> <span class="n">count</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">GenPythonCode</span><span class="p">()</span>
    <span class="k">{</span>
        <span class="kt">string</span><span class="p">[]</span> <span class="n">ops</span> <span class="p">=</span> <span class="k">{</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;.0+&quot;</span><span class="p">,</span> <span class="s">&quot;.0-&quot;</span><span class="p">,</span> <span class="s">&quot;.0*&quot;</span><span class="p">,</span> <span class="s">&quot;.0/&quot;</span> <span class="k">}</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">Math</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span><span class="n">ops</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="m">8</span><span class="p">);</span> <span class="n">i</span><span class="p">++)</span> <span class="k">{</span>
            <span class="kt">string</span> <span class="n">code</span> <span class="p">=</span> <span class="s">&quot;1&quot;</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="k">foreach</span> <span class="p">(</span><span class="kt">char</span> <span class="n">num</span> <span class="k">in</span> <span class="s">&quot;23456789&quot;</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">code</span> <span class="p">+=</span> <span class="n">ops</span><span class="p">[</span><span class="n">j</span> <span class="p">%</span> <span class="n">ops</span><span class="p">.</span><span class="n">Length</span><span class="p">]</span> <span class="p">+</span> <span class="n">num</span><span class="p">;</span>
                <span class="n">j</span> <span class="p">/=</span> <span class="n">ops</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
            <span class="k">}</span>
            <span class="n">yield</span> <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;komachi(\&quot;{0}\&quot;, {0})&quot;</span><span class="p">,</span> <span class="n">code</span> <span class="p">+</span> <span class="s">&quot;.0&quot;</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4731/addtag/" class="addtag" id="addtag_4731">Tags</a>:
	
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/IronPython/">IronPython</a>
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%8A%E3%81%8B%E3%81%97%E3%81%84/">おもしろおかしい</a>
    
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4731/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4731/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4731"
  >-</span><span
  class="button yellow"
  id="rating_z_4731"
  >0</span><span 
  class="button green"
  id="rating_p_4731"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4731/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4735">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4735/">#4735</a>(<script language="JavaScript">print_time(new Date("2007/12/10 18:43 GMT"));</script><noscript>2007/12/10 18:43 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>パーサコンビネータでパーサを作ってナイーブに。
解答は101個です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><div class="highlight"><pre>import scala.util.parsing.combinator.{Parsers, ImplicitConversions, ~, mkTilde}
import scala.util.parsing.combinator.syntactical.StdTokenParsers
import scala.util.parsing.combinator.lexical.StdLexical

object Komachi extends StdTokenParsers with Application{
  type Tokens = StdLexical ; val lexical = new StdLexical
  lexical.delimiters ++= List(&quot;+&quot;,&quot;-&quot;, &quot;*&quot;, &quot;/&quot;)
  def expr = term*(&quot;+&quot; ^^ {(x: double, y: double) =&gt; x + y}
                 | &quot;-&quot; ^^ {(x: double, y: double) =&gt; x - y})
  def term = factor*(&quot;*&quot; ^^ {(x: double, y: double) =&gt; x * y}
                   | &quot;/&quot; ^^ {(x: double, y: double) =&gt; x / y})
  def factor: Parser[double] = numericLit ^^ (_.toDouble)

  ((List(List[String]())) /: List.make(8, List(&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;&quot;))){
    for(i &lt;-_; j &lt;-_) yield j::i
  }.foreach{fs =&gt;
    val s = (new StringBuilder(&quot;1&quot;) /: (2 to 9)){(s,i) =&gt;
      s.append(fs(i-2)).append(i)
    }.toString
    if(expr(new lexical.Scanner(s)).get == 100.0) println(s)
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4735/addtag/" class="addtag" id="addtag_4735">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4735/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4735/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4735"
  >-</span><span
  class="button yellow"
  id="rating_z_4735"
  >0</span><span 
  class="button green"
  id="rating_p_4735"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4735/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4738">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4738/">#4738</a>(<script language="JavaScript">print_time(new Date("2007/12/11 02:06 GMT"));</script><noscript>2007/12/11 02:06 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  #4725&nbsp;を参考にしました。printはRhinoのprintで。<br/>重いので、ブラウザでは動かさないように。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">komachi</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">list</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">arguments</span><span class="o">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="k">var</span> <span class="nx">right</span> <span class="o">=</span> <span class="nx">list</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
  <span class="k">var</span> <span class="nx">operator</span> <span class="o">=</span> <span class="p">[</span><span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="s2">&quot;+&quot;</span><span class="o">,</span> <span class="s2">&quot;-&quot;</span><span class="o">,</span> <span class="s2">&quot;*&quot;</span><span class="o">,</span> <span class="s2">&quot;/&quot;</span><span class="p">];</span>
  <span class="k">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="nx">operator</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">exp</span> <span class="o">=</span> <span class="p">[</span><span class="nx">list</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span>
    <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">(</span><span class="nx">n</span><span class="o">+</span><span class="nx">i</span><span class="p">).</span><span class="nx">toString</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="nx">ii</span><span class="o">=</span><span class="nx">i</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">list</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">exp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">operator</span><span class="p">[</span><span class="nx">o</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">j</span><span class="o">,</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)]);</span>
      <span class="nx">exp</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">list</span><span class="p">[</span><span class="nx">j</span><span class="p">]);</span>
      <span class="nx">ii</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="mi">5</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">eval</span><span class="p">(</span><span class="nx">exp</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nx">right</span><span class="p">)</span> <span class="nx">print</span><span class="p">(</span><span class="nx">exp</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39;=&#39;</span> <span class="o">+</span> <span class="nx">right</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="nx">print</span><span class="p">(</span><span class="s2">&quot;begin&quot;</span><span class="p">);</span>
<span class="nx">komachi</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">,</span><span class="mi">6</span><span class="o">,</span><span class="mi">7</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">9</span><span class="o">,</span><span class="mi">100</span><span class="p">);</span>
<span class="nx">print</span><span class="p">(</span><span class="s2">&quot;end&quot;</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4738/addtag/" class="addtag" id="addtag_4738">Tags</a>:
	
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/Rhino/">Rhino</a>
    
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4738/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4738/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4738"
  >-</span><span
  class="button yellow"
  id="rating_z_4738"
  >0</span><span 
  class="button green"
  id="rating_p_4738"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081204124022/http://ja.doukaku.org/comment/4738/">
    1
    reply
  </a>

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4738/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4740">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4740/">#4740</a>(<script language="JavaScript">print_time(new Date("2007/12/11 02:59 GMT"));</script><noscript>2007/12/11 02:59 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>解答101個で4分弱でした。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4740/addtag/" class="addtag" id="addtag_4740">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4740"
  >-</span><span
  class="button yellow"
  id="rating_z_4740"
  >0</span><span 
  class="button green"
  id="rating_p_4740"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204124022/http://ja.doukaku.org/comment/4738/"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204124022/http://ja.doukaku.org/comment/4740/root/"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4740/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4741">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4741/">#4741</a>(<script language="JavaScript">print_time(new Date("2007/12/11 03:11 GMT"));</script><noscript>2007/12/11 03:11 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>秒殺です
% time gosh komachi.scm
(123 - 45 - 67 + 89)
(1 * 2 - 3 + 4 - 5 + 6 + 7 + 89)
中略
(1 + 234 - 56 - 7 - 8 * 9)
(1 + 2 + 34 * 5 + 6 - 7 - 8 * 9)

real	0m0.775s
user	0m0.758s
sys	0m0.015s

</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4741/addtag/" class="addtag" id="addtag_4741">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4741"
  >-</span><span
  class="button yellow"
  id="rating_z_4741"
  >0</span><span 
  class="button green"
  id="rating_p_4741"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204124022/http://ja.doukaku.org/comment/4726/"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204124022/http://ja.doukaku.org/comment/4741/root/"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4741/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4742">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4742/">#4742</a>(<script language="JavaScript">print_time(new Date("2007/12/11 03:16 GMT"));</script><noscript>2007/12/11 03:16 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  ナイーブに全探索。<br/><br/>opparseで演算子順位文法を使って式をRPNに変換し、calcで計算してます。<br/><br/>opsの定義を変えれば演算子を増やしたり優先順位を買えたりできます。同じ優先度の演算子は左結合。<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Numeric</span>

<span class="kr">data</span> <span class="n">Item</span> <span class="nv">a</span> <span class="nv">b</span> <span class="o">=</span> <span class="n">Value</span> <span class="nv">a</span> <span class="o">|</span> <span class="n">Op</span> <span class="p">(</span><span class="nv">a</span><span class="o">-&gt;</span><span class="nv">a</span><span class="o">-&gt;</span><span class="nv">a</span><span class="p">)</span> <span class="nv">b</span> <span class="p">[</span><span class="n">Char</span><span class="p">]</span>

<span class="nv">cat</span> <span class="nv">a</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">a</span><span class="o">*</span><span class="mi">10</span><span class="o">+</span><span class="nv">b</span>

<span class="nv">ops</span> <span class="o">::</span> <span class="p">[</span><span class="n">Item</span> <span class="n">Double</span> <span class="n">Integer</span><span class="p">]</span>
<span class="nv">ops</span> <span class="o">=</span> <span class="p">[</span><span class="n">Op</span> <span class="nv">cat</span> <span class="mi">2</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">Op</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="mi">0</span> <span class="s">&quot;+&quot;</span><span class="p">,</span> <span class="n">Op</span> <span class="p">(</span><span class="o">-</span><span class="p">)</span> <span class="mi">0</span> <span class="s">&quot;-&quot;</span><span class="p">,</span> <span class="n">Op</span> <span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="mi">1</span> <span class="s">&quot;*&quot;</span><span class="p">,</span> <span class="n">Op</span> <span class="p">(</span><span class="o">/</span><span class="p">)</span> <span class="mi">1</span> <span class="s">&quot;/&quot;</span><span class="p">]</span>
 
<span class="nv">opparse</span> <span class="p">[]</span> <span class="kr">_</span> <span class="nv">vs</span> <span class="o">=</span> <span class="nv">reverse</span> <span class="nv">vs</span>
<span class="nv">opparse</span> <span class="p">(</span><span class="nv">op</span><span class="o">:</span><span class="nv">ops</span><span class="p">)</span> <span class="p">(</span><span class="nv">i</span><span class="o">:</span><span class="nv">is</span><span class="p">)</span> <span class="nv">vs</span> <span class="o">=</span> <span class="nv">opparse</span> <span class="nv">ops</span> <span class="nv">is</span> <span class="o">$</span> <span class="nv">push</span> <span class="nv">op</span> <span class="p">(</span><span class="n">Value</span> <span class="nv">i</span><span class="p">)</span> <span class="nv">vs</span>

<span class="nv">push</span> <span class="nv">op</span><span class="o">@</span><span class="p">(</span><span class="n">Op</span> <span class="nv">o</span> <span class="nv">p</span> <span class="kr">_</span><span class="p">)</span> <span class="nv">v</span> <span class="p">(</span><span class="nv">op&#39;</span><span class="o">@</span><span class="p">(</span><span class="n">Op</span> <span class="nv">o&#39;</span> <span class="nv">p&#39;</span> <span class="kr">_</span><span class="p">)</span><span class="o">:</span><span class="nv">vs</span><span class="p">)</span>
  <span class="o">|</span> <span class="p">(</span><span class="nv">p</span> <span class="o">&lt;=</span> <span class="nv">p&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">op</span><span class="o">:</span><span class="nv">v</span><span class="o">:</span><span class="nv">op&#39;</span><span class="o">:</span><span class="nv">vs</span><span class="p">)</span>
  <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="p">(</span><span class="nv">op&#39;</span><span class="o">:</span><span class="nv">push</span> <span class="nv">op</span> <span class="nv">v</span> <span class="nv">vs</span><span class="p">)</span>
<span class="nv">push</span> <span class="nv">op</span> <span class="nv">v</span> <span class="nv">vs</span> <span class="o">=</span> <span class="nv">op</span><span class="o">:</span><span class="nv">v</span><span class="o">:</span><span class="nv">vs</span>

<span class="nv">calc</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="p">[]</span> <span class="o">=</span> <span class="nv">a</span>
<span class="nv">calc</span> <span class="nv">ns</span> <span class="p">((</span><span class="n">Value</span> <span class="nv">a</span><span class="p">)</span><span class="o">:</span><span class="nv">vs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">calc</span> <span class="p">(</span><span class="nv">a</span><span class="o">:</span><span class="nv">ns</span><span class="p">)</span> <span class="nv">vs</span>
<span class="nv">calc</span> <span class="p">(</span><span class="nv">a</span><span class="o">:</span><span class="nv">b</span><span class="o">:</span><span class="nv">ns</span><span class="p">)</span> <span class="p">((</span><span class="n">Op</span> <span class="nv">op</span> <span class="kr">_</span> <span class="kr">_</span><span class="p">)</span><span class="o">:</span><span class="nv">vs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">calc</span> <span class="p">((</span><span class="nv">op</span> <span class="nv">b</span> <span class="nv">a</span><span class="p">)</span><span class="o">:</span><span class="nv">ns</span><span class="p">)</span> <span class="nv">vs</span>
<span class="nv">calc</span> <span class="kr">_</span> <span class="kr">_</span> <span class="o">=</span> <span class="nv">error</span> <span class="s">&quot;invalid stack state&quot;</span>

<span class="nv">showFormula</span> <span class="nv">ops</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span> <span class="o">++</span> <span class="nv">rec</span> <span class="p">[</span><span class="mi">2</span><span class="o">..</span><span class="p">]</span> <span class="nv">ops</span> <span class="kr">where</span>
   <span class="nv">rec</span> <span class="kr">_</span> <span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
   <span class="nv">rec</span> <span class="p">(</span><span class="nv">i</span><span class="o">:</span><span class="nv">is</span><span class="p">)</span> <span class="p">((</span><span class="n">Op</span> <span class="kr">_</span> <span class="kr">_</span> <span class="nv">n</span><span class="p">)</span><span class="o">:</span><span class="nv">ops</span><span class="p">)</span> <span class="o">=</span> <span class="nv">n</span> <span class="o">++</span> <span class="p">(</span><span class="nv">showInt</span> <span class="o">.</span> <span class="nv">round</span><span class="p">)</span> <span class="nv">i</span> <span class="p">(</span><span class="nv">rec</span> <span class="nv">is</span> <span class="nv">ops</span><span class="p">)</span>

<span class="nv">genops</span> <span class="mi">0</span> <span class="o">=</span> <span class="p">[[]]</span>
<span class="nv">genops</span> <span class="nv">n</span> <span class="o">=</span> <span class="p">[</span><span class="nv">o</span><span class="o">:</span><span class="nv">os</span> <span class="o">|</span> <span class="nv">o</span> <span class="o">&lt;-</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">ops</span><span class="o">!!</span><span class="p">)</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">4</span><span class="p">],</span> <span class="nv">os</span> <span class="o">&lt;-</span> <span class="nv">genops</span> <span class="p">(</span><span class="nv">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span>

<span class="nv">komachi</span> <span class="nv">n</span> <span class="o">=</span> <span class="p">[</span><span class="nv">ops</span> <span class="o">|</span> <span class="nv">ops</span> <span class="o">&lt;-</span> <span class="nv">genops</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">test</span> <span class="mi">100</span> <span class="nv">ops</span><span class="p">]</span> <span class="kr">where</span>
   <span class="nv">test</span> <span class="nv">sum</span> <span class="nv">ops</span> <span class="o">=</span> <span class="nv">abs</span> <span class="p">(</span><span class="nv">sum</span> <span class="o">-</span> <span class="p">(</span><span class="nv">calc</span> <span class="p">[]</span> <span class="o">$</span> <span class="nv">opparse</span> <span class="nv">ops</span> <span class="p">[</span><span class="mi">2</span><span class="o">..</span><span class="p">]</span> <span class="p">[</span><span class="n">Value</span> <span class="mi">1</span><span class="p">]))</span> <span class="o">&lt;=</span> <span class="mf">1.0e-10</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="o">$</span> <span class="nv">unlines</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">showFormula</span> <span class="o">$</span> <span class="nv">komachi</span> <span class="mi">8</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4742/addtag/" class="addtag" id="addtag_4742">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4742/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4742/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4742"
  >-</span><span
  class="button yellow"
  id="rating_z_4742"
  >0</span><span 
  class="button green"
  id="rating_p_4742"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081204124022/http://ja.doukaku.org/comment/4742/">
    1
    reply
  </a>

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4742/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4743">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4743/">#4743</a>(<script language="JavaScript">print_time(new Date("2007/12/11 03:46 GMT"));</script><noscript>2007/12/11 03:46 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>とりあえず適当に全探索。候補を5進8桁の整数と同一視して dotimes で回してます。結果は101 件、CLISP で 16 秒でした。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>(defun apply-op (op x y)
  (case op
    (#\+ (+ x y))
    (#\- (- x y))
    (#\* (* x y))
    (#\/ (/ x y))
    (#\SPACE (+ (* 10 x) y))
    (t &#39;t)))

(defun precedence (op) (case op ((#\+ #\-) 1) ((#\* #\/) 2) (t 3)))
(defun precedence&lt; (op1 op2) (&lt; (precedence op1) (precedence op2)))

(defun eval-string (s)
  (loop with vstack and opstack
    for c across s
    if (digit-char-p c) do
    (push (parse-integer (string c)) vstack)
    else if #1=(or (null opstack) (precedence&lt; (car opstack) c)) do
    (push c opstack)
    else do
    (loop until #1# do
      #2=(setf vstack
               (cons (apply-op (pop opstack) (cadr vstack) (car vstack))
                     (cddr vstack))))
    (push c opstack)
    finally
    (loop for op in opstack do  #2#)
    (return (car vstack))))

(defun komachi ()
  (let ((s (copy-seq &quot;1 2 3 4 5 6 7 8 9&quot;)))
    (dotimes (x (expt 5 8))
      (dotimes (i 8)
        (setf (elt s (+ i i 1)) (elt &quot; +-*/&quot; (rem (floor x (expt 5 i)) 5))))
      (if (= (eval-string s) 100) (write-line s)))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4743/addtag/" class="addtag" id="addtag_4743">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4743/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4743/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4743"
  >-</span><span
  class="button yellow"
  id="rating_z_4743"
  >0</span><span 
  class="button green"
  id="rating_p_4743"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4743/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4744">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4744/">#4744</a>(<script language="JavaScript">print_time(new Date("2007/12/11 04:15 GMT"));</script><noscript>2007/12/11 04:15 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>順当な遅さです。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>

<span class="k">from</span> <span class="nn">__future__</span> <span class="k">import</span> <span class="n">division</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="n">E</span> <span class="o">=</span> <span class="s">&#39;1</span><span class="si">%s</span><span class="s">2</span><span class="si">%s</span><span class="s">3</span><span class="si">%s</span><span class="s">4</span><span class="si">%s</span><span class="s">5</span><span class="si">%s</span><span class="s">6</span><span class="si">%s</span><span class="s">7</span><span class="si">%s</span><span class="s">8</span><span class="si">%s</span><span class="s">9==100&#39;</span>
<span class="n">A</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="s">&#39;+&#39;</span><span class="p">,</span> <span class="s">&#39;-&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">,</span> <span class="s">&#39;/&#39;</span><span class="p">]</span>
<span class="n">F</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">n</span><span class="p">:</span> <span class="p">[[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">l</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">A</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">F</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)]</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">[[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">A</span><span class="p">]</span>
<span class="n">R</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">s</span><span class="p">:</span> <span class="n">s</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;+&#39;</span><span class="p">,</span> <span class="s">u&#39;＋&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;-&#39;</span><span class="p">,</span> <span class="s">u&#39;－&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;*&#39;</span><span class="p">,</span> <span class="s">u&#39;×&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">,</span> <span class="s">u&#39;÷&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;==&#39;</span><span class="p">,</span> <span class="s">u&#39;＝&#39;</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">R</span><span class="p">(</span><span class="n">E</span> <span class="o">%</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">l</span><span class="p">))</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">F</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">if</span> <span class="nb">eval</span><span class="p">(</span><span class="n">E</span> <span class="o">%</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">l</span><span class="p">))])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4744/addtag/" class="addtag" id="addtag_4744">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4744/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4744/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4744"
  >-</span><span
  class="button yellow"
  id="rating_z_4744"
  >0</span><span 
  class="button green"
  id="rating_p_4744"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4744/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4745">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4745/">#4745</a>(<script language="JavaScript">print_time(new Date("2007/12/11 05:18 GMT"));</script><noscript>2007/12/11 05:18 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Javaでは、evalがないので自前でParseを行って計算してみました。</p>
<p>括弧対応なしで、約1秒で 101通りの結果がでました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample104</span> <span class="o">{</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">komachi</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">lhs</span><span class="o">.</span><span class="na">length</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>

        <span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">expression</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;();</span>
        <span class="n">expression</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">TermValue</span><span class="o">(</span><span class="n">lhs</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">lhs</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">work</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;(</span><span class="n">expression</span><span class="o">);</span>
            <span class="n">expression</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Term</span> <span class="nl">term:</span> <span class="n">work</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">createTerm</span><span class="o">(</span><span class="n">term</span><span class="o">,</span> <span class="n">lhs</span><span class="o">[</span><span class="n">index</span><span class="o">]);</span>
                <span class="n">expression</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
            <span class="o">};</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Term</span> <span class="nl">term:</span> <span class="n">expression</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">term</span><span class="o">.</span><span class="na">getValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">counter</span><span class="o">++</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">term</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; = &quot;</span> <span class="o">+</span> <span class="n">rhs</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">createTerm</span><span class="o">(</span><span class="n">Term</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Term</span><span class="o">&gt;();</span>
        <span class="n">Operator</span><span class="o">[]</span> <span class="n">operators</span> <span class="o">=</span> <span class="n">Operator</span><span class="o">.</span><span class="na">values</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">operators</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">TermData</span><span class="o">(</span><span class="n">operators</span><span class="o">[</span><span class="n">index</span><span class="o">],</span> <span class="n">lhs</span><span class="o">,</span> <span class="k">new</span> <span class="n">TermValue</span><span class="o">(</span><span class="n">r</span><span class="o">)));</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">enum</span> <span class="n">Operator</span> <span class="o">{</span>
        <span class="n">None</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getPriority</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">10</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">double</span> <span class="n">operate</span><span class="o">(</span><span class="kt">double</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">double</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">lhs</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">rhs</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">},</span>
        <span class="n">Plus</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getPriority</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">double</span> <span class="n">operate</span><span class="o">(</span><span class="kt">double</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">double</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">lhs</span> <span class="o">+</span> <span class="n">rhs</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;+&quot;</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">},</span>
        <span class="n">Minus</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getPriority</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">1</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">double</span> <span class="n">operate</span><span class="o">(</span><span class="kt">double</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">double</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">lhs</span> <span class="o">-</span> <span class="n">rhs</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;-&quot;</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">},</span>
        <span class="n">Times</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getPriority</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">2</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">double</span> <span class="n">operate</span><span class="o">(</span><span class="kt">double</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">double</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">lhs</span> <span class="o">*</span> <span class="n">rhs</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;*&quot;</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">},</span>
        <span class="n">Divide</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">getPriority</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="mi">2</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="kt">double</span> <span class="n">operate</span><span class="o">(</span><span class="kt">double</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">double</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">lhs</span> <span class="o">/</span> <span class="n">rhs</span><span class="o">;</span> <span class="o">}</span>
            <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="s">&quot;/&quot;</span><span class="o">;</span> <span class="o">}</span>
        <span class="o">};</span>

        <span class="k">public</span> <span class="k">abstract</span> <span class="kt">int</span> <span class="n">getPriority</span><span class="o">();</span>
        <span class="k">public</span> <span class="k">abstract</span> <span class="kt">double</span> <span class="n">operate</span><span class="o">(</span><span class="kt">double</span> <span class="n">lhs</span><span class="o">,</span> <span class="kt">double</span> <span class="n">rhs</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">interface</span> <span class="n">Term</span> <span class="o">{</span>
        <span class="k">public</span> <span class="kt">boolean</span> <span class="n">isOperate</span><span class="o">();</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">getValue</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">TermValue</span> <span class="k">implements</span> <span class="n">Term</span> <span class="o">{</span>
        <span class="k">public</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">value</span><span class="o">;</span>

        <span class="k">public</span> <span class="n">TermValue</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">value</span> <span class="o">=</span> <span class="n">val</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="kt">boolean</span> <span class="n">isOperate</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span> <span class="o">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">getValue</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">value</span><span class="o">);</span> <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">TermData</span> <span class="k">implements</span> <span class="n">Term</span> <span class="o">{</span>
        <span class="k">public</span> <span class="k">final</span> <span class="n">Operator</span> <span class="n">op</span><span class="o">;</span>
        <span class="k">public</span> <span class="k">final</span> <span class="n">Term</span> <span class="n">lhs</span><span class="o">;</span>
        <span class="k">public</span> <span class="k">final</span> <span class="n">Term</span> <span class="n">rhs</span><span class="o">;</span>

        <span class="c">/**</span>
<span class="c">         * 右辺は追加分と考えて、演算子の順序に従ってデータを正規化します。</span>
<span class="c">         */</span>
        <span class="k">public</span> <span class="n">TermData</span><span class="o">(</span><span class="n">Operator</span> <span class="n">o</span><span class="o">,</span> <span class="n">Term</span> <span class="n">l</span><span class="o">,</span> <span class="n">Term</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Operator</span> <span class="n">operator</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span>
            <span class="n">Term</span> <span class="n">lterm</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
            <span class="n">Term</span> <span class="n">rterm</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">l</span><span class="o">.</span><span class="na">isOperate</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">TermData</span> <span class="n">data</span> <span class="o">=</span> <span class="o">(</span><span class="n">TermData</span><span class="o">)</span> <span class="n">l</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">operator</span><span class="o">.</span><span class="na">getPriority</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">data</span><span class="o">.</span><span class="na">op</span><span class="o">.</span><span class="na">getPriority</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">rterm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TermData</span><span class="o">(</span><span class="n">operator</span><span class="o">,</span> <span class="n">data</span><span class="o">.</span><span class="na">rhs</span><span class="o">,</span> <span class="n">rterm</span><span class="o">);</span>
                    <span class="n">lterm</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">lhs</span><span class="o">;</span>
                    <span class="n">operator</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">op</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">op</span> <span class="o">=</span> <span class="n">operator</span><span class="o">;</span>
            <span class="n">lhs</span> <span class="o">=</span> <span class="n">lterm</span><span class="o">;</span>
            <span class="n">rhs</span> <span class="o">=</span> <span class="n">rterm</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="kt">boolean</span> <span class="n">isOperate</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span> <span class="o">}</span>
        <span class="k">public</span> <span class="kt">double</span> <span class="n">getValue</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">op</span><span class="o">.</span><span class="na">operate</span><span class="o">(</span><span class="n">lhs</span><span class="o">.</span><span class="na">getValue</span><span class="o">(),</span> <span class="n">rhs</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">lhs</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="n">op</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="n">rhs</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">komachi</span><span class="o">(</span><span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">9</span><span class="o">},</span> <span class="mi">100</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;elipse: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;(ms)&quot;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4745/addtag/" class="addtag" id="addtag_4745">Tags</a>:
	
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/%E5%8F%82%E8%80%83%E3%81%AB%E3%81%AA%E3%82%8B/">参考になる</a>
    
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4745/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4745/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4745"
  >-</span><span
  class="button yellow"
  id="rating_z_4745"
  >0</span><span 
  class="button green"
  id="rating_p_4745"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4745/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4748">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4748/">#4748</a>(<script language="JavaScript">print_time(new Date("2007/12/11 05:45 GMT"));</script><noscript>2007/12/11 05:45 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>アルゴリズム的には一番月並み。MacBook Pro 2.33GHz で12秒。</p>
<p>＃あ、関数名が微妙に</p>
<p>Dan the Perl Monger</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">B::</span><span class="n">Deparse</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">komanechi</span> <span class="p">{</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">5</span><span class="o">**</span><span class="mi">8</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$formula</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">for</span> <span class="k">my</span> <span class="nv">$n</span> <span class="p">(</span> <span class="mi">2</span> <span class="o">..</span> <span class="mi">9</span> <span class="p">)</span> <span class="p">{</span>
            <span class="nv">$formula</span> <span class="o">.=</span> <span class="p">(</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="sx">qw{+ - * /}</span> <span class="p">)[</span> <span class="nv">$i</span> <span class="nv">%</span> <span class="nv">5</span> <span class="p">]</span> <span class="o">.</span> <span class="nv">$n</span><span class="p">;</span>
            <span class="nv">$i</span> <span class="o">/=</span> <span class="mi">5</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">next</span> <span class="k">if</span>  <span class="mi">100</span> <span class="o">!=</span> <span class="nb">eval</span> <span class="nv">$formula</span><span class="p">;</span>
        <span class="k">print</span> <span class="s">&quot;$formula\n&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">komanechi</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4748/addtag/" class="addtag" id="addtag_4748">Tags</a>:
	
    
    <a href="/web/20081204124022/http://ja.doukaku.org/tag/%E3%81%8A%E3%82%82%E3%81%97%E3%82%8D%E3%81%8A%E3%81%8B%E3%81%97%E3%81%84/">おもしろおかしい</a>
    
	&nbsp;

	
      [<a href="/web/20081204124022/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4748/download/">
		download code
      </a>]
	  [<a href="/web/20081204124022/http://ja.doukaku.org/comment/4748/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4748"
  >-</span><span
  class="button yellow"
  id="rating_z_4748"
  >0</span><span 
  class="button green"
  id="rating_p_4748"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204124022/http://ja.doukaku.org/104/reply_to/4748/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4749">
  <p class="banner"><a href="/web/20081204124022/http://ja.doukaku.org/user/596/" target="_top">梅紫蘇</a><a href="/web/20081204124022/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204124022im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204124022/http://ja.doukaku.org/comment/4749/">#4749</a>(<script language="JavaScript">print_time(new Date("2007/12/11 06:48 GMT"));</script><noscript>2007/12/11 06:48 GMT</noscript>)
	
	
	
	[<a href="/web/20081204124022/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffdfdf;">-2/2=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>余裕があったら...という要望が、いつの間にか仕様になってるなんてコトはいつものこと。括弧付きも計算できるように実装しとくけど、計算しない方向で。</p>
<p>計算式を、逆ポーランド形式に変換して計算（総当たり）。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;ctype.h&gt;</span>
<span class="cp">#include &lt;math.h&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;queue&gt;</span>
<span class="cp">#include &lt;stack&gt;</span>

<span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">ToReversePolish</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">strExp</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
    <span class="kt">bool</span> <span class="n">bNum</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">buff</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">::</span><span class="n">iterator</span> <span class="n">p</span> <span class="o">=</span> <span class="n">strExp</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">p</span> <span class="o">!=</span> <span class="n">strExp</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isspace</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">bNum</span><span class="p">)</span> <span class="p">{</span> <span class="n">result</span><span class="p">.</span><span class="n">back</span><span class="p">()</span> <span class="o">+=</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">else</span>      <span class="p">{</span> <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">);</span> <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;*&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;/&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">((</span><span class="n">buff</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">!=</span> <span class="sc">&#39;-&#39;</span><span class="p">))</span> <span class="p">{</span>
                <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="p">);</span>
                <span class="n">buff</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="n">buff</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;)&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">()</span> <span class="o">==</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="n">buff</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span>
                <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="p">);</span>
                <span class="n">buff</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="p">{</span> <span class="n">buff</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="o">*</span><span class="n">p</span><span class="p">);</span> <span class="p">}</span>
        <span class="n">bNum</span> <span class="o">=</span> <span class="p">((</span><span class="o">*</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">buff</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">result</span><span class="p">.</span><span class="n">push</span><span class="p">(</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">buff</span><span class="p">.</span><span class="n">top</span><span class="p">())</span> <span class="p">);</span>
        <span class="n">buff</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">bool</span> <span class="n">CalcReversePolish</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">queue</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">exp</span><span class="p">,</span> <span class="kt">double</span><span class="o">&amp;</span> <span class="n">ans</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">buff</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">empty</span><span class="p">()</span> <span class="o">==</span> <span class="kc">false</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">((</span><span class="n">exp</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">compare</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>
            <span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">compare</span><span class="p">(</span><span class="s">&quot;*&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">||</span>
            <span class="p">(</span><span class="n">exp</span><span class="p">.</span><span class="n">front




<!--
     FILE ARCHIVED ON 12:40:22 Dec 4, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:28:23 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
