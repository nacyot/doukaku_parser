
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
モノクロ画像の類似検索
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20080331044845cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20080331044845cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20080331044845cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20080331044845/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20080331044845/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20080331044845js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20080331044845js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20080331044845js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20080331044845js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app19.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/37\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "31";
var displayMonth = "Mar";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/37/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20080331044845" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20071231114506/http://ja.doukaku.org/37/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="31 Dec 2007"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 4:48:45 Mar 31, 2008">MAR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Apr
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20071231114506/http://ja.doukaku.org/37/flatten/" title="11:45:06 Dec 31, 2007" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 4:48:45 Mar 31, 2008">31</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 4:48:45 Mar 31, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20080331044845*/http://ja.doukaku.org/37/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>3 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 31 Mar 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:2:001000000000_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20080331044845/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20080331044845/http://ja.doukaku.org/37/">モノクロ画像の類似検索</a>
</h2>

    





<div class="comment" id="comment3393">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3393/">#3393</a>(<script language="JavaScript">print_time(new Date("2007/08/02 13:57 GMT"));</script><noscript>2007/08/02 13:57 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  1024 * 768のサイズのモノクロ二値画像が100枚あるとします。
その中の一枚を指定したときに、その画像以外で一番その画像に似ている画像を見つけるコードを書いてください。
なお、同じ位置のピクセルが同じ値であるほど「似ている」とします。 
<p>
説明のために2*3のサイズで説明します。
<pre>
画像1
■■■
■■■

画像2
□□□
□□□

画像3
■■■
□□□

指定された画像
■■■
■□□
</pre>
この場合、画像1とは4つのピクセルが同じ値なので類似度は4、
画像2との類似度は2、画像3とは上半分の3つと下半分の白2つが一致するので類似度は5、よって一番類似しているのは画像3となります。
<p>
このお題の趣旨は検索処理の実行速度にあるので、
実行してみて実用的な速度で動くことを確認することを強く推奨します。
可能であればマシンのスペックと実行にかかった時間を書いてもらえると参考になっておもしろいと思います。
<p>
なおこのお題はC言語からスクリプト言語への挑戦状です。
スクリプト言語に有利な問題が多すぎるので、この手の問題も大募集します。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3393/addtag/" class="addtag" id="addtag_3393">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3393"
  >-</span><span
  class="button yellow"
  id="rating_z_3393"
  >0</span><span 
  class="button green"
  id="rating_p_3393"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/3393/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20080331044845/http://ja.doukaku.org/37/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20080331044845/http://ja.doukaku.org/37/nested/">ネスト表示</a>
<a href="/web/20080331044845/http://ja.doukaku.org/37/">非表示</a> 


  
  




<div class="comment" id="comment1733">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/172/" target="_top">cats</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1733/">#1733</a>(<script language="JavaScript">print_time(new Date("2007/08/02 15:06 GMT"));</script><noscript>2007/08/02 15:06 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  100枚で0.2秒でした。Celeron 1.4GHz
imgフォルダの中からtarget.pngに近いものを出力
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
  <span class="k">{</span>
    <span class="n">Stopwatch</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stopwatch</span><span class="p">();</span>
    <span class="n">sw</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="n">GetCurrentDirectory</span><span class="p">());</span>
    <span class="kt">bool</span><span class="p">[]</span> <span class="n">target</span> <span class="p">=</span> <span class="n">GetBit</span><span class="p">(</span><span class="s">&quot;target.png&quot;</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">min</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">near</span> <span class="p">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">s</span> <span class="k">in</span> <span class="n">Directory</span><span class="p">.</span><span class="n">GetFiles</span><span class="p">(</span><span class="s">&quot;img&quot;</span><span class="p">,</span> <span class="s">&quot;*.png&quot;</span><span class="p">))</span>
    <span class="k">{</span>
      <span class="kt">bool</span><span class="p">[]</span> <span class="n">bb</span> <span class="p">=</span> <span class="n">GetBit</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
      <span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Min</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="n">bb</span><span class="p">.</span><span class="n">Length</span><span class="p">),</span> <span class="n">k</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Max</span><span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="n">bb</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="p">-</span> <span class="n">n</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="k">if</span> <span class="p">(</span><span class="n">target</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">!=</span> <span class="n">bb</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="p">++</span><span class="n">k</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">k</span> <span class="p">&lt;</span> <span class="n">min</span><span class="p">)</span> <span class="k">{</span> <span class="n">min</span> <span class="p">=</span> <span class="n">k</span><span class="p">;</span> <span class="n">near</span> <span class="p">=</span> <span class="n">s</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">}</span>
    <span class="n">sw</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;near = {0}  time = {1} sec&quot;</span><span class="p">,</span> <span class="n">near</span><span class="p">,</span> <span class="n">sw</span><span class="p">.</span><span class="n">Elapsed</span><span class="p">.</span><span class="n">TotalSeconds</span><span class="p">);</span>
  <span class="k">}</span>
  <span class="k">static</span> <span class="kt">bool</span><span class="p">[]</span> <span class="n">GetBit</span><span class="p">(</span><span class="kt">string</span> <span class="n">pic</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="n">Bitmap</span> <span class="n">bmp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="n">pic</span><span class="p">);</span>
    <span class="kt">bool</span><span class="p">[]</span> <span class="n">res</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">bmp</span><span class="p">.</span><span class="n">Width</span> <span class="p">*</span> <span class="n">bmp</span><span class="p">.</span><span class="n">Height</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">k</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">bmp</span><span class="p">.</span><span class="n">Height</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">bmp</span><span class="p">.</span><span class="n">Width</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span> <span class="n">res</span><span class="p">[</span><span class="n">k</span><span class="p">++]</span> <span class="p">=</span> <span class="n">bmp</span><span class="p">.</span><span class="n">GetPixel</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">).</span><span class="n">ToArgb</span><span class="p">()</span> <span class="p">!=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="n">bmp</span><span class="p">.</span><span class="n">Dispose</span><span class="p">();</span>
    <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1733/addtag/" class="addtag" id="addtag_1733">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1733/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1733/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1733"
  >-</span><span
  class="button yellow"
  id="rating_z_1733"
  >0</span><span 
  class="button green"
  id="rating_p_1733"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1733/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1733/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1734">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/172/" target="_top">cats</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1734/">#1734</a>(<script language="JavaScript">print_time(new Date("2007/08/02 15:14 GMT"));</script><noscript>2007/08/02 15:14 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  しまった。画像のサイズがテスト用の20x20のままでした。なので、実際はもっと時間がかかるはず。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1734/addtag/" class="addtag" id="addtag_1734">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1734"
  >-</span><span
  class="button yellow"
  id="rating_z_1734"
  >0</span><span 
  class="button green"
  id="rating_p_1734"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1733/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1734/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1734/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1735">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1735/">#1735</a>(<script language="JavaScript">print_time(new Date("2007/08/02 15:17 GMT"));</script><noscript>2007/08/02 15:17 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>今しかた思いついたもので、テストすらしてませんが・・・</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">public</span> <span class="k">class</span> <span class="nc">Answer</span> <span class="o">{</span>
	<span class="c">/**</span>
<span class="c">	 * byte[i][j] = 1のとき黒、0のとき白とする。</span>
<span class="c">	 * XOR演算をすれば２つのドットが等しければ0、等しくなければ1になるので</span>
<span class="c">	 * それを利用する</span>
<span class="c">	 */</span>
	<span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">calculateSimilarity</span><span class="o">(</span><span class="k">final</span> <span class="kt">byte</span><span class="o">[][]</span> <span class="n">source</span><span class="o">,</span> <span class="k">final</span> <span class="kt">byte</span><span class="o">[][]</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">final</span> <span class="kt">int</span> <span class="n">MAX_SCORE</span> <span class="o">=</span> <span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">retVal</span> <span class="o">=</span> <span class="n">MAX_SCORE</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
				<span class="n">retVal</span> <span class="o">-=</span> <span class="o">(</span><span class="n">source</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]^</span><span class="n">target</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]);</span>
			<span class="o">}</span>
		<span class="o">}</span>
		<span class="k">return</span> <span class="n">MAX_SCORE</span> <span class="o">-</span> <span class="n">retVal</span><span class="o">;</span>
	<span class="o">}</span>
	
	<span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">getMostSimilarImage</span><span class="o">(</span><span class="k">final</span> <span class="kt">byte</span><span class="o">[][][]</span> <span class="n">source</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[][]</span> <span class="n">target</span> <span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">bestImageIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
		<span class="kt">int</span> <span class="n">bestImageScore</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">source</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">score</span> <span class="o">=</span>  <span class="n">calculateSimilarity</span><span class="o">(</span><span class="n">source</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">target</span><span class="o">)</span>
			<span class="k">if</span><span class="o">(</span><span class="n">bestImageScore</span> <span class="o">&lt;</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
				<span class="n">bestImageIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
				<span class="n">bestImageScore</span> <span class="o">=</span> <span class="n">score</span><span class="o">;</span>
			<span class="o">}</span>
		<span class="o">}</span>
		
		<span class="k">return</span> <span class="n">bestImageIndex</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1735/addtag/" class="addtag" id="addtag_1735">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1735/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1735/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1735"
  >-</span><span
  class="button yellow"
  id="rating_z_1735"
  >0</span><span 
  class="button green"
  id="rating_p_1735"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1735/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1736">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/25/" target="_top">hamano</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1736/">#1736</a>(<script language="JavaScript">print_time(new Date("2007/08/02 15:25 GMT"));</script><noscript>2007/08/02 15:25 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  わーい。C言語からの挑戦だ。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>

<span class="cp">#define WIDTH (1024/8)</span>
<span class="cp">#define HEIGHT 768</span>

<span class="kt">int</span> <span class="nf">similar</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img1</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">],</span>
            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img2</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">])</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">eor</span><span class="p">,</span> <span class="n">ret</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="n">img1</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">^</span> <span class="n">img2</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">];</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="p">((</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0xAA</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0x55</span><span class="p">);</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="p">((</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0xCC</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0x33</span><span class="p">);</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="p">((</span><span class="n">eor</span> <span class="o">&gt;&gt;</span><span class="mi">4</span> <span class="p">)</span> <span class="o">+</span> <span class="n">eor</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">;</span>
            <span class="n">ret</span><span class="o">+=</span> <span class="mi">8</span> <span class="o">-</span> <span class="n">eor</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
    <span class="n">time_t</span> <span class="n">now</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img1</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">];</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img2</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">];</span>

    <span class="c">/* ランダムな画像を２つ作る */</span>
    <span class="n">time</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now</span><span class="p">);</span>
    <span class="n">srand</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">img1</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">256</span><span class="p">;</span>
            <span class="n">img2</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">256</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;similar=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">similar</span><span class="p">(</span><span class="n">img1</span><span class="p">,</span> <span class="n">img2</span><span class="p">));</span>
    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1736/addtag/" class="addtag" id="addtag_1736">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1736/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1736/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1736"
  >-</span><span
  class="button yellow"
  id="rating_z_1736"
  >0</span><span 
  class="button green"
  id="rating_p_1736"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1736/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1738">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/256/" target="_top">rihi</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/">#1738</a>(<script language="JavaScript">print_time(new Date("2007/08/02 16:00 GMT"));</script><noscript>2007/08/02 16:00 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Celeron M 1.3GHzで0.25秒でした。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Foreign</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Exception</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Char</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>


<span class="nv">width</span><span class="p">,</span> <span class="nv">height</span> <span class="o">::</span> <span class="n">Int</span>
<span class="p">(</span><span class="nv">width</span><span class="p">,</span> <span class="nv">height</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">)</span>

<span class="nv">bmpLineLen</span> <span class="o">=</span> <span class="p">(</span><span class="nv">width</span><span class="o">+</span><span class="mi">31</span><span class="p">)</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">32</span> <span class="o">*</span> <span class="mi">4</span>
<span class="nv">imageSize</span> <span class="o">=</span> <span class="nv">bmpLineLen</span> <span class="o">*</span> <span class="nv">height</span>

<span class="nv">withBitmap</span> <span class="o">::</span> <span class="n">FilePath</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="nv">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="nv">a</span>
<span class="nv">withBitmap</span> <span class="nv">path</span> <span class="nv">action</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">h</span> <span class="o">&lt;-</span> <span class="nv">openFile</span> <span class="nv">path</span> <span class="n">ReadMode</span>
  <span class="p">(`</span><span class="nv">finally</span><span class="p">`</span> <span class="nv">hClose</span> <span class="nv">h</span><span class="p">)</span> <span class="o">$</span> <span class="kr">do</span>
    <span class="nv">c</span> <span class="o">&lt;-</span> <span class="nv">hGetChar</span> <span class="nv">h</span>
    <span class="nv">c1</span> <span class="o">&lt;-</span> <span class="nv">hGetChar</span> <span class="nv">h</span>
    <span class="nv">when</span> <span class="p">([</span><span class="nv">c</span><span class="p">,</span> <span class="nv">c1</span><span class="p">]</span> <span class="o">/=</span> <span class="s">&quot;BM&quot;</span><span class="p">)</span> <span class="o">$</span> <span class="nv">fail</span> <span class="o">$</span> <span class="nv">path</span> <span class="o">++</span> <span class="s">&quot;: not a bitmap file&quot;</span>
    <span class="kr">_</span><span class="o">:</span><span class="kr">_</span><span class="o">:</span><span class="nv">sofs</span> <span class="o">&lt;-</span> <span class="nv">replicateM</span> <span class="mi">6</span> <span class="o">$</span> <span class="nv">hGetChar</span> <span class="nv">h</span>
    <span class="kr">let</span> <span class="nv">pos</span> <span class="o">=</span> <span class="nv">foldr</span> <span class="p">(</span><span class="o">\</span><span class="nv">c</span> <span class="nv">v</span> <span class="o">-&gt;</span> <span class="nv">ord</span> <span class="nv">c</span> <span class="o">+</span> <span class="mi">256</span> <span class="o">*</span> <span class="nv">v</span><span class="p">)</span> <span class="mi">0</span> <span class="nv">sofs</span>
    <span class="nv">hSeek</span> <span class="nv">h</span> <span class="n">AbsoluteSeek</span> <span class="o">$</span> <span class="nv">fromIntegral</span> <span class="nv">pos</span>
    <span class="nv">allocaBytes</span> <span class="nv">imageSize</span> <span class="o">$</span> <span class="o">\</span><span class="nv">ptr</span> <span class="o">-&gt;</span> <span class="kr">do</span>
      <span class="nv">v</span> <span class="o">&lt;-</span> <span class="nv">hGetBuf</span> <span class="nv">h</span> <span class="nv">ptr</span> <span class="nv">imageSize</span>
      <span class="nv">action</span> <span class="nv">ptr</span>

<span class="nv">difference</span> <span class="o">::</span> <span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">Int</span>
<span class="nv">difference</span> <span class="nv">p0</span> <span class="nv">p1</span> <span class="o">=</span> <span class="nv">loop</span> <span class="nv">p0</span> <span class="nv">p1</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">plusPtr</span> <span class="nv">p0</span> <span class="nv">imageSize</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="nv">loop</span> <span class="nv">p0</span> <span class="nv">p1</span> <span class="nv">cnt</span> <span class="nv">last</span>
      <span class="o">|</span> <span class="nv">p0</span> <span class="p">`</span><span class="nv">seq</span><span class="p">`</span> <span class="nv">p1</span> <span class="p">`</span><span class="nv">seq</span><span class="p">`</span> <span class="nv">cnt</span> <span class="p">`</span><span class="nv">seq</span><span class="p">`</span> <span class="nv">last</span> <span class="p">`</span><span class="nv">seq</span><span class="p">`</span> <span class="n">False</span> <span class="o">=</span> <span class="nv">undefined</span>
    <span class="nv">loop</span> <span class="nv">p0</span> <span class="nv">p1</span> <span class="nv">cnt</span> <span class="nv">last</span>
      <span class="o">|</span> <span class="nv">p0</span> <span class="o">==</span> <span class="nv">last</span> <span class="o">=</span> <span class="nv">return</span> <span class="nv">cnt</span>
      <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="kr">do</span>
        <span class="nv">b0</span> <span class="o">&lt;-</span> <span class="nv">peek</span> <span class="nv">p0</span>
        <span class="nv">b1</span> <span class="o">&lt;-</span> <span class="nv">peek</span> <span class="nv">p1</span>
        <span class="nv">loop</span> <span class="p">(</span><span class="nv">advancePtr</span> <span class="nv">p0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nv">advancePtr</span> <span class="nv">p1</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nv">cnt</span> <span class="o">+</span> <span class="nv">count32</span> <span class="p">(</span><span class="nv">xor</span> <span class="nv">b0</span> <span class="nv">b1</span><span class="p">))</span> <span class="nv">last</span>


<span class="c1">-- 立っているビットの数を数える</span>
<span class="c1">-- http://katsura-kotonoha.sakura.ne.jp/prog/c/tip0001e.shtml</span>

<span class="nv">count32</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">count32</span> <span class="nv">a</span> <span class="o">=</span> <span class="kr">let</span>
  <span class="nv">b</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">a</span> <span class="o">.&amp;.</span> <span class="mh">0xaaaaaaaa</span><span class="p">)</span> <span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nv">a</span> <span class="o">.&amp;.</span> <span class="mh">0x55555555</span><span class="p">)</span>
  <span class="nv">c</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">b</span> <span class="o">.&amp;.</span> <span class="mh">0xcccccccc</span><span class="p">)</span> <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="nv">b</span> <span class="o">.&amp;.</span> <span class="mh">0x33333333</span><span class="p">)</span>
  <span class="nv">d</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">c</span> <span class="o">.&amp;.</span> <span class="mh">0xf0f0f0f0</span><span class="p">)</span> <span class="mi">4</span> <span class="o">+</span> <span class="p">(</span><span class="nv">c</span> <span class="o">.&amp;.</span> <span class="mh">0x0f0f0f0f</span><span class="p">)</span>
  <span class="nv">e</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">d</span> <span class="o">.&amp;.</span> <span class="mh">0xff00ff00</span><span class="p">)</span> <span class="mi">8</span> <span class="o">+</span> <span class="p">(</span><span class="nv">d</span> <span class="o">.&amp;.</span> <span class="mh">0x00ff00ff</span><span class="p">)</span>
  <span class="nv">f</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">e</span> <span class="o">.&amp;.</span> <span class="mh">0xffff0000</span><span class="p">)</span> <span class="mi">16</span> <span class="o">+</span> <span class="p">(</span><span class="nv">e</span> <span class="o">.&amp;.</span> <span class="mh">0x0000ffff</span><span class="p">)</span>
  <span class="kr">in</span> <span class="nv">fromIntegral</span> <span class="nv">f</span>


<span class="nv">files</span> <span class="o">::</span> <span class="p">[</span><span class="n">FilePath</span><span class="p">]</span>
<span class="nv">files</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">name</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">99</span><span class="p">]</span>
  <span class="kr">where</span>
    <span class="nv">name</span> <span class="nv">n</span> <span class="o">=</span> <span class="s">&quot;image&quot;</span> <span class="o">++</span> <span class="nv">show</span> <span class="nv">n</span> <span class="o">++</span> <span class="s">&quot;.bmp&quot;</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="p">[</span><span class="nv">file</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
  <span class="nv">withBitmap</span> <span class="nv">file</span> <span class="o">$</span> <span class="o">\</span><span class="nv">bmp</span> <span class="o">-&gt;</span> <span class="kr">do</span>
    <span class="kr">let</span>
      <span class="nv">comp</span> <span class="nv">f</span> <span class="o">=</span> <span class="nv">withBitmap</span> <span class="nv">f</span> <span class="o">$</span> <span class="o">\</span><span class="nv">bmp1</span> <span class="o">-&gt;</span> <span class="kr">do</span>
        <span class="nv">d</span> <span class="o">&lt;-</span> <span class="nv">difference</span> <span class="nv">bmp</span> <span class="nv">bmp1</span>
        <span class="nv">return</span> <span class="p">(</span><span class="nv">d</span><span class="p">,</span> <span class="nv">f</span><span class="p">)</span>
    <span class="nv">rs</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="nv">comp</span> <span class="o">$</span> <span class="nv">delete</span> <span class="nv">file</span> <span class="nv">files</span>
    <span class="nv">putStrLn</span> <span class="o">$</span> <span class="nv">snd</span> <span class="o">$</span> <span class="nv">minimum</span> <span class="nv">rs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/addtag/" class="addtag" id="addtag_1738">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1738"
  >-</span><span
  class="button yellow"
  id="rating_z_1738"
  >0</span><span 
  class="button green"
  id="rating_p_1738"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/">
    2
    replies
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1738/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1739">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/25/" target="_top">hamano</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1739/">#1739</a>(<script language="JavaScript">print_time(new Date("2007/08/02 16:07 GMT"));</script><noscript>2007/08/02 16:07 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>すいません、#1736 は2枚の画像の類似度を出したところで終わっていましたm(--)m
ちゃんと 100枚の画像を比較する続きのコードです。

# segmentation fault で悩んだのですが ulimit でスタックサイズの制限を外す必要がありました。
% ulimit -s unlimited</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>

<span class="cp">#define WIDTH (1024/8)</span>
<span class="cp">#define HEIGHT 768</span>

<span class="kt">int</span> <span class="nf">similar</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img1</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">],</span>
            <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img2</span><span class="p">[</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">])</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">eor</span><span class="p">,</span> <span class="n">ret</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">){</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="n">img1</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">^</span> <span class="n">img2</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">];</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="p">((</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0xAA</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0x55</span><span class="p">);</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="p">((</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0xCC</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">eor</span> <span class="o">&amp;</span> <span class="mh">0x33</span><span class="p">);</span>
            <span class="n">eor</span> <span class="o">=</span> <span class="p">((</span><span class="n">eor</span><span class="o">&gt;&gt;</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="n">eor</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0F</span><span class="p">;</span>
            <span class="n">ret</span><span class="o">+=</span> <span class="mi">8</span> <span class="o">-</span> <span class="n">eor</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">max</span><span class="p">;</span>
    <span class="n">time_t</span> <span class="n">now</span><span class="p">;</span>
    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">img</span><span class="p">[</span><span class="mi">100</span><span class="p">][</span><span class="n">WIDTH</span><span class="p">][</span><span class="n">HEIGHT</span><span class="p">];</span>

    <span class="c">/* ランダムな画像を100枚作る */</span>
    <span class="n">time</span><span class="p">(</span><span class="o">&amp;</span><span class="n">now</span><span class="p">);</span>
    <span class="n">srand</span><span class="p">(</span><span class="n">now</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">y</span><span class="o">&lt;</span><span class="n">HEIGHT</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">){</span>
            <span class="k">for</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">x</span><span class="o">&lt;</span><span class="n">WIDTH</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">){</span>
                <span class="n">img</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">256</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">max</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>                                     
        <span class="n">s</span> <span class="o">=</span> <span class="n">similar</span><span class="p">(</span><span class="n">img</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">img</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">max</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">){</span>
            <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
            <span class="n">max</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;most similar: img[%d]=%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">max</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1739/addtag/" class="addtag" id="addtag_1739">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1739/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1739/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1739"
  >-</span><span
  class="button yellow"
  id="rating_z_1739"
  >0</span><span 
  class="button green"
  id="rating_p_1739"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1739/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1740">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1740/">#1740</a>(<script language="JavaScript">print_time(new Date("2007/08/02 16:56 GMT"));</script><noscript>2007/08/02 16:56 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>素直に付き合わせるとどうなるのかな？と思ったので素直につき合わせ。

このお題の趣旨は検索処理の実行速度、とあるので本物の画像ではなく、配列を生成して画像に見立てました。

Ahtlon64 3000で32秒くらいです。遅いですねえ・・・実用的な速度がどの程度をさすのかわかりませんが、まぁ使えないことはないですよね。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre>object Similar {
  type CMap = Array[Array[int]]
  def similarityScore(c1:CMap, c2:CMap) = {
    (0 to c1(0).length-1).foldLeft(0){(r,y) =&gt; {
      r + (0 to c1.length-1).foldLeft(0){(r,x) =&gt; {
        r + (c1(x)(y)^c2(x)(y)^1)
      }}
    }}
  }

  def select(c1:CMap, clist:Array[CMap]) = {
    var r:CMap = null
    var topScore = 0
    clist.foreach(c =&gt; {
      val s = similarityScore(c1, c)
      if(s &gt; topScore) {
        r = c
        topScore = s
      }
    })
    (topScore, r)
  }

  def makeRandomCMap(width:int, height:int):CMap = {
    new Array[int](height).map(y =&gt; {
      new Array[int](width).map(x =&gt; Math.random.hashCode &amp; 0x1)
    })
  }
}

val width = 1024
val height = 768
val c1 = Similar.makeRandomCMap(width, height)
val clist = List.range(0, 100).map(x =&gt; Similar.makeRandomCMap(width, height)).toArray
println(&quot;start&quot;)
val start = System.currentTimeMillis
val (score, c) = Similar.select(c1, clist)
println(&quot;top score:&quot;+score)
println(&quot;time:&quot;+(System.currentTimeMillis-start) + &quot; milli seconds.&quot;)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1740/addtag/" class="addtag" id="addtag_1740">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1740/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1740/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1740"
  >-</span><span
  class="button yellow"
  id="rating_z_1740"
  >0</span><span 
  class="button green"
  id="rating_p_1740"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1740/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1740/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1741">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/105/" target="_top">rubikitch</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1741/">#1741</a>(<script language="JavaScript">print_time(new Date("2007/08/02 17:00 GMT"));</script><noscript>2007/08/02 17:00 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  これってXOR使えばいいんだよね。
テストデータがいいかげんすぎて…。誰かがテストデータを提供してくれればいいんだけど。
SBCL on Pentium4 2.66GHz / MEM 1GB / Debian GNU/Linuxにて4.5秒。

画像は0からの番号（index）で指定。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129</pre></td><td class="code"><div class="highlight"><pre>(defpackage most-similar-image
  (:use common-lisp iterate))
(in-package :most-similar-image)

(defparameter *images*
  &#39;(#786432*101010101010101101011001010 ;taget
    #786432*101010001010101101011001010 ;most similar
    #786432*101111101010101101011001010
    #786432*101010001010000001011001010
    #786432*101111101010101101011001010
    #786432*101010000000000000001001010
    #786432*101011111111111111111111111
    #786432*101010001010100000000001010
    #786432*000000000000000000000001010
    #786432*101010000000101101011001010
    #786432*101000000010101101011000010
    #786432*101010001000000001011001010
    #786432*101010001010101000000001010
    #786432*101000000000000101011001010
    #786432*101010001010101000000000010
    #786432*101010000000101101011001010
    #786432*101010001010000000011001010
    #786432*101010001010101101011001010
    #786432*101000000000001101011001010
    #786432*000000000000000000000001010
    #786432*101010001000000000000000010
    #786432*101010001010100101011001000
    #786432*100000000000000001011001010
    #786432*000000000010101000001001010
    #786432*101010001000000000011001010
    #786432*101010001010101101000000010
    #786432*101000000000001101011001010
    #786432*101010001010100000001001010
    #786432*101010001010101101000000000
    #786432*101010000000000000011001010
    #786432*101010001010101101000000010
    #786432*000000001010101101011001010
    #786432*101010000000101101011001010
    #786432*101010001010000001011001010
    #786432*101010001010101100000000010
    #786432*101010001000111000000111111
    #786432*111111111111111111111111110
    #786432*101010001010101101000000000
    #786432*000000000000001101011001010
    #786432*101010001010100000000001010
    #786432*101010001010101101011000000
    #786432*000000000010000000011001010
    #786432*101010001010101101000000010
    #786432*101010001010100001011001000
    #786432*101010001010101101011001010
    #786432*000000000000000100000000000
    #786432*001000001010101100010001000
    #786432*101000000000001101000000000
    #786432*101000000000101101001001010
    #786432*101010001010101000000000010
    #786432*100010001000001101011001000
    #786432*101010001000000100001001010
    #786432*101010001010000001000000010
    #786432*101000000010101100001001000
    #786432*100000000010101100000001010
    #786432*101000000000000000010001000
    #786432*000001011010010001100100010
    #786432*010010001011010010010011101
    #786432*111010100010111000001111111
    #786432*101000110000001111011100111
    #786432*010101100001011110111011010
    #786432*000011111000111010010001011
    #786432*110001000111100010101001001
    #786432*000100000111111100010010011
    #786432*101010101110001100101100111
    #786432*011111100011110111111101000
    #786432*010000111111111110010101110
    #786432*100111110100101101110010010
    #786432*000010011011011001001111011
    #786432*100101000111111000011011011
    #786432*101111110001110100001000110
    #786432*110000100110100011111110001
    #786432*110111110010000010100011001
    #786432*011001010010011001111101000
    #786432*011100101100100010000010110
    #786432*011101011111000100000010111
    #786432*100010010100011001000100101
    #786432*111011111000010000100100110
    #786432*011001110110010010100011010
    #786432*111011001110101011000100100
    #786432*000001011111101000011101011
    #786432*001110101010110011110001111
    #786432*111101111000101001100100110
    #786432*101101011011111110100111100
    #786432*101111110011010110111100111
    #786432*010001001010001111000111011
    #786432*001011101000011010111000110
    #786432*011000101000011010011110001
    #786432*010111010011001110001101100
    #786432*100110101011100010000010001
    #786432*111010100111000111000100111
    #786432*110111001011011010010100110
    #786432*010011001011011000100010010
    #786432*010110101110111011100011011
    #786432*000101001001011000010110010
    #786432*100000101101000000110010110
    #786432*011010101101011000011010100
    #786432*010011001010100110010101011
    #786432*101100110110101110000011010
    #786432*011100001100101011011000000

))
    

(defun most-similar-image (image-num images)
  (let ((image-n (elt images image-num)))
    (iter (for image in images)
          (for i from 0)
          (if (/= i image-num)
              (finding i maximizing (similarity image-n image))))))

(defun similarity (img1 img2)
  (if (= (length img1) (length img2))
      (count 0 (bit-xor img1 img2))
      0))
(time (most-similar-image 0 *images*))  ; =&gt; 1
;; Evaluation took:
;;   4.5 seconds of real time
;;   4.406379 seconds of user run time
;;   0.023332 seconds of system run time
;;   [Run times include 0.01 seconds GC run time.]
;;   0 calls to %EVAL
;;   0 page faults and
;;   9,736,984 bytes consed.
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1741/addtag/" class="addtag" id="addtag_1741">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1741/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1741/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1741"
  >-</span><span
  class="button yellow"
  id="rating_z_1741"
  >0</span><span 
  class="button green"
  id="rating_p_1741"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1741/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1741/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1742">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/323/" target="_top">tomatsu</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1742/">#1742</a>(<script language="JavaScript">print_time(new Date("2007/08/02 17:29 GMT"));</script><noscript>2007/08/02 17:29 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/pnuts/">
	  Pnuts
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>Core2 Duo1.83GHz、pnuts -J-server -O で起動して1.3秒 (配列の初期化を除く）</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre>N_WORDS = 1024*768/32
fb = new int[100][N_WORDS]
for (j:0..99){
  for (i:0..N_WORDS-1) fb[j][i] = random()
}

distance = makeProxy(Integer.getMethod(&quot;bitCount&quot;, [int]))

function sim(f1,f2){
  d = 0
  for (i:0..N_WORDS-1) d += distance(f1[i]^f2[i])
  d
}

function sim(f1,f2, min){
  d = 0
  for (i:0..N_WORDS-1) {
     d += distance(f1[i]^f2[i])
     if (d &gt; min) return d
  }
  d
}

function findOne(f0, buffers){
   idx = 0
   min = sim(f0, buffers[0])
   for (i: 1.. size(buffers)-1){
      f = buffers[i]
      m = sim(f0, f, min)
      if (m &lt; min){
        min = m
        idx = i
      }
   }
   idx
}
s=currentTimeMillis()
println(findOne(fb[0], fb[1..])+1, &quot;th image&quot;)
println((currentTimeMillis()-s), &quot; msec&quot;)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1742/addtag/" class="addtag" id="addtag_1742">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/Pnuts/">Pnuts</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/pnuts/">
		Pnuts
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1742/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1742/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1742"
  >-</span><span
  class="button yellow"
  id="rating_z_1742"
  >0</span><span 
  class="button green"
  id="rating_p_1742"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1742/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1743">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1743/">#1743</a>(<script language="JavaScript">print_time(new Date("2007/08/02 17:29 GMT"));</script><noscript>2007/08/02 17:29 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>モノクロ画像ってことでXBM。
ひじょーに適当に読んでる({}内をeval)し、サイズのチェックもしてないのでアレですが・・・

find_similar.pl ターゲット.xbm 他.xbm 他.xbm ....

って調べる画像ファイルをコマンドラインで全部与える必要があります。
8枚を対象にして2.4秒@Pentium M 2.0G</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@highest</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$target_fname</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$target</span> <span class="o">=</span> <span class="n">_load_xbm</span><span class="p">(</span><span class="nv">$target_fname</span><span class="p">);</span>

<span class="k">for</span> <span class="k">my</span> <span class="nv">$cand</span> <span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$dat</span> <span class="o">=</span> <span class="n">_load_xbm</span><span class="p">(</span><span class="nv">$cand</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="mi">98304</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$b8</span> <span class="o">=</span> <span class="nv">$target</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span> <span class="o">^</span> <span class="nv">$dat</span><span class="o">-&gt;</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
        <span class="nv">$b8</span> <span class="o">=</span> <span class="p">((</span><span class="nv">$b8</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">xAA</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nv">$b8</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">x55</span><span class="p">);</span>
        <span class="nv">$b8</span> <span class="o">=</span> <span class="p">((</span><span class="nv">$b8</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">xCC</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nv">$b8</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">x33</span><span class="p">);</span>
        <span class="nv">$b8</span> <span class="o">=</span> <span class="p">((</span><span class="nv">$b8</span> <span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="nv">$b8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">x0F</span><span class="p">;</span>
        <span class="nv">$score</span> <span class="o">+=</span> <span class="mi">8</span> <span class="o">-</span> <span class="nv">$b8</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nb">printf</span> <span class="s">&quot;&#39;$cand&#39; は $score ピクセルマッチしました。\n&quot;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="nv">$score</span> <span class="o">&gt;</span> <span class="nv">$highest</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
        <span class="nv">@highest</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$score</span><span class="p">,</span> <span class="nv">$cand</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">print</span> <span class="s">&quot;&#39;$target_fname&#39;に一番近いのは&#39;$highest[1]&#39;で$highest[0]ピクセルマッチしました。\n&quot;</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">_load_xbm</span> <span class="p">{</span>
    <span class="nb">open</span><span class="p">(</span><span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="nb">shift</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span>
    <span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$dat</span> <span class="o">=</span> <span class="o">&lt;</span><span class="nv">$fh</span><span class="o">&gt;</span><span class="p">;</span>
    <span class="nb">close</span> <span class="nv">$fh</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="nv">$dat</span> <span class="o">=~</span><span class="sr"> /\{([^\}]+)\}/s</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">eval</span> <span class="nv">$1</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="s">&quot;XBMファイルじゃなくね？&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1743/addtag/" class="addtag" id="addtag_1743">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1743/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1743/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1743"
  >-</span><span
  class="button yellow"
  id="rating_z_1743"
  >0</span><span 
  class="button green"
  id="rating_p_1743"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1743/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1744">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/237/" target="_top">talo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/">#1744</a>(<script language="JavaScript">print_time(new Date("2007/08/02 18:56 GMT"));</script><noscript>2007/08/02 18:56 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'></pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="c">/**</span>
<span class="c"> * デフォルトの java で実行すると OutOfMemoryError が発生するため、</span>
<span class="c"> * java -Xrs -Xms256m -Xmx256m MonochromeMain などとして実行する必要がある。</span>
<span class="c"> */</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">MonochromeMain</span> <span class="o">{</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">768</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">VALUE</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Monochrome</span> <span class="n">base</span> <span class="o">=</span> <span class="n">MonochromeFactory</span><span class="o">.</span><span class="na">createMonocrome</span><span class="o">(</span><span class="n">WIDTH</span><span class="o">,</span> <span class="n">HEIGHT</span><span class="o">);</span>
        <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span><span class="o">&lt;</span><span class="n">Monochrome</span><span class="o">&gt;</span> <span class="n">images</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span><span class="o">&lt;</span><span class="n">Monochrome</span><span class="o">&gt;();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">images</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">VALUE</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">images</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">MonochromeFactory</span><span class="o">.</span><span class="na">createMonocrome</span><span class="o">(</span><span class="n">WIDTH</span><span class="o">,</span> <span class="n">HEIGHT</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">maxSimilar</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">maxIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">VALUE</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">base</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">images</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                <span class="n">maxIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="n">maxSimilar</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="kt">int</span> <span class="n">similar</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="kt">boolean</span> <span class="n">flg</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">HEIGHT</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">WIDTH</span><span class="o">;</span> <span class="o">++</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">similar</span> <span class="o">+=</span> <span class="mi">1</span> <span class="o">-</span> <span class="o">(</span><span class="n">base</span><span class="o">.</span><span class="na">getPixel</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="o">^</span> <span class="n">images</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">getPixel</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">j</span><span class="o">));</span>
                <span class="o">}</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">maxSimilar</span> <span class="o">&lt;</span> <span class="n">similar</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">maxSimilar</span> <span class="o">=</span> <span class="n">similar</span><span class="o">;</span>
                    <span class="n">maxIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;max similar image[&quot;</span> <span class="o">+</span> <span class="n">maxIndex</span> <span class="o">+</span> <span class="s">&quot;]: &quot;</span> <span class="o">+</span> <span class="n">maxSimilar</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;time: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">Monochrome</span> <span class="n">createMonocrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Monochrome</span> <span class="n">o</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Monochrome</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Random</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">o</span><span class="o">.</span><span class="na">setPixel</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="n">j</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="c">/**</span>
<span class="c"> * モノクロ画像クラス.</span>
<span class="c"> */</span>
<span class="k">class</span> <span class="nc">Monochrome</span> <span class="o">{</span>

    <span class="k">private</span> <span class="kt">byte</span><span class="o">[][]</span> <span class="n">pixel</span><span class="o">;</span>

    <span class="k">public</span> <span class="n">Monochrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">pixel</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">height</span><span class="o">][</span><span class="n">width</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">void</span> <span class="n">setPixel</span><span class="o">(</span><span class="kt">byte</span> <span class="n">b</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">pixel</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">byte</span> <span class="n">getPixel</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">pixel</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">byte</span><span class="o">[][]</span> <span class="n">getAllPixel</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">pixel</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">boolean</span> <span class="n">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">Monochrome</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span>
                <span class="k">this</span><span class="o">.</span><span class="na">pixel</span><span class="o">,</span> <span class="o">((</span><span class="n">Monochrome</span><span class="o">)</span> <span class="n">o</span><span class="o">).</span><span class="na">getAllPixel</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">pixel</span><span class="o">).</span><span class="na">hashCode</span><span class="o">();</span>
    <span class="o">}</span>

<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/addtag/" class="addtag" id="addtag_1744">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1744"
  >-</span><span
  class="button yellow"
  id="rating_z_1744"
  >0</span><span 
  class="button green"
  id="rating_p_1744"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/">
    4
    replies
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1744/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1745">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/237/" target="_top">talo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1745/">#1745</a>(<script language="JavaScript">print_time(new Date("2007/08/02 19:01 GMT"));</script><noscript>2007/08/02 19:01 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>実行結果を貼り忘れました。
最初は初期化の部分も全て測定範囲内に入れていたんですが、今は検索部分のみにしています。
全て含んでいたときが大体6500 ～ 7500 くらいだったので、処理時間の半分以上は初期化時間ですね。

環境: Pentium 4 CPU 3.40GHz
結果: java -Xrs -Xms256m -Xmx256m MonochromeMain
max similar image[72]: 394486
time: 1844</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1745/addtag/" class="addtag" id="addtag_1745">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1745"
  >-</span><span
  class="button yellow"
  id="rating_z_1745"
  >0</span><span 
  class="button green"
  id="rating_p_1745"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1745/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1745/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1746">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/237/" target="_top">talo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1746/">#1746</a>(<script language="JavaScript">print_time(new Date("2007/08/02 19:06 GMT"));</script><noscript>2007/08/02 19:06 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>16行目と19行目の MonochromeFactory は編集中の名残です。消し忘れました。以下が正しいコードになります。

16行目:
Monochrome base = createMonocrome(WIDTH, HEIGHT);

19行目:
images.add(createMonocrome(WIDTH, HEIGHT));</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1746/addtag/" class="addtag" id="addtag_1746">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1746"
  >-</span><span
  class="button yellow"
  id="rating_z_1746"
  >0</span><span 
  class="button green"
  id="rating_p_1746"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1746/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1746/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1748">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/237/" target="_top">talo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1748/">#1748</a>(<script language="JavaScript">print_time(new Date("2007/08/02 19:08 GMT"));</script><noscript>2007/08/02 19:08 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>あああ。。。32行目の flg もいらない。。。もっと推敲して投稿するようにしないとなぁ。。。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1748/addtag/" class="addtag" id="addtag_1748">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1748"
  >-</span><span
  class="button yellow"
  id="rating_z_1748"
  >0</span><span 
  class="button green"
  id="rating_p_1748"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1748/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1748/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1749">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1749/">#1749</a>(<script language="JavaScript">print_time(new Date("2007/08/02 21:12 GMT"));</script><noscript>2007/08/02 21:12 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>バイナリの扱いはsrfi-4 uniform vectorで。
主なボトルネックはビット数を数えるところ。
Gaucheは組込みのlogcountというのを持っていますが、
多倍長整数にも汎用的に対応してるため思ったより遅いことが判明。
ビットマスクとシフトで数えるのはそこそこ速かったんですが、
富豪的に16ビットごとのテーブル索引がもっと速い。

実行は、Pentium4 2.0GHz / メモリ2GB のマシンで4秒を切るくらい。

gosh&gt; (time (find-closest-pic "pic035" (sys-glob "pic???")))
;(time (find-closest-pic "pic035" (sys-glob "pic???")))
; real   3.946
; user   3.860
; sys    0.060
392118
"pic064"

なお、ファイルの読み込みに1.5秒くらいかかっています。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">uvector</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">sequence</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>

<span class="p">(</span><span class="nf">define-constant</span> <span class="nv">*image-size*</span> <span class="p">(</span><span class="nb">* </span><span class="mi">1024</span> <span class="mi">768</span><span class="p">))</span>

<span class="p">(</span><span class="nf">define-constant</span> <span class="nv">*logcount16*</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">cnts</span> <span class="p">(</span><span class="nb">make-vector </span><span class="mi">65536</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">i</span> <span class="mi">65536</span><span class="p">)</span> <span class="p">(</span><span class="k">set! </span><span class="p">(</span><span class="nf">ref</span> <span class="nv">cnts</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">logcount</span> <span class="nv">i</span><span class="p">)))</span>
    <span class="nv">cnts</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">find-closest-pic</span> <span class="nv">sample</span> <span class="nv">pics</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">diff-score!</span> <span class="nv">vp</span> <span class="nv">vs</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">u32vector-xor!</span> <span class="nv">vp</span> <span class="nv">vs</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">let1</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u32vector-and</span> <span class="nv">vp</span> <span class="o">#</span><span class="nv">x0000ffff</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">u32vector-and!</span> <span class="nv">vp</span> <span class="o">#</span><span class="nv">xffff0000</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">sum-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">i</span> <span class="p">(</span><span class="nf">u32vector-length</span> <span class="nv">vs</span><span class="p">))</span>
              <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">vector-ref </span><span class="nv">*logcount16*</span> <span class="p">(</span><span class="nf">u32vector-ref</span> <span class="nv">v1</span> <span class="nv">i</span><span class="p">))</span>
                 <span class="p">(</span><span class="nb">vector-ref </span><span class="nv">*logcount16*</span> <span class="p">(</span><span class="nf">ash</span> <span class="p">(</span><span class="nf">u32vector-ref</span> <span class="nv">vp</span> <span class="nv">i</span><span class="p">)</span> <span class="mi">-16</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">read-pic!</span> <span class="nv">v</span> <span class="nv">file</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">with-input-from-file </span><span class="nv">file</span> <span class="p">(</span><span class="nf">cut</span> <span class="nv">read-block!</span> <span class="nv">v</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">vs</span> <span class="p">(</span><span class="nf">make-u32vector</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">32</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">vp</span> <span class="p">(</span><span class="nf">make-u32vector</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">32</span><span class="p">)))</span>

  <span class="p">(</span><span class="nf">read-pic!</span> <span class="nv">vs</span> <span class="nv">sample</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">fold2</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">pic</span> <span class="nv">score</span> <span class="nv">ans</span><span class="p">)</span>
           <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">equal? </span><span class="nv">sample</span> <span class="nv">pic</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="nv">score</span> <span class="nv">ans</span><span class="p">)</span><span class="err">]</span>
                 <span class="err">[</span><span class="k">else </span><span class="p">(</span><span class="nf">read-pic!</span> <span class="nv">vp</span> <span class="nv">pic</span><span class="p">)</span>
                       <span class="p">(</span><span class="nf">let1</span> <span class="nv">s</span> <span class="p">(</span><span class="nf">diff-score!</span> <span class="nv">vp</span> <span class="nv">vs</span><span class="p">)</span>
                         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">s</span> <span class="nv">score</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="nv">s</span> <span class="nv">pic</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="nv">score</span> <span class="nv">ans</span><span class="p">)))</span><span class="err">]</span><span class="p">))</span>
         <span class="o">#</span><span class="nv">i1/0</span> <span class="no">#f</span> <span class="nv">pics</span><span class="p">))</span>

<span class="c1">;; (find-closest-pic &quot;pic035&quot; (sys-glob &quot;pic???&quot;))</span>
<span class="c1">;;   =&gt; 392118 and &quot;pic064&quot;</span>


<span class="c1">;;;</span>
<span class="c1">;;; test data generation</span>
<span class="c1">;;;</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-27</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">generate-random-pics</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">let1</span> <span class="nv">v</span> <span class="p">(</span><span class="nf">make-u8vector</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">8</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">8</span><span class="p">))</span>
                  <span class="p">(</span><span class="k">set! </span><span class="p">(</span><span class="nf">ref</span> <span class="nv">v</span> <span class="nv">i</span><span class="p">)</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="mi">256</span><span class="p">)))</span>
           <span class="p">(</span><span class="nb">with-output-to-file </span><span class="p">(</span><span class="nf">format</span> <span class="s">&quot;pic~3,&#39;0d&quot;</span> <span class="nv">k</span><span class="p">)</span> <span class="p">(</span><span class="nf">cut</span> <span class="nv">write-block</span> <span class="nv">v</span><span class="p">)))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1749/addtag/" class="addtag" id="addtag_1749">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1749/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1749/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1749"
  >-</span><span
  class="button yellow"
  id="rating_z_1749"
  >0</span><span 
  class="button green"
  id="rating_p_1749"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1749/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1749/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1750">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1750/">#1750</a>(<script language="JavaScript">print_time(new Date("2007/08/02 21:26 GMT"));</script><noscript>2007/08/02 21:26 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>&gt; なお、ファイルの読み込みに1.5秒くらいかかっています。

いや、これは計測違いでした。
全部オンメモリで計算してもこんなもの：
gosh&gt; (time (find-closest-pic (ref *vecs* 35) *vecs*) (values))
;(time (find-closest-pic (ref *vecs* 35) *vecs*) (values))
; real   3.618
; user   3.530
; sys    0.080

なのでファイル読み込みのオーバヘッドは0.3秒くらいですね。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1750/addtag/" class="addtag" id="addtag_1750">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1750"
  >-</span><span
  class="button yellow"
  id="rating_z_1750"
  >0</span><span 
  class="button green"
  id="rating_p_1750"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1749/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1750/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1750/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1750/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1751">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/96/" target="_top">ether</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1751/">#1751</a>(<script language="JavaScript">print_time(new Date("2007/08/02 22:46 GMT"));</script><noscript>2007/08/02 22:46 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  これ画像が最初にどういう形（オンメモリ or ファイル、ファイルであれば形式）で与えられるか絞らないとせっかくの投稿同士を比較しづらいんじゃないですかね。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1751/addtag/" class="addtag" id="addtag_1751">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1751"
  >-</span><span
  class="button yellow"
  id="rating_z_1751"
  >0</span><span 
  class="button green"
  id="rating_p_1751"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1751/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1751/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1752">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1752/">#1752</a>(<script language="JavaScript">print_time(new Date("2007/08/03 01:26 GMT"));</script><noscript>2007/08/03 01:26 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>これじゃScalaが完全にダメな子になるので
続いてパフォーマンス重視版。

同じ環境で一気に1.2秒程度になりました。
foldLeftやforeachの関数呼び出しに時間が
かかるので、そこをwhileループにしてやると
速くなります。

ので呼び出し回数が多いsimilarityScoreをwhileに変更。

http://www.scala-lang.org/docu/faq.html#id2243538

らへんを参照。速度的にはwhile,for,mapなどIterableのメソッド、の順です。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre>import java.util.Random
object Similar {
  type CMap = Array[Array[int]]
  def similarityScore(c1:CMap, c2:CMap) = {
    var score = 0
    var i = 0
    var height = c1.length
    var width  = c1(0).length
    while(i &lt; height) {
      var score2 = 0
      var j = 0
      while(j &lt; width) {
        score2 = score2 + (c1(i)(j)^c2(i)(j)^1)
        j = j+1
      }
      score = score + score2
      i = i+1
    }
    score
  }

  def select(c1:CMap, clist:Array[CMap]) = {
    var r:CMap = null
    var topScore = 0
    clist.foreach(c =&gt; {
      val s = similarityScore(c1, c)
      if(s &gt; topScore) {
        r = c
        topScore = s
      }
    })
    (topScore, r)
  }

  def makeRandomCMap(width:int, height:int):CMap = {
    val rand = new Random
    new Array[int](height).map(y =&gt; {
      new Array[int](width).map(x =&gt; rand.nextInt(2))
    })
  }

  def main(args: Array[String]) = {
    val width = 1024
    val height = 768
    val c1 = Similar.makeRandomCMap(width, height)
    val clist = List.range(0, 100).map(x =&gt; Similar.makeRandomCMap(width, height)).toArray
    println(&quot;start&quot;)
    val start = System.currentTimeMillis
    val (score, c) = Similar.select(c1, clist)
    println(&quot;top score:&quot;+score)
    println(&quot;time:&quot;+(System.currentTimeMillis-start) + &quot; milli seconds.&quot;)
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1752/addtag/" class="addtag" id="addtag_1752">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1752/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1752/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1752"
  >-</span><span
  class="button yellow"
  id="rating_z_1752"
  >0</span><span 
  class="button green"
  id="rating_p_1752"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1740/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1752/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1752/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1753">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/78/" target="_top">morchin</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/">#1753</a>(<script language="JavaScript">print_time(new Date("2007/08/03 01:40 GMT"));</script><noscript>2007/08/03 01:40 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>画像から0,1のデータに変換するコードは書いていない。アルゴリズムは線形なのでO(100 * n_bits)くらいのオーダーなのでそんなに遅くはないと思う…。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="highlight"><pre><span class="c"># -*- coding: utf-8 -*-</span>

<span class="k">def</span> <span class="nf">find_analogy_index</span><span class="p">(</span><span class="n">pixcels</span><span class="p">,</span> <span class="n">ptn</span><span class="p">):</span>
	<span class="n">max_cnt</span> <span class="o">=</span> <span class="mi">0</span>
	<span class="n">max_idx</span> <span class="o">=</span> <span class="bp">None</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">p</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">pixcels</span><span class="p">):</span>
		<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="k">for</span> <span class="n">y</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
			<span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
				<span class="k">if</span> <span class="n">ptn</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span> <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
	<span class="k">if</span> <span class="n">max_cnt</span> <span class="o">&lt;</span> <span class="n">cnt</span><span class="p">:</span>
		<span class="n">max_cnt</span> <span class="o">=</span> <span class="n">cnt</span>
		<span class="n">max_idx</span> <span class="o">=</span> <span class="n">i</span>
	<span class="k">return</span> <span class="n">max_idx</span>

<span class="k">def</span> <span class="nf">print_pixcels</span><span class="p">(</span><span class="n">ptn</span><span class="p">):</span>
	<span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">ptn</span><span class="p">:</span>
		<span class="n">L</span> <span class="o">=</span> <span class="p">[</span><span class="n">b</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">u</span><span class="s">&#39;■&#39;</span> <span class="ow">or</span> <span class="n">u</span><span class="s">&#39;□&#39;</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">l</span><span class="p">]</span>
		<span class="k">print</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
	<span class="n">pixcels</span><span class="o">=</span><span class="p">[</span>
		<span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">]],</span>
		<span class="p">[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]],</span>
		<span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]]</span>
	<span class="p">]</span>
	<span class="n">idx</span> <span class="o">=</span> <span class="n">find_analogy_index</span><span class="p">(</span><span class="n">pixcels</span><span class="p">,</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span>
	<span class="n">print_pixcels</span><span class="p">(</span><span class="n">pixcels</span><span class="p">[</span><span class="n">idx</span><span class="p">])</span>
	
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/addtag/" class="addtag" id="addtag_1753">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1753"
  >-</span><span
  class="button yellow"
  id="rating_z_1753"
  >0</span><span 
  class="button green"
  id="rating_p_1753"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/">
    2
    replies
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1753/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1754">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/78/" target="_top">morchin</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1754/">#1754</a>(<script language="JavaScript">print_time(new Date("2007/08/03 01:47 GMT"));</script><noscript>2007/08/03 01:47 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  11～13行目がインデント1つずれていた…orz
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">find_analogy_index</span><span class="p">(</span><span class="n">pixcels</span><span class="p">,</span> <span class="n">ptn</span><span class="p">):</span>
	<span class="n">max_cnt</span> <span class="o">=</span> <span class="mi">0</span>
	<span class="n">max_idx</span> <span class="o">=</span> <span class="bp">None</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">p</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">pixcels</span><span class="p">):</span>
		<span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
		<span class="k">for</span> <span class="n">y</span><span class="p">,</span> <span class="n">l</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
			<span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
				<span class="k">if</span> <span class="n">ptn</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">:</span> <span class="n">cnt</span> <span class="o">+=</span> <span class="mi">1</span>
		<span class="k">if</span> <span class="n">max_cnt</span> <span class="o">&lt;</span> <span class="n">cnt</span><span class="p">:</span>
			<span class="n">max_cnt</span> <span class="o">=</span> <span class="n">cnt</span>
			<span class="n">max_idx</span> <span class="o">=</span> <span class="n">i</span>
	<span class="k">return</span> <span class="n">max_idx</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1754/addtag/" class="addtag" id="addtag_1754">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1754/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1754/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1754"
  >-</span><span
  class="button yellow"
  id="rating_z_1754"
  >0</span><span 
  class="button green"
  id="rating_p_1754"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1754/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1754/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1755">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1755/">#1755</a>(<script language="JavaScript">print_time(new Date("2007/08/03 02:43 GMT"));</script><noscript>2007/08/03 02:43 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>むむ。他の動的言語(PnutsやScala)がけっこういけてますね。闘志に火がつきました。

uniform vectorの組込み演算を使って0.87秒 (Pen4 2.0GHz)。オンメモリのデータで。

gosh&gt; (time (find-closest-pic (ref *vecs* 35) *vecs*) )
;(time (find-closest-pic (ref *vecs* 35) *vecs*))
; real   0.873
; user   0.870
; sys    0.000
392016
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">uvector</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">sequence</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>

<span class="p">(</span><span class="nf">define-constant</span> <span class="nv">*image-size*</span> <span class="p">(</span><span class="nb">* </span><span class="mi">1024</span> <span class="mi">768</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">find-closest-pic</span> <span class="nv">vs</span> <span class="nv">pics</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">diff-score</span> <span class="nv">vp</span> <span class="nv">vs</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">let1</span> <span class="nv">vx</span> <span class="p">(</span><span class="nf">u8vector-xor</span> <span class="nv">vp</span> <span class="nv">vs</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x01</span><span class="p">))</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x02</span><span class="p">))</span> <span class="mi">2</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x04</span><span class="p">))</span> <span class="mi">4</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x08</span><span class="p">))</span> <span class="mi">8</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x10</span><span class="p">))</span> <span class="mi">16</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x20</span><span class="p">))</span> <span class="mi">32</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x40</span><span class="p">))</span> <span class="mi">64</span><span class="p">)</span>
         <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">v1</span> <span class="p">(</span><span class="nf">u8vector-and</span> <span class="nv">vx</span> <span class="o">#</span><span class="nv">x80</span><span class="p">))</span> <span class="mi">128</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">v1</span> <span class="p">(</span><span class="nf">make-u8vector</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">8</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>

  <span class="p">(</span><span class="nf">values-ref</span>
   <span class="p">(</span><span class="nf">fold2</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">vp</span> <span class="nv">score</span> <span class="nv">ans</span><span class="p">)</span>
            <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">eq? </span><span class="nv">vs</span> <span class="nv">vp</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="nv">score</span> <span class="nv">ans</span><span class="p">)</span><span class="err">]</span>
                  <span class="err">[</span><span class="k">else </span><span class="p">(</span><span class="nf">let1</span> <span class="nv">s</span> <span class="p">(</span><span class="nf">diff-score</span> <span class="nv">vp</span> <span class="nv">vs</span><span class="p">)</span>
                          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">s</span> <span class="nv">score</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="nv">s</span> <span class="nv">vp</span><span class="p">)</span> <span class="p">(</span><span class="nb">values </span><span class="nv">score</span> <span class="nv">ans</span><span class="p">)))</span><span class="err">]</span><span class="p">))</span>
          <span class="o">#</span><span class="nv">i1/0</span> <span class="no">#f</span> <span class="nv">pics</span><span class="p">)</span>
   <span class="mi">0</span><span class="p">))</span>

<span class="c1">;; (find-closest-pic &quot;pic035&quot; (sys-glob &quot;pic???&quot;))</span>
<span class="c1">;;   =&gt; 392118 and &quot;pic064&quot;</span>

<span class="c1">;;;</span>
<span class="c1">;;; test data generation</span>
<span class="c1">;;;</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-27</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">generate-random-pics</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">list-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">let1</span> <span class="nv">v</span> <span class="p">(</span><span class="nf">make-u8vector</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">8</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">*image-size*</span> <span class="mi">8</span><span class="p">))</span>
                    <span class="p">(</span><span class="nf">u8vector-set!</span> <span class="nv">v</span> <span class="nv">i</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">expt </span><span class="mi">2</span> <span class="mi">8</span><span class="p">))))</span>
             <span class="nv">v</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">*vecs*</span> <span class="p">(</span><span class="nf">generate-random-pics</span> <span class="mi">100</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1755/addtag/" class="addtag" id="addtag_1755">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1755/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1755/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1755"
  >-</span><span
  class="button yellow"
  id="rating_z_1755"
  >0</span><span 
  class="button green"
  id="rating_p_1755"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1750/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1755/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1755/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1756">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1756/">#1756</a>(<script language="JavaScript">print_time(new Date("2007/08/03 02:56 GMT"));</script><noscript>2007/08/03 02:56 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  loop のところの seq が随分効きますね。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1756/addtag/" class="addtag" id="addtag_1756">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1756"
  >-</span><span
  class="button yellow"
  id="rating_z_1756"
  >0</span><span 
  class="button green"
  id="rating_p_1756"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1756/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1756/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1756/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1758">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1758/">#1758</a>(<script language="JavaScript">print_time(new Date("2007/08/03 03:22 GMT"));</script><noscript>2007/08/03 03:22 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  「一番その画像に似ている画像を見つけるコード」ではなくて「類似度を判定するコード」としたほうがよかったですね…。今後パフォーマンスを問う場合は「何々が与えられて何々を返す部分」といった感じでターゲットを明示するようにします。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1758/addtag/" class="addtag" id="addtag_1758">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1758"
  >-</span><span
  class="button yellow"
  id="rating_z_1758"
  >0</span><span 
  class="button green"
  id="rating_p_1758"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1751/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1758/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1758/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1759">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1759/">#1759</a>(<script language="JavaScript">print_time(new Date("2007/08/03 03:23 GMT"));</script><noscript>2007/08/03 03:23 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>&gt;これってXOR使えばいいんだよね。

すばらしい洞察 +1
この問題の肝はxorやpopCountを使って高速化がしやすいかどうかにありました。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1759/addtag/" class="addtag" id="addtag_1759">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1759"
  >-</span><span
  class="button yellow"
  id="rating_z_1759"
  >0</span><span 
  class="button green"
  id="rating_p_1759"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1741/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1759/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1759/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1760">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1760/">#1760</a>(<script language="JavaScript">print_time(new Date("2007/08/03 03:31 GMT"));</script><noscript>2007/08/03 03:31 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>PythonのPyInt_Typeは値がlongな上に参照カウンタとかも持っているので、
その時点ですでに何十倍か無駄にメモリを食うわけです。
アルゴリズムのオーダーがたとえ同じでも
係数が何十倍か違えば当然何十倍か遅くなるわけです。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1760/addtag/" class="addtag" id="addtag_1760">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1760"
  >-</span><span
  class="button yellow"
  id="rating_z_1760"
  >0</span><span 
  class="button green"
  id="rating_p_1760"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1753/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1760/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1760/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1760/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1761">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/">#1761</a>(<script language="JavaScript">print_time(new Date("2007/08/03 03:37 GMT"));</script><noscript>2007/08/03 03:37 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  1024*768 ビットのランダムビットファイルを 0..100 まで作成したものを使って、ファイル0 と残りの100個を比較する版？ rihiさんのコードをシンプルにした(改悪？)ものです。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Foreign</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>

<span class="nv">starling</span> <span class="nv">f</span> <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span>

<span class="nv">cmpapp</span> <span class="o">::</span> <span class="n">Ord</span> <span class="nv">b</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">Ordering</span>
<span class="nv">cmpapp</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">withBitmap</span> <span class="s">&quot;data/0&quot;</span>
     <span class="o">$</span> <span class="o">\</span> <span class="nv">bmp</span> <span class="o">-&gt;</span> <span class="kr">do</span> <span class="p">{</span> <span class="kr">let</span> <span class="nv">comp</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">withBitmap</span> <span class="p">(</span><span class="s">&quot;data/&quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">n</span><span class="p">)</span>
                                <span class="o">$</span> <span class="nv">flip</span> <span class="p">((</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="o">.</span> <span class="nv">difference</span> <span class="nv">bmp</span><span class="p">)</span> 
                                <span class="o">$</span> <span class="nv">return</span> <span class="o">.</span> <span class="p">(,)</span> <span class="nv">n</span>
                   <span class="p">;</span> <span class="nv">rs</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="nv">comp</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span><span class="p">]</span>
                   <span class="p">;</span> <span class="nv">print</span> <span class="o">$</span> <span class="nv">minimumBy</span> <span class="p">(</span><span class="nv">cmpapp</span> <span class="nv">snd</span><span class="p">)</span> <span class="nv">rs</span>
		   <span class="p">}</span>

<span class="nv">withBitmap</span> <span class="o">::</span> <span class="n">FilePath</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="nv">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="nv">a</span>
<span class="nv">withBitmap</span> <span class="nv">path</span> <span class="nv">action</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">h</span> <span class="o">&lt;-</span> <span class="nv">openBinaryFile</span> <span class="nv">path</span> <span class="n">ReadMode</span>
      <span class="p">;</span> <span class="nv">allocaBytes</span> <span class="nv">bitmapSize</span>
      <span class="o">$</span> <span class="nv">starling</span> <span class="p">((</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="o">.</span> <span class="nv">flip</span> <span class="p">(</span><span class="nv">hGetBuf</span> <span class="nv">h</span><span class="p">)</span> <span class="nv">bitmapSize</span><span class="p">)</span> <span class="nv">action</span>
      <span class="p">}</span>

<span class="nv">bitmapSize</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">768</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">8</span>

<span class="nv">difference</span> <span class="o">::</span> <span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">Int</span>
<span class="nv">difference</span> <span class="nv">p</span> <span class="nv">q</span> <span class="o">=</span> <span class="nv">loop</span> <span class="mi">0</span> <span class="nv">p</span> <span class="nv">q</span> <span class="mi">0</span>
  <span class="kr">where</span>
    <span class="nv">loop</span> <span class="nv">c</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">d</span>
      <span class="o">|</span> <span class="nv">c</span> <span class="o">==</span> <span class="nv">bitmapSize</span> <span class="o">=</span> <span class="nv">return</span> <span class="nv">d</span>
      <span class="o">|</span> <span class="nv">otherwise</span> 
         <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">a</span> <span class="o">&lt;-</span> <span class="nv">peek</span> <span class="nv">p</span> <span class="p">;</span> <span class="nv">b</span> <span class="o">&lt;-</span> <span class="nv">peek</span> <span class="nv">q</span>
              <span class="p">;</span> <span class="p">(((</span><span class="nv">loop</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">c</span><span class="o">+</span><span class="mi">4</span><span class="p">))</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">inc</span> <span class="nv">p</span><span class="p">))</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">inc</span> <span class="nv">q</span><span class="p">))</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">d</span> <span class="o">+</span> <span class="nv">diff</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">)</span>
              <span class="p">}</span>
    <span class="nv">inc</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">advancePtr</span> <span class="nv">x</span> <span class="mi">1</span>

<span class="nv">diff</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">diff</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">count</span> <span class="p">(</span><span class="nv">x</span> <span class="p">`</span><span class="nv">xor</span><span class="p">`</span> <span class="nv">y</span><span class="p">)</span>

<span class="nv">count</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">count</span> <span class="nv">a</span> <span class="o">=</span> <span class="nv">fromEnum</span> <span class="nv">f</span>
  <span class="kr">where</span> 
      <span class="nv">b</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">a</span> <span class="o">.&amp;.</span> <span class="mh">0xaaaaaaaa</span><span class="p">)</span>  <span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nv">a</span> <span class="o">.&amp;.</span> <span class="mh">0x55555555</span><span class="p">)</span>
      <span class="nv">c</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">b</span> <span class="o">.&amp;.</span> <span class="mh">0xcccccccc</span><span class="p">)</span>  <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="nv">b</span> <span class="o">.&amp;.</span> <span class="mh">0x33333333</span><span class="p">)</span>
      <span class="nv">d</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">c</span> <span class="o">.&amp;.</span> <span class="mh">0xf0f0f0f0</span><span class="p">)</span>  <span class="mi">4</span> <span class="o">+</span> <span class="p">(</span><span class="nv">c</span> <span class="o">.&amp;.</span> <span class="mh">0x0f0f0f0f</span><span class="p">)</span>
      <span class="nv">e</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">d</span> <span class="o">.&amp;.</span> <span class="mh">0xff00ff00</span><span class="p">)</span>  <span class="mi">8</span> <span class="o">+</span> <span class="p">(</span><span class="nv">d</span> <span class="o">.&amp;.</span> <span class="mh">0x00ff00ff</span><span class="p">)</span>
      <span class="nv">f</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">e</span> <span class="o">.&amp;.</span> <span class="mh">0xffff0000</span><span class="p">)</span> <span class="mi">16</span> <span class="o">+</span> <span class="p">(</span><span class="nv">e</span> <span class="o">.&amp;.</span> <span class="mh">0x0000ffff</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/addtag/" class="addtag" id="addtag_1761">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1761"
  >-</span><span
  class="button yellow"
  id="rating_z_1761"
  >0</span><span 
  class="button green"
  id="rating_p_1761"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1738/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1761/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1762">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/235/" target="_top">onjo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1762/">#1762</a>(<script language="JavaScript">print_time(new Date("2007/08/03 03:38 GMT"));</script><noscript>2007/08/03 03:38 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Pentium 4 3GHz, 1G RAM で以下の結果でした。32bit データを consing 無しで扱えるような 64bit 環境だともっとはやいかも。
画像のロード:  94 msec で、画像のロード＋探索: 391 msec =&gt; 313 msec (型指定) =&gt; 297 msec (ビットカウントをマクロに)　くらいであきらめました。
まぁ、今見直すと同じ名前なら類似度計算するの無駄とかありますね…
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></td><td class="code"><div class="highlight"><pre>(defpackage :doukaku-37 (:use :cl))
(in-package :doukaku-37)

(declaim (optimize (speed 3) (space 0) (debug 0) (safety 0)))

(defconstant +width+ 1024)
(defconstant +height+ 768)
(defconstant +max-score+ (* +width+ +height+))
;; 32bit マシンで実行するので、16bit 幅にしておく。fixnum の範囲を超えると consing で遅くなる
(defconstant +shorts+ (/ (* +width+ +height+) 16))

(defun make-random-image ()
  (let ((vec (make-array +shorts+ :element-type &#39;(unsigned-byte 16))))
    (loop for i from 0 below +shorts+ do (setf (aref vec i) (random #xFFFF)))
    vec))

(defun generate-images ()
  (loop for i from 1 to 100
        for name = (format nil &quot;image.~A&quot; i) do
        (with-open-file (s name :direction :output :if-exists :supersede
                                :element-type &#39;(unsigned-byte 16))
          (write-sequence (make-random-image) s))))

(defun load-image (name &amp;aux (bytes (make-array +shorts+ :element-type &#39;(unsigned-byte 16))))
  (with-open-file (s name :direction :input :element-type &#39;(unsigned-byte 16))
    (read-sequence bytes s)
    bytes))

(defun load-all-images ()
  (loop for i from 1 to 100
        for name  = (format nil &quot;image.~A&quot; i)
        for image = (load-image name)
        collect (list :name name :image image :score 0)))

;; 最適化 1: of-type unsigned-byte 16 を追加。 logxor が xor 命令に展開されてちょっとはやい
;; 最適化 2: logcount -&gt; logcount16 マクロへ (気休め)
(defun similarity (image-1 image-2)
  (loop for byte-1 of-type (unsigned-byte 16) across image-1 
        for byte-2 of-type (unsigned-byte 16) across image-2
        summing (logcount16 (logxor byte-1 byte-2))))

(defmacro logcount16 (num)
  `(let ((x (the (unsigned-byte 16) ,num)))
     (declare (type (unsigned-byte 16) x))
     (setf x (+ (logand (ash x -1) #x5555) (logand x #x5555))
           x (+ (logand (ash x -2) #x3333) (logand x #x3333))
           x (+ (logand (ash x -4) #x0F0F) (logand x #x0F0F))
           x (+ (logand (ash x -8) #x00FF) (logand x #x00FF)))))

(defun find-similar-image (name)
  (let ((image (load-image name))
        (data  (load-all-images)))
    (loop with result = (list :name nil :score +max-score+)
          for x in data
          for score = (similarity image (getf x :image))
          do (when (and (&lt;= score (getf result :score)) (not (equal name (getf x :name))))
               (setf result x))
             (setf (getf x :score) score)
          finally (return (getf result :name)))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1762/addtag/" class="addtag" id="addtag_1762">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1762/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1762/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1762"
  >-</span><span
  class="button yellow"
  id="rating_z_1762"
  >0</span><span 
  class="button green"
  id="rating_p_1762"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1762/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1762/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1763">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1763/">#1763</a>(<script language="JavaScript">print_time(new Date("2007/08/03 03:52 GMT"));</script><noscript>2007/08/03 03:52 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Squeak Smalltalk で。001.png 〜 100.png から indexOfRef で指定した番号の画像とそれ以外とを比べ、その中で最も似ている画像の番号を返します。実行時間は 1 GHz PowerPC (Mac OS X) で 11.5 秒程度でした。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre>| indexOfRef getImage refImage numOfImgs |
indexOfRef := 1.
numOfImgs := 100.

getImage := [:index |
    | name file |
    name := (index printPaddedWith: $0 to: 3), &#39;.png&#39;.
    file := FileStream fileNamed: name.
    file binary.
    (PNGReadWriter createAFormFrom: file contentsOfEntireFile) first].

refImage := getImage value: indexOfRef.

((1 to: numOfImgs) copyWithout: indexOfRef) detectMin: [:idx |
    (refImage deltaFrom: (getImage value: idx)) primCountBits]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1763/addtag/" class="addtag" id="addtag_1763">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1763/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1763/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1763"
  >-</span><span
  class="button yellow"
  id="rating_z_1763"
  >0</span><span 
  class="button green"
  id="rating_p_1763"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1763/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1763/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1764">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1764/">#1764</a>(<script language="JavaScript">print_time(new Date("2007/08/03 04:08 GMT"));</script><noscript>2007/08/03 04:08 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  logcount16は65536エントリのsimple vectorにあらかじめ計算しといてsvrefする、というのはどうでしょう?
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1764/addtag/" class="addtag" id="addtag_1764">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1764"
  >-</span><span
  class="button yellow"
  id="rating_z_1764"
  >0</span><span 
  class="button green"
  id="rating_p_1764"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1762/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1764/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1764/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1764/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1765">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/">#1765</a>(<script language="JavaScript">print_time(new Date("2007/08/03 04:28 GMT"));</script><noscript>2007/08/03 04:28 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Squeak Smalltalk のいったん読み込んでから一気に比較する版。選定にかかった時間（最後の式の処理時間）は 1 GHz PowerPC (Mac OS X) で 1 秒ほどでした。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre>| indexOfRef refImage numOfImgs images |
indexOfRef := 1.
numOfImgs := 100.
images := (1 to: numOfImgs) collect: [:idx |
    | name file |
    name := (idx printPaddedWith: $0 to: 3), &#39;.png&#39;.
    file := FileStream fileNamed: name.
    file binary.
    (PNGReadWriter createAFormFrom: file contentsOfEntireFile) first].

refImage := images at: indexOfRef.

((1 to: numOfImgs) copyWithout: indexOfRef) detectMin: [:idx |
    (refImage deltaFrom: (images at: idx)) primCountBits]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/addtag/" class="addtag" id="addtag_1765">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1765"
  >-</span><span
  class="button yellow"
  id="rating_z_1765"
  >0</span><span 
  class="button green"
  id="rating_p_1765"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1763/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1765/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1766">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/237/" target="_top">talo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1766/">#1766</a>(<script language="JavaScript">print_time(new Date("2007/08/03 04:31 GMT"));</script><noscript>2007/08/03 04:31 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>・for ループ部分のメソッド抽出により、images.get(i) の呼び出しが最小限になり、高速化。
　ここがかなりの負荷になっていた。
・実行するときの確保するヒープ領域は 100mb くらいでいい。 
　画像データ部分だけで 1024 * 768 * 100 = 約78mb + α 必要になり、デフォルトでは足りない。
・その他間違ってたとこ修正。
・時間は 450ms くらいに大幅縮小。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">MonochromeMain</span> <span class="o">{</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">WIDTH</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">HEIGHT</span> <span class="o">=</span> <span class="mi">768</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">VALUE</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">similarityScore</span><span class="o">(</span><span class="n">Monochrome</span> <span class="n">target</span><span class="o">,</span> <span class="n">Monochrome</span> <span class="n">image</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">HEIGHT</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">WIDTH</span><span class="o">;</span> <span class="o">++</span><span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">score</span> <span class="o">+=</span> <span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">getPixel</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="o">^</span> <span class="n">image</span><span class="o">.</span><span class="na">getPixel</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">j</span><span class="o">)</span> <span class="o">^</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">score</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">Monochrome</span> <span class="n">createMonocrome</span><span class="o">(</span><span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Monochrome</span> <span class="n">o</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Monochrome</span><span class="o">(</span><span class="n">width</span><span class="o">,</span> <span class="n">height</span><span class="o">);</span>
        <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Random</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">height</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">width</span><span class="o">;</span> <span class="o">++</span><span class="n">j</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">o</span><span class="o">.</span><span class="na">setPixel</span><span class="o">((</span><span class="kt">byte</span><span class="o">)</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">2</span><span class="o">),</span> <span class="n">j</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Monochrome</span> <span class="n">target</span> <span class="o">=</span> <span class="n">createMonocrome</span><span class="o">(</span><span class="n">WIDTH</span><span class="o">,</span> <span class="n">HEIGHT</span><span class="o">);</span>
        <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">List</span><span class="o">&lt;</span><span class="n">Monochrome</span><span class="o">&gt;</span> <span class="n">images</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">ArrayList</span><span class="o">&lt;</span><span class="n">Monochrome</span><span class="o">&gt;();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">images</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&lt;</span> <span class="n">VALUE</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">images</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createMonocrome</span><span class="o">(</span><span class="n">WIDTH</span><span class="o">,</span> <span class="n">HEIGHT</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">topScore</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">topIndex</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">VALUE</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">target</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">images</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                <span class="n">topIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="n">topScore</span> <span class="o">=</span> <span class="n">HEIGHT</span> <span class="o">*</span> <span class="n">WIDTH</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="n">similarityScore</span><span class="o">(</span><span class="n">target</span><span class="o">,</span> <span class="n">images</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">topScore</span> <span class="o">&lt;</span> <span class="n">score</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">topScore</span> <span class="o">=</span> <span class="n">score</span><span class="o">;</span>
                <span class="n">topIndex</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;max score image[&quot;</span> <span class="o">+</span> <span class="n">topIndex</span> <span class="o">+</span> <span class="s">&quot;]: &quot;</span> <span class="o">+</span> <span class="n">topScore</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;time: &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">start</span><span class="o">));</span>
    <span class="o">}</span>

<span class="o">}</span>

<span class="c">// 以下の Monochrome クラスは同じなので省略</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1766/addtag/" class="addtag" id="addtag_1766">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1766/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1766/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1766"
  >-</span><span
  class="button yellow"
  id="rating_z_1766"
  >0</span><span 
  class="button green"
  id="rating_p_1766"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1744/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1766/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1766/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1768">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1768/">#1768</a>(<script language="JavaScript">print_time(new Date("2007/08/03 05:04 GMT"));</script><noscript>2007/08/03 05:04 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  参考まで、#deltaForm: の中身はビット列の XOR で、#primCountBits の中身は popCount です。いずれも、Smalltalk システム（暫定ダイナブック環境、あるいは ALTO コンピュータ）発祥ということでよく知られている BitBlt という機構が下請けています。http://ja.wikipedia.org/wiki/Bitblt
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1768/addtag/" class="addtag" id="addtag_1768">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1768"
  >-</span><span
  class="button yellow"
  id="rating_z_1768"
  >0</span><span 
  class="button green"
  id="rating_p_1768"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1765/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1768/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1768/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1769">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/78/" target="_top">morchin</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1769/">#1769</a>(<script language="JavaScript">print_time(new Date("2007/08/03 05:10 GMT"));</script><noscript>2007/08/03 05:10 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>なるほど。プリミティブな型を使用することによるところがボトルネックになるとしたら
numarrayを使うとか、そういう型を使用しない別のアプローチを使うとかになりそうですね。
一瞬、2進数のビット演算でいけると思ったのですが、2.5でまだ使えないですね。もう少し考えて見ます。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1769/addtag/" class="addtag" id="addtag_1769">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1769"
  >-</span><span
  class="button yellow"
  id="rating_z_1769"
  >0</span><span 
  class="button green"
  id="rating_p_1769"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1760/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1769/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1769/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1770">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1770/">#1770</a>(<script language="JavaScript">print_time(new Date("2007/08/03 07:11 GMT"));</script><noscript>2007/08/03 07:11 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>出題をわざと誤読して好き勝手やってみる。
読み込んだgif画像を64x48画素のグレースケールに縮小し、画素の輝度の差の二乗和を比較。
写真フォルダから適当に101枚選んで誤差拡散で1024x768の二値画像に変換してテストしたところ
CoreSolo 1.2GHzで約38秒。
内比較にかかったのは2%程。残りは読み込みと縮小処理でした。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nf">define</span><span class="p">(</span><span class="s1">&#39;CELL_CX&#39;</span><span class="p">,</span><span class="m">64</span><span class="p">);</span>
<span class="nf">define</span><span class="p">(</span><span class="s1">&#39;CELL_CY&#39;</span><span class="p">,</span><span class="m">48</span><span class="p">);</span>

<span class="k">function</span> <span class="nf">loadimage</span><span class="p">(</span><span class="nv">$filename</span><span class="p">,</span><span class="nv">$w</span><span class="p">,</span><span class="nv">$h</span><span class="p">)</span>
<span class="p">{</span>
	<span class="k">if</span><span class="p">((</span><span class="nv">$tmp</span><span class="o">=@</span><span class="nf">imagecreatefromgif</span><span class="p">(</span><span class="nv">$filename</span><span class="p">))</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
		<span class="k">return</span> <span class="k">false</span><span class="p">;</span>
	<span class="nv">$img</span><span class="o">=</span><span class="nf">imagecreatetruecolor</span><span class="p">(</span><span class="nv">$w</span><span class="p">,</span><span class="nv">$h</span><span class="p">);</span>
	<span class="nf">imagecopyresampled</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$tmp</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span> <span class="nv">$w</span><span class="p">,</span><span class="nv">$h</span><span class="p">,</span> <span class="nf">imagesx</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">),</span><span class="nf">imagesy</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">));</span>
	<span class="k">return</span> <span class="nv">$img</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">compareimg</span><span class="p">(</span><span class="nv">$img0</span><span class="p">,</span><span class="nv">$img1</span><span class="p">,</span><span class="nv">$limit</span><span class="p">)</span>
<span class="p">{</span>
	<span class="nv">$w</span><span class="o">=</span><span class="nf">imagesx</span><span class="p">(</span><span class="nv">$img0</span><span class="p">);</span>
	<span class="nv">$h</span><span class="o">=</span><span class="nf">imagesy</span><span class="p">(</span><span class="nv">$img0</span><span class="p">);</span>
	<span class="nv">$d</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(</span><span class="nv">$y</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$y</span><span class="o">&lt;</span><span class="nv">$h</span> <span class="o">&amp;&amp;</span> <span class="nv">$d</span><span class="o">&lt;</span><span class="nv">$limit</span><span class="p">;</span><span class="o">++</span><span class="nv">$y</span><span class="p">)</span>
		<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">$w</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
		<span class="p">{</span>	<span class="nv">$d1</span><span class="o">=</span><span class="p">(</span><span class="nf">imagecolorat</span><span class="p">(</span><span class="nv">$img0</span><span class="p">,</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span><span class="o">&amp;</span><span class="m">0</span><span class="nx">xff</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nf">imagecolorat</span><span class="p">(</span><span class="nv">$img1</span><span class="p">,</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span><span class="o">&amp;</span><span class="m">0</span><span class="nx">xff</span><span class="p">);</span>
			<span class="nv">$d</span><span class="o">+=</span><span class="nv">$d1</span><span class="o">*</span><span class="nv">$d1</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="k">return</span> <span class="nv">$d</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$start</span><span class="o">=</span><span class="nf">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>

<span class="k">if</span><span class="p">((</span><span class="nv">$needle</span><span class="o">=</span><span class="nx">loadimage</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="nx">CELL_CX</span><span class="p">,</span><span class="nx">CELL_CY</span><span class="p">))</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
	<span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>

<span class="nv">$diff</span><span class="o">=</span><span class="m">0</span><span class="nx">x7fffffff</span><span class="p">;</span>
<span class="nv">$result</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span>

<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$dh</span><span class="o">=</span><span class="nf">opendir</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">2</span><span class="p">])))</span>
	<span class="k">exit</span><span class="p">(</span><span class="m">2</span><span class="p">);</span>
<span class="k">while</span><span class="p">((</span><span class="nv">$file</span><span class="o">=</span><span class="nf">readdir</span><span class="p">(</span><span class="nv">$dh</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
<span class="p">{</span>	<span class="k">if</span><span class="p">((</span><span class="nv">$img</span><span class="o">=</span><span class="nx">loadimage</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="nv">$file</span><span class="p">,</span><span class="nx">CELL_CX</span><span class="p">,</span><span class="nx">CELL_CY</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
	<span class="p">{</span>	<span class="nv">$d</span><span class="o">=</span><span class="nx">compareimg</span><span class="p">(</span><span class="nv">$needle</span><span class="p">,</span><span class="nv">$img</span><span class="p">,</span><span class="nv">$diff</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$d</span><span class="o">&lt;</span><span class="nv">$diff</span><span class="p">)</span>
		<span class="p">{</span>	<span class="nv">$diff</span><span class="o">=</span><span class="nv">$d</span><span class="p">;</span>
			<span class="nv">$result</span><span class="o">=</span><span class="nv">$file</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nf">closedir</span><span class="p">(</span><span class="nv">$dh</span><span class="p">);</span>

<span class="k">echo</span> <span class="s2">&quot;</span><span class="si">$result</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
<span class="k">echo</span> <span class="nf">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="o">-</span><span class="nv">$start</span><span class="p">,</span><span class="s2">&quot;sec</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>

<span class="k">if</span><span class="p">((</span><span class="nv">$img</span><span class="o">=</span><span class="nx">loadimage</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="o">.</span><span class="s1">&#39;/&#39;</span><span class="o">.</span><span class="nv">$result</span><span class="p">,</span><span class="nx">CELL_CX</span><span class="p">,</span><span class="nx">CELL_CY</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
	<span class="nf">imagejpeg</span><span class="p">(</span><span class="nv">$img</span><span class="p">,</span><span class="s2">&quot;result.jpg&quot;</span><span class="p">,</span><span class="m">90</span><span class="p">);</span>
<span class="nf">imagejpeg</span><span class="p">(</span><span class="nv">$needle</span><span class="p">,</span><span class="s2">&quot;needle.jpg&quot;</span><span class="p">,</span><span class="m">90</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1770/addtag/" class="addtag" id="addtag_1770">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1770/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1770/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1770"
  >-</span><span
  class="button yellow"
  id="rating_z_1770"
  >0</span><span 
  class="button green"
  id="rating_p_1770"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1770/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1772">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/69/" target="_top">PHO</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1772/">#1772</a>(<script language="JavaScript">print_time(new Date("2007/08/03 09:53 GMT"));</script><noscript>2007/08/03 09:53 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>それを並列化してみました。CPU二つ以上ある人向け。

% ghc --make ImgDiffPar -O3 -threaded  ← スレッド重要
% ./ImgDiffPar +RTS -N2  ← CPU四つなら -N4

私の環境: PowerPC G5 2.0GHz x 2
並列化前: 0.56秒
並列化後: 0.47秒
改善率: 19.1%

しかし今考えると difference じゃなくて rs &lt;- mapM comp [1..100] 
の部分を二つに割った方が良かったかも。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Foreign</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">Unsafe</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Parallel</span>

<span class="nv">starling</span> <span class="nv">f</span> <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span>

<span class="nv">cmpapp</span> <span class="o">::</span> <span class="n">Ord</span> <span class="nv">b</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">b</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">Ordering</span>
<span class="nv">cmpapp</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">withBitmap</span> <span class="s">&quot;data/0&quot;</span>
     <span class="o">$</span> <span class="o">\</span> <span class="nv">bmp</span> <span class="o">-&gt;</span> <span class="kr">do</span> <span class="p">{</span> <span class="kr">let</span> <span class="nv">comp</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">withBitmap</span> <span class="p">(</span><span class="s">&quot;data/&quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">n</span><span class="p">)</span>
                                <span class="o">$</span> <span class="nv">flip</span> <span class="p">((</span><span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="o">.</span> <span class="nv">difference</span> <span class="nv">bmp</span><span class="p">)</span> 
                                <span class="o">$</span> <span class="nv">return</span> <span class="o">.</span> <span class="p">(,)</span> <span class="nv">n</span>
                   <span class="p">;</span> <span class="nv">rs</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="nv">comp</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="mi">100</span><span class="p">]</span>
                   <span class="p">;</span> <span class="nv">print</span> <span class="o">$</span> <span class="nv">minimumBy</span> <span class="p">(</span><span class="nv">cmpapp</span> <span class="nv">snd</span><span class="p">)</span> <span class="nv">rs</span>
		   <span class="p">}</span>

<span class="nv">withBitmap</span> <span class="o">::</span> <span class="n">FilePath</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="nv">a</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="nv">a</span>
<span class="nv">withBitmap</span> <span class="nv">path</span> <span class="nv">action</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">h</span> <span class="o">&lt;-</span> <span class="nv">openBinaryFile</span> <span class="nv">path</span> <span class="n">ReadMode</span>
      <span class="p">;</span> <span class="nv">allocaBytes</span> <span class="nv">bitmapSize</span>
      <span class="o">$</span> <span class="nv">starling</span> <span class="p">((</span><span class="o">&gt;&gt;</span><span class="p">)</span> <span class="o">.</span> <span class="nv">flip</span> <span class="p">(</span><span class="nv">hGetBuf</span> <span class="nv">h</span><span class="p">)</span> <span class="nv">bitmapSize</span><span class="p">)</span> <span class="nv">action</span>
      <span class="p">}</span>

<span class="nv">bitmapSize</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">*</span> <span class="mi">768</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">8</span>

<span class="nv">difference</span> <span class="o">::</span> <span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Ptr</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">Int</span>
<span class="nv">difference</span> <span class="nv">p</span> <span class="nv">q</span> <span class="o">=</span> <span class="nv">upper</span> <span class="p">`</span><span class="nv">par</span><span class="p">`</span> <span class="nv">lower</span> <span class="p">`</span><span class="nv">par</span><span class="p">`</span> <span class="nv">return</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">upper</span> <span class="o">+</span> <span class="nv">lower</span><span class="p">)</span>
  <span class="kr">where</span>
    <span class="nv">halfSize</span> <span class="o">=</span> <span class="nv">bitmapSize</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">2</span>

    <span class="nv">upper</span> <span class="o">=</span> <span class="nv">unsafePerformIO</span> <span class="o">$</span>
            <span class="nv">loop</span> <span class="mi">0</span> <span class="nv">p</span> <span class="nv">q</span> <span class="mi">0</span> <span class="nv">halfSize</span>

    <span class="nv">lower</span> <span class="o">=</span> <span class="nv">unsafePerformIO</span> <span class="o">$</span>
            <span class="nv">loop</span> <span class="nv">halfSize</span> <span class="p">(</span><span class="nv">plusPtr</span> <span class="nv">p</span> <span class="nv">halfSize</span><span class="p">)</span> <span class="p">(</span><span class="nv">plusPtr</span> <span class="nv">q</span> <span class="nv">halfSize</span><span class="p">)</span> <span class="mi">0</span> <span class="nv">bitmapSize</span>

    <span class="nv">loop</span> <span class="nv">c</span> <span class="nv">p</span> <span class="nv">q</span> <span class="nv">d</span> <span class="nv">lim</span>
      <span class="o">|</span> <span class="nv">c</span> <span class="o">==</span> <span class="nv">lim</span> <span class="o">=</span> <span class="nv">return</span> <span class="nv">d</span>
      <span class="o">|</span> <span class="nv">otherwise</span> 
         <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">a</span> <span class="o">&lt;-</span> <span class="nv">peek</span> <span class="nv">p</span> <span class="p">;</span> <span class="nv">b</span> <span class="o">&lt;-</span> <span class="nv">peek</span> <span class="nv">q</span>
              <span class="p">;</span> <span class="p">((((</span><span class="nv">loop</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">c</span><span class="o">+</span><span class="mi">4</span><span class="p">))</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">inc</span> <span class="nv">p</span><span class="p">))</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">inc</span> <span class="nv">q</span><span class="p">))</span> <span class="o">$!</span> <span class="p">(</span><span class="nv">d</span> <span class="o">+</span> <span class="nv">diff</span> <span class="nv">a</span> <span class="nv">b</span><span class="p">))</span> <span class="o">$!</span> <span class="nv">lim</span>
              <span class="p">}</span>

    <span class="nv">inc</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">advancePtr</span> <span class="nv">x</span> <span class="mi">1</span>

<span class="nv">diff</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">diff</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">count</span> <span class="p">(</span><span class="nv">x</span> <span class="p">`</span><span class="nv">xor</span><span class="p">`</span> <span class="nv">y</span><span class="p">)</span>

<span class="nv">count</span> <span class="o">::</span> <span class="n">Word32</span> <span class="o">-&gt;</span> <span class="n">Int</span>
<span class="nv">count</span> <span class="nv">a</span> <span class="o">=</span> <span class="nv">fromEnum</span> <span class="nv">f</span>
  <span class="kr">where</span> 
      <span class="nv">b</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">a</span> <span class="o">.&amp;.</span> <span class="mh">0xaaaaaaaa</span><span class="p">)</span>  <span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="nv">a</span> <span class="o">.&amp;.</span> <span class="mh">0x55555555</span><span class="p">)</span>
      <span class="nv">c</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">b</span> <span class="o">.&amp;.</span> <span class="mh">0xcccccccc</span><span class="p">)</span>  <span class="mi">2</span> <span class="o">+</span> <span class="p">(</span><span class="nv">b</span> <span class="o">.&amp;.</span> <span class="mh">0x33333333</span><span class="p">)</span>
      <span class="nv">d</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">c</span> <span class="o">.&amp;.</span> <span class="mh">0xf0f0f0f0</span><span class="p">)</span>  <span class="mi">4</span> <span class="o">+</span> <span class="p">(</span><span class="nv">c</span> <span class="o">.&amp;.</span> <span class="mh">0x0f0f0f0f</span><span class="p">)</span>
      <span class="nv">e</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">d</span> <span class="o">.&amp;.</span> <span class="mh">0xff00ff00</span><span class="p">)</span>  <span class="mi">8</span> <span class="o">+</span> <span class="p">(</span><span class="nv">d</span> <span class="o">.&amp;.</span> <span class="mh">0x00ff00ff</span><span class="p">)</span>
      <span class="nv">f</span> <span class="o">=</span> <span class="nv">shiftR</span> <span class="p">(</span><span class="nv">e</span> <span class="o">.&amp;.</span> <span class="mh">0xffff0000</span><span class="p">)</span> <span class="mi">16</span> <span class="o">+</span> <span class="p">(</span><span class="nv">e</span> <span class="o">.&amp;.</span> <span class="mh">0x0000ffff</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1772/addtag/" class="addtag" id="addtag_1772">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1772/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1772/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1772"
  >-</span><span
  class="button yellow"
  id="rating_z_1772"
  >0</span><span 
  class="button green"
  id="rating_p_1772"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1761/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1772/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1772/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1773">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/256/" target="_top">rihi</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1773/">#1773</a>(<script language="JavaScript">print_time(new Date("2007/08/03 10:06 GMT"));</script><noscript>2007/08/03 10:06 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  これがないとloopがcntについて非正格になるので、影響が大きいようです。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1773/addtag/" class="addtag" id="addtag_1773">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1773"
  >-</span><span
  class="button yellow"
  id="rating_z_1773"
  >0</span><span 
  class="button green"
  id="rating_p_1773"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1756/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1773/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1773/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1775">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/235/" target="_top">onjo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1775/">#1775</a>(<script language="JavaScript">print_time(new Date("2007/08/03 11:31 GMT"));</script><noscript>2007/08/03 11:31 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  あらかじめ結果を計算したテーブルを参照すると、短くてはやそうなコードになるんですが、計測すると若干遅めという結果でした。
これくらいの計算だとメモリ参照するよりもレジスタ演算のみのほうがはやいみたいです。（AllegroCL 8.1 on Windows）
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1775/addtag/" class="addtag" id="addtag_1775">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1775"
  >-</span><span
  class="button yellow"
  id="rating_z_1775"
  >0</span><span 
  class="button green"
  id="rating_p_1775"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1764/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1775/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1775/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1775/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1785">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/235/" target="_top">onjo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1785/">#1785</a>(<script language="JavaScript">print_time(new Date("2007/08/03 13:46 GMT"));</script><noscript>2007/08/03 13:46 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  む、テーブルを defvar から defconstant に変更するとちょっと効率が改善されますね…
所要時間は defvar &gt; logcount16マクロ &gt; defconstant  ですが、それぞれの差は数%程度のようです。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1785/addtag/" class="addtag" id="addtag_1785">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1785"
  >-</span><span
  class="button yellow"
  id="rating_z_1785"
  >0</span><span 
  class="button green"
  id="rating_p_1785"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1775/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1785/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1785/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1785/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1808">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/43/" target="_top">kzk</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1808/">#1808</a>(<script language="JavaScript">print_time(new Date("2007/08/04 06:52 GMT"));</script><noscript>2007/08/04 06:52 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>__builtin_popcount (g++ only)！

データ形式は謎だけど、とりあえず__builtin_popcountの知名度向上のためにsubmit。

core2duo 6600  @ 2.40GHz

pcore% g++ -Wall -Wextra -O2 37.cpp; time ./a.out
27:81
./a.out  0.06s user 0.02s system 96% cpu 0.083 total
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">W</span> <span class="o">=</span> <span class="mi">1024</span> <span class="o">/</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span><span class="p">);</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">H</span> <span class="o">=</span> <span class="mi">768</span><span class="p">;</span>
<span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">data</span><span class="p">[</span><span class="mi">100</span><span class="p">][</span><span class="n">H</span><span class="p">][</span><span class="n">W</span><span class="p">];</span>

<span class="kt">int</span>
<span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">srand</span><span class="p">(</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>

  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">H</span><span class="p">;</span> <span class="n">h</span><span class="o">++</span><span class="p">)</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">W</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
        <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">h</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">=</span> <span class="n">rand</span><span class="p">();</span>

  <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">retcnt</span> <span class="o">=</span> <span class="n">numeric_limits</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">max</span><span class="p">();</span>
  <span class="kt">int</span> <span class="n">target</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">100</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">target</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>

    <span class="kt">int</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">h</span> <span class="o">&lt;</span> <span class="n">H</span><span class="p">;</span> <span class="n">h</span><span class="o">++</span><span class="p">)</span>
      <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">W</span><span class="p">;</span> <span class="n">w</span><span class="o">++</span><span class="p">)</span>
        <span class="n">cnt</span> <span class="o">+=</span> <span class="n">__builtin_popcount</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">target</span><span class="p">][</span><span class="n">h</span><span class="p">][</span><span class="n">w</span><span class="p">]</span> <span class="o">^</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">h</span><span class="p">][</span><span class="n">w</span><span class="p">]);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">cnt</span> <span class="o">&lt;</span> <span class="n">retcnt</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">retcnt</span> <span class="o">=</span> <span class="n">cnt</span><span class="p">;</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">target</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ret</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1808/addtag/" class="addtag" id="addtag_1808">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1808/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1808/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1808"
  >-</span><span
  class="button yellow"
  id="rating_z_1808"
  >0</span><span 
  class="button green"
  id="rating_p_1808"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1808/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1871">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/235/" target="_top">onjo</a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1871/">#1871</a>(<script language="JavaScript">print_time(new Date("2007/08/05 11:09 GMT"));</script><noscript>2007/08/05 11:09 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  logcount =&gt; 313msec, logcount16 =&gt; 297msec, defconstant + svref =&gt; 281msec でした。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="highlight"><pre>(defconstant +bits+
  (let ((vec (make-sequence &#39;simple-vector 65536)))
    (dotimes (i 65536)
      (setf (svref vec i) (logcount16 i)))
    vec))

(defun similarity (image-1 image-2)
  (loop for byte-1 of-type (unsigned-byte 16) across image-1 
        for byte-2 of-type (unsigned-byte 16) across image-2
        summing (svref +bits+ (logxor byte-1 byte-2))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1871/addtag/" class="addtag" id="addtag_1871">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1871/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1871/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1871"
  >-</span><span
  class="button yellow"
  id="rating_z_1871"
  >0</span><span 
  class="button green"
  id="rating_p_1871"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1785/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1871/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1871/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1905">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1905/">#1905</a>(<script language="JavaScript">print_time(new Date("2007/08/06 03:58 GMT"));</script><noscript>2007/08/06 03:58 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>投稿のタイミングが遅すぎのような気もしますがおくります。

画像データはダミーをrandomを使って生成しています。
スピードは諦めて、コードの簡潔さで勝負です。

ちなみにAthlonXP 1700+で１２０秒弱ほどかかりました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">random</span> <span class="k">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>
<span class="k">from</span> <span class="nn">array</span> <span class="k">import</span> <span class="n">array</span>

<span class="k">def</span> <span class="nf">next</span><span class="p">():</span>
  <span class="k">return</span> <span class="n">array</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1024</span><span class="o">/</span><span class="mi">8</span><span class="o">*</span><span class="mi">768</span><span class="p">)])</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">)]</span>
<span class="n">o</span> <span class="o">=</span> <span class="n">next</span><span class="p">()</span>
<span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">([</span><span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="o">&amp;</span><span class="n">k</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">next</span><span class="p">())])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>

<span class="k">print</span> <span class="nb">max</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">))</span> <span class="k">if</span> <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">max</span><span class="p">(</span><span class="n">r</span><span class="p">)]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1905/addtag/" class="addtag" id="addtag_1905">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1905/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1905/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1905"
  >-</span><span
  class="button yellow"
  id="rating_z_1905"
  >0</span><span 
  class="button green"
  id="rating_p_1905"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1905/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1905/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1906">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1906/">#1906</a>(<script language="JavaScript">print_time(new Date("2007/08/06 04:16 GMT"));</script><noscript>2007/08/06 04:16 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>あっと、間違ってました。XORじゃなくてANDになってるし、
7行目も違う。

なんか、あってるのか自身が無くなってきた。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">random</span> <span class="k">import</span> <span class="n">seed</span><span class="p">,</span> <span class="n">randint</span>
<span class="k">from</span> <span class="nn">array</span> <span class="k">import</span> <span class="n">array</span>

<span class="k">def</span> <span class="nf">next</span><span class="p">():</span>
  <span class="k">return</span> <span class="n">array</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">,</span> <span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1024</span><span class="o">/</span><span class="mi">8</span><span class="o">*</span><span class="mi">768</span><span class="p">)])</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">([</span><span class="mi">1</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">j</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">i</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">256</span><span class="p">)]</span>
<span class="n">o</span> <span class="o">=</span> <span class="n">next</span><span class="p">()</span>
<span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">([</span><span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="o">^</span><span class="n">k</span><span class="p">]</span> <span class="k">for</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">next</span><span class="p">())])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>

<span class="k">print</span> <span class="nb">max</span><span class="p">(</span><span class="n">r</span><span class="p">),</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">))</span> <span class="k">if</span> <span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">max</span><span class="p">(</span><span class="n">r</span><span class="p">)]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1906/addtag/" class="addtag" id="addtag_1906">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1906/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1906/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1906"
  >-</span><span
  class="button yellow"
  id="rating_z_1906"
  >0</span><span 
  class="button green"
  id="rating_p_1906"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1905/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1906/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1906/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1907">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1907/">#1907</a>(<script language="JavaScript">print_time(new Date("2007/08/06 04:34 GMT"));</script><noscript>2007/08/06 04:34 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>無駄に遠回りしてみました。
異なったピクセル数の集計をグラフィクスハードウェアにやらせています。
8bit/colorプレーンでオーバフローが起きないように、1024x768ぶんの
ビットマップを3分割し、R、G、Bコンポーネントがそれぞれ1または0の
512x512のテクスチャにして、それを256分割して32x32の正方形に加算で
貼込んで、CPU側に読み戻して集計してます。

残念ながら速度はそう速くなく、Pen4 2.0GHz/GeForce 6800/Linux で比較部分が 2.1秒程度。
細かく計測するとglBitmapでの転送がほとんどの時間(1.8秒以上)を占めています。
512x512 一枚の転送に6msくらいかかってるので何か間違えているの
だろうかとも思ったんですが、転送サイズを変えてみると綺麗にサイズに
比例してるし、glDrawPixelsなどはそんなに遅くないので、glBitmapで
巨大なイメージを送る方が悪いってことかなあ。(ドライバはNVIDIAのものです)。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">gl</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gl</span><span class="o">.</span><span class="nv">glut</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">uvector</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">sequence</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">time</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">*varray*</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">v</span> <span class="p">(</span><span class="nf">make-f32vector</span> <span class="p">(</span><span class="nb">* </span><span class="mi">5</span> <span class="mi">4</span> <span class="mi">256</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">x</span> <span class="mi">16</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">:</span> <span class="nv">y</span> <span class="mi">16</span><span class="p">)</span>
           <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">ind</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="nv">x</span> <span class="mi">16</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span> <span class="mi">5</span> <span class="mi">4</span><span class="p">))</span>
                 <span class="p">(</span><span class="nf">x0</span>  <span class="p">(</span><span class="nf">/</span><span class="o">.</span> <span class="nv">x</span> <span class="mi">16</span><span class="p">))</span> <span class="p">(</span><span class="nf">x1</span> <span class="p">(</span><span class="nf">/</span><span class="o">.</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">16</span><span class="p">))</span>
                 <span class="p">(</span><span class="nf">y0</span>  <span class="p">(</span><span class="nf">/</span><span class="o">.</span> <span class="nv">y</span> <span class="mi">16</span><span class="p">))</span> <span class="p">(</span><span class="nf">y1</span> <span class="p">(</span><span class="nf">/</span><span class="o">.</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">16</span><span class="p">)))</span>
             <span class="c1">;; (s, t, x, y, z) * 4</span>
             <span class="p">(</span><span class="k">set! </span><span class="p">(</span><span class="nf">subseq</span> <span class="nv">v</span> <span class="nv">ind</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">ind</span> <span class="mi">20</span><span class="p">))</span>
                   <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="nv">x0</span> <span class="o">,</span><span class="nv">y0</span>  <span class="mi">0</span>  <span class="mi">0</span> <span class="mi">0</span>
                     <span class="o">,</span><span class="nv">x0</span> <span class="o">,</span><span class="nv">y1</span>  <span class="mi">0</span> <span class="mi">32</span> <span class="mi">0</span>
                     <span class="o">,</span><span class="nv">x1</span> <span class="o">,</span><span class="nv">y1</span> <span class="mi">32</span> <span class="mi">32</span> <span class="mi">0</span>
                     <span class="o">,</span><span class="nv">x1</span> <span class="o">,</span><span class="nv">y0</span> <span class="mi">32</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))))</span>
    <span class="nv">v</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">*v1*</span> <span class="p">(</span><span class="nf">make-u8vector</span> <span class="p">(</span><span class="nb">* </span><span class="mi">32</span> <span class="mi">32</span> <span class="mi">3</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">*texname*</span> <span class="mi">0</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">count-pixels</span> <span class="nv">bitmap</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">draw-source</span> <span class="nv">cnt</span> <span class="nv">color</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-color</span> <span class="nv">color</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-raster-pos</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-bitmap</span> <span class="mi">512</span> <span class="mi">512</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span>
               <span class="p">(</span><span class="nf">uvector-alias</span> <span class="nv">&lt;u8vector&gt;</span> <span class="nv">bitmap</span> 
                              <span class="p">(</span><span class="nb">* </span><span class="nv">cnt</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">/ </span><span class="mi">1024</span> <span class="mi">8</span><span class="p">)</span> <span class="mi">256</span><span class="p">))</span>
                              <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">+ </span><span class="nv">cnt</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">/ </span><span class="mi">1024</span> <span class="mi">8</span><span class="p">)</span> <span class="mi">256</span><span class="p">)))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-texture</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-clear</span> <span class="nv">GL_COLOR_BUFFER_BIT</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">draw-source</span> <span class="mi">0</span> <span class="o">&#39;#</span><span class="nv">u8</span><span class="p">(</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">draw-source</span> <span class="mi">1</span> <span class="o">&#39;#</span><span class="nv">u8</span><span class="p">(</span><span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">draw-source</span> <span class="mi">2</span> <span class="o">&#39;#</span><span class="nv">u8</span><span class="p">(</span><span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">gl-copy-tex-image-2d</span> <span class="nv">GL_TEXTURE_2D</span> <span class="mi">0</span> <span class="nv">GL_RGB</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">512</span> <span class="mi">512</span> <span class="mi">0</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">accumulate</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-clear</span> <span class="nv">GL_COLOR_BUFFER_BIT</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-color</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-enable</span> <span class="nv">GL_TEXTURE_2D</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">gl-draw-arrays</span> <span class="nv">GL_QUADS</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="mi">256</span><span class="p">))</span>
    <span class="p">(</span><span class="nf">gl-disable</span> <span class="nv">GL_TEXTURE_2D</span><span class="p">))</span>

  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">count</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">let1</span> <span class="nv">v</span> <span class="p">(</span><span class="nf">gl-read-pixels</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">32</span> <span class="mi">32</span> <span class="nv">GL_RGB</span> <span class="nv">GL_UNSIGNED_BYTE</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">u8vector-dot</span> <span class="nv">*v1*</span> <span class="nv">v</span><span class="p">)))</span>

  <span class="p">(</span><span class="nf">make-texture</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">accumulate</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">until</span> <span class="p">(</span><span class="nf">gl-get-error</span><span class="p">)</span> <span class="p">(</span><span class="nf">pa$</span> <span class="nv">=</span> <span class="nv">GL_NO_ERROR</span><span class="p">)</span>
         <span class="k">=&gt; </span><span class="nv">err</span> <span class="p">(</span><span class="nf">print</span> <span class="s">&quot;glError: &quot;</span><span class="p">(</span><span class="nf">glu-error-string</span> <span class="nv">err</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">count</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">find-closest-pic</span> <span class="nv">vec</span> <span class="nv">pics</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">values-ref</span> 
   <span class="p">(</span><span class="nf">fold2</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">pic</span> <span class="nv">i</span> <span class="nv">minscore</span><span class="p">)</span>
            <span class="p">(</span><span class="nf">let1</span> <span class="nv">score</span> <span class="p">(</span><span class="nf">count-pixels</span> <span class="p">(</span><span class="nf">u8vector-xor</span> <span class="nv">vec</span> <span class="nv">pic</span><span class="p">))</span>
              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">score</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">minscore</span><span class="p">))</span>
                <span class="p">(</span><span class="nb">values </span><span class="p">(</span><span class="nb">+ </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">i</span> <span class="nv">score</span><span class="p">))</span>
                <span class="p">(</span><span class="nb">values </span><span class="p">(</span><span class="nb">+ </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">minscore</span><span class="p">))))</span>
          <span class="mi">0</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">0</span> <span class="o">.</span> <span class="o">#</span><span class="nv">i1/0</span><span class="p">)</span> <span class="nv">pics</span><span class="p">)</span>
   <span class="mi">1</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">doit</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nf">time</span> <span class="p">(</span><span class="nf">find-closest-pic</span> <span class="p">(</span><span class="nb">car </span><span class="nv">*vecs*</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">*vecs*</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">exit</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">glut-init</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">glut-init-display-mode</span> <span class="p">(</span><span class="nf">logior</span> <span class="nv">GLUT_SINGLE</span> <span class="nv">GLUT_RGB</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">glut-init-window-size</span> <span class="mi">512</span> <span class="mi">512</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">glut-create-window</span> <span class="p">(</span><span class="nb">car </span><span class="nv">args</span><span class="p">))</span>

  <span class="p">(</span><span class="nf">gl-pixel-store</span> <span class="nv">GL_UNPACK_ALIGNMENT</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-clear-color</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-viewport</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">512</span> <span class="mi">512</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-matrix-mode</span> <span class="nv">GL_PROJECTION</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">glu-ortho-2d</span> <span class="mi">0</span> <span class="mi">512</span> <span class="mi">0</span> <span class="mi">512</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-matrix-mode</span> <span class="nv">GL_MODELVIEW</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-load-identity</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-enable</span> <span class="nv">GL_BLEND</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-blend-func</span> <span class="nv">GL_ONE</span> <span class="nv">GL_ONE</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-shade-model</span> <span class="nv">GL_FLAT</span><span class="p">)</span>
  <span class="p">(</span><span class="k">set! </span><span class="nv">*texname*</span> <span class="p">(</span><span class="nf">ref</span> <span class="p">(</span><span class="nf">gl-gen-textures</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">0</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">gl-bind-texture</span> <span class="nv">GL_TEXTURE_2D</span> <span class="nv">*texname*</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-tex-parameter</span> <span class="nv">GL_TEXTURE_2D</span> <span class="nv">GL_TEXTURE_MAG_FILTER</span> <span class="nv">GL_NEAREST</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-tex-parameter</span> <span class="nv">GL_TEXTURE_2D</span> <span class="nv">GL_TEXTURE_MIN_FILTER</span> <span class="nv">GL_NEAREST</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-tex-env</span> <span class="nv">GL_TEXTURE_ENV</span> <span class="nv">GL_TEXTURE_ENV_MODE</span> <span class="nv">GL_ADD</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">gl-interleaved-arrays</span> <span class="nv">GL_T2F_V3F</span> <span class="nv">*varray*</span><span class="p">)</span>

  <span class="p">(</span><span class="nf">glut-display-func</span> <span class="nv">doit</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">glut-main-loop</span><span class="p">)</span>
  <span class="mi">0</span><span class="p">)</span>

<span class="c1">;;;</span>
<span class="c1">;;; test data generation</span>
<span class="c1">;;;</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-27</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">generate-random-pics</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">list-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">k</span> <span class="nv">n</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">let1</span> <span class="nv">v</span> <span class="p">(</span><span class="nf">make-u8vector</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="mi">1024</span> <span class="mi">768</span><span class="p">)</span> <span class="mi">8</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">i</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">* </span><span class="mi">1024</span> <span class="mi">768</span><span class="p">)</span> <span class="mi">8</span><span class="p">))</span>
                    <span class="p">(</span><span class="nf">u8vector-set!</span> <span class="nv">v</span> <span class="nv">i</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">expt </span><span class="mi">2</span> <span class="mi">8</span><span class="p">))))</span>
             <span class="nv">v</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">*vecs*</span> <span class="p">(</span><span class="nf">generate-random-pics</span> <span class="mi">100</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1907/addtag/" class="addtag" id="addtag_1907">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/OpenGL/">OpenGL</a>
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1907/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1907/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1907"
  >-</span><span
  class="button yellow"
  id="rating_z_1907"
  >0</span><span 
  class="button green"
  id="rating_p_1907"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1907/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1933">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/344/" target="_top">jz5</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1933/">#1933</a>(<script language="JavaScript">print_time(new Date("2007/08/06 12:02 GMT"));</script><noscript>2007/08/06 12:02 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/vbnet/">
	  VB.net
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>BitArrayを使ってます。それゆえ、全く同じ形式・ファイルサイズの場合のみ動き、
ヘッダ情報は一緒ということにしてファイル全部をXORしてます。
XOR後、立っているビットを数えている部分が非常にスマートではないね……。

「類似度を判定するコード」の方が良かったと結論でているので言うのもなんですが、
「一番その画像に似ている画像を見つけるコード」の場合、
探索の最初に似ている画像が見つかれば、それ以降の探索時間を短くできるので、
検証に使用する画像がないと時間の比較しようがないですね。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="k">Public</span> <span class="k">Function</span> <span class="n">GetMostSimilarImage</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">source</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">,</span> <span class="k">ByVal</span> <span class="n">target</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span> <span class="ow">As</span> <span class="kt">String</span>

    <span class="k">Dim</span> <span class="n">ba1</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">BitArray</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">ReadAllBytes</span><span class="p">(</span><span class="n">source</span><span class="p">))</span>

    <span class="k">Dim</span> <span class="n">min</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="kt">Integer</span><span class="p">.</span><span class="n">MaxValue</span>
    <span class="k">Dim</span> <span class="n">diff</span> <span class="ow">As</span> <span class="kt">Integer</span>
    <span class="k">Dim</span> <span class="n">mostSimilar</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>

    <span class="k">Dim</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">As</span> <span class="kt">Integer</span>

    <span class="k">For</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">To</span> <span class="n">target</span><span class="p">.</span><span class="n">Length</span> <span class="o">-</span> <span class="mi">1</span>

        <span class="k">Dim</span> <span class="n">ba2</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">BitArray</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">ReadAllBytes</span><span class="p">(</span><span class="n">target</span><span class="p">(</span><span class="n">i</span><span class="p">)))</span>
        <span class="n">ba2</span><span class="p">.</span><span class="n">Xor</span><span class="p">(</span><span class="n">ba1</span><span class="p">)</span>

        <span class="n">diff</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">For</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">To</span> <span class="n">ba2</span><span class="p">.</span><span class="n">Length</span> <span class="o">-</span> <span class="mi">1</span>
            <span class="k">If</span> <span class="k">Not</span> <span class="n">ba2</span><span class="p">(</span><span class="n">j</span><span class="p">)</span> <span class="k">Then</span>
                <span class="k">Continue</span> <span class="k">For</span>
            <span class="k">End</span> <span class="k">If</span>

            <span class="n">diff</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">If</span> <span class="n">diff</span> <span class="o">&gt;</span> <span class="n">min</span> <span class="k">Then</span>
                <span class="k">Exit</span> <span class="k">For</span>
            <span class="k">End</span> <span class="k">If</span>
        <span class="k">Next</span>

        <span class="k">If</span> <span class="n">diff</span> <span class="o">&lt;</span> <span class="n">min</span> <span class="k">Then</span>
            <span class="n">min</span> <span class="o">=</span> <span class="n">diff</span>
            <span class="n">mostSimilar</span> <span class="o">=</span> <span class="n">target</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="k">End</span> <span class="k">If</span>

    <span class="k">Next</span>

    <span class="k">Return</span> <span class="n">mostSimilar</span>

<span class="k">End</span> <span class="k">Function</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1933/addtag/" class="addtag" id="addtag_1933">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/VB8.0/">VB8.0</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/vbnet/">
		VB.net
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1933/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1933/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1933"
  >-</span><span
  class="button yellow"
  id="rating_z_1933"
  >0</span><span 
  class="button green"
  id="rating_p_1933"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1933/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1935">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1935/">#1935</a>(<script language="JavaScript">print_time(new Date("2007/08/06 12:35 GMT"));</script><noscript>2007/08/06 12:35 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  PIL (Python Imaging Library) を使います。画像形式は PBM を用い、画像が無い場合は自動的にランダムな画像を作成するようになってます。（上書きはしないので、いきなり実行しても安全なはず）

psyco (Python JIT compiler) http://psyco.sourceforge.net/ を使うという反則技を犯して 66.11秒です。（私のマシンは Pentium2-266Mhz なので、最近のマシンではたぶんずっと速いでしょう）
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">PIL.Image</span>
<span class="k">import</span> <span class="nn">random</span>
<span class="k">import</span> <span class="nn">time</span>
<span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">os</span>

<span class="n">size</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1024</span><span class="p">,</span> <span class="mi">768</span><span class="p">)</span>

<span class="n">pathes</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;doukaku</span><span class="si">%02d</span><span class="s">.pbm&quot;</span> <span class="o">%</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">100</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">create</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">data</span><span class="p">():</span>
        <span class="n">n</span> <span class="o">=</span> <span class="p">(</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">//</span> <span class="mi">8</span> <span class="o">+</span> <span class="mi">1</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="nb">chr</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">256</span><span class="p">)]</span>
        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">pathes</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s"> ... &quot;</span> <span class="o">%</span> <span class="n">path</span><span class="p">)</span>
            <span class="n">PIL</span><span class="o">.</span><span class="n">Image</span><span class="o">.</span><span class="n">fromstring</span><span class="p">(</span><span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="n">size</span><span class="p">,</span> <span class="n">data</span><span class="p">())</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;done.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">compare</span><span class="p">(</span><span class="n">path1</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">data</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">PIL</span><span class="o">.</span><span class="n">Image</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span><span class="o">.</span><span class="n">getdata</span><span class="p">()</span>
    <span class="n">h</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">data1</span> <span class="o">=</span> <span class="n">data</span><span class="p">(</span><span class="n">path1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">path2</span> <span class="ow">in</span> <span class="n">pathes</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">path1</span> <span class="o">!=</span> <span class="n">path2</span><span class="p">:</span>
            <span class="n">data2</span> <span class="o">=</span> <span class="n">data</span><span class="p">(</span><span class="n">path2</span><span class="p">)</span>
            <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">size</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">size</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
                <span class="k">if</span> <span class="n">data1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">data2</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">print</span> <span class="n">path2</span><span class="p">,</span> <span class="n">count</span>
            <span class="n">h</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="p">[])</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">path2</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s"> is similar to </span><span class="si">%r</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">path1</span><span class="p">,</span> <span class="nb">max</span><span class="p">(</span><span class="n">h</span><span class="o">.</span><span class="n">iteritems</span><span class="p">())[</span><span class="mi">1</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">create</span><span class="p">()</span> <span class="c"># first, create pbm files if not exist</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
    <span class="n">compare</span><span class="p">(</span><span class="n">pathes</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span> <span class="k">else</span> <span class="mi">0</span><span class="p">])</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&quot;Ellapsed time is </span><span class="si">%.2f</span><span class="s"> sec.&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">t2</span> <span class="o">-</span> <span class="n">t1</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="k">import</span> <span class="nn">psyco</span>
    <span class="n">psyco</span><span class="o">.</span><span class="n">full</span><span class="p">()</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1935/addtag/" class="addtag" id="addtag_1935">タグ</a>:
	
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/PIL/">PIL</a>
    
    <a href="/web/20080331044845/http://ja.doukaku.org/tag/psyco/">psyco</a>
    
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1935/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1935/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1935"
  >-</span><span
  class="button yellow"
  id="rating_z_1935"
  >0</span><span 
  class="button green"
  id="rating_p_1935"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/1935/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1935/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1936">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1936/">#1936</a>(<script language="JavaScript">print_time(new Date("2007/08/06 12:37 GMT"));</script><noscript>2007/08/06 12:37 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  あと、私はジェネレータ好きなのですが、どうもpsycoとは相性が悪いようで、これを使うとあまり速くなりませんでした。(--;
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1936/addtag/" class="addtag" id="addtag_1936">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1936"
  >-</span><span
  class="button yellow"
  id="rating_z_1936"
  >0</span><span 
  class="button green"
  id="rating_p_1936"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1935/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/1936/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1936/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment1957">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/335/" target="_top">yattom</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1957/">#1957</a>(<script language="JavaScript">print_time(new Date("2007/08/07 03:14 GMT"));</script><noscript>2007/08/07 03:14 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>配列(ハッシュ)のキーを &lt;x * 1000 + y&gt; として、0/1で格納します。
100枚ぶんをメモリに保持しようとすると処理できないので、1枚ずつ
生成して、処理して、メモリ開放してます。ちょっとインチキです。
(WindowsXP, PentiumM1.7GHz, 1GB, GNU Awk 3.1.5 Win32版)

100枚ぶん処理するのに、406秒かかりました。
そのうち266秒が、画像データをランダムに生成する処理です。
比較は140秒という計算です。
(類似度の高いものを選ぶ処理は、端折ってしまいました。)
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>function matchedness(pic1, pic2,   result, i) {
	result = 0
	for(i in pic1) {
		if(pic1[i] == pic2[i]) {
			result++
		}
	}
	return result
}


function make_pic(pic,  x, y) {
	for(x = 0; x &lt; 1024; x++) {
		for(y = 0; y &lt; 768; y++) {
			if(rand() &gt; 0.5) {
				pic[x * 1000 + y] = 0
			} else {
				pic[x * 1000 + y] = 1
			}
		}
	}
}


BEGIN {
	make_pic(org)

	start = systime()
	for(i = 0; i &lt; 100; i++) {
		make_pic(pic)
		print systime() - start, matchedness(pic, org)
		delete pic
	}
	print systime() - start
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/1957/addtag/" class="addtag" id="addtag_1957">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1957/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/1957/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1957"
  >-</span><span
  class="button yellow"
  id="rating_z_1957"
  >0</span><span 
  class="button green"
  id="rating_p_1957"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/1957/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment2049">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/232/" target="_top">kkobayashi</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/2049/">#2049</a>(<script language="JavaScript">print_time(new Date("2007/08/09 15:02 GMT"));</script><noscript>2007/08/09 15:02 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>Pentium M 1.5GHzで実行しました。

&gt; df &lt;- profiling(bitmap.match.01, 1024, 768, 100)
souce image  : file012.bmp 
most similar : file072.bmp 
&gt; df[["by.total"]][c("bitmap.match","sample.images","sapply.bitmap.match"),]
                    total.time total.pct self.time self.pct
bitmap.match             12.56     100.0         0        0
sample.images             9.54      76.0         0        0
sapply.bitmap.match       1.54      12.3         0        0

&gt; df &lt;- profiling(bitmap.match.02, 1024, 768, 100)
souce image  : file030.bmp 
most similar : file024.bmp
&gt; df[["by.total"]][c("bitmap.match","sample.images","sapply.bitmap.match","lapply.to.vector"),]
                    total.time total.pct self.time self.pct
bitmap.match             70.88     100.0         0        0
sample.images             7.98      11.3         0        0
sapply.bitmap.match       3.98       5.6         0        0
lapply.to.vector         58.90      83.1         0        0

サンプル画像として、1024x768のmatrixにモノクロ2値情報を読み込んだ状態を想定しています。
普通に書いた場合（bitmap.match.01）とビット演算を使用した場合（bitmap.match.02）の
プロファイルを取ってみたところ、普通に書いた場合のほうが早く終わりました。

ビット演算を使用した場合は32bit変数に変換するオーバーヘッドが相当大きかったのと、
普通に書いた場合は100個のmatrixに対するループ演算であったのに対して
ビット演算を使用した場合は(1024*768/32)*100個のループ演算が実行されるため、
計算自体が高速でもループのオーバーヘッドによって遅くなってしまったのだと思います。

実際にこういう処理が必要になれば迷わずCで書きますが、普段気にしないRの実行速度について
色々分かったのは面白かったです。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre>require(bitops)

lapply.to.vector     &lt;- lapply
apply.to.vector      &lt;- apply
lapply.sample.images &lt;- lapply
sapply.bitmap.match  &lt;- sapply
sapply.sample.images &lt;- sapply

sample.images &lt;- function(WIDTH=1024, HEIGHT=768, SAMPLES=100){
    images &lt;- lapply.sample.images(1:SAMPLES, function(x)
                                   (matrix(sample(0:1, WIDTH*HEIGHT, replace=T), HEIGHT, WIDTH)))
    names(images) &lt;- sapply.sample.images(1:SAMPLES, function(x) sprintf(&quot;file%03d.bmp&quot;,x))
    return(images)
}

to.vector &lt;- function(x){
    bits.32 &lt;- c(as.vector(x), numeric((32-length(x))%%32))
    return(apply.to.vector(matrix(bits.32, 32), 2, function(b)(b %*% (2 ** (0:31)))))
}

pop.count &lt;- function(x){
    x &lt;- bitAnd(x, 0x55555555) + bitAnd(bitShiftR(x,  1), 0x55555555)
    x &lt;- bitAnd(x, 0x33333333) + bitAnd(bitShiftR(x,  2), 0x33333333)
    x &lt;- bitAnd(x, 0x0f0f0f0f) + bitAnd(bitShiftR(x,  4), 0x0f0f0f0f)
    x &lt;- bitAnd(x, 0x00ff00ff) + bitAnd(bitShiftR(x,  8), 0x00ff00ff)
    x &lt;- bitAnd(x, 0x0000ffff) + bitAnd(bitShiftR(x, 16), 0x0000ffff)
    return(x)
}

bitmap.match.01 &lt;- function(WIDTH=1024, HEIGHT=768, SAMPLES=100){
    images  &lt;- sample.images(WIDTH, HEIGHT, SAMPLES)
    s_index &lt;- sample(1:SAMPLES, 1)
    s_image &lt;- unname(unlist(images[s_index]))
    score &lt;- sapply.bitmap.match(images[-s_index], function(x)(sum(s_image==x)))
    cat(&quot;souce image  :&quot;, names(images[s_index]), &quot;\n&quot;)
    cat(&quot;most similar :&quot;, names(which.max(score)), &quot;\n&quot;)
}

bitmap.match.02 &lt;- function(WIDTH=1024, HEIGHT=768, SAMPLES=100){
    images  &lt;- sample.images(WIDTH, HEIGHT, SAMPLES)
    images  &lt;- lapply.to.vector(images, to.vector)
    s_index &lt;- sample(1:SAMPLES, 1)
    s_image &lt;- unname(unlist(images[s_index]))
    score &lt;- sapply.bitmap.match(images[-s_index], function(x)(sum(pop.count(bitXor(s_image, x)))))
    cat(&quot;souce image  :&quot;, names(images[s_index]), &quot;\n&quot;)
    cat(&quot;most similar :&quot;, names(which.min(score)), &quot;\n&quot;)
}

profiling &lt;- function(bitmap.match, ...){
    Rprof(&quot;profile.out&quot;)
    bitmap.match(...)
    Rprof()
    summaryRprof(&quot;profile.out&quot;)
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/2049/addtag/" class="addtag" id="addtag_2049">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/2049/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/2049/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_2049"
  >-</span><span
  class="button yellow"
  id="rating_z_2049"
  >0</span><span 
  class="button green"
  id="rating_p_2049"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/2049/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment2051">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/343/" target="_top">shimakuma</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/2051/">#2051</a>(<script language="JavaScript">print_time(new Date("2007/08/09 22:24 GMT"));</script><noscript>2007/08/09 22:24 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  wscript.exe @ Celeron 2.8GHz で70秒弱(うち50秒ほどは配列生成)。最適化前は110秒弱かかっていました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">WSH</span> <span class="o">?</span> <span class="k">function</span><span class="p">(</span><span class="nx">$</span><span class="p">){</span> <span class="nx">WSH</span><span class="p">.</span><span class="nx">Echo</span><span class="p">(</span><span class="nx">$</span><span class="p">)</span> <span class="p">}</span> <span class="o">:</span> <span class="nx">alert</span><span class="p">)(</span> <span class="p">(</span><span class="k">function</span> <span class="nx">doukaku37</span><span class="p">(</span><span class="nx">w</span><span class="o">,</span> <span class="nx">h</span><span class="o">,</span> <span class="nx">b</span><span class="o">,</span> <span class="nx">n</span><span class="p">){</span>
	<span class="k">var</span> <span class="nx">time</span> <span class="o">=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">();</span>
	<span class="k">with</span><span class="p">(</span><span class="nb">Math</span><span class="p">)</span> <span class="k">var</span> <span class="nx">f</span> <span class="o">=</span> <span class="nx">floor</span><span class="o">,</span> <span class="nx">r</span> <span class="o">=</span> <span class="nx">random</span><span class="o">,</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="o">,</span> <span class="nx">b</span><span class="p">)</span><span class="o">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">ceil</span><span class="p">(</span><span class="nx">log</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span> <span class="o">*</span> <span class="nx">LOG2E</span><span class="p">);</span>
	<span class="k">function</span> <span class="nx">randomPict</span><span class="p">(){</span>
		<span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="p">{}</span><span class="o">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="nx">j</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">w</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">h</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span>
			<span class="nx">a</span><span class="p">[</span><span class="nx">i</span> <span class="o">&lt;&lt;</span> <span class="nx">s</span> <span class="o">|</span> <span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">f</span><span class="p">(</span><span class="nx">r</span><span class="p">()</span> <span class="o">*</span> <span class="nx">b</span><span class="p">);</span>
		<span class="k">return</span> <span class="nx">a</span><span class="o">;</span>
	<span class="p">}</span>
	<span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">P</span> <span class="o">=</span> <span class="nx">randomPict</span><span class="p">()</span><span class="o">,</span> <span class="nx">min</span> <span class="o">=</span> <span class="kc">Infinity</span><span class="o">,</span> <span class="nx">p</span><span class="o">,</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">j</span><span class="o">,</span> <span class="nx">x</span><span class="o">,</span> <span class="nx">diff</span><span class="o">,</span> <span class="nx">num</span><span class="o">;</span> <span class="nx">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">n</span><span class="o">--</span><span class="p">){</span>
		<span class="nx">p</span> <span class="o">=</span> <span class="nx">randomPict</span><span class="p">()</span><span class="o">,</span> <span class="nx">diff</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
		<span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">w</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">h</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
			<span class="nx">x</span> <span class="o">=</span> <span class="nx">P</span><span class="p">[</span><span class="nx">x</span> <span class="o">=</span> <span class="nx">i</span> <span class="o">&lt;&lt;</span> <span class="nx">s</span> <span class="o">|</span> <span class="nx">j</span><span class="p">]</span> <span class="o">^</span> <span class="nx">p</span><span class="p">[</span><span class="nx">x</span><span class="p">];</span>
			<span class="c">// 最適化↓ for(; x; x &gt;&gt;&gt;= 1) if(x &amp; 1) diff++;</span>
			<span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="nx">xAAAAAAAA</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mh">0x55555555</span><span class="p">);</span>
			<span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="nx">xCCCCCCCC</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mh">0x33333333</span><span class="p">);</span>
			<span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="nx">xF0F0F0F0</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mh">0x0</span><span class="nx">F0F0F0F</span><span class="p">);</span>
			<span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="nx">xFF00FF00</span><span class="p">)</span> <span class="o">&gt;&gt;</span>  <span class="mi">8</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mh">0x00</span><span class="nx">FF00FF</span><span class="p">);</span>
			<span class="nx">x</span> <span class="o">=</span> <span class="p">((</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="nx">xFFFF0000</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">x</span> <span class="o">&amp;</span> <span class="mh">0x0000</span><span class="nx">FFFF</span><span class="p">);</span>
			<span class="nx">diff</span> <span class="o">+=</span> <span class="nx">x</span><span class="o">;</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="nx">diff</span> <span class="o">&lt;</span> <span class="nx">min</span><span class="p">)</span> <span class="nx">min</span> <span class="o">=</span> <span class="nx">diff</span><span class="o">,</span> <span class="nx">num</span> <span class="o">=</span> <span class="nx">n</span><span class="o">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="s2">&quot;No.&quot;</span><span class="o">+</span> <span class="nx">num</span> <span class="o">+</span><span class="s2">&quot; (&quot;</span><span class="o">+</span> <span class="nx">min</span> <span class="o">+</span><span class="s2">&quot;)\n&quot;</span><span class="o">+</span> <span class="p">((</span><span class="k">new</span> <span class="nb">Date</span><span class="p">()).</span><span class="nx">getTime</span><span class="p">()</span> <span class="o">-</span> <span class="nx">time</span><span class="p">)</span><span class="o">/</span><span class="mi">1000</span> <span class="o">+</span><span class="s2">&quot;sec.&quot;</span><span class="o">;</span>
<span class="p">})(</span><span class="mi">1024</span><span class="o">,</span> <span class="mi">24</span><span class="o">,</span> <span class="mi">32</span><span class="o">,</span> <span class="mi">99</span><span class="p">)</span> <span class="p">);</span> <span class="c">// 768 = 24 * 32</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/2051/addtag/" class="addtag" id="addtag_2051">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/2051/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/2051/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_2051"
  >-</span><span
  class="button yellow"
  id="rating_z_2051"
  >0</span><span 
  class="button green"
  id="rating_p_2051"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/2051/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3317">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/448/" target="_top">naranja</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3317/">#3317</a>(<script language="JavaScript">print_time(new Date("2007/10/14 16:09 GMT"));</script><noscript>2007/10/14 16:09 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>std.random.rand() よりも std.c.stdlib.rand() のほうが圧倒的に高速なので
後者を使っていますが、そのせいで配列を乱数っぽい何かで初期化するハメになってます。
本質的じゃないのでいいかなと。

Pentium4 3GHz、メモリ 2GB 下での実行結果はこんな感じです。

init: 0.063 [sec]
comp: 0.062 [sec]
standard: 43, max similarity: 467034, most similar: [75]</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">c</span>.<span class="n">stdlib</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">date</span>;

<span class="kt">void</span> <span class="n">main</span>(){
    <span class="kt">int</span> <span class="n">num</span> = <span class="mi">100</span>;
    <span class="kt">uint</span>[<span class="mi">32</span>][<span class="mi">768</span>][] <span class="n">table</span>;  <span class="c">// 32px * 32blocks = 1024px</span>
    <span class="n">table</span>.<span class="n">length</span> = <span class="n">num</span>;
    <span class="n">randomize</span>();

    <span class="k">auto</span> <span class="n">initStart</span> = <span class="n">getUTCtime</span>();
    <span class="k">foreach</span>(<span class="n">n</span>, <span class="n">image</span>; <span class="n">table</span>){
        <span class="k">foreach</span>(<span class="n">h</span>, <span class="n">row</span>; <span class="n">image</span>){
            <span class="k">foreach</span>(<span class="n">w</span>, <span class="n">block</span>; <span class="n">row</span>){
                <span class="n">table</span>[<span class="n">n</span>][<span class="n">h</span>][<span class="n">w</span>] = (<span class="n">rand</span>() * <span class="mi">2</span>) + ((<span class="n">rand</span>() * <span class="mi">2</span>) &lt;&lt; <span class="mi">16</span>);
            }
        }
    }
    <span class="k">auto</span> <span class="n">initStop</span> = <span class="n">getUTCtime</span>();

    <span class="k">auto</span> <span class="n">compStart</span> = <span class="n">getUTCtime</span>();
    <span class="kt">int</span> <span class="n">standard</span> = <span class="n">rand</span>() % <span class="n">num</span>;
    <span class="kt">int</span>[] <span class="n">similarity</span>;
    <span class="n">similarity</span>.<span class="n">length</span> = <span class="n">num</span>;

    <span class="k">foreach</span>(<span class="n">n</span>, <span class="n">image</span>; <span class="n">table</span>){
        <span class="k">if</span>(<span class="n">n</span> == <span class="n">standard</span>){
            <span class="n">similarity</span>[<span class="n">n</span>] = -<span class="mi">1</span>;
            <span class="k">continue</span>;
        }
        <span class="k">foreach</span>(<span class="n">h</span>, <span class="n">row</span>; <span class="n">image</span>){
            <span class="k">foreach</span>(<span class="n">w</span>, <span class="n">block</span>; <span class="n">row</span>){
                <span class="kt">int</span> <span class="n">blockSim</span> = ~(<span class="n">block</span> ^ <span class="n">table</span>[<span class="n">standard</span>][<span class="n">h</span>][<span class="n">w</span>]);
                <span class="n">blockSim</span> = ((<span class="n">blockSim</span> &amp; <span class="mh">0xAAAA_AAAA</span>) &gt;&gt;  <span class="mi">1</span>) + (<span class="n">blockSim</span> &amp; <span class="mh">0x5555_5555</span>);
                <span class="n">blockSim</span> = ((<span class="n">blockSim</span> &amp; <span class="mh">0xCCCC_CCCC</span>) &gt;&gt;  <span class="mi">2</span>) + (<span class="n">blockSim</span> &amp; <span class="mh">0x3333_3333</span>);
                <span class="n">blockSim</span> = ((<span class="n">blockSim</span> &amp; <span class="mh">0xF0F0_F0F0</span>) &gt;&gt;  <span class="mi">4</span>) + (<span class="n">blockSim</span> &amp; <span class="mh">0x0F0F_0F0F</span>);
                <span class="n">blockSim</span> = ((<span class="n">blockSim</span> &amp; <span class="mh">0xFF00_FF00</span>) &gt;&gt;  <span class="mi">8</span>) + (<span class="n">blockSim</span> &amp; <span class="mh">0x00FF_00FF</span>);
                <span class="n">blockSim</span> = ((<span class="n">blockSim</span> &amp; <span class="mh">0xFFFF_0000</span>) &gt;&gt; <span class="mi">16</span>) + (<span class="n">blockSim</span> &amp; <span class="mh">0x0000_FFFF</span>);
                <span class="n">similarity</span>[<span class="n">n</span>] += <span class="n">blockSim</span>;
            }
        }
    }

    <span class="kt">int</span> <span class="n">maxSimilarity</span> = -<span class="mi">1</span>;
    <span class="k">foreach</span>(<span class="n">e</span>; <span class="n">similarity</span>){
        <span class="n">maxSimilarity</span> = <span class="n">maxSimilarity</span> &gt; <span class="n">e</span> ? <span class="n">maxSimilarity</span> : <span class="n">e</span>;
    }

    <span class="kt">int</span>[] <span class="n">mostSimilar</span>;
    <span class="k">foreach</span>(<span class="n">i</span>, <span class="n">e</span>; <span class="n">similarity</span>){
        <span class="k">if</span>(<span class="n">e</span> == <span class="n">maxSimilarity</span>){
            <span class="n">mostSimilar</span> ~= <span class="n">i</span>;
        }
    }
    <span class="k">auto</span> <span class="n">compStop</span> = <span class="n">getUTCtime</span>();

    <span class="n">writefln</span>(<span class="s">&quot;init: %.3f [sec]&quot;</span>, (<span class="n">initStop</span> - <span class="n">initStart</span>) / <span class="mf">1000.0</span>);
    <span class="n">writefln</span>(<span class="s">&quot;comp: %.3f [sec]&quot;</span>, (<span class="n">compStop</span> - <span class="n">compStart</span>) / <span class="mf">1000.0</span>);
    <span class="n">writefln</span>(<span class="s">&quot;standard: &quot;</span>, <span class="n">standard</span>, <span class="s">&quot;, max similarity: &quot;</span>, <span class="n">maxSimilarity</span>, <span class="s">&quot;, most similar: &quot;</span>, <span class="n">mostSimilar</span>);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3317/addtag/" class="addtag" id="addtag_3317">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/3317/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/3317/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3317"
  >-</span><span
  class="button yellow"
  id="rating_z_3317"
  >0</span><span 
  class="button green"
  id="rating_p_3317"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/3317/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  <br/>

  
  




<div class="comment" id="comment3425">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3425/">#3425</a>(<script language="JavaScript">print_time(new Date("2007/10/17 08:24 GMT"));</script><noscript>2007/10/17 08:24 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>pure rubyには厳しい問題です。
モノクロデータは別で用意してます。

model name      : Intel(R) Core(TM)2 CPU          6400  @ 2.13GHz

{:score=&gt;394250, :index=&gt;33}
ruby cmp_bmp.rb  9.56s user 0.04s system 99% cpu 9.617 total
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">MonoBmp</span>
  <span class="kp">attr_reader</span> <span class="ss">:a</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
    <span class="vc">@@tbl</span> <span class="o">||=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">cnt_tbl</span><span class="p">(</span><span class="mh">0x100</span><span class="p">)</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">zero_cnt</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">size</span><span class="p">)</span>
    <span class="n">r</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">r</span> <span class="o">+=</span> <span class="p">(((</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="mi">1</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">r</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">cnt_tbl</span><span class="p">(</span><span class="n">size</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">zero_cnt</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="n">a</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">oth</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="vi">@a</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">c</span> <span class="o">+=</span> <span class="vc">@@tbl</span><span class="o">[</span><span class="vi">@a</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">^</span> <span class="n">oth</span><span class="o">.</span><span class="n">a</span><span class="o">[</span><span class="n">i</span><span class="o">]]</span>
    <span class="p">}</span>
    <span class="n">c</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">similar</span><span class="p">(</span><span class="n">tar</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span>
  <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">max_i</span> <span class="o">=</span> <span class="kp">nil</span>

  <span class="n">rest</span><span class="o">.</span><span class="n">each_with_index</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
    <span class="n">score</span> <span class="o">=</span> <span class="n">tar</span><span class="o">.</span><span class="n">cmp</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">max</span>
      <span class="n">max</span> <span class="o">=</span> <span class="n">score</span>
      <span class="n">max_i</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">end</span>
  <span class="p">}</span>

  <span class="p">{</span><span class="ss">:index</span> <span class="o">=&gt;</span> <span class="n">max_i</span><span class="p">,</span> <span class="ss">:score</span> <span class="o">=&gt;</span> <span class="n">max</span><span class="p">}</span>
<span class="k">end</span>

<span class="n">list</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">99</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">MonoBmp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;bmp/%04d.bmp&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">))</span>
<span class="p">}</span>

<span class="nb">p</span> <span class="n">similar</span><span class="p">(</span><span class="n">list</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">list</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3425/addtag/" class="addtag" id="addtag_3425">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/3425/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/3425/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3425"
  >-</span><span
  class="button yellow"
  id="rating_z_3425"
  >0</span><span 
  class="button green"
  id="rating_p_3425"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20080331044845/http://ja.doukaku.org/comment/3425/">
    1
    reply
  </a>

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/3425/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3426">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3426/">#3426</a>(<script language="JavaScript">print_time(new Date("2007/10/17 08:28 GMT"));</script><noscript>2007/10/17 08:28 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>3425はログイン忘れてました。
pureだと厳しいのでinlineでやったもの。

model name      : Intel(R) Core(TM)2 CPU          6400  @ 2.13GHz

{:index=&gt;33, :score=&gt;394250}
ruby cmp_bmp2.rb  0.19s user 0.10s system 98% cpu 0.293 total

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s2">&quot;rubygems&quot;</span>
<span class="nb">require</span> <span class="s2">&quot;inline&quot;</span>

<span class="k">class</span> <span class="nc">MonoBmp</span>
  <span class="kp">attr_reader</span> <span class="ss">:a</span>

  <span class="n">inline</span> <span class="k">do</span> <span class="o">|</span><span class="n">bldr</span><span class="o">|</span> <span class="n">bldr</span><span class="o">.</span><span class="n">c</span><span class="p">(</span><span class="s1">&#39;</span>
<span class="s1">  int cmp_by_c(const char* a, const char* b, int size){</span>
<span class="s1">    int i, j, r=0;</span>

<span class="s1">    for (i = 0; i &lt; size; i++){</span>
<span class="s1">      char n = a[i]^b[i];</span>
<span class="s1">      for (j = 0; j &lt; 8; j++){</span>
<span class="s1">        r += (((n &gt;&gt; j) &amp; 1) ^ 1);</span>
<span class="s1">      }</span>
<span class="s1">    }</span>
<span class="s1">    return r;</span>
<span class="s1">  }</span>
<span class="s1">  &#39;</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">cmp</span><span class="p">(</span><span class="n">oth</span><span class="p">)</span>
    <span class="n">cmp_by_c</span><span class="p">(</span><span class="vi">@a</span><span class="p">,</span> <span class="n">oth</span><span class="o">.</span><span class="n">a</span><span class="p">,</span> <span class="vi">@a</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">similar</span><span class="p">(</span><span class="n">tar</span><span class="p">,</span> <span class="n">rest</span><span class="p">)</span>
  <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">max_i</span> <span class="o">=</span> <span class="kp">nil</span>

  <span class="n">rest</span><span class="o">.</span><span class="n">each_with_index</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span>
    <span class="n">score</span> <span class="o">=</span> <span class="n">tar</span><span class="o">.</span><span class="n">cmp</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">score</span> <span class="o">&gt;</span> <span class="n">max</span>
      <span class="n">max</span> <span class="o">=</span> <span class="n">score</span>
      <span class="n">max_i</span> <span class="o">=</span> <span class="n">i</span>
    <span class="k">end</span>
  <span class="p">}</span>

  <span class="p">{</span><span class="ss">:index</span> <span class="o">=&gt;</span> <span class="n">max_i</span><span class="p">,</span> <span class="ss">:score</span> <span class="o">=&gt;</span> <span class="n">max</span><span class="p">}</span>
<span class="k">end</span>

<span class="n">list</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">99</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">MonoBmp</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;bmp/%04d.bmp&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">))</span>
<span class="p">}</span>

<span class="nb">p</span> <span class="n">similar</span><span class="p">(</span><span class="n">list</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span> <span class="n">list</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/3426/addtag/" class="addtag" id="addtag_3426">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/3426/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/3426/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3426"
  >-</span><span
  class="button yellow"
  id="rating_z_3426"
  >0</span><span 
  class="button green"
  id="rating_p_3426"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/3425/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20080331044845/http://ja.doukaku.org/comment/3426/root/"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/3426/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6011">
  <p class="banner"><a href="/web/20080331044845/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20080331044845/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/6011/">#6011</a>(<script language="JavaScript">print_time(new Date("2008/03/13 14:41 GMT"));</script><noscript>2008/03/13 14:41 GMT</noscript>)
	
	
	
	[<a href="/web/20080331044845/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>練習がてら書いてみました。
C++ といいつつ、無茶苦茶に環境依存。
コンパイルは Intel C++/Mac で。
icpcem64t -O3 -ip -m64 -march=core2 -axT -openmp -pg -g -o compare-figs compare-figs.cc

100個の比較だと瞬間で終わるので、
1024個の画像から類似度の最も高いペアを選ぶベンチマークして、
4 thread 並列で9秒、
8 thread 並列で8秒弱。
単純な100回比較だと 1.5 ms 相当になります。
残念ながら 4 thread でほぼ頭打ち。
1 thread だとSSE版と通常版で1.5倍くらい差がつくのですが、8 thread だと同じになってしまいます。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;cstdio&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>
<span class="cp">#include &lt;stdint.h&gt;</span>
<span class="cp">#include &lt;tmmintrin.h&gt;</span>
<span class="cp">#include &lt;sys/timeb.h&gt;</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">FigWidth</span><span class="o">=</span><span class="mi">1024</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">FigHeight</span><span class="o">=</span><span class="mi">768</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">union</span> <span class="p">{</span>
  <span class="kr">__m128i</span> <span class="n">b</span><span class="p">;</span>
  <span class="n">uint8_t</span> <span class="n">ui8</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
  <span class="n">uint32_t</span> <span class="n">ui32</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="n">int32_t</span> <span class="n">si32</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
  <span class="n">uint64_t</span> <span class="n">ui64</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
<span class="p">}</span> <span class="n">w128_t</span><span class="p">;</span>

<span class="kr">inline</span> <span class="n">uint64_t</span> <span class="n">bitcount_64</span><span class="p">(</span><span class="n">uint64_t</span> <span class="n">val</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x5555555555555555</span><span class="n">ULL</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mh">0x5555555555555555</span><span class="n">ULL</span><span class="p">);</span>
  <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x3333333333333333</span><span class="n">ULL</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mh">0x3333333333333333</span><span class="n">ULL</span><span class="p">);</span>
  <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="o">&gt;&gt;</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0f0f0f0f0f0f0f0f</span><span class="n">ULL</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mh">0x0f0f0f0f0f0f0f0f</span><span class="n">ULL</span><span class="p">);</span>
  <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x00ff00ff00ff00ff</span><span class="n">ULL</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mh">0x00ff00ff00ff00ff</span><span class="n">ULL</span><span class="p">);</span>
  <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x0000ffff0000ffff</span><span class="n">ULL</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mh">0x0000ffff0000ffff</span><span class="n">ULL</span><span class="p">);</span>
  <span class="n">val</span> <span class="o">=</span> <span class="p">((</span><span class="n">val</span><span class="o">&gt;&gt;</span><span class="mi">32</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x00000000ffffffff</span><span class="n">ULL</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mh">0x00000000ffffffff</span><span class="n">ULL</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">val</span><span class="p">;</span>
<span class="p">};</span>

<span class="kr">inline</span> 
<span class="kt">int</span> <span class="n">compare2</span><span class="p">(</span><span class="n">int64_t</span><span class="o">*</span> <span class="n">map</span><span class="p">,</span> <span class="n">int64_t</span><span class="o">*</span> <span class="n">map2</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">sum</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
      <span class="n">sum</span><span class="o">+=</span><span class="n">bitcount_64</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">map2</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="n">compare_full2</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span> <span class="n">cc</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">ci</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">cj</span><span class="p">,</span> <span class="n">w128_t</span> <span class="o">**</span><span class="n">bitmap</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nFigs</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">ii</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span>
<span class="cp">  #pragma omp parallel for private (sum,ii,i,j) shared (bitmap,cc,ci,cj,size)</span>
  <span class="k">for</span><span class="p">(</span><span class="n">ii</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">ii</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span><span class="n">ii</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">ii</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nFigs</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="mi">8</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">nFigs</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span><span class="o">=</span><span class="n">compare2</span><span class="p">(</span><span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">int64_t</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">bitmap</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span>
                     <span class="k">reinterpret_cast</span><span class="o">&lt;</span><span class="n">int64_t</span> <span class="o">*&gt;</span><span class="p">(</span><span class="n">bitmap</span><span class="p">[</span><span class="n">j</span><span class="p">]),</span><span class="n">size</span><span class="o">*</span><span class="mi">2</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">sum</span><span class="o">&lt;</span><span class="n">cc</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">cc</span><span class="o">=</span><span class="n">sum</span><span class="p">;</span>
          <span class="n">ci</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
          <span class="n">cj</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="cp">  #pragma omp barrier</span>
  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// ===== Compare Using SSE =====</span>
<span class="kt">int</span> <span class="n">compare_full</span><span class="p">(</span><span class="kt">int</span> <span class="o">&amp;</span> <span class="n">cc</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">ci</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&amp;</span> <span class="n">cj</span><span class="p">,</span> <span class="n">w128_t</span> <span class="o">**</span><span class="n">bitmap</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">nFigs</span><span class="p">)</span> 
<span class="p">{</span>
  <span class="n">w128_t</span>  <span class="n">b0</span><span class="p">,</span><span class="n">b1</span><span class="p">,</span><span class="n">b2</span><span class="p">,</span><span class="n">b7</span><span class="p">;</span>
  <span class="n">b0</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">b0</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mh">0x5555555555555555</span><span class="n">ULL</span><span class="p">;</span>
  <span class="n">b1</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">b1</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mh">0x3333333333333333</span><span class="n">ULL</span><span class="p">;</span>
  <span class="n">b2</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">b2</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mh">0x0f0f0f0f0f0f0f0f</span><span class="n">ULL</span><span class="p">;</span>
  <span class="n">b7</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">b7</span><span class="p">.</span><span class="n">ui64</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mh">0x000000ff000000ff</span><span class="n">ULL</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">ii</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">;</span>
  <span class="n">w128_t</span> <span class="n">c</span><span class="p">;</span>
  <span class="kr">__m128i</span> <span class="n">val</span><span class="p">,</span><span class="n">sum</span><span class="p">;</span>
<span class="cp">#pragma omp parallel for private (sum,c,ii,i,j,k,val) shared (bitmap,cc,ci,cj,size)</span>
  <span class="k">for</span><span class="p">(</span><span class="n">ii</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">ii</span><span class="o">&lt;</span><span class="mi">8</span><span class="p">;</span><span class="n">ii</span><span class="o">++</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">ii</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nFigs</span><span class="p">;</span><span class="n">i</span><span class="o">+=</span><span class="mi">8</span><span class="p">){</span>
      <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">nFigs</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">sum</span><span class="o">=</span><span class="n">_mm_xor_si128</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">){</span>
          <span class="n">val</span> <span class="o">=</span><span class="n">_mm_xor_si128</span><span class="p">(</span><span class="n">bitmap</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">k</span><span class="p">].</span><span class="n">b</span><span class="p">,</span><span class="n">bitmap</span><span class="p">[</span><span class="n">j</span><span class="p">][</span><span class="n">k</span><span class="p">].</span><span class="n">b</span><span class="p">);</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_add_epi8</span><span class="p">(</span> <span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">b0</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">val</span><span class="p">),</span>
                            <span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">b0</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">_mm_srli_epi64</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="mi">1</span><span class="p">)));</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_add_epi8</span><span class="p">(</span><span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">b1</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">_mm_srli_epi64</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="mi">2</span><span class="p">)),</span>
                           <span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">b1</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">val</span><span class="p">));</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_add_epi8</span><span class="p">(</span><span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">b2</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">_mm_srli_epi64</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="mi">4</span><span class="p">)),</span>
                           <span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">b2</span><span class="p">.</span><span class="n">b</span><span class="p">,</span><span class="n">val</span><span class="p">));</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_add_epi8</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">_mm_srli_epi64</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="mi">8</span><span class="p">));</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_hadd_epi16</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_hadd_epi16</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_hadd_epi16</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
          <span class="n">val</span><span class="o">=</span><span class="n">_mm_and_si128</span><span class="p">(</span><span class="n">val</span><span class="p">,</span><span class="n">b7</span><span class="p">.</span><span class="n">b</span><span class="p">);</span>
          <span class="n">sum</span><span class="o">=</span><span class="n">_mm_add_epi32</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span><span class="n">val</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="n">c</span><span class="p">.</span><span class="n">b</span><span class="o">=</span><span class="n">sum</span><span class="p">;</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">ui32</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;</span><span class="n">cc</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cc</span><span class="o">=</span><span class="n">c</span><span class="p">.</span><span class="n">ui32</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="n">ci</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
        <span class="n">cj</span><span class="o">=</span><span class="n">j</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="p">}</span>
<span class="cp">  #pragma omp barrier</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="c">// ===== Test Code =====</span>
<span class="kt">int</span> <span class="n">fillrandom</span><span class="p">(</span><span class="n">w128_t</span><span class="o">*</span> <span class="n">map</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">size</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
      <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">ui32</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="p">(((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)(</span><span class="n">rand</span><span class="p">()))</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">rand</span><span class="p">()</span> <span class="o">&amp;</span> <span class="mh">0xffff</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">w128_t</span> <span class="o">**</span><span class="n">bitmap</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">size</span><span class="o">=</span><span class="n">FigWidth</span><span class="o">*</span><span class="n">FigHeight</span><span class="o">/</span><span class="mi">128</span><span class="p">;</span>


  <span class="kt">int</span> <span class="n">nFigs</span><span class="o">=</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>

  <span class="n">bitmap</span><span class="o">=</span><span class="k">new</span> <span class="n">w128_t</span><span class="o">*</span> <span class="p">[</span><span class="n">nFigs</span><span class="p">]</span> <span class="p">;</span>
  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nFigs</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bitmap</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="n">w128_t</span> <span class="p">[</span><span class="n">size</span><span class="p">];</span>
    <span class="n">fillrandom</span><span class="p">(</span><span class="n">bitmap</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">size</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="kt">int</span> <span class="n">cc</span><span class="p">,</span><span class="n">ci</span><span class="p">,</span><span class="n">cj</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">timeb</span> <span class="n">t0</span><span class="p">,</span><span class="n">t1</span><span class="p">,</span><span class="n">t2</span><span class="p">;</span>
  <span class="n">ftime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t0</span><span class="p">);</span>
  <span class="n">cc</span><span class="o">=</span><span class="n">FigWidth</span><span class="o">*</span><span class="n">FigHeight</span><span class="p">;</span>  <span class="n">ci</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>  <span class="n">cj</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span> 

  <span class="n">compare_full</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span><span class="n">ci</span><span class="p">,</span><span class="n">cj</span><span class="p">,</span><span class="n">bitmap</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">nFigs</span><span class="p">);</span>
  <span class="n">ftime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t1</span><span class="p">);</span>
  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;SSSE3:   %d : %d %d / %10.3f sec</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">cc</span><span class="p">,</span><span class="n">ci</span><span class="p">,</span><span class="n">cj</span><span class="p">,</span>
      <span class="mf">0.001</span><span class="o">*</span><span class="p">((</span><span class="n">t1</span><span class="p">.</span><span class="n">time</span><span class="o">-</span><span class="n">t0</span><span class="p">.</span><span class="n">time</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="o">+</span><span class="p">(</span><span class="n">t1</span><span class="p">.</span><span class="n">millitm</span><span class="o">-</span><span class="n">t0</span><span class="p">.</span><span class="n">millitm</span><span class="p">)));</span>
  <span class="n">cc</span><span class="o">=</span><span class="n">FigWidth</span><span class="o">*</span><span class="n">FigHeight</span><span class="p">;</span>  <span class="n">ci</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span>  <span class="n">cj</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span> 
  <span class="n">compare_full2</span><span class="p">(</span><span class="n">cc</span><span class="p">,</span><span class="n">ci</span><span class="p">,</span><span class="n">cj</span><span class="p">,</span><span class="n">bitmap</span><span class="p">,</span><span class="n">size</span><span class="p">,</span><span class="n">nFigs</span><span class="p">);</span>
  <span class="n">ftime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">t2</span><span class="p">);</span>
  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Normal: %d : %d %d / %10.3f sec</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">cc</span><span class="p">,</span><span class="n">ci</span><span class="p">,</span><span class="n">cj</span><span class="p">,</span>
      <span class="mf">0.001</span><span class="o">*</span><span class="p">((</span><span class="n">t2</span><span class="p">.</span><span class="n">time</span><span class="o">-</span><span class="n">t1</span><span class="p">.</span><span class="n">time</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="o">+</span><span class="p">(</span><span class="n">t2</span><span class="p">.</span><span class="n">millitm</span><span class="o">-</span><span class="n">t1</span><span class="p">.</span><span class="n">millitm</span><span class="p">)));</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20080331044845/http://ja.doukaku.org/comment/6011/addtag/" class="addtag" id="addtag_6011">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20080331044845/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20080331044845/http://ja.doukaku.org/comment/6011/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20080331044845/http://ja.doukaku.org/comment/6011/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6011"
  >-</span><span
  class="button yellow"
  id="rating_z_6011"
  >0</span><span 
  class="button green"
  id="rating_p_6011"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20080331044845/http://ja.doukaku.org/37/reply_to/6011/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20080331044845if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20080331044845/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20080331044845/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20080331044845/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20080331044845/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20080331044845/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20080331044845/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20080331044845/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20080331044845/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20080331044845/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20080331044845/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20080331044845im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20080331044845/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20080331044845/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20080331044845/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20080331044845/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20080331044845/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20080331044845/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20080331044845/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20080331044845/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20080331044845im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20080331044845/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20080331044845/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20080331044845/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20080331044845js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 4:48:45 Mar 31, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:50:52 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
