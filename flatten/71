
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
B+木のノード削除
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081120160140cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081120160140cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081120160140cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20081120160140/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081120160140/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081120160140js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081120160140js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081120160140js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081120160140js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app0.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/71\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "20";
var displayMonth = "Nov";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/71/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081120160140" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080229025510/http://ja.doukaku.org/71/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="29 Feb 2008"><strong>FEB</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 16:01:40 Nov 20, 2008">NOV</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Dec
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080229025510/http://ja.doukaku.org/71/flatten/" title="2:55:10 Feb 29, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 16:01:40 Nov 20, 2008">20</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20070513180302/http://ja.doukaku.org/71/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 May 2007"><strong>2007</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 16:01:40 Nov 20, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081120160140*/http://ja.doukaku.org/71/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>4 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 20 Nov 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:10:010000000010_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081120160140/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
[topic]
<a href="/web/20081120160140/http://ja.doukaku.org/71/">B+木のノード削除</a>
</h2>

    





<div class="comment" id="comment3462">
  <p class="banner"><a href="/web/20081120160140/http://ja.doukaku.org/user/474/" target="_top">moxth</a>

	
	&nbsp;
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3462/">#3462</a>(<script language="JavaScript">print_time(new Date("2007/10/18 21:04 GMT"));</script><noscript>2007/10/18 21:04 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffbf7f;">-4/8=-0.50</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>B+木(B+Tree、B-Plus-Treeなど)とは、B木を拡張した平衡木です。
元のB木は枝や葉に関係なくキーとデータの組が入りますが、
B+木では葉に全てのキーとデータが入り、ルートから葉までの
枝には索引と分岐しか入らず、B木より空間効率が良いアルゴリズムです。
DBなどでよく使われますが、Web上のサンプルとしてはあまり見かけません。

問題：
B+木の検索や追加は比較的簡単なので、本題では削除のみに注目します。
B+木のルート(根)とキーを与えると、キーに一致するB+木中の要素を、
要素の順序と木の平衡を保ちながら削除し、更新したB+木を返す関数を
作ってください。(入力するB+木のサンプルは後述します)

条件：
・B+木としては最小のオーダー3の構造を対象にします。
  「オーダー3」とは、葉の要素数が2～3、枝の分岐の数も
  2～3の範囲を取るものです。(枝の索引数は分岐の数-1)
  ただしルートのみは、B+木全体の要素の数が3以下の場合、
  葉の要素の数が2未満になりえます。(例を見てください)
・要素や索引のキーは数字とし、データは省略してかまいません。
・B+木そのものやDB以外のライブラリならば使用してかまいません。
・結果で得られるB+木は入力の複製でもかまいません。(関数型言語への配慮)
・ノードの索引の更新は必ずしも存在する要素のキーと同期させる必要はありません。
  ただし検索に支障のない範囲である事。
・関数に与えたキーがどの要素とも一致せず、削除に失敗する場合は、
  NULLなどの生存ノードと区別できる値を返してください。

例：
問題の理解を促すための例示としてB+木をS式のリストで表します。
※この例の結果と違っていても平衡が保てていればOKです。
リストのタグの意味 … L=葉, N=枝(ノード), B=分岐, K=索引, 数字=キー

例) 1から7までのB+木
(N (K 3 6)        ; 検索に使われる索引は、middleとright各々の最小キーがあれば良い
   (B (L 1 2)     ; left    
      (L 3 4 5)   ; middle (分岐と葉の数は最小2、最大3つです)
      (L 6 7)))   ; right  
1を削除
=&gt;(N (K 4 6)      ; middleの最小キーが変化したので索引も更新します
     (B (L 2 3)   ; middleの最小キーをもらって平衡を保ちます
        (L 4 5)
        (L 6 7)))
さらに2を削除
=&gt;(N (K 6)        ; middleの最小キーが変化したので索引も更新します
     (B (L 3 4 5) ; 不完全なleft(またはmiddle)を削除し統合します
        (L 6 7)))
さらに6を削除
=&gt;(N (K 5)
     (B (L 3 4)
        (L 5 7)))
さらに4を削除
=&gt;(L 3 5 7)       ; 葉の数を保てなくなるので葉のみになります
さらに3と5を削除
=&gt;(L 5 7) 
=&gt;(L 7)           ; ルートのみ葉の数が2未満になりえます

入力するB+木のサンプル：
1から81までのB+木を用意しました。
本題はこれらを全て削除して要素数をゼロにできればOKです。
※S式のリストで出してますが、実際のデータ構造は何でもいいです。
(N (K 28 55)
   (B (N (K 10 19)
         (B (N (K 4 7)
               (B (L  1  2  3)
                  (L  4  5  6)
                  (L  7  8  9)))
            (N (K 13 16)
               (B (L 10 11 12)
                  (L 13 14 15)
                  (L 16 17 18)))
            (N (K 22 25)
               (B (L 19 20 21)
                  (L 22 23 24)
                  (L 25 26 27)))))
      (N (K 37 46)
         (B (N (K 31 34)
               (B (L 28 29 30)
                  (L 31 32 33)
                  (L 34 35 36)))
            (N (K 40 43)
               (B (L 37 38 39)
                  (L 40 41 42)
                  (L 43 44 45)))
            (N (K 49 52)
               (B (L 46 47 48)
                  (L 49 50 51)
                  (L 52 53 54)))))
      (N (K 64 73)
         (B (N (K 58 61)
               (B (L 55 56 57)
                  (L 58 59 60)
                  (L 61 62 63)))
            (N (K 67 70)
               (B (L 64 65 66)
                  (L 67 68 69)
                  (L 70 71 72)))
            (N (K 76 79)
               (B (L 73 74 75)
                  (L 76 77 78)
                  (L 79 80 81)))))))
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3462/addtag/" class="addtag" id="addtag_3462">Tags</a>:
	
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/B%2BTree/">B+Tree</a>
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/B%2B%E6%9C%A8/">B+木</a>
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/B-Plus-Tree/">B-Plus-Tree</a>
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/S%E5%BC%8F/">S式</a>
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/%E5%89%8A%E9%99%A4/">削除</a>
    
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffbf7f;"
  >-4/8=-0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3462"
  >-</span><span
  class="button yellow"
  id="rating_z_3462"
  >0</span><span 
  class="button green"
  id="rating_p_3462"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081120160140/http://ja.doukaku.org/71/reply_to/3462/">
  reply
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20081120160140/http://ja.doukaku.org/71/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Flatten</h2>
<a href="/web/20081120160140/http://ja.doukaku.org/71/nested/">Nested</a>
<a href="/web/20081120160140/http://ja.doukaku.org/71/">Hidden</a> 


  
  <br/>

  
  




<div class="comment" id="comment3631">
  <p class="banner"><a href="/web/20081120160140/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3631/">#3631</a>(<script language="JavaScript">print_time(new Date("2007/10/31 13:50 GMT"));</script><noscript>2007/10/31 13:50 GMT</noscript>)
	
	
	
	[<a href="/web/20081120160140/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。手続き的に。<br/><br/>81&nbsp;までの自然数をランダムに与えて、さいごまですべて削除できることを確認しました。
	</div>
	
	<p class="link">
	  see: <a href="/web/20081120160140/http://pfp7.cc.yamaguchi-u.ac.jp/~ichikawa/lecture/yamanashi-u/01/resume/node10.html">データベースシステム (後半) - 物理的な格納方式 - B+-Tree</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88</pre></td><td class="code"><div class="highlight"><pre>| removeNode tree |

removeNode := [:root :elem |
    | node branch left middle right target neighbor merged keys
     bIndex eIndex path branchOf keysOf fixKeysOf |

    root first == #L
        ifTrue: [
            eIndex := root indexOf: elem.
            eIndex = 0 ifTrue: [^nil] ifFalse: [root := root copyWithoutIndex: eIndex]]
        ifFalse: [
            path := OrderedCollection new.
            node := root.
            keysOf := [:val | val first == #L ifTrue: [nil] ifFalse: [val second]].
            branchOf := [:val | val first == #L ifTrue: [val] ifFalse: [val third]].
            fixKeysOf := [:nde |
                (keysOf value: nde) ifNotNilDo: [:kys |
                    kys become: {#K}, (((branchOf value: nde) allButFirst: 2) collect: [:br |
                        [br first == #L] whileFalse: [br := (branchOf value: br) second].
                        br second])]].
            [   keys := keysOf value: node.
                keys ifNil: [target := node] ifNotNil: [
                    branch := branchOf value: node.
                    bIndex := keys findLast: [:key | (key isSymbol ifTrue: [0] ifFalse: [key]) &lt;= elem].
                    bIndex = 0 ifTrue: [^nil].
                    target := branch at: bIndex + 1].
                target first = #L] whileFalse: [path add: node. node := target].

            eIndex := target indexOf: elem ifAbsent: [^nil].
            target become: (target copyWithoutIndex: eIndex).
            (bIndex &gt; 2 and: [eIndex = 2]) ifTrue: [keys at: bIndex put: target second].

            [   left := branch second.
                middle := branch size &gt; 2 ifTrue: [branch third] ifFalse: [nil].
                right := branch size = 4 ifTrue: [branch fourth] ifFalse: [nil].

                (branchOf value: target) size = 2 ifTrue: [
                    neighbor := target caseOf: {[left]-&gt;[middle]. [middle]-&gt;[left]. [right]-&gt;[middle]}.
                    merged := target == left
                        ifTrue: [(branchOf value: target), (branchOf value: neighbor) allButFirst]
                        ifFalse: [(branchOf value: neighbor), (branchOf value: target) allButFirst].
                    (branchOf value: neighbor) size = 3
                        ifTrue: [
                            (branchOf value: neighbor) become: merged.
                            branch become: (branch copyWithout: target)]
                        ifFalse: [
                            target == left ifTrue: [target := neighbor flag: (neighbor := target)].
                            (branchOf value: target) become: ({target first}, (merged allButFirst: 3)).
                            fixKeysOf value: target.
                            (branchOf value: neighbor) become: (merged allButLast: 2)].
                        fixKeysOf value: neighbor].
                fixKeysOf value: node.
                branch size = 2 ifFalse: [false] ifTrue: [
                    path ifEmpty: [node become: branch last. false] ifNotEmpty: [
                        target := node.
                        node := path removeLast.
                        branch := node third.
                        true]]
            ] whileTrue].
    root].

World findATranscript: nil.
tree := #(N (K 28 55)
   (B (N (K 10 19)
         (B (N (K 4 7)
               (B (L  1  2  3) (L  4  5  6) (L  7  8  9)))
            (N (K 13 16)
               (B (L 10 11 12) (L 13 14 15) (L 16 17 18)))
            (N (K 22 25)
               (B (L 19 20 21) (L 22 23 24) (L 25 26 27)))))
      (N (K 37 46)
         (B (N (K 31 34)
               (B (L 28 29 30) (L 31 32 33) (L 34 35 36)))
            (N (K 40 43)
               (B (L 37 38 39) (L 40 41 42) (L 43 44 45)))
            (N (K 49 52)
               (B (L 46 47 48) (L 49 50 51) (L 52 53 54)))))
      (N (K 64 73)
         (B (N (K 58 61)
               (B (L 55 56 57) (L 58 59 60) (L 61 62 63)))
            (N (K 67 70)
               (B (L 64 65 66) (L 67 68 69) (L 70 71 72)))
            (N (K 76 79)
               (B (L 73 74 75) (L 76 77 78) (L 79 80 81))))))).

(1 to: 81) asArray shuffled do: [:each |
    tree := removeNode value: tree value: each.
    Transcript cr; show: each asString, &#39;, &#39;, (tree printString copyWithout: $#)]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3631/addtag/" class="addtag" id="addtag_3631">Tags</a>:
	
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20081120160140/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20081120160140/http://ja.doukaku.org/comment/3631/download/">
		download code
      </a>]
	  [<a href="/web/20081120160140/http://ja.doukaku.org/comment/3631/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3631"
  >-</span><span
  class="button yellow"
  id="rating_z_3631"
  >0</span><span 
  class="button green"
  id="rating_p_3631"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081120160140/http://ja.doukaku.org/71/reply_to/3631/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3757">
  <p class="banner"><a href="/web/20081120160140/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3757/">#3757</a>(<script language="JavaScript">print_time(new Date("2007/11/08 10:26 GMT"));</script><noscript>2007/11/08 10:26 GMT</noscript>)
	
	
	
	[<a href="/web/20081120160140/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>厳密にB+Treeと呼べるのかはわかりませんが
それっぽい感じにはなっていると思います。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">B</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;(B </span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">])</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">   &#39;</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">N</span><span class="p">):</span>
      <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">delete0</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
          <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
          <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
          <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">b</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
          <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
      <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
          <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
          <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">pop</span><span class="p">())</span>
          <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">L</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;(L </span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;</span><span class="si">%2d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">])</span>

  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">self</span>

<span class="k">class</span> <span class="nc">K</span><span class="p">(</span><span class="nb">list</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;(K </span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="s">&#39; &#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;</span><span class="si">%d</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">N</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="n">k</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span>

  <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;(N </span><span class="si">%s</span><span class="se">\n</span><span class="s">   </span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">k</span><span class="p">,</span> <span class="nb">str</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">)</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">   &#39;</span><span class="p">))</span>

  <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">delete0</span><span class="p">(</span><span class="n">k</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="bp">self</span>

  <span class="k">def</span> <span class="nf">delete0</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">k</span><span class="o">+</span><span class="p">[</span><span class="mh">0x100000000</span><span class="p">]):</span>
      <span class="k">if</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">j</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
        <span class="k">break</span>

  <span class="k">def</span> <span class="nf">getk</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">L</span><span class="p">):</span>
      <span class="k">return</span> <span class="n">K</span><span class="p">([</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">:]])</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="k">def</span> <span class="nf">getmin</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">L</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">n</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">getmin</span><span class="p">(</span><span class="n">n</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
      <span class="k">return</span> <span class="n">K</span><span class="p">([</span><span class="n">getmin</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">b</span><span class="p">[</span><span class="mi">1</span><span class="p">:]])</span>

<span class="k">def</span> <span class="nf">mk_data</span><span class="p">():</span>
  <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">N</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">B</span><span class="p">([</span><span class="n">L</span><span class="p">([</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">j</span><span class="o">+</span><span class="mi">9</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]))</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">9</span><span class="p">)]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">r</span><span class="p">:</span>
    <span class="n">i</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
  <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">N</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">B</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="p">:</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="o">+</span><span class="mi">3</span><span class="p">]))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">r</span><span class="p">:</span>
    <span class="n">i</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
  <span class="n">r</span> <span class="o">=</span> <span class="n">N</span><span class="p">(</span><span class="n">b</span><span class="o">=</span><span class="n">B</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
  <span class="n">r</span><span class="o">.</span><span class="n">k</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">getk</span><span class="p">()</span>
  <span class="k">return</span> <span class="n">r</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
  <span class="n">root</span> <span class="o">=</span> <span class="n">mk_data</span><span class="p">()</span>
  <span class="k">print</span> <span class="n">root</span><span class="p">,</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
    <span class="n">root</span> <span class="o">=</span> <span class="n">root</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">&#39;del = </span><span class="si">%d</span><span class="se">\n</span><span class="si">%s</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">root</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
  <span class="k">from</span> <span class="nn">random</span> <span class="k">import</span> <span class="n">shuffle</span>

  <span class="n">test</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">82</span><span class="p">))</span>
  <span class="n">test</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">81</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
  <span class="n">l</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">82</span><span class="p">)</span>
  <span class="n">shuffle</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
  <span class="n">test</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3757/addtag/" class="addtag" id="addtag_3757">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081120160140/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20081120160140/http://ja.doukaku.org/comment/3757/download/">
		download code
      </a>]
	  [<a href="/web/20081120160140/http://ja.doukaku.org/comment/3757/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3757"
  >-</span><span
  class="button yellow"
  id="rating_z_3757"
  >0</span><span 
  class="button green"
  id="rating_p_3757"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081120160140/http://ja.doukaku.org/71/reply_to/3757/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment3832">
  <p class="banner"><a href="/web/20081120160140/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3832/">#3832</a>(<script language="JavaScript">print_time(new Date("2007/11/11 01:20 GMT"));</script><noscript>2007/11/11 01:20 GMT</noscript>)
	
	
	
	[<a href="/web/20081120160140/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffcfcf;">-3/3=-1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>CPANのBtrees.pmを使ってお手軽に。
削除ごとのTreeの様子は、YAMLで表示されます。
Dan the CPAN Monger</pre>
	</div>
	
	<p class="link">
	  see: <a href="/web/20081120160140/http://search.cpan.org/perldoc?Btrees">Btrees</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Btrees</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">YAML::</span><span class="n">Syck</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$nodes</span> <span class="o">=</span> <span class="nb">shift</span> <span class="o">||</span> <span class="mi">8</span><span class="p">;</span>
<span class="k">sub </span><span class="nf">comp</span><span class="p">{</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span>
<span class="k">my</span> <span class="p">(</span><span class="nv">$tree</span><span class="p">,</span> <span class="nv">$node</span><span class="p">);</span>
<span class="p">(</span><span class="nv">$tree</span><span class="p">,</span> <span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="n">bal_tree_add</span><span class="p">(</span><span class="nv">$tree</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="o">\&amp;</span><span class="n">comp</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$nodes</span><span class="p">);</span>

<span class="k">for</span> <span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$nodes</span><span class="p">){</span>
    <span class="p">(</span><span class="nv">$tree</span><span class="p">,</span> <span class="nv">$node</span><span class="p">)</span> <span class="o">=</span> <span class="n">bal_tree_del</span><span class="p">(</span><span class="nv">$tree</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="o">\&amp;</span><span class="n">comp</span><span class="p">);</span>
    <span class="k">print</span> <span class="nn">YAML::Syck::</span><span class="n">Dump</span><span class="p">(</span><span class="nv">$tree</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/3832/addtag/" class="addtag" id="addtag_3832">Tags</a>:
	
    
    <a href="/web/20081120160140/http://ja.doukaku.org/tag/CPAN/">CPAN</a>
    
	&nbsp;

	
      [<a href="/web/20081120160140/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20081120160140/http://ja.doukaku.org/comment/3832/download/">
		download code
      </a>]
	  [<a href="/web/20081120160140/http://ja.doukaku.org/comment/3832/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffcfcf;"
  >-3/3=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3832"
  >-</span><span
  class="button yellow"
  id="rating_z_3832"
  >0</span><span 
  class="button green"
  id="rating_p_3832"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081120160140/http://ja.doukaku.org/71/reply_to/3832/">
  reply
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment4708">
  <p class="banner"><a href="/web/20081120160140/http://ja.doukaku.org/user/560/" target="_top">ihag</a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081120160140/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081120160140im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081120160140/http://ja.doukaku.org/comment/4708/">#4708</a>(<script language="JavaScript">print_time(new Date("2007/12/09 15:30 GMT"));</script><noscript>2007/12/09 15:30 GMT</noscript>)
	
	
	
	[<a href="/web/20081120160140/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #9fff9f;">6/6=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Rubyで．追加・削除・検索を実装してみました．
お題にて示されたデータ構造に対し，ランダムに1～81を削除して最後まで削除できることを確認したほか，ランダムに0～10000の要素を追加したデータ構造を用意し，矛盾なく最後まで削除できることを確認しました．</p>
<div class="section">
<h1><a id="id1" name="id1">概要</a></h1>
<p>今回，B+Treeのアルゴリズムを実装したクラスBPlusTreeを作成しました．
まず，このクラスの簡単な使い方について説明します．</p>
<div class="section">
<h2><a id="b-tree" name="b-tree">B+Treeオブジェクトの生成</a></h2>
<p>B+Treeオブジェクト生成の例:</p>
<pre class="literal-block">
btree = BPlusTree.new
</pre>
<p>内部節(以下Branch)の持てる分岐の数(最大分岐数)と，葉(以下Leaf)の持てる要素の数は，B+Treeの初期化時に任意の数を設定することができます．
この時，各Branchの保持する最小の分岐数は，(最大分岐数 / 2) の切り上げの数となります．最小の要素数についても同様です．</p>
<p>最大分岐数と最大要素数を指定する場合の例:</p>
<pre class="literal-block">
# Branchの最大分岐数5, Leafの最大要素数3
btree = BPlusTree.new({:maxbranch =&gt; 5, :maxentry =&gt; 3})
</pre>
</div>
<div class="section">
<h2><a id="id2" name="id2">追加・削除・検索</a></h2>
<p>追加・削除・検索の例:</p>
<pre class="literal-block">
btree = BPlusTree.new

# キーとデータを追加
btree.add(10, &quot;value10&quot;)
btree.add(11, &quot;value11&quot;)
btree.add(12, &quot;value12&quot;)
btree.add(13, &quot;value13&quot;)
btree.add(14, &quot;value14&quot;)

# 削除
btree.delete(13)

# 検索 (値取得)
pp btree.get(10)  # =&gt; &quot;value10&quot;
pp btree.get(13)  # =&gt; nil (要素が無いので)

# 表示
btree.disp        # =&gt; 以下を表示
                  # - Branch(root) [(10), 12]
                  #   - Leaf [10, 11]
                  #   - Leaf [12, 14, 15]

btree.disp(true)  # =&gt; 第一引数により，Leafのデータを表示するか切り替え
                  # - Branch(root) [(10), 12]
                  #   - Leaf [10:value10, 11:value11]
                  #   - Leaf [12:value12, 14:value14, 15:value15]

# フラットな配列に変換 (全件探索による)
pp btree.to_a     # =&gt; [[10, &quot;value10&quot;], [11, &quot;value11&quot;],
                  #     [12, &quot;value12&quot;], [14, &quot;value14&quot;], [15, &quot;value15&quot;]
</pre>
<p>dispメソッドによる表示結果では，Branchの一番目のキーを (...) で括っています．これは「(検索アルゴリズムには影響を及ぼさない)一番目のキーである」程度の控えめな気持ちを表しています．要するに，あまり意味はありません．</p>
</div>
<div class="section">
<h2><a id="id3" name="id3">その他</a></h2>
<p>ppライブラリ用にpretty_printメソッドを再定義していますので，ppでそれなりに見やすい出力を得ることができます．</p>
<p>pp btreeの出力例:</p>
<pre class="literal-block">
#&lt;BPlusTree:0x402e7a58
 &#64;tree=
  #&lt;BPlusTree::BPlusTree:0x402e79cc
   &#64;param={:maxbranch=&gt;3, :minentry=&gt;2, :minbranch=&gt;2, :maxentry=&gt;3},
   &#64;root=
    #&lt;B+T::Branch key:[1, 5] branch:
     [#&lt;B+T::Branch key:[1, 3] branch:
       [#&lt;B+T::Leaf key:[1, 2] data:[&quot;value01&quot;, &quot;value02&quot;]&gt;,
        #&lt;B+T::Leaf key:[3, 4] data:[&quot;value03&quot;, &quot;value04&quot;]&gt;]&gt;,
      #&lt;B+T::Branch key:[5, 7] branch:
       [#&lt;B+T::Leaf key:[5, 6] data:[&quot;value05&quot;, &quot;value06&quot;]&gt;,
        #&lt;B+T::Leaf key:[7, 8, 9] data:[&quot;value07&quot;, &quot;value08&quot;, &quot;value09&quot;]&gt;]&gt;]&gt;&gt;&gt;
</pre>
<div class="section">
<h3><a id="new-from-assoc" name="new-from-assoc">new_from_assocクラスメソッド</a></h3>
<p>配列により組み上げた任意の構造から，BPlusTreeオブジェクトを得るために，new_from_assocクラスメソッドを定義しています．これは，本お題を達成する上で必要だったために実装しました．</p>
<p>最初はB+Treeのアルゴリズムを素直に使ってキー1～81を順番に追加してゆき，お題にて提示された構造を作ろうとしましたが，B+Treeの追加アルゴリズムは「追加時に最大要素数(分岐数)以上になった場合，2分割してそれぞれをB+Treeに加える」というものですので，詰め方を工夫しないと充填率100%とはならず，隙間が空いてしまいます．今回は，配列で構造を作った後にB+Treeオブジェクトを組み上げるメソッドを定義して対応しました．</p>
<p>new_from_assocクラスメソッドの使用例:</p>
<pre class="literal-block">
assoc = [[:branch, [1, 4],
          [[:leaf, [1, 2, 3], [&quot;value01&quot;, &quot;value02&quot;, &quot;value03&quot;]],
           [:leaf, [4, 5, 6], [&quot;value04&quot;, &quot;value05&quot;, &quot;value06&quot;]]]]]
btree = BPlusTree.new_from_assoc(assoc)
btree.disp  # =&gt; 以下を表示
            # - Branch(root) [(1), 4]
            #   - Leaf [1, 2, 3]
            #   - Leaf [4, 5, 6]
</pre>
</div>
</div>
</div>
<div class="section">
<h1><a id="id4" name="id4">クラス説明</a></h1>
<div class="section">
<h2><a id="bplustree-bplustree" name="bplustree-bplustree">BPlusTree::BPlusTree</a></h2>
<p>使用者が直接操作するための入り口となるクラスです．add, delete, get, disp, to_aメソッドなどを定義しています．ルートとなるBranchまたはLeafへの参照を保持しています．</p>
<p>また，B+Treeではルートとなるノードについては特別扱いをする必要がありますが，そうした操作も本クラスで実装しています．</p>
</div>
<div class="section">
<h2><a id="bplustree-bplustree-node" name="bplustree-bplustree-node">BPlusTree::BPlusTree::Node</a></h2>
<p>Leaf, Branchクラスの基底クラスです．共通のメソッドやアクセサメソッドを定義しています．このクラスのインスタンスが作られることはありません．</p>
</div>
<div class="section">
<h2><a id="bplustree-bplustree-leaf" name="bplustree-bplustree-leaf">BPlusTree::BPlusTree::Leaf</a></h2>
<p>Leafのクラスです．add, deleteなど基本的なメソッドを定義しているほか，自身の分割(split)や，兄弟のLeafと要素を配分(balance)，兄弟のLeafを自身に併合(integrate)などのメソッドも定義しています．これらのメソッドは，BPlusTree::BranchクラスやBPlusTree::BPlusTreeクラスから呼ばれます．</p>
</div>
<div class="section">
<h2><a id="bplustree-bplustree-branch" name="bplustree-bplustree-branch">BPlusTree::BPlusTree::Branch</a></h2>
<p>Branchのクラスです．Leafと同様，Branchの操作に特有なメソッドを定義しています．</p>
</div>
<div class="section">
<h2><a id="bplustree" name="bplustree">BPlusTree</a></h2>
<p>BPlusTree::BPlusTreeクラスのインスタンスを1つだけ保持し，add, delete, get, disp, to_aメソッドを委譲しています．</p>
<p>本来は特に必要ないクラスですが，BPlusTree::BPlusTree.newなどと打つよりBPlusTree.newとできた方が何かと気分がよいために定義してあります．</p>
</div>
</div>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/ruby</span>
<span class="nb">require</span> <span class="s1">&#39;forwardable&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;pp&#39;</span>

<span class="c1">#</span>
<span class="c1"># BPlusTree class</span>
<span class="c1">#</span>
<span class="k">class</span> <span class="nc">BPlusTree</span>
  <span class="kp">extend</span> <span class="no">Forwardable</span>
  <span class="n">def_delegators</span> <span class="p">:</span><span class="vi">@tree</span><span class="p">,</span> <span class="ss">:root</span><span class="p">,</span> <span class="ss">:add</span><span class="p">,</span> <span class="ss">:delete</span><span class="p">,</span> <span class="ss">:get</span><span class="p">,</span> <span class="ss">:to_a</span><span class="p">,</span> <span class="ss">:disp</span>
  <span class="kp">attr_accessor</span> <span class="ss">:tree</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="vi">@tree</span> <span class="o">=</span> <span class="no">BPlusTree</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nc">BPlusTree</span><span class="o">.</span><span class="nf">new_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">,</span> <span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
    <span class="n">ret</span> <span class="o">=</span> <span class="kp">new</span><span class="p">(</span><span class="n">param</span><span class="p">)</span>
    <span class="n">ret</span><span class="o">.</span><span class="n">tree</span> <span class="o">=</span> <span class="no">BPlusTree</span><span class="o">.</span><span class="n">new_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">,</span> <span class="n">param</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">ret</span>
  <span class="k">end</span>


  <span class="k">class</span> <span class="nc">BPlusTree</span>
    <span class="kp">attr_accessor</span> <span class="ss">:root</span><span class="p">,</span> <span class="ss">:param</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">param</span> <span class="o">=</span> <span class="n">param</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="no">Leaf</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">param</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nc">BPlusTree</span><span class="o">.</span><span class="nf">new_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">,</span> <span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="kp">new</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">.</span><span class="n">create_bptree_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="n">ret</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="n">increase_height</span> <span class="k">if</span> <span class="n">ret</span> <span class="o">==</span> <span class="ss">:need_split</span>
      <span class="k">return</span> <span class="n">key</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">ret</span><span class="p">,</span> <span class="n">di</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">ret</span> <span class="o">==</span> <span class="ss">:need_balance</span> <span class="ow">and</span> <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">suitable_root?</span> <span class="k">then</span>
        <span class="n">decrease_height</span>
      <span class="k">end</span>
      <span class="k">return</span><span class="p">((</span><span class="n">di</span><span class="o">.</span><span class="n">nil?</span><span class="p">)</span> <span class="p">?</span> <span class="kp">nil</span> <span class="p">:</span> <span class="n">key</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">to_a</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">to_a</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">disp</span><span class="p">(</span><span class="n">with_data</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">disp</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">with_data</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">create_bptree_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">)</span>
      <span class="k">raise</span> <span class="s1">&#39;Multiple root node occured&#39;</span> <span class="k">if</span> <span class="n">assoc</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span>
      <span class="nb">type</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">assoc</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
      <span class="n">root</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:leaf</span> <span class="o">=&gt;</span> <span class="no">Leaf</span><span class="p">,</span> <span class="ss">:branch</span> <span class="o">=&gt;</span> <span class="no">Branch</span><span class="p">}</span><span class="o">[</span><span class="nb">type</span><span class="o">].</span><span class="n">new_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
      <span class="n">root</span><span class="o">.</span><span class="n">connect_nextp</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span>
      <span class="k">return</span> <span class="nb">self</span>
    <span class="k">end</span>


    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">increase_height</span>
      <span class="c1"># create a new root</span>
      <span class="n">newroot</span> <span class="o">=</span> <span class="no">Branch</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">param</span><span class="p">)</span>

      <span class="c1"># connect children to new root</span>
      <span class="n">lbrother</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">root</span>
      <span class="n">bbrother</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">split</span>
      <span class="p">(</span><span class="n">newroot</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">lbrother</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span>  <span class="ow">and</span>
       <span class="n">newroot</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">bbrother</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span><span class="p">)</span> <span class="ow">or</span>
        <span class="k">raise</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#increase_height: Internal error&quot;</span><span class="p">)</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">newroot</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">decrease_height</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">get_child</span>
    <span class="k">end</span>
  <span class="k">end</span>


  <span class="k">class</span> <span class="nc">Node</span>
    <span class="kp">attr_accessor</span> <span class="ss">:key</span><span class="p">,</span> <span class="ss">:param</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="o">[]</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">param</span> <span class="o">=</span> <span class="n">param</span>

      <span class="vi">@param</span><span class="o">[</span><span class="ss">:maxentry</span><span class="o">]</span>  <span class="o">||=</span> <span class="mi">3</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:maxbranch</span><span class="o">]</span> <span class="o">||=</span> <span class="mi">3</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:minentry</span><span class="o">]</span>  <span class="o">||=</span> <span class="p">(</span><span class="vi">@param</span><span class="o">[</span><span class="ss">:maxentry</span><span class="o">]</span>  <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:minbranch</span><span class="o">]</span> <span class="o">||=</span> <span class="p">(</span><span class="vi">@param</span><span class="o">[</span><span class="ss">:maxbranch</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span>

      <span class="k">return</span> <span class="nb">self</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">maxentry</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:maxentry</span><span class="o">]</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">maxbranch</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:maxbranch</span><span class="o">]</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">minentry</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:minentry</span><span class="o">]</span>
    <span class="k">end</span>
    <span class="k">def</span> <span class="nf">minbranch</span>
      <span class="vi">@param</span><span class="o">[</span><span class="ss">:minbranch</span><span class="o">]</span>
    <span class="k">end</span>


    <span class="k">def</span> <span class="nf">min</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">first</span>
    <span class="k">end</span>

    <span class="kp">protected</span>
    <span class="k">def</span> <span class="nf">search_insert_pos</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">i</span> <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
      <span class="k">end</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span>
    <span class="k">end</span>
  <span class="k">end</span>


  <span class="k">class</span> <span class="nc">Leaf</span> <span class="o">&lt;</span> <span class="no">Node</span>
    <span class="kp">attr_accessor</span> <span class="ss">:data</span><span class="p">,</span> <span class="ss">:nextp</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="o">[]</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">nextp</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="k">super</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nc">Leaf</span><span class="o">.</span><span class="nf">new_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">,</span> <span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="kp">new</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">.</span><span class="n">create_bptree_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="n">before</span> <span class="o">=</span> <span class="n">search_insert_pos</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">before</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span>  <span class="o">=</span> <span class="n">key</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="n">before</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">value</span>

      <span class="n">ret</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="ss">:need_split</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">maxentry</span>
      <span class="k">return</span> <span class="o">[</span><span class="n">ret</span><span class="p">,</span> <span class="n">before</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">pos</span> <span class="o">=</span> <span class="n">search_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">nil</span><span class="o">]</span> <span class="k">if</span> <span class="n">pos</span><span class="o">.</span><span class="n">nil?</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>

      <span class="n">ret</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="ss">:need_balance</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">minentry</span>
      <span class="k">return</span> <span class="o">[</span><span class="n">ret</span><span class="p">,</span> <span class="n">pos</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">pos</span> <span class="o">=</span> <span class="n">search_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">pos</span><span class="o">.</span><span class="n">nil?</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="n">pos</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">to_a</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
      <span class="k">return</span> <span class="n">ret</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">nextp</span><span class="o">.</span><span class="n">nil?</span>
      <span class="k">return</span> <span class="n">ret</span> <span class="o">+</span>  <span class="nb">self</span><span class="o">.</span><span class="n">nextp</span><span class="o">.</span><span class="n">to_a</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">disp</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">with_data</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
      <span class="n">indent</span> <span class="o">=</span> <span class="s1">&#39;  &#39;</span> <span class="o">*</span> <span class="n">level</span>
      <span class="nb">print</span> <span class="n">indent</span> <span class="o">+</span> <span class="s1">&#39;- Leaf&#39;</span> <span class="o">+</span> <span class="p">((</span><span class="n">level</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">?</span> <span class="s1">&#39;(root)&#39;</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; [&#39;</span>
      <span class="nb">print</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">before</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span><span class="o">|</span>
          <span class="k">if</span> <span class="n">before</span><span class="o">.</span><span class="n">empty?</span> <span class="k">then</span>
            <span class="n">k</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="p">(</span><span class="n">with_data</span> <span class="p">?</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="n">d</span><span class="o">.</span><span class="n">to_s</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
          <span class="k">else</span>
            <span class="n">before</span> <span class="o">+</span> <span class="s1">&#39;, &#39;</span> <span class="o">+</span> <span class="n">k</span><span class="o">.</span><span class="n">to_s</span> <span class="o">+</span> <span class="p">(</span><span class="n">with_data</span> <span class="p">?</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="n">d</span><span class="o">.</span><span class="n">to_s</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
          <span class="k">end</span>
        <span class="p">}</span>
      <span class="nb">puts</span> <span class="s1">&#39;]&#39;</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">pretty_print</span><span class="p">(</span><span class="n">pp</span><span class="p">)</span>
      <span class="n">pp</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;#&lt;B+T::Leaf&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;&#39;</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">breakable</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="s1">&#39;key:&#39;</span><span class="p">)</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">pp</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="p">)</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">breakable</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="s1">&#39;data:&#39;</span><span class="p">)</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">pp</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>


    <span class="k">def</span> <span class="nf">split</span>
      <span class="n">range</span> <span class="o">=</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>

      <span class="n">sibling</span> <span class="o">=</span> <span class="no">Leaf</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">param</span><span class="p">)</span>
      <span class="n">sibling</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">range</span><span class="o">]</span>
      <span class="n">sibling</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="n">range</span><span class="o">]</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">range</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">[</span><span class="n">range</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="n">sibling</span><span class="o">.</span><span class="n">nextp</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">nextp</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">nextp</span> <span class="o">=</span> <span class="n">sibling</span>

      <span class="k">return</span> <span class="n">sibling</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">balance</span><span class="p">(</span><span class="n">bigbrother</span><span class="p">)</span>
      <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="nb">self</span><span class="o">.</span><span class="n">maxentry</span> <span class="k">then</span>
        <span class="k">return</span> <span class="ss">:need_integrate</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span>  <span class="nb">self</span><span class="o">.</span><span class="n">maxentry</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">then</span>
        <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#balance: Internal error&quot;</span>
      <span class="k">end</span>

      <span class="n">newkey</span>  <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">dup</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span>
      <span class="n">newdata</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">dup</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">data</span>
      <span class="n">keys</span> <span class="o">=</span> <span class="n">newkey</span><span class="o">.</span><span class="n">size</span>
      <span class="n">boundary</span> <span class="o">=</span> <span class="n">keys</span> <span class="o">/</span> <span class="mi">2</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">key</span>        <span class="o">=</span> <span class="n">newkey</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.boundary</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
      <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span>  <span class="o">=</span> <span class="n">newkey</span><span class="o">[</span><span class="n">boundary</span><span class="o">.</span><span class="n">.keys</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">data</span>       <span class="o">=</span> <span class="n">newdata</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.boundary</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
      <span class="n">bigbrother</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">newdata</span><span class="o">[</span><span class="n">boundary</span><span class="o">.</span><span class="n">.keys</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>

      <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">integrate</span><span class="p">(</span><span class="n">bigbrother</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span>  <span class="o">+=</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">+=</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">data</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">nextp</span> <span class="o">=</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">nextp</span>
      <span class="n">bigbrother</span><span class="o">.</span><span class="n">nextp</span> <span class="o">=</span> <span class="kp">nil</span>

      <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">: Internal error&quot;</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">maxentry</span>
      <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get_child</span>
      <span class="k">return</span> <span class="nb">self</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">suitable_root?</span>
      <span class="k">return</span> <span class="kp">true</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">create_bptree_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">)</span>
      <span class="nb">type</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">assoc</span>
      <span class="k">unless</span> <span class="nb">type</span> <span class="o">==</span> <span class="ss">:leaf</span> <span class="k">then</span>
        <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#create_bptree_from_assoc: Internal error&quot;</span>
      <span class="k">end</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">data</span>
      <span class="k">return</span> <span class="nb">self</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">connect_nextp</span><span class="p">(</span><span class="n">before</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
      <span class="n">before</span><span class="o">.</span><span class="n">nextp</span> <span class="o">=</span> <span class="nb">self</span> <span class="k">unless</span> <span class="n">before</span><span class="o">.</span><span class="n">nil?</span>
      <span class="k">return</span> <span class="nb">self</span>
    <span class="k">end</span>


    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">search_key</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">i</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="n">key</span>
      <span class="k">end</span>
      <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>
  <span class="k">end</span>


  <span class="k">class</span> <span class="nc">Branch</span> <span class="o">&lt;</span> <span class="no">Node</span>
    <span class="kp">attr_accessor</span> <span class="ss">:branch</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span> <span class="o">=</span> <span class="o">[]</span>
      <span class="k">super</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nc">Branch</span><span class="o">.</span><span class="nf">new_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">,</span> <span class="n">param</span> <span class="o">=</span> <span class="p">{})</span>
      <span class="kp">new</span><span class="p">(</span><span class="n">param</span><span class="p">)</span><span class="o">.</span><span class="n">create_bptree_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="n">bi</span> <span class="o">=</span> <span class="n">search_branch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">child</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">bi</span><span class="o">]</span>
      <span class="n">ret</span><span class="p">,</span> <span class="n">before</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">bi</span><span class="o">]</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">before</span><span class="o">]</span> <span class="k">if</span> <span class="n">before</span> <span class="o">==</span> <span class="mi">0</span>

      <span class="k">return</span> <span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="n">bi</span><span class="o">]</span> <span class="k">if</span> <span class="n">ret</span><span class="o">.</span><span class="n">nil?</span>
      <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#add: Internal error&quot;</span> <span class="k">unless</span> <span class="n">ret</span> <span class="o">==</span> <span class="ss">:need_split</span>

      <span class="c1"># split child</span>
      <span class="n">bbrother</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">split</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">bbrother</span><span class="p">)</span>

      <span class="k">return</span> <span class="o">[</span><span class="n">ret</span><span class="p">,</span> <span class="n">bi</span><span class="o">]</span> <span class="k">if</span> <span class="n">ret</span><span class="o">.</span><span class="n">nil?</span> <span class="ow">or</span> <span class="n">ret</span> <span class="o">==</span> <span class="ss">:need_split</span>
      <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#add: Internal error&quot;</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">bi</span> <span class="o">=</span> <span class="n">search_branch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">child</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">bi</span><span class="o">]</span>
      <span class="n">ret</span><span class="p">,</span> <span class="n">di</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">bi</span><span class="o">]</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">di</span><span class="o">]</span> <span class="k">if</span> <span class="n">di</span> <span class="o">==</span> <span class="mi">0</span>

      <span class="n">bj</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="k">until</span> <span class="n">ret</span><span class="o">.</span><span class="n">nil?</span>
        <span class="k">case</span> <span class="n">ret</span>
        <span class="k">when</span> <span class="ss">:need_balance</span>
          <span class="c1"># choose pair.</span>
          <span class="n">bi</span><span class="p">,</span> <span class="n">bj</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">choose_pair</span><span class="p">(</span><span class="n">bi</span><span class="p">)</span>
          <span class="n">lbrother</span><span class="p">,</span> <span class="n">bbrother</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">bi</span><span class="o">.</span><span class="n">.bj</span><span class="o">]</span>

          <span class="c1"># balance pair</span>
          <span class="n">ret</span> <span class="o">=</span> <span class="n">lbrother</span><span class="o">.</span><span class="n">balance</span><span class="p">(</span><span class="n">bbrother</span><span class="p">)</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">bj</span><span class="o">]</span> <span class="o">=</span> <span class="n">bbrother</span><span class="o">.</span><span class="n">min</span>
        <span class="k">when</span> <span class="ss">:need_integrate</span>
          <span class="c1"># remove big-brother</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">bj</span><span class="p">)</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">delete_at</span><span class="p">(</span><span class="n">bj</span><span class="p">)</span>

          <span class="c1"># integrate pair</span>
          <span class="n">ret</span> <span class="o">=</span> <span class="n">lbrother</span><span class="o">.</span><span class="n">integrate</span><span class="p">(</span><span class="n">bbrother</span><span class="p">)</span>
        <span class="k">else</span>
          <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#delete: Internal error&quot;</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="n">ret</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="ss">:need_balance</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">minbranch</span>
      <span class="k">return</span> <span class="o">[</span><span class="n">ret</span><span class="p">,</span> <span class="n">bi</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="n">bi</span> <span class="o">=</span> <span class="n">search_branch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">bi</span><span class="o">].</span><span class="n">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">to_a</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">to_a</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">disp</span><span class="p">(</span><span class="n">level</span><span class="p">,</span> <span class="n">with_data</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
      <span class="n">indent</span> <span class="o">=</span> <span class="s1">&#39;  &#39;</span> <span class="o">*</span> <span class="n">level</span>
      <span class="nb">puts</span> <span class="n">indent</span> <span class="o">+</span> <span class="s1">&#39;- Branch&#39;</span> <span class="o">+</span> <span class="p">(</span><span class="n">level</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="s1">&#39;(root)&#39;</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s1">&#39; [&#39;</span> <span class="o">+</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">before</span><span class="p">,</span> <span class="n">k</span><span class="o">|</span>
          <span class="k">if</span> <span class="n">before</span><span class="o">.</span><span class="n">empty?</span> <span class="k">then</span>
            <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">)&quot;</span>
          <span class="k">else</span>
            <span class="n">before</span> <span class="o">+</span> <span class="s2">&quot;, </span><span class="si">#{</span><span class="n">k</span><span class="si">}</span><span class="s2">&quot;</span>
          <span class="k">end</span>
        <span class="p">}</span> <span class="o">+</span> <span class="s1">&#39;]&#39;</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">branch</span><span class="o">|</span>
        <span class="n">branch</span><span class="o">.</span><span class="n">disp</span><span class="p">(</span><span class="n">level</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">with_data</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">pretty_print</span><span class="p">(</span><span class="n">pp</span><span class="p">)</span>
      <span class="n">pp</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="s1">&#39;#&lt;B+T::Branch&#39;</span><span class="p">)</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">breakable</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;key:[&#39;</span><span class="p">,</span> <span class="s1">&#39;]&#39;</span><span class="p">)</span> <span class="k">do</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">before</span><span class="p">,</span> <span class="n">key</span><span class="o">|</span>
            <span class="n">pp</span><span class="o">.</span><span class="n">comma_breakable</span> <span class="k">if</span> <span class="n">before</span>
            <span class="n">pp</span><span class="o">.</span><span class="n">pp</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="kp">true</span>
          <span class="k">end</span>
        <span class="k">end</span>

        <span class="n">pp</span><span class="o">.</span><span class="n">breakable</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="s1">&#39;branch:&#39;</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="n">pp</span><span class="o">.</span><span class="n">nest</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">breakable</span>
        <span class="n">pp</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s1">&#39;[&#39;</span><span class="p">,</span> <span class="s1">&#39;]&#39;</span><span class="p">)</span> <span class="k">do</span>
          <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="kp">false</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">before</span><span class="p">,</span> <span class="n">branch</span><span class="o">|</span>
            <span class="n">pp</span><span class="o">.</span><span class="n">comma_breakable</span> <span class="k">if</span> <span class="n">before</span>
            <span class="n">pp</span><span class="o">.</span><span class="n">pp</span><span class="p">(</span><span class="n">branch</span><span class="p">)</span>
            <span class="kp">true</span>
          <span class="k">end</span>
        <span class="k">end</span>
      <span class="k">end</span>

      <span class="n">pp</span><span class="o">.</span><span class="n">text</span><span class="p">(</span><span class="s1">&#39;&gt;&#39;</span><span class="p">)</span>
    <span class="k">end</span>


    <span class="k">def</span> <span class="nf">add_child</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
      <span class="n">before</span> <span class="o">=</span> <span class="n">search_insert_pos</span><span class="p">(</span><span class="n">child</span><span class="o">.</span><span class="n">min</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">before</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">min</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">before</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">child</span>

      <span class="k">return</span> <span class="ss">:need_split</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">maxbranch</span>
      <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">split</span>
      <span class="n">range</span> <span class="o">=</span> <span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>

      <span class="n">sibling</span> <span class="o">=</span> <span class="no">Branch</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">param</span><span class="p">)</span>
      <span class="n">sibling</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">range</span><span class="o">]</span>
      <span class="n">sibling</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">range</span><span class="o">]</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">range</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">range</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>

      <span class="k">return</span> <span class="n">sibling</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">balance</span><span class="p">(</span><span class="n">bigbrother</span><span class="p">)</span>
      <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="nb">self</span><span class="o">.</span><span class="n">maxbranch</span> <span class="k">then</span>
        <span class="k">return</span> <span class="ss">:need_integrate</span>
      <span class="k">end</span>
      <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span>  <span class="nb">self</span><span class="o">.</span><span class="n">maxbranch</span> <span class="o">*</span> <span class="mi">2</span> <span class="k">then</span>
        <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#balance: Internal error&quot;</span>
      <span class="k">end</span>

      <span class="c1"># newkeyとnewbranchには，maxbranch * 2個の要素を置くための空間が必要</span>
      <span class="n">newkey</span>    <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">dup</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span>
      <span class="n">newbranch</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">.</span><span class="n">dup</span> <span class="o">+</span> <span class="n">bigbrother</span><span class="o">.</span><span class="n">branch</span>
      <span class="n">keys</span> <span class="o">=</span> <span class="n">newkey</span><span class="o">.</span><span class="n">size</span>
      <span class="n">boundary</span> <span class="o">=</span> <span class="n">keys</span> <span class="o">/</span> <span class="mi">2</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">key</span>       <span class="o">=</span> <span class="n">newkey</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.boundary</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
      <span class="n">bigbrother</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">newkey</span><span class="o">[</span><span class="n">boundary</span><span class="o">.</span><span class="n">.keys</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>

      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span>       <span class="o">=</span> <span class="n">newbranch</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.boundary</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>
      <span class="n">bigbrother</span><span class="o">.</span><span class="n">branch</span> <span class="o">=</span> <span class="n">newbranch</span><span class="o">[</span><span class="n">boundary</span><span class="o">.</span><span class="n">.keys</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span>

      <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">integrate</span><span class="p">(</span><span class="n">bigbrother</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.bigbrother</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">add_child</span><span class="p">(</span><span class="n">bigbrother</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
      <span class="k">end</span>

      <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">: Internal error&quot;</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">maxbranch</span>
      <span class="k">return</span> <span class="kp">nil</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">get_child</span>
      <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#get_child: Internal error&quot;</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">suitable_root?</span>
      <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;=</span> <span class="mi">1</span>
      <span class="k">return</span> <span class="kp">false</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">choose_pair</span><span class="p">(</span><span class="n">lbrother_idx</span><span class="p">)</span>
      <span class="n">lbrother_idx</span> <span class="o">-=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">lbrother_idx</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="n">bbrother_idx</span> <span class="o">=</span> <span class="n">lbrother_idx</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#choose_pair: Internal error&quot;</span> <span class="k">if</span> <span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">&lt;</span> <span class="mi">2</span>
      <span class="k">return</span> <span class="o">[</span><span class="n">lbrother_idx</span><span class="p">,</span> <span class="n">bbrother_idx</span><span class="o">]</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">create_bptree_from_assoc</span><span class="p">(</span><span class="n">assoc</span><span class="p">)</span>
      <span class="nb">type</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">branch</span> <span class="o">=</span> <span class="n">assoc</span>
      <span class="k">unless</span> <span class="nb">type</span> <span class="o">==</span> <span class="ss">:branch</span> <span class="k">then</span>
        <span class="k">raise</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="si">}</span><span class="s2">#create_bptree_from_assoc: Internal error&quot;</span>
      <span class="k">end</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">key</span> <span class="o">=</span> <span class="n">key</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span> <span class="o">=</span> <span class="n">branch</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">child</span><span class="o">|</span>
        <span class="p">{</span><span class="ss">:leaf</span> <span class="o">=&gt;</span> <span class="no">Leaf</span><span class="p">,</span> <span class="ss">:branch</span> <span class="o">=&gt;</span> <span class="no">Branch</span><span class="p">}</span><span class="o">[</span><span class="n">child</span><span class="o">.</span><span class="n">first</span><span class="o">].</span><span class="n">new_from_assoc</span><span class="p">(</span><span class="n">child</span><span class="p">)</span>
      <span class="k">end</span>
      <span class="k">return</span> <span class="nb">self</span>
    <span class="k">end</span>

    <span class="k">def</span> <span class="nf">connect_nextp</span><span class="p">(</span><span class="n">before</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
      <span class="nb">self</span><span class="o">.</span><span class="n">branch</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="n">before</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">before</span><span class="p">,</span> <span class="n">branch</span><span class="o">|</span>
        <span class="n">branch</span><span class="o">.</span><span class="n">connect_nextp</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>


    <span class="kp">private</span>
    <span class="k">def</span> <span class="nf">search_branch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
      <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">key</span> <span class="o">&lt;</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
      <span class="k">end</span>
      <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">key</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">###########################################################################</span>
<span class="c1"># deleting test</span>

<span class="nb">puts</span> <span class="s1">&#39;[Delete test 1]&#39;</span>
<span class="nb">puts</span>

<span class="n">assoc</span> <span class="o">=</span>
<span class="o">[[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">55</span><span class="o">]</span><span class="p">,</span>
  <span class="o">[[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">19</span><span class="o">]</span><span class="p">,</span>
    <span class="o">[[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">7</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data01&quot;</span><span class="p">,</span> <span class="s2">&quot;data02&quot;</span><span class="p">,</span> <span class="s2">&quot;data03&quot;</span><span class="o">]]</span><span class="p">,</span>
       <span class="o">[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data04&quot;</span><span class="p">,</span> <span class="s2">&quot;data05&quot;</span><span class="p">,</span> <span class="s2">&quot;data06&quot;</span><span class="o">]]</span><span class="p">,</span>
       <span class="o">[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data07&quot;</span><span class="p">,</span> <span class="s2">&quot;data08&quot;</span><span class="p">,</span> <span class="s2">&quot;data09&quot;</span><span class="o">]]]]</span><span class="p">,</span>
     <span class="o">[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">16</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data10&quot;</span><span class="p">,</span> <span class="s2">&quot;data11&quot;</span><span class="p">,</span> <span class="s2">&quot;data12&quot;</span><span class="o">]]</span><span class="p">,</span>
       <span class="o">[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data13&quot;</span><span class="p">,</span> <span class="s2">&quot;data14&quot;</span><span class="p">,</span> <span class="s2">&quot;data15&quot;</span><span class="o">]]</span><span class="p">,</span>
       <span class="o">[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data16&quot;</span><span class="p">,</span> <span class="s2">&quot;data17&quot;</span><span class="p">,</span> <span class="s2">&quot;data18&quot;</span><span class="o">]]]]</span><span class="p">,</span>
     <span class="o">[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">19</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">25</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">19</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data19&quot;</span><span class="p">,</span> <span class="s2">&quot;data20&quot;</span><span class="p">,</span> <span class="s2">&quot;data21&quot;</span><span class="o">]]</span><span class="p">,</span>
       <span class="o">[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">22</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">24</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data22&quot;</span><span class="p">,</span> <span class="s2">&quot;data23&quot;</span><span class="p">,</span> <span class="s2">&quot;data24&quot;</span><span class="o">]]</span><span class="p">,</span>
       <span class="o">[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">25</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">27</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s2">&quot;data25&quot;</span><span class="p">,</span> <span class="s2">&quot;data26&quot;</span><span class="p">,</span> <span class="s2">&quot;data27&quot;</span><span class="o">]]]]]]</span><span class="p">,</span>
   <span class="o">[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">28</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">46</span><span class="o">]</span><span class="p">,</span>
    <span class="o">[[</span><span class="ss">:branch</span><span class="p">,</span> <span class="o">[</span><span class="mi">28</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">34</span><span class="o">]</span><span class="p">,</span>
      <span class="o">[[</span><span class="ss">:leaf</span><span class="p">,</span> <span class="o">[</span><span class="mi">28</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">30</span><span class="o">]</span><span class="">




<!--
     FILE ARCHIVED ON 16:01:40 Nov 20, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:38:24 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
