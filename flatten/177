
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
METHINKS IT IS A WEASEL
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20091017222844cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20091017222844cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20091017222844cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
<meta name="robots" content="noindex,nofollow">

    <!--<script src="/web/20091017222844/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20091017222844/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20091017222844js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20091017222844js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20091017222844js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20091017222844js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app17.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/177\/flatten\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "17";
var displayMonth = "Oct";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/177/flatten/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20091017222844" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081203192858/http://ja.doukaku.org/177/flatten/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="3 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 22:28:44 Oct 17, 2009">OCT</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Nov
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081203192858/http://ja.doukaku.org/177/flatten/" title="19:28:58 Dec 3, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 22:28:44 Oct 17, 2009">17</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2008
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 22:28:44 Oct 17, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20091017222844*/http://ja.doukaku.org/177/flatten/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">3 Dec 08 - 17 Oct 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000001_2009:9:000000000100_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20091017222844/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20091017222844/http://ja.doukaku.org/177/">METHINKS IT IS A WEASEL</a>
</h2>

    





<div class="comment" id="comment6287">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6287/">#6287</a>(<script language="JavaScript">print_time(new Date("2008/05/17 14:13 GMT"));</script><noscript>2008/05/17 14:13 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfff7f;">4/8=0.50</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>ランダムな文字からMETHINKS IT IS A WEASELを作るプログラムを作れ。</p>
<p>簡単に流れを書いてみます。</p>
<p>１：ランダムな２０文字を持つ文字列をもった３００個作ります。</p>
<p>２：その文字列が&quot;METHINKSITISAWEASEL&quot;に近いものからソートします。</p>
<p>３：それぞれの文字列のなか1文字を別の文字に変化させたものを３つ用意します。</p>
<p>４：それを２：のソートをして上位３００個残す。（９００個あるうちで上位３００個残すということです。）</p>
<p>５：以後３：と４：を繰り返す。</p>
<p>ランダムな文字変化は大文字だけでいいです。簡単にするために空白文字を外してあります。</p>
<p>METHINKS IT IS WEASELができたら終了。３と4の間でソートしたもので一番上位のものを毎回表示させると変化が楽しめます。:-)</p>
<p>Rickard Dawkinsがブラインドウォッチメイカー(現題：盲目の時計職人）の３章で書いていた有名なものです。さらに一般化してもらってもいいです。</p>
<p>参考</p>
<ul class="simple">
<li><a class="reference" href="/web/20091017222844/http://home.pacbell.net/s-max/scott/weasel.html">http://home.pacbell.net/s-max/scott/weasel.html</a> (JAVA アプレット)</li>
<li><a class="reference" href="/web/20091017222844/http://en.wikipedia.org/wiki/Weasel_program">http://en.wikipedia.org/wiki/Weasel_program</a></li>
</ul>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6287/addtag/" class="addtag" id="addtag_6287">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #bfff7f;"
  >4/8=0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6287"
  >-</span><span
  class="button yellow"
  id="rating_z_6287"
  >0</span><span 
  class="button green"
  id="rating_p_6287"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6287/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20091017222844/http://ja.doukaku.org/177/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - フラット表示</h2>
<a href="/web/20091017222844/http://ja.doukaku.org/177/nested/">ネスト表示</a>
<a href="/web/20091017222844/http://ja.doukaku.org/177/">非表示</a> 


  
  <br/>

  
  




<div class="comment" id="comment6288">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6288/">#6288</a>(<script language="JavaScript">print_time(new Date("2008/05/18 06:14 GMT"));</script><noscript>2008/05/18 06:14 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>近さのうまい定義ってそんなに自明じゃないんですね。下のプログラムではアスキーコードの差を足していますが、もっといい方法がありそうです。</p>
<p>文字変化のやり方も焼きなまし法を使うとかいろいろ考えられそうです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre>(defun random-char (&amp;optional random-state)
  (code-char (+ 65 (random 26 random-state))))

(defun random-string (length &amp;optional random-state)
  (let ((s (make-string length)))
    (dotimes (i length)
      (setf (elt s i) (random-char random-state)))
    s))

(defun modify (s &amp;optional random-state)
  (let ((i (random (length s) random-state))
        (r (copy-seq s)))
    (setf (elt r i)
          (code-char (+ (random 3 random-state)
                        (char-code (elt s i))
                        -1)))
    r))

(defun weasel (target)
  (let ((state (make-random-state t)))
    (flet ((key (s)
             (loop for c1 across s and c2 across target
               sum (abs (- (char-code c1) (char-code c2))))))
      (do ((strings (loop repeat 300
                      as s = (random-string (length target) state)
                      collect (cons s (key s)))
                    (sort (mapcan (lambda (p)
                                    (loop repeat 3
                                      as s = (modify (car p) state)
                                      collect (cons s (key s))))
                                  strings)
                          #&#39;&lt; :key #&#39;cdr))
           (i 1 (1+ i)))
          ((string= target (caar strings))
           (format t &quot;~D: ~A (~D)~%&quot; i (caar strings) (cdar strings))
           (format t &quot;Finished after ~D steps.~%&quot; i))
        (setf (cdr (nthcdr 299 strings)) nil)
        (format t &quot;~D: ~A (~D)~%&quot; i (caar strings) (cdar strings))))))

(weasel &quot;METHINKSITISAWEASEL&quot;)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6288/addtag/" class="addtag" id="addtag_6288">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6288/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6288/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6288"
  >-</span><span
  class="button yellow"
  id="rating_z_6288"
  >0</span><span 
  class="button green"
  id="rating_p_6288"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20091017222844/http://ja.doukaku.org/comment/6288/">
    1
    reply
  </a>

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6288/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6289">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/588/" target="_top">sekia</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6289/">#6289</a>(<script language="JavaScript">print_time(new Date("2008/05/18 06:40 GMT"));</script><noscript>2008/05/18 06:40 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>安直な実装。
派生文字列が3つだとうまく収束しなかったので、10個にしています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@alphabets</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">..</span> <span class="s">&quot;Z&quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">@strings</span>   <span class="o">=</span> <span class="p">();</span>
<span class="k">my</span> <span class="nv">$goal</span>      <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">random_int</span><span class="p">($)</span> <span class="p">{</span> <span class="nb">int</span> <span class="nb">rand</span> <span class="nb">shift</span> <span class="p">}</span>

<span class="k">sub </span><span class="nf">similarity</span><span class="p">($)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$str</span>   <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">..</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$score</span><span class="o">++</span> <span class="k">if</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$str</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="ow">eq</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$goal</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$score</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">derive_string</span><span class="p">($)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$origin_string</span>   <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@derived_strings</span> <span class="o">=</span> <span class="p">();</span>
    <span class="k">for</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">10</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$derived_string</span> <span class="o">=</span> <span class="nv">$origin_string</span><span class="p">;</span>
        <span class="nb">substr</span><span class="p">(</span> <span class="nv">$derived_string</span><span class="p">,</span> <span class="n">random_int</span> <span class="nb">length</span> <span class="nv">$origin_string</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">=</span>
          <span class="nv">$alphabets</span><span class="p">[</span> <span class="n">random_int</span> <span class="nv">@alphabets</span> <span class="p">];</span>
        <span class="nb">push</span> <span class="nv">@derived_strings</span><span class="p">,</span> <span class="nv">$derived_string</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">@derived_strings</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$string</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
    <span class="nv">$string</span> <span class="o">.=</span> <span class="nv">$alphabets</span><span class="p">[</span> <span class="n">random_int</span> <span class="nv">@alphabets</span> <span class="p">]</span> <span class="k">for</span> <span class="mi">1</span> <span class="o">..</span> <span class="nb">length</span> <span class="nv">$goal</span><span class="p">;</span>
    <span class="nb">push</span> <span class="nv">@strings</span><span class="p">,</span> <span class="nv">$string</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">until</span> <span class="p">(</span> <span class="nv">$strings</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">eq</span> <span class="nv">$goal</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">@next_gen</span> <span class="o">=</span> <span class="p">();</span>
    <span class="k">print</span> <span class="nv">$count</span><span class="o">++</span><span class="p">,</span> <span class="s">&quot;: &quot;</span><span class="p">,</span> <span class="nv">$strings</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
    <span class="nb">push</span> <span class="nv">@next_gen</span><span class="p">,</span> <span class="n">derive_string</span> <span class="nv">$_</span> <span class="k">for</span> <span class="nv">@strings</span><span class="p">;</span>
    <span class="nv">@strings</span> <span class="o">=</span>
      <span class="p">(</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">}</span>
          <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">}</span> <span class="nb">map</span> <span class="p">{</span> <span class="p">[</span> <span class="n">similarity</span> <span class="nv">$_</span><span class="p">,</span> <span class="nv">$_</span> <span class="p">]</span> <span class="p">}</span> <span class="nv">@next_gen</span> <span class="p">)</span>
      <span class="p">[</span> <span class="mi">0</span> <span class="o">..</span> <span class="mi">299</span> <span class="p">];</span>
<span class="p">}</span>

<span class="k">print</span> <span class="nv">$count</span><span class="p">,</span> <span class="s">&quot;: &quot;</span><span class="p">,</span> <span class="nv">$strings</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6289/addtag/" class="addtag" id="addtag_6289">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6289/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6289/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6289"
  >-</span><span
  class="button yellow"
  id="rating_z_6289"
  >0</span><span 
  class="button green"
  id="rating_p_6289"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20091017222844/http://ja.doukaku.org/comment/6289/">
    1
    reply
  </a>

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6289/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6290">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6290/">#6290</a>(<script language="JavaScript">print_time(new Date("2008/05/18 08:37 GMT"));</script><noscript>2008/05/18 08:37 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>距離関数の定義がなかったので、とりあえず一致しない文字数を距離の定義としてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>


<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample177</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">CHARACTERS</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">INITIAL_COUNT</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">CREATE_COUNT</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>


    <span class="k">private</span> <span class="k">final</span> <span class="n">Random</span> <span class="n">random_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
    <span class="k">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cache_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>

    <span class="k">private</span> <span class="k">final</span> <span class="n">String</span> <span class="n">target_</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">comparator_</span><span class="o">;</span>


    <span class="k">public</span> <span class="n">Sample177</span><span class="o">(</span><span class="n">String</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">target_</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="n">comparator_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringDistanceComparator</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">init</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="kt">void</span> <span class="n">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">INITIAL_COUNT</span><span class="o">;</span> <span class="n">count</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cache_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createString</span><span class="o">(</span><span class="n">target_</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
        <span class="o">}</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cache_</span><span class="o">,</span> <span class="n">comparator_</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="n">String</span> <span class="n">createString</span><span class="o">(</span><span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">length</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">CHARACTERS</span><span class="o">[</span><span class="n">random_</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">CHARACTERS</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="n">String</span> <span class="n">getTop</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cache_</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">void</span> <span class="n">nextStep</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">str:</span> <span class="n">cache_</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">CREATE_COUNT</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">cache_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">changeCharacter</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cache_</span><span class="o">,</span> <span class="n">comparator_</span><span class="o">);</span>
        <span class="n">cache_</span> <span class="o">=</span> <span class="n">cache_</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">INITIAL_COUNT</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">changeCharacter</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        <span class="n">builder</span><span class="o">.</span><span class="na">setCharAt</span><span class="o">(</span><span class="n">random_</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()),</span> <span class="n">CHARACTERS</span><span class="o">[</span><span class="n">random_</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">CHARACTERS</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="k">static</span> <span class="k">class</span> <span class="nc">StringDistanceComparator</span> <span class="k">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="k">private</span> <span class="k">final</span> <span class="n">String</span> <span class="n">target_</span><span class="o">;</span>
        <span class="k">public</span> <span class="n">StringDistanceComparator</span><span class="o">(</span><span class="n">String</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">target_</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">compare</span><span class="o">(</span><span class="n">String</span> <span class="n">o1</span><span class="o">,</span> <span class="n">String</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">calcDistance</span><span class="o">(</span><span class="n">o1</span><span class="o">)</span> <span class="o">-</span> <span class="n">calcDistance</span><span class="o">(</span><span class="n">o2</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">calcDistance</span><span class="o">(</span><span class="n">String</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">=</span> <span class="n">target_</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">distance</span> <span class="o">+=</span> <span class="o">(</span><span class="n">target_</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">))?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">distance</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">target</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="o">;</span>
        <span class="n">Sample177</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample177</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">top</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">index</span><span class="o">++</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">top</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">top</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">target</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">sample</span><span class="o">.</span><span class="na">nextStep</span><span class="o">();</span>
            <span class="n">top</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">index</span><span class="o">++</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">top</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6290/addtag/" class="addtag" id="addtag_6290">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6290/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6290/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6290"
  >-</span><span
  class="button yellow"
  id="rating_z_6290"
  >0</span><span 
  class="button green"
  id="rating_p_6290"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6290/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6291">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6291/">#6291</a>(<script language="JavaScript">print_time(new Date("2008/05/18 10:03 GMT"));</script><noscript>2008/05/18 10:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>&gt;近さのうまい定義ってそんなに自明じゃないんですね。下のプログラムではアスキーコードの差を足しています</p>
<p>そうなんですよね。うまい定義はどうするか？ってありますね。僕も作成した時はアスキーコードの差を利用したように記憶しています。:-)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6291/addtag/" class="addtag" id="addtag_6291">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6291"
  >-</span><span
  class="button yellow"
  id="rating_z_6291"
  >0</span><span 
  class="button green"
  id="rating_p_6291"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6288/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6291/root/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6291/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6292">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6292/">#6292</a>(<script language="JavaScript">print_time(new Date("2008/05/18 10:51 GMT"));</script><noscript>2008/05/18 10:51 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>お題とは外れますが、せっかくなのでGAで書いてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>

<span class="k">const</span> <span class="kt">char</span> <span class="n">TargetString</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">TargetStringLength</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">char</span> <span class="n">AlphabetTable</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">AlphabetNum</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">AlphabetTable</span><span class="p">);</span>


<span class="kt">int</span> <span class="nf">getScore</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c">//完全マッチで0が帰る。</span>
    <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TargetStringLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TargetString</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="c">//        score -= d &gt; 0 ? d : -d;    //差</span>
        <span class="n">score</span> <span class="o">-=</span> <span class="o">!!</span><span class="n">d</span><span class="p">;</span>                <span class="c">//ハミング距離</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">score</span><span class="p">;</span>    
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">kousa</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">TargetStringLength</span><span class="p">;</span>
    <span class="c">//rの位置で交差させる</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TargetStringLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="kt">char</span> <span class="n">t</span><span class="p">;</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">henni</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c">//1文字を別の文字に変化させる</span>
    <span class="n">s</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">TargetStringLength</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">AlphabetTable</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">AlphabetNum</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Gene</span><span class="p">{</span>
    <span class="kt">char</span> <span class="n">gene</span><span class="p">[</span><span class="n">TargetStringLength</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">GeneToResult</span><span class="p">(</span><span class="n">Gene</span> <span class="o">*</span><span class="n">g</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">g</span><span class="o">-&gt;</span><span class="n">result</span> <span class="o">=</span> <span class="n">getScore</span><span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">gene</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_a</span><span class="p">,</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="n">Gene</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">Gene</span><span class="o">*</span><span class="p">)</span><span class="n">_a</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">Gene</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">Gene</span><span class="o">*</span><span class="p">)</span><span class="n">_b</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">result</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">result</span><span class="p">){</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">result</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">srand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>

    <span class="c">//初期化</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">GeneMax</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
    <span class="n">Gene</span> <span class="n">genePool</span><span class="p">[</span><span class="n">GeneMax</span><span class="p">];</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">GeneMax</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="c">//ランダムな文字列で埋め尽くす</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">TargetStringLength</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">){</span>
            <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">AlphabetTable</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">AlphabetNum</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span><span class="p">[</span><span class="n">TargetStringLength</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
        <span class="n">GeneToResult</span><span class="p">(</span><span class="o">&amp;</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>    <span class="c">//スコアの取得</span>
    <span class="p">}</span>


    <span class="c">//進化させる</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c">//sort</span>
        <span class="n">qsort</span><span class="p">(</span><span class="n">genePool</span><span class="p">,</span><span class="n">GeneMax</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Gene</span><span class="p">),</span><span class="o">&amp;</span><span class="n">compare</span><span class="p">);</span>

        <span class="c">//上位をprint</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;times = %d --------------------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Gene = %s, score = %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span><span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">getchar</span><span class="p">();</span>

        <span class="c">//交叉、突然変異</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">GeneMax</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">GeneMax</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="p">){</span>    <span class="c">//スコアの下位半分を捨てる</span>
            <span class="kt">char</span> <span class="n">g1</span><span class="p">[</span><span class="n">TargetStringLength</span><span class="p">];</span>
            <span class="kt">char</span> <span class="n">g2</span><span class="p">[</span><span class="n">TargetStringLength</span><span class="p">];</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">g1</span> <span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="n">GeneMax</span><span class="o">/</span><span class="mi">2</span><span class="p">)].</span><span class="n">gene</span><span class="p">);</span>    <span class="c">//適当な上位を選択</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">g2</span> <span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="n">GeneMax</span><span class="o">/</span><span class="mi">2</span><span class="p">)].</span><span class="n">gene</span><span class="p">);</span>
            <span class="n">kousa</span><span class="p">(</span><span class="n">g1</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>    <span class="c">//交差</span>
            <span class="n">henni</span><span class="p">(</span><span class="n">g1</span><span class="p">);</span>        <span class="c">//変異</span>
            <span class="n">henni</span><span class="p">(</span><span class="n">g2</span><span class="p">);</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span> <span class="p">,</span> <span class="n">g1</span><span class="p">);</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">gene</span> <span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c">//評価</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">GeneMax</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">GeneToResult</span><span class="p">(</span><span class="o">&amp;</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6292/addtag/" class="addtag" id="addtag_6292">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/GA/">GA</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6292/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6292/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6292"
  >-</span><span
  class="button yellow"
  id="rating_z_6292"
  >0</span><span 
  class="button green"
  id="rating_p_6292"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6292/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6293">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/780/" target="_top">gandalf</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6293/">#6293</a>(<script language="JavaScript">print_time(new Date("2008/05/18 11:37 GMT"));</script><noscript>2008/05/18 11:37 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>お題の通りに実装すると収束しませんね。突然変異の確率が高すぎるのが良くないようです。変異する文字数を1にすれば収束しました。(変異がおこる確率をいじるとさらに早く、80世代ほどで終わります)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6293/addtag/" class="addtag" id="addtag_6293">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6293"
  >-</span><span
  class="button yellow"
  id="rating_z_6293"
  >0</span><span 
  class="button green"
  id="rating_p_6293"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6289/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6293/root/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20091017222844/http://ja.doukaku.org/comment/6293/">
    1
    reply
  </a>

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6293/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6294">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6294/">#6294</a>(<script language="JavaScript">print_time(new Date("2008/05/18 12:51 GMT"));</script><noscript>2008/05/18 12:51 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>すいません。問題の設定が甘くて　お許しください。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6294/addtag/" class="addtag" id="addtag_6294">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6294"
  >-</span><span
  class="button yellow"
  id="rating_z_6294"
  >0</span><span 
  class="button green"
  id="rating_p_6294"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6293/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6294/root/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6294/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6295">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/335/" target="_top">yattom</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6295/">#6295</a>(<script language="JavaScript">print_time(new Date("2008/05/18 13:21 GMT"));</script><noscript>2008/05/18 13:21 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  ごくごく素直にPythonで実装しました。増やす数(MULTIPLY)が3だと収束しなかったので、5にしてあります。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">random</span>

<span class="n">GOAL</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span>

<span class="n">DOMAIN</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>

<span class="n">SET_SIZE</span> <span class="o">=</span> <span class="mi">300</span>
<span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">create_random</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">GOAL</span><span class="p">)):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">DOMAIN</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">initial_set</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">SET_SIZE</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="p">[</span><span class="n">create_random</span><span class="p">()]</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">DOMAIN</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">mutate_set</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">MULTIPLY</span><span class="p">):</span>
            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mutate</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">distance</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">GOAL</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">c1</span> <span class="o">!=</span> <span class="n">c2</span><span class="p">:</span>
            <span class="n">d</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">d</span>

<span class="k">def</span> <span class="nf">sorted_set</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">work</span> <span class="o">=</span> <span class="p">[(</span><span class="n">distance</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">s</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">mycmp</span><span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">cmp</span><span class="p">(</span><span class="n">e1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">e2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">work</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">mycmp</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">work</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">initial_set</span><span class="p">()</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">new_s</span> <span class="o">=</span> <span class="n">mutate_set</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">e</span> <span class="k">for</span> <span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="ow">in</span> <span class="n">sorted_set</span><span class="p">(</span><span class="n">new_s</span><span class="p">)[:</span><span class="n">SET_SIZE</span><span class="p">]]</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%04d</span><span class="s">: </span><span class="si">%2d</span><span class="s"> </span><span class="si">%s</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">distance</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">GOAL</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6295/addtag/" class="addtag" id="addtag_6295">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6295/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6295/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6295"
  >-</span><span
  class="button yellow"
  id="rating_z_6295"
  >0</span><span 
  class="button green"
  id="rating_p_6295"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6295/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6296">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6296/">#6296</a>(<script language="JavaScript">print_time(new Date("2008/05/18 13:30 GMT"));</script><noscript>2008/05/18 13:30 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>ソートの際の比較は、文字とその位置の一致の数を調べる #howManyMatch: を使っています。三つでは収束しないので五つに変えました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre>| ゴール 全英字 文字数 上位群 世代数 |
ゴール := &#39;METHINKSITISWEASEL&#39;.
文字数 := ゴール size.
全英字 := Character alphabet asUppercase.
上位群 := OrderedCollection new.
300 timesRepeat: [
    | 元文字列 |
    元文字列 := ((1 to: 文字数) collect: [:idx | 全英字 atRandom]) as: String.
    上位群 add: {元文字列 howManyMatch: ゴール. 元文字列}].
世代数 := 0.

World findATranscript:  nil.
[上位群 first last = ゴール] whileFalse: [
    | 候補群 |
    候補群 := OrderedCollection new.
    上位群 do: [:each |
        5 timesRepeat: [
            | 変異文字列 |
            変異文字列 := each last copy.
            変異文字列 at: 文字数 atRandom put: 全英字 atRandom.
            候補群 add: {変異文字列 howManyMatch: ゴール. 変異文字列}]].
    候補群 := 候補群 asArray sort: [:a :b | a first &gt; b first].
    上位群 := 候補群 first: 300.
    Transcript cr; show: (世代数 := 世代数 + 1) -&gt; 上位群 first].
^世代数
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6296/addtag/" class="addtag" id="addtag_6296">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6296/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6296/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6296"
  >-</span><span
  class="button yellow"
  id="rating_z_6296"
  >0</span><span 
  class="button green"
  id="rating_p_6296"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6296/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6297">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/806/" target="_top">taguo</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6297/">#6297</a>(<script language="JavaScript">print_time(new Date("2008/05/18 14:05 GMT"));</script><noscript>2008/05/18 14:05 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  3だとなかなか収束しないですね。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConsoleApplication1</span>
<span class="k">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MethinksItIsLikeAWeasel</span>
    <span class="k">{</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">CANDIDATE_COUNT</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">VALIDATION_COUNT</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">string</span> <span class="n">GOAL</span> <span class="p">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>
        <span class="k">static</span> <span class="n">Random</span> <span class="n">_rnd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>

        <span class="k">internal</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
        <span class="k">{</span>
            <span class="n">var</span> <span class="n">strs</span> <span class="p">=</span> <span class="n">CANDIDATE_COUNT</span>
                <span class="p">.</span><span class="n">Make</span><span class="p">(</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="kt">string</span><span class="p">(</span> <span class="n">GOAL</span><span class="p">.</span><span class="n">Length</span><span class="p">.</span><span class="n">Make</span><span class="p">(</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">GetChar</span><span class="p">()</span> <span class="p">).</span><span class="n">ToArray</span><span class="p">()</span> <span class="p">)</span> <span class="p">)</span>
                <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>

            <span class="kt">int</span> <span class="n">g</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span> <span class="n">strs</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">!=</span> <span class="n">GOAL</span> <span class="p">)</span>
            <span class="k">{</span>
                <span class="n">strs</span> <span class="p">=</span> <span class="n">strs</span>
                    <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span> <span class="n">str</span> <span class="p">=&gt;</span> <span class="n">VALIDATION_COUNT</span><span class="p">.</span><span class="n">Make</span><span class="p">(</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Replace</span><span class="p">(</span> <span class="n">str</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
                    <span class="p">.</span><span class="n">ToArray</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span> <span class="n">s</span> <span class="p">=&gt;</span> <span class="n">CalcPoint</span><span class="p">(</span> <span class="n">s</span> <span class="p">)</span> <span class="p">)</span>
                    <span class="p">.</span><span class="n">Take</span><span class="p">(</span> <span class="n">CANDIDATE_COUNT</span> <span class="p">)</span>
                    <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span> <span class="s">&quot;{0} {1} {2}&quot;</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">CalcPoint</span><span class="p">(</span> <span class="n">strs</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">),</span> <span class="n">strs</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">);</span>
                <span class="n">g</span><span class="p">++;</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="k">static</span> <span class="kt">int</span> <span class="nf">CalcPoint</span><span class="p">(</span> <span class="kt">string</span> <span class="n">str</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span> <span class="p">(</span> <span class="n">c</span><span class="p">,</span> <span class="n">i</span> <span class="p">)</span> <span class="p">=&gt;</span> <span class="n">c</span> <span class="p">==</span> <span class="n">GOAL</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span> <span class="p">).</span><span class="n">Sum</span><span class="p">();</span>
        <span class="k">}</span>

        <span class="k">static</span> <span class="kt">string</span> <span class="nf">Replace</span><span class="p">(</span> <span class="kt">string</span> <span class="n">str</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="n">_rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span> <span class="n">str</span><span class="p">.</span><span class="n">Length</span> <span class="p">);</span>
            <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span> <span class="n">index</span><span class="p">,</span> <span class="m">1</span> <span class="p">).</span><span class="n">Insert</span><span class="p">(</span> <span class="n">index</span><span class="p">,</span> <span class="n">GetChar</span><span class="p">().</span><span class="n">ToString</span><span class="p">()</span> <span class="p">);</span>
        <span class="k">}</span>

        <span class="k">static</span> <span class="kt">char</span> <span class="nf">GetChar</span><span class="p">()</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span> <span class="n">_rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span> <span class="m">26</span> <span class="p">)</span> <span class="p">+</span> <span class="m">65</span> <span class="p">);</span>
        <span class="k">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Make</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span> <span class="k">this</span> <span class="kt">int</span> <span class="n">count</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">func</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span> <span class="m">0</span><span class="p">,</span> <span class="n">count</span> <span class="p">).</span><span class="n">Select</span><span class="p">(</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">func</span><span class="p">()</span> <span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6297/addtag/" class="addtag" id="addtag_6297">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6297/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6297/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6297"
  >-</span><span
  class="button yellow"
  id="rating_z_6297"
  >0</span><span 
  class="button green"
  id="rating_p_6297"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6297/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6298">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6298/">#6298</a>(<script language="JavaScript">print_time(new Date("2008/05/18 15:07 GMT"));</script><noscript>2008/05/18 15:07 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>3だと収束しないので5で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>import scala.util.Sorting.stableSort
class Weasel(val target:String) {
  val rnd = new Random
  val len = target.size
  val chars = (65 to 90).map(_.asInstanceOf[char])
  def newchar = chars(rnd.nextInt(chars.size))

  def similarity(s:String) = (len /: (0 until len)){(r,i) =&gt; 
    r-(if(target(i) == s(i)){1}else{0})
  }

  def sort(lst:Seq[String]) = stableSort(lst, similarity _).toList

  def mutate(s:String) = (1 to 5).map{x=&gt; 
    var a = s.toArray
    a(rnd.nextInt(len)) = newchar
    a.mkString(&quot;&quot;)
  }
 

  def start = {
    val lst = sort((1 to 300).map(x=&gt;(1 to len).map(y=&gt;newchar).mkString(&quot;&quot;)))
    def iter(ss:List[String], generation:int):unit = {
      printf(&quot;Generation %d\n%s\n%s\n\n&quot;, generation, &quot;-&quot;*40, ss.take(5).mkString(&quot;\n&quot;))
      ss match {
        case head::rest if head == target =&gt; ()
        case x =&gt; 
          iter(sort(x.flatMap(mutate)).take(300), generation+1)
      }
    }
    iter(lst, 0)
  }
}

new Weasel(&quot;METHINKSITISAWEASEL&quot;).start
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6298/addtag/" class="addtag" id="addtag_6298">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6298/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6298/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6298"
  >-</span><span
  class="button yellow"
  id="rating_z_6298"
  >0</span><span 
  class="button green"
  id="rating_p_6298"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6298/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6299">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/483/" target="_top">nil</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6299/">#6299</a>(<script language="JavaScript">print_time(new Date("2008/05/18 15:20 GMT"));</script><noscript>2008/05/18 15:20 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  密かに20文字じゃなくて19文字じゃないかと。。。。

ちょっと無駄なところを省いて動いています。

perlが入っていれば第一引数の任意の文字列で同じことができます。(コマンドライン|ターミナル)からも動くので遊んでみてください。

正規表現で最初点数つけていたのですが
まったく速度的に異常なことに....

いろいろ考えさせてもらって楽しかったですytakenakaさんありがとう!!
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$goal</span> <span class="o">=</span> <span class="nb">uc</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">||</span> <span class="sx">q{METHINKSITISAWEASEL}</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@table</span><span class="p">;</span>
     <span class="c1"># $table[$id]-&gt;[0] 文字列</span>
     <span class="c1"># $table[$id]-&gt;[1] 近似スコア</span>
<span class="k">my</span> <span class="nv">$total_calc</span><span class="p">;</span>
     <span class="c1">#キャッシュ数</span>
<span class="k">my</span> <span class="nv">$cash</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> 


<span class="vg">$|</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="c1"># 計算途中に結果を見たいのでバッファオフ</span>


<span class="n">INIT:</span> 
      <span class="c1">#@tableに300個ランダムな文字列を生成</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$id</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">299</span><span class="p">){</span>
     <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
      <span class="k">for</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)){</span>
        <span class="nv">$table</span><span class="p">[</span><span class="nv">$id</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">.=</span> <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
<span class="k">BEGIN</span><span class="p">:</span>
    <span class="o">++</span><span class="nv">$total_calc</span><span class="p">;</span>
    
        <span class="c1">#各項目を1文字何かに変えて$cash数分配</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$cnt</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$#table</span><span class="p">){</span>
     <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$cash</span><span class="p">)</span> <span class="p">{</span>
     <span class="nv">$table</span><span class="p">[</span><span class="nv">$cnt</span> <span class="o">+</span> <span class="nv">$_</span> <span class="o">*</span> <span class="mi">300</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">one_chr_enig</span><span class="p">(</span><span class="nv">$table</span><span class="p">[</span><span class="nv">$cnt</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nb">undef</span><span class="p">];</span>
     <span class="p">}</span>
    <span class="p">}</span>
        <span class="c1">#各項目を点数化 0 -&gt; undef</span>
    <span class="nv">@table</span> <span class="o">=</span> <span class="n">set_score</span><span class="p">(</span><span class="nv">@table</span><span class="p">);</span>
        <span class="c1"># 順列にソート</span>
    <span class="nv">@table</span> <span class="o">=</span> <span class="nb">sort</span><span class="p">{</span><span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;=&gt;</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span> <span class="nv">@table</span><span class="p">;</span>
        <span class="c1">#@tabel の299以下の要素を切り捨てる</span>
    <span class="nv">$#table</span> <span class="o">=</span> <span class="mi">299</span><span class="p">;</span>

        <span class="c1">#結果出力</span>
    <span class="k">print</span> <span class="p">(</span><span class="nv">$table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
              <span class="o">.</span>  <span class="sx">q{ (score) : }</span> <span class="o">.</span> <span class="nv">$table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
              <span class="o">.</span>  <span class="sx">q{ (steps) : }</span> <span class="o">.</span><span class="s">&quot; $total_calc  \n&quot;</span>
          <span class="p">);</span>
    
<span class="k">unless</span><span class="p">(</span><span class="nv">$table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">))</span>
 <span class="p">{</span><span class="nb">goto</span> <span class="k">BEGIN</span><span class="p">};</span>

    <span class="c1">#計算結果を算出    </span>
<span class="k">sub </span><span class="nf">set_score</span> <span class="p">{</span>
   <span class="k">my</span> <span class="nv">@table</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
         <span class="k">for</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$#table</span><span class="p">){</span>
              <span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="nv">$table</span><span class="p">[</span><span class="nv">$_</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
              <span class="k">my</span> <span class="nv">@pre</span> <span class="o">=</span><span class="nb">split</span><span class="sr">//</span><span class="p">,</span><span class="nv">$goal</span><span class="p">;</span>
              <span class="k">my</span> <span class="nv">$score</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)){</span>
                  <span class="k">if</span> <span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">eq</span> <span class="nv">$pre</span><span class="p">[</span><span class="nv">$_</span><span class="p">]){</span>
                   <span class="o">++</span><span class="nv">$score</span><span class="p">;</span>
                  <span class="p">}</span>
                <span class="p">}</span>
              <span class="nv">$table</span><span class="p">[</span><span class="nv">$_</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$score</span><span class="p">;</span>
         <span class="p">}</span>
  <span class="k">return</span> <span class="nv">@table</span><span class="p">;</span>
<span class="p">}</span>

    <span class="c1">#与えた文字列をランダムに一文字交換</span>
<span class="k">sub </span><span class="nf">one_chr_enig</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">@str</span> <span class="o">=</span> <span class="nb">split</span><span class="sr">//</span><span class="p">,</span><span class="nb">shift</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
  <span class="nv">$str</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">))]</span> <span class="o">=</span>  <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nb">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nv">@str</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6299/addtag/" class="addtag" id="addtag_6299">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6299/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6299/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6299"
  >-</span><span
  class="button yellow"
  id="rating_z_6299"
  >0</span><span 
  class="button green"
  id="rating_p_6299"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20091017222844/http://ja.doukaku.org/comment/6299/">
    1
    reply
  </a>

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6299/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6300">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/483/" target="_top">nil</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6300/">#6300</a>(<script language="JavaScript">print_time(new Date("2008/05/18 16:03 GMT"));</script><noscript>2008/05/18 16:03 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  訂正
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>    <span class="c1">#与えた文字列をランダムに一文字交換</span>
<span class="k">sub </span><span class="nf">one_chr_enig</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">@str</span> <span class="o">=</span> <span class="nb">split</span><span class="sr">//</span><span class="p">,</span><span class="nb">shift</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
  <span class="nv">$str</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">))]</span> <span class="o">=</span>  <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nb">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nv">@str</span><span class="p">);</span>
<span class="p">}</span>

<span class="err">よりも下記のほうが俄然早いです。</span>

    <span class="c1">#与えた文字列をランダムに一文字交換</span>
<span class="k">sub </span><span class="nf">one_chr_enig</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
  <span class="nb">substr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6300/addtag/" class="addtag" id="addtag_6300">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6300/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6300/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6300"
  >-</span><span
  class="button yellow"
  id="rating_z_6300"
  >0</span><span 
  class="button green"
  id="rating_p_6300"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6299/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6300/root/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6300/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6301">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/59/" target="_top">nori</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6301/">#6301</a>(<script language="JavaScript">print_time(new Date("2008/05/19 02:48 GMT"));</script><noscript>2008/05/19 02:48 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>収束しないのでmutationしないものも次世代に持ち越してしまうようしてしまいましたが・・・。
     ng = ng + list(g.spawn_mutant()) + [g]
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/python</span>
<span class="c"># -*- encoding=us-ascii -*-</span>
<span class="c">#</span>
<span class="k">import</span> <span class="nn">random</span>


<span class="k">class</span> <span class="nc">Gene</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="n">seed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">base_alpha</span> <span class="o">=</span> <span class="s">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span>
  <span class="n">goal</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span>
  <span class="n">memoize</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
  <span class="k">def</span> <span class="nf">generate_rnd_code</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">base_alpha</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">goal</span><span class="p">))])</span>

  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">code</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_rnd_code</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span>

  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">goal</span><span class="p">:</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="n">target</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">diff</span> <span class="o">*</span> <span class="n">diff</span> <span class="o">+</span> <span class="n">score</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">target</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
        <span class="c">#return abs(diff) + score(goal[1:], target[1:])</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">goal</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>
  <span class="k">def</span> <span class="nf">which_base_to_mutate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">goal</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">substitute_candidates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="c">#cand = self.base_alpha.replace(base, &#39;&#39;)</span>
    <span class="n">cand</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">base_alpha</span><span class="p">[:]</span>
    <span class="n">cand</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
    <span class="n">cand</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cand</span><span class="p">[:</span><span class="n">count</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">spawn_mutant</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_children</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n_children</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">n_children</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">nth</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">which_base_to_mutate</span><span class="p">()</span>
    <span class="n">old_base</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[</span><span class="n">nth</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">new_base</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">substitute_candidates</span><span class="p">(</span><span class="n">old_base</span><span class="p">,</span> <span class="n">n_children</span><span class="p">):</span>
      <span class="k">yield</span> <span class="n">Gene</span><span class="p">(</span><span class="n">code</span><span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[:</span><span class="n">nth</span><span class="p">]</span> <span class="o">+</span> <span class="n">new_base</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[</span><span class="n">nth</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>

<span class="k">class</span> <span class="nc">GeneVat</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mass</span><span class="p">,</span> <span class="n">n_children</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">genes</span> <span class="o">=</span> <span class="p">[</span><span class="n">Gene</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mass</span><span class="p">)]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">n_children</span> <span class="o">=</span> <span class="n">n_children</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">mass</span> <span class="o">=</span> <span class="n">mass</span>

  <span class="k">def</span> <span class="nf">create_ng</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">ng</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">genes</span><span class="p">:</span>
      <span class="n">ng</span> <span class="o">=</span> <span class="n">ng</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">spawn_mutant</span><span class="p">())</span> <span class="o">+</span> <span class="p">[</span><span class="n">g</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">ng</span>

  <span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xs</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">cmp_by_score</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
      <span class="n">xs</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">score</span><span class="p">()</span>
      <span class="n">ys</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="n">score</span><span class="p">()</span>
      <span class="k">if</span> <span class="n">xs</span> <span class="o">&lt;</span> <span class="n">ys</span><span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
      <span class="k">elif</span> <span class="n">xs</span> <span class="o">&gt;</span> <span class="n">ys</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="k">assert</span><span class="p">(</span><span class="n">xs</span> <span class="o">==</span> <span class="n">ys</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="n">xs</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">cmp_by_score</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[:</span><span class="bp">self</span><span class="o">.</span><span class="n">mass</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">evolve</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">genes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">create_ng</span><span class="p">())</span>

  <span class="k">def</span> <span class="nf">head</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">genes</span><span class="p">[:</span><span class="mi">5</span><span class="p">]:</span>
      <span class="k">print</span> <span class="n">g</span><span class="o">.</span><span class="n">score</span><span class="p">(),</span> <span class="n">g</span><span class="o">.</span><span class="n">code</span>


<span class="n">vat</span> <span class="o">=</span> <span class="n">GeneVat</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">vat</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">vat</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">score</span><span class="p">()</span><span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="n">vat</span><span class="o">.</span><span class="n">evolve</span><span class="p">()</span>
  <span class="k">print</span> <span class="s">&#39;generation </span><span class="si">%i</span><span class="s">&#39;</span><span class="o">%</span><span class="n">i</span>
  <span class="n">vat</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6301/addtag/" class="addtag" id="addtag_6301">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6301/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6301/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6301"
  >-</span><span
  class="button yellow"
  id="rating_z_6301"
  >0</span><span 
  class="button green"
  id="rating_p_6301"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6301/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6304">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6304/">#6304</a>(<script language="JavaScript">print_time(new Date("2008/05/19 13:12 GMT"));</script><noscript>2008/05/19 13:12 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>他と同じく、3だと収束しないので5です。
また、ブラウザが固まらないようにsetTimeoutを使っています。Rhinoなどで実行する場合は、setTimerのところをwhileループにでもして下さい。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;METHINKSITISAWEASEL&quot;</span><span class="o">;</span>
  <span class="k">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">initialData</span><span class="p">(</span><span class="mi">300</span><span class="o">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">,</span> <span class="nx">x</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">mutate</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
  <span class="nx">setTimer</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutate</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">function</span> <span class="nx">setTimer</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="o">,</span> <span class="nx">count</span><span class="o">,</span> <span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">print</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="o">;</span>
    <span class="p">}</span>
    <span class="nx">data</span> <span class="o">=</span> <span class="nx">mutateAndSelect</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="p">);</span>
    <span class="nx">setTimer</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="o">,</span> <span class="nx">count</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="nx">interval</span><span class="p">);</span>
  <span class="p">}</span><span class="o">,</span> <span class="nx">interval</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">mutateAndSelect</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">mutateNum</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="nx">n</span><span class="o">=</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">mutateNum</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ar</span><span class="p">[</span><span class="nx">i</span><span class="o">*</span><span class="nx">mutateNum</span> <span class="o">+</span> <span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">mutate</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">ar</span><span class="o">,</span> <span class="nx">x</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">data</span><span class="o">,</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">cache</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">data</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">da</span> <span class="o">=</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
    <span class="k">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">cache</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">da</span> <span class="o">-</span> <span class="nx">db</span><span class="o">;</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">data</span><span class="o">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">initialData</span><span class="p">(</span><span class="nx">num</span><span class="o">,</span> <span class="nx">len</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">num</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ar</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">randomString</span><span class="p">(</span><span class="nx">len</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">ar</span><span class="o">;</span>
<span class="p">}</span>
<span class="k">function</span> <span class="nx">randomString</span><span class="p">(</span><span class="nx">len</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">chars</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">len</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">chars</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">65</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">26</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">());</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="kc">null</span><span class="o">,</span> <span class="nx">chars</span><span class="p">);</span>
<span class="p">}</span>

<span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">differenceFrom</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">diff</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span> <span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="nx">n</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="k">this</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">!=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="nx">diff</span><span class="o">++;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">diff</span><span class="o">;</span>
<span class="p">}</span>

<span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">mutate</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
  <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="nx">x</span><span class="p">)</span> <span class="o">+</span> 
    <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="mi">65</span> <span class="o">+</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">26</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()))</span>
         <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nx">infoArea</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">));</span>
<span class="nx">infoArea</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="s2">&quot; &quot;</span><span class="o">;</span>
<span class="k">function</span> <span class="nx">print</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">infoArea</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">.</span><span class="nx">nodeValue</span> <span class="o">=</span> <span class="nx">str</span><span class="o">;</span>
<span class="p">}</span>

<span class="nx">test</span><span class="p">();</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6304/addtag/" class="addtag" id="addtag_6304">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/Firefox/">Firefox</a>
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/IE/">IE</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6304/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6304/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6304"
  >-</span><span
  class="button yellow"
  id="rating_z_6304"
  >0</span><span 
  class="button green"
  id="rating_p_6304"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6304/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6306">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6306/">#6306</a>(<script language="JavaScript">print_time(new Date("2008/05/20 11:22 GMT"));</script><noscript>2008/05/20 11:22 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>みんな言ってるけど、３じゃだめですね・・・。
評価関数を工夫してどうにかしようと奮闘したけどだめでした。</p>
<p>遺伝子（と呼びたい）に、ムダな領域を追加すると、３でも収束します。実質、変異率を下げたのと同じことですが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Methinks</span>
<span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">static</span> <span class="n">String</span> <span class="n">GOAL</span> <span class="p">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>
        <span class="k">static</span> <span class="n">String</span> <span class="n">CHARS</span> <span class="p">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">;</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hello World!&quot;</span><span class="p">);</span>
            
            <span class="kt">int</span> <span class="n">CAPACITY_SMALL</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>    <span class="c">//容量</span>
            <span class="kt">int</span> <span class="n">CHILDREN</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>            <span class="c">//子供の数</span>
            <span class="kt">int</span> <span class="n">INTRON</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>                <span class="c">//ムダ領域</span>
            <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;[]</span> <span class="n">pools</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;[]</span> <span class="k">{</span>
                <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;(),</span>
                <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;()</span>
            <span class="k">}</span><span class="p">;</span>
            <span class="n">Random</span> <span class="n">rand</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
            
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">CAPACITY_SMALL</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="k">{</span>
                <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">n</span> <span class="p">&lt;</span> <span class="p">(</span><span class="n">GOAL</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="n">INTRON</span><span class="p">);</span> <span class="n">n</span><span class="p">++)</span> <span class="k">{</span>
                    <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">CHARS</span><span class="p">[</span><span class="n">rand</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">CHARS</span><span class="p">.</span><span class="n">Length</span><span class="p">)]);</span>
                <span class="k">}</span>
                <span class="n">AddMember</span><span class="p">(</span><span class="n">pools</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
            <span class="k">}</span>

            <span class="kt">int</span> <span class="n">g</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">turn</span> <span class="p">=</span> <span class="n">g</span> <span class="p">%</span> <span class="m">2</span><span class="p">;</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Values</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">GOAL</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="p">!=</span> <span class="n">GOAL</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}: Top = [{1}], {2}&quot;</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Values</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Keys</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>

                <span class="kt">int</span> <span class="n">next</span> <span class="p">=</span> <span class="p">(</span><span class="n">g</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">%</span> <span class="m">2</span><span class="p">;</span>
                <span class="n">pools</span><span class="p">[</span><span class="n">next</span><span class="p">].</span><span class="n">Clear</span><span class="p">();</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">CAPACITY_SMALL</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="k">{</span>
                    
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">c</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">c</span> <span class="p">&lt;</span> <span class="n">CHILDREN</span><span class="p">;</span> <span class="n">c</span><span class="p">++)</span> <span class="k">{</span>
                        <span class="kt">int</span> <span class="n">pos</span> <span class="p">=</span> <span class="n">rand</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">GOAL</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="n">INTRON</span><span class="p">);</span>
                        <span class="n">StringBuilder</span> <span class="n">child</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
                        <span class="n">child</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Values</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="n">pos</span><span class="p">));</span>
                        <span class="n">child</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">CHARS</span><span class="p">[</span><span class="n">rand</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">CHARS</span><span class="p">.</span><span class="n">Length</span><span class="p">)]);</span>
                        <span class="n">child</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Values</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">pos</span><span class="p">+</span><span class="m">1</span><span class="p">));</span>
                        <span class="n">AddMember</span><span class="p">(</span><span class="n">pools</span><span class="p">[</span><span class="n">next</span><span class="p">],</span> <span class="n">child</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
                    <span class="k">}</span>
                <span class="k">}</span>
                <span class="n">g</span><span class="p">++;</span>
                <span class="n">turn</span> <span class="p">=</span> <span class="n">g</span> <span class="p">%</span> <span class="m">2</span><span class="p">;</span>
            <span class="k">}</span>
                
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}: Top = [{1}], {2}&quot;</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Values</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">pools</span><span class="p">[</span><span class="n">turn</span><span class="p">].</span><span class="n">Keys</span><span class="p">[</span><span class="m">0</span><span class="p">]);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;Press any key to continue . . . &quot;</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">AddMember</span><span class="p">(</span><span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="n">pool</span><span class="p">,</span> <span class="n">String</span> <span class="n">member</span><span class="p">)</span> <span class="k">{</span>
            <span class="kt">int</span> <span class="n">score</span> <span class="p">=</span> <span class="n">GetScore</span><span class="p">(</span><span class="n">member</span><span class="p">);</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">pool</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">score</span><span class="p">))</span><span class="k">{</span>
                <span class="n">score</span><span class="p">++;</span>
            <span class="k">}</span>
            <span class="n">pool</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">score</span><span class="p">,</span> <span class="n">member</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">static</span> <span class="kt">int</span> <span class="nf">GetScore</span><span class="p">(</span><span class="n">String</span> <span class="n">s</span><span class="p">)</span> <span class="k">{</span>
            <span class="kt">int</span> <span class="n">score</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">GOAL</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span><span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">==</span> <span class="n">GOAL</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="k">{</span>
                    <span class="n">score</span><span class="p">--;</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="k">return</span> <span class="n">score</span> <span class="p">*</span> <span class="m">1000</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6306/addtag/" class="addtag" id="addtag_6306">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/C%232.0/">C#2.0</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6306/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6306/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6306"
  >-</span><span
  class="button yellow"
  id="rating_z_6306"
  >0</span><span 
  class="button green"
  id="rating_p_6306"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6306/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6309">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6309/">#6309</a>(<script language="JavaScript">print_time(new Date("2008/05/20 20:43 GMT"));</script><noscript>2008/05/20 20:43 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  お題を次のように変更しました。<br/><br/>1.&nbsp;目標文字列は&nbsp;"METHINKS&nbsp;IT&nbsp;IS&nbsp;LIKE&nbsp;A&nbsp;WEASEL"&nbsp;を使う。<br/>2.&nbsp;お題では変化させた文字列３通りだけをソートするようになってい（ると思い）ますが、収束を保証できないので、元の文字列も残すようにする。<br/>3.&nbsp;変化は３通りでなくて、１通りとする。<br/><br/>手元で一回走らせた限りでは、200回程度で収束しました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">string</span>
<span class="k">import</span> <span class="nn">random</span>
<span class="k">import</span> <span class="nn">itertools</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">goal</span> <span class="o">=</span> <span class="s">&quot;METHINKS IT IS LIKE A WEASEL&quot;</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">300</span>
    <span class="k">def</span> <span class="nf">char</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">ascii_uppercase</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">char</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">goal</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">count</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">generation</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">key</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
            <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">c1</span> <span class="o">!=</span> <span class="n">c2</span><span class="p">)</span> <span class="k">for</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">izip</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span>
        <span class="n">a</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="n">key</span><span class="p">)</span>
        <span class="k">del</span> <span class="n">a</span><span class="p">[</span><span class="n">count</span><span class="p">:]</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%4d</span><span class="s">: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">generation</span><span class="p">,</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">goal</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">a</span><span class="p">[:]:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
            <span class="n">a</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">char</span><span class="p">()</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6309/addtag/" class="addtag" id="addtag_6309">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6309/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6309/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6309"
  >-</span><span
  class="button yellow"
  id="rating_z_6309"
  >0</span><span 
  class="button green"
  id="rating_p_6309"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20091017222844/http://ja.doukaku.org/comment/6309/">
    1
    reply
  </a>

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6309/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6310">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/654/" target="_top">kh</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6310/">#6310</a>(<script language="JavaScript">print_time(new Date("2008/05/20 21:46 GMT"));</script><noscript>2008/05/20 21:46 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>問題文そのまま。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre><span class="k">private</span> <span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>, <span class="n">std</span>.<span class="n">string</span>, <span class="n">std</span>.<span class="n">algorithm</span>, <span class="n">std</span>.<span class="n">random</span>, <span class="n">std</span>.<span class="n">contracts</span>;

<span class="k">const</span> <span class="n">target</span> = <span class="s">&quot;METHINKSITISAWEASEL&quot;</span>;
<span class="k">const</span> <span class="n">capacity</span> = <span class="mi">300</span>;
<span class="k">const</span> <span class="n">children</span> = <span class="mi">5</span>;

<span class="n">Random</span> <span class="n">rand</span>;
<span class="k">static</span> <span class="k">this</span>() {
    <span class="n">rand</span> = <span class="n">Random</span>(<span class="n">unpredictableSeed</span>);
}

<span class="kt">void</span> <span class="n">main</span>() {
    <span class="k">auto</span> <span class="n">strings</span> = <span class="k">new</span> <span class="n">string</span>[<span class="n">capacity</span>];
    <span class="k">foreach</span>(<span class="k">ref</span> <span class="n">s</span>; <span class="n">strings</span>) <span class="n">s</span> = <span class="n">randomString</span>;

    <span class="kt">int</span> <span class="n">generation</span>;
    <span class="k">do</span> {
        <span class="k">auto</span> <span class="n">temp</span> = <span class="k">new</span> <span class="n">string</span>[<span class="n">strings</span>.<span class="n">length</span> * <span class="n">children</span>];
        <span class="k">foreach</span>(<span class="n">i</span>, <span class="k">ref</span> <span class="n">s</span>; <span class="n">temp</span>) <span class="n">s</span> = <span class="n">changeChar</span>(<span class="n">strings</span>[<span class="n">i</span>/<span class="n">children</span>]);
        <span class="n">schwartzSort</span>!(<span class="n">distance</span>)(<span class="n">temp</span>);
        <span class="n">strings</span> = <span class="n">temp</span>[<span class="mf">0.</span>.<span class="n">capacity</span>];

        <span class="n">writefln</span>(<span class="s">&quot;[%s] %s (%s)&quot;</span>, ++<span class="n">generation</span>, <span class="n">strings</span>[<span class="mi">0</span>], <span class="n">distance</span>(<span class="n">strings</span>[<span class="mi">0</span>]));
    } <span class="k">while</span>(<span class="n">strings</span>[<span class="mi">0</span>] != <span class="n">target</span>);
    <span class="n">writefln</span>(<span class="s">&quot;Now, we have %s!&quot;</span>, <span class="n">target</span>);
}

<span class="kt">char</span> <span class="n">randomChar</span>() {
    <span class="k">alias</span> <span class="n">UniformDistribution</span>!(<span class="kt">int</span>, <span class="s">&quot;[]&quot;</span>) <span class="n">Dist</span>;

    <span class="k">return</span> <span class="n">Dist</span>(<span class="sc">&#39;A&#39;</span>, <span class="sc">&#39;Z&#39;</span>).<span class="n">next</span>(<span class="n">rand</span>);
}

<span class="n">string</span> <span class="n">randomString</span>() {
    <span class="k">auto</span> <span class="n">result</span> = <span class="k">new</span> <span class="kt">char</span>[<span class="n">target</span>.<span class="n">length</span>];
    <span class="k">foreach</span>(<span class="k">ref</span> <span class="n">c</span>; <span class="n">result</span>) <span class="n">c</span> = <span class="n">randomChar</span>;
    <span class="k">return</span> <span class="n">assumeUnique</span>(<span class="n">result</span>);
}

<span class="n">string</span> <span class="n">changeChar</span>(<span class="n">string</span> <span class="n">str</span>) {
    <span class="k">alias</span> <span class="n">UniformDistribution</span>!(<span class="kt">int</span>) <span class="n">Dist</span>;

    <span class="k">auto</span> <span class="n">result</span> = <span class="n">str</span>.<span class="n">dup</span>;
    <span class="n">result</span>[<span class="n">Dist</span>(<span class="mi">0</span>, <span class="n">result</span>.<span class="n">length</span>).<span class="n">next</span>(<span class="n">rand</span>)] = <span class="n">randomChar</span>;
    <span class="k">return</span> <span class="n">assumeUnique</span>(<span class="n">result</span>);
}

<span class="kt">int</span> <span class="n">distance</span>(<span class="n">string</span> <span class="n">str</span>) {
    <span class="kt">int</span> <span class="n">d</span>;
    <span class="k">assert</span>(<span class="n">str</span>.<span class="n">length</span> == <span class="n">target</span>.<span class="n">length</span>);
    <span class="k">foreach</span>(<span class="n">i</span>; <span class="mf">0.</span>.<span class="n">target</span>.<span class="n">length</span>) {
        <span class="k">if</span>(<span class="n">str</span>[<span class="n">i</span>] != <span class="n">target</span>[<span class="n">i</span>]) ++<span class="n">d</span>;
    }
    <span class="k">return</span> <span class="n">d</span>;
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6310/addtag/" class="addtag" id="addtag_6310">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6310/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6310/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6310"
  >-</span><span
  class="button yellow"
  id="rating_z_6310"
  >0</span><span 
  class="button green"
  id="rating_p_6310"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6310/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6311">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/">#6311</a>(<script language="JavaScript">print_time(new Date("2008/05/20 23:04 GMT"));</script><noscript>2008/05/20 23:04 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>C++に移植してみました。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20091017222844/http://homepage3.nifty.com/mmgames/c_guide/21-02.html">乱数の範囲を限定する</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;iomanip&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;cstdlib&gt; </span><span class="c">// rand, RAND_MAX</span>
<span class="cp">#include &lt;cassert&gt;</span>
<span class="cp">#include &lt;ctime&gt;</span>

<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">goal</span> <span class="o">=</span> <span class="s">&quot;METHINKS IT IS LIKE A WEASEL&quot;</span><span class="p">;</span>

<span class="n">size_t</span> <span class="n">random</span><span class="p">(</span><span class="n">size_t</span> <span class="n">n</span><span class="p">)</span> <span class="c">// [0, n)</span>
<span class="p">{</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="n">size_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="p">()</span> <span class="o">*</span> <span class="p">(</span><span class="n">n</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">RAND_MAX</span> <span class="o">+</span> <span class="mf">1.0</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">char</span> <span class="n">random_char</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">table</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">table</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">table</span><span class="p">))];</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">random_string</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span><span class="p">;</span>

    <span class="n">s</span><span class="p">.</span><span class="n">resize</span><span class="p">(</span><span class="n">goal</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">generate</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">random_char</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">s</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">class</span> <span class="nc">sentence</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">explicit</span> <span class="n">sentence</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">random_string</span><span class="p">());</span>

    <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">str</span><span class="p">()</span> <span class="k">const</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">_s</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">friend</span> <span class="kt">bool</span> <span class="k">operator</span><span class="o">&lt;</span><span class="p">(</span><span class="k">const</span> <span class="n">sentence</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">sentence</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">_diff</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">_diff</span><span class="p">;</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">_s</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">_diff</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">sentence</span><span class="o">::</span><span class="n">sentence</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">s</span><span class="p">)</span> <span class="o">:</span> <span class="n">_s</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">_diff</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">goal</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">goal</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="o">++</span><span class="n">_diff</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">srand</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>

    <span class="k">const</span> <span class="n">size_t</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">sentence</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">(</span><span class="n">count</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">generation</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">;</span> <span class="o">++</span><span class="n">generation</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

        <span class="n">v</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span> <span class="o">+</span> <span class="n">count</span><span class="p">,</span> <span class="n">v</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">generation</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;: &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">str</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">front</span><span class="p">().</span><span class="n">str</span><span class="p">()</span> <span class="o">==</span> <span class="n">goal</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">str</span><span class="p">();</span>

            <span class="n">s</span><span class="p">[</span><span class="n">random</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">size</span><span class="p">())]</span> <span class="o">=</span> <span class="n">random_char</span><span class="p">();</span>

            <span class="n">v</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">sentence</span><span class="p">(</span><span class="n">s</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/addtag/" class="addtag" id="addtag_6311">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6311"
  >-</span><span
  class="button yellow"
  id="rating_z_6311"
  >0</span><span 
  class="button green"
  id="rating_p_6311"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6309/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/root/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/">
    1
    reply
  </a>

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6311/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6312">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6312/">#6312</a>(<script language="JavaScript">print_time(new Date("2008/05/21 05:09 GMT"));</script><noscript>2008/05/21 05:09 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>本当にこれで高速化するか試してませんが・・・部分ソートというのがあるみたいなので、使ってみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- main.cpp.old    Wed May 21 13:00:14 2008</span>
<span class="gi">+++ main.cpp.new    Wed May 21 19:04:41 2008</span>
<span class="gu">@@ -78,7 +78,7 @@</span>
 
     for (size_t generation = 1; ; ++generation)
     {
<span class="gd">-        std::sort(v.begin(), v.end());</span>
<span class="gi">+        std::partial_sort(v.begin(), v.begin() + count, v.end());</span>
 
         v.erase(v.begin() + count, v.end());
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6312/addtag/" class="addtag" id="addtag_6312">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6312/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6312/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6312"
  >-</span><span
  class="button yellow"
  id="rating_z_6312"
  >0</span><span 
  class="button green"
  id="rating_p_6312"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6311/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20091017222844/http://ja.doukaku.org/comment/6312/root/"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6312/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6315">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/483/" target="_top">nil</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6315/">#6315</a>(<script language="JavaScript">print_time(new Date("2008/05/21 23:01 GMT"));</script><noscript>2008/05/21 23:01 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>全く余談ですが
METHINKS IT IS A WEASEL は

ハムレットの第三幕第二場のセリフで

ハムレットは彼に、雲を指しながら、「まるでラクダ」、「イタチにも思える」、 
「鯨にも見える」と統一性のない事を言うが、それにポローニアスも意見を合わせてくる。 
「みんなして俺をうまくあしらいやがって」とハムレットは呟き ... の部分のセリフみたいです。

どうも何を意味しているのか分からなかったので。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6315/addtag/" class="addtag" id="addtag_6315">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/%E6%97%A5%E6%9C%AC%E8%AA%9E/">日本語</a>
    
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6315"
  >-</span><span
  class="button yellow"
  id="rating_z_6315"
  >0</span><span 
  class="button green"
  id="rating_p_6315"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6315/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6343">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/760/" target="_top">turugina</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6343/">#6343</a>(<script language="JavaScript">print_time(new Date("2008/05/26 03:26 GMT"));</script><noscript>2008/05/26 03:26 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>最終の文字列を&quot;METHINKS IT IS A WEASEL&quot;にして、
２：のソートをシュウォーツ変換っぽく。
あとやっぱり、派生が3つだと収束しないので5つで。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20091017222844/http://en.wikipedia.org/wiki/Schwartzian_transform">Schwartzian transform</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;cstdlib&gt;</span>
<span class="cp">#include &lt;iomanip&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;utility&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>

<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">GOAL</span><span class="p">(</span><span class="s">&quot;METHINKS IT IS A WEASEL&quot;</span><span class="p">);</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">MULTI_NUM</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span>
<span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">INIT_SIZE</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">strlist_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">keyed_t</span><span class="p">;</span>

<span class="kt">char</span>
<span class="n">gen_char</span><span class="p">()</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">CANDIDATES</span><span class="p">(</span><span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ &quot;</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">CANDIDATES</span><span class="p">[</span><span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="n">CANDIDATES</span><span class="p">.</span><span class="n">size</span><span class="p">()];</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span>
<span class="n">gen_seed</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">seed</span><span class="p">(</span><span class="n">GOAL</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">generate</span><span class="p">(</span>
      <span class="n">seed</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">seed</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">gen_char</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">seed</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">char</span>
<span class="n">diff_char</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="n">r</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">r</span> <span class="o">?</span> <span class="n">r</span> <span class="o">-</span> <span class="n">l</span> <span class="o">:</span> <span class="n">l</span> <span class="o">-</span> <span class="n">r</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">keyed_t</span>
<span class="n">make_diff</span><span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&amp;</span> <span class="n">seed</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">diff</span><span class="p">(</span><span class="n">seed</span><span class="p">.</span><span class="n">size</span><span class="p">(),</span> <span class="sc">&#39;\0&#39;</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span>
      <span class="n">seed</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">seed</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">GOAL</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span>
      <span class="n">diff</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span>
      <span class="n">diff_char</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">make_pair</span><span class="p">(</span><span class="n">diff</span><span class="p">,</span> <span class="n">seed</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">bool</span>
<span class="n">diff_cmp</span><span class="p">(</span><span class="k">const</span> <span class="n">keyed_t</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">keyed_t</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">string</span>
<span class="n">extract_seed</span><span class="p">(</span><span class="k">const</span> <span class="n">keyed_t</span><span class="o">&amp;</span> <span class="n">dpair</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">return</span> <span class="n">dpair</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="n">sort_seeds</span><span class="p">(</span><span class="n">strlist_t</span><span class="o">&amp;</span> <span class="n">seeds</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">keyed_t</span><span class="o">&gt;</span> <span class="n">difflist</span><span class="p">;</span>
  <span class="n">difflist</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">seeds</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>

  <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span>
      <span class="n">seeds</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">seeds</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">difflist</span><span class="p">),</span>
      <span class="n">make_diff</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span>
      <span class="n">difflist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">difflist</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">diff_cmp</span><span class="p">);</span>
  <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span>
      <span class="n">difflist</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">difflist</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span>
      <span class="n">seeds</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span>
      <span class="n">extract_seed</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
  <span class="n">strlist_t</span> <span class="n">seeds</span><span class="p">;</span>
  <span class="n">seeds</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">INIT_SIZE</span><span class="p">);</span>
  <span class="c">// 1:</span>
  <span class="n">std</span><span class="o">::</span><span class="n">generate_n</span><span class="p">(</span>
      <span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">seeds</span><span class="p">),</span>
      <span class="n">INIT_SIZE</span><span class="p">,</span>
      <span class="n">gen_seed</span> <span class="p">);</span>
  <span class="c">// 2:</span>
  <span class="n">sort_seeds</span><span class="p">(</span><span class="n">seeds</span><span class="p">);</span>

  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">generation</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span> <span class="c">// 3:</span>
    <span class="n">strlist_t</span> <span class="n">new_seeds</span><span class="p">;</span>
    <span class="n">new_seeds</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">INIT_SIZE</span><span class="o">*</span><span class="n">MULTI_NUM</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span> <span class="n">strlist_t</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">seeds</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="n">it</span> <span class="o">!=</span> <span class="n">seeds</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span> <span class="p">)</span>
      <span class="k">for</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">MULTI_NUM</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span> <span class="p">)</span>
        <span class="n">new_seeds</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span>
            <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="o">*</span><span class="n">it</span><span class="p">)</span>
              <span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">size</span><span class="p">(),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gen_char</span><span class="p">()));</span>
    <span class="n">seeds</span><span class="p">.</span><span class="n">swap</span><span class="p">(</span><span class="n">new_seeds</span><span class="p">);</span>
    <span class="c">// 4:</span>
    <span class="n">sort_seeds</span><span class="p">(</span><span class="n">seeds</span><span class="p">);</span>
    <span class="n">seeds</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">seeds</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">INIT_SIZE</span><span class="p">,</span> <span class="n">seeds</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="o">++</span><span class="n">generation</span> <span class="o">&lt;&lt;</span>
      <span class="s">&quot; : </span><span class="se">\&quot;</span><span class="s">&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">seeds</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span> <span class="n">seeds</span><span class="p">.</span><span class="n">front</span><span class="p">()</span> <span class="o">==</span> <span class="n">GOAL</span> <span class="p">)</span>
      <span class="k">break</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6343/addtag/" class="addtag" id="addtag_6343">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6343/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6343/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6343"
  >-</span><span
  class="button yellow"
  id="rating_z_6343"
  >0</span><span 
  class="button green"
  id="rating_p_6343"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6343/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6370">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/497/" target="_top">Otter</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6370/">#6370</a>(<script language="JavaScript">print_time(new Date("2008/05/29 02:53 GMT"));</script><noscript>2008/05/29 02:53 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>変異数：５。変異の仕方が文字列のどこか一文字をほかの文字と置き換える操作なので、スコアは正しい文字が正しい位置に何文字あるかで計算しています。</p>
<p>乱数生成がIOな関係上、やたらとIOな関数がいっぱい出てくるコードになっちゃいました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Random</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Array</span><span class="o">.</span><span class="n">IArray</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Function</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Ord</span>

<span class="nv">goal</span>    <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span>
<span class="nv">score</span> <span class="nv">str</span> <span class="o">=</span> <span class="nv">length</span> <span class="o">$</span> <span class="nv">filter</span> <span class="p">(</span><span class="nv">id</span><span class="p">)</span> <span class="o">$</span> <span class="nv">zipWith</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span> <span class="nv">str</span> <span class="nv">goal</span>

<span class="nv">updateRandom</span> <span class="o">::</span> <span class="p">(</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">(</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">)</span>
<span class="nv">updateRandom</span> <span class="nv">rg</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">ch</span> <span class="o">&lt;-</span> <span class="nv">randChar</span>
    <span class="nv">i</span> <span class="o">&lt;-</span> <span class="nv">randPos</span>
    <span class="nv">return</span> <span class="o">$</span> <span class="nv">rg</span> <span class="o">//</span> <span class="p">[(</span><span class="nv">i</span><span class="p">,</span> <span class="nv">ch</span><span class="p">)]</span>

<span class="nv">genRandStr</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">(</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">)</span>
<span class="nv">genRandStr</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">str</span> <span class="o">&lt;-</span> <span class="nv">sequence</span> <span class="o">$</span> <span class="nv">replicate</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">goal</span><span class="p">)</span> <span class="p">(</span><span class="nv">randChar</span><span class="p">)</span>
    <span class="nv">return</span> <span class="o">$</span> <span class="nv">listArray</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">length</span> <span class="nv">goal</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">str</span>

<span class="nv">randChar</span><span class="o">=</span> <span class="nv">getStdRandom</span> <span class="o">$</span> <span class="nv">randomR</span> <span class="p">(</span><span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="sc">&#39;Z&#39;</span><span class="p">)</span>
<span class="nv">randPos</span> <span class="o">=</span> <span class="nv">getStdRandom</span> <span class="o">$</span> <span class="nv">randomR</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">goal</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>

<span class="nv">sortIt</span> <span class="o">::</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span>
<span class="nv">sortIt</span> <span class="o">=</span> <span class="nv">sortBy</span> <span class="p">(</span><span class="o">\</span><span class="nv">x</span> <span class="nv">y</span> <span class="o">-&gt;</span> <span class="nv">inverse</span> <span class="o">$</span> <span class="p">(</span><span class="nv">comparing</span> <span class="p">(</span><span class="nv">score</span><span class="o">.</span><span class="nv">elems</span><span class="p">)</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
    <span class="kr">where</span> 
        <span class="nv">inverse</span> <span class="n">GT</span> <span class="o">=</span> <span class="n">LT</span>
        <span class="nv">inverse</span> <span class="n">EQ</span> <span class="o">=</span> <span class="n">EQ</span>
        <span class="nv">inverse</span> <span class="n">LT</span> <span class="o">=</span> <span class="n">GT</span>

<span class="nv">mutate</span> <span class="o">::</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span>
<span class="nv">mutate</span> <span class="nv">strs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">strs&#39;</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">updateRandomN</span> <span class="mi">5</span><span class="p">)</span> <span class="nv">strs</span>
    <span class="nv">return</span> <span class="o">$</span> <span class="nv">concat</span> <span class="nv">strs&#39;</span>
    <span class="kr">where</span>
        <span class="nv">updateRandomN</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span>
        <span class="nv">updateRandomN</span> <span class="nv">n</span> <span class="nv">str</span> <span class="o">=</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">updateRandom</span><span class="p">)</span> <span class="o">$</span> <span class="nv">replicate</span> <span class="nv">n</span> <span class="nv">str</span>    

<span class="nv">genMutation</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span>
<span class="nv">genMutation</span> <span class="nv">i</span> <span class="nv">strs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">strs&#39;</span> <span class="o">&lt;-</span> <span class="nv">mutate</span> <span class="nv">strs</span>    
    <span class="nv">return</span> <span class="o">$</span> <span class="nv">take</span> <span class="mi">300</span> <span class="o">$</span> <span class="nv">sortIt</span> <span class="nv">strs&#39;</span>

<span class="nv">doCycle</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Array</span> <span class="n">Int</span> <span class="n">Char</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">doCycle</span> <span class="nv">i</span> <span class="nv">strs</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">putStrLn</span> <span class="o">$</span> <span class="p">(</span><span class="nv">show</span> <span class="nv">i</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;th iteration:&quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">elems</span> <span class="o">$</span> <span class="nv">head</span> <span class="nv">strs</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot; : &quot;</span> 
        <span class="o">++</span> <span class="p">(</span><span class="nv">show</span> <span class="o">$</span> <span class="nv">score</span> <span class="o">$</span> <span class="nv">elems</span> <span class="o">$</span> <span class="nv">head</span> <span class="nv">strs</span><span class="p">)</span>
    <span class="kr">if</span> <span class="p">(</span><span class="nv">elems</span> <span class="o">$</span> <span class="nv">head</span> <span class="nv">strs</span><span class="p">)</span> <span class="o">==</span> <span class="nv">goal</span> <span class="kr">then</span> <span class="nv">print</span> <span class="s">&quot;goal reached&quot;</span>
        <span class="kr">else</span> <span class="nv">genMutation</span> <span class="nv">i</span> <span class="nv">strs</span> <span class="o">&gt;&gt;=</span> <span class="nv">doCycle</span> <span class="p">(</span><span class="nv">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span><span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">strs</span> <span class="o">&lt;-</span> <span class="nv">sequence</span> <span class="o">$</span> <span class="nv">replicate</span> <span class="mi">300</span> <span class="nv">genRandStr</span>
    <span class="nv">doCycle</span> <span class="mi">0</span> <span class="o">$</span> <span class="nv">sortIt</span> <span class="nv">strs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6370/addtag/" class="addtag" id="addtag_6370">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6370/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6370/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6370"
  >-</span><span
  class="button yellow"
  id="rating_z_6370"
  >0</span><span 
  class="button green"
  id="rating_p_6370"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6370/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6374">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6374/">#6374</a>(<script language="JavaScript">print_time(new Date("2008/05/29 08:21 GMT"));</script><noscript>2008/05/29 08:21 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/postscript/">
	  PostScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>PostScript で素直に実装してみたのですが、
なかなか収束しないので皆さんと同様、
5個のバリエーションを生成、元の文字列も
残す方向です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104</pre></td><td class="code"><div class="highlight"><pre>%!PS
% ---- Parameters ----------------------------------
/String (ABCDEFGHIJKLMNOPQRSTUVWXYZ) def
/Target (METHINKSITISAWEASEL) def
/NumStrings 300 def
/NumMutations 5 def
/Keep true def
% ---------------------------------------------------


/TargetLength Target length def
/StringLength String length def


/RandomLetter {
    String rand StringLength mod get
} bind def

/Diff { % (TargetString) (string) Diff  (TargetString) (string)  integer
    0
    0 1 TargetLength 1 sub {
    % (str) (tar) sum count
    dup 4 index exch get
    % (str) (tar) sum count  let
    exch 3 index exch get
    % (str) (tar) sum count  let let2
%    sub abs add   
%    sub dup mul add   
    sub 0 ne { 1 add } if
    } for
} bind def


/GenStrings { % NumStrings TargetLength GenStrings [(String1) ... (String N)]
    exch
    [ 3 1 roll
    % [ Len Num
    {
        % [ Len
        dup dup string exch
        % [ Len (Str) Len
        0 1 3 -1 roll 1 sub {
        % [ Len (Str) count
        1 index exch RandomLetter put
        } for
        exch
    } repeat
    pop
    ]
} bind def

/CalcDistance { % (TargetString) (String) CalcDistance (Target) [dist (str)]
    Diff exch 2 array astore
} bind def

/Sort { % [[x y] [x1 y1] Array Data ] Sort [ArrayData]
    [ exch
    aload length
    % func -mark- [] [] [] [] [] len
    -1 2 { % func -mark- [] [] [] [] [] len2
    -1 2 {
        3 1 roll
        2 copy 0 get exch 0 get sub
        0 gt { exch } if
        3 -1 roll
        1 roll
    } for
    counttomark 1 roll
    } for
    counttomark 1 roll
    ] 
} bind def

/Mutation { % (String)  Mutation  (String&#39;)
    dup dup length rand exch mod RandomLetter put
} bind def



NumStrings TargetLength GenStrings
[ exch Target exch {
    CalcDistance exch
} forall pop ]
Sort

{
[ exch {
    1 get
    % (str)
    NumMutations {
    % (str) (str&#39;) (str&#39;) 0
    dup length string dup 0 3 index putinterval
    Mutation
    } repeat
    Keep not { NumMutations 1 add -1 roll pop } if
} forall ]
[ exch Target exch {
    CalcDistance exch
} forall pop ]
Sort
0 NumStrings getinterval
dup 0 get dup == flush
0 get 0 eq {quit} if
} loop
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6374/addtag/" class="addtag" id="addtag_6374">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/postscript/">
		PostScript
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6374/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6374/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6374"
  >-</span><span
  class="button yellow"
  id="rating_z_6374"
  >0</span><span 
  class="button green"
  id="rating_p_6374"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6374/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6383">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6383/">#6383</a>(<script language="JavaScript">print_time(new Date("2008/05/30 12:11 GMT"));</script><noscript>2008/05/30 12:11 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  　ちょっと遅いですが...。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#! /usr/bin/ruby</span>
    
<span class="k">class</span> <span class="nc">Text</span>
    
    <span class="no">GOAL</span>        <span class="o">=</span> <span class="s1">&#39;METHINKSITISAWEASEL&#39;</span>
    <span class="no">CHARACTER_SET</span> <span class="o">=</span> <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
    
    <span class="kp">attr_accessor</span> <span class="ss">:text</span>
    
    <span class="k">def</span> <span class="nf">create</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">GOAL</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="no">CHARACTER_SET</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">CHARACTER_SET</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span> <span class="p">}</span><span class="o">.</span><span class="n">to_s</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">update</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">text</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">GOAL</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span> <span class="o">=</span> <span class="no">CHARACTER_SET</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="no">CHARACTER_SET</span><span class="o">.</span><span class="n">length</span><span class="p">)</span><span class="o">]</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">rank</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="no">GOAL</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="p">,</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">s</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">?</span> <span class="n">r</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:</span> <span class="n">r</span> <span class="p">}</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">complete?</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">==</span> <span class="no">GOAL</span><span class="o">.</span><span class="n">length</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">clone</span>
        <span class="n">copy</span> <span class="o">=</span> <span class="k">super</span>
        <span class="n">copy</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">text</span><span class="o">.</span><span class="n">clone</span>
        <span class="n">copy</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Processor</span>
    
    <span class="no">POOL_SIZE</span>    <span class="o">=</span> <span class="mi">300</span>
    <span class="no">COPY_SIZE</span>    <span class="o">=</span> <span class="mi">3</span>
    
    <span class="kp">attr_accessor</span> <span class="ss">:text_list</span>
    
    <span class="k">def</span> <span class="nf">initialize</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">text_list</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">POOL_SIZE</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="no">Text</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">create</span> <span class="p">}</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="o">.</span><span class="n">rank</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">rank</span> <span class="p">}</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">process</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">text_list</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">text_list</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">COPY_SIZE</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">_</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">clone</span><span class="o">.</span><span class="n">update</span> <span class="p">}</span> <span class="p">}</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">sort</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="o">.</span><span class="n">rank</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span><span class="o">.</span><span class="n">rank</span> <span class="p">}</span><span class="o">.</span><span class="n">first</span><span class="p">(</span><span class="no">POOL_SIZE</span><span class="p">)</span>
        <span class="nb">self</span>
    <span class="k">end</span>
    
    <span class="k">def</span> <span class="nf">complete?</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">text_list</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">complete?</span>
    <span class="k">end</span>
<span class="k">end</span>

<span class="n">i</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">processor</span> <span class="o">=</span> <span class="no">Processor</span><span class="o">.</span><span class="n">new</span>
<span class="k">until</span> <span class="n">processor</span><span class="o">.</span><span class="n">complete?</span> <span class="k">do</span>
    <span class="nb">puts</span> <span class="s2">&quot;process(</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">): </span><span class="si">#{</span><span class="n">processor</span><span class="o">.</span><span class="n">text_list</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">processor</span><span class="o">.</span><span class="n">text_list</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">rank</span><span class="si">}</span><span class="s2">)&quot;</span>
    <span class="n">processor</span><span class="o">.</span><span class="n">process</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
<span class="k">end</span>
<span class="nb">puts</span> <span class="s2">&quot;complete(</span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">): </span><span class="si">#{</span><span class="n">processor</span><span class="o">.</span><span class="n">text_list</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">text</span><span class="si">}</span><span class="s2">&quot;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6383/addtag/" class="addtag" id="addtag_6383">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6383/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6383/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6383"
  >-</span><span
  class="button yellow"
  id="rating_z_6383"
  >0</span><span 
  class="button green"
  id="rating_p_6383"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6383/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6394">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6394/">#6394</a>(<script language="JavaScript">print_time(new Date("2008/05/31 10:22 GMT"));</script><noscript>2008/05/31 10:22 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/erlang/">
	  Erlang
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>　プロセスと乱数の相性が悪い様なのでちょっとべたですが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75</pre></td><td class="code"><div class="highlight"><pre>-module(methinks_it_is_a_weasel).
-import(io).
-import(lists).
-import(random).
-export([start/0]).

get_char(CS) -&gt; lists:nth(random:uniform(length(CS)),CS).

create(T,_,TS) when TS == 0 -&gt; T;
create(T,CS,TS) -&gt; create([get_char(CS)|T],CS,TS-1).
create(CS,TS) -&gt; create(&quot;&quot;,CS,TS).

create_text_list(TL,_,_,S) when S == 0 -&gt; TL;
create_text_list(TL,CS,TS,S) -&gt; create_text_list([create(CS,TS)|TL],CS,TS,S-1).
create_text_list(CS,TS,S) -&gt; create_text_list([],CS,TS,S).

rank(T,G) -&gt;
    lists:foldl(
        fun({CT,CG},A) -&gt;
            A +
            if
                CT == CG -&gt; 1;
                true -&gt; 0
            end
        end,
        0,
        lists:zip(T,G)
    ).

sort_text_list(TL,G) -&gt; lists:sort(fun(A,B) -&gt; rank(A,G) &gt; rank(B,G) end,TL).

update_text(T,CS) -&gt;
    P = random:uniform(length(T)),
    lists:append(lists:sublist(T,P-1),[get_char(CS)|lists:sublist(T,P+1,length(T)-P)]).

update_text_list(TL,G,CS,S,N) -&gt;
    lists:sublist(
        sort_text_list(
            lists:foldl(
                fun(T,A) -&gt;
                    lists:append(
                        A,
                        lists:map(
                            fun(_) -&gt;
                                update_text(T,CS)
                            end,
                            lists:seq(1,N,1)
                        )
                    )
                end,
                [],
                TL
            ),
            G
        ),
        S
    ).

process([T|TL],G,CS,S,N,I) -&gt;
    R = rank(T,G),
    L = length(G),
    if
        R == L -&gt;
            io:format(&quot;goal(~w):~p~n&quot;,[I,T]);
        true -&gt;
            io:format(&quot;process(~w):~p(~w)~n&quot;,[I,T,rank(T,G)]),
            process(update_text_list([T|TL],G,CS,S,N),G, CS, S, N, I+1)
    end.

start() -&gt;
    G = &quot;METHINKSITISAWEASEL&quot;,
    CS = lists:seq($A,$Z,1),
    S = 300,
    N = 5,
    process(sort_text_list(create_text_list(CS,length(G),S),G),G,CS,S,N,1).
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6394/addtag/" class="addtag" id="addtag_6394">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/erlang/">
		Erlang
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6394/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6394/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6394"
  >-</span><span
  class="button yellow"
  id="rating_z_6394"
  >0</span><span 
  class="button green"
  id="rating_p_6394"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6394/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6444">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/454/" target="_top">keita</a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6444/">#6444</a>(<script language="JavaScript">print_time(new Date("2008/06/05 12:50 GMT"));</script><noscript>2008/06/05 12:50 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>愚直に実装。収束させるために派生文字列を10個に増やしました。大体50-100世代辺りで目的の文字列が作れるようです。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></td><td class="code"><div class="highlight"><pre><span class="kr">let</span> <span class="n">target</span> <span class="k">=</span> <span class="k">[</span>
  <span class="sc">&#39;M&#39;</span><span class="k">;</span> <span class="sc">&#39;E&#39;</span><span class="k">;</span> <span class="sc">&#39;T&#39;</span><span class="k">;</span> <span class="sc">&#39;H&#39;</span><span class="k">;</span> <span class="sc">&#39;I&#39;</span><span class="k">;</span> <span class="sc">&#39;N&#39;</span><span class="k">;</span> <span class="sc">&#39;K&#39;</span><span class="k">;</span> <span class="sc">&#39;S&#39;</span><span class="k">;</span>
  <span class="sc">&#39;I&#39;</span><span class="k">;</span> <span class="sc">&#39;T&#39;</span><span class="k">;</span> <span class="sc">&#39;I&#39;</span><span class="k">;</span> <span class="sc">&#39;S&#39;</span><span class="k">;</span> <span class="sc">&#39;A&#39;</span><span class="k">;</span> <span class="sc">&#39;W&#39;</span><span class="k">;</span> <span class="sc">&#39;E&#39;</span><span class="k">;</span> <span class="sc">&#39;A&#39;</span><span class="k">;</span> <span class="sc">&#39;S&#39;</span><span class="k">;</span> <span class="sc">&#39;E&#39;</span><span class="k">;</span> <span class="sc">&#39;L&#39;</span><span class="k">;</span>
<span class="k">];;</span>

<span class="kr">let</span> <span class="n">similarity</span> <span class="n">str</span> <span class="k">=</span>
  <span class="n">List</span><span class="k">.</span><span class="n">fold_left2</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">n</span> <span class="n">target&#39;</span> <span class="n">str&#39;</span> <span class="k">-&gt;</span>
    <span class="n">n</span> <span class="k">+</span> <span class="n">abs</span> <span class="k">((</span><span class="n">Char</span><span class="k">.</span><span class="n">code</span> <span class="n">target&#39;</span><span class="k">)</span> <span class="k">-</span> <span class="k">(</span><span class="n">Char</span><span class="k">.</span><span class="n">code</span> <span class="n">str&#39;</span><span class="k">))</span>
  <span class="k">)</span> <span class="mi">0</span> <span class="n">target</span> <span class="n">str</span>
<span class="k">;;</span>

<span class="kr">let</span> <span class="n">compare&#39;</span> <span class="n">a</span> <span class="n">b</span> <span class="k">=</span> <span class="n">compare</span> <span class="k">(</span><span class="n">similarity</span> <span class="n">a</span><span class="k">)</span> <span class="k">(</span><span class="n">similarity</span> <span class="n">b</span><span class="k">);;</span>

<span class="kr">let</span> <span class="n">random_char</span> <span class="k">()</span> <span class="k">=</span> <span class="n">Char</span><span class="k">.</span><span class="n">chr</span> <span class="k">(</span><span class="mi">65</span> <span class="k">+</span> <span class="k">(</span><span class="n">Random</span><span class="k">.</span><span class="n">int</span> <span class="mi">26</span><span class="k">));;</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">random_string</span> <span class="n">list</span> <span class="k">=</span> <span class="kr">function</span>
  <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="n">list</span>
  <span class="k">|</span> <span class="k">_</span> <span class="kr">as</span> <span class="n">n</span> <span class="k">-&gt;</span> <span class="n">random_string</span> <span class="k">(</span><span class="n">random_char</span> <span class="k">()</span> <span class="k">::</span> <span class="n">list</span><span class="k">)</span> <span class="k">(</span><span class="n">n</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span>
<span class="k">;;</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">create_initial_list</span> <span class="n">list</span> <span class="k">=</span> <span class="kr">function</span>
  <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="n">list</span>
  <span class="k">|</span> <span class="k">_</span> <span class="kr">as</span> <span class="n">n</span> <span class="k">-&gt;</span> <span class="n">create_initial_list</span> <span class="k">((</span><span class="n">random_string</span> <span class="k">[]</span> <span class="mi">19</span><span class="k">)</span> <span class="k">::</span> <span class="n">list</span><span class="k">)</span> <span class="k">(</span><span class="n">n</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span>
<span class="k">;;</span>

<span class="kr">let</span> <span class="n">change</span> <span class="n">str</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">i</span> <span class="k">=</span> <span class="n">Random</span><span class="k">.</span><span class="n">int</span> <span class="mi">19</span> <span class="kr">and</span> <span class="n">c</span> <span class="k">=</span> <span class="n">random_char</span> <span class="k">()</span> <span class="kr">in</span>
  <span class="kr">let</span> <span class="k">_,</span> <span class="n">res</span> <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">fold_left</span> <span class="k">(</span><span class="kr">fun</span> <span class="k">(</span><span class="n">i&#39;</span><span class="k">,</span> <span class="n">res</span><span class="k">)</span> <span class="n">c&#39;</span> <span class="k">-&gt;</span>
    <span class="kr">if</span> <span class="n">i</span> <span class="k">=</span> <span class="n">i&#39;</span> <span class="kr">then</span> <span class="n">i&#39;</span><span class="k">+</span><span class="mi">1</span><span class="k">,</span> <span class="n">c</span><span class="k">::</span><span class="n">res</span> <span class="kr">else</span> <span class="n">i&#39;</span><span class="k">+</span><span class="mi">1</span><span class="k">,</span> <span class="n">c&#39;</span><span class="k">::</span><span class="n">res</span>
  <span class="k">)</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="k">[])</span> <span class="k">(</span><span class="n">List</span><span class="k">.</span><span class="n">rev</span> <span class="n">str</span><span class="k">)</span> <span class="kr">in</span> <span class="n">res</span>
<span class="k">;;</span>

<span class="kr">let</span> <span class="n">print_result</span> <span class="n">n</span> <span class="n">str</span> <span class="k">=</span>
  <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;G%d: &quot;</span> <span class="n">n</span><span class="k">;</span>
  <span class="n">List</span><span class="k">.</span><span class="n">iter</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">c</span> <span class="k">-&gt;</span> <span class="n">print_char</span> <span class="n">c</span><span class="k">)</span> <span class="n">str</span><span class="k">;</span>
  <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot; (%d)&quot;</span> <span class="k">(</span><span class="n">similarity</span> <span class="n">str</span><span class="k">);</span>
  <span class="n">print_newline</span> <span class="k">()</span>
<span class="k">;;</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">generation</span> <span class="n">n</span> <span class="n">list</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">sorted</span> <span class="k">=</span>
    <span class="n">List</span><span class="k">.</span><span class="n">sort</span> <span class="n">compare&#39;</span> <span class="k">(</span><span class="n">List</span><span class="k">.</span><span class="n">flatten</span> <span class="k">(</span><span class="n">List</span><span class="k">.</span><span class="n">map</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">str</span> <span class="k">-&gt;</span>
      <span class="k">[</span><span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span>
       <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;</span> <span class="n">change</span> <span class="n">str</span><span class="k">;]</span>
    <span class="k">)</span> <span class="n">list</span><span class="k">))</span>
  <span class="kr">in</span>
  <span class="kr">let</span> <span class="k">_,</span> <span class="n">res</span> <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">fold_left</span> <span class="k">(</span><span class="kr">fun</span> <span class="k">(</span><span class="n">i</span><span class="k">,</span> <span class="n">res</span><span class="k">)</span> <span class="n">str</span> <span class="k">-&gt;</span>
    <span class="kr">if</span> <span class="n">i</span> <span class="k">&lt;</span> <span class="mi">300</span> <span class="kr">then</span> <span class="n">i</span><span class="k">+</span><span class="mi">1</span><span class="k">,</span> <span class="n">res</span> <span class="o">@</span> <span class="k">[</span><span class="n">str</span><span class="k">]</span> <span class="kr">else</span> <span class="n">i</span><span class="k">,</span> <span class="n">res</span>
  <span class="k">)</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="k">[])</span> <span class="n">sorted</span> <span class="kr">in</span>
  <span class="n">print_result</span> <span class="n">n</span> <span class="k">(</span><span class="n">List</span><span class="k">.</span><span class="n">hd</span> <span class="n">res</span><span class="k">);</span>
  <span class="kr">if</span> <span class="k">(</span><span class="n">similarity</span> <span class="k">(</span><span class="n">List</span><span class="k">.</span><span class="n">hd</span> <span class="n">res</span><span class="k">))</span> <span class="k">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
    <span class="n">generation</span> <span class="k">(</span><span class="n">n</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span> <span class="n">res</span>
  <span class="kr">else</span>
    <span class="n">print_endline</span> <span class="s2">&quot;Finished.&quot;</span>

<span class="kr">let</span> <span class="n">main</span> <span class="k">=</span>
  <span class="n">Random</span><span class="k">.</span><span class="n">self_init</span> <span class="k">();</span>
  <span class="kr">let</span> <span class="n">list</span> <span class="k">=</span> <span class="n">create_initial_list</span> <span class="k">[]</span> <span class="mi">300</span> <span class="kr">in</span>
  <span class="n">generation</span> <span class="mi">0</span> <span class="n">list</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6444/addtag/" class="addtag" id="addtag_6444">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6444/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6444/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6444"
  >-</span><span
  class="button yellow"
  id="rating_z_6444"
  >0</span><span 
  class="button green"
  id="rating_p_6444"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6444/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6717">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/827/" target="_top">baal</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6717/">#6717</a>(<script language="JavaScript">print_time(new Date("2008/07/11 09:37 GMT"));</script><noscript>2008/07/11 09:37 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>派生文字列の生成方法を３パターン作ってみました。
これなら収束します。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-27</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">GOAL</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">)</span>

<span class="p">(</span><span class="nf">random-source-randomize!</span> <span class="nv">default-random-source</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">random-char</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">str</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">))</span>
    <span class="p">(</span><span class="nb">string-ref </span><span class="nv">str</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">str</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">make-element</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">n</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">GOAL</span><span class="p">))</span> <span class="p">(</span><span class="nf">ret</span> <span class="o">&#39;</span><span class="p">()))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
      <span class="p">(</span><span class="nb">list-&gt;string </span><span class="nv">ret</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">random-char</span><span class="p">)</span> <span class="nv">ret</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">make-element-list</span> <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">n</span> <span class="mi">300</span><span class="p">)</span> <span class="p">(</span><span class="nf">ret</span> <span class="o">&#39;</span><span class="p">()))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt;= </span><span class="nv">n</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">ret</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">make-element</span><span class="p">)</span> <span class="nv">ret</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">check-element</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">e</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">fold</span> <span class="nv">+</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">map</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">abs </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">char-&gt;integer </span><span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">char-&gt;integer </span><span class="nv">y</span><span class="p">))))</span>
    <span class="p">(</span><span class="nb">string-&gt;list </span><span class="nv">e</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">string-&gt;list </span><span class="nv">GOAL</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">sort-element-list</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">ls</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">sort</span> <span class="nv">ls</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nf">check-element</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">check-element</span> <span class="nv">y</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">make-mutant-1</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">e</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">mutant</span> <span class="p">(</span><span class="nb">string-copy </span><span class="nv">e</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">string-set! </span><span class="nv">mutant</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">e</span><span class="p">))</span> <span class="p">(</span><span class="nf">random-char</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">make-mutant-2</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">e</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">mutant</span> <span class="p">(</span><span class="nb">string-copy </span><span class="nv">e</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">i</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">e</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">ci</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">char-&gt;integer </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">e</span> <span class="nv">i</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">string-set! </span><span class="nv">mutant</span> <span class="nv">i</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">ci</span> <span class="p">(</span><span class="nb">char-&gt;integer </span><span class="sc">#\A</span><span class="p">))</span> <span class="sc">#\Z</span> <span class="p">(</span><span class="nb">integer-&gt;char </span><span class="nv">ci</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">make-mutant-3</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">e</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">mutant</span> <span class="p">(</span><span class="nb">string-copy </span><span class="nv">e</span><span class="p">))</span>
         <span class="p">(</span><span class="nf">i</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">e</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">ci</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">char-&gt;integer </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">e</span> <span class="nv">i</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">string-set! </span><span class="nv">mutant</span> <span class="nv">i</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">char-&gt;integer </span><span class="sc">#\Z</span><span class="p">)</span> <span class="nv">ci</span><span class="p">)</span> <span class="sc">#\A</span> <span class="p">(</span><span class="nb">integer-&gt;char </span><span class="nv">ci</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">main</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">count</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nf">ls</span> <span class="p">(</span><span class="nf">sort-element-list</span> <span class="p">(</span><span class="nf">make-element-list</span><span class="p">))))</span>
    <span class="p">(</span><span class="nf">print</span> <span class="nv">count</span> <span class="s">&quot;:&quot;</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">))</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">string=? </span><span class="p">(</span><span class="nb">car </span><span class="nv">ls</span><span class="p">)</span> <span class="nv">GOAL</span><span class="p">)</span>
      <span class="p">(</span><span class="k">begin </span><span class="p">(</span><span class="nb">display </span><span class="s">&quot;OK!&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>
      <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">count</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">take</span> <span class="p">(</span><span class="nf">sort-element-list</span>
          <span class="p">(</span><span class="nf">fold</span>
            <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">ret</span><span class="p">)</span>
              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">make-mutant-1</span> <span class="nv">x</span><span class="p">)</span>
              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">make-mutant-2</span> <span class="nv">x</span><span class="p">)</span>
              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">make-mutant-3</span> <span class="nv">x</span><span class="p">)</span>
                <span class="nv">ret</span><span class="p">))))</span>
            <span class="o">&#39;</span><span class="p">()</span> <span class="nv">ls</span><span class="p">))</span> <span class="mi">300</span><span class="p">))))</span>
  <span class="mi">0</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6717/addtag/" class="addtag" id="addtag_6717">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6717/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6717/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6717"
  >-</span><span
  class="button yellow"
  id="rating_z_6717"
  >0</span><span 
  class="button green"
  id="rating_p_6717"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6717/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6739">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/840/" target="_top">leque</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6739/">#6739</a>(<script language="JavaScript">print_time(new Date("2008/07/15 21:49 GMT"));</script><noscript>2008/07/15 21:49 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Gauche で書きました。他の方も書いていらっしゃるように単純に変異を起こすだけでは n = 3 ではなかなか収束しません。上位のものを交叉するなどの工夫が必要でしょう。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-27</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-43</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">random-upper-alphabet</span>
  <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">s</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">n</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">s</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">()</span>
      <span class="p">(</span><span class="nb">string-ref </span><span class="nv">s</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="nv">n</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">mutate</span> <span class="nv">v</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">v*</span> <span class="p">(</span><span class="nf">vector-copy</span> <span class="nv">v</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">vector-set! </span><span class="nv">v*</span> <span class="p">(</span><span class="nf">random-integer</span> <span class="p">(</span><span class="nb">vector-length </span><span class="nv">v</span><span class="p">))</span> <span class="p">(</span><span class="nf">random-upper-alphabet</span><span class="p">))</span>
    <span class="nv">v*</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">similarity</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">vector-fold</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">_</span> <span class="nv">knil</span> <span class="nv">c1</span> <span class="nv">c2</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">+ </span><span class="nv">knil</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">char=? </span><span class="nv">c1</span> <span class="nv">c2</span><span class="p">)</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">)))</span>
               <span class="mi">0</span> <span class="nv">v1</span> <span class="nv">v2</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">sort-by</span> <span class="nv">xs</span> <span class="nv">f</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">map </span><span class="nv">car</span> <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">x</span><span class="p">)))</span> <span class="nv">xs</span><span class="p">)</span>
                 <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="p">(</span><span class="nb">negative? </span><span class="p">(</span><span class="nf">compare</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">b</span><span class="p">)))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">random-source-randomize!</span> <span class="nv">default-random-source</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">goal</span> <span class="p">(</span><span class="nb">list-&gt;vector </span><span class="p">(</span><span class="nb">string-&gt;list </span><span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">))))</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">search</span> <span class="p">((</span><span class="nf">candidates</span>
                  <span class="p">(</span><span class="nf">list-tabulate</span> <span class="mi">300</span>
                                 <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">_</span><span class="p">)</span> 
                                   <span class="p">(</span><span class="nf">vector-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">_</span> <span class="p">(</span><span class="nb">vector-length </span><span class="nv">goal</span><span class="p">))</span>
                                              <span class="p">(</span><span class="nf">random-upper-alphabet</span><span class="p">))))))</span>
      <span class="c1">;#?=(similarity (car candidates) goal)</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">equal? </span><span class="p">(</span><span class="nb">car </span><span class="nv">candidates</span><span class="p">)</span> <span class="nv">goal</span><span class="p">)</span>
          <span class="mi">0</span>
          <span class="p">(</span><span class="nf">search</span>
           <span class="p">(</span><span class="nf">take</span> <span class="p">(</span><span class="nf">sort-by</span>
                  <span class="p">(</span><span class="nf">append-map!</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">v</span><span class="p">)</span>
                                 <span class="p">(</span><span class="nf">list-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">_</span> <span class="mi">3</span><span class="p">)</span> <span class="p">(</span><span class="nf">mutate</span> <span class="nv">v</span><span class="p">)))</span>
                               <span class="nv">candidates</span><span class="p">)</span>
                  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">v</span><span class="p">)</span>
                    <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">similarity</span> <span class="nv">v</span> <span class="nv">goal</span><span class="p">))))</span>
                 <span class="mi">300</span><span class="p">))))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6739/addtag/" class="addtag" id="addtag_6739">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6739/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6739/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6739"
  >-</span><span
  class="button yellow"
  id="rating_z_6739"
  >0</span><span 
  class="button green"
  id="rating_p_6739"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6739/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment6801">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/232/" target="_top">kkobayashi</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6801/">#6801</a>(<script language="JavaScript">print_time(new Date("2008/07/22 10:21 GMT"));</script><noscript>2008/07/22 10:21 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>Rの投稿をしておきながら、実はこういうシミュレーションをRでやったことはなかったのですが・・・面白いですね！</p>
<p>Windows版Rでは、グラフィカルなコンソール(Rgui)はコンソール出力のオーバーヘッドがものすごく大きいので、テキストベースのコンソール(Rterm)の方で実行するのをお勧めします。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="highlight"><pre># initial value
target      &lt;- &quot;METHINKSITISAWEASEL&quot;
target.char &lt;- unlist(strsplit(target, &quot;&quot;))
target.len  &lt;- nchar(target)
initial.population &lt;- 300
mutation.number    &lt;- 1
increase.number    &lt;- 3

# make mutation
mutation &lt;- function(s){
   l &lt;- unlist(strsplit(s, &quot;&quot;))
   l[sample(target.len, mutation.number)] &lt;- sample(LETTERS, mutation.number, replace=FALSE)
   paste(l, collapse=&quot;&quot;)
}

# calc distance between two strings
distance &lt;- function(lhs, rhs=target.char){
   sum(!(unlist(strsplit(lhs, &quot;&quot;)) == rhs))
}

# setup the first population
strings &lt;- replicate(initial.population, paste(sample(LETTERS,target.len, replace=FALSE), collapse=&quot;&quot;))

# main routine
while(strings[1] != target){
   strings &lt;- sapply(rep(strings, increase.number), mutation)
   strings &lt;- head(strings[sort.list(sapply(strings, distance))], initial.population)
   print(data.frame(str=head(strings), dist=sapply(head(strings), distance)))
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/6801/addtag/" class="addtag" id="addtag_6801">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6801/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/6801/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6801"
  >-</span><span
  class="button yellow"
  id="rating_z_6801"
  >0</span><span 
  class="button green"
  id="rating_p_6801"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/6801/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment7623">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/760/" target="_top">turugina</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/7623/">#7623</a>(<script language="JavaScript">print_time(new Date("2008/09/10 16:23 GMT"));</script><noscript>2008/09/10 16:23 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/vim/">
	  Vim
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>やればできる子でした＜Vim</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83</pre></td><td class="code"><div class="highlight"><pre><span class="p">:</span><span class="k">function</span><span class="p">!</span> s:Random<span class="p">(</span><span class="k">n</span><span class="p">)</span>
<span class="p">:</span> <span class="k">if</span> has<span class="p">(</span><span class="s1">&#39;win32&#39;</span><span class="p">)</span>
<span class="p">:</span>   <span class="k">let</span> <span class="k">r</span> <span class="p">=</span> libcallnr<span class="p">(</span><span class="s2">&quot;msvcrt&quot;</span><span class="p">,</span> <span class="c">&quot;rand&quot;, 0)</span>
<span class="p">:</span> <span class="k">else</span>
<span class="p">:</span>   <span class="k">let</span> <span class="k">r</span> <span class="p">=</span> libcallnr<span class="p">(</span><span class="s2">&quot;libc&quot;</span><span class="p">,</span> <span class="c">&quot;rand&quot;, 0)</span>
<span class="p">:</span> <span class="k">endif</span>
<span class="p">:</span> <span class="k">return</span> <span class="k">r</span> % a:<span class="k">n</span>
<span class="p">:</span><span class="k">endfunction</span>

<span class="p">:</span><span class="k">function</span><span class="p">!</span> s:MakeRandom<span class="p">()</span>
<span class="p">:</span> <span class="k">let</span> <span class="k">res</span> <span class="p">=</span> <span class="s1">&#39;&#39;</span>
<span class="p">:</span> <span class="k">for</span> i <span class="k">in</span> range<span class="p">(</span>strlen<span class="p">(</span>s:goal<span class="p">))</span>
<span class="p">:</span>   <span class="k">let</span> <span class="k">res</span> <span class="p">=</span> <span class="k">res</span> . nr2char<span class="p">(</span>char2nr<span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">)+</span>s:Random<span class="p">(</span><span class="m">26</span><span class="p">))</span>
<span class="p">:</span> <span class="k">endfor</span>
<span class="p">:</span> <span class="k">return</span> <span class="k">res</span>
<span class="p">:</span><span class="k">endfunction</span>

<span class="p">:</span><span class="k">function</span><span class="p">!</span> s:CheckScore<span class="p">(</span>line<span class="p">,</span> goal<span class="p">)</span>
<span class="p">:</span> <span class="k">let</span> score <span class="p">=</span> <span class="m">0</span>
<span class="p">:</span> <span class="k">for</span> i <span class="k">in</span> range<span class="p">(</span>strlen<span class="p">(</span>a:goal<span class="p">))</span>
<span class="p">:</span>   <span class="k">let</span> a <span class="p">=</span> char2nr<span class="p">(</span>strpart<span class="p">(</span>s:goal<span class="p">,</span>i<span class="p">,</span><span class="m">1</span><span class="p">))</span>
<span class="p">:</span>   <span class="k">let</span> <span class="k">b</span> <span class="p">=</span> char2nr<span class="p">(</span>strpart<span class="p">(</span>a:line<span class="p">,</span>i<span class="p">,</span><span class="m">1</span><span class="p">))</span>
<span class="p">:</span>   <span class="k">let</span> <span class="k">d</span> <span class="p">=</span> a <span class="p">&lt;</span> <span class="k">b</span> ? <span class="k">b</span> <span class="p">-</span> a : a <span class="p">-</span> <span class="k">b</span>
<span class="p">:</span>   <span class="k">let</span> score <span class="p">=</span> score <span class="p">+</span> <span class="k">d</span>
<span class="p">:</span> <span class="k">endfor</span>
<span class="p">:</span> <span class="k">return</span> score
<span class="p">:</span><span class="k">endfunction</span>

<span class="p">:</span><span class="k">function</span><span class="p">!</span> s:SortLines<span class="p">(</span><span class="k">num</span><span class="p">)</span>
<span class="p">:</span> <span class="k">for</span> i <span class="k">in</span> range<span class="p">(</span>a:<span class="k">num</span><span class="p">)</span>
<span class="p">:</span>   <span class="k">let</span> line <span class="p">=</span> getline<span class="p">(</span>i<span class="p">+</span><span class="m">1</span><span class="p">)</span>
<span class="p">:</span>   <span class="k">let</span> score <span class="p">=</span> s:CheckScore<span class="p">(</span>line<span class="p">,</span> s:goal<span class="p">)</span>
<span class="p">:</span>   <span class="k">let</span> line <span class="p">=</span> printf<span class="p">(</span><span class="s2">&quot;%05d:%s&quot;</span><span class="p">,</span> score<span class="p">,</span> line<span class="p">)</span>
<span class="p">:</span>   <span class="k">call</span> setline<span class="p">(</span>i<span class="p">+</span><span class="m">1</span><span class="p">,</span>line<span class="p">)</span>
<span class="p">:</span> <span class="k">endfor</span>
<span class="c">&quot;: %!sort</span>
<span class="p">:</span> <span class="k">let</span> <span class="nb">lines</span> <span class="p">=</span> <span class="k">sort</span><span class="p">(</span>getline<span class="p">(</span><span class="m">1</span><span class="p">,</span>a:<span class="k">num</span><span class="p">))</span>
<span class="p">:</span> <span class="k">for</span> i <span class="k">in</span> range<span class="p">(</span>a:<span class="k">num</span><span class="p">)</span>
<span class="p">:</span>   <span class="k">call</span> setline<span class="p">(</span>i<span class="p">+</span><span class="m">1</span><span class="p">,</span>strpart<span class="p">(</span><span class="nb">lines</span>[i]<span class="p">,</span><span class="m">6</span><span class="p">,</span>strlen<span class="p">(</span>s:goal<span class="p">)))</span>
<span class="p">:</span> <span class="k">endfor</span>
<span class="p">:</span><span class="k">endfunction</span>

<span class="p">:</span><span class="k">function</span><span class="p">!</span> s:ChangeLine<span class="p">(</span>line_num<span class="p">,</span> idx_num<span class="p">,</span> var_num<span class="p">)</span>
<span class="p">:</span> <span class="k">for</span> i <span class="k">in</span> range<span class="p">(</span>a:line_num<span class="p">)</span>
<span class="p">:</span>   <span class="k">let</span> line <span class="p">=</span> getline<span class="p">(</span>i<span class="p">+</span><span class="m">1</span><span class="p">)</span>
<span class="p">:</span>   <span class="k">for</span> <span class="k">j</span> <span class="k">in</span> range<span class="p">(</span>a:var_num<span class="p">)</span>
<span class="p">:</span>     <span class="k">let</span> vline <span class="p">=</span> line
<span class="p">:</span>     <span class="k">for</span> <span class="k">k</span> <span class="k">in</span> range<span class="p">(</span>a:idx_num<span class="p">)</span>
<span class="p">:</span>       <span class="k">let</span> split_idx <span class="p">=</span> s:Random<span class="p">(</span>strlen<span class="p">(</span>s:goal<span class="p">))</span>
<span class="p">:</span>       <span class="k">let</span> head <span class="p">=</span> strpart<span class="p">(</span>vline<span class="p">,</span><span class="m">0</span><span class="p">,</span>split_idx<span class="p">)</span>
<span class="p">:</span>       <span class="k">let</span> tail <span class="p">=</span> strpart<span class="p">(</span>vline<span class="p">,</span>split_idx<span class="p">+</span><span class="m">1</span><span class="p">,</span>strlen<span class="p">(</span>s:goal<span class="p">))</span>
<span class="p">:</span>       <span class="k">let</span> vline <span class="p">=</span> head .nr2char<span class="p">(</span>char2nr<span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="p">)+</span>s:Random<span class="p">(</span><span class="m">26</span><span class="p">))</span> . tail
<span class="p">:</span>     <span class="k">endfor</span>
<span class="p">:</span>     <span class="k">call</span> setline<span class="p">(</span>a:line_num*<span class="p">(</span><span class="k">j</span><span class="p">+</span><span class="m">1</span><span class="p">)+</span>i<span class="p">,</span>vline<span class="p">)</span>
<span class="p">:</span>   <span class="k">endfor</span>
<span class="p">:</span> <span class="k">endfor</span>
<span class="p">:</span><span class="k">endfunction</span>

<span class="p">:</span><span class="k">let</span> s:initial_line_num <span class="p">=</span> <span class="m">300</span>
<span class="p">:</span><span class="k">let</span> s:change_idx_num <span class="p">=</span> <span class="m">1</span>
<span class="p">:</span><span class="k">let</span> s:variaty_num <span class="p">=</span> <span class="m">5</span>
<span class="p">:</span><span class="k">let</span> s:goal <span class="p">=</span> <span class="c">&quot;METHINKSITISAWEASEL&quot;</span>

<span class="p">:</span><span class="k">let</span> s:start_time <span class="p">=</span> localtime<span class="p">()</span>
<span class="p">:</span><span class="k">new</span>
<span class="p">:</span><span class="k">for</span> s:i <span class="k">in</span> range<span class="p">(</span>s:initial_line_num<span class="p">)</span>
<span class="p">:</span> <span class="k">call</span> setline<span class="p">(</span>s:i<span class="p">+</span><span class="m">1</span><span class="p">,</span> s:MakeRandom<span class="p">())</span>
<span class="p">:</span><span class="k">endfor</span>
<span class="p">:</span><span class="k">call</span> s:SortLines<span class="p">(</span>s:initial_line_num<span class="p">)</span>

<span class="p">:</span><span class="k">let</span> s:break_flag <span class="p">=</span> <span class="m">0</span>
<span class="p">:</span><span class="k">while</span> s:break_flag <span class="p">==</span> <span class="m">0</span>
<span class="p">:</span> <span class="k">call</span> s:ChangeLine<span class="p">(</span>s:initial_line_num<span class="p">,</span>s:change_idx_num<span class="p">,</span>s:variaty_num<span class="p">)</span>
<span class="p">:</span> <span class="k">call</span> s:SortLines<span class="p">(</span>s:initial_line_num * s:variaty_num<span class="p">)</span>
<span class="p">:</span> <span class="k">let</span> s:line <span class="p">=</span> getline<span class="p">(</span><span class="m">1</span><span class="p">)</span>
<span class="p">:</span> <span class="k">if</span> s:line <span class="p">==</span># s:goal
<span class="p">:</span>   <span class="k">let</span> s:break_flag <span class="p">=</span> <span class="m">1</span>
<span class="p">:</span> <span class="k">endif</span>
<span class="p">:</span> echo getline<span class="p">(</span><span class="m">1</span><span class="p">)</span>
<span class="p">:</span><span class="k">endwhile</span>
<span class="p">:</span><span class="m">1</span>
<span class="p">:</span><span class="k">let</span> s:end_time <span class="p">=</span> localtime<span class="p">()</span>
<span class="p">:</span><span class="k">call</span> append<span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="p">(</span>s:end_time <span class="p">-</span> s:start_time<span class="p">)</span> . <span class="c">&quot; seconds elapsed&quot;)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/7623/addtag/" class="addtag" id="addtag_7623">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/vim/">
		Vim
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/7623/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/7623/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_7623"
  >-</span><span
  class="button yellow"
  id="rating_z_7623"
  >0</span><span 
  class="button green"
  id="rating_p_7623"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/7623/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9294">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/9294/">#9294</a>(<script language="JavaScript">print_time(new Date("2009/07/06 01:49 GMT"));</script><noscript>2009/07/06 01:49 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <pre class='compact'>PHP練習中。
言語の練習にはいい問題だった。
配列周りのバグが出まくり。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">print</span> <span class="o">&lt;&lt;&lt;</span> <span class="nx">END_DOC</span>
<span class="o">&lt;</span><span class="nx">HTML</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">HEAD</span><span class="o">&gt;&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">doukaku177</span><span class="o">&lt;/</span><span class="nx">title</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">HEAD</span><span class="o">&gt;&lt;</span><span class="nx">BODY</span><span class="o">&gt;</span>
<span class="nx">END_DOC</span><span class="p">;</span>

<span class="nv">$answer</span> <span class="o">=</span> <span class="nf">str_split</span><span class="p">(</span><span class="s2">&quot;METHINKS IT IS A WEASEL&quot;</span><span class="p">);</span>
<span class="nv">$alphabet_table</span> <span class="o">=</span> <span class="nf">str_split</span><span class="p">(</span><span class="s2">&quot; ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">);</span>

<span class="k">function</span> <span class="nf">getLength</span><span class="p">(</span><span class="nv">$targetString</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$length</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">global</span> <span class="nv">$answer</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
        <span class="nv">$length</span> <span class="o">+=</span> <span class="nf">abs</span><span class="p">(</span><span class="nf">ord</span><span class="p">(</span><span class="nv">$answer</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span> <span class="o">-</span> <span class="nf">ord</span><span class="p">(</span><span class="nv">$targetString</span><span class="p">[</span><span class="nv">$i</span><span class="p">]));</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="nv">$length</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">cmp</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="nv">$a</span><span class="p">[</span><span class="s2">&quot;length&quot;</span><span class="p">]</span> <span class="o">-</span> <span class="nv">$b</span><span class="p">[</span><span class="s2">&quot;length&quot;</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nf">doukaku177</span><span class="p">()</span>
<span class="p">{</span>

    <span class="k">global</span> <span class="nv">$answer</span><span class="p">;</span>
    <span class="k">global</span> <span class="nv">$alphabet_table</span><span class="p">;</span>
    
    <span class="c">#init        </span>
    <span class="nv">$string_pool</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
    <span class="nv">$string_pool_max</span> <span class="o">=</span> <span class="m">900</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$string_pool_max</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">){</span>
        <span class="nv">$s</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
        <span class="k">for</span><span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="nv">$j</span> <span class="o">&lt;</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$answer</span><span class="p">);</span> <span class="nv">$j</span><span class="o">++</span><span class="p">){</span>
            <span class="nf">array_push</span><span class="p">(</span><span class="nv">$s</span><span class="p">,</span> <span class="nv">$alphabet_table</span><span class="p">[</span><span class="nf">mt_rand</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$alphabet_table</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">)]);</span>
        <span class="p">}</span>        

        <span class="nv">$length</span> <span class="o">=</span> <span class="nx">getLength</span><span class="p">(</span><span class="nv">$s</span><span class="p">);</span>
        <span class="nv">$s</span><span class="p">[</span><span class="s2">&quot;length&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$length</span><span class="p">;</span>
        <span class="nf">array_push</span><span class="p">(</span><span class="nv">$string_pool</span><span class="p">,</span> <span class="nv">$s</span><span class="p">);</span>
    <span class="p">}</span>    
    
    <span class="c">#evolve</span>
    <span class="nv">$i</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
    <span class="k">do</span><span class="p">{</span>        
        <span class="nf">usort</span><span class="p">(</span><span class="nv">$string_pool</span><span class="p">,</span> <span class="s2">&quot;cmp&quot;</span><span class="p">);</span>
        
        <span class="c">#show top</span>
            <span class="k">print</span> <span class="s2">&quot;Generation = </span><span class="si">$i</span><span class="s2"> &quot;</span><span class="p">;</span>
            <span class="k">print</span> <span class="s2">&quot;Str = &quot;</span><span class="o">.</span><span class="nf">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nv">$string_pool</span><span class="p">[</span><span class="m">0</span><span class="p">])</span><span class="o">.</span><span class="s2">&quot;&lt;BR&gt;&quot;</span><span class="p">;</span>
        
        <span class="nv">$string_pool</span> <span class="o">=</span> <span class="nf">array_slice</span><span class="p">(</span><span class="nv">$string_pool</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="nv">$string_pool_max</span> <span class="o">/</span> <span class="m">3</span><span class="p">);</span>
        
        <span class="k">foreach</span><span class="p">(</span><span class="nv">$string_pool</span> <span class="k">as</span> <span class="nv">$item</span><span class="p">){</span>
            <span class="nf">unset</span><span class="p">(</span><span class="nv">$item</span><span class="p">[</span><span class="s2">&quot;length&quot;</span><span class="p">]);</span>
            <span class="nv">$item</span><span class="p">[</span><span class="nf">mt_rand</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$item</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">)]</span> <span class="o">=</span> <span class="nv">$alphabet_table</span><span class="p">[</span><span class="nf">mt_rand</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$alphabet_table</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">)];</span>
            <span class="nv">$length</span> <span class="o">=</span> <span class="nx">getLength</span><span class="p">(</span><span class="nv">$item</span><span class="p">);</span>
            <span class="nv">$item</span><span class="p">[</span><span class="s2">&quot;length&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$length</span><span class="p">;</span>
            <span class="nf">array_push</span><span class="p">(</span><span class="nv">$string_pool</span><span class="p">,</span> <span class="nv">$item</span><span class="p">);</span>
        <span class="p">}</span>
        
        <span class="nv">$i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nv">$string_pool</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="s2">&quot;length&quot;</span><span class="p">]);</span>
<span class="p">}</span>

<span class="nx">doukaku177</span><span class="p">();</span>

<span class="k">print</span> <span class="o">&lt;&lt;&lt;</span> <span class="nx">END_DOC</span>
<span class="o">&lt;/</span><span class="nx">BODY</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">HTML</span><span class="o">&gt;</span>
<span class="nx">END_DOC</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/9294/addtag/" class="addtag" id="addtag_9294">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/9294/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/9294/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9294"
  >-</span><span
  class="button yellow"
  id="rating_z_9294"
  >0</span><span 
  class="button green"
  id="rating_p_9294"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/9294/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9301">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/100/" target="_top">konn</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/9301/">#9301</a>(<script language="JavaScript">print_time(new Date("2009/07/07 13:20 GMT"));</script><noscript>2009/07/07 13:20 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>素朴に書いてみました。</p>
<p>Ruby-1.8.x系だと滅茶苦茶遅いですが、Ruby-1.9.1だと阿呆みたいに速くなりますね……。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre><span class="no">TARGET</span> <span class="o">=</span> <span class="s2">&quot;METHINKSITISAWEASEL&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">choice</span>
    <span class="nb">self</span><span class="o">[</span><span class="nb">rand</span><span class="p">(</span><span class="nb">self</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">]</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rand_char</span>
  <span class="p">(</span><span class="s1">&#39;A&#39;</span><span class="o">.</span><span class="n">.</span><span class="s1">&#39;Z&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">choice</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">gen</span>
  <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">300</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="no">TARGET</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">){</span><span class="o">|</span><span class="n">r</span><span class="p">,</span><span class="n">s</span><span class="o">|</span><span class="n">r</span><span class="o">+=</span><span class="n">rand_char</span><span class="p">()}</span> <span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">weasel_sort</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
  <span class="n">arr</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">rank</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span><span class="n">s</span><span class="o">.</span><span class="n">each_char</span><span class="o">.</span><span class="n">with_index</span><span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span><span class="p">;</span><span class="n">rank</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">c</span> <span class="o">!=</span> <span class="no">TARGET</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">};</span><span class="n">rank</span><span class="p">}</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">evolve</span><span class="p">(</span><span class="n">arr</span><span class="p">)</span>
  <span class="n">arr</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">word</span><span class="o">|</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span> <span class="n">t</span><span class="o">=</span><span class="n">word</span><span class="o">.</span><span class="n">dup</span><span class="p">;</span><span class="n">i</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="n">word</span><span class="o">.</span><span class="n">size</span><span class="p">);</span><span class="n">t</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span><span class="n">rand_char</span><span class="p">;</span><span class="n">t</span><span class="p">}}</span><span class="o">.</span><span class="n">flatten</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">generate_passage</span>
  <span class="n">rc</span> <span class="o">=</span> <span class="n">gen</span>
  <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">until</span> <span class="n">rc</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="no">TARGET</span>
    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">rc</span> <span class="o">=</span> <span class="n">evolve</span> <span class="n">rc</span>
    <span class="n">rc</span> <span class="o">=</span> <span class="n">weasel_sort</span> <span class="n">rc</span>
    <span class="n">rc</span> <span class="o">=</span> <span class="n">rc</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">299</span><span class="o">]</span>
    <span class="nb">puts</span> <span class="s2">&quot;generation </span><span class="si">#{</span><span class="n">i</span><span class="si">}</span><span class="s2">: &quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">rc</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="k">return</span> <span class="n">i</span>
<span class="k">end</span>

<span class="k">if</span> <span class="vg">$0</span> <span class="o">==</span> <span class="bp">__FILE__</span>
  <span class="no">TARGET</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">upcase</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
  <span class="n">generate_passage</span><span class="p">()</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/9301/addtag/" class="addtag" id="addtag_9301">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/Ruby1.9%E3%81%AF%E3%82%84%E3%81%84/">Ruby1.9はやい</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/9301/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/9301/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9301"
  >-</span><span
  class="button yellow"
  id="rating_z_9301"
  >0</span><span 
  class="button green"
  id="rating_p_9301"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/9301/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>

  
  




<div class="comment" id="comment9614">
  <p class="banner"><a href="/web/20091017222844/http://ja.doukaku.org/user/793/" target="_top">genzou</a><a href="/web/20091017222844/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/9614/">#9614</a>(<script language="JavaScript">print_time(new Date("2009/09/28 17:58 GMT"));</script><noscript>2009/09/28 17:58 GMT</noscript>)
	
	
	
	[<a href="/web/20091017222844/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content">
	<div class="comment_body">
	  <p>作ってはみたものの、metaClassを多用したせいなのかロジックが悪いのか、遅い・・・</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre>#!/usr/bin/env groovy
final RANDOM = new Random()
final TARGET = &quot;METHINKSITISAWEASEL&quot;
final WORDS_COUNT = 300

final CHARS = &quot;A&quot;..&quot;Z&quot;
CHARS.metaClass.random = {
    delegate[RANDOM.nextInt(delegate.size())]
}
String.metaClass.define{
    getDiff{
        def d = 0
        for( def i in 0..&lt;delegate.size() ){
            d += Math.abs(TARGET[i] &lt;=&gt; delegate[i])
        }
        d
    }
    getNewWord{
        def clist = delegate.chars as List
        clist[RANDOM.nextInt(clist.size())] = CHARS.random()
        clist.join(&quot;&quot;)
    }
}
def words = []

WORDS_COUNT.times{
    def chars = []
    for( def i in 0..&lt;TARGET.size() ){
        chars &lt;&lt; CHARS.random()
    }
    words &lt;&lt; chars.join(&quot;&quot;)
}

while( words[0] != TARGET ){
    words = (words * 3)*.newWord.sort{
        it.diff
    }[0..&lt;WORDS_COUNT]
    println words[0]
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20091017222844/http://ja.doukaku.org/comment/9614/addtag/" class="addtag" id="addtag_9614">タグ</a>:
	
    
    <a href="/web/20091017222844/http://ja.doukaku.org/tag/groovy/">groovy</a>
    
	&nbsp;

	
      [<a href="/web/20091017222844/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20091017222844/http://ja.doukaku.org/comment/9614/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20091017222844/http://ja.doukaku.org/comment/9614/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9614"
  >-</span><span
  class="button yellow"
  id="rating_z_9614"
  >0</span><span 
  class="button green"
  id="rating_p_9614"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20091017222844/http://ja.doukaku.org/177/reply_to/9614/">
  返信
  </a>]
  </div>
</div>
</div>

  
  <br/>







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20091017222844if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20091017222844/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20091017222844/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20091017222844/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20091017222844/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20091017222844/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20091017222844/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20091017222844/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20091017222844/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20091017222844/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20091017222844/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20091017222844im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20091017222844/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20091017222844/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20091017222844/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20091017222844/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20091017222844/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20091017222844/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20091017222844/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20091017222844/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20091017222844im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20091017222844/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20091017222844/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20091017222844/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20091017222844js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 22:28:44 Oct 17, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 13:06:49 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
