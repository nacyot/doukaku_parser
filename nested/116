
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
ワーカスレッドを安全に終了させるまで待機
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20101101172934cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20101101172934cs_/http://ja.doukaku.org/static/style/style.css" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20101101172934cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<script src="/web/20101101172934js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20101101172934js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20101101172934js_/http://ja.doukaku.org/static/js/addtag.js" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20101101172934js_/http://ja.doukaku.org/static/js/utils.js" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app17.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/116\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "1";
var displayMonth = "Nov";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/116/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20101101172934" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100929212523/http://ja.doukaku.org/116/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="29 Sep 2010"><strong>SEP</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 17:29:34 Nov 1, 2010">NOV</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Dec
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20100929212523/http://ja.doukaku.org/116/nested/" title="21:25:23 Sep 29, 2010" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 17:29:34 Nov 1, 2010">1</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081120133128/http://ja.doukaku.org/116/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="20 Nov 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 17:29:34 Nov 1, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20101101172934*/http://ja.doukaku.org/116/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>14 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 1 Nov 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:-1:010000000010_2009:-1:000000000000_2010:10:000020222020_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20101101172934/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20101101172934im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20101101172934/http://ja.doukaku.org/116/">ワーカスレッドを安全に終了させるまで待機</a>
</h2>

    




<div class="comment" id="comment4822"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/550/" target="_top">todogzm</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4822/">#4822</a>(<script language="JavaScript">print_time(new Date("2007/12/15 05:26 GMT"));</script><noscript>2007/12/15 05:26 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>スレッドプールに複数のワーカスレッドが待機しており、メインスレッドはいつでもワーカスレッドに仕事を渡せるような状態になっているとします。</p>
<p>さて、メインスレッドからスレッドプールにいくつか仕事を与え、メインスレッドは与えた仕事すべてが終了するまで待機し、次の処理に行ってはいけない、というようなコードを書いてください。
＃現実に書く機会が多そうなコードですね…。</p>
<p>ここでの仕事の内容は、適当に5秒から15秒の間スレッドをスリープする、というもので結構です。
また、ワーカスレッドのスレッドプール自体の使用を終了するか、または残して再利用するかは問いません。できればコメントにスレッドプールを残したかどうかを書いてください。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4822/addtag/" class="addtag" id="addtag_4822">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4822"
  >-</span><span
  class="button yellow"
  id="rating_z_4822"
  >0</span><span 
  class="button green"
  id="rating_p_4822"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://reply_to/4822/">
  返信
  </a>]
  </div>
</div>
</div>



  



<div class="indent">
<a href="/web/20101101172934/http://ja.doukaku.org/116/post_comment/">
コメントを投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20101101172934/http://ja.doukaku.org/116/flatten/">フラット表示</a> 
<a href="/web/20101101172934/http://ja.doukaku.org/116/">非表示</a> 


  
    




<div class="comment" id="comment4954"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4954/">#4954</a>(<script language="JavaScript">print_time(new Date("2007/12/25 01:29 GMT"));</script><noscript>2007/12/25 01:29 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>スレッドプールはつかっていなくて、指定した数だけスレッドをフォークしてそれぞれに仕事をさせています。スレッドの終了を待つのにセマフォを使っています。

実行例：
*Main&gt; :main 5
Theread N.o. 4 filinshed
Theread N.o. 5 filinshed
Theread N.o. 3 filinshed
Theread N.o. 1 filinshed
Theread N.o. 2 filinshed
All threads finished</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Concurrent</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Concurrent</span><span class="o">.</span><span class="n">QSemN</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Random</span>
<span class="kr">import</span> <span class="n">Text</span><span class="o">.</span><span class="n">Printf</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">a</span><span class="o">:</span><span class="kr">_</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="p">;</span> <span class="kr">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">read</span> <span class="nv">a</span>
          <span class="p">;</span> <span class="nv">q</span>   <span class="o">&lt;-</span> <span class="nv">newQSemN</span> <span class="nv">n</span>
          <span class="p">;</span> <span class="nv">g</span> <span class="o">&lt;-</span> <span class="nv">getStdGen</span>
          <span class="p">;</span> <span class="kr">let</span> <span class="nv">rs</span> <span class="o">=</span> <span class="nv">randomRs</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">15</span><span class="p">)</span> <span class="nv">g</span>
          <span class="p">;</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="nv">forkIO</span> <span class="o">.</span> <span class="nv">work</span> <span class="nv">q</span><span class="p">)</span> <span class="p">(</span><span class="nv">zip</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="nv">n</span><span class="p">]</span> <span class="nv">rs</span><span class="p">)</span>
          <span class="p">;</span> <span class="nv">waitQSemN</span> <span class="nv">q</span> <span class="nv">n</span>
          <span class="p">;</span> <span class="nv">putStrLn</span> <span class="s">&quot;All threads finished&quot;</span>
          <span class="p">}</span>

<span class="nv">work</span> <span class="o">::</span> <span class="n">QSemN</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">work</span> <span class="nv">q</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span><span class="nv">d</span><span class="p">)</span> <span class="o">=</span>  <span class="nv">waitQSemN</span> <span class="nv">q</span> <span class="mi">1</span>
             <span class="o">&gt;&gt;</span> <span class="nv">threadDelay</span> <span class="p">(</span><span class="nv">d</span><span class="o">*</span><span class="mi">10</span><span class="o">^</span><span class="mi">6</span><span class="p">)</span> 
             <span class="o">&gt;&gt;</span> <span class="nv">signalQSemN</span> <span class="nv">q</span> <span class="mi">1</span>
             <span class="o">&gt;&gt;</span> <span class="nv">printf</span> <span class="s">&quot;Theread N.o. %d filinshed\n&quot;</span> <span class="nv">i</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4954/addtag/" class="addtag" id="addtag_4954">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4954/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4954/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4954"
  >-</span><span
  class="button yellow"
  id="rating_z_4954"
  >0</span><span 
  class="button green"
  id="rating_p_4954"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4954/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4954/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4966"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4966/">#4966</a>(<script language="JavaScript">print_time(new Date("2007/12/25 11:38 GMT"));</script><noscript>2007/12/25 11:38 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #afffaf;">5/5=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>マイナス評価をいただいたのを機会に(はじめてじゃないけど．．．)．．．</p>
<p>自分ではなかなか自分の書いたプログラムの不具合や不都合，不足に気づけない
ので「△△が変だよ」「○○の条件を満たしてないよ」「××がだめじゃん」とか
具体的に指摘していただけると幸いです．</p>
<p>プログラムに不具合があるなら直しておきたいし，改良する手掛かりにもなるし，
今後の研鑽にもなるし，あるいは，後からコードを読む人の注意点にもなるので．．．</p>
<p>自分で気づいた誤り不具合は直せるのだけど．．．まだまだ未熟者ゆえ，
よろしくお願いします．&gt; みなさま．</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4966/addtag/" class="addtag" id="addtag_4966">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #afffaf;"
  >5/5=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4966"
  >-</span><span
  class="button yellow"
  id="rating_z_4966"
  >0</span><span 
  class="button green"
  id="rating_p_4966"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4954/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4966/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4966/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4966/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4977"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4977/">#4977</a>(<script language="JavaScript">print_time(new Date("2007/12/26 12:16 GMT"));</script><noscript>2007/12/26 12:16 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>マイナスを付けるときに匿名でコメント出来る機能があるといいかも知れませんね。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4977/addtag/" class="addtag" id="addtag_4977">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4977"
  >-</span><span
  class="button yellow"
  id="rating_z_4977"
  >0</span><span 
  class="button green"
  id="rating_p_4977"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4966/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4977/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4977/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4977/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4982"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4982/">#4982</a>(<script language="JavaScript">print_time(new Date("2007/12/26 15:28 GMT"));</script><noscript>2007/12/26 15:28 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>すみません、マイナスをつけた人です。
そんなに重い意味でつけたのではないのですが･･･</p>
<p>マイナスをつけたのは</p>
<p>「スレッドプールに複数のワーカスレッドが待機しており、メインスレッドはいつでもワーカスレッドに仕事を渡せるような状態になっているとします。</p>
<p>さて、メインスレッドからスレッドプールにいくつか仕事を与え、メインスレッドは与えた仕事すべてが終了するまで待機し、次の処理に行ってはいけない、というようなコードを書いてください。」</p>
<p>というように「スレッドプール」を使うということがお題に明確に書いてあるのに、スレッドプールを使っていないから、という理由でした。スレッドプールにスレッドが待機している、というのもお題に入っているんじゃないかと。そのコード自体がまずいから、という理由ではありません。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4982/addtag/" class="addtag" id="addtag_4982">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4982"
  >-</span><span
  class="button yellow"
  id="rating_z_4982"
  >0</span><span 
  class="button green"
  id="rating_p_4982"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4977/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4982/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4982/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4982/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4985"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4985/">#4985</a>(<script language="JavaScript">print_time(new Date("2007/12/27 03:19 GMT"));</script><noscript>2007/12/27 03:19 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ご指摘ありがとうございます．

私の解答には「スレッドプールを使っていない」ことに対する説明(言い訳?)が
ありませんでした．これではいくらなんでも．．．(気付けよ &gt; 私)

とうわけで改めて，説明(言い訳を(^^;))をばいたします．

Haskellのプログラムには，異る内部状態をもつ同一の計算対象とか，同じ内部
状態をもつ異る計算対象というものが存在しません．計算対象のエクステント
という概念もありません．つまり，計算対象の生成，消滅という概念もありません．

というわけで，Haskellでは「生成されたスレッド」，「タスク実行中のスレッド」，
「アイドル中のスレッド」という計算対象を直接表現できません．そこで，
「再利用するかどうかは問わない」とあるのをこれ幸いに，「再利用しないなら
プールはいらない」とお題を曲解することにして，複数のスレッドの仕事の終了を
待つという部分だけ実装してお茶を濁してしまいました．

Haskellでばかりを使っているので，プログラミングの常識，非常識の感覚が
他の言語のプログラマとずれていたり逆転していたりします．自分の非常識を
確認しておきたいこともありますが，Haskellプログラミングのどんなところを
どんな風にプレゼンテーションしたら楽しんでもらえるか，あるいは，どこが
伝わり難いのかにも大変興味があります．プラスであれマイナスであれ評価が
付いたということは多少とも興味をもってもらったということなので，これ幸い
と「ついでにコメントも下さい」とお願いしてみたしだいです．

お題，回答，評価，コメントというコミュニケーションそのものが楽しめるし，
勉強になるので．．．

P.S.
私自身は，マイナス評価を付けることはプラス評価を付けるのと同様に気軽に
やればいいと思っていますし，評価を付けるのに正当な理由の説明が必要だとも
思っていません．


</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4985/addtag/" class="addtag" id="addtag_4985">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4985"
  >-</span><span
  class="button yellow"
  id="rating_z_4985"
  >0</span><span 
  class="button green"
  id="rating_p_4985"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4982/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4985/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4985/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4985/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4986"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4986/">#4986</a>(<script language="JavaScript">print_time(new Date("2007/12/27 03:46 GMT"));</script><noscript>2007/12/27 03:46 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>逆に、処理系が勝手にネイティブスレッドのプールを作っておいてforkIOした言語上のスレッドを適宜並列実行するってセマンティクスはありなんですよね。そういう実装は無いんでしょうか?</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4986/addtag/" class="addtag" id="addtag_4986">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4986"
  >-</span><span
  class="button yellow"
  id="rating_z_4986"
  >0</span><span 
  class="button green"
  id="rating_p_4986"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4985/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4986/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4986/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4986/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment5036"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5036/">#5036</a>(<script language="JavaScript">print_time(new Date("2007/12/28 11:39 GMT"));</script><noscript>2007/12/28 11:39 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>何を以ってスレッドプールと呼ぶかは微妙ですがHaskellでスレッドプールもどきを
を表現してみました．

11〜17行目でそれらしい型名を導入しています．
Worker というのがひとつのワーカスレッドです．これは IO () という型で，
Haskell 的には，アクションとよばれる値を表わす型です．アクションは実行
されると入出力を行うような値です．

26行目でワーカスレッドプールを作成しています．ここでは，n 個のワーカの
リストをforkIOをつかって「実行」されると別スレッドで動くアクションのリ
ストに変換しています．これがこのリストがスレッドプールを表現していると
考えることができます．

ワーカは mkWorkerを使って作ります．ワーカはワーカ番号とワーカの開始と
終了を知るためのセマフォとタスクを受けとる口とで作ります．ワーカ本体は，
59〜67行目までで定義されているとおり，
・口からタスクを読むアクション(60行目)
・タスクの有無で選択(61行目)
  ・タスクない場合は一旦ほかのスレッドに実行を渡すアクション+自分自身(62行目)
  ・タスクがあった場合は(63行目)
      ・タスクの種類で選択(64行目)
          ・終了マークなら，なにもしないアクション(65行目)
          ・仕事なら，セマフォを掴むアクション
                     +その仕事
                     +セマフォを戻すアクション
                     +自分自身
となっています．
タスクをワーカに渡すのにはMVarを経由します．

細部の説明はきりがないのでここでやめますが，注意点をひとつ．
「実行」と「評価」は別ものです．「実行」は Haskell のプログラムの意味
ににあらわれません．do構文のなかにならんでいる行は，命令型の言語でいう
ところの文(statement)とか命令(command)ではなく，式です．それぞれの式は
「評価」するとアクションとよばれる値を表わしています．
Haskell では do 構文(糖衣)を使ってアクションの並びをひとつのアクション
にまとめます．

ここでは，できるだけ命令型の構文や概念に近くなるように書きました．
正直に白状するとHaskell脳症の頭で考えるのは難しかったです．

より具体的な課題に対してはもっと関数的な Haskell らしい書き方というのが
あるような気がしていますが．．．


*Main&gt; :main 3
Worker 1 starts at 2007-12-28 10:15:29.973076 UTC
Work 1 starts at 2007-12-28 10:15:29.973809 UTC
Worker 2 starts at 2007-12-28 10:15:29.97446 UTC
Work 2 starts at 2007-12-28 10:15:29.975092 UTC
Worker 3 starts at 2007-12-28 10:15:29.975778 UTC
Work 3 starts at 2007-12-28 10:15:29.976253 UTC
Work 3 ends   at 2007-12-28 10:15:38.984953 UTC
Work 2 ends   at 2007-12-28 10:15:41.985189 UTC
Work 1 ends   at 2007-12-28 10:15:43.984072 UTC
Work 4 starts at 2007-12-28 10:15:43.984574 UTC
Work 6 starts at 2007-12-28 10:15:43.984975 UTC
Work 5 starts at 2007-12-28 10:15:43.985371 UTC
Work 4 ends   at 2007-12-28 10:15:50.993701 UTC
Work 6 ends   at 2007-12-28 10:15:53.994784 UTC
Work 5 ends   at 2007-12-28 10:15:54.995536 UTC
Worker 2 ends   at 2007-12-28 10:15:54.996034 UTC
Worker 3 ends   at 2007-12-28 10:15:54.996436 UTC
Worker 1 ends   at 2007-12-28 10:15:54.996838 UTC
Main thread finished.

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="p">(</span><span class="nv">main</span><span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Concurrent</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Time</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Random</span>
<span class="kr">import</span> <span class="n">Text</span><span class="o">.</span><span class="n">Printf</span>

<span class="kr">type</span> <span class="n">Done</span>     <span class="o">=</span> <span class="p">()</span>      <span class="c1">-- ワーカ終了合図</span>
<span class="kr">type</span> <span class="n">Work</span>     <span class="o">=</span> <span class="n">IO</span> <span class="p">()</span>   <span class="c1">-- 仕事</span>
<span class="kr">type</span> <span class="n">WorkID</span>   <span class="o">=</span> <span class="n">Int</span>     <span class="c1">-- 仕事番号</span>
<span class="kr">type</span> <span class="n">Task</span>     <span class="o">=</span> <span class="p">(</span><span class="n">QSemN</span><span class="p">,</span> <span class="n">Either</span> <span class="n">Done</span> <span class="n">Work</span><span class="p">)</span> <span class="c1">-- タスク(１クールセマフォ，仕事)</span>
<span class="kr">type</span> <span class="n">Conn</span>     <span class="o">=</span> <span class="n">MVar</span> <span class="n">Task</span> <span class="c1">-- ワーカにタスクを渡す口</span>
<span class="kr">type</span> <span class="n">Worker</span>   <span class="o">=</span> <span class="n">IO</span> <span class="p">()</span>     <span class="c1">-- ワーカ</span>
<span class="kr">type</span> <span class="n">WorkerID</span> <span class="o">=</span> <span class="n">Int</span>       <span class="c1">-- ワーカ番号</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span>
<span class="p">;</span> <span class="nv">a</span><span class="o">:</span><span class="kr">_</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
<span class="p">;</span> <span class="nv">g</span> <span class="o">&lt;-</span> <span class="nv">getStdGen</span>
<span class="p">;</span> <span class="kr">let</span> <span class="p">{</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">read</span> <span class="nv">a</span><span class="p">;</span> <span class="nv">rs</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="mi">10</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="p">)</span> <span class="o">$</span> <span class="nv">randomRs</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">15</span><span class="p">)</span> <span class="nv">g</span> <span class="p">;</span> <span class="nv">cours</span> <span class="o">=</span> <span class="nv">mkcours</span> <span class="nv">n</span> <span class="nv">rs</span><span class="p">}</span>
<span class="p">;</span> <span class="nv">ps</span> <span class="o">&lt;-</span> <span class="nv">workerSems</span>  <span class="nv">n</span> <span class="c1">-- ワーカの状態を知るためのセマフォ</span>
<span class="p">;</span> <span class="nv">cs</span> <span class="o">&lt;-</span> <span class="nv">connections</span> <span class="nv">n</span> <span class="c1">-- メインスレッドからワーカスレッドへの仕事を渡すための口</span>
<span class="p">;</span> <span class="nv">mapM_</span> <span class="nv">forkIO</span> <span class="o">$</span> <span class="nv">zipWith3</span> <span class="nv">mkWorker</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="nv">n</span><span class="p">]</span> <span class="nv">ps</span> <span class="nv">cs</span> <span class="c1">-- ワーカスレッドプール作成</span>
<span class="p">;</span> <span class="nv">qn</span> <span class="o">&lt;-</span> <span class="nv">newQSemN</span> <span class="nv">n</span>                           <span class="c1">-- ワークの終了を知るためのセマフォ</span>
<span class="p">;</span> <span class="nv">deliver</span> <span class="nv">qn</span> <span class="nv">cs</span> <span class="p">(</span><span class="nv">map</span> <span class="n">Right</span> <span class="o">$</span> <span class="nv">cours</span> <span class="o">!!</span> <span class="mi">0</span><span class="p">)</span>     <span class="c1">-- 一回目の仕事の割り振り</span>
<span class="p">;</span> <span class="nv">waitQSemN</span> <span class="nv">qn</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nv">n</span><span class="p">);</span>                        <span class="c1">-- 一クールの終了待ち</span>
<span class="p">;</span> <span class="nv">signalQSemN</span> <span class="nv">qn</span> <span class="nv">n</span>                           <span class="c1">-- セマフォのリセット</span>
<span class="p">;</span> <span class="nv">deliver</span> <span class="nv">qn</span> <span class="nv">cs</span> <span class="p">(</span><span class="nv">map</span> <span class="n">Right</span> <span class="o">$</span> <span class="nv">cours</span> <span class="o">!!</span> <span class="mi">1</span><span class="p">)</span>     <span class="c1">-- 二回目の仕事の割り振り</span>
<span class="p">;</span> <span class="nv">waitQSemN</span> <span class="nv">qn</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nv">n</span><span class="p">);</span>                        <span class="c1">-- 一クールの終了待ち</span>
<span class="p">;</span> <span class="nv">signalQSemN</span> <span class="nv">qn</span> <span class="nv">n</span>                           <span class="c1">-- セマフォのリセット</span>
<span class="p">;</span> <span class="nv">deliver</span> <span class="nv">qn</span> <span class="nv">cs</span> <span class="p">(</span><span class="nv">replicate</span> <span class="nv">n</span> <span class="o">$</span> <span class="n">Left</span> <span class="p">())</span>      <span class="c1">-- ワーカに終了の合図</span>
<span class="p">;</span> <span class="nv">mapM_</span> <span class="nv">waitQSem</span> <span class="nv">ps</span>                          <span class="c1">-- すべてのワーカの終了を待ち</span>
<span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">stderr</span> <span class="s">&quot;Main thread finished.&quot;</span>
<span class="p">}</span>

<span class="nv">workerSems</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">[</span><span class="n">QSem</span><span class="p">]</span>
<span class="nv">workerSems</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">const</span> <span class="o">$</span> <span class="nv">newQSem</span> <span class="mi">1</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="nv">n</span><span class="p">]</span>

<span class="nv">deliverSem</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">QSemN</span>
<span class="nv">deliverSem</span> <span class="o">=</span> <span class="nv">newQSemN</span>

<span class="nv">connections</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">[</span><span class="n">Conn</span><span class="p">]</span>
<span class="nv">connections</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">const</span> <span class="nv">newEmptyMVar</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="nv">n</span><span class="p">]</span>

<span class="nv">mkWorker</span> <span class="o">::</span> <span class="n">WorkerID</span> <span class="o">-&gt;</span> <span class="n">QSem</span> <span class="o">-&gt;</span> <span class="n">Conn</span> <span class="o">-&gt;</span> <span class="n">Worker</span>
<span class="nv">mkWorker</span> <span class="nv">wid</span> <span class="nv">wq</span> <span class="nv">conn</span> 
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">waitQSem</span> <span class="nv">wq</span>
      <span class="p">;</span> <span class="nv">s</span> <span class="o">&lt;-</span> <span class="nv">getCurrentTime</span>
      <span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">stderr</span> <span class="p">(</span><span class="nv">printf</span> <span class="s">&quot;Worker %d starts at %s&quot;</span> <span class="nv">wid</span> <span class="p">(</span><span class="nv">show</span> <span class="nv">s</span><span class="p">))</span>
      <span class="p">;</span> <span class="nv">worker</span>
      <span class="p">;</span> <span class="nv">e</span> <span class="o">&lt;-</span> <span class="nv">getCurrentTime</span>
      <span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">stderr</span> <span class="p">(</span><span class="nv">printf</span> <span class="s">&quot;Worker %d ends   at %s&quot;</span> <span class="nv">wid</span> <span class="p">(</span><span class="nv">show</span> <span class="nv">e</span><span class="p">))</span>
      <span class="p">;</span> <span class="nv">signalQSem</span> <span class="nv">wq</span>
      <span class="p">}</span>
 <span class="kr">where</span> 
   <span class="nv">worker</span>
    <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">mt</span> <span class="o">&lt;-</span> <span class="nv">tryTakeMVar</span> <span class="nv">conn</span>
         <span class="p">;</span> <span class="kr">case</span> <span class="nv">mt</span> <span class="kr">of</span>
             <span class="n">Nothing</span> <span class="o">-&gt;</span> <span class="nv">yield</span> <span class="o">&gt;&gt;</span> <span class="nv">worker</span>
             <span class="n">Just</span> <span class="p">(</span><span class="nv">q</span><span class="p">,</span><span class="nv">dw</span><span class="p">)</span>
               <span class="o">-&gt;</span> <span class="kr">case</span> <span class="nv">dw</span> <span class="kr">of</span>
                    <span class="n">Left</span>  <span class="p">()</span>   <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">()</span>
                    <span class="n">Right</span> <span class="nv">work</span> <span class="o">-&gt;</span> <span class="nv">waitQSemN</span> <span class="nv">q</span> <span class="mi">1</span> <span class="o">&gt;&gt;</span> <span class="nv">work</span> <span class="o">&gt;&gt;</span> <span class="nv">signalQSemN</span> <span class="nv">q</span> <span class="mi">2</span> <span class="o">&gt;&gt;</span> <span class="nv">worker</span>
         <span class="p">}</span>

<span class="nv">deliver</span> <span class="o">::</span> <span class="n">QSemN</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Conn</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Either</span> <span class="n">Done</span> <span class="n">Work</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">deliver</span> <span class="nv">q</span> <span class="nv">cs</span> <span class="nv">ws</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="nv">uncurry</span> <span class="nv">putMVar</span><span class="p">)</span> <span class="p">(</span><span class="nv">zip</span> <span class="nv">cs</span> <span class="p">(</span><span class="nv">map</span> <span class="p">((,)</span> <span class="nv">q</span><span class="p">)</span> <span class="nv">ws</span><span class="p">))</span>

<span class="nv">slices</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="nv">a</span><span class="p">]]</span>
<span class="nv">slices</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">unfoldr</span> <span class="nv">phi</span>
  <span class="kr">where</span> <span class="nv">phi</span> <span class="p">[]</span> <span class="o">=</span> <span class="n">Nothing</span>
        <span class="nv">phi</span> <span class="nv">xs</span> <span class="o">=</span> <span class="n">Just</span> <span class="o">$</span> <span class="nv">splitAt</span> <span class="nv">n</span> <span class="nv">xs</span>

<span class="nv">mkcours</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">Work</span><span class="p">]]</span>
<span class="nv">mkcours</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">slices</span> <span class="nv">n</span> <span class="o">.</span> <span class="nv">zipWith</span> <span class="nv">mkWork</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span>

<span class="kr">type</span> <span class="n">MuSec</span> <span class="o">=</span> <span class="n">Int</span>                   <span class="c1">-- 遅延microsec(サンプル用)</span>
<span class="nv">mkWork</span> <span class="o">::</span> <span class="n">WorkID</span> <span class="o">-&gt;</span> <span class="n">MuSec</span> <span class="o">-&gt;</span> <span class="n">Work</span>  <span class="c1">-- サンプルの仕事作成</span>
<span class="nv">mkWork</span> <span class="nv">wid</span> <span class="nv">musec</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">s</span> <span class="o">&lt;-</span> <span class="nv">getCurrentTime</span> 
      <span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">stderr</span> <span class="p">(</span><span class="nv">printf</span> <span class="s">&quot;Work %d starts at %s&quot;</span> <span class="nv">wid</span> <span class="p">(</span><span class="nv">show</span> <span class="nv">s</span><span class="p">))</span>
      <span class="p">;</span> <span class="nv">threadDelay</span> <span class="nv">musec</span>
      <span class="p">;</span> <span class="nv">e</span> <span class="o">&lt;-</span> <span class="nv">getCurrentTime</span>
      <span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">stderr</span> <span class="p">(</span><span class="nv">printf</span> <span class="s">&quot;Work %d ends   at %s&quot;</span> <span class="nv">wid</span> <span class="p">(</span><span class="nv">show</span> <span class="nv">e</span><span class="p">))</span>
      <span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5036/addtag/" class="addtag" id="addtag_5036">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5036/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5036/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5036"
  >-</span><span
  class="button yellow"
  id="rating_z_5036"
  >0</span><span 
  class="button green"
  id="rating_p_5036"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4986/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/5036/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5036/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


  

  

  
    




<div class="comment" id="comment5331"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/380/" target="_top">vtwntmtn</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5331/">#5331</a>(<script language="JavaScript">print_time(new Date("2008/01/15 15:24 GMT"));</script><noscript>2008/01/15 15:24 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/erlang/">
	  Erlang
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Poolに対してErlangのプロセスをプールしておき、それらに対してSleepを渡します。
Poolにあるプロセスは再利用可能です。
スレッドって何だろうと言うのがあるのですが、「並列実行してくれるなにか」と解釈してます。問題の意図にあってるでしょうか？</p>
<pre class="literal-block">
&gt; erlc worker_thread.erl
&gt; erl -noshell -s worker_thread worker_thread -s init stop
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre>-module(worker_thread).
-export([worker_thread/0]).

worker() -&gt;
    receive
        {Pid, Fun} -&gt;
            Fun(),
            Pid ! true,
            worker()
    end.

for(End, End, Func) -&gt; [Func()];
for(Index, End, Func) -&gt; [Func() | for(Index + 1, End, Func)].

worker_thread() -&gt;
    Pool = for(1, 3, fun() -&gt; spawn(fun() -&gt; worker() end) end),
    Sleep = [fun() -&gt; timer:sleep(1000 * X) end || X &lt;- lists:seq(1, 3)],
    Temp = lists:zip(Pool, Sleep),
    lists:foreach(fun({Pid, Fun}) -&gt; Pid ! {self(), Fun} end, Temp),
    for(1, 3, fun() -&gt; receive true -&gt; void end end).
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5331/addtag/" class="addtag" id="addtag_5331">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/erlang/">
		Erlang
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5331/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5331/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5331"
  >-</span><span
  class="button yellow"
  id="rating_z_5331"
  >0</span><span 
  class="button green"
  id="rating_p_5331"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5331/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment6100"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6100/">#6100</a>(<script language="JavaScript">print_time(new Date("2008/03/29 12:46 GMT"));</script><noscript>2008/03/29 12:46 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Twistedを使って実装</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">twisted.internet</span> <span class="k">import</span> <span class="n">threads</span><span class="p">,</span> <span class="n">reactor</span><span class="p">,</span> <span class="n">defer</span>
<span class="k">import</span> <span class="nn">random</span>
<span class="k">import</span> <span class="nn">time</span>

<span class="k">def</span> <span class="nf">task</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>

<span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">threads</span><span class="o">.</span><span class="n">deferToThread</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
<span class="n">defer</span><span class="o">.</span><span class="n">DeferredList</span><span class="p">(</span><span class="n">tasks</span><span class="p">)</span><span class="o">.</span><span class="n">addCallback</span><span class="p">(</span><span class="k">lambda</span> <span class="n">r</span><span class="p">:</span><span class="n">reactor</span><span class="o">.</span><span class="n">stop</span><span class="p">())</span>
<span class="n">reactor</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6100/addtag/" class="addtag" id="addtag_6100">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6100/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6100/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6100"
  >-</span><span
  class="button yellow"
  id="rating_z_6100"
  >0</span><span 
  class="button green"
  id="rating_p_6100"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/6100/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment4959"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4959/">#4959</a>(<script language="JavaScript">print_time(new Date("2007/12/25 03:23 GMT"));</script><noscript>2007/12/25 03:23 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  C#&nbsp;では&nbsp;Delegate.BeginInvoke&nbsp;を使うとスレッドプール内のスレッドが使われるので、今回はそれを使ってみました。今回は複数タスクを待機するので、AsyncWaitHandle&nbsp;の配列を&nbsp;WaitHandle.WaitAll&nbsp;メソッドに渡しています。いろんな意味であまり好ましくない実装ですが……。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span> <span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;start.&quot;</span><span class="p">);</span>
        <span class="n">WaitCallback</span> <span class="n">func</span> <span class="p">=</span> <span class="k">delegate</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span> <span class="k">{</span>   <span class="c">// 実行されるタスク</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;start: {0}&quot;</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
            <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="k">new</span> <span class="n">Random</span><span class="p">().</span><span class="n">Next</span><span class="p">(</span><span class="m">5</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span> <span class="p">*</span> <span class="m">1000</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;finish: {0}&quot;</span><span class="p">,</span> <span class="n">obj</span><span class="p">);</span>
        <span class="k">}</span><span class="p">;</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">WaitHandle</span><span class="p">&gt;</span> <span class="n">waitHandles</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">WaitHandle</span><span class="p">&gt;();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">10</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="k">{</span>
            <span class="n">waitHandles</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">func</span><span class="p">.</span><span class="n">BeginInvoke</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">).</span><span class="n">AsyncWaitHandle</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="n">WaitHandle</span><span class="p">.</span><span class="n">WaitAll</span><span class="p">(</span><span class="n">waitHandles</span><span class="p">.</span><span class="n">ToArray</span><span class="p">());</span>   <span class="c">// メインスレッドはここで待機</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;join.&quot;</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4959/addtag/" class="addtag" id="addtag_4959">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4959/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4959/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4959"
  >-</span><span
  class="button yellow"
  id="rating_z_4959"
  >0</span><span 
  class="button green"
  id="rating_p_4959"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4959/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4961"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4961/">#4961</a>(<script language="JavaScript">print_time(new Date("2007/12/25 05:12 GMT"));</script><noscript>2007/12/25 05:12 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Queue.Queueを使って排他制御します。Javaのconcurrentに似てますが、Javaのと違ってThreadPool#shutdownがスレッドの終了を待ちます。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">threading</span>
<span class="k">import</span> <span class="nn">random</span>
<span class="k">import</span> <span class="nn">Queue</span>
<span class="k">import</span> <span class="nn">time</span>

<span class="k">class</span> <span class="nc">ThreadPool</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c"># infinite sized queue</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_threads</span> <span class="o">=</span> <span class="p">[</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">_run</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">count</span><span class="p">)]</span>
        <span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_threads</span><span class="p">:</span>
            <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">func</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">func</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">func</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">submit</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">func</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;None is not allowed here&quot;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">func</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">shutdown</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_threads</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span> <span class="c"># terminator</span>
        <span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_threads</span><span class="p">:</span>
            <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">create</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">wait</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">func</span><span class="p">():</span>
        <span class="k">print</span> <span class="s">&quot;task </span><span class="si">%d</span><span class="s"> started (</span><span class="si">%2d</span><span class="s"> sec)&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">wait</span><span class="p">)</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">wait</span><span class="p">)</span>
        <span class="k">print</span> <span class="s">&quot;task </span><span class="si">%d</span><span class="s"> done&quot;</span> <span class="o">%</span> <span class="nb">id</span>
    <span class="k">return</span> <span class="n">func</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">pool</span> <span class="o">=</span> <span class="n">ThreadPool</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="nb">id</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
            <span class="n">pool</span><span class="o">.</span><span class="n">submit</span><span class="p">(</span><span class="n">create</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">)))</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="n">pool</span><span class="o">.</span><span class="n">shutdown</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&quot;completed&quot;</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4961/addtag/" class="addtag" id="addtag_4961">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4961/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4961/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4961"
  >-</span><span
  class="button yellow"
  id="rating_z_4961"
  >0</span><span 
  class="button green"
  id="rating_p_4961"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4961/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4961/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4991"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4991/">#4991</a>(<script language="JavaScript">print_time(new Date("2007/12/27 06:43 GMT"));</script><noscript>2007/12/27 06:43 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  自分が自前で実装した機能のほとんどがPythonの標準でできたのか。
自分が今書いているコードの参考にさせてもらいます。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4991/addtag/" class="addtag" id="addtag_4991">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4991"
  >-</span><span
  class="button yellow"
  id="rating_z_4991"
  >0</span><span 
  class="button green"
  id="rating_p_4991"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4961/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4991/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4991/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4991/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment5040"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5040/">#5040</a>(<script language="JavaScript">print_time(new Date("2007/12/28 14:22 GMT"));</script><noscript>2007/12/28 14:22 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>threadingモジュールにないし発見しにくいんですよね &gt; Queue.Queue</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5040/addtag/" class="addtag" id="addtag_5040">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5040"
  >-</span><span
  class="button yellow"
  id="rating_z_5040"
  >0</span><span 
  class="button green"
  id="rating_p_5040"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4991/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/5040/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5040/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  


  

  
    




<div class="comment" id="comment4956"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4956/">#4956</a>(<script language="JavaScript">print_time(new Date("2007/12/25 01:41 GMT"));</script><noscript>2007/12/25 01:41 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>workerThreadはexecを利用しているので、任意のpythonコードを実行できます。
threadPoolは引数を変更することで、workerThreadの数を変更できます。

現在はthreadPoolがworkerThreadを監視して、タスクが空のやつにタスクを渡していますが、
workerThreadはタスクをリストで持っているので、実はいくらでもタスクを突っ込めます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">threading</span>
<span class="k">import</span> <span class="nn">time</span>

<span class="k">class</span> <span class="nc">workerThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">workque</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">workque</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.001</span><span class="p">)</span>
                <span class="k">continue</span>
            
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">workque</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s">&quot;exit&quot;</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">w</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">workque</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">workque</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">workque</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
                <span class="k">exec</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
                    
    <span class="k">def</span> <span class="nf">appendTask</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">workque</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">threadPool</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Lock</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">task</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">w</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">isExit</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">workerThread</span><span class="p">())</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>


    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
            
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">task</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
                <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">isExit</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.001</span><span class="p">)</span>
                <span class="k">continue</span>

            <span class="n">isAppend</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="p">:</span>
                <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">w</span><span class="o">.</span><span class="n">workque</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">isAppend</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="n">w</span><span class="o">.</span><span class="n">appendTask</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">task</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">task</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">task</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
                    <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
                    <span class="k">break</span>

            <span class="k">if</span> <span class="n">isAppend</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
                <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.001</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="p">:</span>
            <span class="n">w</span><span class="o">.</span><span class="n">appendTask</span><span class="p">(</span><span class="s">&quot;exit&quot;</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">w</span><span class="p">:</span>
            <span class="n">w</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">appendTask</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">task</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">task</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>
        
    <span class="k">def</span> <span class="nf">exit</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">acquire</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">isExit</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">l</span><span class="o">.</span><span class="n">release</span><span class="p">()</span>

<span class="n">tp</span> <span class="o">=</span> <span class="n">threadPool</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">tp</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>

<span class="n">tp</span><span class="o">.</span><span class="n">appendTask</span><span class="p">(</span><span class="s">&quot;print &#39;hello world&#39;&quot;</span><span class="p">)</span>
<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">tp</span><span class="o">.</span><span class="n">appendTask</span><span class="p">(</span><span class="s">&quot;print &#39;sleeping...&#39;</span><span class="se">\n</span><span class="s">time.sleep(10)</span><span class="se">\n</span><span class="s">print &#39;wake up!&#39;&quot;</span><span class="p">)</span>
<span class="n">tp</span><span class="o">.</span><span class="n">appendTask</span><span class="p">(</span><span class="s">&quot;print &#39;sleeping...&#39;</span><span class="se">\n</span><span class="s">time.sleep(10)</span><span class="se">\n</span><span class="s">print &#39;wake up!&#39;&quot;</span><span class="p">)</span>

<span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">tp</span><span class="o">.</span><span class="n">exit</span><span class="p">()</span>
<span class="n">tp</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4956/addtag/" class="addtag" id="addtag_4956">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4956/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4956/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4956"
  >-</span><span
  class="button yellow"
  id="rating_z_4956"
  >0</span><span 
  class="button green"
  id="rating_p_4956"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4956/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment4960"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4960/">#4960</a>(<script language="JavaScript">print_time(new Date("2007/12/25 04:43 GMT"));</script><noscript>2007/12/25 04:43 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Javaのconcurrentユーティリティを使用。スレッドプールはpool.shutdown();で終了します。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>

<span class="k">class</span> <span class="nc">MeApp</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">ExecutorService</span> <span class="n">pool</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">final</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;?&gt;</span> <span class="o">&gt;</span> <span class="n">futures</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;?&gt;</span> <span class="o">&gt;();</span>
            <span class="k">final</span> <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">final</span> <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="k">final</span> <span class="kt">int</span> <span class="n">wait</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
                <span class="n">futures</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">pool</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
                    <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;task %d start (%2d sec)\n&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">wait</span><span class="o">);</span>
                        <span class="k">try</span> <span class="o">{</span>
                            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">wait</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;task %d done\n&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}));</span>
            <span class="o">}</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Future</span><span class="o">&lt;?&gt;</span> <span class="n">future</span> <span class="o">:</span> <span class="n">futures</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">();</span> <span class="c">// wait for task completion</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">pool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4960/addtag/" class="addtag" id="addtag_4960">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4960/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4960/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4960"
  >-</span><span
  class="button yellow"
  id="rating_z_4960"
  >0</span><span 
  class="button green"
  id="rating_p_4960"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4960/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4960/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4990"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/550/" target="_top">todogzm</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4990/">#4990</a>(<script language="JavaScript">print_time(new Date("2007/12/27 05:38 GMT"));</script><noscript>2007/12/27 05:38 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>oceanさん作バージョンはFuture#get()を用いて各スレッドの終了を待つような実装でした。
もうひとつの解として、ExecutorService#awaitTermination()を用いて、
スレッドプールの各タスクがすべて安全に終了するまでを待つような実装も投稿します。</p>
<p>(今回のプログラムにてExecutorService#submit() を execute()に変えたのは、Futureを使わないことを明示する以外に特に意味はありません。)</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.TimeUnit</span><span class="o">;</span>

<span class="k">class</span> <span class="nc">MeApp2</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">ExecutorService</span> <span class="n">pool</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">final</span> <span class="n">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">final</span> <span class="kt">int</span> <span class="n">id</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="k">final</span> <span class="kt">int</span> <span class="n">wait</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
                <span class="n">pool</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
                    <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;task %d start (%2d sec)\n&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">,</span> <span class="n">wait</span><span class="o">);</span>
                        <span class="k">try</span> <span class="o">{</span>
                            <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">wait</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>
                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                            <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;task %d done\n&quot;</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">});</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">pool</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
            <span class="c">//ここで全タスクの終了を待つ</span>
            <span class="n">pool</span><span class="o">.</span><span class="na">awaitTermination</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4990/addtag/" class="addtag" id="addtag_4990">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4990/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4990/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4990"
  >-</span><span
  class="button yellow"
  id="rating_z_4990"
  >0</span><span 
  class="button green"
  id="rating_p_4990"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4960/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4990/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4990/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  
    




<div class="comment" id="comment6139"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6139/">#6139</a>(<script language="JavaScript">print_time(new Date("2008/04/04 16:10 GMT"));</script><noscript>2008/04/04 16:10 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>C / OpenMP で。
Fortran 版とほぼ同じ。
19行でスレッド8本を生成、
23行で空きスレッドに仕事を割り当て、
28行でスレッド終了待ち

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;unistd.h&gt;</span>
<span class="cp">#include &lt;omp.h&gt;</span>

<span class="kt">void</span> <span class="nf">random_wait</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">)</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">w</span><span class="p">;</span>
  <span class="n">w</span><span class="o">=</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="mi">10</span><span class="p">;</span>
  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;begin %d - %d sec, thread %d/%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">w</span><span class="p">,</span>
      <span class="n">omp_get_thread_num</span><span class="p">(),</span> <span class="n">omp_get_num_threads</span><span class="p">());</span>
  <span class="n">sleep</span><span class="p">(</span><span class="n">w</span><span class="p">);</span>
  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;end   %d - %d sec, thread %d/%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">w</span><span class="p">,</span>
      <span class="n">omp_get_thread_num</span><span class="p">(),</span> <span class="n">omp_get_num_threads</span><span class="p">());</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Single Thread</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
  <span class="n">sleep</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
<span class="cp">#pragma omp parallel num_threads(8)</span>
  <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Multi Thread %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">omp_get_thread_num</span><span class="p">());</span>
<span class="cp">#pragma omp for schedule(dynamic) nowait</span>
    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">random_wait</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;finish %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">omp_get_thread_num</span><span class="p">());</span>
<span class="cp">#pragma omp barrier</span>
<span class="cp">#pragma omp master</span>
    <span class="p">{</span>
      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Finish</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6139/addtag/" class="addtag" id="addtag_6139">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6139/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6139/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6139"
  >-</span><span
  class="button yellow"
  id="rating_z_6139"
  >0</span><span 
  class="button green"
  id="rating_p_6139"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/6139/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/6139/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment6162"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6162/">#6162</a>(<script language="JavaScript">print_time(new Date("2008/04/09 14:34 GMT"));</script><noscript>2008/04/09 14:34 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>しまった、8行目の前に rand 関数再入防止の
#pragma omp critical
が要りますね...
rand_r() を使う手もありますが。
# そもそも rand を使うなという話もある。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6162/addtag/" class="addtag" id="addtag_6162">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6162"
  >-</span><span
  class="button yellow"
  id="rating_z_6162"
  >0</span><span 
  class="button green"
  id="rating_p_6162"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/6139/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/6162/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/6162/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment5226"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/642/" target="_top">saws</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5226/">#5226</a>(<script language="JavaScript">print_time(new Date("2008/01/08 10:49 GMT"));</script><noscript>2008/01/08 10:49 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="nb">puts</span> <span class="s1">&#39;Starting: main thread&#39;</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">4</span>
<span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
  <span class="no">Thread</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">i</span><span class="p">){</span><span class="o">|</span><span class="n">j</span><span class="o">|</span>
    <span class="no">Thread</span><span class="o">.</span><span class="n">stop</span>
    <span class="nb">puts</span> <span class="s2">&quot;Starting: </span><span class="si">#{</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">th thread.&quot;</span>
    <span class="nb">sleep</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">+</span><span class="mi">5</span>
    <span class="nb">puts</span> <span class="s2">&quot;Ended: </span><span class="si">#{</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">th thread.&quot;</span>
  <span class="p">}</span>
<span class="p">}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">t</span><span class="o">|</span> <span class="n">t</span><span class="o">.</span><span class="n">wakeup</span><span class="p">}</span>
<span class="nb">sleep</span> <span class="mi">1</span> <span class="k">while</span> <span class="no">Thread</span><span class="o">.</span><span class="n">list</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="mi">1</span>
<span class="nb">puts</span> <span class="s1">&#39;Ended: main thread.&#39;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5226/addtag/" class="addtag" id="addtag_5226">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5226/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5226/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5226"
  >-</span><span
  class="button yellow"
  id="rating_z_5226"
  >0</span><span 
  class="button green"
  id="rating_p_5226"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5226/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment6138"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6138/">#6138</a>(<script language="JavaScript">print_time(new Date("2008/04/04 16:00 GMT"));</script><noscript>2008/04/04 16:00 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/fortran/">
	  FORTRAN
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>FORTRAN / OpenMP で。
15行で明示的に 8 threads 生成
18行で空きスレッドに仕事を割り当て
22行で NOWAIT 指定によりスレッド間同期を取らずに先へ
24行で全てのスレッドの終了待ち、
ってところです。

スレッドプールの管理は OpenMP に任せきりですが、通常の実装ではスレッドプールは残される、んではないかと。
# OpenMP の仕様を読みきれていない....


</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="highlight"><pre>      subroutine random_wait(i)
      integer omp_get_thread_num, omp_get_num_threads
      j=mod(irand(),10)
      write(*,&#39;(AI2AI2AI2AI2)&#39;) &#39;begin &#39;,i,&#39; - &#39;,j,&#39; sec, thread &#39;,
     c     omp_get_thread_num(), &#39;/&#39;, omp_get_num_threads()
      call sleep(j)
      write(*,&#39;(AI2AI2AI2AI2)&#39;) &#39;end   &#39;,i,&#39; - &#39;,j,&#39; sec, thread &#39;,
     c     omp_get_thread_num(), &#39;/&#39;, omp_get_num_threads()
      end

      program thread_test
      integer omp_get_thread_num, omp_get_num_threads
      write(*,*) &#39;Single Thread&#39;
      call sleep(4)
!$OMP PARALLEL NUM_THREADS(8)                                                   
      write(*,&#39;(AI2AI2)&#39;) &#39;Multi Thread &#39;,
     c     omp_get_thread_num(),&#39;/&#39;,omp_get_num_threads()
!$OMP DO SCHEDULE(DYNAMIC)                                                      
      do i=1,20
         call random_wait(i)
      end do
!$OMP END DO NOWAIT                                                             
      write(*,&#39;(AI2)&#39;) &#39;finish&#39;, omp_get_thread_num()
!$OMP BARRIER                                                                   
!$OMP MASTER                                                                    
      write(*,*) &#39;Finish&#39;
!$OMP END MASTER                                                                
!$OMP END PARALLEL                                                              
      end
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6138/addtag/" class="addtag" id="addtag_6138">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/fortran/">
		FORTRAN
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6138/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6138/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6138"
  >-</span><span
  class="button yellow"
  id="rating_z_6138"
  >0</span><span 
  class="button green"
  id="rating_p_6138"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/6138/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  
    




<div class="comment" id="comment6134"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/771/" target="_top">M.Suzuki</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6134/">#6134</a>(<script language="JavaScript">print_time(new Date("2008/04/03 03:34 GMT"));</script><noscript>2008/04/03 03:34 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  「スレッドプールを作り、スレッドを待機させてから、リクエストを投げて結果を全て受け取る」と言う要求と受け取りました。

このプログラムでは、スレッドプールは残るようになっています。


	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#</span>
<span class="c1">#   Thread pool</span>
<span class="c1">#</span>
  
<span class="nb">require</span> <span class="s1">&#39;thread&#39;</span>
  
<span class="no">THREADS</span> <span class="o">=</span> <span class="mi">5</span>
  
<span class="n">cmd_queue</span> <span class="o">=</span> <span class="no">Queue</span><span class="o">.</span><span class="n">new</span>
<span class="n">result_queue</span> <span class="o">=</span> <span class="no">Queue</span><span class="o">.</span><span class="n">new</span>
<span class="n">thread_list</span> <span class="o">=</span> <span class="o">[]</span>
  
<span class="nb">puts</span> <span class="s1">&#39;Thread start&#39;</span>
  
<span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="no">THREADS</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">no</span> <span class="o">|</span>
  <span class="n">thread_list</span> <span class="o">&lt;&lt;</span> <span class="no">Thread</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">no</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span> <span class="n">no</span> <span class="o">|</span>
    <span class="nb">puts</span> <span class="s2">&quot;Thread </span><span class="si">#{</span><span class="n">no</span><span class="si">}</span><span class="s2"> start&quot;</span>
    <span class="k">while</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd_queue</span><span class="o">.</span><span class="n">pop</span>
      <span class="nb">puts</span> <span class="s2">&quot;Thread </span><span class="si">#{</span><span class="n">no</span><span class="si">}</span><span class="s2"> execute to </span><span class="si">#{</span><span class="n">cmd</span><span class="si">}</span><span class="s2">&quot;</span>
      <span class="nb">sleep</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">+</span><span class="mi">5</span>
      <span class="nb">puts</span> <span class="s2">&quot;Thread </span><span class="si">#{</span><span class="n">no</span><span class="si">}</span><span class="s2"> finished&quot;</span>
      <span class="n">result_queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">no</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
  
<span class="nb">puts</span> <span class="s1">&#39;Execute start&#39;</span>
<span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="no">THREADS</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span> <span class="n">no</span> <span class="o">|</span>
  <span class="n">cmd_queue</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;cmd </span><span class="si">#{</span><span class="n">no</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s1">&#39;Waitting execute&#39;</span>
<span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="no">THREADS</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span>
  <span class="n">no</span> <span class="o">=</span> <span class="n">result_queue</span><span class="o">.</span><span class="n">pop</span>
  <span class="nb">puts</span> <span class="s2">&quot;Result </span><span class="si">#{</span><span class="n">no</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>

<span class="nb">puts</span> <span class="s1">&#39;All complete&#39;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6134/addtag/" class="addtag" id="addtag_6134">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6134/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6134/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6134"
  >-</span><span
  class="button yellow"
  id="rating_z_6134"
  >0</span><span 
  class="button green"
  id="rating_p_6134"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/6134/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4971"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/405/" target="_top">mc</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4971/">#4971</a>(<script language="JavaScript">print_time(new Date("2007/12/25 19:48 GMT"));</script><noscript>2007/12/25 19:48 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Common Lispの標準的なスレッドの扱いというものを良く分かっていないのですが、
スレッドプールを使ってスレッドを使い回すようなライブラリは探してみたものの
自分には見付けられませんでした。ということで、Portable-Threadsを利用して、
サブの全スレッドの終了をみとって次の仕事へ…というような内容になっています。
識者のツッコミ大歓迎です。
実行結果:
(spawn-thread 'main #'main
	      (lambda () (subjob (gensym)))
	      (lambda () (subjob (gensym)))
	      (lambda () (subjob (gensym)))
	      (lambda () (subjob (gensym))) )
; =&gt;
;G3233(14 sec.) Start.
;G3236( 6 sec.) Start.
;G3238(12 sec.) Start.
;G3239( 7 sec.) Start.
;G3236( 6 sec.) Stop.
;G3239( 7 sec.) Stop.
;G3238(12 sec.) Stop.
;G3233(14 sec.) Stop.
;All threads finished.</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20101101172934/http://www.cliki.net/Portable-Threads">Portable-Threads</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre>(defpackage #:doukaku-116 (:use #:cl #:portable-threads))
(in-package #:doukaku-116)

(defun subjob (name)
  (let ((sleep (+ 5 (random 10))))
    (format t &quot;~&amp;~A(~2D sec.) Start.~%&quot; name sleep)
    (sleep sleep)
    (format t &quot;~&amp;~A(~2D sec.) Stop.~%&quot; name sleep)))

(defun main (&amp;rest jobs)
  (do ((ths (mapcar (lambda (exe) (spawn-thread (gensym) exe)) 
                    jobs)))
      ((notany #&#39;thread-alive-p ths)
       (format t &quot;~&amp;All threads finished.~%&quot;))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4971/addtag/" class="addtag" id="addtag_4971">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4971/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4971/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4971"
  >-</span><span
  class="button yellow"
  id="rating_z_4971"
  >0</span><span 
  class="button green"
  id="rating_p_4971"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4971/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4971/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4983"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4983/">#4983</a>(<script language="JavaScript">print_time(new Date("2007/12/26 23:50 GMT"));</script><noscript>2007/12/26 23:50 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>「標準的」というのは私も知りませんです。Allegro CLの場合はmultiprocessingパッケージというのがついてくるので普段はそれを使っています (名前はprocessですが実態はネイティブスレッド)。</p>
<p>スレッドプールについても標準的なものがあるのかどうかは知りません。昔、Allegroのmultiprocessingの上に書いたスレッドプールパッケージがあるんですが、ここにそのまま出せない事情があるので、もし時間が取れれば簡単なバージョンを書いてポストします。
(ほんとはコードを書いてポストしようと思ってたんだけど、時間がきつきつなので…)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4983/addtag/" class="addtag" id="addtag_4983">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4983"
  >-</span><span
  class="button yellow"
  id="rating_z_4983"
  >0</span><span 
  class="button green"
  id="rating_p_4983"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4971/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4983/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4983/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4983/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4992"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/405/" target="_top">mc</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4992/">#4992</a>(<script language="JavaScript">print_time(new Date("2007/12/27 07:07 GMT"));</script><noscript>2007/12/27 07:07 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>コメント頂きありがとうございます。とても参考になりました。自分もAllegro CL試してみたいと思います。
スレッドプールのコードについては、興味津々です。いつかお手隙の際にでもポストして頂けたらと思います。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4992/addtag/" class="addtag" id="addtag_4992">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4992"
  >-</span><span
  class="button yellow"
  id="rating_z_4992"
  >0</span><span 
  class="button green"
  id="rating_p_4992"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4983/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4992/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4992/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  


  

  
    




<div class="comment" id="comment4965"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4965/">#4965</a>(<script language="JavaScript">print_time(new Date("2007/12/25 08:23 GMT"));</script><noscript>2007/12/25 08:23 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk のスレッドは、Erlang にこそ及びませんが、それでも非常に軽量な部類に属するので、アドホックに作って（#fork）使い捨てて使います（プールして大事に使い回す、という処理も書いて書けなくもないですが…）。</p>
<p>他方で、待ち合わせにはセマフォ（a Semaphore）を用いるのが普通ですが、今回は簡単のため、スレッドセーフなキュー（a SharedQueue）をもって各ワーカスレッドからの出力とそれとの待ち合わせを兼ねることにしました。ばらばらのタイミングでフォークしたワーカスレッドが 5〜15 秒の停止時間順にソートされて終了しているところで動きは見て取れると思います。</p>
<p>例によって copy fixTemps は、Smalltlak 処理系としては古典的な Squeak Smalltalk で、ブロック（無名関数オブジェクト）をクロージャっぽく使うためのおまじないです。今どきの Smalltalk では必要ありません。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><div class="highlight"><pre>| out nThreads |
out := SharedQueue new.
nThreads := 5.
nThreads timesRepeat: [
    [   | secs |
        out nextPut: {#start. (secs :=  (5 to: 15) atRandom)}.
        (Delay forSeconds: secs) wait.
        out nextPut: {#stop. secs}.
    ] copy fixTemps fork].
World findATranscript: nil.
nThreads * 2 timesRepeat: [Transcript cr; show: out next]

&quot;=&gt; #(#start 8)
    #(#start 15)
    #(#start 14)
    #(#start 6)
    #(#start 10)
    #(#stop 6)
    #(#stop 8)
    #(#stop 10)
    #(#stop 14)
    #(#stop 15) &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4965/addtag/" class="addtag" id="addtag_4965">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4965/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4965/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4965"
  >-</span><span
  class="button yellow"
  id="rating_z_4965"
  >0</span><span 
  class="button green"
  id="rating_p_4965"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4965/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4965/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4967"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/343/" target="_top">shimakuma</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/">#4967</a>(<script language="JavaScript">print_time(new Date("2007/12/25 14:15 GMT"));</script><noscript>2007/12/25 14:15 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>GNU Smalltalk に訳してみました。シンプルなのがいいですね。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre>| out | out := SharedQueue new.
((Smalltalk arguments at: 1 ifAbsent: [ ^&#39;usage: gst 116.st -a &lt;nThread&gt;&#39; displayNl ])
 asNumber timesRepeat: [
  [| secs |
    out nextPut: { #start. secs := Random next * 11 // 1 + 5 }.
    (Delay forSeconds: secs) wait.
    out nextPut: { #stop.  secs }
  ] fork
]) * 2 timesRepeat: [ out next printNl ]!
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/addtag/" class="addtag" id="addtag_4967">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4967"
  >-</span><span
  class="button yellow"
  id="rating_z_4967"
  >0</span><span 
  class="button green"
  id="rating_p_4967"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4965/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4967/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4976"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/343/" target="_top">shimakuma</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4976/">#4976</a>(<script language="JavaScript">print_time(new Date("2007/12/26 09:20 GMT"));</script><noscript>2007/12/26 09:20 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>さらに Rhino で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">function</span> <span class="nx">doukaku116</span><span class="p">(</span><span class="nx">nThread</span><span class="p">){</span>
  <span class="k">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">concurrent</span><span class="p">.</span><span class="nx">ArrayBlockingQueue</span><span class="p">(</span><span class="nx">nThread</span> <span class="o">*</span> <span class="mi">2</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">nThread</span><span class="o">;</span> <span class="nx">i</span><span class="o">--;</span><span class="p">)</span> <span class="nx">spawn</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nx">secs</span><span class="p">){</span>
    <span class="nx">out</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;#start &#39;</span><span class="o">+</span> <span class="p">(</span><span class="nx">secs</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">11</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">|</span> <span class="mi">0</span><span class="p">));</span>
    <span class="nx">java</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="nx">secs</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
    <span class="nx">out</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;#stop  &#39;</span><span class="o">+</span> <span class="nx">secs</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="nx">nThread</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span> <span class="nx">i</span><span class="o">--;</span><span class="p">)</span> <span class="nx">print</span><span class="p">(</span><span class="nx">out</span><span class="p">.</span><span class="nx">take</span><span class="p">());</span>
<span class="p">})(</span><span class="mi">5</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4976/addtag/" class="addtag" id="addtag_4976">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4976/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4976/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4976"
  >-</span><span
  class="button yellow"
  id="rating_z_4976"
  >0</span><span 
  class="button green"
  id="rating_p_4976"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4967/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/4976/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4976/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  


  

  
    




<div class="comment" id="comment4975"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4975/">#4975</a>(<script language="JavaScript">print_time(new Date("2007/12/26 09:03 GMT"));</script><noscript>2007/12/26 09:03 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自前でスレッドプールを実装しました。

val pool = new ThreadPool(4)
pool.submit(() =&gt;{
  Thread.sleep(1000)
  println("10")
})
pool.submit(() =&gt;{
  Thread.sleep(2000)
  println("20")
})
pool.submit(() =&gt;{
  Thread.sleep(5000)
  println("50")
})
pool.submit(() =&gt;{
  Thread.sleep(500)
  println("5")
})
pool.shutdown
println("done")

スレッドプールは残しています。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre>import scala.collection.mutable.SynchronizedQueue

implicit def f2r(f:() =&gt; unit) = new Runnable{ def run = f() }
class ThreadPool(num:int) {
  type Proc = ()=&gt;unit
  val _queue = new SynchronizedQueue[Option[Proc]]
  val _cs = (1 to num).map{ i =&gt; new Thread(() =&gt; {
             var flag = true; while(flag){
               var proc:Option[Proc] = Some(()=&gt;{})
               _queue.synchronized {
                 if(!_queue.isEmpty) proc = _queue.dequeue
               }
               proc match {
                 case Some(f) =&gt; f()
                 case _ =&gt; flag = false
               }
             }
           })}.toList.map{c =&gt; c.start;c}

  def submit(f :Proc) = _queue += Some(f)
  def shutdown = {
    _cs.foreach{c =&gt; _queue += None }
    _cs.foreach(_.join)
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4975/addtag/" class="addtag" id="addtag_4975">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4975/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4975/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4975"
  >-</span><span
  class="button yellow"
  id="rating_z_4975"
  >0</span><span 
  class="button green"
  id="rating_p_4975"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4975/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  
    




<div class="comment" id="comment6592"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/793/" target="_top">genzou</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6592/">#6592</a>(<script language="JavaScript">print_time(new Date("2008/06/26 08:27 GMT"));</script><noscript>2008/06/26 08:27 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ワーカースレッドは残してみました。

・mainThreadが仕事を配る
・customerが仕事を供給する
・workerThreadが仕事を行う

というつくりです。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68</pre></td><td class="code"><div class="highlight"><pre>/*
スレッドプールに複数のワーカスレッドが待機しており、
メインスレッドはいつでもワーカスレッドに仕事を渡せるような状態になっているとします。

さて、
メインスレッドからスレッドプールにいくつか仕事を与え、
メインスレッドは与えた仕事すべてが終了するまで待機し、
次の処理に行ってはいけない、
というようなコードを書いてください。＃現実に書く機会が多そうなコードですね…。

ここでの仕事の内容は、
適当に5秒から15秒の間スレッドをスリープする、
というもので結構です。また、
ワーカスレッドのスレッドプール自体の使用を終了するか、
または残して再利用するかは問いません。できればコメントにスレッドプールを残したかどうかを書いてください。
*/

def workerThreads = []
def synchronized 新規依頼タスク = []
def synchronized 割当済タスク = []


// とりあえず３つぐらい
[&quot;A&quot;, &quot;B&quot;, &quot;C&quot;].each{
    def worker = {
        // たまったタスクはひとつずつ片付けます！！
        while( !割当済タスク.empty ){
            def task = 割当済タスク.pop()
            task()
            println &quot;worker:終了しました！&quot; + ((割当済タスク.empty)?&quot;僕は終わったよ！&quot;:&quot;あと&quot; + 割当済タスク.size() + &quot;件！&quot;)
        }
    } as Runnable
    workerThreads &lt;&lt; worker
}


def customer = {
    while(true){
        def count = (int)(Math.random()*10)
        println &quot;customer:仕事依頼します！！(${count}件)&quot;
        count.times{
            新規依頼タスク &lt;&lt; { Thread.sleep((int)(500 * Math.random())) }
        }
        Thread.sleep(5000)
    }
} as Runnable
new Thread(customer).start()


// 実行！
def mainThread = {
    while(true){
        if( 割当済タスク.empty &amp;&amp; !新規依頼タスク.empty ){
            // 新しい仕事が来たな…
            新規依頼タスク.size().times{
                割当済タスク &lt;&lt; 新規依頼タスク.pop()
            }
            
            println &quot;mainThread:お前ら、仕事が終わるまで休むなよ！！仕事は&quot; + 割当済タスク.size() + &quot;件あるぞ！&quot;
            workerThreads.each{
                new Thread(it).start()
            }
        }
        
        Thread.sleep(10000)
    }
} as Runnable
new Thread(mainThread).start()
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/6592/addtag/" class="addtag" id="addtag_6592">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6592/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/6592/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6592"
  >-</span><span
  class="button yellow"
  id="rating_z_6592"
  >0</span><span 
  class="button green"
  id="rating_p_6592"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/6592/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  

  
    




<div class="comment" id="comment4970"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4970/">#4970</a>(<script language="JavaScript">print_time(new Date("2007/12/25 18:57 GMT"));</script><noscript>2007/12/25 18:57 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  
<p>Perlで<a href="/web/20101101172934/http://search.cpan.org/perldoc?threads">threads</a>を使うためには、<code>-Dusethreads</code>をつけて<code>Configure</code>する必要がありますが、いちおうそうなっているという前提で。
</p>
<p>本質的なのは、
</p>
<p>1 while threads-&gt;list(threads::running);
</p>
<p>だけです。threadsを再利用するか否かは関係なく使えます。
</p>
<p>どちらかというと、threadsは使い捨てにした方がコードは書きやすいですね。
</p>
<p>Dan the Threaded Perl Monger
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">threads</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Time::</span><span class="n">Hires</span> <span class="n">qw</span><span class="sr">/sleep/</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@thr</span><span class="p">;</span>
<span class="k">for</span> <span class="k">my</span> <span class="nv">$i</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="nb">shift</span> <span class="o">||</span> <span class="mi">10</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nb">push</span> <span class="nv">@thr</span><span class="p">,</span> <span class="n">threads</span><span class="o">-&gt;</span><span class="n">create</span><span class="p">(</span>
        <span class="k">sub </span><span class="p">{</span>
            <span class="k">my</span> <span class="nv">$n</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
            <span class="k">my</span> <span class="nv">$s</span> <span class="o">=</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">0</span><span class="p">);</span>
            <span class="nb">sleep</span> <span class="nv">$s</span><span class="p">;</span>
            <span class="nb">warn</span> <span class="s">&quot;$n:slept $s sec.&quot;</span><span class="p">;</span>
        <span class="p">},</span>
        <span class="nv">$i</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="mi">1</span> <span class="k">while</span> <span class="n">threads</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">(</span><span class="nn">threads::</span><span class="n">running</span><span class="p">);</span>
<span class="nb">warn</span> <span class="s">&quot;All Threads Done&quot;</span><span class="p">;</span>

<span class="nv">$thr</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="nb">join</span><span class="p">();</span>    <span class="c1"># on purpose</span>

<span class="k">END</span> <span class="p">{</span>
    <span class="nv">$_</span><span class="o">-&gt;</span><span class="n">is_joinable</span><span class="p">()</span> <span class="ow">and</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="nb">join</span><span class="p">()</span> <span class="k">for</span> <span class="nv">@thr</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/4970/addtag/" class="addtag" id="addtag_4970">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4970/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/4970/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4970"
  >-</span><span
  class="button yellow"
  id="rating_z_4970"
  >0</span><span 
  class="button green"
  id="rating_p_4970"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/4970/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment5030"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5030/">#5030</a>(<script language="JavaScript">print_time(new Date("2007/12/28 09:10 GMT"));</script><noscript>2007/12/28 09:10 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Pure-JavaScript(?)でProducer-Consumerパターンを組んでみました。
Concurrent.Threadライブラリを使用しています。なお、スレッドプール停止後に再開することはできません。</p>
<p>&lt;html&gt;&lt;body&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;Concurrent.Thread.ScriptExecuter+Http.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; src=&quot;producer_consumer.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;&lt;/html&gt;</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20101101172934/http://www.infoq.com/jp/articles/js_multithread">InfoQ: JavaScriptへのマルチスレッド・プログラミングの導入</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></td><td class="code"><div class="highlight"><pre><span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">pool</span> <span class="o">=</span> <span class="p">{</span><span class="nx">stop</span> <span class="o">:</span> <span class="kc">false</span><span class="o">,</span> <span class="nx">queue</span> <span class="o">:</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">threads</span> <span class="o">:</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">waitSet</span> <span class="o">:</span> <span class="p">[]</span><span class="o">,</span> 
      <span class="nx">puts</span> <span class="o">:</span> <span class="k">function</span> <span class="nx">puts</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="nx">s</span> <span class="o">+</span> <span class="s2">&quot;&lt;br&gt;&quot;</span><span class="o">;</span> <span class="p">}};</span>
  <span class="nx">pool</span><span class="p">.</span><span class="nx">worker</span> <span class="o">=</span> <span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="k">function</span><span class="p">(){</span>
    <span class="k">var</span> <span class="nx">job</span><span class="o">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">job</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">job</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">puts</span><span class="p">(</span><span class="s2">&quot;sleep &quot;</span> <span class="o">+</span> <span class="nx">job</span> <span class="o">+</span> <span class="s2">&quot; seconds.&quot;</span><span class="p">);</span>
        <span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="nx">job</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">try</span> <span class="p">{</span>
          <span class="nx">waitSet</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">self</span><span class="p">());</span>
          <span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">catch</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span><span class="p">(</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">KillException</span><span class="p">)</span>  <span class="k">throw</span> <span class="nx">e</span><span class="o">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">puts</span><span class="p">(</span><span class="s2">&quot;stop&quot;</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">pool</span><span class="p">.</span><span class="nx">producer</span> <span class="o">=</span> <span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">compile</span><span class="p">(</span><span class="k">function</span><span class="p">(){</span>
    <span class="k">var</span> <span class="nx">job</span><span class="o">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">queue</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">10</span><span class="p">));</span>
      <span class="nx">Concurrent</span><span class="p">.</span><span class="nx">Thread</span><span class="p">.</span><span class="nx">sleep</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">));</span>
      <span class="k">var</span> <span class="nx">cons</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">waitSet</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">cons</span><span class="p">)</span> <span class="nx">cons</span><span class="p">.</span><span class="nx">notify</span><span class="p">(</span><span class="s2">&quot;wake up!&quot;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">puts</span><span class="p">(</span><span class="s2">&quot;producer stop&quot;</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">threads</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">worker</span><span class="p">.</span><span class="nx">async</span><span class="p">(</span><span class="nx">pool</span><span class="p">);</span>

  <span class="nx">pool</span><span class="p">.</span><span class="nx">threads</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">pool</span><span class="p">.</span><span class="nx">producer</span><span class="p">.</span><span class="nx">async</span><span class="p">(</span><span class="nx">pool</span><span class="p">));</span>

  <span class="nx">setTimeout</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">stop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span> <span class="p">}</span> <span class="o">,</span> <span class="mi">10</span><span class="o">*</span><span class="mi">1000</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">5</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">pool</span><span class="p">.</span><span class="nx">threads</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">join</span><span class="p">();</span>

  <span class="nx">pool</span><span class="p">.</span><span class="nx">puts</span><span class="p">(</span><span class="s2">&quot;All threads is stoped.&quot;</span><span class="p">);</span>
<span class="p">});</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5030/addtag/" class="addtag" id="addtag_5030">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5030/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5030/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5030"
  >-</span><span
  class="button yellow"
  id="rating_z_5030"
  >0</span><span 
  class="button green"
  id="rating_p_5030"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20101101172934/http://ja.doukaku.org/comment/5030/">
    1
    reply
  </a>

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5030/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment5031"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5031/">#5031</a>(<script language="JavaScript">print_time(new Date("2007/12/28 09:16 GMT"));</script><noscript>2007/12/28 09:16 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>修正漏れ。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre><span class="gu">@@ -40,3 +40,3 @@</span>

<span class="gd">-  for(var i=0; i&lt;pool.threads.length; i++) pool.threads[i].join();</span>
<span class="gi">+  for(var i=0; i&lt;5; i++) pool.threads[i].join();</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5031/addtag/" class="addtag" id="addtag_5031">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5031/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5031/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5031"
  >-</span><span
  class="button yellow"
  id="rating_z_5031"
  >0</span><span 
  class="button green"
  id="rating_p_5031"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/5030/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20101101172934/http://ja.doukaku.org/comment/5031/root/"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5031/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  

  
    




<div class="comment" id="comment5012"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20101101172934/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5012/">#5012</a>(<script language="JavaScript">print_time(new Date("2007/12/27 14:23 GMT"));</script><noscript>2007/12/27 14:23 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  題意から<br/>・スレッドプールに複数の仕事を与え<br/>・全ての仕事が終わるまで待機する<br/>ことができれば良い事になります。<br/><br/>これは、ExecutorService#invokeAll&nbsp;を使えば1メソッドで実現できます。<br/><br/>この例では意図的に仕事の数よりスレッドの数を少なく設定しています。<br/><br/>＃スレッドプールは再利用可能です。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="k">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">NUM_OF_THREADS</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">ExecutorService</span> <span class="n">es</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="n">NUM_OF_THREADS</span><span class="o">);</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">sleepTime</span><span class="o">;</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;&gt;</span> <span class="n">taskList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;&gt;();</span>
            <span class="n">Random</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">taskList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="n">Sample</span><span class="o">(</span><span class="mi">5</span> <span class="o">+</span> <span class="n">r</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">11</span><span class="o">)));</span>
            <span class="o">}</span>
            <span class="n">es</span><span class="o">.</span><span class="na">invokeAll</span><span class="o">(</span><span class="n">taskList</span><span class="o">);</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;done.&quot;</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">es</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="n">Sample</span><span class="o">(</span><span class="kt">int</span> <span class="n">sleepTime</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sleepTime</span> <span class="o">=</span> <span class="n">sleepTime</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="n">Void</span> <span class="nf">call</span><span class="o">()</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span> <span class="o">*</span> <span class="n">sleepTime</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sleepTime</span> <span class="o">+</span> <span class="s">&quot; sec sleeped.&quot;</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/5012/addtag/" class="addtag" id="addtag_5012">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5012/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/5012/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5012"
  >-</span><span
  class="button yellow"
  id="rating_z_5012"
  >0</span><span 
  class="button green"
  id="rating_p_5012"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/5012/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment9057"><!--dj-->
  <p class="banner"><a href="/web/20101101172934/http://ja.doukaku.org/user/759/" target="_top">egtra</a>

	
	&nbsp;
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/9057/">#9057</a>(<script language="JavaScript">print_time(new Date("2009/06/06 06:51 GMT"));</script><noscript>2009/06/06 06:51 GMT</noscript>)
	
	
	
	[<a href="/web/20101101172934/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>スレッドの生成にはBoost.Thread、スレッドプールにはBoost.Asioを使いました。Asioはソケットライブラリですが、非同期IOを取り扱う関係でこのような機能も持っています。</p>
<p>io_serviceのメンバ関数runで、プールに組み込まれます。仕事が無くなるとrunから戻ります。今回は、スレッドを作ったらいきなりrunを呼ぶようにしているので、runから戻った途端、そのスレッドは終わります。スレッドに仕事を投げるにはpostを呼びます。引数を渡すために、bind大活躍です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#define _WIN32_WINNT 0x0501 </span><span class="c">//Boost.Asioが要求</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;sstream&gt;</span>
<span class="cp">#include &lt;ctime&gt;</span>
<span class="cp">#include &lt;boost/asio.hpp&gt;</span>
<span class="cp">#include &lt;boost/thread/thread.hpp&gt;</span>
<span class="cp">#include &lt;boost/bind.hpp&gt;</span>
<span class="cp">#include &lt;boost/range.hpp&gt;</span>
<span class="cp">#include &lt;boost/date_time.hpp&gt;</span>
<span class="cp">#include &lt;boost/random.hpp&gt;</span>

<span class="kt">void</span> <span class="n">worker</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">time</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">posix_time</span><span class="o">::</span><span class="n">seconds</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">startMsg</span><span class="p">;</span>
    <span class="n">startMsg</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;worker #&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; start</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">startMsg</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>

    <span class="n">boost</span><span class="o">::</span><span class="n">this_thread</span><span class="o">::</span><span class="n">sleep</span><span class="p">(</span><span class="n">seconds</span><span class="p">(</span><span class="n">time</span><span class="p">));</span>

    <span class="n">std</span><span class="o">::</span><span class="n">ostringstream</span> <span class="n">exitMsg</span><span class="p">;</span>
    <span class="n">exitMsg</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;worker #&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; end</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">exitMsg</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="p">;</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">;</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="kr">thread</span><span class="p">;</span>
    <span class="c">//乱数生成器</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">variate_generator</span><span class="o">&lt;</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">mt19937</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">uniform_smallint</span><span class="o">&lt;&gt;</span> <span class="o">&gt;</span> <span class="n">r</span><span class="p">(</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">mt19937</span><span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">time</span><span class="p">(</span><span class="mi">0</span><span class="p">))),</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">uniform_smallint</span><span class="o">&lt;&gt;</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">));</span>
    <span class="n">io_service</span> <span class="n">io</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">io</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">worker</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">r</span><span class="p">()));</span>
    <span class="p">}</span>
    <span class="kr">thread</span> <span class="n">t</span><span class="p">[]</span> <span class="o">=</span>
    <span class="p">{</span>
        <span class="kr">thread</span><span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">io_service</span><span class="o">::</span><span class="n">run</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">io</span><span class="p">)),</span>
        <span class="kr">thread</span><span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">io_service</span><span class="o">::</span><span class="n">run</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">io</span><span class="p">)),</span>
        <span class="kr">thread</span><span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">io_service</span><span class="o">::</span><span class="n">run</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">io</span><span class="p">)),</span>
        <span class="kr">thread</span><span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="n">io_service</span><span class="o">::</span><span class="n">run</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">io</span><span class="p">)),</span>
    <span class="p">};</span>
    <span class="c">// 終了待ち</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">begin</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">end</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">bind</span><span class="p">(</span><span class="o">&amp;</span><span class="kr">thread</span><span class="o">::</span><span class="n">join</span><span class="p">,</span> <span class="n">_1</span><span class="p">));</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20101101172934/http://ja.doukaku.org/comment/9057/addtag/" class="addtag" id="addtag_9057">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20101101172934/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20101101172934/http://ja.doukaku.org/comment/9057/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20101101172934/http://ja.doukaku.org/comment/9057/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9057"
  >-</span><span
  class="button yellow"
  id="rating_z_9057"
  >0</span><span 
  class="button green"
  id="rating_p_9057"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20101101172934/http://ja.doukaku.org/116/reply_to/9057/">
  返信
  </a>]
  </div>
</div>
</div>



  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20101101172934if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<li><a href="/web/20101101172934/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20101101172934/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20101101172934/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20101101172934/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20101101172934/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20101101172934/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20101101172934/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20101101172934/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20101101172934im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>

<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20101101172934/http://ja.doukaku.org/qa/">Q&amp;A</a>
<li><a href="/web/20101101172934/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20101101172934/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20101101172934/http://www.djangoproject.com/">Django</a>
</ul>


</div>
</div>


<div id="page_foot" class="bordered">
<a rel="license" href="/web/20101101172934/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20101101172934im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20101101172934/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20101101172934/http://ja.doukaku.org/qa/#licence">[詳細]</a>
</div>

</body>



<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20101101172934/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20101101172934js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>



</html>





<!--
     FILE ARCHIVED ON 17:29:34 Nov 1, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:59:41 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
