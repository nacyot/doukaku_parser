
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
α置換
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081121165043cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081121165043cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081121165043cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20081121165043/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081121165043/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081121165043js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081121165043js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081121165043js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081121165043js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app11.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/171\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "21";
var displayMonth = "Nov";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/171/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081121165043" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080414234538/http://ja.doukaku.org/171/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="14 Apr 2008"><strong>APR</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 16:50:43 Nov 21, 2008">NOV</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Dec
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080414234538/http://ja.doukaku.org/171/nested/" title="23:45:38 Apr 14, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 16:50:43 Nov 21, 2008">21</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 16:50:43 Nov 21, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081121165043*/http://ja.doukaku.org/171/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">14 Apr 08 - 21 Nov 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:10:000100000010_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081121165043/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20081121165043/http://ja.doukaku.org/171/">α置換</a>
</h2>

    





<div class="comment" id="comment6153">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/780/" target="_top">gandalf</a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6153/">#6153</a>(<script language="JavaScript">print_time(new Date("2008/04/07 21:05 GMT"));</script><noscript>2008/04/07 21:05 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffdf9f;">-2/6=-0.33</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>標準入力から与えられたソースコードの変数名
を置換するプログラムを作ってください。
最近はリファクタリングツールなどの普及でこ
のような需要は少ないかと思われますが、viな
ど貧弱なエディタを使っているときに困る
のが変数名の置換です。さすがに以下の例のよ
うなプログラムは例としてしか書きませんが、
置換しようとしている変数名と同じ綴りの他の
ものがプログラム中に出てくることはまれにあ
ります。そこで、与えられたソースコードに現
れる変数だけを指定された名前に置換してくだ
さい。
置換対象となるソースコードと使用言語は同じ
ものを使ってください。与えられるソースコー
ドは、完全なコンパイル単位、もしくはパース
して意味が通る範囲のものどちらであってもか
まいません。後者の場合、一番外側の変数だけ
置換できるようにしてください。
C言語での解答例をつけたかったのですが、と
ても難しかったためまだ作成できていません。
ご容赦ください。

例
$ cat a.c
/* a */
int foo()
{
        struct a {int a;} a;
#if FOO
        a.a = 1;
#endif
        { int a; }
	return 0;
}
$ alpha -DFOO=1 b a &lt; a.c
/* a */
int foo()
{
        struct a {int a;} b;
#if FOO
        b.a = 1;
#endif
        { int a; }
	return 0;
}
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6153/addtag/" class="addtag" id="addtag_6153">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffdf9f;"
  >-2/6=-0.33</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6153"
  >-</span><span
  class="button yellow"
  id="rating_z_6153"
  >0</span><span 
  class="button green"
  id="rating_p_6153"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6153/">
  reply
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20081121165043/http://ja.doukaku.org/171/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Nested</h2>
<a href="/web/20081121165043/http://ja.doukaku.org/171/flatten/">Flatten</a> 
<a href="/web/20081121165043/http://ja.doukaku.org/171/">Hidden</a> 


  

  
    





<div class="comment" id="comment6155">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6155/">#6155</a>(<script language="JavaScript">print_time(new Date("2008/04/08 02:00 GMT"));</script><noscript>2008/04/08 02:00 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>ふつう、こういうことはしないのですが、リフレクション機能を試す問題として捉え、システム組み込みのパーサに委譲するかたちで実現してみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>| code tree old new |
code := &#39;sampleCode
    | a |
    a := &#39;&#39;This is a pen&#39;&#39;.
    ^a&#39;.
old := &#39;a&#39;. new := &#39;b&#39;.
tree := Parser new parse: code class: UndefinedObject.
(tree instVarNamed: #temporaries) do: [:each |
    each name = old ifTrue: [each key: new; name: new]].
^tree decompileString  &quot;=&gt; &#39;sampleCode
    | b |
    b := &#39;&#39;This is a pen&#39;&#39;.
    ^ b&#39; &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6155/addtag/" class="addtag" id="addtag_6155">Tags</a>:
	
    
    <a href="/web/20081121165043/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6155/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6155/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6155"
  >-</span><span
  class="button yellow"
  id="rating_z_6155"
  >0</span><span 
  class="button green"
  id="rating_p_6155"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6155/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6156">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/642/" target="_top">saws</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6156/">#6156</a>(<script language="JavaScript">print_time(new Date("2008/04/08 12:06 GMT"));</script><noscript>2008/04/08 12:06 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>変数v0を全てv1に置換した後に, 文字列とヒアドキュメント内のv1をv0に戻す処理をしています.</p>
<p>テストに使用したファイルを生成するコードも添付します.</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">subst_var</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">v0</span><span class="p">,</span> <span class="n">v1</span><span class="p">)</span>
  <span class="n">hdocr</span> <span class="o">=</span> <span class="s1">&#39;[-]?[\&quot;\&#39;`]?([A-Z]+)&#39;</span>
  <span class="n">shared_reg</span> <span class="o">=</span> <span class="s1">&#39;s,;&amp;|=+-*/[](){}&#39;</span>
  <span class="n">former</span><span class="p">,</span> <span class="n">latter</span> <span class="o">=</span> <span class="sx">%w[@$^ .]</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">reg</span><span class="o">|</span>
    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_reg</span><span class="si">}#{</span><span class="n">reg</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">each_char</span><span class="o">.</span><span class="n">inject</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">a</span><span class="si">}</span><span class="se">\\</span><span class="si">#{</span><span class="n">b</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">}}</span>
  <span class="nb">gsub</span><span class="p">,</span> <span class="n">rev_gsub</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:to_a</span><span class="p">,</span> <span class="ss">:reverse</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">meth</span><span class="o">|</span>
    <span class="nb">proc</span><span class="p">{</span><span class="o">|</span><span class="n">s</span><span class="o">|</span> <span class="n">s</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="o">*[</span><span class="n">v0</span><span class="p">,</span> <span class="n">v1</span><span class="o">].</span><span class="n">__send__</span><span class="p">(</span><span class="n">meth</span><span class="p">))}}</span>
  <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">){</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">}</span><span class="o">.</span>
    <span class="nb">gsub</span><span class="p">(</span><span class="sr">/(?:^</span><span class="si">#{</span><span class="n">v0</span><span class="si">}</span><span class="sr">)?(?:[</span><span class="si">#{</span><span class="n">former</span><span class="si">}</span><span class="sr">]</span><span class="si">#{</span><span class="n">v0</span><span class="si">}</span><span class="sr">)+[</span><span class="si">#{</span><span class="n">latter</span><span class="si">}</span><span class="sr">]/</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">gsub</span><span class="p">)</span><span class="o">.</span>
    <span class="nb">gsub</span><span class="p">(</span><span class="sr">/&quot;.*&quot;/</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rev_gsub</span><span class="p">)</span><span class="o">.</span>
    <span class="nb">gsub</span><span class="p">(</span><span class="sr">/&lt;&lt;</span><span class="si">#{</span><span class="n">hdocr</span><span class="si">}</span><span class="sr">(?:.|\s)+[^&lt;]</span><span class="si">#{</span><span class="n">hdocr</span><span class="si">}</span><span class="sr">/</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rev_gsub</span><span class="p">)</span>
<span class="k">end</span>
<span class="n">file</span> <span class="o">=</span> <span class="s1">&#39;sample.rb&#39;</span>
<span class="nb">puts</span> <span class="n">subst_var</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;v0&#39;</span><span class="p">,</span> <span class="s1">&#39;v1&#39;</span><span class="p">)</span>

<span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">){</span><span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="o">&lt;&lt;</span><span class="no">EOF</span><span class="p">)}</span>
<span class="sh">v0+v0=v0</span>
<span class="sh">@v0 = 0</span>
<span class="sh">$v00, ^v0</span>
<span class="sh">&quot;v0 v0 &quot;</span>
<span class="sh">&lt;&lt;EOS</span>
<span class="sh">v0 v0</span>
<span class="sh">EOS</span>
<span class="sh">$v0, v0, v0</span>
<span class="sh">v0/v0*v0-v0+v0</span>
<span class="no">EOF</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6156/addtag/" class="addtag" id="addtag_6156">Tags</a>:
	
    
    <a href="/web/20081121165043/http://ja.doukaku.org/tag/1.9.0/">1.9.0</a>
    
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6156/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6156/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6156"
  >-</span><span
  class="button yellow"
  id="rating_z_6156"
  >0</span><span 
  class="button green"
  id="rating_p_6156"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6156/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6157">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6157/">#6157</a>(<script language="JavaScript">print_time(new Date("2008/04/08 16:09 GMT"));</script><noscript>2008/04/08 16:09 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Cのソースを変換します。<br/>1文字ずつ結構まじめに解析してます。<br/>お題のソースの変換ができてることを確認しました。<br/><br/>一番外側の変数しか変換しないという仕様を満たすのがしんどかったです。<br/>よーく見ると実はバグで動いてたりするのは内緒。（正規表現のあたり）<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text.RegularExpressions</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">AlphaReader</span> <span class="k">{</span>
  <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsDebug</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
  <span class="k">void</span> <span class="nf">DBG</span><span class="p">(</span><span class="n">String</span> <span class="n">s</span><span class="p">,</span> <span class="k">params</span> <span class="n">Object</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
    <span class="k">if</span> <span class="p">(!</span><span class="n">IsDebug</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
  <span class="k">}</span>
  <span class="n">TextReader</span> <span class="n">input</span><span class="p">;</span>
  <span class="n">String</span> <span class="n">before</span><span class="p">;</span>  <span class="c">//変換前文字列</span>
  <span class="n">String</span> <span class="n">after</span><span class="p">;</span>   <span class="c">//変換後文字列</span>
  <span class="k">enum</span> <span class="n">State</span> <span class="k">{</span>    <span class="c">//状態</span>
    <span class="n">Global</span><span class="p">,</span>  <span class="n">Func</span><span class="p">,</span>  <span class="n">Struct</span><span class="p">,</span>      <span class="c">//グローバル, 関数定義, 構造体(共用体・列挙体）</span>
    <span class="n">Block</span><span class="p">,</span> <span class="n">Name</span><span class="p">,</span> <span class="n">Comment</span><span class="p">,</span> <span class="n">InStr</span>  <span class="c">//ブロック, 識別子, コメント, 文字列</span>
  <span class="k">}</span>
  <span class="n">String</span> <span class="n">IdDelimiter</span> <span class="p">=</span> <span class="s">&quot;\t (){};,=+-*/%&amp;|^!?&quot;</span><span class="p">;</span>  <span class="c">//識別子分離文字</span>
  <span class="n">Stack</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;</span> <span class="n">state</span><span class="p">;</span>   <span class="c">//現在のReaderの状態</span>
  <span class="kt">int</span> <span class="n">targetDepth</span><span class="p">;</span>      <span class="c">//変換対象のスコープ（stateの深さ）</span>
  <span class="kt">int</span> <span class="n">targetHideDepth</span><span class="p">;</span>  <span class="c">//変換対照が再定義された深さ</span>

  <span class="c">//コンストラクタ</span>
  <span class="k">public</span> <span class="nf">AlphaReader</span><span class="p">(</span><span class="n">TextReader</span> <span class="n">input</span><span class="p">,</span>
             <span class="n">String</span> <span class="n">before</span><span class="p">,</span> <span class="n">String</span> <span class="n">after</span><span class="p">)</span> <span class="k">{</span>
    <span class="k">this</span><span class="p">.</span><span class="n">input</span> <span class="p">=</span> <span class="n">input</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">before</span> <span class="p">=</span> <span class="n">before</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">after</span> <span class="p">=</span> <span class="n">after</span><span class="p">;</span>
    
    <span class="k">this</span><span class="p">.</span><span class="n">state</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="n">State</span><span class="p">&gt;();</span>
    <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Global</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">targetHideDepth</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
  <span class="k">}</span>
  <span class="c">//行を読み込んで変換処理するメソッド</span>
  <span class="k">public</span> <span class="n">String</span> <span class="nf">ReadLine</span><span class="p">()</span> <span class="k">{</span>
    <span class="n">String</span> <span class="n">strIn</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">input</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">strIn</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">{</span>
      <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
    <span class="k">}</span>
 <span class="n">DBG</span><span class="p">(</span><span class="s">&quot;## [{0}]&quot;</span><span class="p">,</span> <span class="n">strIn</span><span class="p">);</span>
    
    <span class="n">StringBuilder</span> <span class="n">buf</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>  <span class="c">//バッファ</span>
    <span class="n">StringBuilder</span> <span class="n">name</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>  <span class="c">//識別子バッファ</span>

    <span class="c">/* 変数宣言の判定 */</span>
    <span class="c">/* この判定は、変数宣言と演算が別の行にわかれていること、</span>
<span class="c">       および、変数宣言が比較的シンプルなことを前提としています。 */</span>
    <span class="n">String</span> <span class="n">decVar</span> <span class="p">=</span> <span class="s">@&quot;.*(\w+|(struct|union)\s+\w+)(\s+[^;,]+,)*\s+&quot;</span>
                  <span class="p">+</span> <span class="n">before</span> <span class="p">+</span> <span class="s">@&quot;\s*[=,;\)].*&quot;</span><span class="p">;</span>  <span class="c">//型＋(変数, ...)＋変換前文字列</span>
    <span class="kt">bool</span> <span class="n">hasDecVar</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">((</span><span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="n">decVar</span><span class="p">)).</span><span class="n">IsMatch</span><span class="p">(</span><span class="n">strIn</span><span class="p">))</span> <span class="k">{</span>
 <span class="n">DBG</span><span class="p">(</span><span class="s">&quot;## 変数宣言発見&quot;</span><span class="p">);</span>
      <span class="n">hasDecVar</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="c">/* 行を1文字ずつ解析 */</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">pos</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">pos</span> <span class="p">&lt;</span> <span class="n">strIn</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">pos</span><span class="p">++)</span> <span class="k">{</span>
      <span class="n">State</span> <span class="n">st</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Peek</span><span class="p">();</span>
      <span class="kt">char</span> <span class="n">c</span> <span class="p">=</span> <span class="n">strIn</span><span class="p">[</span><span class="n">pos</span><span class="p">];</span>
      <span class="n">String</span> <span class="n">cs</span> <span class="p">=</span> <span class="n">strIn</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="n">pos</span><span class="p">);</span>
 <span class="n">DBG</span><span class="p">(</span><span class="s">&quot;## pos={0} c={1} state={2} depth={3}&quot;</span><span class="p">,</span> <span class="n">pos</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">ToString</span><span class="p">(),</span> <span class="n">state</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
      
      <span class="k">switch</span> <span class="p">(</span><span class="n">st</span><span class="p">)</span> <span class="k">{</span>
      <span class="k">case</span> <span class="n">State</span><span class="p">.</span><span class="n">InStr</span><span class="p">:</span>  <span class="c">//文字列リテラルの中</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;\\&#39;</span><span class="p">)</span> <span class="k">{</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
          <span class="k">if</span> <span class="p">(++</span><span class="n">pos</span> <span class="p">&lt;</span> <span class="n">strIn</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span> <span class="k">{</span>
            <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">strIn</span><span class="p">[</span><span class="n">pos</span><span class="p">]);</span>
          <span class="k">}</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;&quot;&#39;</span><span class="p">)</span> <span class="k">{</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">State</span><span class="p">.</span><span class="n">Comment</span><span class="p">:</span>  <span class="c">//コメントの中</span>
         <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;*/&quot;</span><span class="p">))</span> <span class="k">{</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">strIn</span><span class="p">[++</span><span class="n">pos</span><span class="p">]);</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="n">State</span><span class="p">.</span><span class="n">Name</span><span class="p">:</span>    <span class="c">//識別子の中</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">IdDelimiter</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">{</span>
          <span class="n">name</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>      <span class="c">//識別子続行</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;-&gt;&quot;</span><span class="p">))</span> <span class="k">{</span>
          <span class="n">name</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;-&gt;&quot;</span><span class="p">);</span>  <span class="c">//識別子続行</span>
          <span class="n">pos</span><span class="p">++;</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>
          <span class="c">//識別子を抽出</span>
          <span class="n">String</span> <span class="n">id</span> <span class="p">=</span> <span class="n">name</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
          <span class="n">st</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Peek</span><span class="p">();</span>
          <span class="k">switch</span> <span class="p">(</span><span class="n">st</span><span class="p">)</span> <span class="k">{</span>
          <span class="k">case</span> <span class="n">State</span><span class="p">.</span><span class="n">Struct</span><span class="p">:</span>    <span class="c">//構造体の中は変換対象外</span>
            <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="k">default</span><span class="p">:</span>              <span class="c">//変換対象</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">hasDecVar</span> <span class="p">&amp;&amp;</span> <span class="n">id</span> <span class="p">==</span> <span class="k">this</span><span class="p">.</span><span class="n">before</span><span class="p">)</span> <span class="k">{</span>        <span class="c">//変数宣言</span>
              <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span><span class="p">)</span> <span class="k">{</span>  <span class="c">//新たに宣言の場合</span>
                <span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span>      <span class="c">//targetDepthをセット</span>
              <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="n">targetHideDepth</span>
                      <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span><span class="p">)</span> <span class="k">{</span>  <span class="c">//再宣言した場合</span>
                <span class="k">this</span><span class="p">.</span><span class="n">targetHideDepth</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span>  <span class="c">//targetHideDepthをセット</span>
              <span class="k">}</span>
 <span class="n">DBG</span><span class="p">(</span><span class="s">&quot;## set targetDepth:{0} hideDepth:{1}&quot;</span><span class="p">,</span> <span class="n">targetDepth</span><span class="p">,</span> <span class="n">targetHideDepth</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span> <span class="p">&lt;=</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span>
                <span class="p">&amp;&amp;</span> <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="n">targetHideDepth</span><span class="p">)</span> <span class="k">{</span>
              <span class="c">//変換対象スコープの場合</span>
              <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="p">==</span> <span class="k">this</span><span class="p">.</span><span class="n">before</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">after</span><span class="p">);</span>
              <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">((</span><span class="k">new</span> <span class="n">Regex</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">before</span> <span class="p">+</span> <span class="s">@&quot;[\.\-]&quot;</span><span class="p">)).</span><span class="n">IsMatch</span><span class="p">(</span><span class="n">id</span><span class="p">))</span> <span class="k">{</span>
                                <span class="c">//変換対象変数のメンバを参照してる場合</span>
                <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">after</span><span class="p">);</span>
                <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">id</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">before</span><span class="p">.</span><span class="n">Length</span><span class="p">));</span>
              <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>
                <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>  <span class="c">//変換なし</span>
              <span class="k">}</span>
            <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>
              <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>    <span class="c">//変換なし</span>
            <span class="k">}</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="k">}</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">st</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Global</span> <span class="p">&amp;&amp;</span> <span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span> <span class="k">{</span>  <span class="c">//関数宣言の場合</span>
            <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Func</span><span class="p">);</span>
          <span class="k">}</span>
          <span class="n">name</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">default</span><span class="p">:</span>  <span class="c">//その他の状態</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;/*&quot;</span><span class="p">))</span> <span class="k">{</span>  <span class="c">//コメント開始</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;/*&quot;</span><span class="p">);</span>
          <span class="n">pos</span><span class="p">++;</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Comment</span><span class="p">);</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;&quot;&#39;</span><span class="p">)</span> <span class="k">{</span>      <span class="c">//文字列開始</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">InStr</span><span class="p">);</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">IdDelimiter</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span> <span class="k">{</span>  <span class="c">//識別子外文字</span>
          <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;{&#39;</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">st</span> <span class="p">!=</span> <span class="n">State</span><span class="p">.</span><span class="n">Struct</span><span class="p">)</span> <span class="k">{</span>
              <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Block</span><span class="p">);</span>
            <span class="k">}</span>
          <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;(&#39;</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">st</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Global</span><span class="p">)</span> <span class="k">{</span>
              <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Func</span><span class="p">);</span>
            <span class="k">}</span>
          <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;}&#39;</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">st</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Block</span><span class="p">)</span> <span class="k">{</span>
              <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
              <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Peek</span><span class="p">()</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Func</span><span class="p">)</span> <span class="k">{</span>
                <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
              <span class="k">}</span>
            <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">st</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Struct</span><span class="p">)</span> <span class="k">{</span>
              <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
            <span class="k">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span><span class="p">)</span>
              <span class="k">this</span><span class="p">.</span><span class="n">targetDepth</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Count</span> <span class="p">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="n">targetHideDepth</span><span class="p">)</span>
              <span class="k">this</span><span class="p">.</span><span class="n">targetHideDepth</span> <span class="p">=</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">;</span>
 <span class="n">DBG</span><span class="p">(</span><span class="s">&quot;## unset targetDepth:{0} hideDepth:{1}&quot;</span><span class="p">,</span> <span class="n">targetDepth</span><span class="p">,</span> <span class="n">targetHideDepth</span><span class="p">);</span>
          <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="p">==</span> <span class="sc">&#39;;&#39;</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">st</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Func</span><span class="p">)</span> <span class="k">{</span>
              <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
            <span class="k">}</span>
          <span class="k">}</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;struct &quot;</span><span class="p">)</span>  <span class="c">//構造体・共用体・列挙体のブロック内は</span>
                 <span class="p">||</span> <span class="n">cs</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;union &quot;</span><span class="p">)</span>  <span class="c">//変換を行わない</span>
                 <span class="p">||</span> <span class="n">cs</span><span class="p">.</span><span class="n">StartsWith</span><span class="p">(</span><span class="s">&quot;enum &quot;</span><span class="p">))</span> <span class="k">{</span>
          <span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="n">cs</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">);</span>
          <span class="n">pos</span> <span class="p">+=</span> <span class="n">index</span><span class="p">;</span>
          <span class="n">name</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">cs</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">index</span> <span class="p">+</span> <span class="m">1</span><span class="p">));</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Struct</span><span class="p">);</span>
        <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>                    <span class="c">//識別子開始</span>
          <span class="n">name</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
          <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">State</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">{</span>
      <span class="n">buf</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
      <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Peek</span><span class="p">()</span> <span class="p">==</span> <span class="n">State</span><span class="p">.</span><span class="n">Name</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">state</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">return</span> <span class="n">buf</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
  <span class="k">}</span>
<span class="k">}</span>

<span class="k">class</span> <span class="nc">Driver</span> <span class="k">{</span>
  <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&lt;</span> <span class="m">2</span><span class="p">)</span> <span class="k">{</span>
      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;alpha.exe  before after [debug]&quot;</span><span class="p">);</span>
      <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="k">}</span>
    <span class="n">AlphaReader</span> <span class="n">ar</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AlphaReader</span><span class="p">(</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">In</span><span class="p">,</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">args</span><span class="p">[</span><span class="m">1</span><span class="p">]);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;=</span> <span class="m">3</span> <span class="p">&amp;&amp;</span> <span class="n">args</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">==</span> <span class="s">&quot;debug&quot;</span><span class="p">)</span> <span class="k">{</span>
      <span class="n">ar</span><span class="p">.</span><span class="n">IsDebug</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">}</span>

    <span class="n">String</span> <span class="n">line</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">line</span> <span class="p">=</span> <span class="n">ar</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="k">{</span>
      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6157/addtag/" class="addtag" id="addtag_6157">Tags</a>:
	
    
    <a href="/web/20081121165043/http://ja.doukaku.org/tag/.NET2.0/">.NET2.0</a>
    
    <a href="/web/20081121165043/http://ja.doukaku.org/tag/Mono/">Mono</a>
    
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6157/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6157/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6157"
  >-</span><span
  class="button yellow"
  id="rating_z_6157"
  >0</span><span 
  class="button green"
  id="rating_p_6157"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081121165043/http://ja.doukaku.org/comment/6157/">
    1
    reply
  </a>

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6157/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6158">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6158/">#6158</a>(<script language="JavaScript">print_time(new Date("2008/04/08 16:19 GMT"));</script><noscript>2008/04/08 16:19 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>文字列の処理がうまくいってませんでした。。。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>--- alpha.cs.release1   2008-04-09 01:11:32.000000000 +0900
+++ alpha.cs.release2   2008-04-09 01:14:15.000000000 +0900
@@ -65,13 +65,12 @@
       
       switch (st) {
       case State.InStr:  //文字列リテラルの中
+        buf.Append(c);
         if (c == &#39;\\&#39;) {
-          buf.Append(c);
           if (++pos &lt; strIn.Length) {
             buf.Append(strIn[pos]);
           }
         } else if (c == &#39;&quot;&#39;) {
-          buf.Append(c);
           this.state.Pop();
         }
         break;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6158/addtag/" class="addtag" id="addtag_6158">Tags</a>:
	
    
    <a href="/web/20081121165043/http://ja.doukaku.org/tag/diff/">diff</a>
    
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6158/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6158/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6158"
  >-</span><span
  class="button yellow"
  id="rating_z_6158"
  >0</span><span 
  class="button green"
  id="rating_p_6158"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081121165043/http://ja.doukaku.org/comment/6157/"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081121165043/http://ja.doukaku.org/comment/6158/root/"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6158/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment6164">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6164/">#6164</a>(<script language="JavaScript">print_time(new Date("2008/04/10 10:02 GMT"));</script><noscript>2008/04/10 10:02 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #dfffbf;">2/4=0.50</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>　まず、ソースファイルをVisualStudioで開きます。
　エディタにコードをコピペします。
　変更したい変数の宣言部で、変数名を書き替えます。
　変数の上にマウスを置くとアイコンが出るのでクリックします。
　”名前を[変数名]から[変数名]に変更します。"を選ぶとVisualStudioが全部自動でやってくれます。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6164/addtag/" class="addtag" id="addtag_6164">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #dfffbf;"
  >2/4=0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6164"
  >-</span><span
  class="button yellow"
  id="rating_z_6164"
  >0</span><span 
  class="button green"
  id="rating_p_6164"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6164/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6252">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/799/" target="_top">miura1729</a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6252/">#6252</a>(<script language="JavaScript">print_time(new Date("2008/05/02 11:44 GMT"));</script><noscript>2008/05/02 11:44 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>Ripperを使ってみました。Ruby 1.9.0以上じゃないと動かないと思います。</p>
<p>AlphaConverter.newの第2引数以降で置換する変数を指定します。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;ripper&#39;</span>

<span class="k">class</span> <span class="nc">AlphaConverter</span><span class="o">&lt;</span><span class="no">Ripper</span><span class="o">::</span><span class="no">Filter</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">src</span><span class="p">,</span> <span class="o">*</span><span class="n">vars</span><span class="p">)</span>
    <span class="k">super</span><span class="p">(</span><span class="n">src</span><span class="p">)</span>
    <span class="vi">@alpha_dict</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">vars</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">o</span><span class="p">,</span> <span class="n">n</span><span class="o">|</span>
      <span class="vi">@alpha_dict</span><span class="o">[</span><span class="n">o</span><span class="o">]</span> <span class="o">=</span> <span class="n">n</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">var_common</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="k">if</span> <span class="vi">@alpha_dict</span><span class="o">[</span><span class="n">token</span><span class="o">]</span> <span class="k">then</span>
      <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="vi">@alpha_dict</span><span class="o">[</span><span class="n">token</span><span class="o">]</span>
    <span class="k">else</span>
      <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="n">token</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">on_default</span><span class="p">(</span><span class="n">event</span><span class="p">,</span> <span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="n">token</span>
  <span class="k">end</span>

  <span class="c1"># クラス変数</span>
  <span class="k">def</span> <span class="nf">on_cvar</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">var_common</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># 大域変数</span>
  <span class="k">def</span> <span class="nf">on_gvar</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">var_common</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="c1"># インスタンス変数</span>
  <span class="k">def</span> <span class="nf">on_ivar</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">var_common</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="k">end</span> 
 
  <span class="c1"># ローカル変数</span>
  <span class="k">def</span> <span class="nf">on_ident</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
    <span class="n">var_common</span><span class="p">(</span><span class="n">token</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">print</span> <span class="no">AlphaConverter</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">ARGF</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;event&#39;</span><span class="p">,</span> <span class="s1">&#39;ee&#39;</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="s1">&#39;@alpha_dict&#39;</span><span class="p">,</span> <span class="s1">&#39;@ad&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6252/addtag/" class="addtag" id="addtag_6252">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6252/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6252/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6252"
  >-</span><span
  class="button yellow"
  id="rating_z_6252"
  >0</span><span 
  class="button green"
  id="rating_p_6252"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6252/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6269">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/497/" target="_top">Otter</a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6269/">#6269</a>(<script language="JavaScript">print_time(new Date("2008/05/08 07:56 GMT"));</script><noscript>2008/05/08 07:56 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  GHC6.8.1にパーサーとprettyprintのライブラリがあったのを発見したので、途中まで作ってみました。
ppという名前をpopに、popをppに置き換えるようになっています。

もう少しがんばらなくてはいけないところ：
１．入力ソースがprettyprintされてしまうので、アルファ置換以外の変更が起きてしまう。（改行、インデントが変わってしまう、コメントが保持されない）
２．スコープ管理がされていない。
３．ネームスペースに関する処理が入っていない…（Data.Stack.popは置換されるべきではないけれど、pop, Main.popはされるべき...）

コメントの問題はパーサーの機能不足なので、解決には違うアプローチが必要です...パーサーがサポートしてくれれば、簡単ですが…

２，３に関してはパーサーのサポートはあるので、コードを書くだけなんですが...誰かやってください...
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Language</span><span class="o">.</span><span class="n">Haskell</span><span class="o">.</span><span class="n">Syntax</span>
<span class="kr">import</span> <span class="n">Language</span><span class="o">.</span><span class="n">Haskell</span><span class="o">.</span><span class="n">Parser</span>
<span class="kr">import</span> <span class="n">Language</span><span class="o">.</span><span class="n">Haskell</span><span class="o">.</span><span class="n">Pretty</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Generics</span>

<span class="nv">pp</span> <span class="o">::</span> <span class="n">ParseResult</span> <span class="n">HsModule</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">pp</span> <span class="p">(</span><span class="n">ParseOk</span> <span class="nv">hsm</span><span class="p">)</span> <span class="o">=</span> <span class="nv">prettyPrint</span> <span class="nv">hsm</span>
<span class="nv">pp</span> <span class="kr">_</span> <span class="o">=</span> <span class="s">&quot;parse failed&quot;</span>

<span class="nv">repl</span> <span class="o">::</span> <span class="n">ParseResult</span> <span class="n">HsModule</span> <span class="o">-&gt;</span> <span class="n">ParseResult</span> <span class="n">HsModule</span>
<span class="nv">repl</span> <span class="p">(</span><span class="n">ParseOk</span> <span class="nv">hsm</span><span class="p">)</span> <span class="o">=</span> <span class="n">ParseOk</span> <span class="o">$</span> <span class="p">(</span><span class="nv">everywhere</span> <span class="p">(</span><span class="nv">mkT</span> <span class="nv">conversion</span><span class="p">))</span> <span class="nv">hsm</span>
    <span class="kr">where</span>
        <span class="nv">conversion</span> <span class="o">::</span> <span class="n">HsName</span> <span class="o">-&gt;</span> <span class="n">HsName</span>
        <span class="nv">conversion</span> <span class="p">(</span><span class="n">HsIdent</span> <span class="s">&quot;pp&quot;</span><span class="p">)</span> <span class="o">=</span> <span class="n">HsIdent</span> <span class="s">&quot;pop&quot;</span>
        <span class="nv">conversion</span> <span class="p">(</span><span class="n">HsIdent</span> <span class="s">&quot;pop&quot;</span><span class="p">)</span> <span class="o">=</span> <span class="n">HsIdent</span> <span class="s">&quot;pp&quot;</span>
        <span class="nv">conversion</span> <span class="nv">pop</span> <span class="o">=</span> <span class="nv">pop</span>
<span class="nv">repl</span> <span class="nv">a</span> <span class="o">=</span> <span class="nv">a</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> 
  <span class="o">=</span> <span class="kr">do</span> <span class="nv">mod</span> <span class="o">&lt;-</span> <span class="nv">getContents</span>
       <span class="nv">putStr</span> <span class="o">$</span> <span class="nv">pp</span> <span class="o">$</span> <span class="nv">repl</span> <span class="o">$</span> <span class="nv">parseModule</span> <span class="nv">mod</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6269/addtag/" class="addtag" id="addtag_6269">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6269/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6269/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6269"
  >-</span><span
  class="button yellow"
  id="rating_z_6269"
  >0</span><span 
  class="button green"
  id="rating_p_6269"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6269/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6804">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/840/" target="_top">leque</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6804/">#6804</a>(<script language="JavaScript">print_time(new Date("2008/07/22 18:59 GMT"));</script><noscript>2008/07/22 18:59 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>一番外側の変数 = グローバル変数と解釈して書きました。 R5RS の範囲内の構文は網羅しています。入力は一行に置換対象の識別子と置換後の識別子を空白で区切って与えます。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">collection</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">match</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">sexp</span> <span class="nv">maps</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">remove-map</span> <span class="nv">k</span> <span class="nv">ms</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">remove-first</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">p</span><span class="p">)</span> <span class="p">(</span><span class="nb">eq? </span><span class="nv">k</span> <span class="p">(</span><span class="nb">car </span><span class="nv">p</span><span class="p">)))</span> <span class="nv">ms</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">remove-maps</span> <span class="nv">ks</span> <span class="nv">ms</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">fold</span> <span class="nv">remove-map</span> <span class="nv">ms</span> <span class="nv">ks</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">remove-first</span> <span class="nv">pred?</span> <span class="nv">xs</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">ys</span> <span class="nv">xs</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">zs</span> <span class="o">&#39;</span><span class="p">()))</span>
      <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">ys</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">reverse!</span> <span class="nv">zs</span><span class="p">))</span>
            <span class="p">((</span><span class="nf">pred?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ys</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">append-reverse!</span> <span class="nv">zs</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">ys</span><span class="p">)))</span>
            <span class="p">(</span><span class="nf">else</span>
             <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">ys</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">ys</span><span class="p">)</span> <span class="nv">zs</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">replace-symbol</span> <span class="nv">key</span> <span class="nv">maps</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">assq </span><span class="nv">sexp</span> <span class="nv">maps</span><span class="p">)</span> <span class="k">=&gt; </span><span class="nv">cdr</span><span class="p">)</span>
          <span class="p">(</span><span class="k">else </span><span class="nv">key</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">replace-qq</span> <span class="nv">exp</span> <span class="nv">level</span> <span class="nv">maps</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">match</span> <span class="nv">exp</span>
      <span class="p">(</span><span class="err">[</span><span class="nv">?</span> <span class="nv">symbol?</span> <span class="nv">exp</span><span class="err">]</span>
       <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">level</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">exp</span> <span class="nv">maps</span><span class="p">)</span>
           <span class="nv">exp</span><span class="p">))</span>
      <span class="p">(</span><span class="err">[</span><span class="nv">?</span> <span class="nv">vector?</span><span class="err">]</span>
       <span class="p">(</span><span class="nf">map-to</span> <span class="nv">&lt;vector&gt;</span> <span class="p">(</span><span class="nf">cut</span> <span class="nv">replace-qq</span> <span class="nv">&lt;&gt;</span> <span class="nv">level</span> <span class="nv">maps</span><span class="p">)</span> <span class="nv">exp</span><span class="p">))</span>
      <span class="p">((</span><span class="ss">&#39;quasiquote</span> <span class="nv">x</span><span class="p">)</span>
       <span class="p">(</span><span class="nf">replace-qq</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">level</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">maps</span><span class="p">))</span>
      <span class="p">((</span><span class="err">[</span><span class="k">and </span><span class="err">[</span><span class="k">or </span><span class="ss">&#39;unquote</span> <span class="ss">&#39;unquote-splicing</span><span class="err">]</span> <span class="nv">uquote</span><span class="err">]</span> <span class="nv">x</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">list </span><span class="nv">uquote</span> <span class="p">(</span><span class="nf">replace-qq</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">level</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">maps</span><span class="p">)))</span>
      <span class="p">((</span><span class="nf">x</span> <span class="o">.</span> <span class="nv">y</span><span class="p">)</span>
       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">replace-qq</span> <span class="nv">x</span> <span class="nv">level</span> <span class="nv">maps</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">replace-qq</span> <span class="nv">y</span> <span class="nv">level</span> <span class="nv">maps</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">_</span> <span class="nv">exp</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">improper-list-&gt;list</span> <span class="nv">xs</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">ys</span> <span class="nv">xs</span><span class="p">)</span>
               <span class="p">(</span><span class="nf">rs</span> <span class="o">&#39;</span><span class="p">()))</span>
      <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">ys</span><span class="p">)</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">rs</span><span class="p">))</span>
            <span class="p">((</span><span class="nb">pair? </span><span class="nv">ys</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">ys</span><span class="p">)</span> <span class="nv">rs</span><span class="p">))</span>
            <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">cons </span><span class="nv">ys</span> <span class="nv">rs</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">sexps</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">exp</span><span class="p">)</span>
           <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">exp</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">caadr </span><span class="nv">exp</span><span class="p">)</span>
               <span class="p">(</span><span class="nb">cadr </span><span class="nv">exp</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">take-while</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">exp</span><span class="p">)</span>
                       <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">exp</span><span class="p">)</span>
                            <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">exp</span><span class="p">)</span> <span class="ss">&#39;define</span><span class="p">)</span>
                                <span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">exp</span><span class="p">)</span> <span class="ss">&#39;define-syntax</span><span class="p">))))</span>
                     <span class="nv">sexps</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">match</span> <span class="nv">sexp</span>
    <span class="p">(</span><span class="err">[</span><span class="nv">?</span> <span class="nv">symbol?</span><span class="err">]</span> <span class="p">(</span><span class="nf">replace-symbol</span> <span class="nv">sexp</span> <span class="nv">maps</span><span class="p">))</span>
    <span class="p">(</span><span class="err">[</span><span class="nv">not</span> <span class="err">[</span><span class="nv">?</span> <span class="nv">pair?</span><span class="err">]]</span> <span class="nv">sexp</span><span class="p">)</span>
    <span class="p">((</span><span class="ss">&#39;quote</span> <span class="nv">exp</span><span class="p">)</span> <span class="nv">sexp</span><span class="p">)</span>
    <span class="p">((</span><span class="ss">&#39;quasiquote</span> <span class="nv">exp</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">list </span><span class="ss">&#39;quasiquote</span> <span class="p">(</span><span class="nf">replace-qq</span> <span class="nv">exp</span> <span class="mi">1</span> <span class="nv">maps</span><span class="p">)))</span>
    <span class="p">((</span><span class="ss">&#39;case</span> <span class="nv">key</span> <span class="nv">clauses</span><span class="p">)</span>
     <span class="o">`</span><span class="p">(</span><span class="k">case </span><span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">key</span> <span class="nv">maps</span><span class="p">)</span>
        <span class="o">,@</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
                 <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span> <span class="o">,@</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">cut</span> <span class="nv">alpha-replace</span> <span class="nv">&lt;&gt;</span> <span class="nv">maps</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">c</span><span class="p">))))</span>
               <span class="nv">clauses</span><span class="p">)))</span>
    <span class="p">((</span><span class="ss">&#39;define</span> <span class="nv">name</span> <span class="nv">val</span><span class="p">)</span>
     <span class="o">`</span><span class="p">(</span><span class="k">define </span><span class="o">,</span><span class="p">(</span><span class="nf">replace-symbol</span> <span class="nv">name</span> <span class="nv">maps</span><span class="p">)</span>
        <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">val</span> <span class="nv">maps</span><span class="p">)))</span>
    <span class="p">((</span><span class="ss">&#39;define</span> <span class="p">(</span><span class="nf">name</span> <span class="nv">args</span> <span class="o">...</span><span class="p">)</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps*</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">body</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">improper-list-&gt;list</span> <span class="nv">args</span><span class="p">)</span> <span class="nv">maps</span><span class="p">))))</span>
       <span class="o">`</span><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nf">replace-symbol</span> <span class="nv">name</span> <span class="nv">maps</span><span class="p">)</span> <span class="o">,@</span><span class="nv">args</span><span class="p">)</span>
          <span class="o">,@</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps*</span><span class="p">))))</span>
    <span class="p">((</span><span class="ss">&#39;do</span> <span class="nv">step</span> <span class="nv">test</span> <span class="nv">body</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps*</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nb">map </span><span class="nv">car</span> <span class="nv">step</span><span class="p">)</span> <span class="nv">maps</span><span class="p">)))</span>
       <span class="o">`</span><span class="p">(</span><span class="k">do </span><span class="o">,</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
                    <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nf">first</span> <span class="nv">c</span><span class="p">)</span>
                      <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nf">second</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">maps*</span><span class="p">)</span>
                      <span class="o">,@</span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cddr </span><span class="nv">c</span><span class="p">))</span>
                            <span class="o">&#39;</span><span class="p">()</span>
                            <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nf">third</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">maps*</span><span class="p">))))))</span>
            <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">step</span> <span class="nv">maps*</span><span class="p">)</span>
          <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">test</span> <span class="nv">maps*</span><span class="p">)</span>
          <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps*</span><span class="p">))))</span>
    <span class="p">((</span><span class="ss">&#39;lambda</span> <span class="nv">args</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps*</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">body</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">improper-list-&gt;list</span> <span class="nv">args</span><span class="p">)</span> <span class="nv">maps</span><span class="p">))))</span>
       <span class="o">`</span><span class="p">(</span><span class="k">lambda </span><span class="o">,</span><span class="nv">arg</span>
          <span class="o">,@</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps*</span><span class="p">))))</span>
    <span class="p">((</span><span class="ss">&#39;let</span> <span class="err">[</span><span class="nv">?</span> <span class="nv">symbol?</span> <span class="nv">name</span><span class="err">]</span> <span class="nv">binds</span> <span class="nv">body</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps*</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">body</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nb">map </span><span class="nv">car</span> <span class="nv">binds</span><span class="p">)</span> <span class="nv">maps</span><span class="p">))))</span>
       <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="o">,</span><span class="nv">name</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
                          <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span> <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">c</span><span class="p">)</span> <span class="nv">maps</span><span class="p">)))</span>
                        <span class="nv">binds</span><span class="p">)</span>
             <span class="o">,@</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps*</span><span class="p">))))</span>
    <span class="p">((</span><span class="err">[</span><span class="k">or </span><span class="ss">&#39;let</span> <span class="ss">&#39;let-syntax</span><span class="err">]</span> <span class="nv">binds</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps*</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">body</span><span class="p">)</span>
                               <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nb">map </span><span class="nv">car</span> <span class="nv">binds</span><span class="p">)</span> <span class="nv">maps</span><span class="p">))))</span>
       <span class="o">`</span><span class="p">(</span><span class="k">let </span><span class="o">,</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
                     <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span> <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">c</span><span class="p">)</span> <span class="nv">maps</span><span class="p">)))</span>
                   <span class="nv">binds</span><span class="p">)</span>
          <span class="o">,@</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps*</span><span class="p">))))</span>
    <span class="p">((</span><span class="ss">&#39;let*</span> <span class="nv">binds</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">cs</span> <span class="nv">maps*</span><span class="p">)</span> <span class="p">(</span><span class="nf">map-accum</span>
                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span> <span class="nv">knil</span><span class="p">)</span>
                            <span class="p">(</span><span class="nb">values </span><span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span> <span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">c</span><span class="p">)</span> <span class="nv">knil</span><span class="p">))</span>
                                    <span class="p">(</span><span class="nf">remove-map</span> <span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span> <span class="nv">knil</span><span class="p">)))</span>
                          <span class="nv">maps</span>
                          <span class="nv">binds</span><span class="p">)</span>
       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps**</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">body</span><span class="p">)</span>
                                  <span class="nv">maps*</span><span class="p">)))</span>
         <span class="o">`</span><span class="p">(</span><span class="k">let* </span><span class="o">,</span><span class="nv">cs</span>
            <span class="o">,@</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps**</span><span class="p">)))))</span>
    <span class="p">((</span><span class="err">[</span><span class="k">or </span><span class="ss">&#39;letrec</span> <span class="ss">&#39;letrec-syntax</span><span class="err">]</span> <span class="nv">binds</span> <span class="nv">body</span><span class="p">)</span>
     <span class="p">(</span><span class="k">let* </span><span class="p">((</span><span class="nf">maps*</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nb">map </span><span class="nv">car</span> <span class="nv">binds</span><span class="p">)</span> <span class="nv">maps</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">maps**</span> <span class="p">(</span><span class="nf">remove-maps</span> <span class="p">(</span><span class="nf">take-internal-define-syms</span> <span class="nv">body</span><span class="p">)</span> <span class="nv">maps*</span><span class="p">)))</span>
       <span class="o">`</span><span class="p">(</span><span class="k">letrec </span><span class="o">,</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
                        <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span> <span class="o">,</span><span class="p">(</span><span class="nb">cadr </span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">c</span><span class="p">)</span> <span class="nv">maps*</span><span class="p">))))</span>
                      <span class="nv">binds</span><span class="p">)</span>
          <span class="o">,@</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">body</span> <span class="nv">maps**</span><span class="p">))))</span>
    <span class="p">((</span><span class="ss">&#39;syntax-rules</span> <span class="nv">keys</span> <span class="nv">clauses</span><span class="p">)</span>
     <span class="o">`</span><span class="p">(</span><span class="k">syntax-rules </span><span class="o">,</span><span class="nv">keys</span>
        <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
               <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nb">car </span><span class="nv">c</span><span class="p">)</span>
                 <span class="p">(</span><span class="o">,</span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="p">(</span><span class="nb">caadr </span><span class="nv">c</span><span class="p">)</span> <span class="nv">maps</span><span class="p">)</span> <span class="o">,@</span><span class="p">(</span><span class="nb">cdadr </span><span class="nv">c</span><span class="p">))))</span>
             <span class="nv">clauses</span><span class="p">)))</span>
    <span class="p">((</span><span class="nf">x</span> <span class="o">.</span> <span class="nv">y</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">x</span> <span class="nv">maps</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">y</span> <span class="nv">maps</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">read-maps</span> <span class="nv">iport</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">port-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">line</span><span class="p">)</span>
              <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">ts</span> <span class="p">(</span><span class="nb">map </span><span class="nv">string-&gt;symbol</span> <span class="p">(</span><span class="nf">string-split</span> <span class="nv">line</span> <span class="o">#</span><span class="err">[\</span><span class="nv">s</span><span class="err">]</span><span class="p">))))</span>
                <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">ts</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">ts</span><span class="p">))))</span>
            <span class="p">(</span><span class="nf">cut</span> <span class="nv">read-line</span> <span class="nv">iport</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">maps</span> <span class="p">(</span><span class="nf">read-maps</span> <span class="p">(</span><span class="nf">standard-input-port</span><span class="p">))))</span>
    <span class="p">(</span><span class="nb">call-with-input-file </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)</span>
      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">iport</span><span class="p">)</span>
        <span class="p">(</span><span class="nf">port-for-each</span>
         <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">sexp</span><span class="p">)</span>
           <span class="p">(</span><span class="nb">write </span><span class="p">(</span><span class="nf">alpha-replace</span> <span class="nv">sexp</span> <span class="nv">maps</span><span class="p">)))</span>
         <span class="p">(</span><span class="nf">cut</span> <span class="nv">read</span> <span class="nv">iport</span><span class="p">))))</span>
    <span class="mi">0</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/6804/addtag/" class="addtag" id="addtag_6804">Tags</a>:
	
    
    <a href="/web/20081121165043/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6804/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/6804/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6804"
  >-</span><span
  class="button yellow"
  id="rating_z_6804"
  >0</span><span 
  class="button green"
  id="rating_p_6804"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/6804/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment7124">
  <p class="banner"><a href="/web/20081121165043/http://ja.doukaku.org/user/232/" target="_top">kkobayashi</a><a href="/web/20081121165043/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/7124/">#7124</a>(<script language="JavaScript">print_time(new Date("2008/08/14 08:22 GMT"));</script><noscript>2008/08/14 08:22 GMT</noscript>)
	
	
	
	[<a href="/web/20081121165043/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>substitute()を使って、Rのparserにお任せします。</p>
<p>お題の「一番外側の変数」というのは、「スコープ内の変数」という解釈でいいのでしょうか。例えば以下のようなコードでは、xの最終的な値は10になるので、スコープをさしているのであれば「一番外側」にこだわる必要はないと判断しました。</p>
<p>例では、変数&quot;x&quot;を&quot;aaaa&quot;に変更しています。リストの項目名である&quot;x&quot;や文字列中の&quot;x&quot;、別の変数名の一部に含まれる&quot;x&quot;など、置換するべきでないものは残されているようです。:</p>
<pre class="literal-block">
&gt; alpha.replace(&quot;x&quot;, &quot;aaaa&quot;)

(入力)
x   &lt;- 1
y   &lt;- list(x=10)
z   &lt;- &quot;w x y z&quot;
xyz &lt;- 1
zzz &lt;- {
   x &lt;- 10
}
x

(出力)
{
   aaaa &lt;- 1
   y &lt;- list(x = 10)
   z &lt;- &quot;w x y z&quot;
   xyz &lt;- 1
   zzz &lt;- {
       aaaa &lt;- 10
   }
   aaaa
}
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre>alpha.replace &lt;- function(from, to){
   script &lt;- c(&quot;substitute({&quot;,readLines(),&quot;}, list(&quot;,from,&quot;=quote(&quot;,to,&quot;)))&quot;)
   eval(parse(text=script))
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121165043/http://ja.doukaku.org/comment/7124/addtag/" class="addtag" id="addtag_7124">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121165043/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20081121165043/http://ja.doukaku.org/comment/7124/download/">
		download code
      </a>]
	  [<a href="/web/20081121165043/http://ja.doukaku.org/comment/7124/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_7124"
  >-</span><span
  class="button yellow"
  id="rating_z_7124"
  >0</span><span 
  class="button green"
  id="rating_p_7124"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121165043/http://ja.doukaku.org/171/reply_to/7124/">
  reply
  </a>]
  </div>
</div>
</div>




  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20081121165043if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">Index</h4>

<ul>
<!--<li><a href="/web/20081121165043/http://ja.doukaku.org/user/">Users</a>-->
<li><a href="/web/20081121165043/http://ja.doukaku.org/lang/">Languages</a>
<li><a href="/web/20081121165043/http://ja.doukaku.org/challenge/">Challenges</a>
<li><a href="/web/20081121165043/http://ja.doukaku.org/topic/">Topics</a>
<li><a href="/web/20081121165043/http://ja.doukaku.org/comment/">Comments</a>
<li><a href="/web/20081121165043/http://ja.doukaku.org/good_comments/">Good comments</a>
<li><a href="/web/20081121165043/http://ja.doukaku.org/tag/">Tags</a>
</ul>

<h4 class="compact">Feed</h4>
<ul>
<li><a href="/web/20081121165043/http://ja.doukaku.org/feeds/challenges/">Latest challenges</a><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20081121165043/http://ja.doukaku.org/feeds/topics/">Latest topics</a><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20081121165043/http://ja.doukaku.org/feeds/comments/">Latest comments</a><img src="/web/20081121165043im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">Other</h4>
<ul>
<li><a href="/web/20081121165043/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20081121165043/http://ja.doukaku.org/feedback/">Feedback</a>
<!--<li><a href="/web/20081121165043/http://ja.doukaku.org/terms">Terms</a>-->
</ul>


<h4 class="compact">Link</h4>
<ul>
<li><a href="/web/20081121165043/http://www.lingr.com/room/doukaku_ja">Chatroom in Lingr</a>
<li><a href="/web/20081121165043/http://labs.cybozu.co.jp/">Cybozu Labs.</a>
<li><a href="/web/20081121165043/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20081121165043/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20081121165043/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20081121165043im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20081121165043/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20081121165043/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20081121165043/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20081121165043js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 16:50:43 Nov 21, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:45:52 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
