
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
ラングトンのアリの描画
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100506231016cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100506231016cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100506231016cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20100506231016/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100506231016/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100506231016js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100506231016js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100506231016js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100506231016js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app2.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/276\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "6";
var displayMonth = "May";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/276/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100506231016" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20090802181801/http://ja.doukaku.org/276/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Aug 2009"><strong>AUG</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 23:10:16 May 6, 2010">MAY</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jun
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20090802181801/http://ja.doukaku.org/276/nested/" title="18:18:01 Aug 2, 2009" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 23:10:16 May 6, 2010">6</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 23:10:16 May 6, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100506231016*/http://ja.doukaku.org/276/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>2 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">2 Aug 09 - 6 May 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000010000_2010:4:000010000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100506231016/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100506231016/http://ja.doukaku.org/276/">ラングトンのアリの描画</a>
</h2>

    





<div class="comment" id="comment9331">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/763/" target="_top">Songmu</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9331/">#9331</a>(<script language="JavaScript">print_time(new Date("2009/07/09 11:18 GMT"));</script><noscript>2009/07/09 11:18 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #7fff5f;">8/10=0.80</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ラングトンのアリを描画してください。ラングトンのアリは、以下のような動きをする、セル・オートマトンです。(Wikipediaより引用)<br/>-&nbsp;黒いマスにアリがいた場合、90°右に方向転換し、そのマスの色を反転させ、1マス前進する。<br/>-&nbsp;白いマスにアリがいた場合、90°左に方向転換し、そのマスの色を反転させ、1マス前進する。<br/>詳しくはWikipedia等で調べるか、参考ページに拙作のデモがありますのでご覧下さい。
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506231016/http://www.songmu.jp/riji/archives/2009/07/javascript_1.html">JavaScriptでラングトンの蟻</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;!</span><span class="nx">DOCTYPE</span> <span class="nx">HTML</span> <span class="nx">PUBLIC</span> <span class="s2">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="s2">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="s2">&quot;ja&quot;</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">http</span><span class="o">-</span><span class="nx">equiv</span><span class="o">=</span><span class="s2">&quot;content-type&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;text/html;charset=utf-8&quot;</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">http</span><span class="o">-</span><span class="nx">equiv</span><span class="o">=</span><span class="s2">&quot;content-script-type&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">http</span><span class="o">-</span><span class="nx">equiv</span><span class="o">=</span><span class="s2">&quot;content-style-type&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span>
       <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="err">ラングトンの蟻</span><span class="o">&lt;/</span><span class="nx">title</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">style</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span>
<span class="err">#</span><span class="nx">canvas</span><span class="p">{</span>
       <span class="nx">border</span><span class="o">:</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">999</span><span class="o">;</span>
       <span class="nx">width</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="o">;</span>
<span class="p">}</span>
<span class="err">#</span><span class="nx">canvas</span> <span class="nx">div</span><span class="p">{</span>
       <span class="nx">width</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">height</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">float</span><span class="o">:</span> <span class="nx">left</span><span class="o">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nx">style</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="k">var</span> <span class="nx">earth</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">var</span> <span class="nx">WORLD_SIZE</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
<span class="k">var</span> <span class="nx">lang_ant</span><span class="o">;</span>

<span class="k">function</span> <span class="nx">Ant</span><span class="p">(){}</span>
<span class="nx">Ant</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">age</span> <span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nx">ageDisplay</span> <span class="o">:</span> <span class="kc">undefined</span><span class="o">,</span>
    <span class="nx">id</span> <span class="o">:</span> <span class="kc">undefined</span><span class="o">,</span>
    <span class="nx">speed</span><span class="o">:</span> <span class="mi">200</span><span class="o">,</span>
    <span class="nx">direction</span><span class="o">:</span> <span class="p">[</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="p">]</span><span class="o">,//</span><span class="err">向き。</span><span class="nx">x</span><span class="err">軸</span> <span class="nx">y</span><span class="err">軸。最初は上に動く</span>
    <span class="nx">position</span><span class="o">:</span> <span class="p">[</span><span class="mi">60</span><span class="o">,</span><span class="mi">40</span><span class="p">]</span><span class="o">,//</span><span class="err">初期位置</span>
    <span class="nx">world</span><span class="o">:</span> <span class="p">[]</span><span class="o">,</span>
    <span class="nx">start</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">var</span> <span class="nx">self</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="k">function</span><span class="p">(){</span><span class="nx">self</span><span class="p">.</span><span class="nx">move</span><span class="p">()}</span><span class="o">,</span> <span class="mi">1000</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">speed</span><span class="p">);</span>
    <span class="p">}</span><span class="o">,</span>
    <span class="nx">move</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">ageDisplay</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="o">++</span><span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="o">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">moveNextCell</span><span class="p">();</span>
        <span class="k">var</span> <span class="nx">cell</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">getCellInfo</span><span class="p">();</span>
        <span class="k">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="nx">cell</span><span class="p">.</span><span class="nx">getAndToggleColor</span><span class="p">();</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setNextDirection</span><span class="p">(</span><span class="nx">color</span><span class="p">);</span>
    <span class="p">}</span><span class="o">,</span>
    <span class="nx">moveNextCell</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span>
           <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">WORLD_SIZE</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="nx">WORLD_SIZE</span><span class="p">){</span>
            <span class="nx">clearInterval</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">die</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>
    <span class="nx">getCellInfo</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">var</span> <span class="nx">idx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nx">WORLD_SIZE</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">world</span><span class="p">[</span><span class="nx">idx</span><span class="p">];</span>
    <span class="p">}</span><span class="o">,</span>
    <span class="nx">setNextDirection</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">bool</span><span class="p">){</span><span class="c">//colorがfalse(白)なら右へ、true(黒)なら左へ転回</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">bool</span><span class="p">){</span><span class="c">//黒</span>
            <span class="k">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="nx">tmp</span><span class="o">;</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span><span class="c">//白</span>
            <span class="k">var</span> <span class="nx">tmp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tmp</span><span class="o">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="o">,</span>
    <span class="nx">die</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;Langton\&#39;s ant is dead.&#39;</span><span class="p">);</span>
        <span class="k">throw</span> <span class="kc">true</span><span class="o">;</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="k">function</span> <span class="nx">Cell</span><span class="p">(</span><span class="nx">elm</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">elm</span> <span class="o">=</span> <span class="nx">elm</span><span class="o">;</span>
<span class="p">}</span>
<span class="nx">Cell</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="p">{</span>
    <span class="nx">elm</span><span class="o">:</span> <span class="kc">undefined</span><span class="o">,</span>
    <span class="nx">color</span><span class="o">:</span> <span class="kc">false</span><span class="o">,</span> <span class="c">//colorは2値なのでbooleanで表す</span>
    <span class="nx">colorList</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;#FFF&#39;</span><span class="o">,</span><span class="s1">&#39;#000&#39;</span><span class="p">]</span><span class="o">,</span>
    <span class="nx">getAndToggleColor</span><span class="o">:</span> <span class="k">function</span><span class="p">(){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">;</span>
        <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">color</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">elm</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">colorList</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
        <span class="k">return</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="k">function</span><span class="p">(){</span>
    <span class="k">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>
    <span class="k">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="s1">&#39;&lt;div&gt;&lt;/div&gt;&#39;</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">inner_canvas</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="o">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">WORLD_SIZE</span><span class="o">*</span><span class="nx">WORLD_SIZE</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="nx">inner_canvas</span> <span class="o">+=</span> <span class="nx">div</span><span class="o">;</span>
    <span class="p">}</span>
    <span class="nx">canvas</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">inner_canvas</span><span class="o">;</span>
    
    <span class="k">var</span> <span class="nx">cells</span> <span class="o">=</span> <span class="nx">canvas</span><span class="p">.</span><span class="nx">childNodes</span><span class="o">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">cells</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="c">//世界の誕生</span>
        <span class="nx">earth</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cell</span><span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="nx">lang_ant</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">();</span><span class="c">//蟻の誕生</span>
    <span class="nx">lang_ant</span><span class="p">.</span><span class="nx">world</span> <span class="o">=</span> <span class="nx">earth</span><span class="o">;//</span><span class="err">地球に降り立つ</span>
    <span class="nx">lang_ant</span><span class="p">.</span><span class="nx">ageDisplay</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;step&#39;</span><span class="p">);</span>
    
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;run&#39;</span><span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;run&quot;</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;lang_ant.start();this.disabled=true;&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;run&quot;</span> <span class="nx">disabled</span><span class="o">=</span><span class="s2">&quot;disabled&quot;</span><span class="o">&gt;</span><span class="err">　</span><span class="o">&lt;</span><span class="nx">span</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;step&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">span</span><span class="o">&gt;</span>
<span class="err">　</span><span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;stop &amp;amp; refresh&quot;</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;location.reload();&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;canvas&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9331/addtag/" class="addtag" id="addtag_9331">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9331/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9331/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #7fff5f;"
  >8/10=0.80</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9331"
  >-</span><span
  class="button yellow"
  id="rating_z_9331"
  >0</span><span 
  class="button green"
  id="rating_p_9331"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9331/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100506231016/http://ja.doukaku.org/276/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20100506231016/http://ja.doukaku.org/276/flatten/">フラット表示</a> 
<a href="/web/20100506231016/http://ja.doukaku.org/276/">非表示</a> 


  

  
    





<div class="comment" id="comment9371">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/759/" target="_top">egtra</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9371/">#9371</a>(<script language="JavaScript">print_time(new Date("2009/07/15 09:29 GMT"));</script><noscript>2009/07/15 09:29 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>C++でWTL使いました。GDIで描画、Windowsのタイマーメッセージ (WM_TIMER) を使って回数を進めるようにしています。高速に結果を見たかったので、1度のタイマイベントで複数回進めるようにしています。</p>
<p>ありを進める部分はなんの工夫もないですが。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#define WINVER 0x0400</span>
<span class="cp">#define _WIN32_WINDOWS 0</span>
<span class="cp">#define _WIN32_WINNT 0</span>
<span class="cp">#define _WIN32_IE 0x0300 </span><span class="c">// IE3以上を指定しないとWTLがコンパイルエラーを起こす。</span>

<span class="cp">#define WIN32_LEAN_AND_MEAN</span>
<span class="cp">#define _ATL_NO_AUTOMATIC_NAMESPACE</span>
<span class="cp">#define _WTL_NO_AUTOMATIC_NAMESPACE</span>

<span class="cp">#include &lt;cassert&gt;</span>
<span class="cp">#include &lt;sstream&gt;</span>

<span class="cp">#include &lt;tchar.h&gt; </span><span class="c">// _tWinMain</span>

<span class="cp">#include &lt;windows.h&gt;</span>
<span class="cp">#include &lt;atlbase.h&gt; </span><span class="c">// ATL共通ヘッダ</span>
<span class="cp">#include &lt;atlwin.h&gt; </span><span class="c">// CWindowImplほか</span>
<span class="cp">#include &lt;atlcrack.h&gt; </span><span class="c">// MSG_*</span>
<span class="cp">#include &lt;atlapp.h&gt; </span><span class="c">// &lt;atlmisc.h&gt;</span>
<span class="cp">#include &lt;atlmisc.h&gt; </span><span class="c">// CPoint</span>

<span class="k">const</span> <span class="kt">int</span> <span class="n">ID_TIMER</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="k">enum</span> <span class="n">Direction</span> <span class="p">{</span><span class="n">Up</span><span class="p">,</span> <span class="n">Right</span><span class="p">,</span> <span class="n">Down</span><span class="p">,</span> <span class="n">Left</span><span class="p">};</span>

<span class="k">class</span> <span class="nc">MainWindow</span> <span class="o">:</span>
    <span class="k">public</span> <span class="n">ATL</span><span class="o">::</span><span class="n">CWindowImpl</span><span class="o">&lt;</span><span class="n">MainWindow</span><span class="p">,</span> <span class="n">ATL</span><span class="o">::</span><span class="n">CWindow</span><span class="p">,</span> <span class="n">ATL</span><span class="o">::</span><span class="n">CFrameWinTraits</span><span class="o">&gt;</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">MainWindow</span><span class="p">()</span> <span class="o">:</span> <span class="n">field</span><span class="p">(),</span> <span class="n">x</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="mi">100</span><span class="p">),</span> <span class="n">direction</span><span class="p">(</span><span class="n">Up</span><span class="p">),</span> <span class="n">step</span><span class="p">()</span> <span class="p">{}</span> <span class="c">// このxとyの値が初期位置</span>

    <span class="c">// ウィンドウクラス名を登録</span>
    <span class="n">DECLARE_WND_CLASS</span><span class="p">(</span><span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Langton&#39;s ant&quot;</span><span class="p">));</span>

    <span class="c">// メッセージマップ</span>
    <span class="n">BEGIN_MSG_MAP</span><span class="p">(</span><span class="n">MainWindow</span><span class="p">)</span>
        <span class="n">MSG_WM_TIMER</span><span class="p">(</span><span class="n">OnTimer</span><span class="p">)</span>
        <span class="n">MSG_WM_PAINT</span><span class="p">(</span><span class="n">OnPaint</span><span class="p">)</span>
        <span class="n">MSG_WM_CREATE</span><span class="p">(</span><span class="n">OnCreate</span><span class="p">)</span>
        <span class="n">MSG_WM_DESTROY</span><span class="p">(</span><span class="n">OnDestroy</span><span class="p">)</span>
    <span class="n">END_MSG_MAP</span><span class="p">()</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">void</span> <span class="n">OnTimer</span><span class="p">(</span><span class="n">UINT</span> <span class="c">/*idEvent*/</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="c">// 1度のタイマイベントで複数回進める。</span>
        <span class="p">{</span>
            <span class="n">NextStep</span><span class="p">();</span>
            <span class="o">++</span><span class="n">step</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">std</span><span class="o">::</span><span class="n">basic_ostringstream</span><span class="o">&lt;</span><span class="n">TCHAR</span><span class="o">&gt;</span> <span class="n">oss</span><span class="p">;</span>
        <span class="n">oss</span> <span class="o">&lt;&lt;</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Langton&#39;s ant - step: &quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">step</span><span class="p">;</span>
        <span class="n">SetWindowText</span><span class="p">(</span><span class="n">oss</span><span class="p">.</span><span class="n">str</span><span class="p">().</span><span class="n">c_str</span><span class="p">());</span>
        <span class="n">Invalidate</span><span class="p">(</span><span class="n">FALSE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">TILE_WIDTH</span> <span class="o">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">TILE_HEIGHT</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">X</span> <span class="o">=</span> <span class="mi">200</span><span class="p">,</span> <span class="n">Y</span> <span class="o">=</span> <span class="mi">200</span><span class="p">;</span>

    <span class="kt">void</span> <span class="n">OnPaint</span><span class="p">(</span><span class="n">HDC</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">WTL</span><span class="o">::</span><span class="n">CPaintDC</span> <span class="n">dc</span><span class="p">(</span><span class="n">m_hWnd</span><span class="p">);</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">Y</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">X</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">dc</span><span class="p">.</span><span class="n">FillSolidRect</span><span class="p">(</span><span class="n">j</span> <span class="o">*</span> <span class="n">TILE_WIDTH</span><span class="p">,</span> <span class="n">i</span> <span class="o">*</span> <span class="n">TILE_HEIGHT</span><span class="p">,</span>
                    <span class="n">TILE_WIDTH</span><span class="p">,</span> <span class="n">TILE_HEIGHT</span><span class="p">,</span>
                    <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">?</span> <span class="n">RGB</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">255</span><span class="p">)</span>
                                <span class="o">:</span> <span class="n">RGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">LRESULT</span> <span class="n">OnCreate</span><span class="p">(</span><span class="n">CREATESTRUCT</span> <span class="k">const</span><span class="o">*</span> <span class="n">pcs</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">RECT</span> <span class="n">rc</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">TILE_WIDTH</span> <span class="o">*</span> <span class="n">X</span><span class="p">,</span> <span class="n">TILE_HEIGHT</span> <span class="o">*</span> <span class="n">Y</span><span class="p">};</span>
        <span class="n">AdjustWindowRectEx</span><span class="p">(</span><span class="o">&amp;</span><span class="n">rc</span><span class="p">,</span> <span class="n">pcs</span><span class="o">-&gt;</span><span class="n">style</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">pcs</span><span class="o">-&gt;</span><span class="n">dwExStyle</span><span class="p">);</span>
        <span class="n">SetWindowPos</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rc</span><span class="p">,</span> <span class="n">SWP_NOMOVE</span> <span class="o">|</span> <span class="n">SWP_NOZORDER</span><span class="p">);</span>
        <span class="n">SetTimer</span><span class="p">(</span><span class="n">ID_TIMER</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">OnDestroy</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">PostQuitMessage</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">NextStep</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">])</span> <span class="c">// trueが白、falseが黒としている</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">direction</span> <span class="o">==</span> <span class="n">Up</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">direction</span> <span class="o">=</span> <span class="n">Left</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="o">--</span><span class="n">direction</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">direction</span> <span class="o">==</span> <span class="n">Left</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">direction</span> <span class="o">=</span> <span class="n">Up</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="o">++</span><span class="n">direction</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">field</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="o">!</span><span class="n">field</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">];</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">direction</span><span class="p">)</span>
        <span class="p">{</span>
        <span class="k">case</span> <span class="nl">Up:</span>
            <span class="n">y</span><span class="o">--</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">y</span> <span class="o">=</span> <span class="n">Y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">Right:</span>
            <span class="n">x</span><span class="o">++</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">X</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">Down:</span>
            <span class="n">y</span><span class="o">++</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="o">==</span> <span class="n">Y</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="nl">Left:</span>
            <span class="n">x</span><span class="o">--</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">x</span> <span class="o">=</span> <span class="n">X</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="n">assert</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="n">field</span><span class="p">[</span><span class="n">Y</span><span class="p">][</span><span class="n">X</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">y</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">direction</span><span class="p">;</span> <span class="c">//Direction（列挙）型では++と--できない（できるようにするのが面倒）。</span>
    <span class="kt">int</span> <span class="n">step</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">WINAPI</span> <span class="n">_tWinMain</span><span class="p">(</span><span class="n">HINSTANCE</span><span class="p">,</span> <span class="n">HINSTANCE</span><span class="p">,</span> <span class="n">LPTSTR</span><span class="p">,</span> <span class="kt">int</span> <span class="n">cmdShow</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">MainWindow</span> <span class="n">wnd</span><span class="p">;</span>
    <span class="n">wnd</span><span class="p">.</span><span class="n">Create</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">ATL</span><span class="o">::</span><span class="n">CWindow</span><span class="o">::</span><span class="n">rcDefault</span><span class="p">,</span> <span class="n">TEXT</span><span class="p">(</span><span class="s">&quot;Langton&#39;s ant&quot;</span><span class="p">),</span>
        <span class="n">WS_CAPTION</span> <span class="o">|</span> <span class="n">WS_SYSMENU</span> <span class="o">|</span> <span class="n">WS_DLGFRAME</span> <span class="o">|</span> <span class="n">WS_MINIMIZEBOX</span>
        <span class="o">|</span> <span class="n">WS_OVERLAPPED</span> <span class="o">|</span> <span class="n">WS_SYSMENU</span><span class="p">,</span> <span class="n">WS_EX_APPWINDOW</span><span class="p">);</span>
    <span class="n">wnd</span><span class="p">.</span><span class="n">ShowWindow</span><span class="p">(</span><span class="n">cmdShow</span><span class="p">);</span>
    <span class="n">wnd</span><span class="p">.</span><span class="n">UpdateWindow</span><span class="p">();</span>

    <span class="n">WTL</span><span class="o">::</span><span class="n">CMessageLoop</span> <span class="n">msgLoop</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">msgLoop</span><span class="p">.</span><span class="n">Run</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9371/addtag/" class="addtag" id="addtag_9371">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/WTL/">WTL</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9371/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9371/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9371"
  >-</span><span
  class="button yellow"
  id="rating_z_9371"
  >0</span><span 
  class="button green"
  id="rating_p_9371"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9371/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9372">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9372/">#9372</a>(<script language="JavaScript">print_time(new Date("2009/07/15 14:30 GMT"));</script><noscript>2009/07/15 14:30 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>C#でビットマップにごりごり描画します。
フレームスキップして速度を稼いでいます。</p>
<p>今回一番はまったのは、Color.FromArgb(255, 0, 0, 0) が Color.Black とイコールではないってこと。ColorはARGB以外の情報を持っているので、ToArgb()で比較するように、とMSDNにある。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506231016/http://msdn.microsoft.com/ja-jp/library/system.drawing.color.op_equality.aspx">Color.Equality 演算子</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Windows.Forms</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">LangtonsAnt</span> <span class="k">{</span>
    <span class="k">class</span> <span class="nc">Ant</span> <span class="k">{</span>
        <span class="n">Point</span> <span class="n">pos</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">direction</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">X</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">;</span> <span class="k">}</span> <span class="k">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">Y</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span> <span class="k">}</span> <span class="k">}</span>

        <span class="k">public</span> <span class="nf">Ant</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">{</span>
            <span class="n">pos</span><span class="p">.</span><span class="n">X</span> <span class="p">=</span> <span class="n">x</span><span class="p">;</span>
            <span class="n">pos</span><span class="p">.</span><span class="n">Y</span> <span class="p">=</span> <span class="n">y</span><span class="p">;</span>
            <span class="n">direction</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Advance</span><span class="p">(</span><span class="kt">bool</span> <span class="n">IsBlack</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">IsBlack</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">direction</span> <span class="p">=</span> <span class="p">(</span><span class="n">direction</span> <span class="p">+</span> <span class="m">1</span><span class="p">)</span> <span class="p">%</span> <span class="m">4</span><span class="p">;</span>
            <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>
                <span class="n">direction</span> <span class="p">=</span> <span class="p">(</span><span class="n">direction</span> <span class="p">+</span> <span class="m">3</span><span class="p">)</span> <span class="p">%</span> <span class="m">4</span><span class="p">;</span>
            <span class="k">}</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="k">{</span>
                <span class="k">case</span> <span class="m">0</span><span class="p">:</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">--;</span> <span class="k">break</span><span class="p">;</span> <span class="c">//北</span>
                <span class="k">case</span> <span class="m">1</span><span class="p">:</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">++;</span> <span class="k">break</span><span class="p">;</span> <span class="c">//東</span>
                <span class="k">case</span> <span class="m">2</span><span class="p">:</span> <span class="n">pos</span><span class="p">.</span><span class="n">Y</span><span class="p">++;</span> <span class="k">break</span><span class="p">;</span> <span class="c">//南</span>
                <span class="k">case</span> <span class="m">3</span><span class="p">:</span> <span class="n">pos</span><span class="p">.</span><span class="n">X</span><span class="p">--;</span> <span class="k">break</span><span class="p">;</span> <span class="c">//西</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">class</span> <span class="nc">Form1</span> <span class="p">:</span> <span class="n">Form</span> <span class="k">{</span>
        <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="p">;</span>                  <span class="c">//世界＝ビットマップ</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="n">Ant</span><span class="p">&gt;</span> <span class="n">ants</span><span class="p">;</span>                 <span class="c">//アリたち</span>
        <span class="n">Timer</span> <span class="n">timer</span><span class="p">;</span>                    <span class="c">//タイマー</span>
        <span class="kt">long</span> <span class="n">step_count</span><span class="p">;</span>                <span class="c">//ステップ数</span>
        <span class="n">Color</span> <span class="n">Black</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
        <span class="n">Color</span> <span class="n">White</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">,</span> <span class="m">255</span><span class="p">);</span>
        <span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span> <span class="k">{</span>
            <span class="c">//マップの初期化</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Width</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span> <span class="k">this</span><span class="p">.</span><span class="n">Height</span> <span class="p">=</span> <span class="m">200</span><span class="p">;</span>
            <span class="n">bitmap</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="m">300</span><span class="p">,</span> <span class="m">200</span><span class="p">,</span> <span class="n">Graphics</span><span class="p">.</span><span class="n">FromHwnd</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">Handle</span><span class="p">));</span>
            <span class="c">//100,100を中心に黒点を打つ</span>
            <span class="n">Random</span> <span class="n">r</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span> <span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">100</span> <span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="k">{</span>
                <span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">40</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">20</span><span class="p">;</span>
                <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">40</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">20</span><span class="p">;</span>
                <span class="n">bitmap</span><span class="p">.</span><span class="n">SetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Black</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="c">//アリの初期化</span>
            <span class="n">ants</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Ant</span><span class="p">&gt;();</span>
            <span class="n">ants</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Ant</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">10</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">10</span><span class="p">));</span>
            <span class="n">ants</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Ant</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">10</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">10</span><span class="p">));</span>
            <span class="n">ants</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="k">new</span> <span class="n">Ant</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">10</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">20</span><span class="p">)</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span> <span class="p">/</span> <span class="m">2</span> <span class="p">-</span> <span class="m">10</span><span class="p">));</span>
            <span class="c">//タイマー初期化</span>
            <span class="n">step_count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="n">timer</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="p">();</span>
            <span class="n">timer</span><span class="p">.</span><span class="n">Interval</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>       <span class="c">//300msに１度再描画</span>
            <span class="n">timer</span><span class="p">.</span><span class="n">Tick</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">EventHandler</span><span class="p">(</span><span class="n">timer_Tick</span><span class="p">);</span>
            <span class="n">timer</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="k">void</span> <span class="nf">timer_Tick</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="k">{</span>
            <span class="c">//高速化のため１描画につき150周回す</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">step</span> <span class="p">=</span> <span class="m">0</span> <span class="p">;</span> <span class="n">step</span> <span class="p">&lt;</span> <span class="m">150</span> <span class="p">;</span> <span class="n">step</span><span class="p">++)</span> <span class="k">{</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="n">Ant</span> <span class="n">ant</span> <span class="k">in</span> <span class="n">ants</span><span class="p">)</span> <span class="k">{</span>
                    <span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="p">(</span><span class="n">ant</span><span class="p">.</span><span class="n">X</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span><span class="p">)</span> <span class="p">%</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">x</span> <span class="p">+=</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Width</span><span class="p">;</span>
                    <span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="p">(</span><span class="n">ant</span><span class="p">.</span><span class="n">Y</span> <span class="p">+</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span><span class="p">)</span> <span class="p">%</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span><span class="p">;</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">y</span> <span class="p">+=</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">Height</span><span class="p">;</span>
                    <span class="n">Color</span> <span class="n">color</span> <span class="p">=</span> <span class="n">bitmap</span><span class="p">.</span><span class="n">GetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">color</span> <span class="p">==</span> <span class="n">Black</span><span class="p">)</span> <span class="k">{</span>
                        <span class="n">ant</span><span class="p">.</span><span class="n">Advance</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
                        <span class="n">bitmap</span><span class="p">.</span><span class="n">SetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">White</span><span class="p">);</span>
                    <span class="k">}</span> <span class="k">else</span> <span class="k">{</span>
                        <span class="n">ant</span><span class="p">.</span><span class="n">Advance</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
                        <span class="n">bitmap</span><span class="p">.</span><span class="n">SetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Black</span><span class="p">);</span>
                    <span class="k">}</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="n">Refresh</span><span class="p">();</span>
            <span class="n">step_count</span> <span class="p">+=</span> <span class="m">150</span><span class="p">;</span>
            <span class="n">Text</span> <span class="p">=</span> <span class="n">step_count</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnPaint</span><span class="p">(</span><span class="n">PaintEventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">base</span><span class="p">.</span><span class="n">OnPaint</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
            <span class="n">e</span><span class="p">.</span><span class="n">Graphics</span><span class="p">.</span><span class="n">DrawImage</span><span class="p">(</span><span class="n">bitmap</span><span class="p">,</span> <span class="n">ClientRectangle</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnClosed</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="k">{</span>
            <span class="n">timer</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span> <span class="n">timer</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
            <span class="k">base</span><span class="p">.</span><span class="n">OnClosed</span><span class="p">(</span><span class="n">e</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span> <span class="k">{</span>
<span class="na">        [STAThread]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="k">{</span>
            <span class="n">Application</span><span class="p">.</span><span class="n">EnableVisualStyles</span><span class="p">();</span>
            <span class="n">Application</span><span class="p">.</span><span class="n">SetCompatibleTextRenderingDefault</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
            <span class="n">Application</span><span class="p">.</span><span class="n">Run</span><span class="p">(</span><span class="k">new</span> <span class="n">Form1</span><span class="p">());</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9372/addtag/" class="addtag" id="addtag_9372">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9372/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9372/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9372"
  >-</span><span
  class="button yellow"
  id="rating_z_9372"
  >0</span><span 
  class="button green"
  id="rating_p_9372"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9372/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9373">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/647/" target="_top">ivoryworks</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9373/">#9373</a>(<script language="JavaScript">print_time(new Date("2009/07/15 16:06 GMT"));</script><noscript>2009/07/15 16:06 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ブラウザ向けに結果を出力します。

パラメータはフィールドの「幅」と「高さ」で、以下のように使用します。
（アリはフィールドの中心に落ちます）

lang_ant(300, 300);
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="k">function</span> <span class="nf">lang_ant</span><span class="p">(</span><span class="nv">$w</span><span class="p">,</span> <span class="nv">$h</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nv">$world</span> <span class="o">=</span> <span class="nf">array_fill</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="nv">$h</span><span class="p">,</span> <span class="nf">array_fill</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="nv">$w</span><span class="p">,</span> <span class="m">1</span><span class="p">));</span>
    <span class="nv">$x</span> <span class="o">=</span> <span class="p">(</span><span class="nx">int</span><span class="p">)(</span><span class="nv">$w</span><span class="o">/</span><span class="m">2</span><span class="p">);</span>
    <span class="nv">$y</span> <span class="o">=</span> <span class="p">(</span><span class="nx">int</span><span class="p">)(</span><span class="nv">$h</span><span class="o">/</span><span class="m">2</span><span class="p">);</span>
    <span class="nv">$dct</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="c">/* 0:N 1:E 2:S 3:W */</span>
    <span class="nv">$stp_ant</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;$x++;&#39;</span><span class="p">,</span> <span class="s1">&#39;$y++;&#39;</span><span class="p">,</span> <span class="s1">&#39;$x--;&#39;</span><span class="p">,</span> <span class="s1">&#39;$y--;&#39;</span><span class="p">);</span>
    <span class="nv">$chg_dct</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;$dct = (((++$dct)%4)+2)%4;&#39;</span><span class="p">,</span> <span class="s1">&#39;$dct = (++$dct)%4;&#39;</span><span class="p">);</span>
    <span class="nv">$print_world</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;0&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;nbsp;&#39;</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span> <span class="nv">$i</span> <span class="o">=</span> <span class="m">0</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="m">20000</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">eval</span><span class="p">(</span><span class="nv">$chg_dct</span><span class="p">[</span><span class="nv">$world</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]]);</span>
        <span class="k">eval</span><span class="p">(</span><span class="nv">$stp_ant</span><span class="p">[</span><span class="nv">$dct</span><span class="p">]);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nv">$x</span><span class="o">&lt;</span><span class="m">0</span> <span class="o">||</span> <span class="nv">$w</span><span class="o">&lt;=</span><span class="nv">$x</span> <span class="o">||</span> <span class="nv">$y</span><span class="o">&lt;</span><span class="m">0</span> <span class="o">||</span> <span class="nv">$h</span><span class="o">&lt;=</span><span class="nv">$y</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nv">$world</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">++</span><span class="nv">$world</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">])</span><span class="o">%</span><span class="m">2</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">foreach</span> <span class="p">(</span> <span class="nv">$world</span> <span class="k">as</span> <span class="nv">$cels</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="nv">$cels</span> <span class="k">as</span> <span class="nv">$cel</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">echo</span> <span class="nv">$print_world</span><span class="p">[</span><span class="nv">$cel</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="k">echo</span> <span class="s2">&quot;&lt;br /&gt;&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9373/addtag/" class="addtag" id="addtag_9373">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9373/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9373/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9373"
  >-</span><span
  class="button yellow"
  id="rating_z_9373"
  >0</span><span 
  class="button green"
  id="rating_p_9373"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9373/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9374">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9374/">#9374</a>(<script language="JavaScript">print_time(new Date("2009/07/15 21:59 GMT"));</script><noscript>2009/07/15 21:59 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre>Display fillWhite; restoreAfter: [
    | pen black white |
    pen := Pen new.
    black := pen color: Color black; color.
    white := Color white.
    [Sensor leftShiftDown] whileFalse: [
        (Display colorAt: pen location) caseOf: {
            [black] -&gt; [pen color: white; turn: -90].
            [white] -&gt; [pen color: black; turn: 90]} otherwise: [].
        pen down; go: 0; up; go: 1.
        pen instVarNamed: #direction put: pen direction \\ 360]
]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9374/addtag/" class="addtag" id="addtag_9374">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9374/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9374/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9374"
  >-</span><span
  class="button yellow"
  id="rating_z_9374"
  >0</span><span 
  class="button green"
  id="rating_p_9374"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9374/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9376">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9376/">#9376</a>(<script language="JavaScript">print_time(new Date("2009/07/16 03:00 GMT"));</script><noscript>2009/07/16 03:00 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>JPanelに直接描画してみました。
今時のJVMだと結構早い描画ができると思います。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.awt.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.awt.event.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample276</span> <span class="k">extends</span> <span class="n">JFrame</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">LangtonsAntPanel</span> <span class="n">mainPanel_</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">JButton</span> <span class="n">startButton_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JButton</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractAction</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">timer_</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
            <span class="n">changeMode</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">});</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">JButton</span> <span class="n">stopButton_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JButton</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractAction</span><span class="o">(</span><span class="s">&quot;stop&quot;</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">timer_</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
            <span class="n">changeMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">});</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">JButton</span> <span class="n">resetButton_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JButton</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractAction</span><span class="o">(</span><span class="s">&quot;reset&quot;</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">timer_</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
            <span class="n">changeMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>

            <span class="n">mainPanel_</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
            <span class="n">mainPanel_</span><span class="o">.</span><span class="na">repaint</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">});</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">JButton</span> <span class="n">endButton_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JButton</span><span class="o">(</span><span class="k">new</span> <span class="n">AbstractAction</span><span class="o">(</span><span class="s">&quot;end&quot;</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">public</span> <span class="kt">void</span> <span class="n">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">Sample276</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">dispose</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">});</span>

    <span class="k">private</span> <span class="k">final</span> <span class="n">Timer</span> <span class="n">timer_</span><span class="o">;</span>

    <span class="k">public</span> <span class="n">Sample276</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">super</span><span class="o">(</span><span class="s">&quot;Langton&#39;s ant.&quot;</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="n">JFrame</span><span class="o">.</span><span class="na">DISPOSE_ON_CLOSE</span><span class="o">);</span>

        <span class="n">mainPanel_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LangtonsAntPanel</span><span class="o">(</span><span class="n">size</span><span class="o">);</span>

        <span class="n">JPanel</span> <span class="n">panel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JPanel</span><span class="o">(</span><span class="k">new</span> <span class="n">BorderLayout</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">mainPanel_</span><span class="o">,</span> <span class="n">BorderLayout</span><span class="o">.</span><span class="na">CENTER</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createButtonPanel</span><span class="o">(),</span> <span class="n">BorderLayout</span><span class="o">.</span><span class="na">SOUTH</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">panel</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">pack</span><span class="o">();</span>

        <span class="n">timer_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Timer</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="k">new</span> <span class="n">ActionListener</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">void</span> <span class="n">actionPerformed</span><span class="o">(</span><span class="n">ActionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">boolean</span> <span class="n">res</span> <span class="o">=</span> <span class="n">mainPanel_</span><span class="o">.</span><span class="na">tick</span><span class="o">();</span>
                <span class="n">mainPanel_</span><span class="o">.</span><span class="na">repaint</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">res</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">timer_</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
                    <span class="n">changeMode</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
                    <span class="n">JOptionPane</span><span class="o">.</span><span class="na">showMessageDialog</span><span class="o">(</span><span class="n">Sample276</span><span class="o">.</span><span class="na">this</span><span class="o">,</span> <span class="s">&quot;Langton&#39;s ant is dead.&quot;</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="n">JComponent</span> <span class="n">createButtonPanel</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">JPanel</span> <span class="n">panel</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JPanel</span><span class="o">(</span><span class="k">new</span> <span class="n">FlowLayout</span><span class="o">(</span><span class="n">FlowLayout</span><span class="o">.</span><span class="na">RIGHT</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">3</span><span class="o">));</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">startButton_</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">stopButton_</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">resetButton_</span><span class="o">);</span>
        <span class="n">panel</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">endButton_</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">panel</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="kt">void</span> <span class="n">changeMode</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isMoving</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">startButton_</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(!</span><span class="n">isMoving</span><span class="o">);</span>
        <span class="n">stopButton_</span><span class="o">.</span><span class="na">setEnabled</span><span class="o">(</span><span class="n">isMoving</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">SwingUtilities</span><span class="o">.</span><span class="na">invokeLater</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">try</span><span class="o">{</span>
                    <span class="n">UIManager</span><span class="o">.</span><span class="na">setLookAndFeel</span><span class="o">(</span><span class="n">UIManager</span><span class="o">.</span><span class="na">getSystemLookAndFeelClassName</span><span class="o">());</span>
                <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="n">InternalError</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                <span class="o">}</span>
                <span class="n">Sample276</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample276</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
                <span class="n">frame</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="o">};</span>
        <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">class</span> <span class="nc">LangtonsAntPanel</span> <span class="k">extends</span> <span class="n">JPanel</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">enum</span> <span class="n">Direction</span> <span class="o">{</span>
        <span class="n">N</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">),</span>
        <span class="n">E</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">),</span>
        <span class="n">S</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">),</span>
        <span class="n">W</span><span class="o">(-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

        <span class="k">public</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">dx</span><span class="o">;</span>
        <span class="k">public</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">dy</span><span class="o">;</span>
        <span class="k">private</span> <span class="n">Direction</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">dx</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="n">dy</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="n">Direction</span> <span class="n">turn</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isRight</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">dd</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">ordinal</span><span class="o">()</span> <span class="o">+</span> <span class="o">(</span><span class="n">isRight</span><span class="o">?</span> <span class="mi">1</span><span class="o">:</span> <span class="mi">3</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">Direction</span><span class="o">.</span><span class="na">values</span><span class="o">()[</span><span class="n">dd</span> <span class="o">%</span> <span class="mi">4</span><span class="o">];</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">class</span> <span class="nc">Ant</span> <span class="o">{</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">x_</span><span class="o">;</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">y_</span><span class="o">;</span>
        <span class="k">private</span> <span class="n">Direction</span> <span class="n">d_</span> <span class="o">=</span> <span class="n">Direction</span><span class="o">.</span><span class="na">N</span><span class="o">;</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">counter_</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">public</span> <span class="n">Ant</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">x_</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="n">y_</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">getX</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">x_</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">getY</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">y_</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">int</span> <span class="n">getCounter</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">counter_</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">public</span> <span class="kt">void</span> <span class="n">next</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">isBlack</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">d_</span> <span class="o">=</span> <span class="n">d_</span><span class="o">.</span><span class="na">turn</span><span class="o">(</span><span class="n">isBlack</span><span class="o">);</span>
            <span class="n">x_</span> <span class="o">+=</span> <span class="n">d_</span><span class="o">.</span><span class="na">dx</span><span class="o">;</span>
            <span class="n">y_</span> <span class="o">+=</span> <span class="n">d_</span><span class="o">.</span><span class="na">dy</span><span class="o">;</span>
            <span class="n">counter_</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">ANT_SIZE</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>

    <span class="k">private</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">size_</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">final</span> <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">land_</span><span class="o">;</span>
    <span class="k">private</span> <span class="n">Ant</span> <span class="n">ant_</span><span class="o">;</span>

    <span class="k">public</span> <span class="n">LangtonsAntPanel</span><span class="o">(</span><span class="kt">int</span> <span class="n">size</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">super</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

        <span class="n">size_</span> <span class="o">=</span> <span class="n">size</span><span class="o">;</span>
        <span class="n">land_</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">size</span><span class="o">][];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">land_</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">land_</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">size</span><span class="o">];</span>
        <span class="o">}</span>
        <span class="n">ant_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ant</span><span class="o">(</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>

        <span class="n">setBackground</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>
        <span class="n">setForeground</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>
        <span class="n">setSize</span><span class="o">(</span><span class="n">size</span> <span class="o">*</span> <span class="n">ANT_SIZE</span><span class="o">,</span> <span class="n">size</span> <span class="o">*</span> <span class="n">ANT_SIZE</span><span class="o">);</span>
        <span class="n">setPreferredSize</span><span class="o">(</span><span class="n">getSize</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">boolean</span> <span class="n">tick</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ant_</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ant_</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
        <span class="kt">boolean</span> <span class="n">b</span> <span class="o">=</span> <span class="n">land_</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">];</span>
        <span class="n">land_</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span><span class="n">b</span><span class="o">;</span>
        <span class="n">ant_</span><span class="o">.</span><span class="na">next</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
        
        <span class="n">y</span> <span class="o">=</span> <span class="n">ant_</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">size_</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">x</span> <span class="o">=</span> <span class="n">ant_</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">size_</span> <span class="o">&lt;=</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">void</span> <span class="n">reset</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">land_</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">land_</span><span class="o">[</span><span class="n">y</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">land_</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">ant_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Ant</span><span class="o">(</span><span class="n">size_</span> <span class="o">/</span> <span class="mi">2</span><span class="o">,</span> <span class="n">size_</span> <span class="o">/</span> <span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="k">protected</span> <span class="kt">void</span> <span class="n">paintComponent</span><span class="o">(</span><span class="n">Graphics</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Graphics2D</span> <span class="n">g2d</span> <span class="o">=</span> <span class="o">(</span><span class="n">Graphics2D</span><span class="o">)</span> <span class="n">g</span><span class="o">;</span>
        <span class="n">g2d</span><span class="o">.</span><span class="na">setBackground</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>
        <span class="n">g2d</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">BLACK</span><span class="o">);</span>

        <span class="n">g2d</span><span class="o">.</span><span class="na">clearRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">getWidth</span><span class="o">(),</span> <span class="k">this</span><span class="o">.</span><span class="na">getHeight</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">land_</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">y</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">land_</span><span class="o">[</span><span class="n">y</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">x</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">land_</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">g2d</span><span class="o">.</span><span class="na">fillRoundRect</span><span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">ANT_SIZE</span><span class="o">,</span> <span class="n">y</span> <span class="o">*</span> <span class="n">ANT_SIZE</span><span class="o">,</span> <span class="n">ANT_SIZE</span><span class="o">,</span> <span class="n">ANT_SIZE</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">g2d</span><span class="o">.</span><span class="na">drawString</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;turn: %d&quot;</span><span class="o">,</span> <span class="n">ant_</span><span class="o">.</span><span class="na">getCounter</span><span class="o">()),</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">12</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9376/addtag/" class="addtag" id="addtag_9376">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9376/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9376/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9376"
  >-</span><span
  class="button yellow"
  id="rating_z_9376"
  >0</span><span 
  class="button green"
  id="rating_p_9376"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9376/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9377">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/994/" target="_top">creeper</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9377/">#9377</a>(<script language="JavaScript">print_time(new Date("2009/07/16 03:06 GMT"));</script><noscript>2009/07/16 03:06 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>アリ1匹につき1スレッドで。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Windows.Forms</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Drawing</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">doukaku276</span>
<span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">ANT_NUM</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">FIELD_WIDTH</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">FIELD_HEIGHT</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>
        <span class="k">static</span> <span class="n">Random</span> <span class="n">rnd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>

        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="k">new</span> <span class="n">FormMain</span><span class="p">().</span><span class="n">ShowDialog</span><span class="p">();</span>
        <span class="k">}</span>

        <span class="k">class</span> <span class="nc">Ant</span>
        <span class="k">{</span>
            <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>
            <span class="kt">int</span> <span class="n">direction</span><span class="p">;</span><span class="c">//0:↑ 1:→ 2:↓ 3:←</span>
            <span class="n">Color</span> <span class="n">color</span><span class="p">;</span>
            <span class="k">public</span> <span class="nf">Ant</span><span class="p">()</span>
            <span class="k">{</span>
                <span class="n">x</span> <span class="p">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">FIELD_WIDTH</span><span class="p">);</span>
                <span class="n">y</span> <span class="p">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="n">FIELD_HEIGHT</span><span class="p">);</span>
                <span class="n">direction</span> <span class="p">=</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">4</span><span class="p">);</span>
                <span class="n">color</span> <span class="p">=</span> <span class="n">Color</span><span class="p">.</span><span class="n">FromArgb</span><span class="p">(</span><span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">254</span><span class="p">),</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">255</span><span class="p">),</span> <span class="n">rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span><span class="m">255</span><span class="p">));</span>
            <span class="k">}</span>
            <span class="k">public</span> <span class="k">void</span> <span class="nf">step</span><span class="p">(</span><span class="n">Bitmap</span> <span class="n">bmp</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="kt">bool</span> <span class="n">b</span> <span class="p">=</span> <span class="n">bmp</span><span class="p">.</span><span class="n">GetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">).</span><span class="n">R</span> <span class="p">!=</span> <span class="m">255</span><span class="p">;</span> <span class="c">// 黒？ R=255を白とする</span>
                <span class="n">direction</span> <span class="p">=</span> <span class="p">(</span><span class="n">direction</span> <span class="p">+</span> <span class="p">(</span><span class="n">b</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">3</span><span class="p">))</span> <span class="p">%</span> <span class="m">4</span><span class="p">;</span> <span class="c">// 回転</span>
                <span class="n">bmp</span><span class="p">.</span><span class="n">SetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">b</span> <span class="p">?</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span> <span class="p">:</span> <span class="n">color</span><span class="p">);</span> <span class="c">// 色反転</span>
                <span class="c">// 前進</span>
                <span class="k">switch</span> <span class="p">(</span><span class="n">direction</span><span class="p">)</span>
                <span class="k">{</span>
                <span class="k">case</span> <span class="m">0</span><span class="p">:</span> <span class="n">y</span><span class="p">--;</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="m">1</span><span class="p">:</span> <span class="n">x</span><span class="p">++;</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="m">2</span><span class="p">:</span> <span class="n">y</span><span class="p">++;</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">case</span> <span class="m">3</span><span class="p">:</span> <span class="n">x</span><span class="p">--;</span> <span class="k">break</span><span class="p">;</span>
                <span class="k">}</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">x</span> <span class="p">+=</span> <span class="n">FIELD_WIDTH</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">x</span> <span class="p">&gt;=</span> <span class="n">FIELD_WIDTH</span><span class="p">)</span> <span class="n">x</span> <span class="p">-=</span> <span class="n">FIELD_WIDTH</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">y</span> <span class="p">+=</span> <span class="n">FIELD_HEIGHT</span><span class="p">;</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">y</span> <span class="p">&gt;=</span> <span class="n">FIELD_HEIGHT</span><span class="p">)</span> <span class="n">y</span> <span class="p">-=</span> <span class="n">FIELD_HEIGHT</span><span class="p">;</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="k">class</span> <span class="nc">FormMain</span> <span class="p">:</span> <span class="n">Form</span>
        <span class="k">{</span>
            <span class="n">Bitmap</span> <span class="n">bmp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Bitmap</span><span class="p">(</span><span class="n">FIELD_WIDTH</span><span class="p">,</span> <span class="n">FIELD_HEIGHT</span><span class="p">);</span>
            <span class="n">List</span><span class="p">&lt;</span><span class="n">Thread</span><span class="p">&gt;</span> <span class="n">ants</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Thread</span><span class="p">&gt;();</span>
            <span class="k">public</span> <span class="nf">FormMain</span><span class="p">()</span>
            <span class="k">{</span>
                <span class="k">lock</span> <span class="p">(</span><span class="n">bmp</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">y</span> <span class="p">&lt;</span> <span class="n">FIELD_HEIGHT</span><span class="p">;</span> <span class="n">y</span><span class="p">++)</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">x</span> <span class="p">&lt;</span> <span class="n">FIELD_WIDTH</span><span class="p">;</span> <span class="n">x</span><span class="p">++)</span>
                            <span class="n">bmp</span><span class="p">.</span><span class="n">SetPixel</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Color</span><span class="p">.</span><span class="n">White</span><span class="p">);</span>
                <span class="k">}</span>
                <span class="k">this</span><span class="p">.</span><span class="n">Size</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Size</span><span class="p">(</span><span class="n">FIELD_WIDTH</span> <span class="p">*</span> <span class="m">3</span> <span class="p">+</span> <span class="m">100</span><span class="p">,</span> <span class="n">FIELD_HEIGHT</span> <span class="p">*</span> <span class="m">3</span> <span class="p">+</span> <span class="m">100</span><span class="p">);</span>
                <span class="k">this</span><span class="p">.</span><span class="n">CenterToScreen</span><span class="p">();</span>
                <span class="k">this</span><span class="p">.</span><span class="n">DoubleBuffered</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
            <span class="k">}</span>
            <span class="k">void</span> <span class="nf">update</span><span class="p">()</span>
            <span class="k">{</span>
                <span class="n">Ant</span> <span class="n">ant</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Ant</span><span class="p">();</span>
                <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">lock</span> <span class="p">(</span><span class="n">bmp</span><span class="p">)</span>
                    <span class="k">{</span>
                        <span class="n">ant</span><span class="p">.</span><span class="n">step</span><span class="p">(</span><span class="n">bmp</span><span class="p">);</span>
                    <span class="k">}</span>
                    <span class="k">this</span><span class="p">.</span><span class="n">Invalidate</span><span class="p">();</span>
                    <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnClosing</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">ComponentModel</span><span class="p">.</span><span class="n">CancelEventArgs</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">foreach</span><span class="p">(</span><span class="n">var</span> <span class="n">t</span> <span class="k">in</span> <span class="n">ants</span><span class="p">)</span> <span class="n">t</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
            <span class="k">}</span>
            <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnPaint</span><span class="p">(</span><span class="n">PaintEventArgs</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="c">//base.OnPaint(e);</span>
                <span class="n">Graphics</span> <span class="n">g</span> <span class="p">=</span> <span class="n">e</span><span class="p">.</span><span class="n">Graphics</span><span class="p">;</span>
                <span class="n">g</span><span class="p">.</span><span class="n">InterpolationMode</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Drawing</span><span class="p">.</span><span class="n">Drawing2D</span><span class="p">.</span><span class="n">InterpolationMode</span><span class="p">.</span><span class="n">NearestNeighbor</span><span class="p">;</span>
                <span class="k">lock</span> <span class="p">(</span><span class="n">bmp</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="n">g</span><span class="p">.</span><span class="n">DrawImage</span><span class="p">(</span><span class="n">bmp</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="m">30</span><span class="p">,</span> <span class="n">FIELD_WIDTH</span> <span class="p">*</span> <span class="m">3</span><span class="p">,</span> <span class="n">FIELD_HEIGHT</span> <span class="p">*</span> <span class="m">3</span><span class="p">);</span>
                <span class="k">}</span>
                <span class="n">g</span><span class="p">.</span><span class="n">DrawString</span><span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;ants:{0}&quot;</span><span class="p">,</span> <span class="n">ants</span><span class="p">.</span><span class="n">Count</span><span class="p">),</span> <span class="k">this</span><span class="p">.</span><span class="n">Font</span><span class="p">,</span> <span class="n">Brushes</span><span class="p">.</span><span class="n">Black</span><span class="p">,</span> <span class="m">40</span><span class="p">,</span> <span class="n">FIELD_HEIGHT</span> <span class="p">*</span> <span class="m">3</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">OnClick</span><span class="p">(</span><span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="n">var</span> <span class="n">thread</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">new</span> <span class="n">ThreadStart</span><span class="p">(</span><span class="n">update</span><span class="p">));</span>
                <span class="n">thread</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
                <span class="n">ants</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">thread</span><span class="p">);</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9377/addtag/" class="addtag" id="addtag_9377">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9377/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9377/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9377"
  >-</span><span
  class="button yellow"
  id="rating_z_9377"
  >0</span><span 
  class="button green"
  id="rating_p_9377"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9377/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9378">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/760/" target="_top">turugina</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9378/">#9378</a>(<script language="JavaScript">print_time(new Date("2009/07/16 03:15 GMT"));</script><noscript>2009/07/16 03:15 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Perl/Tk でごりごり書いてみました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">use</span> <span class="n">Tk</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Tk::</span><span class="n">MsgBox</span><span class="p">;</span>
<span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$w</span> <span class="o">=</span> <span class="nb">shift</span> <span class="o">||</span> <span class="mi">100</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$h</span> <span class="o">=</span> <span class="nb">shift</span> <span class="o">||</span> <span class="nv">$w</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$pxsize</span>  <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$init_pattern_subs</span> <span class="o">=</span> <span class="n">create_pattern_subs</span><span class="p">();</span>
<span class="k">my</span> <span class="nv">$pattern</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">$pattarn_sub</span> <span class="o">=</span> <span class="nv">$pattern</span> <span class="o">&amp;&amp;</span> <span class="nb">exists</span> <span class="nv">$init_pattern_subs</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$pattern</span><span class="p">}</span>
<span class="p">?</span> <span class="nv">$init_pattern_subs</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$pattern</span><span class="p">}</span> 
<span class="p">:</span> <span class="k">sub </span><span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>

<span class="k">my</span> <span class="nv">$mw</span> <span class="o">=</span> <span class="nn">Tk::</span><span class="n">MainWindow</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="o">-</span><span class="n">title</span> <span class="o">=&gt;</span> <span class="s">&#39;ラングトンの蟻&#39;</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$control_frame</span> <span class="o">=</span> <span class="nv">$mw</span><span class="o">-&gt;</span><span class="n">Frame</span><span class="p">;</span>
<span class="nv">$control_frame</span><span class="o">-&gt;</span><span class="nb">pack</span><span class="p">(</span>
  <span class="o">-</span><span class="n">side</span> <span class="o">=&gt;</span> <span class="s">&#39;bottom&#39;</span><span class="p">,</span>
  <span class="o">-</span><span class="n">anchor</span> <span class="o">=&gt;</span> <span class="s">&#39;s&#39;</span><span class="p">,</span>
  <span class="o">-</span><span class="n">fill</span> <span class="o">=&gt;</span> <span class="s">&#39;x&#39;</span><span class="p">,</span>
<span class="p">);</span>
<span class="k">my</span> <span class="nv">$drawing_frame</span> <span class="o">=</span> <span class="nv">$mw</span><span class="o">-&gt;</span><span class="n">Frame</span><span class="p">;</span>
<span class="nv">$drawing_frame</span><span class="o">-&gt;</span><span class="nb">pack</span><span class="p">(</span>
  <span class="o">-</span><span class="n">side</span> <span class="o">=&gt;</span> <span class="s">&#39;top&#39;</span><span class="p">,</span>
  <span class="o">-</span><span class="n">anchor</span> <span class="o">=&gt;</span> <span class="s">&#39;n&#39;</span><span class="p">,</span>
  <span class="o">-</span><span class="n">fill</span> <span class="o">=&gt;</span> <span class="s">&#39;both&#39;</span><span class="p">,</span>
<span class="p">);</span>
<span class="k">my</span> <span class="nv">$canvas</span> <span class="o">=</span> <span class="nv">$drawing_frame</span><span class="o">-&gt;</span><span class="n">Canvas</span><span class="p">(</span>
  <span class="o">-</span><span class="n">width</span> <span class="o">=&gt;</span> <span class="nv">$w</span> <span class="o">*</span> <span class="nv">$pxsize</span><span class="p">,</span> <span class="o">-</span><span class="n">height</span> <span class="o">=&gt;</span> <span class="nv">$h</span> <span class="o">*</span> <span class="nv">$pxsize</span><span class="p">,</span>
  <span class="o">-</span><span class="n">background</span> <span class="o">=&gt;</span> <span class="s">&#39;white&#39;</span><span class="p">,</span>
<span class="p">);</span>
<span class="k">my</span> <span class="nv">@field</span><span class="p">;</span>
<span class="k">for</span> <span class="k">my</span> <span class="nv">$x</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$w</span><span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
  <span class="k">for</span> <span class="k">my</span> <span class="nv">$y</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$h</span><span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
    <span class="nv">$field</span><span class="p">[</span><span class="nv">$x</span><span class="p">][</span><span class="nv">$y</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$canvas</span><span class="o">-&gt;</span><span class="n">createRectangle</span><span class="p">(</span>
      <span class="p">(</span><span class="nb">map</span><span class="p">{</span><span class="nv">$_</span> <span class="o">*</span> <span class="nv">$pxsize</span><span class="p">}</span> <span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="nv">$x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nv">$y</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
      <span class="o">-</span><span class="n">fill</span> <span class="o">=&gt;</span> <span class="s">&#39;white&#39;</span>
    <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$canvas</span><span class="o">-&gt;</span><span class="nb">pack</span><span class="p">(</span><span class="o">-</span><span class="n">fill</span> <span class="o">=&gt;</span> <span class="s">&#39;both&#39;</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$start_button</span> <span class="o">=</span> <span class="nv">$control_frame</span><span class="o">-&gt;</span><span class="n">Button</span><span class="p">(</span>
  <span class="o">-</span><span class="n">text</span> <span class="o">=&gt;</span> <span class="s">&#39;START&#39;</span><span class="p">,</span>
  <span class="o">-</span><span class="n">command</span> <span class="o">=&gt;</span> <span class="o">\&amp;</span><span class="n">start_proc</span><span class="p">,</span>
  <span class="o">-</span><span class="n">state</span> <span class="o">=&gt;</span> <span class="s">&#39;normal&#39;</span><span class="p">,</span>
<span class="p">);</span>
<span class="nv">$start_button</span><span class="o">-&gt;</span><span class="nb">pack</span><span class="p">(</span><span class="o">-</span><span class="n">anchor</span> <span class="o">=&gt;</span> <span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">side</span> <span class="o">=&gt;</span> <span class="s">&#39;left&#39;</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$stop_button</span> <span class="o">=</span> <span class="nv">$control_frame</span><span class="o">-&gt;</span><span class="n">Button</span><span class="p">(</span>
  <span class="o">-</span><span class="n">text</span> <span class="o">=&gt;</span> <span class="s">&#39;STOP&#39;</span><span class="p">,</span>
  <span class="o">-</span><span class="n">command</span> <span class="o">=&gt;</span> <span class="o">\&amp;</span><span class="n">stop_proc</span><span class="p">,</span>
  <span class="o">-</span><span class="n">state</span> <span class="o">=&gt;</span> <span class="s">&#39;disabled&#39;</span><span class="p">,</span>
<span class="p">);</span>
<span class="nv">$stop_button</span><span class="o">-&gt;</span><span class="nb">pack</span><span class="p">(</span><span class="o">-</span><span class="n">anchor</span> <span class="o">=&gt;</span> <span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">side</span> <span class="o">=&gt;</span> <span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">padx</span> <span class="o">=&gt;</span> <span class="mi">20</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$stat</span> <span class="o">=</span> <span class="n">step_label</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="k">my</span> <span class="nv">$stat_label</span> <span class="o">=</span> <span class="nv">$control_frame</span><span class="o">-&gt;</span><span class="n">Label</span><span class="p">(</span>
  <span class="o">-</span><span class="n">textvariable</span> <span class="o">=&gt;</span> <span class="o">\</span><span class="nv">$stat</span>
<span class="p">);</span>
<span class="nv">$stat_label</span><span class="o">-&gt;</span><span class="nb">pack</span><span class="p">(</span><span class="o">-</span><span class="n">anchor</span> <span class="o">=&gt;</span> <span class="s">&#39;w&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">side</span> <span class="o">=&gt;</span> <span class="s">&#39;left&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">padx</span> <span class="o">=&gt;</span> <span class="mi">30</span><span class="p">);</span>

<span class="n">Tk</span><span class="o">-&gt;</span><span class="n">MainLoop</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">create_pattern_subs</span>
<span class="p">{</span>
  <span class="o">+</span><span class="p">{</span>
    <span class="n">ichimatsu</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="p">((</span><span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="sr">/2) ^ ($_[1]/</span><span class="mi">2</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">x1</span><span class="p">;</span> <span class="p">},</span>
    <span class="n">lines</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="p">(</span><span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="sr">/12) &amp; ($_[1]/</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">0</span><span class="n">x1</span><span class="p">;</span> <span class="p">},</span>
    <span class="n">random</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="o">!</span><span class="nb">int</span> <span class="nb">rand</span> <span class="mi">3</span> <span class="p">},</span>
  <span class="p">};</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">step_label</span>
<span class="p">{</span>
  <span class="nb">sprintf</span> <span class="s">&#39;%#8d steps (%#3d, %#3d)&#39;</span><span class="p">,</span> <span class="nv">@_</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">{</span>
  <span class="k">my</span> <span class="p">(</span><span class="nv">$count</span><span class="p">,</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="nv">$d</span><span class="p">,</span><span class="nv">$timer</span><span class="p">);</span>

  <span class="k">sub </span><span class="nf">start_proc</span>
  <span class="p">{</span>
    <span class="nv">$stop_button</span><span class="o">-&gt;</span><span class="n">configure</span><span class="p">(</span><span class="o">-</span><span class="n">state</span> <span class="o">=&gt;</span> <span class="s">&#39;normal&#39;</span><span class="p">);</span>
    <span class="nv">$start_button</span><span class="o">-&gt;</span><span class="n">configure</span><span class="p">(</span><span class="o">-</span><span class="n">state</span> <span class="o">=&gt;</span> <span class="s">&#39;disabled&#39;</span><span class="p">);</span>

    <span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="nv">$x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="nv">$w</span><span class="sr">/2) + $w/</span><span class="mi">4</span><span class="p">);</span>
    <span class="nv">$y</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="nv">$h</span><span class="sr">/2) + $h/</span><span class="mi">4</span><span class="p">);</span>
    <span class="nv">$d</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">rand</span><span class="p">(</span><span class="mi">4</span><span class="p">));</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$x_</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$w</span><span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="k">my</span> <span class="nv">$y_</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">..</span> <span class="nv">$h</span><span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$canvas</span><span class="o">-&gt;</span><span class="n">itemconfigure</span><span class="p">(</span><span class="nv">$field</span><span class="p">[</span><span class="nv">$x_</span><span class="p">][</span><span class="nv">$y_</span><span class="p">],</span>
          <span class="o">-</span><span class="n">fill</span> <span class="o">=&gt;</span> <span class="nv">$pattarn_sub</span><span class="o">-&gt;</span><span class="p">(</span><span class="nv">$x_</span><span class="p">,</span><span class="nv">$y_</span><span class="p">)</span> <span class="p">?</span> <span class="s">&#39;black&#39;</span> <span class="p">:</span> <span class="s">&#39;white&#39;</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="nv">$timer</span> <span class="o">=</span> <span class="nv">$mw</span><span class="o">-&gt;</span><span class="n">repeat</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="o">\&amp;</span><span class="n">next_step</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">sub </span><span class="nf">stop_proc</span>
  <span class="p">{</span>
    <span class="nv">$stop_button</span><span class="o">-&gt;</span><span class="n">configure</span><span class="p">(</span><span class="o">-</span><span class="n">state</span> <span class="o">=&gt;</span> <span class="s">&#39;disabled&#39;</span><span class="p">);</span>
    <span class="nv">$start_button</span><span class="o">-&gt;</span><span class="n">configure</span><span class="p">(</span><span class="o">-</span><span class="n">state</span> <span class="o">=&gt;</span> <span class="s">&#39;normal&#39;</span><span class="p">);</span>

    <span class="nv">$mw</span><span class="o">-&gt;</span><span class="n">afterCancel</span><span class="p">(</span><span class="nv">$timer</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">sub </span><span class="nf">next_step</span>
  <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$bit</span> <span class="o">=</span> <span class="nv">$canvas</span><span class="o">-&gt;</span><span class="n">itemcget</span><span class="p">(</span><span class="nv">$field</span><span class="p">[</span><span class="nv">$x</span><span class="p">][</span><span class="nv">$y</span><span class="p">],</span> <span class="s">&#39;-fill&#39;</span><span class="p">)</span> <span class="ow">ne</span> <span class="s">&#39;white&#39;</span><span class="p">;</span>
    <span class="nv">$canvas</span><span class="o">-&gt;</span><span class="n">itemconfigure</span><span class="p">(</span><span class="nv">$field</span><span class="p">[</span><span class="nv">$x</span><span class="p">][</span><span class="nv">$y</span><span class="p">],</span> <span class="o">-</span><span class="n">fill</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nv">$bit</span> <span class="p">?</span> <span class="s">&#39;white&#39;</span> <span class="p">:</span> <span class="s">&#39;black&#39;</span><span class="p">));</span>

    <span class="nv">$d</span> <span class="o">=</span> <span class="p">(</span><span class="nv">$bit</span> <span class="p">?</span> <span class="o">++</span><span class="nv">$d</span> <span class="p">:</span> <span class="o">--</span><span class="nv">$d</span><span class="p">)</span> <span class="nv">%</span> <span class="nv">4</span><span class="p">;</span>
    <span class="k">if</span>    <span class="p">(</span> <span class="nv">$d</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span> <span class="o">--</span><span class="nv">$x</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$d</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="o">++</span><span class="nv">$y</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$d</span> <span class="o">==</span> <span class="mi">2</span> <span class="p">)</span> <span class="p">{</span> <span class="o">++</span><span class="nv">$x</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">elsif</span> <span class="p">(</span> <span class="nv">$d</span> <span class="o">==</span> <span class="mi">3</span> <span class="p">)</span> <span class="p">{</span> <span class="o">--</span><span class="nv">$y</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">if</span> <span class="p">(</span> <span class="nv">$x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$x</span> <span class="o">&gt;=</span> <span class="nv">$w</span> <span class="o">||</span> <span class="nv">$y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="nv">$y</span> <span class="o">&gt;=</span> <span class="nv">$h</span> <span class="p">)</span> <span class="p">{</span>
      <span class="n">stop_proc</span><span class="p">;</span>
      <span class="k">my</span> <span class="nv">$d</span> <span class="o">=</span> <span class="nv">$mw</span><span class="o">-&gt;</span><span class="n">MsgBox</span><span class="p">(</span><span class="o">-</span><span class="n">title</span> <span class="o">=&gt;</span> <span class="s">&#39;END&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">message</span> <span class="o">=&gt;</span> <span class="s">&#39;しゅーりょー&#39;</span><span class="p">,</span> <span class="o">-</span><span class="n">type</span> <span class="o">=&gt;</span> <span class="s">&#39;ok&#39;</span><span class="p">);</span>
      <span class="nv">$d</span><span class="o">-&gt;</span><span class="n">Show</span><span class="p">;</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nv">$stat</span> <span class="o">=</span> <span class="n">step_label</span><span class="p">(</span> <span class="o">++</span><span class="nv">$count</span><span class="p">,</span> <span class="nv">$x</span><span class="p">,</span> <span class="nv">$y</span><span class="p">);</span>
  <span class="p">}</span>

<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9378/addtag/" class="addtag" id="addtag_9378">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9378/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9378/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9378"
  >-</span><span
  class="button yellow"
  id="rating_z_9378"
  >0</span><span 
  class="button green"
  id="rating_p_9378"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100506231016/http://ja.doukaku.org/comment/9378/">
    1
    reply
  </a>

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9378/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment9379">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/763/" target="_top">Songmu</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9379/">#9379</a>(<script language="JavaScript">print_time(new Date("2009/07/16 03:38 GMT"));</script><noscript>2009/07/16 03:38 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>おお。Perl/Tkをあまり使ったことがなかったので、Perlでの投稿を期待して待ってました。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9379/addtag/" class="addtag" id="addtag_9379">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9379"
  >-</span><span
  class="button yellow"
  id="rating_z_9379"
  >0</span><span 
  class="button green"
  id="rating_p_9379"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100506231016/http://ja.doukaku.org/comment/9378/"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100506231016/http://ja.doukaku.org/comment/9379/root/"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9379/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment9380">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/154/" target="_top">xsd</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9380/">#9380</a>(<script language="JavaScript">print_time(new Date("2009/07/16 12:35 GMT"));</script><noscript>2009/07/16 12:35 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/actionscript/">
	  ActionScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>ActionScriptで作成してみました。
30Frame/secでは遅かったので、1Frameに10Step進ませています。</p>
<p>ブラウザ上で確認できるようにwonderflにもおいておきます。</p>
<p><a class="reference" href="/web/20100506231016/http://wonderfl.net/code/519de9f580e291a6309e2e8df3d5e8319a647433">http://wonderfl.net/code/519de9f580e291a6309e2e8df3d5e8319a647433</a></p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68</pre></td><td class="code"><div class="highlight"><pre>package {
    // Yet another implimentation of Langton&#39;s ant
    // This is made for &quot;どう書く？org&quot;, http://ja.doukaku.org/276/
    // This code is written by xsd.
    import flash.display.Sprite;
    import flash.display.BitmapData;
    import flash.display.Bitmap;
    import flash.geom.Rectangle;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFormat;

    [SWF(width=&quot;465&quot;, height=&quot;465&quot;, backgroundColor=&quot;0xFFFFFF&quot;, frameRate=&quot;30&quot;)]
    public class LangtonsAnt extends Sprite {
    private const SCREEN_WIDTH:int = 465;
    private const SCREEN_HEIGHT:int = 465;
    private const CELL_SIZE:int = 4;
    private const STEP:int = 10;

    private var bm:BitmapData;
    private var bmp:Bitmap;
    private var tf:TextField;
    private var xAnt:int = 200;
    private var yAnt:int = 200;
    private var vx:int = 1;
    private var vy:int = 0;
    private var count:int = 0;
        
    public function LangtonsAnt():void {
            bm = new BitmapData(SCREEN_WIDTH, SCREEN_HEIGHT, false, 0xFFFFFF);
            bmp = new Bitmap(bm);
            this.addChild(bmp);

            tf = new TextField();
            tf.defaultTextFormat = new TextFormat(&quot;_Serif&quot;, 24, 0, true);
            tf.x = 0; tf.y = SCREEN_HEIGHT - 32; tf.width = SCREEN_HEIGHT; tf.height = 32;
            tf.selectable = false;
            this.addChild(tf);
            this.addEventListener(Event.ENTER_FRAME, update);
        }
        
        public function update(event:Event):void {
            bm.lock();
            var t:int, i:int;
    
            for (i = 0; i &lt; STEP; i++) {
                xAnt += vx * CELL_SIZE;
                yAnt += vy * CELL_SIZE;
                var a:int = bm.getPixel(xAnt, yAnt);
                if (a == 0) {
                    bm.fillRect(new Rectangle(xAnt, yAnt, CELL_SIZE, CELL_SIZE), 0xFFFFFF);
                    t = vx; vx = vy; vy = -t;
                } else {
                    bm.fillRect(new Rectangle(xAnt, yAnt, CELL_SIZE, CELL_SIZE), 0x000000);
            t = vy; vy = vx; vx = -t;
                }
                bm.unlock();
                if (xAnt &lt;= CELL_SIZE || xAnt &gt;= SCREEN_WIDTH - CELL_SIZE ||
                    yAnt &lt;= CELL_SIZE || yAnt &gt;= SCREEN_HEIGHT - CELL_SIZE) {
                    this.removeEventListener(Event.ENTER_FRAME, update);
                    break;
                }
                count++;
                tf.text = &quot;Step: &quot;+count;
            }
        }
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9380/addtag/" class="addtag" id="addtag_9380">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/actionscript/">
		ActionScript
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9380/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9380/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9380"
  >-</span><span
  class="button yellow"
  id="rating_z_9380"
  >0</span><span 
  class="button green"
  id="rating_p_9380"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9380/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9381">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/100/" target="_top">konn</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9381/">#9381</a>(<script language="JavaScript">print_time(new Date("2009/07/16 18:36 GMT"));</script><noscript>2009/07/16 18:36 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Ruby でシンプルに書いてみました。</p>
<p>入力された数字の分だけどんどん世代を進めます。qが入力されたら終わりです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#</span>
<span class="c1">#  World.rb</span>
<span class="c1">#  iLangAnt</span>
<span class="c1">#</span>
<span class="c1">#  Created by 石井 大海 on 09/07/17.</span>
<span class="c1">#  Copyright (c) 2009 __MyCompanyName__. All rights reserved.</span>
<span class="c1">#</span>

<span class="k">class</span> <span class="nc">Ant</span>
  <span class="kp">attr_reader</span> <span class="ss">:world</span><span class="p">,</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:generation</span>

  <span class="k">def</span> <span class="nf">pos</span><span class="p">()</span>
    <span class="k">return</span> <span class="o">[</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">]</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">world</span><span class="o">=</span><span class="no">World</span><span class="o">.</span><span class="n">new</span><span class="p">,</span> <span class="n">pos_x</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">pos_y</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
    <span class="vi">@world</span> <span class="o">=</span> <span class="n">world</span>
    <span class="vi">@x</span> <span class="o">=</span> <span class="n">pos_x</span>
    <span class="vi">@y</span> <span class="o">=</span> <span class="n">pos_y</span>
    <span class="vi">@direction</span> <span class="o">=</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">]</span>
    <span class="vi">@generation</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">position</span><span class="p">()</span>
    <span class="vi">@world</span><span class="o">.</span><span class="n">at</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span> <span class="vi">@y</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">step</span><span class="p">()</span>
    <span class="vi">@x</span> <span class="o">+=</span> <span class="vi">@direction</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
    <span class="vi">@y</span> <span class="o">+=</span> <span class="vi">@direction</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
    <span class="k">return</span> <span class="kp">nil</span> <span class="k">unless</span> <span class="n">position</span><span class="p">()</span>
    <span class="n">position</span><span class="o">.</span><span class="n">toggle</span><span class="p">()</span>
    <span class="k">if</span> <span class="vi">@world</span><span class="o">.</span><span class="n">black?</span><span class="p">(</span><span class="vi">@x</span><span class="p">,</span><span class="vi">@y</span><span class="p">)</span>
      <span class="vi">@direction</span> <span class="o">=</span> <span class="o">[-</span><span class="vi">@direction</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="vi">@direction</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span>
    <span class="k">else</span>
      <span class="vi">@direction</span> <span class="o">=</span> <span class="o">[</span><span class="vi">@direction</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="o">-</span><span class="vi">@direction</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span>
    <span class="k">end</span>
    <span class="vi">@generation</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">class</span> <span class="nc">World</span>
  <span class="kp">attr_reader</span> <span class="ss">:height</span><span class="p">,</span> <span class="ss">:width</span>

  <span class="k">class</span> <span class="o">&lt;&lt;</span><span class="nb">self</span>
    <span class="k">def</span> <span class="nf">define_block_delegate</span><span class="p">(</span><span class="n">mtd</span><span class="p">)</span>
      <span class="n">define_method</span><span class="p">(</span><span class="n">mtd</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">|</span>
        <span class="n">at</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">.</span><span class="n">__send__</span><span class="p">(</span><span class="n">mtd</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">height</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">wrap</span><span class="o">=</span><span class="kp">true</span><span class="p">)</span>
    <span class="vi">@world</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">height</span><span class="p">){</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">width</span><span class="p">){</span> <span class="no">Block</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span> <span class="p">}</span>
    <span class="vi">@height</span><span class="p">,</span> <span class="vi">@width</span> <span class="o">=</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span>
    <span class="vi">@wrap</span> <span class="o">=</span> <span class="n">wrap</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">at</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">unless</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@height</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="vi">@width</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
      <span class="k">if</span> <span class="vi">@wrap</span>
        <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">%</span> <span class="n">width</span><span class="p">,</span> <span class="n">y</span> <span class="o">%</span> <span class="n">height</span>
      <span class="k">else</span>
        <span class="k">return</span> <span class="kp">nil</span>
      <span class="k">end</span>
    <span class="k">end</span>
    <span class="vi">@world</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span>
  <span class="k">end</span>

  <span class="n">define_block_delegate</span> <span class="ss">:white?</span>
  <span class="n">define_block_delegate</span> <span class="ss">:black?</span>
  <span class="n">define_block_delegate</span> <span class="ss">:color</span>

  <span class="k">def</span> <span class="nf">inspect</span><span class="p">()</span>
    <span class="vi">@world</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">r</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:inspect</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">class</span> <span class="nc">Block</span>
  <span class="kp">attr_reader</span> <span class="ss">:state</span>
  <span class="k">alias</span> <span class="n">color</span> <span class="n">state</span>

  <span class="no">WHITE</span> <span class="o">=</span> <span class="kp">true</span>
  <span class="no">BLACK</span> <span class="o">=</span> <span class="kp">false</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">state</span><span class="o">=</span><span class="no">WHITE</span><span class="p">)</span>
    <span class="vi">@state</span> <span class="o">=</span> <span class="n">state</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">toggle</span>
    <span class="vi">@state</span> <span class="o">=</span> <span class="o">!</span><span class="vi">@state</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">set_white</span>
    <span class="vi">@state</span> <span class="o">=</span> <span class="no">WHITE</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">set_black</span>
    <span class="vi">@state</span> <span class="o">=</span> <span class="no">BLACK</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">black?</span>
    <span class="vi">@state</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">white?</span>
    <span class="o">!</span><span class="vi">@state</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">inspect</span><span class="p">()</span>
    <span class="k">case</span> <span class="vi">@state</span>
    <span class="k">when</span> <span class="no">WHITE</span>
      <span class="s2">&quot; □ &quot;</span>
    <span class="k">when</span> <span class="no">BLACK</span>
      <span class="s2">&quot; ■ &quot;</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span>

<span class="k">if</span> <span class="vg">$0</span> <span class="o">==</span> <span class="bp">__FILE__</span>
  <span class="n">w</span><span class="p">,</span> <span class="n">h</span> <span class="p">,</span><span class="o">=</span> <span class="no">ARGV</span>
  <span class="n">w</span> <span class="o">||=</span> <span class="n">h</span> <span class="o">||=</span> <span class="mi">20</span>
  <span class="n">wd</span> <span class="o">=</span> <span class="no">World</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>
  <span class="n">ant</span> <span class="o">=</span> <span class="no">Ant</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">wd</span><span class="p">,</span> <span class="n">w</span><span class="o">*</span><span class="mi">6</span><span class="o">/</span><span class="mi">10</span><span class="p">,</span> <span class="n">h</span><span class="o">*</span><span class="mi">4</span><span class="o">/</span><span class="mi">10</span><span class="p">)</span>
  <span class="k">while</span> <span class="p">(</span><span class="nb">print</span><span class="s2">&quot;&gt; &quot;</span><span class="p">;</span><span class="nb">gets</span><span class="p">)</span>
    <span class="k">break</span> <span class="k">if</span> <span class="vg">$_</span> <span class="o">=~</span> <span class="sr">/^q/i</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span> <span class="k">unless</span> <span class="p">(</span><span class="n">count</span> <span class="o">=</span> <span class="vg">$_</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="n">count</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
      <span class="n">ant</span><span class="o">.</span><span class="n">step</span>
      <span class="nb">p</span> <span class="n">ant</span><span class="o">.</span><span class="n">generation</span>
      <span class="nb">p</span> <span class="n">wd</span>
    <span class="p">}</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9381/addtag/" class="addtag" id="addtag_9381">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9381/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9381/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9381"
  >-</span><span
  class="button yellow"
  id="rating_z_9381"
  >0</span><span 
  class="button green"
  id="rating_p_9381"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9381/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9382">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/646/" target="_top">silverwire</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9382/">#9382</a>(<script language="JavaScript">print_time(new Date("2009/07/17 13:15 GMT"));</script><noscript>2009/07/17 13:15 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自分のマシンは CPUが Pentium 4 (2.66GHz)、メモリが 512MBとリ
ソースが貧弱なためか、うまく動作してくれませんでした。

なので、 #9331を参考に table要素を利用したものへと書き直して
みました。

念のため、以下のブラウザーで動作を確認してあります。

  Firefox 2.0.0.6
  Internet Explorer 6.0.29
  Google Chrome 1.0.154.48
  Opera 9.23
  Safari 3.1.2

Firefox, Google Chrome, Safariは CPUをほとんど食わないのです
が、 Internet Explorerと Operaはともに CPU使用率が高く、動作
も遅かったです。(実装の違いですかね? )</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">style</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span>
        <span class="p">.</span><span class="nx">C_0</span> <span class="p">{</span> <span class="nx">background</span><span class="o">-</span><span class="nx">color</span> <span class="o">:</span> <span class="err">#</span><span class="nx">ffffff</span><span class="o">;</span> <span class="nx">height</span> <span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span> <span class="nx">width</span> <span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span> <span class="p">}</span>
        <span class="p">.</span><span class="nx">C_1</span> <span class="p">{</span> <span class="nx">background</span><span class="o">-</span><span class="nx">color</span> <span class="o">:</span> <span class="err">#</span><span class="mi">000000</span><span class="o">;</span> <span class="nx">height</span> <span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span> <span class="nx">width</span> <span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span> <span class="p">}</span>
    <span class="o">&lt;/</span><span class="nx">style</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
        <span class="nb">Function</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">repeat</span> <span class="o">=</span> 
        <span class="k">function</span> <span class="p">(</span><span class="nx">t</span><span class="o">,</span> <span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">var</span> <span class="nx">_</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
            <span class="k">return</span> <span class="nx">setInterval</span><span class="p">(</span><span class="k">function</span> <span class="p">()</span> <span class="p">{</span> <span class="nx">_</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">o</span><span class="p">);</span> <span class="p">}</span><span class="o">,</span> <span class="nx">t</span><span class="p">);</span>
        <span class="p">};</span>

        <span class="k">var</span> <span class="nx">$</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span> <span class="p">};</span>

        <span class="k">var</span> <span class="nx">USER_AGENT</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
        <span class="k">var</span> <span class="nx">CLASS_NAME</span> <span class="o">=</span> <span class="p">(</span><span class="nx">USER_AGENT</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;msie&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">?</span> <span class="s1">&#39;className&#39;</span> <span class="o">:</span> <span class="s1">&#39;class&#39;</span><span class="o">;</span>

        <span class="k">var</span> <span class="nx">Colony</span> <span class="o">=</span> 
        <span class="k">function</span> <span class="p">(</span><span class="nx">w</span><span class="o">,</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">w</span> <span class="o">=</span> <span class="nx">w</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">h</span> <span class="o">=</span> <span class="nx">h</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">generate</span> <span class="o">=</span> 
            <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">var</span> <span class="nx">i</span><span class="o">,</span> <span class="nx">j</span><span class="o">;</span>

                <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;table border=&quot;0&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;&#39;</span><span class="p">);</span>
                <span class="k">for</span> <span class="p">(</span><span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">h</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;tr&gt;&#39;</span><span class="p">);</span>
                    <span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;td id=&quot;&#39;</span> <span class="o">+</span> <span class="nx">i</span> <span class="o">+</span> <span class="s1">&#39;_&#39;</span> <span class="o">+</span> <span class="nx">j</span> <span class="o">+</span> <span class="s1">&#39;&quot; class=&quot;C_0&quot;&gt;&lt;/td&gt;&#39;</span><span class="p">);</span>
                    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;/tr&gt;&#39;</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&lt;/table&gt;&#39;</span><span class="p">);</span>
            <span class="p">};</span>
        <span class="p">};</span>

        <span class="k">var</span> <span class="nx">Ant</span> <span class="o">=</span> 
        <span class="k">function</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="o">,</span> <span class="nx">w</span><span class="o">,</span> <span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">x</span>  <span class="o">=</span> <span class="nx">x</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">y</span>  <span class="o">=</span> <span class="nx">y</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">dy</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">w</span>  <span class="o">=</span> <span class="nx">w</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">h</span>  <span class="o">=</span> <span class="nx">h</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">move</span> <span class="o">=</span> 
            <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
                <span class="k">var</span> <span class="nx">C</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;_&#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
                <span class="k">var</span> <span class="nx">c</span><span class="o">;</span>
                <span class="k">var</span> <span class="nx">t</span><span class="o">;</span>

                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">w</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">&gt;=</span> <span class="k">this</span><span class="p">.</span><span class="nx">h</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;DEAD END ...&#39;</span><span class="p">);</span>
                    <span class="nx">clearTimeout</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="p">}</span>

                <span class="k">if</span> <span class="p">(</span><span class="nx">c</span> <span class="o">=</span> <span class="p">((</span><span class="nx">C</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="nx">CLASS_NAME</span><span class="p">)).</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">^</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span> <span class="c">// 反転</span>
                    <span class="nx">t</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="o">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">dx</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="o">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">dy</span> <span class="o">=</span> <span class="o">-</span><span class="nx">t</span><span class="o">;</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                    <span class="nx">t</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="o">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">dx</span> <span class="o">=</span> <span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="o">;</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">dy</span> <span class="o">=</span> <span class="nx">t</span><span class="o">;</span>
                <span class="p">}</span>

                <span class="nx">C</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="nx">CLASS_NAME</span><span class="o">,</span> <span class="s1">&#39;C_&#39;</span> <span class="o">+</span> <span class="nx">c</span><span class="p">);</span>

                <span class="k">this</span><span class="p">.</span><span class="nx">x</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dx</span><span class="o">;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">y</span> <span class="o">+=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dy</span><span class="o">;</span>

                <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">move</span><span class="p">.</span><span class="nx">repeat</span><span class="p">(</span><span class="mi">10</span><span class="o">,</span> <span class="k">this</span><span class="p">);</span>
            <span class="p">};</span>
        <span class="p">};</span>
    <span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
        <span class="k">var</span> <span class="nx">W</span> <span class="o">=</span> <span class="mi">100</span><span class="o">,</span> <span class="nx">H</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
        <span class="k">new</span> <span class="nx">Colony</span><span class="p">(</span><span class="nx">W</span><span class="o">,</span> <span class="nx">H</span><span class="p">).</span><span class="nx">generate</span><span class="p">();</span>
        <span class="k">new</span> <span class="nx">Ant</span><span class="p">(</span><span class="mi">50</span><span class="o">,</span> <span class="mi">50</span><span class="o">,</span> <span class="nx">W</span><span class="o">,</span> <span class="nx">H</span><span class="p">).</span><span class="nx">move</span><span class="p">();</span>
    <span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9382/addtag/" class="addtag" id="addtag_9382">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9382/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9382/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9382"
  >-</span><span
  class="button yellow"
  id="rating_z_9382"
  >0</span><span 
  class="button green"
  id="rating_p_9382"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9382/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9383">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9383/">#9383</a>(<script language="JavaScript">print_time(new Date("2009/07/17 13:57 GMT"));</script><noscript>2009/07/17 13:57 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">ant</span><span class="p">(</span><span class="n">world_size</span><span class="p">,</span> <span class="n">x_pos</span> <span class="o">=</span> <span class="n">world_size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">y_pos</span> <span class="o">=</span> <span class="n">world_size</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
  <span class="n">world</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
  <span class="n">generation</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">direc</span> <span class="o">=</span> <span class="p">{};</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="n">world_size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="n">world</span> <span class="o">&lt;&lt;</span>  <span class="o">[</span><span class="kp">true</span><span class="o">]</span> <span class="o">*</span> <span class="n">world_size</span><span class="p">}</span>
  <span class="k">while</span> <span class="kp">true</span>
    <span class="nb">system</span> <span class="s2">&quot;clear&quot;</span>
    <span class="nb">p</span> <span class="n">generation</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">world</span><span class="o">[</span><span class="n">x_pos</span><span class="o">][</span><span class="n">y_pos</span><span class="o">]</span> <span class="o">=</span> <span class="o">!</span><span class="n">world</span><span class="o">[</span><span class="n">x_pos</span><span class="o">][</span><span class="n">y_pos</span><span class="o">]</span>
    <span class="n">world</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">i</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="nb">printf</span><span class="p">(</span><span class="s2">&quot;%s &quot;</span><span class="p">,</span><span class="n">k</span> <span class="p">?</span> <span class="p">:</span><span class="err">□</span> <span class="p">:</span> <span class="p">:</span><span class="err">■</span><span class="p">)}</span>
      <span class="nb">p</span> <span class="s1">&#39;&#39;</span>
    <span class="p">}</span>
    <span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mi">1</span>

    <span class="k">if</span> <span class="n">world</span><span class="o">[</span><span class="n">x_pos</span><span class="o">][</span><span class="n">y_pos</span><span class="o">]</span> <span class="k">then</span>
      <span class="n">direc</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span><span class="p">,</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span> <span class="o">=</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span><span class="p">,</span> <span class="o">-</span><span class="n">direc</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span>
    <span class="k">else</span>
      <span class="n">direc</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span><span class="p">,</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">direc</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span><span class="p">,</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span>
    <span class="k">end</span>
    
    <span class="n">x_pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">x_pos</span> <span class="o">+</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:x</span><span class="o">]</span><span class="p">)</span> <span class="o">%</span> <span class="n">world_size</span>
    <span class="n">y_pos</span> <span class="o">=</span> <span class="p">(</span><span class="n">y_pos</span> <span class="o">+</span> <span class="n">direc</span><span class="o">[</span><span class="ss">:y</span><span class="o">]</span><span class="p">)</span> <span class="o">%</span> <span class="n">world_size</span>
    
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">world_size</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">ant</span><span class="p">(</span><span class="n">world_size</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9383/addtag/" class="addtag" id="addtag_9383">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/ruby1.9.0/">ruby1.9.0</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9383/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9383/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9383"
  >-</span><span
  class="button yellow"
  id="rating_z_9383"
  >0</span><span 
  class="button green"
  id="rating_p_9383"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9383/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9387">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/833/" target="_top">mattsan</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9387/">#9387</a>(<script language="JavaScript">print_time(new Date("2009/07/18 01:11 GMT"));</script><noscript>2009/07/18 01:11 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>OpenGL/GLUTで。</p>
<p>ウィンドウの表示と描画がコードの半分以上orz。</p>
<p>作成はMac OS Xでしています。他の環境の場合には調整してください。</p>
<p></p>
<p>コンパイルは、</p>
<p>g++ -ansi -Wall -framework OpenGL -framework GLUT -framework Foundation -o doukaku276 doukaku276.cpp</p>
<p></p>
<p></p>
<p>終了条件はないので、ESCキーかQキーで終了させてください。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;bitset&gt;</span>
<span class="cp">#include &lt;GLUT/glut.h&gt;</span>

<span class="k">class</span> <span class="nc">Field</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Field</span><span class="p">()</span> <span class="p">{}</span>

    <span class="k">virtual</span> <span class="kt">bool</span> <span class="k">operator</span> <span class="p">()</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="kt">void</span> <span class="n">unset</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="kt">int</span> <span class="n">Width</span><span class="p">,</span> <span class="kt">int</span> <span class="n">Height</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">ConcreteField</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Field</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">ConcreteField</span><span class="p">()</span> <span class="o">:</span> <span class="n">bits_</span><span class="p">()</span> <span class="p">{}</span>

    <span class="kt">bool</span> <span class="k">operator</span> <span class="p">()</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">bits_</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="n">Width</span> <span class="o">+</span> <span class="n">x</span><span class="p">];</span> <span class="p">}</span>
    <span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="n">bits_</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="n">Width</span> <span class="o">+</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">void</span> <span class="n">unset</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="p">{</span> <span class="n">bits_</span><span class="p">[</span><span class="n">y</span> <span class="o">*</span> <span class="n">Width</span> <span class="o">+</span> <span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">bitset</span><span class="o">&lt;</span><span class="n">Width</span> <span class="o">*</span> <span class="n">Height</span><span class="o">&gt;</span> <span class="n">bits_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Direction</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">North</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">East</span>  <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">South</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">West</span>  <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>

    <span class="n">Direction</span><span class="p">(</span><span class="kt">int</span> <span class="n">dir</span><span class="p">)</span> <span class="o">:</span> <span class="n">dir_</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">set</span><span class="p">(</span><span class="kt">int</span> <span class="n">dir</span><span class="p">)</span> <span class="p">{</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">dir</span><span class="p">;</span> <span class="p">}</span>
    <span class="kt">int</span> <span class="n">get</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">dir_</span><span class="p">;</span> <span class="p">}</span>

    <span class="kt">void</span> <span class="n">turnRight</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">dir_</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="n">dir_</span> <span class="o">%=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">turnLeft</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">dir_</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
        <span class="n">dir_</span> <span class="o">%=</span> <span class="mi">4</span><span class="p">;</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">dir_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Ant</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">Ant</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="n">Direction</span> <span class="n">direction</span><span class="p">)</span> <span class="o">:</span> <span class="n">x_</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">y_</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="n">direction_</span><span class="p">(</span><span class="n">direction</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="n">move</span><span class="p">(</span><span class="n">Field</span><span class="o">&amp;</span> <span class="n">field</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">field</span><span class="p">(</span><span class="n">x_</span><span class="p">,</span> <span class="n">y_</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">field</span><span class="p">.</span><span class="n">unset</span><span class="p">(</span><span class="n">x_</span><span class="p">,</span> <span class="n">y_</span><span class="p">);</span>
            <span class="n">direction_</span><span class="p">.</span><span class="n">turnRight</span><span class="p">();</span>
            <span class="n">moveForward</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">field</span><span class="p">.</span><span class="n">set</span><span class="p">(</span><span class="n">x_</span><span class="p">,</span> <span class="n">y_</span><span class="p">);</span>
            <span class="n">direction_</span><span class="p">.</span><span class="n">turnLeft</span><span class="p">();</span>
            <span class="n">moveForward</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="n">moveForward</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">direction_</span><span class="p">.</span><span class="n">get</span><span class="p">())</span>
        <span class="p">{</span>
        <span class="k">case</span> <span class="n">Direction</span><span class="o">::</span><span class="nl">North:</span> <span class="o">--</span><span class="n">y_</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">Direction</span><span class="o">::</span><span class="nl">East:</span>  <span class="o">++</span><span class="n">x_</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">Direction</span><span class="o">::</span><span class="nl">South:</span> <span class="o">++</span><span class="n">y_</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="n">Direction</span><span class="o">::</span><span class="nl">West:</span>  <span class="o">--</span><span class="n">x_</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span>                     <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span>       <span class="n">x_</span><span class="p">;</span>
    <span class="kt">int</span>       <span class="n">y_</span><span class="p">;</span>
    <span class="n">Direction</span> <span class="n">direction_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">Interval</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">Width</span>    <span class="o">=</span> <span class="mi">320</span><span class="p">;</span>
<span class="k">static</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">Height</span>   <span class="o">=</span> <span class="mi">240</span><span class="p">;</span>

<span class="k">static</span> <span class="n">ConcreteField</span><span class="o">&lt;</span><span class="n">Width</span><span class="p">,</span> <span class="n">Height</span><span class="o">&gt;</span> <span class="n">field</span><span class="p">;</span>
<span class="k">static</span> <span class="n">Ant</span>                          <span class="n">ant</span><span class="p">(</span><span class="n">Width</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Height</span> <span class="o">/</span> <span class="mi">2</span><span class="p">,</span> <span class="n">Direction</span><span class="o">::</span><span class="n">North</span><span class="p">);</span>

<span class="kt">void</span> <span class="n">display</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glClear</span><span class="p">(</span><span class="n">GL_COLOR_BUFFER_BIT</span><span class="p">);</span>

    <span class="k">static</span> <span class="k">const</span> <span class="n">GLdouble</span> <span class="n">black</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">0.0</span> <span class="p">};</span>
    <span class="n">glColor3dv</span><span class="p">(</span><span class="n">black</span><span class="p">);</span>

    <span class="n">glBegin</span><span class="p">(</span><span class="n">GL_POINTS</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">Height</span><span class="p">;</span> <span class="o">++</span><span class="n">y</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">Width</span><span class="p">;</span> <span class="o">++</span><span class="n">x</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">field</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
            <span class="p">{</span>
                <span class="n">glVertex2f</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">glEnd</span><span class="p">();</span>

    <span class="n">glutSwapBuffers</span><span class="p">();</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">resize</span><span class="p">(</span><span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">glViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">);</span>
    <span class="n">glLoadIdentity</span><span class="p">();</span>
    <span class="n">glOrtho</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="n">w</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">,</span> <span class="n">h</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">0.5</span><span class="p">,</span> <span class="o">-</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">key</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
    <span class="p">{</span>
    <span class="k">case</span> <span class="sc">&#39;q&#39;</span><span class="o">:</span>
    <span class="k">case</span> <span class="sc">&#39;Q&#39;</span><span class="o">:</span>
    <span class="k">case</span> <span class="sc">&#39;\033&#39;</span><span class="o">:</span>
        <span class="n">std</span><span class="o">::</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>

    <span class="k">default</span><span class="o">:</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">timer</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ant</span><span class="p">.</span><span class="n">move</span><span class="p">(</span><span class="n">field</span><span class="p">);</span>
    <span class="n">display</span><span class="p">();</span>
    <span class="n">glutTimerFunc</span><span class="p">(</span><span class="n">Interval</span><span class="p">,</span> <span class="n">timer</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">initWindow</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">glutInitWindowPosition</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
    <span class="n">glutInitWindowSize</span><span class="p">(</span><span class="n">Width</span><span class="p">,</span> <span class="n">Height</span><span class="p">);</span>
    <span class="n">glutInit</span><span class="p">(</span><span class="o">&amp;</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">glutInitDisplayMode</span><span class="p">(</span><span class="n">GLUT_RGBA</span> <span class="o">|</span> <span class="n">GLUT_DOUBLE</span><span class="p">);</span>

    <span class="n">glutCreateWindow</span><span class="p">(</span><span class="s">&quot;doukaku#276&quot;</span><span class="p">);</span>

    <span class="n">glClearColor</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">initEvent</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">glutDisplayFunc</span><span class="p">(</span><span class="n">display</span><span class="p">);</span>
    <span class="n">glutReshapeFunc</span><span class="p">(</span><span class="n">resize</span><span class="p">);</span>
    <span class="n">glutKeyboardFunc</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="n">glutTimerFunc</span><span class="p">(</span><span class="n">Interval</span><span class="p">,</span> <span class="n">timer</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="n">initWindow</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">);</span>
    <span class="n">initEvent</span><span class="p">();</span>

    <span class="n">glutMainLoop</span><span class="p">();</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9387/addtag/" class="addtag" id="addtag_9387">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/GLUT/">GLUT</a>
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/OpenGL/">OpenGL</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9387/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9387/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9387"
  >-</span><span
  class="button yellow"
  id="rating_z_9387"
  >0</span><span 
  class="button green"
  id="rating_p_9387"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100506231016/http://ja.doukaku.org/comment/9387/">
    1
    reply
  </a>

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9387/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment9402">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/833/" target="_top">mattsan</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9402/">#9402</a>(<script language="JavaScript">print_time(new Date("2009/07/21 07:15 GMT"));</script><noscript>2009/07/21 07:15 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Haskellに翻訳。<br/>C++からの「翻訳」なのでHaskellらしくないかもしれません。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Graphics</span><span class="o">.</span><span class="n">UI</span><span class="o">.</span><span class="n">GLUT</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Exception</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Exit</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">IORef</span>

<span class="nv">interval</span>     <span class="o">=</span> <span class="mi">0</span>
<span class="nv">windowWidth</span>  <span class="o">=</span> <span class="mi">320</span><span class="o">::</span><span class="n">GLsizei</span>
<span class="nv">windowHeight</span> <span class="o">=</span> <span class="mi">240</span><span class="o">::</span><span class="n">GLsizei</span>

<span class="kr">data</span> <span class="n">Direction</span> <span class="o">=</span> <span class="n">North</span> <span class="o">|</span> <span class="n">East</span> <span class="o">|</span> <span class="n">South</span> <span class="o">|</span> <span class="n">West</span> <span class="kr">deriving</span> <span class="n">Enum</span>
<span class="kr">data</span> <span class="n">Ant</span> <span class="o">=</span> <span class="n">Ant</span> <span class="n">Position</span> <span class="n">Direction</span>

<span class="nv">turnRight</span> <span class="o">::</span> <span class="n">Direction</span> <span class="o">-&gt;</span> <span class="n">Direction</span>
<span class="nv">turnRight</span> <span class="nv">d</span> <span class="o">=</span> <span class="nv">toEnum</span> <span class="p">(((</span><span class="nv">fromEnum</span> <span class="nv">d</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="mi">4</span><span class="p">)</span>

<span class="nv">turnLeft</span> <span class="o">::</span> <span class="n">Direction</span> <span class="o">-&gt;</span> <span class="n">Direction</span>
<span class="nv">turnLeft</span> <span class="nv">d</span> <span class="o">=</span> <span class="nv">toEnum</span> <span class="p">(((</span><span class="nv">fromEnum</span> <span class="nv">d</span><span class="p">)</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="mi">4</span><span class="p">)</span>

<span class="nv">initialEnv</span> <span class="o">::</span> <span class="p">(</span><span class="n">Ant</span><span class="p">,</span> <span class="p">[</span><span class="n">Position</span><span class="p">])</span>
<span class="nv">initialEnv</span> <span class="o">=</span> <span class="p">(</span><span class="n">Ant</span> <span class="p">(</span><span class="n">Position</span> <span class="p">(</span><span class="nv">windowWidth</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="nv">windowHeight</span> <span class="p">`</span><span class="nv">div</span><span class="p">`</span> <span class="mi">2</span><span class="p">))</span> <span class="n">East</span><span class="p">,</span> <span class="p">[])</span>

<span class="nv">convd</span> <span class="o">::</span> <span class="p">(</span><span class="n">Integral</span> <span class="nv">a</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="n">GLdouble</span>
<span class="nv">convd</span> <span class="o">=</span> <span class="nv">fromInteger</span><span class="o">.</span><span class="nv">toInteger</span>

<span class="nv">forward</span> <span class="p">(</span><span class="n">Position</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="n">North</span> <span class="o">=</span> <span class="n">Position</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="nv">forward</span> <span class="p">(</span><span class="n">Position</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="n">East</span>  <span class="o">=</span> <span class="n">Position</span> <span class="p">(</span><span class="nv">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span>
<span class="nv">forward</span> <span class="p">(</span><span class="n">Position</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="n">South</span> <span class="o">=</span> <span class="n">Position</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="nv">forward</span> <span class="p">(</span><span class="n">Position</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="n">West</span>  <span class="o">=</span> <span class="n">Position</span> <span class="p">(</span><span class="nv">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span>

<span class="nv">draw</span> <span class="nv">env</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span> <span class="nv">ps</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">readIORef</span> <span class="nv">env</span>
  <span class="nv">clearColor</span> <span class="o">$=</span> <span class="n">Color4</span> <span class="mf">1.0</span> <span class="mf">1.0</span> <span class="mf">1.0</span> <span class="mf">1.0</span>
  <span class="nv">clear</span> <span class="p">[</span><span class="n">ColorBuffer</span><span class="p">]</span>
  <span class="nv">color</span> <span class="o">$</span> <span class="n">Color3</span> <span class="p">(</span><span class="mf">0.0</span><span class="o">::</span><span class="n">Double</span><span class="p">)</span> <span class="mf">0.0</span> <span class="mf">0.0</span>
  <span class="nv">renderPrimitive</span> <span class="n">Points</span> <span class="o">$</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="err">¥</span> <span class="p">(</span><span class="n">Position</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">vertex</span> <span class="o">$</span> <span class="n">Vertex2</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span> <span class="nv">ps</span>
  <span class="nv">swapBuffers</span>

<span class="nv">update</span> <span class="p">(</span><span class="n">Ant</span> <span class="nv">pos</span> <span class="nv">dir</span><span class="p">,</span> <span class="nv">ps</span><span class="p">)</span> <span class="o">=</span>
  <span class="kr">if</span> <span class="nv">elem</span> <span class="nv">pos</span> <span class="nv">ps</span>
    <span class="kr">then</span> <span class="p">(</span><span class="n">Ant</span> <span class="p">(</span><span class="nv">forward</span> <span class="nv">pos</span> <span class="p">(</span><span class="nv">turnRight</span> <span class="nv">dir</span><span class="p">))</span> <span class="p">(</span><span class="nv">turnRight</span> <span class="nv">dir</span><span class="p">),</span> <span class="p">[</span><span class="nv">p</span> <span class="o">|</span> <span class="nv">p</span> <span class="o">&lt;-</span> <span class="nv">ps</span><span class="p">,</span> <span class="nv">p</span> <span class="o">/=</span> <span class="nv">pos</span><span class="p">])</span>
    <span class="kr">else</span> <span class="p">(</span><span class="n">Ant</span> <span class="p">(</span><span class="nv">forward</span> <span class="nv">pos</span> <span class="p">(</span><span class="nv">turnLeft</span> <span class="nv">dir</span><span class="p">))</span> <span class="p">(</span><span class="nv">turnLeft</span> <span class="nv">dir</span><span class="p">),</span> <span class="nv">pos</span><span class="o">:</span><span class="nv">ps</span><span class="p">)</span>

<span class="c1">-- event handlers</span>

<span class="nv">display</span> <span class="nv">env</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">draw</span> <span class="nv">env</span>

<span class="nv">reshape</span> <span class="p">(</span><span class="n">Size</span> <span class="nv">w</span> <span class="nv">h</span><span class="p">)</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">viewport</span> <span class="o">$=</span> <span class="p">(</span><span class="n">Position</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">,</span> <span class="n">Size</span> <span class="nv">w</span> <span class="nv">h</span><span class="p">)</span>
  <span class="nv">loadIdentity</span>
  <span class="nv">ortho</span> <span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">)</span> <span class="p">((</span><span class="nv">convd</span> <span class="nv">w</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">((</span><span class="nv">convd</span> <span class="nv">h</span><span class="p">)</span> <span class="o">-</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">)</span> <span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)</span> <span class="p">(</span><span class="mf">1.0</span><span class="p">)</span>

<span class="nv">keyboardMouse</span> <span class="nv">key</span> <span class="nv">keystate</span> <span class="nv">modifiers</span> <span class="nv">position</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="kr">case</span> <span class="nv">key</span> <span class="kr">of</span>
    <span class="n">Char</span> <span class="sc">&#39;q&#39;</span> <span class="o">-&gt;</span> <span class="nv">throwIO</span> <span class="o">$</span> <span class="n">ExitException</span> <span class="n">ExitSuccess</span>
    <span class="kr">_</span>        <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">()</span>

<span class="nv">timer</span> <span class="nv">env</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">modifyIORef</span> <span class="nv">env</span> <span class="o">$</span> <span class="nv">update</span>
  <span class="nv">draw</span> <span class="nv">env</span>
  <span class="nv">addTimerCallback</span> <span class="nv">interval</span> <span class="o">$</span> <span class="nv">timer</span> <span class="nv">env</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">env</span> <span class="o">&lt;-</span> <span class="nv">newIORef</span> <span class="nv">initialEnv</span>
  <span class="nv">getArgsAndInitialize</span>
  <span class="nv">initialDisplayMode</span>    <span class="o">$=</span> <span class="p">[</span><span class="n">RGBAMode</span><span class="p">,</span> <span class="n">DoubleBuffered</span><span class="p">]</span>
  <span class="nv">initialWindowPosition</span> <span class="o">$=</span> <span class="n">Position</span> <span class="mi">100</span> <span class="mi">100</span>
  <span class="nv">initialWindowSize</span>     <span class="o">$=</span> <span class="n">Size</span> <span class="nv">windowWidth</span> <span class="nv">windowHeight</span>
  <span class="nv">createWindow</span> <span class="s">&quot;doukaku#276&quot;</span>
  <span class="nv">displayCallback</span>       <span class="o">$=</span> <span class="nv">display</span> <span class="nv">env</span>
  <span class="nv">reshapeCallback</span>       <span class="o">$=</span> <span class="n">Just</span> <span class="nv">reshape</span>
  <span class="nv">keyboardMouseCallback</span> <span class="o">$=</span> <span class="n">Just</span> <span class="nv">keyboardMouse</span>
  <span class="nv">addTimerCallback</span> <span class="nv">interval</span> <span class="o">$</span> <span class="nv">timer</span> <span class="nv">env</span>
  <span class="nv">mainLoop</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9402/addtag/" class="addtag" id="addtag_9402">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/GLUT/">GLUT</a>
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/OpenGL/">OpenGL</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9402/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9402/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9402"
  >-</span><span
  class="button yellow"
  id="rating_z_9402"
  >0</span><span 
  class="button green"
  id="rating_p_9402"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100506231016/http://ja.doukaku.org/comment/9387/"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100506231016/http://ja.doukaku.org/comment/9402/root/"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9402/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment9388">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/913/" target="_top">nattou_curry</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9388/">#9388</a>(<script language="JavaScript">print_time(new Date("2009/07/18 03:17 GMT"));</script><noscript>2009/07/18 03:17 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>Excel VBAにて、ごくシンプルに。</p>
<p></p>
<p>Excelを以下のように調整すると、実行結果が見やすくなります。</p>
<ul>
<li>
行の高さと列の幅を調整して、全てのセルを正方形にする。
</li>
<li>表示倍率を小さくして、なるべく多くのセルが画面内に収まるようにする</li>
</ul>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72</pre></td><td class="code"><div class="highlight"><pre>Option Explicit

&#39;// [定数] 蟻の方向
Const DIR_UP = 0        &#39;上向き
Const DIR_RIGHT = 1     &#39;右向き
Const DIR_DOWN = 2      &#39;下向き
Const DIR_LEFT = 3      &#39;左向き

&#39;// [定数] 色
Const COLOR_WHITE = &amp;HFFFFFF    &#39;白
Const COLOR_BLACK = &amp;H0         &#39;黒

&#39;// ラングトンの蟻
Sub Langtons_ant()
    Dim r_Ant As Long       &#39;// 蟻の位置(行番号)
    Dim c_Ant As Long       &#39;// 蟻の位置(行番号)
    Dim dir_Ant As Integer  &#39;// 蟻の方向
    
    &#39;////////////////////////////////////////////////////////////////////
    &#39; 初期処理
    &#39;////////////////////////////////////////////////////////////////////
    
    &#39;// 蟻の位置を決める。
    r_Ant = 50
    c_Ant = 50
    &#39;// 蟻の方向を決める。
    dir_Ant = DIR_UP    &#39;上向き
    
    &#39;////////////////////////////////////////////////////////////////////
    &#39; 主処理
    &#39;////////////////////////////////////////////////////////////////////
    
    &#39;// 蟻がシート内にいる間、以下を繰り返す。
    Do While 0 &lt; c_Ant And c_Ant &lt;= Columns.Count _
            And 0 &lt; r_Ant And r_Ant &lt;= Rows.Count
    
        &#39;// 蟻がいるマスの色による場合分け。
        If Cells(r_Ant, c_Ant).Interior.Color = COLOR_BLACK Then
            &#39;// マスの色が黒:
            
            &#39;// 蟻を90°右に方向転換する。
            dir_Ant = (dir_Ant + 1) Mod 4
            
            &#39;// マスの色を白に変える。
            Cells(r_Ant, c_Ant).Interior.Color = COLOR_WHITE
        Else
            &#39;// マスの色が白:
            
            &#39;// 蟻を90°左に方向転換する。
            dir_Ant = (dir_Ant + 3) Mod 4
            
            &#39;// マスの色を黒に変える。
            Cells(r_Ant, c_Ant).Interior.Color = COLOR_BLACK
        End If
        
        &#39;// 蟻を一歩進める。
        Select Case dir_Ant
            Case DIR_UP
                &#39;// 蟻が上向き:
                r_Ant = r_Ant - 1
            Case DIR_RIGHT
                &#39;// 蟻が右向き:
                c_Ant = c_Ant + 1
            Case DIR_DOWN
                &#39;// 蟻が下向き:
                r_Ant = r_Ant + 1
            Case DIR_LEFT
                &#39;// 蟻が左向き:
                c_Ant = c_Ant - 1
        End Select
    Loop
End Sub
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9388/addtag/" class="addtag" id="addtag_9388">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/VBA/">VBA</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9388/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9388/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9388"
  >-</span><span
  class="button yellow"
  id="rating_z_9388"
  >0</span><span 
  class="button green"
  id="rating_p_9388"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9388/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9389">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/913/" target="_top">nattou_curry</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9389/">#9389</a>(<script language="JavaScript">print_time(new Date("2009/07/18 03:59 GMT"));</script><noscript>2009/07/18 03:59 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>Excel VBAにて、複数の蟻が動くようにしました。(#9388の変更)</p>
<p></p>
<p>Excelを以下のように調整すると、実行結果が見やすくなります。</p>
<ul>
<li>
行の高さと列の幅を調整して、全てのセルを正方形にする。
</li>
<li>表示倍率を小さくして、なるべく多くのセルが画面内に収まるようにする。</li>
</ul>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136</pre></td><td class="code"><div class="highlight"><pre>Option Explicit

&#39;// [定数] 蟻の方向
Const DIR_UP = 0        &#39;上向き
Const DIR_RIGHT = 1     &#39;右向き
Const DIR_DOWN = 2      &#39;下向き
Const DIR_LEFT = 3      &#39;左向き

&#39;// [定数] 色
Const COLOR_WHITE = &amp;HFFFFFF    &#39;白
Const COLOR_BLACK = &amp;H0         &#39;黒

&#39;// [構造体] 蟻
Type typ_Ant
    r As Long       &#39;// 蟻の位置(行番号)
    c As Long       &#39;// 蟻の位置(列番号)
    dir As Long     &#39;// 蟻の方向
    died As Boolean &#39;// 死亡フラグ
End Type

&#39;// ラングトンの蟻(複数版)
Sub Langtons_ant_s()

    Dim ants() As typ_Ant   &#39;蟻
    Dim i As Integer        &#39;インデックス
    Dim AllDied As Boolean  &#39;全ての蟻が死亡したか？
    
    &#39;////////////////////////////////////////////////////////////////////
    &#39; 初期処理
    &#39;////////////////////////////////////////////////////////////////////
    
    &#39;// 蟻の数を決める。
    ReDim ants(5)
    
    &#39;// 蟻1匹目
    ants(0).r = 70
    ants(0).c = 100
    ants(0).dir = DIR_UP
    
    &#39;// 蟻2匹目
    ants(1).r = 100
    ants(1).c = 100
    ants(1).dir = DIR_UP
    
    &#39;// 蟻3匹目
    ants(2).r = 30
    ants(2).c = 120
    ants(2).dir = DIR_RIGHT
    
    &#39;// 蟻4匹目
    ants(3).r = 40
    ants(3).c = 90
    ants(3).dir = DIR_DOWN
    
    &#39;// 蟻5匹目
    ants(4).r = 40
    ants(4).c = 10
    ants(4).dir = DIR_LEFT
    
    &#39;// 蟻6匹目
    ants(5).r = 70
    ants(5).c = 100
    ants(5).dir = DIR_UP
    
    &#39;////////////////////////////////////////////////////////////////////
    &#39; 主処理
    &#39;////////////////////////////////////////////////////////////////////
    
    &#39;// いずれかの蟻が生きている間、以下を繰り返す。
    Do While True
        AllDied = True
        For i = 0 To UBound(ants)
            If Not ants(i).died Then
                AllDied = False
                Exit For
            End If
        Next
        If AllDied Then
            &#39;// 全ての蟻が死亡している。
            
            &#39;// 処理を中断する。
            Exit Do
        End If
        
        &#39;// 生きているすべての蟻について、以下を繰り返す。
        For i = 0 To UBound(ants)
            If Not ants(i).died Then
                
                &#39;// 蟻がいるマスの色による場合分け。
                If Cells(ants(i).r, ants(i).c).Interior.Color = COLOR_BLACK Then
                    &#39;// マスの色が黒:
                    
                    &#39;// 蟻を90°右に方向転換する。
                    ants(i).dir = (ants(i).dir + 1) Mod 4
                    
                    &#39;// マスの色を白に変える。
                    Cells(ants(i).r, ants(i).c).Interior.Color = COLOR_WHITE
                Else
                    &#39;// マスの色が白:
                    
                    &#39;// 蟻を90°左に方向転換する。
                    ants(i).dir = (ants(i).dir + 3) Mod 4
                    
                    &#39;// マスの色を黒に変える。
                    Cells(ants(i).r, ants(i).c).Interior.Color = COLOR_BLACK
                End If
                
                &#39;// 蟻を一歩進める。
                Select Case ants(i).dir
                    Case DIR_UP
                        &#39;// 蟻が上向き:
                        ants(i).r = ants(i).r - 1
                    Case DIR_RIGHT
                        &#39;// 蟻が右向き:
                        ants(i).c = ants(i).c + 1
                    Case DIR_DOWN
                        &#39;// 蟻が下向き:
                        ants(i).r = ants(i).r + 1
                    Case DIR_LEFT
                        &#39;// 蟻が左向き:
                        ants(i).c = ants(i).c - 1
                End Select
                
                &#39;// 蟻がシート内にいることを確認する。
                If Not (0 &lt; ants(i).c And ants(i).c &lt;= Columns.Count _
                        And 0 &lt; ants(i).r And ants(i).r &lt;= Rows.Count) Then
                    &#39;// シート内にいない:
        
                    &#39;// 蟻の死亡フラグをオンにする。
                    ants(i).died = True
                End If
            
            End If
        Next
    Loop
End Sub
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9389/addtag/" class="addtag" id="addtag_9389">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/VBA/">VBA</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9389/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9389/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9389"
  >-</span><span
  class="button yellow"
  id="rating_z_9389"
  >0</span><span 
  class="button green"
  id="rating_p_9389"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9389/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9390">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1045/" target="_top">ワサビ</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9390/">#9390</a>(<script language="JavaScript">print_time(new Date("2009/07/18 06:50 GMT"));</script><noscript>2009/07/18 06:50 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  F#&nbsp;1.9.6.16&nbsp;で作成しました。<br/>初期状態の背景色を白黒選択可能にしました。<br/>アリの初期状態の向きはランダムにしています。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></td><td class="code"><div class="highlight"><pre><span class="kr">open</span> <span class="n">System</span>
<span class="kr">open</span> <span class="n">System</span><span class="k">.</span><span class="n">Windows</span><span class="k">.</span><span class="n">Forms</span>
<span class="kr">open</span> <span class="n">System</span><span class="k">.</span><span class="n">Drawing</span>

<span class="kr">let</span> <span class="n">size</span> <span class="k">=</span> <span class="mi">300</span>
<span class="kr">let</span> <span class="k">(</span><span class="n">white</span><span class="k">,</span> <span class="n">black</span><span class="k">)</span> <span class="k">=</span> <span class="k">(-</span><span class="mi">1</span><span class="k">,</span> <span class="mi">1</span><span class="k">)</span>
<span class="kr">let</span> <span class="n">dirTable</span> <span class="k">=</span> <span class="k">[|(</span><span class="mi">1</span><span class="k">,</span> <span class="mi">0</span><span class="k">);</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="mi">1</span><span class="k">);</span> <span class="k">(-</span><span class="mi">1</span><span class="k">,</span> <span class="mi">0</span><span class="k">);</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="k">-</span><span class="mi">1</span><span class="k">)|]</span>
<span class="kr">let</span> <span class="n">dirTextTable</span> <span class="k">=</span> <span class="k">[|</span><span class="s2">&quot;右&quot;</span><span class="k">;</span> <span class="s2">&quot;下&quot;</span><span class="k">;</span> <span class="s2">&quot;左&quot;</span><span class="k">;</span> <span class="s2">&quot;上&quot;</span><span class="k">|]</span>

<span class="kr">type</span> <span class="n">Langton&#39;sAntForm</span><span class="k">()</span> <span class="kr">as</span> <span class="n">this</span> <span class="k">=</span>
    <span class="kr">inherit</span> <span class="n">Form</span><span class="k">()</span>
    <span class="k">[&lt;</span><span class="n">DefaultValue</span><span class="k">&gt;]</span>
    <span class="kr">val</span> <span class="kr">mutable</span> <span class="n">ant</span> <span class="k">:</span> <span class="n">int</span> <span class="k">-&gt;</span> <span class="n">int</span><span class="k">[,]</span> <span class="k">-&gt;</span> <span class="n">Async</span><span class="k">&lt;</span><span class="n">unit</span><span class="k">&gt;</span>
    <span class="kr">let</span> <span class="n">bitmap</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Bitmap</span><span class="k">(</span><span class="n">size</span><span class="k">,</span> <span class="n">size</span><span class="k">)</span>
    <span class="kr">let</span> <span class="n">picture</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">PictureBox</span><span class="k">(</span><span class="n">Image</span> <span class="k">=</span> <span class="n">bitmap</span><span class="k">,</span> <span class="n">Size</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Size</span><span class="k">(</span><span class="n">size</span><span class="k">,</span> <span class="n">size</span><span class="k">),</span> <span class="n">Location</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Point</span><span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="mi">30</span><span class="k">))</span>
    <span class="kr">let</span> <span class="n">button</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Button</span><span class="k">(</span><span class="n">Size</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Size</span><span class="k">(</span><span class="mi">50</span><span class="k">,</span> <span class="mi">30</span><span class="k">),</span> <span class="n">Location</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Point</span><span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="mi">0</span><span class="k">),</span> <span class="n">Text</span> <span class="k">=</span> <span class="s2">&quot;Start&quot;</span><span class="k">)</span>
    <span class="kr">let</span> <span class="n">checkbox</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">CheckBox</span><span class="k">(</span><span class="n">Size</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Size</span><span class="k">(</span><span class="mi">70</span><span class="k">,</span> <span class="mi">30</span><span class="k">),</span> <span class="n">Location</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Point</span><span class="k">(</span><span class="mi">60</span><span class="k">,</span> <span class="mi">0</span><span class="k">),</span> <span class="n">Text</span> <span class="k">=</span> <span class="s2">&quot;黒背景&quot;</span><span class="k">)</span>
    <span class="kr">let</span> <span class="n">labelDir</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Label</span><span class="k">(</span><span class="n">Size</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Size</span><span class="k">(</span><span class="mi">80</span><span class="k">,</span> <span class="mi">30</span><span class="k">),</span> <span class="n">Location</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Point</span><span class="k">(</span><span class="mi">140</span><span class="k">,</span> <span class="mi">0</span><span class="k">),</span> <span class="n">TextAlign</span> <span class="k">=</span> <span class="n">ContentAlignment</span><span class="k">.</span><span class="n">MiddleLeft</span><span class="k">)</span>
    <span class="kr">let</span> <span class="n">labelStep</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Label</span><span class="k">(</span><span class="n">Size</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Size</span><span class="k">(</span><span class="mi">60</span><span class="k">,</span> <span class="mi">30</span><span class="k">),</span> <span class="n">Location</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Point</span><span class="k">(</span><span class="mi">230</span><span class="k">,</span> <span class="mi">0</span><span class="k">),</span> <span class="n">TextAlign</span> <span class="k">=</span> <span class="n">ContentAlignment</span><span class="k">.</span><span class="n">MiddleLeft</span><span class="k">)</span>
    <span class="kr">do</span> <span class="n">this</span><span class="k">.</span><span class="n">Controls</span><span class="k">.</span><span class="n">AddRange</span><span class="k">([|(</span><span class="n">picture</span> <span class="k">:&gt;</span> <span class="n">Control</span><span class="k">);</span> <span class="k">(</span><span class="n">button</span> <span class="k">:&gt;</span> <span class="n">Control</span><span class="k">);</span> <span class="k">(</span><span class="n">checkbox</span> <span class="k">:&gt;</span> <span class="n">Control</span><span class="k">);</span> <span class="k">(</span><span class="n">labelDir</span> <span class="k">:&gt;</span> <span class="n">Control</span><span class="k">);</span> <span class="k">(</span><span class="n">labelStep</span> <span class="k">:&gt;</span> <span class="n">Control</span><span class="k">)|])</span>
    <span class="kr">do</span> <span class="n">this</span><span class="k">.</span><span class="n">Text</span> <span class="k">&lt;-</span> <span class="s2">&quot;ラングトンのアリ&quot;</span>
    <span class="kr">do</span> <span class="n">this</span><span class="k">.</span><span class="n">ClientSize</span> <span class="k">&lt;-</span> <span class="kr">new</span> <span class="n">Size</span><span class="k">(</span><span class="n">size</span><span class="k">,</span> <span class="n">size</span> <span class="k">+</span> <span class="mi">30</span><span class="k">)</span>
    <span class="kr">do</span> <span class="n">this</span><span class="k">.</span><span class="n">FormBorderStyle</span> <span class="k">&lt;-</span> <span class="n">FormBorderStyle</span><span class="k">.</span><span class="n">Fixed3D</span>
    <span class="kr">do</span> <span class="n">this</span><span class="k">.</span><span class="n">MaximizeBox</span> <span class="k">&lt;-</span> <span class="kr">false</span>
    <span class="kr">do</span> <span class="n">button</span><span class="k">.</span><span class="n">Click</span><span class="k">.</span><span class="n">Add</span><span class="k">(</span><span class="kr">fun</span> <span class="k">_</span> <span class="k">-&gt;</span>
        <span class="kr">let</span> <span class="n">dir</span> <span class="k">=</span> <span class="k">(</span><span class="kr">new</span> <span class="n">Random</span><span class="k">()).</span><span class="n">Next</span><span class="k">(</span><span class="mi">4</span><span class="k">)</span>
        <span class="n">labelDir</span><span class="k">.</span><span class="n">Text</span> <span class="k">&lt;-</span> <span class="s2">&quot;初期方向：&quot;</span> <span class="o">^</span> <span class="n">dirTextTable</span><span class="k">.[</span><span class="n">dir</span><span class="k">]</span>
        <span class="kr">let</span> <span class="k">(</span><span class="n">place</span><span class="k">,</span> <span class="n">color</span><span class="k">)</span> <span class="k">=</span> <span class="kr">if</span> <span class="n">checkbox</span><span class="k">.</span><span class="n">Checked</span> <span class="kr">then</span> <span class="k">(</span><span class="n">black</span><span class="k">,</span> <span class="n">Color</span><span class="k">.</span><span class="n">Black</span><span class="k">)</span> <span class="kr">else</span> <span class="k">(</span><span class="n">white</span><span class="k">,</span> <span class="n">Color</span><span class="k">.</span><span class="n">White</span><span class="k">)</span>
        <span class="k">[</span><span class="kr">for</span> <span class="n">x</span> <span class="kr">in</span> <span class="mi">0</span><span class="k">..(</span><span class="n">size</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">-&gt;</span> <span class="k">[</span><span class="kr">for</span> <span class="n">y</span> <span class="kr">in</span> <span class="mi">0</span><span class="k">..(</span><span class="n">size</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)]]</span> <span class="k">|&gt;</span> <span class="n">List</span><span class="k">.</span><span class="n">concat</span>
        <span class="k">|&gt;</span> <span class="n">List</span><span class="k">.</span><span class="n">iter</span><span class="k">(</span><span class="kr">fun</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="k">-&gt;</span> <span class="n">bitmap</span><span class="k">.</span><span class="n">SetPixel</span><span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">,</span> <span class="n">color</span><span class="k">))</span>
        <span class="n">Array2D</span><span class="k">.</span><span class="n">create</span> <span class="n">size</span> <span class="n">size</span> <span class="n">place</span> <span class="k">|&gt;</span> <span class="n">this</span><span class="k">.</span><span class="n">Ant</span> <span class="n">dir</span> <span class="k">|&gt;</span> <span class="n">Async</span><span class="k">.</span><span class="n">Start</span>
        <span class="n">button</span><span class="k">.</span><span class="n">Enabled</span> <span class="k">&lt;-</span> <span class="kr">false</span><span class="k">)</span>
    
    <span class="n">member</span> <span class="n">this</span><span class="k">.</span><span class="n">Ant</span> <span class="kr">with</span> <span class="n">get</span><span class="k">()</span> <span class="k">=</span> <span class="n">this</span><span class="k">.</span><span class="n">ant</span> <span class="kr">and</span> <span class="n">set</span><span class="k">(</span><span class="n">value</span><span class="k">)</span> <span class="k">=</span> <span class="n">this</span><span class="k">.</span><span class="n">ant</span> <span class="k">&lt;-</span> <span class="n">value</span>
    <span class="n">member</span> <span class="n">this</span><span class="k">.</span><span class="n">Print</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="n">place</span> <span class="n">step</span> <span class="k">=</span>
        <span class="kr">try</span>
            <span class="kr">if</span> <span class="n">this</span><span class="k">.</span><span class="n">InvokeRequired</span> <span class="kr">then</span>
                <span class="n">this</span><span class="k">.</span><span class="n">Invoke</span><span class="k">(</span><span class="kr">new</span> <span class="n">MethodInvoker</span><span class="k">(</span><span class="kr">fun</span> <span class="k">()</span> <span class="k">-&gt;</span>
                    <span class="n">bitmap</span><span class="k">.</span><span class="n">SetPixel</span><span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">,</span> <span class="kr">if</span> <span class="n">place</span> <span class="k">=</span> <span class="n">white</span> <span class="kr">then</span> <span class="n">Color</span><span class="k">.</span><span class="n">White</span> <span class="kr">else</span> <span class="n">Color</span><span class="k">.</span><span class="n">Black</span><span class="k">)</span>
                    <span class="n">labelStep</span><span class="k">.</span><span class="n">Text</span> <span class="k">&lt;-</span> <span class="n">string</span> <span class="n">step</span>
                    <span class="n">this</span><span class="k">.</span><span class="n">Refresh</span><span class="k">()))</span>
                <span class="k">|&gt;</span> <span class="n">ignore</span>
        <span class="kr">with</span>
        <span class="k">|</span> <span class="k">:?</span> <span class="n">ObjectDisposedException</span> <span class="k">-&gt;</span> <span class="k">()</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">step</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="n">dir</span> <span class="k">(</span><span class="n">field</span> <span class="k">:</span> <span class="n">int</span><span class="k">[,])</span> <span class="k">(</span><span class="n">form</span> <span class="k">:</span> <span class="n">Langton&#39;sAntForm</span><span class="k">)</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">rotate</span> <span class="n">dir</span> <span class="n">place</span> <span class="k">=</span> <span class="k">(</span><span class="n">dir</span> <span class="k">+</span> <span class="n">place</span> <span class="k">+</span> <span class="mi">4</span><span class="k">)</span> <span class="o">%</span> <span class="mi">4</span>
    <span class="kr">let</span> <span class="n">turnover</span> <span class="k">=</span> <span class="k">(</span> <span class="k">*</span> <span class="k">)</span> <span class="k">-</span><span class="mi">1</span>
    <span class="kr">let</span> <span class="n">move</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="n">dir</span> <span class="k">=</span>
        <span class="kr">let</span> <span class="k">(</span><span class="n">dx</span><span class="k">,</span> <span class="n">dy</span><span class="k">)</span> <span class="k">=</span> <span class="n">dirTable</span><span class="k">.[</span><span class="n">dir</span><span class="k">]</span> <span class="kr">in</span> <span class="k">(</span><span class="n">x</span> <span class="k">+</span> <span class="n">dx</span><span class="k">,</span> <span class="n">y</span> <span class="k">+</span> <span class="n">dy</span><span class="k">)</span>
    <span class="kr">let</span> <span class="k">(|</span><span class="n">InField</span><span class="k">|</span><span class="n">OutOfField</span><span class="k">|)</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="k">=</span>
        <span class="kr">if</span> <span class="mi">0</span> <span class="k">&lt;=</span> <span class="n">x</span> <span class="k">&amp;&amp;</span> <span class="n">x</span> <span class="k">&lt;</span> <span class="n">size</span> <span class="k">&amp;&amp;</span> <span class="mi">0</span> <span class="k">&lt;=</span> <span class="n">y</span> <span class="k">&amp;&amp;</span> <span class="n">y</span> <span class="k">&lt;</span> <span class="n">size</span> <span class="kr">then</span> <span class="n">InField</span> <span class="kr">else</span> <span class="n">OutOfField</span>

    <span class="kr">match</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="kr">with</span>
    <span class="k">|</span> <span class="n">OutOfField</span> <span class="k">-&gt;</span> <span class="k">()</span>
    <span class="k">|</span> <span class="n">InField</span> <span class="k">-&gt;</span>
        <span class="kr">let</span> <span class="n">newDir</span> <span class="k">=</span> <span class="n">rotate</span> <span class="n">dir</span> <span class="n">field</span><span class="k">.[</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">]</span>
        <span class="n">field</span><span class="k">.[</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">]</span> <span class="k">&lt;-</span> <span class="n">turnover</span> <span class="n">field</span><span class="k">.[</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">]</span>
        <span class="n">form</span><span class="k">.</span><span class="n">Print</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="n">field</span><span class="k">.[</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">]</span> <span class="n">step</span>
        <span class="n">loop</span> <span class="k">(</span><span class="n">step</span> <span class="k">+</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">move</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="n">newDir</span><span class="k">)</span> <span class="n">newDir</span> <span class="n">field</span> <span class="n">form</span>

<span class="k">[&lt;</span><span class="n">STAThread</span><span class="k">()&gt;]</span>
<span class="kr">do</span>
    <span class="n">use</span> <span class="n">form</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">Langton&#39;sAntForm</span><span class="k">()</span>
    <span class="n">form</span><span class="k">.</span><span class="n">Ant</span> <span class="k">&lt;-</span> <span class="kr">fun</span> <span class="n">dir</span> <span class="n">field</span> <span class="k">-&gt;</span> <span class="n">async</span> <span class="k">{</span> <span class="n">loop</span> <span class="mi">1</span> <span class="k">(</span><span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="k">,</span> <span class="n">size</span> <span class="o">/</span> <span class="mi">2</span><span class="k">)</span> <span class="n">dir</span> <span class="n">field</span> <span class="n">form</span> <span class="k">}</span>
    <span class="n">Application</span><span class="k">.</span><span class="n">EnableVisualStyles</span><span class="k">()</span>
    <span class="n">Application</span><span class="k">.</span><span class="n">Run</span><span class="k">(</span><span class="n">form</span><span class="k">)</span> <span class="k">|&gt;</span> <span class="n">ignore</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9390/addtag/" class="addtag" id="addtag_9390">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/F%23/">F#</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9390/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9390/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9390"
  >-</span><span
  class="button yellow"
  id="rating_z_9390"
  >0</span><span 
  class="button green"
  id="rating_p_9390"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9390/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9392">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1026/" target="_top">airhead</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9392/">#9392</a>(<script language="JavaScript">print_time(new Date("2009/07/18 15:09 GMT"));</script><noscript>2009/07/18 15:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  アリの動作をどう書くかという話じゃなく、余談にはなりますが、参考ページのブログエントリに書かれていたビットマップ表現と効率について。<br/><br/>DOMのあるノード直下に非常に多数のノードを作る（兄弟ノードが多すぎる）・それらのノードにアクセスするというのは、速度低下の原因になりがちです。どのくらいの数からどこに影響が出るかは実装によるでしょうが、ノード総数が少々多くなろうとも入れ子・小分けにすることで改善できる場合があります。<br/><br/>添付コードのように変更を加えた場合、Pen4&nbsp;2.53GHzにおいて時間を計測すると次のようになりました（単位:ms&nbsp;―&nbsp;遅いCPUだから差が顕著になっているのであって、今時のCPUではこれほどの改善は見込めないかもしれませんが）。<br/><br/>Firefox&nbsp;3.5.1:<br/>キャンバス作成（ノード作成）が34,551から1,021へと大幅に改善、アリの行進（ノードアクセス）でも330,770から216,934に改善<br/>Opera&nbsp;10b1:<br/>キャンバス作成は328から344にと若干遅くなるが、もともとあまり時間が掛かっていない。アリの行進の方は1,188,625から415,312に改善<br/><br/>一方で、テーブル要素にしてしまう方法も試してみましたが、手元の環境ではdiv要素で小分けとほとんど変わりませんでした。セルの色表現を、要素のクラス書き換え・クラスごとにCSSで色指定する方法も試してみたが、こちらでもほとんど変化なし。<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">style</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span>
<span class="err">#</span><span class="nx">canvas</span><span class="p">{</span>
       <span class="nx">border</span><span class="o">:</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">999</span><span class="o">;</span>
       <span class="nx">width</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="o">;</span>
<span class="p">}</span>
<span class="c">/* 子divへのCSS指定を、孫divへの指定にするだけ */</span>
<span class="err">#</span><span class="nx">canvas</span> <span class="nx">div</span> <span class="nx">div</span><span class="p">{</span>
       <span class="nx">width</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">height</span><span class="o">:</span> <span class="mi">3</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">float</span><span class="o">:</span> <span class="nx">left</span><span class="o">;</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="nx">style</span><span class="o">&gt;</span>



<span class="c">// スクリプト部の変更点はwindow.onloadのコールバックのみ</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="k">function</span><span class="p">(){</span>
<span class="c">// キャンバス作成部 セルを表すdivを入れ子に</span>
    <span class="k">var</span> <span class="nx">canvas</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;canvas&#39;</span><span class="p">);</span>
    <span class="k">var</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span> <span class="nx">WORLD_SIZE</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">var</span> <span class="nx">row</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
        <span class="nx">canvas</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span> <span class="nx">WORLD_SIZE</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">){</span>
            <span class="k">var</span> <span class="nx">cell</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">);</span>
            <span class="nx">row</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">cell</span><span class="p">);</span>
            <span class="nx">earth</span><span class="p">[</span><span class="nx">k</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Cell</span><span class="p">(</span><span class="nx">cell</span><span class="p">);</span>
            <span class="nx">k</span><span class="o">++;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="c">// 以下変更なし</span>
    <span class="nx">lang_ant</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ant</span><span class="p">();</span><span class="c">//蟻の誕生</span>
    <span class="nx">lang_ant</span><span class="p">.</span><span class="nx">world</span> <span class="o">=</span> <span class="nx">earth</span><span class="o">;//</span><span class="err">地球に降り立つ</span>
    <span class="nx">lang_ant</span><span class="p">.</span><span class="nx">ageDisplay</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;step&#39;</span><span class="p">);</span>
    
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;run&#39;</span><span class="p">).</span><span class="nx">disabled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9392/addtag/" class="addtag" id="addtag_9392">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/dom/">dom</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9392/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9392/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9392"
  >-</span><span
  class="button yellow"
  id="rating_z_9392"
  >0</span><span 
  class="button green"
  id="rating_p_9392"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9392/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9394">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/100/" target="_top">konn</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9394/">#9394</a>(<script language="JavaScript">print_time(new Date("2009/07/19 11:54 GMT"));</script><noscript>2009/07/19 11:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Haskellで実装。要：UTF8-String</p>
<p>$ runhaskell langton.hs 100 100 20</p>
<p>とかすると、100x100マスの世界の模様を20ステップごとに表示してくれます。最後の数字を省略すると律儀に一世代ごとに印字します。</p>
<p>無限リストばんざい！</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="nv">qualified</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">UTF8</span> <span class="nv">as</span> <span class="n">U</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span> <span class="p">(</span><span class="nv">getArgs</span><span class="p">,</span> <span class="nv">getProgName</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span><span class="o">.</span><span class="n">State</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">Data</span><span class="o">.</span><span class="n">Map</span> <span class="nv">as</span> <span class="n">M</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span> <span class="p">(</span><span class="nv">sortBy</span><span class="p">,</span> <span class="nv">groupBy</span><span class="p">)</span>

<span class="kr">type</span> <span class="n">Point</span> <span class="o">=</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
<span class="kr">type</span> <span class="n">Direction</span> <span class="o">=</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
<span class="kr">data</span> <span class="n">Ant</span> <span class="o">=</span> <span class="n">Ant</span> <span class="p">{</span><span class="nv">pos</span><span class="o">::</span><span class="n">Point</span><span class="p">,</span> <span class="nv">direction</span><span class="o">::</span><span class="n">Direction</span><span class="p">}</span> <span class="kr">deriving</span> <span class="n">Show</span>
<span class="kr">data</span> <span class="n">Color</span> <span class="o">=</span> <span class="n">White</span> <span class="o">|</span> <span class="n">Black</span>

<span class="kr">data</span> <span class="n">AntsState</span> <span class="o">=</span> <span class="n">AS</span> <span class="p">{</span> <span class="nv">world</span><span class="o">::</span><span class="p">(</span><span class="n">M</span><span class="o">.</span><span class="n">Map</span> <span class="n">Point</span> <span class="n">Color</span><span class="p">),</span> <span class="nv">ants</span><span class="o">::</span><span class="p">[</span><span class="n">Ant</span><span class="p">],</span> <span class="nv">wrap</span> <span class="o">::</span> <span class="n">Bool</span><span class="p">,</span> <span class="nv">height</span><span class="o">::</span><span class="n">Int</span><span class="p">,</span> <span class="nv">width</span><span class="o">::</span><span class="n">Int</span><span class="p">,</span> <span class="nv">generation</span><span class="o">::</span><span class="n">Int</span> <span class="p">}</span>

<span class="kr">instance</span> <span class="n">Show</span> <span class="n">Color</span> <span class="kr">where</span>
  <span class="nv">show</span> <span class="n">Black</span> <span class="o">=</span> <span class="s">&quot;■&quot;</span>
  <span class="nv">show</span> <span class="n">White</span> <span class="o">=</span> <span class="s">&quot;□&quot;</span>

<span class="nv">cmp</span> <span class="nv">f</span> <span class="p">((</span><span class="kr">_</span><span class="p">,</span><span class="nv">a</span><span class="p">),</span><span class="kr">_</span><span class="p">)</span> <span class="p">((</span><span class="kr">_</span><span class="p">,</span><span class="nv">b</span><span class="p">),</span><span class="kr">_</span><span class="p">)</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">a</span> <span class="nv">b</span>

<span class="kr">instance</span> <span class="n">Show</span> <span class="n">AntsState</span> <span class="kr">where</span>
  <span class="nv">show</span> <span class="n">AS</span><span class="p">{</span><span class="nv">world</span><span class="o">=</span><span class="nv">wd</span><span class="p">,</span> <span class="nv">generation</span><span class="o">=</span><span class="nv">g</span><span class="p">}</span> <span class="o">=</span> <span class="s">&quot;gen: &quot;</span> <span class="o">++</span> <span class="nv">show</span> <span class="nv">g</span> <span class="o">++</span> <span class="s">&quot;\n&quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">unlines</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">concatMap</span><span class="p">(</span><span class="nv">show</span><span class="o">.</span><span class="nv">snd</span><span class="p">))</span> <span class="o">$</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="nv">cmp</span> <span class="p">(</span><span class="o">==</span><span class="p">))</span> <span class="o">$</span> <span class="p">(</span><span class="nv">sortBy</span> <span class="p">(</span><span class="nv">cmp</span> <span class="nv">compare</span><span class="p">)</span> <span class="o">$</span> <span class="n">M</span><span class="o">.</span><span class="nv">toList</span> <span class="nv">wd</span><span class="p">))</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">args</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="nv">pname</span> <span class="o">&lt;-</span> <span class="nv">getProgName</span>
          <span class="kr">case</span> <span class="nv">args</span> <span class="kr">of</span>
            <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">y</span><span class="o">:</span><span class="nv">s</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">show</span> <span class="o">.</span> <span class="nv">head</span><span class="p">)</span> <span class="o">$</span> <span class="nv">iterate</span> <span class="p">(</span><span class="nv">drop</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">s</span><span class="p">))</span> <span class="o">$</span> <span class="nv">evolutions</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">y</span><span class="p">)</span>
            <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">y</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span>   <span class="o">-&gt;</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">show</span><span class="p">)</span> <span class="o">$</span> <span class="nv">evolutions</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">read</span> <span class="nv">y</span><span class="p">)</span>
            <span class="kr">_</span>         <span class="o">-&gt;</span> <span class="nv">putStrLn</span> <span class="p">(</span><span class="s">&quot;usage: &quot;</span> <span class="o">++</span> <span class="nv">pname</span> <span class="o">++</span> <span class="s">&quot; height width [step]&quot;</span><span class="p">)</span>

<span class="nv">makeAnt</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="n">Ant</span> <span class="p">{</span><span class="nv">pos</span><span class="o">=</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">),</span> <span class="nv">direction</span><span class="o">=</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span>

<span class="nv">makeWorld</span> <span class="nv">height</span> <span class="nv">width</span> <span class="nv">ants</span> <span class="nv">wrap</span> <span class="o">=</span> <span class="n">AS</span> <span class="p">{</span>
  <span class="nv">world</span> <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="nv">fromList</span> <span class="p">[((</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span> <span class="n">White</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">width</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="nv">y</span> <span class="o">&lt;-</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">height</span><span class="o">-</span><span class="mi">1</span><span class="p">]],</span>
  <span class="nv">ants</span> <span class="o">=</span> <span class="nv">ants</span><span class="p">,</span>
  <span class="nv">height</span> <span class="o">=</span> <span class="nv">height</span><span class="p">,</span>
  <span class="nv">width</span> <span class="o">=</span> <span class="nv">width</span><span class="p">,</span>
  <span class="nv">generation</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nv">wrap</span> <span class="o">=</span> <span class="nv">wrap</span>
<span class="p">}</span>

<span class="nv">proceed</span> <span class="o">::</span> <span class="n">State</span> <span class="n">AntsState</span> <span class="n">AntsState</span>
<span class="nv">proceed</span> <span class="o">=</span> <span class="kr">do</span>  <span class="nv">st</span><span class="o">@</span><span class="n">AS</span><span class="p">{</span><span class="nv">ants</span><span class="o">=</span><span class="nv">as</span><span class="p">,</span><span class="nv">generation</span><span class="o">=</span><span class="nv">g</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">get</span>
              <span class="nv">a&#39;</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="nv">procAnts</span> <span class="nv">as</span>
              <span class="nv">st</span> <span class="o">&lt;-</span> <span class="nv">get</span>
              <span class="kr">let</span> <span class="nv">s</span> <span class="o">=</span> <span class="nv">st</span><span class="p">{</span><span class="nv">ants</span> <span class="o">=</span> <span class="nv">a&#39;</span><span class="p">,</span><span class="nv">generation</span><span class="o">=</span><span class="nv">g</span><span class="o">+</span><span class="mi">1</span><span class="p">}</span>
              <span class="nv">put</span> <span class="nv">s</span>
              <span class="nv">return</span> <span class="nv">s</span>

<span class="nv">procAnts</span> <span class="nv">ant</span><span class="o">@</span><span class="n">Ant</span><span class="p">{</span><span class="nv">pos</span><span class="o">=</span><span class="nv">p</span><span class="o">@</span><span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">),</span> <span class="nv">direction</span><span class="o">=</span><span class="p">(</span><span class="nv">dx</span><span class="p">,</span><span class="nv">dy</span><span class="p">)}</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">w</span><span class="o">@</span><span class="n">AS</span><span class="p">{</span><span class="nv">world</span><span class="o">=</span><span class="nv">wd</span><span class="p">,</span> <span class="nv">wrap</span><span class="o">=</span><span class="nv">wr</span><span class="p">,</span> <span class="nv">width</span><span class="o">=</span><span class="nv">wdt</span><span class="p">,</span> <span class="nv">height</span><span class="o">=</span><span class="nv">h</span><span class="p">}</span> <span class="o">&lt;-</span> <span class="nv">get</span>
  <span class="kr">let</span> <span class="nv">pt</span> <span class="o">=</span> <span class="p">((</span><span class="nv">x</span><span class="o">+</span><span class="nv">dx</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="nv">wdt</span><span class="p">,</span> <span class="p">(</span><span class="nv">y</span><span class="o">+</span><span class="nv">dy</span><span class="p">)</span> <span class="p">`</span> <span class="nv">mod</span><span class="p">`</span> <span class="nv">h</span><span class="p">)</span>
      <span class="nv">st</span> <span class="o">=</span> <span class="nv">maybe</span> <span class="n">Black</span> <span class="nv">id</span> <span class="o">$</span> <span class="n">M</span><span class="o">.</span><span class="nv">lookup</span> <span class="nv">pt</span> <span class="nv">wd</span>
      <span class="p">(</span><span class="nv">dr</span><span class="p">,</span> <span class="nv">s&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">st</span> <span class="kr">of</span>
                  <span class="n">Black</span> <span class="o">-&gt;</span> <span class="p">((</span><span class="nv">dy</span><span class="p">,</span> <span class="o">-</span><span class="nv">dx</span><span class="p">),</span> <span class="n">White</span><span class="p">)</span>
                  <span class="kr">_</span>     <span class="o">-&gt;</span> <span class="p">((</span><span class="o">-</span><span class="nv">dy</span><span class="p">,</span> <span class="nv">dx</span><span class="p">),</span> <span class="n">Black</span><span class="p">)</span>
  <span class="nv">put</span> <span class="nv">w</span><span class="p">{</span><span class="nv">world</span><span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="nv">insert</span> <span class="nv">pt</span> <span class="nv">s&#39;</span> <span class="nv">wd</span><span class="p">}</span>
  <span class="nv">return</span> <span class="nv">ant</span><span class="p">{</span><span class="nv">pos</span> <span class="o">=</span> <span class="nv">pt</span><span class="p">,</span> <span class="nv">direction</span> <span class="o">=</span> <span class="nv">dr</span><span class="p">}</span>

<span class="nv">evolutions</span> <span class="nv">width</span> <span class="nv">height</span> <span class="o">=</span> <span class="nv">iterate</span> <span class="p">(</span><span class="nv">execState</span> <span class="nv">proceed</span><span class="p">)</span> <span class="p">(</span><span class="nv">makeWorld</span> <span class="nv">width</span> <span class="nv">height</span> <span class="p">[</span><span class="nv">makeAnt</span> <span class="p">(</span><span class="nv">width</span><span class="o">*</span><span class="mi">3</span><span class="p">`</span><span class="nv">div</span><span class="p">`</span><span class="mi">5</span><span class="p">)</span> <span class="p">(</span><span class="nv">height</span><span class="o">*</span><span class="mi">2</span><span class="p">`</span><span class="nv">div</span><span class="p">`</span><span class="mi">5</span><span class="p">)]</span> <span class="n">True</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9394/addtag/" class="addtag" id="addtag_9394">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/utf8-string/">utf8-string</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9394/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9394/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9394"
  >-</span><span
  class="button yellow"
  id="rating_z_9394"
  >0</span><span 
  class="button green"
  id="rating_p_9394"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9394/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9398">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1085/" target="_top"> U D </a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9398/">#9398</a>(<script language="JavaScript">print_time(new Date("2009/07/20 05:09 GMT"));</script><noscript>2009/07/20 05:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>画面のサイズや画面端での扱いについて特に規定されていないようなので、何も考えずにサックリと書いてみた。枠まで到達しても死にません。</p>
<p>方向転換に関する論理計算がパッと見で分かりにくいだけで、他は分かりやすいのではないかと。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><div class="highlight"><pre>！東=0
！南=1
！西=2
！北=3

線スタイルは`透明`
必要な 間、蟻を進めて0.01秒待つ

■ブロック
　・{整数}W{=5}
　・{整数}H{=5}
　・色取得(X,Yの)～
　　X*W,Y*Wを点取得
　・プロット(X,YにCOLを)～
　　塗り色はCOL
　　X*W,Y*Hから(X+1)*W,(Y+1)*Hへ四角

■蟻　+ブロック
　・{整数}向き{=2}
　・{整数}X{=40}
　・{整数}Y{=40}
　・進む～
　　COLとは整数=X,Yの色取得
　　向き=(向き-2*(COL==白色)+5)%4
　　X,Yに(COLの反転色)をプロット
　　X=X-(向き==西)+(向き==東)
　　Y=Y-(向き==南)+(向き==北)

●反転色(COLの)
　白色-COLを戻す
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9398/addtag/" class="addtag" id="addtag_9398">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9398/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9398/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9398"
  >-</span><span
  class="button yellow"
  id="rating_z_9398"
  >0</span><span 
  class="button green"
  id="rating_p_9398"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9398/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9399">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1085/" target="_top"> U D </a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9399/">#9399</a>(<script language="JavaScript">print_time(new Date("2009/07/20 05:20 GMT"));</script><noscript>2009/07/20 05:20 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>連投失礼。Wikipediaに載っていた拡張版のラングトンの蟻（色反転でなく、複数色循環）も実装してみた。まだ誰もやっていなかったかな？拡張の解釈は多分合っていると思ふ。。。</p>
<p>あたかも要塞のように常に左右に対称に広がっていく様子は割と面白い。（都市発展系のシミュレーションゲームのよう）</p>
<p># 発展にかなり時間がかかるので、ついでに500ステップ毎に描画を反映させるようにしました。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506231016/http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%B3%E3%82%B0%E3%83%88%E3%83%B3%E3%81%AE%E3%82%A2%E3%83%AA">ラングトンのアリ</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75</pre></td><td class="code"><div class="highlight"><pre>！ブロック幅　=3
！ブロック高さ=3
！世界幅　=150
！世界高さ=120

！東=0
！南=1
！西=2
！北=3

！色数　=4
！基準色=黒色
！STEPBY=500

ルールは『RLLR』
ルールの色配列は「{基準色},{赤色},{青色},{緑色}」を`,`で区切ったもの

母艦について
　クライアントW=ブロックのW*世界幅
　クライアントH=ブロックのH*世界高
　スタイルは`枠固定`
　基準色で画面クリア

STEPとは整数

線スタイルは`透明`
必要な 間
　蟻を進める。
　もしSTEP%STEPBYが0ならば
　　0.01秒待つ
　　母艦は「step: {STEP}」
　STEPに1を直接足す

■ルール
　・{配列}ルール配列
　・テキスト　←ルール設定　デフォルト
　・ルール設定(V)～
　　Vを文字列分解して反復
　　　ルール配列[回数-1]=2*(対象==`R`)-1　# Rなら1、それ以外は-1
　・{非公開}色配列

■ブロック
　・{非公開}W{=3}
　・{非公開}H{=3}
　・色取得(X,Yの)～
　　X*W,Y*Wを点取得
　・プロット(X,YにCOLを)～
　　塗り色はCOL
　　X*W,Y*Hから(X+1)*W,(Y+1)*Hへ四角

■蟻　+ブロック
　・{整数}向き{=0}
　・{整数}X{=75}
　・{整数}Y{=50}
　・進む～
　　COLとは整数=X,Yの色取得
　　COLで向きを方向転換する
　　COLを色循環する
　　X,YにCOLをプロット
　　Xに(向き==東)-(向き==西)を世界幅でMOD加算
　　Yに(向き==南)-(向き==北)を世界高でMOD加算

●方向転換する({整数}COLで{参照渡し}DIRを)
　Iとは整数=ルールの色配列でCOLを配列検索
　もしIが(-1)ならばI=0
　DIRに(ルールのルール配列[I])を4でMOD加算する

●色循環する({参照渡し}COLを)
　COLORSとは配列=ルールの色配列
　Iとは整数=COLORSでCOLを配列検索
　COL=COLORS[(I+1)%色数]

# Z/CZ上でAにBを直接足す
●MOD加算({参照渡し}Aに{整数}Bを{整数}Cで)
　A=(A+B+C)%C
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9399/addtag/" class="addtag" id="addtag_9399">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9399/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9399/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9399"
  >-</span><span
  class="button yellow"
  id="rating_z_9399"
  >0</span><span 
  class="button green"
  id="rating_p_9399"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9399/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9400">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/646/" target="_top">silverwire</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9400/">#9400</a>(<script language="JavaScript">print_time(new Date("2009/07/21 03:56 GMT"));</script><noscript>2009/07/21 03:56 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/bat/">
	  Batchfile
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>バッチで。

  e.g.
    C:\&gt;#276.bat 10
    
               |
          **   |
         *  *  |
        *    * |
        *    * |
         ****  |
               |
               |
               |
               |
    X = 7, Y = 5</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre>@echo off
setlocal enabledelayedexpansion
  set s=
  set t=
  set x=0
  set y=0
  set dx=-1
  set dy=0
  
  if &quot;%~1&quot; == &quot;&quot; (echo usage: %~n0 SIZE &gt;&amp;2 &amp; exit /b 1)
  
  set /a x=%~1/2,y=%~1/2
  
  for /l %%j in (1,1,%~1) do (
    for /l %%i in (1,1,%~1) do set c[%%i][%%j]=0
  )
  
  :_
    if !x! lss 1 goto BREAK
    if !x! gtr %~1 goto BREAK
    if !y! lss 1 goto BREAK
    if !y! gtr %~1 goto BREAK
    
    if !c[%x%][%y%]! equ 0 (
      set c[%x%][%y%]=1
      set t=%dx%
      set dx=%dy%
      set /a dy=-!t!
    ) else (
      set c[%x%][%y%]=0
      set t=%dx%
      set /a dx=-!dy!
      set dy=!t!
    )
    set /a x+=%dx%,y+=%dy%
    
    cls
    for /l %%j in (1,1,%~1) do (
      set s=
      for /l %%i in (1,1,%~1) do (
        if !c[%%i][%%j]! equ 0 (
          set s=!s! 
        ) else (
          set s=!s!*
        )
      )
      echo ^ !s!^|
    )
    echo X = %x%, Y = %y%
    
    ping -n 2 127.0.0.1 &gt; NUL
  goto _
  :BREAK
endlocal &amp; echo DEAD END ...
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9400/addtag/" class="addtag" id="addtag_9400">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/bat/">
		Batchfile
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9400/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9400/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9400"
  >-</span><span
  class="button yellow"
  id="rating_z_9400"
  >0</span><span 
  class="button green"
  id="rating_p_9400"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9400/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9401">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/490/" target="_top">ぴょん</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9401/">#9401</a>(<script language="JavaScript">print_time(new Date("2009/07/21 12:11 GMT"));</script><noscript>2009/07/21 12:11 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/python</span>
<span class="c"># -*- coding: utf-8 -*-</span>
<span class="c"># http://ja.doukaku.org/276/</span>

<span class="k">import</span> <span class="nn">random</span>
<span class="k">import</span> <span class="nn">sys</span>

<span class="n">EAST</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">NORTH</span> <span class="o">=</span> <span class="mi">90</span>
<span class="n">WEST</span> <span class="o">=</span> <span class="mi">180</span>
<span class="n">SOUTH</span> <span class="o">=</span> <span class="mi">270</span>

<span class="n">BLACK</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">RED</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">GREEN</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">BLUE</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Grid</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_width</span> <span class="o">=</span> <span class="n">width</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_height</span> <span class="o">=</span> <span class="n">height</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_color</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">width</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_width</span>

    <span class="k">def</span> <span class="nf">height</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_height</span>

    <span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">color</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_color</span><span class="p">[</span><span class="nb">tuple</span><span class="p">(</span><span class="n">position</span><span class="p">)]</span> <span class="o">=</span> <span class="n">color</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_color</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="nb">tuple</span><span class="p">(</span><span class="n">position</span><span class="p">),</span> <span class="n">BLACK</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">view</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">height</span><span class="p">()):</span>
            <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">width</span><span class="p">()):</span>
                <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">({</span>
                    <span class="n">BLACK</span><span class="p">:</span> <span class="s">&#39; &#39;</span><span class="p">,</span>
                    <span class="n">RED</span><span class="p">:</span> <span class="s">&#39;*&#39;</span><span class="p">,</span>
                    <span class="n">GREEN</span><span class="p">:</span> <span class="s">&#39;+&#39;</span><span class="p">,</span>
                    <span class="n">BLUE</span><span class="p">:</span> <span class="s">&#39;@&#39;</span><span class="p">,</span>
                    <span class="p">}[</span><span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))])</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Ant</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="bp">self</span><span class="p">,</span>
        <span class="n">grid</span><span class="p">,</span>
        <span class="n">color</span><span class="o">=</span><span class="n">RED</span><span class="p">,</span>
        <span class="n">position</span><span class="o">=</span><span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
        <span class="n">direction</span><span class="o">=</span><span class="n">EAST</span><span class="p">,</span>
        <span class="p">):</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span> <span class="o">=</span> <span class="n">grid</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_position</span> <span class="o">=</span> <span class="n">position</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">=</span> <span class="n">direction</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_color</span> <span class="o">=</span> <span class="n">color</span>

    <span class="k">def</span> <span class="nf">position</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">position</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_position</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">position</span><span class="p">)</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_position</span>

    <span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">color</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_color</span> <span class="o">=</span> <span class="n">color</span>

        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_color</span>

    <span class="k">def</span> <span class="nf">left</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">+</span> <span class="mi">90</span><span class="p">)</span> <span class="o">%</span> <span class="mi">360</span>

    <span class="k">def</span> <span class="nf">right</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">-</span> <span class="mi">90</span><span class="p">)</span> <span class="o">%</span> <span class="mi">360</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">==</span> <span class="n">NORTH</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">==</span> <span class="n">SOUTH</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">==</span> <span class="n">EAST</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">_direction</span> <span class="o">==</span> <span class="n">WEST</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">%=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">width</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">%=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">height</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_color</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">,</span> <span class="n">BLACK</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">left</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_position</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_color</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">right</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">forward</span><span class="p">()</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>

    <span class="n">width</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">height</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">num</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
    <span class="n">iteration</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">4</span><span class="p">])</span>

    <span class="n">grid</span> <span class="o">=</span> <span class="n">Grid</span><span class="p">(</span><span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="n">height</span><span class="p">)</span>
    <span class="n">ants</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">num</span><span class="p">):</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">RED</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">BLUE</span><span class="p">)[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">3</span><span class="p">]</span>
        <span class="n">x</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">width</span><span class="p">)</span>
        <span class="n">y</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">height</span><span class="p">)</span>
        <span class="n">ants</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Ant</span><span class="p">(</span><span class="n">grid</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">c</span><span class="p">,</span> <span class="n">position</span><span class="o">=</span><span class="p">[</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">]))</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">iteration</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">ant</span> <span class="ow">in</span> <span class="n">ants</span><span class="p">:</span>
            <span class="n">ant</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="p">(</span><span class="n">iteration</span> <span class="o">/</span> <span class="mi">10</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;step: </span><span class="si">%d</span><span class="se">\n</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">i</span><span class="p">)</span>
            <span class="n">grid</span><span class="o">.</span><span class="n">view</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9401/addtag/" class="addtag" id="addtag_9401">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9401/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9401/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9401"
  >-</span><span
  class="button yellow"
  id="rating_z_9401"
  >0</span><span 
  class="button green"
  id="rating_p_9401"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9401/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment9403">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/490/" target="_top">ぴょん</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9403/">#9403</a>(<script language="JavaScript">print_time(new Date("2009/07/21 21:13 GMT"));</script><noscript>2009/07/21 21:13 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Python + Tkinter</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/python</span>
<span class="c"># -*- coding: utf-8 -*-</span>
<span class="c"># http://ja.doukaku.org/276/</span>

<span class="k">import</span> <span class="nn">random</span>
<span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">Tkinter</span> <span class="k">as</span> <span class="nn">Tk</span>

<span class="n">DOT_SIZE</span> <span class="o">=</span> <span class="mi">5</span>


<span class="k">class</span> <span class="nc">Ant</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">grid</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">direction</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span> <span class="o">=</span> <span class="n">grid</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="n">direction</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">color</span>

    <span class="k">def</span> <span class="nf">left</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">+</span> <span class="mi">90</span><span class="p">)</span> <span class="o">%</span> <span class="mi">360</span>

    <span class="k">def</span> <span class="nf">right</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span> <span class="o">-</span> <span class="mi">90</span><span class="p">)</span> <span class="o">%</span> <span class="mi">360</span>

    <span class="k">def</span> <span class="nf">forward</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="p">{</span>  <span class="c"># 0:EAST, 90:NORTH 180:SOUTH 270:WEST</span>
            <span class="mi">0</span><span class="p">:</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="mi">90</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span>
            <span class="mi">180</span><span class="p">:</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
            <span class="mi">270</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
            <span class="p">}[</span><span class="bp">self</span><span class="o">.</span><span class="n">direction</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">diff</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">width</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">diff</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">%</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">height</span>

    <span class="k">def</span> <span class="nf">is_my_color</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">get_color</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">black</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">delete_color</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">my_color</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">update_color</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">step</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">is_my_color</span><span class="p">():</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">black</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">left</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">my_color</span><span class="p">()</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">right</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">forward</span><span class="p">()</span>


<span class="k">class</span> <span class="nc">Grid</span><span class="p">(</span><span class="n">Tk</span><span class="o">.</span><span class="n">Canvas</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">40</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">width</span> <span class="o">=</span> <span class="n">width</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">height</span> <span class="o">=</span> <span class="n">height</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_color</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="n">xw</span> <span class="o">=</span> <span class="n">DOT_SIZE</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">width</span>
        <span class="n">xh</span> <span class="o">=</span> <span class="n">DOT_SIZE</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">height</span>
        <span class="n">Tk</span><span class="o">.</span><span class="n">Canvas</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parent</span><span class="p">,</span> <span class="n">background</span><span class="o">=</span><span class="s">&#39;black&#39;</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">xw</span><span class="p">,</span>
                           <span class="n">height</span><span class="o">=</span><span class="n">xh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_color</span><span class="o">.</span><span class="n">get</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">),</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="s">&#39;color&#39;</span><span class="p">:</span> <span class="s">&#39;black&#39;</span><span class="p">})</span>

    <span class="k">def</span> <span class="nf">get_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="s">&#39;color&#39;</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">delete_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
        <span class="n">old</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">old</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">])</span>
            <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">_color</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)]</span>

    <span class="k">def</span> <span class="nf">update_color</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
        <span class="n">old</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">color</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">old</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">xx0</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">DOT_SIZE</span>
            <span class="n">xy0</span> <span class="o">=</span> <span class="n">y</span> <span class="o">*</span> <span class="n">DOT_SIZE</span>
            <span class="n">xx1</span> <span class="o">=</span> <span class="n">xx0</span> <span class="o">+</span> <span class="n">DOT_SIZE</span>
            <span class="n">xy1</span> <span class="o">=</span> <span class="n">xy0</span> <span class="o">+</span> <span class="n">DOT_SIZE</span>
            <span class="nb">id</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">create_rectangle</span><span class="p">(</span><span class="n">xx0</span><span class="p">,</span> <span class="n">xy0</span><span class="p">,</span> <span class="n">xx1</span><span class="p">,</span> <span class="n">xy1</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">,</span>
                                       <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_color</span><span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="nb">id</span><span class="p">,</span> <span class="s">&#39;color&#39;</span><span class="p">:</span> <span class="n">color</span><span class="p">}</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">itemconfigure</span><span class="p">(</span><span class="n">old</span><span class="p">[</span><span class="s">&#39;id&#39;</span><span class="p">],</span> <span class="n">fill</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="n">color</span><span class="p">)</span>


<span class="k">class</span> <span class="nc">Frame</span><span class="p">(</span><span class="n">Tk</span><span class="o">.</span><span class="n">Frame</span><span class="p">):</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">heigth</span><span class="p">,</span> <span class="n">num_ant</span><span class="p">,</span> <span class="n">master</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">Tk</span><span class="o">.</span><span class="n">Frame</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">master</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">master</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="s">&#39;Rangton Ant&#39;</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span> <span class="o">=</span> <span class="n">Grid</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="n">height</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

        <span class="k">def</span> <span class="nf">_rand_int</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">random</span><span class="o">.</span><span class="n">random</span><span class="p">()</span> <span class="o">*</span> <span class="n">n</span><span class="p">)</span>

        <span class="k">def</span> <span class="nf">_make_ant</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
            <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="s">&#39;red&#39;</span><span class="p">,</span> <span class="s">&#39;yellow&#39;</span><span class="p">,</span> <span class="s">&#39;green&#39;</span><span class="p">,</span> <span class="s">&#39;cyan&#39;</span><span class="p">,</span> <span class="s">&#39;blue&#39;</span><span class="p">,</span> <span class="s">&#39;cyan&#39;</span><span class="p">,</span>
                 <span class="s">&#39;magenta&#39;</span><span class="p">,</span> <span class="s">&#39;white&#39;</span><span class="p">)[</span><span class="n">i</span> <span class="o">%</span> <span class="mi">7</span><span class="p">]</span>
            <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">270</span><span class="p">)[</span><span class="n">_rand_int</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">_rand_int</span><span class="p">(</span><span class="n">width</span><span class="p">)</span>
            <span class="n">y</span> <span class="o">=</span> <span class="n">_rand_int</span><span class="p">(</span><span class="n">height</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">Ant</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_grid</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">_ants</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">_make_ant</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="n">num_ant</span><span class="p">))</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">move</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">move</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">ant</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_ants</span><span class="p">:</span>
            <span class="n">ant</span><span class="o">.</span><span class="n">step</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">move</span><span class="p">)</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>

    <span class="n">width</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">height</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">num_ant</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>

    <span class="n">f</span> <span class="o">=</span> <span class="n">Frame</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">num_ant</span><span class="p">)</span>
    <span class="n">f</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>
    <span class="n">f</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9403/addtag/" class="addtag" id="addtag_9403">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9403/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9403/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9403"
  >-</span><span
  class="button yellow"
  id="rating_z_9403"
  >0</span><span 
  class="button green"
  id="rating_p_9403"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9403/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9404">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1056/" target="_top">tkturbo</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9404/">#9404</a>(<script language="JavaScript">print_time(new Date("2009/07/22 01:44 GMT"));</script><noscript>2009/07/22 01:44 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>出題者によるデモが初期読み込み時に重かったので、改編してみました。</p>
<p>おまけにアリ自体も最大5匹まで増量可能だったり。</p>
<p>ちなみにOperaだとCSSのエラーで動かないっぽいのが難点ですorz</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506231016/http://blog.livedoor.jp/tkturbo/archives/51555375.html">サンプル</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">meta</span> <span class="nx">http</span><span class="o">-</span><span class="nx">equiv</span><span class="o">=</span><span class="s2">&quot;content-type&quot;</span> <span class="nx">content</span><span class="o">=</span><span class="s2">&quot;text/html;charset=shift_jis&quot;</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">title</span><span class="o">&gt;</span><span class="nx">Langton</span><span class="err">&#39;</span><span class="nx">s</span> <span class="nx">Ant</span><span class="o">&lt;/</span><span class="nx">title</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;&lt;!--</span> <span class="c">//</span>
<span class="nx">langton</span><span class="o">=</span><span class="p">{};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="o">=</span><span class="k">function</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span><span class="nx">y</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span><span class="o">?</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="o">;</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="p">(</span><span class="nx">y</span><span class="p">)</span><span class="o">?</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="o">;</span> <span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span>
  <span class="nx">x</span> <span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
  <span class="nx">y</span> <span class="o">:</span> <span class="mi">0</span><span class="o">,</span>
  <span class="nx">equals</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">test</span><span class="p">){</span>
             <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">==</span><span class="nx">test</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">==</span><span class="nx">test</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
           <span class="p">}</span><span class="o">,</span>
  <span class="nx">change</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">dif</span><span class="p">){</span>
             <span class="k">var</span> <span class="nx">val</span><span class="o">=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">next</span><span class="p">(</span><span class="k">this</span><span class="o">,</span><span class="nx">dif</span><span class="p">);</span>
             <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">val</span><span class="p">.</span><span class="nx">x</span><span class="o">;</span>
             <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">val</span><span class="p">.</span><span class="nx">y</span><span class="o">;</span>
             <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
           <span class="p">}</span>
 <span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">NORTH</span><span class="o">=</span><span class="k">new</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">(</span><span class="mi">0</span><span class="o">,-</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">SOUTH</span><span class="o">=</span><span class="k">new</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">EAST</span><span class="o">=</span><span class="k">new</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="p">);</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">WEST</span><span class="o">=</span><span class="k">new</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="mi">0</span><span class="p">);</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="o">=</span><span class="p">[</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">NORTH</span><span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">EAST</span> <span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">SOUTH</span><span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">WEST</span>
<span class="p">];</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">FORWORD</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGHT</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">BACKWORD</span><span class="o">=</span><span class="mi">2</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT</span><span class="o">=</span><span class="mi">3</span><span class="o">;</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">next</span><span class="o">=</span><span class="k">function</span><span class="p">(</span><span class="nx">current</span><span class="o">,</span><span class="nx">change</span><span class="p">){</span>
  <span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">for</span><span class="p">(</span> <span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="p">[</span><span class="nx">i</span><span class="p">])){</span> <span class="k">break</span><span class="o">;</span> <span class="p">}</span>
  <span class="p">}</span>
  <span class="nx">i</span><span class="o">+=</span><span class="nx">change</span><span class="o">;</span>
  <span class="nx">i</span><span class="o">%=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
  <span class="k">return</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Ant</span><span class="o">=</span><span class="k">function</span><span class="p">(){};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Ant</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span>
  <span class="nx">x</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span>
  <span class="nx">y</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span>
  <span class="nx">direction</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
  <span class="nx">color</span> <span class="o">:</span> <span class="kc">null</span><span class="o">,</span>
  <span class="nx">go</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">lr</span><span class="p">){</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">change</span><span class="p">(</span><span class="nx">lr</span><span class="p">);</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">x</span><span class="o">;</span>
         <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">y</span><span class="o">;</span>
         <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">==</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="p">}</span>
         <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="p">}</span>
         <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">==</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="p">}</span>
         <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">){</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="p">}</span>
         <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
       <span class="p">}</span><span class="o">,</span>
  <span class="nx">eat</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">cell</span><span class="o">,</span><span class="nx">isblack</span><span class="p">){</span>
          <span class="k">var</span> <span class="nx">color</span> <span class="o">=</span> <span class="p">(</span><span class="nx">isblack</span><span class="p">)</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">:</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">BLACK</span><span class="o">;</span>
          <span class="nx">cell</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="o">=</span><span class="nx">color</span><span class="o">;</span>
        <span class="p">}</span><span class="o">,</span>
  <span class="nx">action</span> <span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">cells</span><span class="p">){</span>
             <span class="k">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">;</span>
             <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">]){</span>
               <span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span><span class="o">=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">prepareCell</span><span class="p">();</span>
               <span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="s2">&quot;absolute&quot;</span><span class="o">;</span>
               <span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="o">;</span>
               <span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="mi">3</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="o">;</span>
             <span class="p">}</span>
             <span class="k">var</span> <span class="nx">isblack</span><span class="o">=</span><span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">].</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="o">==</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">BLACK</span><span class="p">);</span>
             <span class="k">this</span><span class="p">.</span><span class="nx">eat</span><span class="p">(</span><span class="nx">cells</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span><span class="o">,</span><span class="nx">isblack</span><span class="p">);</span>
             <span class="k">var</span> <span class="nx">choice</span> <span class="o">=</span> <span class="p">(</span><span class="nx">isblack</span><span class="p">)</span> <span class="o">?</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">RIGHT</span>
                                    <span class="o">:</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">LEFT</span><span class="o">;</span>
             <span class="k">this</span><span class="p">.</span><span class="nx">go</span><span class="p">(</span><span class="nx">choice</span><span class="p">);</span>
             <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
           <span class="p">}</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="o">=</span><span class="p">{};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="o">=</span><span class="mi">100</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">cells</span><span class="o">=</span><span class="p">[];</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">clear</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="p">){</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="p">){</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">;</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="kc">null</span><span class="o">;</span>
  <span class="p">}</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="o">=</span><span class="p">[];</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">cells</span><span class="o">=</span><span class="p">[];</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="o">=</span><span class="p">[];</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">BLACK</span><span class="o">=</span><span class="s2">&quot;black&quot;</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">WHITE</span><span class="o">=</span><span class="s2">&quot;white&quot;</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">BLUE</span><span class="o">=</span><span class="s2">&quot;blue&quot;</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">RED</span><span class="o">=</span><span class="s2">&quot;red&quot;</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">YELLOW</span><span class="o">=</span><span class="s2">&quot;yellow&quot;</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">GREEN</span><span class="o">=</span><span class="s2">&quot;green&quot;</span><span class="o">;</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">COLORS</span><span class="o">=</span><span class="p">[</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">WHITE</span><span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">BLUE</span><span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">RED</span><span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">YELLOW</span><span class="o">,</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">GREEN</span>
<span class="p">];</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">prepareCell</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="k">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
  <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;3px&quot;</span><span class="o">;</span>
  <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="s2">&quot;3px&quot;</span><span class="o">;</span>
  <span class="nx">div</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">backgroundColor</span><span class="o">=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">BLACK</span><span class="o">;</span>
  <span class="k">return</span> <span class="nx">div</span><span class="o">;</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">addAnt</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="p">.</span><span class="nx">length</span> <span class="o">&lt;</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">COLORS</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">ant</span> <span class="o">=</span><span class="k">new</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Ant</span><span class="p">();</span>
    <span class="nx">ant</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="p">);</span>
    <span class="nx">ant</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">rowsize</span><span class="p">);</span>
    <span class="nx">ant</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">COLORS</span><span class="p">[</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="p">.</span><span class="nx">length</span><span class="p">];</span>
    <span class="k">var</span> <span class="nx">dirid</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="k">var</span> <span class="nx">dir</span> <span class="o">=</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">.</span><span class="nx">CYCLE</span><span class="p">[</span><span class="nx">dirid</span><span class="p">];</span>
    <span class="nx">ant</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="k">new</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Direction</span><span class="p">(</span><span class="nx">dir</span><span class="p">.</span><span class="nx">x</span><span class="o">,</span><span class="nx">dir</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ant</span><span class="p">);</span>
  <span class="p">};</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">Action</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="p">){</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">body</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">addAnt</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">ants</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">action</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">cells</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="p">){</span>
    <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;counter&quot;</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">value</span><span class="o">,</span><span class="mi">10</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Canvas</span><span class="p">.</span><span class="nx">counter</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">value</span><span class="o">;</span>
<span class="p">};</span>

<span class="c">/* -------------------------------------------------------------------------------- */</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">timer</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
<span class="nx">langton</span><span class="p">.</span><span class="nx">isTimerOn</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">startTimer</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">isTimerOn</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;run&quot;</span><span class="p">).</span><span class="nx">disabled</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;clear&quot;</span><span class="p">).</span><span class="nx">disabled</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">timer</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">executeTimer</span><span class="o">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">stopTimer</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">isTimerOn</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
<span class="p">};</span>

<span class="nx">langton</span><span class="p">.</span><span class="nx">executeTimer</span><span class="o">=</span><span class="k">function</span><span class="p">(){</span>
  <span class="k">if</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">isTimerOn</span><span class="p">)</span> <span class="nx">langton</span><span class="p">.</span><span class="nx">Action</span><span class="p">();</span>
  <span class="k">else</span><span class="p">{</span>
    <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">langton</span><span class="p">.</span><span class="nx">timer</span><span class="p">);</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;run&quot;</span><span class="p">).</span><span class="nx">disabled</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;clear&quot;</span><span class="p">).</span><span class="nx">disabled</span><span class="o">=</span><span class="kc">false</span><span class="o">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="o">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">function</span> <span class="nx">test</span><span class="p">(){</span>
  <span class="nx">langton</span><span class="p">.</span><span class="nx">Action</span><span class="p">();</span>
<span class="p">}</span>

    <span class="c">// --&gt;&lt;/script&gt;</span>
    <span class="o">&lt;</span><span class="nx">style</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span>
<span class="err">#</span><span class="nx">canvas</span><span class="p">{</span>
       <span class="nx">border</span><span class="o">:</span> <span class="mi">1</span><span class="nx">px</span> <span class="nx">solid</span> <span class="err">#</span><span class="mi">999</span><span class="o">;</span>
       <span class="nx">width</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">height</span><span class="o">:</span> <span class="mi">300</span><span class="nx">px</span><span class="o">;</span>
       <span class="nx">background</span><span class="o">-</span><span class="nx">color</span><span class="o">:</span> <span class="nx">black</span><span class="o">;</span>
<span class="p">}</span>
    <span class="o">&lt;/</span><span class="nx">style</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span>
             <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;run&quot;</span>
             <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;langton.startTimer();&quot;</span>
             <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;run&quot;</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span>
             <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;add&quot;</span>
             <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;langton.Canvas.addAnt();&quot;</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span>
             <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;stop&quot;</span>
             <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;langton.stopTimer();&quot;</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span>
             <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;clear&quot;</span>
             <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;langton.Canvas.clear()&quot;</span>
             <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;clear&quot;</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;counter&quot;</span> <span class="nx">disabled</span> <span class="nx">value</span><span class="o">=</span><span class="mi">0</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;canvas&quot;</span> <span class="nx">style</span><span class="o">=</span><span class="s2">&quot;position:relative&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9404/addtag/" class="addtag" id="addtag_9404">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9404/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9404/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9404"
  >-</span><span
  class="button yellow"
  id="rating_z_9404"
  >0</span><span 
  class="button green"
  id="rating_p_9404"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9404/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9419">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9419/">#9419</a>(<script language="JavaScript">print_time(new Date("2009/07/26 11:54 GMT"));</script><noscript>2009/07/26 11:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/postscript/">
	  PostScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p><a class="reference" href="/web/20100506231016/http://d.hatena.ne.jp/yshl/20090726">http://d.hatena.ne.jp/yshl/20090726</a> から転載です</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108</pre></td><td class="code"><div class="highlight"><pre>%!PS
gsave
    0 dict begin
        /fieldsize 100 def
        /white [1 1 1] def
        /field [ fieldsize{ [fieldsize{ white }repeat] }repeat ] def
        /check-mark{
            % ant -- bool
            begin
                field position-x get position-y get
                color eq
            end
        }def
        /draw-mark{
            % ant --
            begin
                field position-x get position-y color put
            end
        }def
        /erase-mark{
            % ant --
            begin
                field position-x get position-y white put
            end
        }def

        /generate-ant{
            % init-x init-y direction-x direction-y color -- dict
            5 dict begin
                /color exch def
                /direction-y exch def
                /direction-x exch def
                /position-y exch def
                /position-x exch def
                currentdict
            end
        }def
        /move{
            % ant --
            begin
                /position-x position-x direction-x add def
                /position-y position-y direction-y add def
            end
        }def
        /turn-left{
            % ant --
            begin
               direction-y neg
               direction-x
               /direction-y exch def
               /direction-x exch def
           end
        }def
        /turn-right{
            % ant --
            begin
                direction-y
                direction-x neg
                /direction-y exch def
                /direction-x exch def
            end
        }def
        
        /draw-field{
            2 2 scale
            0 1 fieldsize 1 sub{
                % x
                0 1 fieldsize 1 sub{
                % x y
                    field 2 index get 1 index get
                    aload pop setrgbcolor
                    2 copy 1 1 rectfill
                    pop
                }for
                pop
            }for
            showpage
        }def

        /ant1
            fieldsize 2 idiv dup 0 1 [0 0 0] generate-ant
        def
        0 1 20000{
            ant1
            dup check-mark{
                dup erase-mark
                dup turn-right
                move
            }{
                dup draw-mark
                dup turn-left
                move
            }ifelse
            ant1 begin
                position-x dup 0 lt exch fieldsize ge or
                position-y dup 0 lt exch fieldsize ge or
                or
            end
            {
                exit
            }if
            % 20歩毎に表示
            20 mod 0 eq{
                draw-field
            }if
        }for
    end
grestore
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9419/addtag/" class="addtag" id="addtag_9419">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/postscript/">
		PostScript
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9419/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9419/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9419"
  >-</span><span
  class="button yellow"
  id="rating_z_9419"
  >0</span><span 
  class="button green"
  id="rating_p_9419"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9419/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9424">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/647/" target="_top">ivoryworks</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9424/">#9424</a>(<script language="JavaScript">print_time(new Date("2009/07/27 14:08 GMT"));</script><noscript>2009/07/27 14:08 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/hidemaru_macro/">
	  秀丸マクロ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>秀丸マクロで。
セルを全角で表現しているので、かなり幅が広くなってしまいます。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></td><td class="code"><div class="highlight"><pre>#w = 100;
#dct = 0;
$sp = &quot;　&quot;;
$line = &quot;&quot;;

#i = 0;
while (#i &lt; #w) {
    $line = $line+$sp;
    #i = #i + 1;
}
$line = $line+&quot;\n&quot;;

#i = 0;
while (#i &lt; #w) {
    insert $line;
    #i = #i + 1;
}
movetolineno #w,#w/2;

#i = 0;
while (1) {
    $ant = gettext(x, y, x+2, y);
    if ($ant == $sp) {
        overwrite &quot;○&quot;;
        #dct = (#dct+1)%4;
    } else {
        overwrite $sp;
        #dct = (((#dct+1)%4)+2)%4;
    }
    left;
    if (#dct == 0) {
        up;
    } else if (#dct == 1) {
        right;
    } else if (#dct == 2) {
        down;
    } else if (#dct == 3) {
        left;
    }
    if ((x &gt; #w*2-1)||(x == 0)||(y == 0)||(y &gt; #w-1)) {
        endmacro;
    }
}
endmacro;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9424/addtag/" class="addtag" id="addtag_9424">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/hidemaru_macro/">
		秀丸マクロ
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9424/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9424/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9424"
  >-</span><span
  class="button yellow"
  id="rating_z_9424"
  >0</span><span 
  class="button green"
  id="rating_p_9424"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9424/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9436">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/943/" target="_top">pa</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9436/">#9436</a>(<script language="JavaScript">print_time(new Date("2009/07/31 21:37 GMT"));</script><noscript>2009/07/31 21:37 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Tkで描画。
canvasを配置し、そこにドットを描く。
使うモジュールはTk, Tkclient。

メモ
・TKの使い方
・初期値つきの二次元配列の定義
・ドットの代わりにlineを使用している。メモリを沢山消費しているかも</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100506231016/http://www.vitanuova.com/inferno/papers/descent.html">A Descent into Limbo </a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101</pre></td><td class="code"><div class="highlight"><pre>implement d276;
# doukaku?276 Langton

include &quot;sys.m&quot;;
    sys:Sys;
include &quot;draw.m&quot;;
    draw: Draw;
include &quot;tk.m&quot;;
    tk: Tk;
include &quot;tkclient.m&quot;;
    tkclient: Tkclient;

d276: module {
    init: fn(ctxt: ref Draw-&gt;Context, argv: list of string);
};

init(ctxt: ref Draw-&gt;Context, argv: list of string)
{
    sys = load Sys Sys-&gt;PATH;
    sys-&gt;pctl(sys-&gt;NEWPGRP, nil);
    draw = load Draw Draw-&gt;PATH;
    tk = load Tk Tk-&gt;PATH;
    tkclient = load Tkclient Tkclient-&gt;PATH;

    # canvas size
    height := 128;
    width := 128;

    pixel := array [width] of { * =&gt; array [height] of { * =&gt; 0}}; # 2dimensional array
    curx := width/2;
    cury := height/2;
    dir := 0; # N: 0 E: 1 S: 2 W: 3

    tkclient-&gt;init();

    if(ctxt == nil)
        ctxt = tkclient-&gt;makedrawcontext();

    (win, wmctl) := tkclient-&gt;toplevel(ctxt, nil, &quot;d276&quot;, 0);

    # create canvas
    tk-&gt;cmd(win, sys-&gt;sprint(&quot;canvas .b -width %d -height %d -background white&quot;,width , height));
    tk-&gt;cmd(win, &quot;pack .b&quot;);
    tk-&gt;cmd(win, &quot;update&quot;);
    
    tkclient-&gt;onscreen(win, nil);
    tkclient-&gt;startinput(win, &quot;kbd&quot;::&quot;ptr&quot;::nil);

    for(;;){
        # toggle pixel and turn
        color :=pixel[curx][cury];
        cstr : string;
        if(color){
            cstr = &quot;white&quot;;
            color = 0;
            dir += 1;
            if(dir &gt; 3) dir = 0;
        }else{
            cstr = &quot;black&quot;;
            color = 1;
            dir -= 1;
            if(dir &lt; 0) dir = 3;
        }
        pixel[curx][cury] = color;

        # Plot (using line)
        tk-&gt;cmd(win, sys-&gt;sprint(&quot;.b create line %d %d %d %d -fill %s&quot;, curx,cury, curx,cury,cstr));
        tk-&gt;cmd(win, &quot;update&quot;);

        # update direction
        case dir{
            0 =&gt;
                cury--;
            1 =&gt;
                curx++;
            2 =&gt;
                cury++;
            3 =&gt;
                curx--;
        }

        # if it reaches edge, it stop
        if((curx &lt; 0) || (curx &gt;= width) || (cury &lt; 0) || (cury &gt;= height)){
            break;
        }

    }

    # Window event loop?
    for(;;) alt{
        s := &lt;-win.ctxt.kbd =&gt;
            tk-&gt;keyboard(win, s);
        s := &lt;-win.ctxt.ptr =&gt;
            tk-&gt;pointer(win, *s);
        s := &lt;-win.ctxt.ctl or
        s = &lt;-win.wreq or
        s = &lt;-wmctl =&gt;
            if(s == &quot;exit&quot;)
                return;
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9436/addtag/" class="addtag" id="addtag_9436">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/Limbo/">Limbo</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9436/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9436/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9436"
  >-</span><span
  class="button yellow"
  id="rating_z_9436"
  >0</span><span 
  class="button green"
  id="rating_p_9436"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9436/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9438">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1089/" target="_top">noriscape</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9438/">#9438</a>(<script language="JavaScript">print_time(new Date("2009/08/02 02:34 GMT"));</script><noscript>2009/08/02 02:34 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/matlab/">
	  Matlab
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  GNU&nbsp;Octave&nbsp;3.0.1で動作確認<br/>アリの行動履歴を3次元表示します。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre>world = zeros(100,100);
dirs = [[0,-1];[1,0];[0,1];[-1,0]];
posX = [60]; % X座標履歴
posY = [40]; % Y座標履歴
dir = 0;
while posX(1) &gt; 0 &amp; posX(1) &lt;= 100 &amp; posY(1) &gt; 0 &amp; posY(1) &lt;= 100;
  if world(posX(1),posY(1)) == 1
    dir = mod(dir+1,4); % 右折
  else
    dir = mod(dir-1,4); % 左折
  end;
  world(posX(1),posY(1)) = abs(world(posX(1),posY(1))-1); % 白黒反転
  posX = [[posX(1)+dirs(dir+1,1)],posX]; % X方向の移動
  posY = [[posY(1)+dirs(dir+1,2)],posY]; % Y方向の移動
end;
plot3(posX,posY,length(posX):-1:1); % 軌跡表示 (Z軸:時間)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9438/addtag/" class="addtag" id="addtag_9438">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/Octave/">Octave</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/matlab/">
		Matlab
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9438/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9438/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9438"
  >-</span><span
  class="button yellow"
  id="rating_z_9438"
  >0</span><span 
  class="button green"
  id="rating_p_9438"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9438/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9457">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/959/" target="_top">uehaj</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9457/">#9457</a>(<script language="JavaScript">print_time(new Date("2009/08/08 08:25 GMT"));</script><noscript>2009/08/08 08:25 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>面白いですね。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90</pre></td><td class="code"><div class="highlight"><pre>// 盤面の幅
WIDTH=100
HEIGHT=100

// 盤面の値
WHITE=0
BLACK=1

// 上下左右移動する際のリニア増減分
UP_DIFF=-WIDTH
RIGHT_DIFF=+1
DOWN_DIFF=+WIDTH
LEFT_DIFF=-1

// 上下左右移動に対応するリニア増減分を保存してある配列
direcVec=[UP_DIFF,RIGHT_DIFF,DOWN_DIFF,LEFT_DIFF]

// 上下左右の方向を表す定数値
UP=0
RIGHT=1
DOWN=2
LEFT=3

def move(x, y, dir) {
  def pos = x + y*WIDTH
  pos += direcVec[dir]
  if (! (pos in (0 ..&lt; WIDTH*HEIGHT))) {
    throw new Exception(&quot;over&quot;)
  }
  x = pos % WIDTH
  y = pos.intdiv(WIDTH)
  return [x, y]
}

def reverse(x, y) {
  def pos = x + y*WIDTH
  bd[pos] = -(bd[pos]-1)
}

def color(x, y) {
  def pos = x + y*WIDTH
  bd[pos]
}

def turnRight(dir) {
  (dir+1) % 4
}

def turnLeft(dir) {
  (dir-1) % 4
}

def displayBoard() {
  for (int y=0; y&lt;HEIGHT; y++) {
    for (int x=0; x&lt;WIDTH; x++) {
      print bd[x + y*WIDTH] == WHITE ? &#39; &#39; : &#39;*&#39;
    }
    println &quot;&quot;
  }
}

def doit() {
  def dir = RIGHT
  while (true) {
    def oldX=x
    def oldY=y
    if (color(x,y) == WHITE) { // 白なら右回転
      dir = turnRight(dir)
    }
    else { // 白ではないなら左回転
      dir = turnLeft(dir)
    }
    (x,y) = move(x,y,dir)
    reverse(oldX, oldY)
  }
}

// 盤面
bd = new int[WIDTH*HEIGHT]

// 画面の中央に配置
x = WIDTH.intdiv(2)
y = HEIGHT.intdiv(2)

try {
  doit()
}
catch (Exception e) {
  displayBoard()
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9457/addtag/" class="addtag" id="addtag_9457">タグ</a>:
	
    
    <a href="/web/20100506231016/http://ja.doukaku.org/tag/groovy/">groovy</a>
    
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9457/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9457/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9457"
  >-</span><span
  class="button yellow"
  id="rating_z_9457"
  >0</span><span 
  class="button green"
  id="rating_p_9457"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9457/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9512">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1094/" target="_top">Wiles</a><a href="/web/20100506231016/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9512/">#9512</a>(<script language="JavaScript">print_time(new Date("2009/08/25 00:52 GMT"));</script><noscript>2009/08/25 00:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>コマンドライン上で描写するので、フィールドが狭いですがギリギリ列の生成は確認できました。列が生成されるまで時間がかかったので100回の移動ごとに描写していますが、この辺は適宜変更してください。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;</span>
<span class="cp">#include&lt;stdlib.h&gt;</span>
<span class="cp">#define XMAX 75                                </span><span class="c">//フィールドの横幅</span>
<span class="cp">#define YMAX 75                                </span><span class="c">//フィールドの縦幅</span>
<span class="cp">#define CNTSPACE 100                        </span><span class="c">//描写間隔</span>

<span class="kt">char</span> <span class="n">field</span><span class="p">[</span><span class="n">XMAX</span><span class="p">][</span><span class="n">YMAX</span><span class="p">];</span>

<span class="k">enum</span> <span class="n">Direction</span> <span class="p">{</span><span class="n">up</span><span class="p">,</span> <span class="n">right</span><span class="p">,</span> <span class="n">down</span><span class="p">,</span> <span class="n">left</span><span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">enum</span> <span class="n">Direction</span> <span class="n">dir</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    
    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">XMAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>                <span class="c">//0が白、1が黒なので全て白に初期化</span>
    <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">YMAX</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">x</span> <span class="o">=</span> <span class="n">XMAX</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>                            <span class="c">//フィールド中央からスタート</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">YMAX</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">dir</span> <span class="o">=</span> <span class="n">up</span><span class="p">;</span>                                <span class="c">//進行方向は上からスタート</span>
    
    <span class="k">while</span><span class="p">((</span><span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">XMAX</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">y</span> <span class="o">&lt;</span> <span class="n">YMAX</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">cnt</span><span class="o">++</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">])</span>
        <span class="p">{</span>
            <span class="n">field</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">left</span><span class="p">)</span>    <span class="n">dir</span> <span class="o">=</span> <span class="n">up</span><span class="p">;</span>
            <span class="k">else</span>    <span class="n">dir</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">field</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">dir</span> <span class="o">==</span> <span class="n">up</span><span class="p">)</span>    <span class="n">dir</span> <span class="o">=</span> <span class="n">left</span><span class="p">;</span>
            <span class="k">else</span>    <span class="n">dir</span><span class="o">--</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">dir</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">case</span> <span class="nl">up:</span>    <span class="n">y</span><span class="o">++</span><span class="p">;</span>        <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="nl">down:</span>    <span class="n">y</span><span class="o">--</span><span class="p">;</span>        <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="nl">right:</span>    <span class="n">x</span><span class="o">++</span><span class="p">;</span>        <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="nl">left:</span>    <span class="n">x</span><span class="o">--</span><span class="p">;</span>        <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="n">CNTSPACE</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">system</span><span class="p">(</span><span class="s">&quot;cls&quot;</span><span class="p">);</span>
            <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">XMAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">YMAX</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="n">field</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">?</span> <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;@&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;_&#39;</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9512/addtag/" class="addtag" id="addtag_9512">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9512/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9512/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9512"
  >-</span><span
  class="button yellow"
  id="rating_z_9512"
  >0</span><span 
  class="button green"
  id="rating_p_9512"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9512/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9639">
  <p class="banner"><a href="/web/20100506231016/http://ja.doukaku.org/user/1106/" target="_top">tsubo</a>

	
	&nbsp;
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9639/">#9639</a>(<script language="JavaScript">print_time(new Date("2009/10/21 11:40 GMT"));</script><noscript>2009/10/21 11:40 GMT</noscript>)
	
	
	
	[<a href="/web/20100506231016/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Scalaで。春っぽい雰囲気にしてみました！？（季節を無視して）。ScalaどころかSwingアプリとしても拙い作りかもしれません。。。
paintComponent内で結構ぐるぐる回してもいけるもんなんですね。もしかしたら、マシンパワーによっては表示が追いつかないのかもしれません。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89</pre></td><td class="code"><div class="highlight"><pre>import scala.collection.mutable.ListBuffer
import scala.concurrent.ops._
import scala.swing._
import scala.util._
import java.awt.{Graphics, Dimension}

trait AntWorld {
    protected val w:Int
    protected val h:Int
    protected def reflect
     var ants:List[Ant] = Nil
    lazy val table:List[Array[Int]] = List.tabulate(w, {_=&gt;Array.make(h,0)})
    private val r = new Random()
    def ant(c:Int) = new Ant(r.nextInt(w)/2+w/4, r.nextInt(h)/2+h/4, c)
    def antStart() = {
        spawn {
            while(true) {
                ants.foreach {_.move}
                reflect
                Thread.sleep(1)
            }
        }
    }
    class Ant(var x:Int, var y:Int, c:Int) {
        private val rads = List((0,-1), (1,0), (0,1), (-1,0))
        private val (initX, initY) = (x, y)
        private var radi = 0
        def init = { x = initX; y = initY; radi = 0 }
        def move = {
            val v = table(x)(y)
            table(x)(y) = (if (v != 0) 0 else c)
            radi = (radi + (if (v != 0) 1 else 3) ) % 4
            x = (x + rads(radi)._1 + w) % w
            y = (y + rads(radi)._2 + h) % h
        }
    }
}

object LangtonAnt extends SimpleGUIApplication {
    import java.awt.Color
    val aSize = 5
    def top = new MainFrame {
        title = &quot;Langton&#39;s Ant&quot;
        val panel = new Panel() with AntWorld {
            def reflect = repaint
            val (w, h) = (100, 100)
            peer.setPreferredSize(new Dimension(w * aSize, h * aSize))
            override def paintComponent(g:Graphics) = {
                super.paintComponent(g)
                for (x &lt;- 0 until w; y &lt;- 0 until h) {
                    table(x)(y) match {
                        case 0 =&gt; g.setColor(Color.WHITE)
                        case c =&gt; g.setColor(new Color(c))
                    }
                    g.fillRect(x * aSize, y * aSize, aSize, aSize)
                }
            }
            def clear = {
                table.foreach { a =&gt; for (i &lt;- 0 until a.length) a(i) = 0 }
            }
            def reset = {
                ants =
                    ant(Color.GREEN.getRGB) ::
                    ant(Color.PINK.getRGB) ::
                    ant(Color.BLUE.getRGB) ::
                    ant(Color.RED.getRGB) ::
                    ant(Color.CYAN.getRGB) ::
                    Nil
                clear
            }
            def replay = {
                this.synchronized {
                    ants.foreach( _.init )
                    clear
                }
            }
            reset
        }
        contents = new BoxPanel(Orientation.Vertical ) {
            contents += new BoxPanel(Orientation.Horizontal ) {
                contents += new Button(Action(&quot;Clear&quot;){ panel.clear })
                contents += new Button(Action(&quot;Replay&quot;){ panel.replay })
                contents += new Button(Action(&quot;Reset&quot;){ panel.reset })
            }
            contents += panel
        }
        panel.antStart
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100506231016/http://ja.doukaku.org/comment/9639/addtag/" class="addtag" id="addtag_9639">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100506231016/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9639/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100506231016/http://ja.doukaku.org/comment/9639/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9639"
  >-</span><span
  class="button yellow"
  id="rating_z_9639"
  >0</span><span 
  class="button green"
  id="rating_p_9639"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100506231016/http://ja.doukaku.org/276/reply_to/9639/">
  返信
  </a>]
  </div>
</div>
</div>




  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100506231016if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100506231016/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100506231016/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100506231016/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100506231016/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100506231016/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100506231016/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100506231016/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100506231016/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100506231016/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100506231016/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100506231016im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100506231016/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100506231016/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100506231016/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100506231016/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100506231016/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100506231016/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100506231016/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100506231016/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100506231016im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100506231016/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100506231016/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100506231016/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100506231016js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 23:10:16 May 6, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:15:51 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
