
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
BFコンパイラー
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20090527035856cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20090527035856cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20090527035856cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20090527035856/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20090527035856/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20090527035856js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20090527035856js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20090527035856js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20090527035856js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app0.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/80\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "27";
var displayMonth = "May";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/80/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090527035856" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202125918/http://ja.doukaku.org/80/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 3:58:56 May 27, 2009">MAY</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jun
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081202125918/http://ja.doukaku.org/80/nested/" title="12:59:18 Dec 2, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 3:58:56 May 27, 2009">27</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080412144900/http://ja.doukaku.org/80/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="12 Apr 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 3:58:56 May 27, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20090527035856*/http://ja.doukaku.org/80/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>7 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 27 May 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:-1:011100000001_2009:4:000010000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20090527035856/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20090527035856/http://ja.doukaku.org/80/">BFコンパイラー</a>
</h2>

    





<div class="comment" id="comment3886">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3886/">#3886</a>(<script language="JavaScript">print_time(new Date("2007/11/12 01:21 GMT"));</script><noscript>2007/11/12 01:21 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>「どう書く?」でまだ出ていないのが不思議なお題。それが<a href="/web/20090527035856/http://ja.doukaku.org/80/nested/404" title="Blog Not Found:brainfu.k - perl と javascript による処理系">BF</a>処理系。
   ここでは、BFで書かれたソースを、同じ言語に変換するコンパイラーを募集します。
</p>
<p>私自身、すでにPerlとJavaScriptに関しては
   <a href="/web/20090527035856/http://blog.livedoor.jp/dankogai/archives/50545151.html">http://blog.livedoor.jp/dankogai/archives/50545151.html</a>
   でやっているのですが、他の言語バージョンも是非見たいので。
</p>
<p>Dan the Brainf.ucker
</p>



	</div>
	
	<p class="link">
	  参考: <a href="/web/20090527035856/http://ja.wikipedia.org/wiki/Brainfuck">Brainfuck - Wikipedia</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3886/addtag/" class="addtag" id="addtag_3886">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3886"
  >-</span><span
  class="button yellow"
  id="rating_z_3886"
  >0</span><span 
  class="button green"
  id="rating_p_3886"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3886/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3886/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3947">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3947/">#3947</a>(<script language="JavaScript">print_time(new Date("2007/11/13 12:48 GMT"));</script><noscript>2007/11/13 12:48 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>以下のようにonelinerで可能です。
   ただし<code>Language::BF 0.03</code>が必要です。 
   <a href="/web/20090527035856/http://coderepos.org/share/browser/lang/perl/Language-BF/trunk">CodeRepos経由</a>
   で、
</p>
<ul>
 <li>
     svn co svn.coderepos.org/share/lang/perl/Language-BF
 </li>

 <li>
     cd Language-BF/trunk
 </li>

 <li>
     perl Makefile.PL
 </li>

 <li>
     make install
 </li>
</ul>
<p>するか、CPANにVersion 0.03が現れるのをお待ち下さい。
</p>
<p>Dan the Brainf.cker
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre><span class="n">perl</span> <span class="o">-</span><span class="nn">MLanguage::</span><span class="n">BF</span> <span class="o">\</span>
  <span class="o">-</span><span class="n">e</span> <span class="s">&#39;print Language::BF-&gt;new_from_file(shift)-&gt;as_perl&#39;</span> <span class="n">t</span><span class="o">/</span><span class="n">hello</span><span class="o">.</span><span class="n">bf</span> <span class="o">\</span>
  <span class="o">|</span> <span class="n">perl</span>
<span class="n">Hello</span> <span class="n">World</span><span class="o">!</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3947/addtag/" class="addtag" id="addtag_3947">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/oneliner/">oneliner</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3947/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3947/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3947"
  >-</span><span
  class="button yellow"
  id="rating_z_3947"
  >0</span><span 
  class="button green"
  id="rating_p_3947"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3886/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3947/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3947/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  



<div class="indent">
<a href="/web/20090527035856/http://ja.doukaku.org/80/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20090527035856/http://ja.doukaku.org/80/flatten/">フラット表示</a> 
<a href="/web/20090527035856/http://ja.doukaku.org/80/">非表示</a> 


  

  
    





<div class="comment" id="comment3941">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3941/">#3941</a>(<script language="JavaScript">print_time(new Date("2007/11/13 11:01 GMT"));</script><noscript>2007/11/13 11:01 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ひさびさの一番かな？

入力を文字列にしたい場合なんかは
Console.withInを使うとできます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre>import scala.io.Source.fromFile

object BF{
  def main(args:Array[String]) = {
    if(args.size == 0) print(&quot;scala BF [sourcecode filename]&quot;)
    else
    args.foreach{f=&gt; (new Machine).interpret(fromFile(f).mkString(&quot;&quot;)) }
  }
}

object Machine {
  final val MEM = 0xffffff
  final val VAL = 0xff
}

class Machine{
  var _p = 0
  val _mem = new Array[int](Machine.MEM)
  def p_=(v:int) = _p = v&amp;Machine.MEM
  def p = _p
  def mem_=(v:int) = _mem(p)=v&amp;Machine.VAL
  def mem = _mem(p)

  def abort = error(&quot;Missing corresponding parenthesis.&quot;)

  def interpret(code:String):unit = interpret(code.toArray)
  def interpret(code:Array[char]):unit = {
    val (s,m) = ((List[int](), List[(int,int)]()) /: code.zipWithIndex){
      (r,c) =&gt; c._1 match {
        case &#39;[&#39; =&gt; (c._2::r._1, r._2)
        case &#39;]&#39; =&gt; r._1 match {
          case x::xs =&gt; (xs, (x,c._2)::(c._2,x)::r._2)
          case _ =&gt; abort
        }
        case _   =&gt; r
    }}
    if(s.size &gt; 0) abort
    val parenMap = Map(m:_*)

    var i = -1;while({i=i+1;i&lt;code.size}) code(i) match {
      case &#39;&gt;&#39; =&gt; p = p+1
      case &#39;&lt;&#39; =&gt; p = p-1
      case &#39;+&#39; =&gt; mem = mem+1
      case &#39;-&#39; =&gt; mem = mem-1
      case &#39;.&#39; =&gt; print(mem.asInstanceOf[char])
      case &#39;,&#39; =&gt; mem = readChar.asInstanceOf[int]
      case &#39;[&#39; if mem == 0 =&gt; i = parenMap(i)
      case &#39;]&#39; if mem != 0 =&gt; i = parenMap(i)
      case _   =&gt; ()
    }
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3941/addtag/" class="addtag" id="addtag_3941">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3941/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3941/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3941"
  >-</span><span
  class="button yellow"
  id="rating_z_3941"
  >0</span><span 
  class="button green"
  id="rating_p_3941"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3941/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3941/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3960">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3960/">#3960</a>(<script language="JavaScript">print_time(new Date("2007/11/13 14:12 GMT"));</script><noscript>2007/11/13 14:12 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>題意を読み間違えてたので。

こっちのほうがかなり楽です。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre>import scala.io.Source.fromFile

object BFC{
  def main(args:Array[String]) = {
    if(args.size == 0){
      println(&quot;Usage:scala BFC [sourcecode filename]&quot;)
    }else{
      println(&quot;&quot;&quot;
        object Machine {
          final val MEM = 0xffffff
          final val VAL = 0xff
        }

        class Machine{
          var _p = 0
          val _mem = new Array[int](Machine.MEM)
          def p_=(v:int) = _p = v&amp;Machine.MEM
          def p = _p
          def mem_=(v:int) = _mem(p)=v&amp;Machine.VAL
          def mem = _mem(p)

          def eval = {
      &quot;&quot;&quot;)
      val code = fromFile(args(0)).mkString(&quot;&quot;).toList
      if(code.count(&#39;[&#39;==_) != code.count(&#39;]&#39;==_)) {
        error(&quot;Missing corresponding parenthesis.&quot;)
      }
      code.foreach(c=&gt;println(c match {
        case &#39;&gt;&#39; =&gt; &quot;p = p+1&quot;
        case &#39;&lt;&#39; =&gt; &quot;p = p-1&quot;
        case &#39;+&#39; =&gt; &quot;mem = mem+1&quot;
        case &#39;-&#39; =&gt; &quot;mem = mem-1&quot;
        case &#39;.&#39; =&gt; &quot;print(mem.asInstanceOf[char])&quot;
        case &#39;,&#39; =&gt; &quot;mem = readChar.asInstanceOf[int]&quot;
        case &#39;[&#39; =&gt; &quot;while(mem != 0){&quot;
        case &#39;]&#39; =&gt; &quot;}&quot;
        case _   =&gt; &quot;&quot;
      }))
      println(&quot;}};(new Machine).eval;&quot;)
    }
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3960/addtag/" class="addtag" id="addtag_3960">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3960/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3960/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3960"
  >-</span><span
  class="button yellow"
  id="rating_z_3960"
  >0</span><span 
  class="button green"
  id="rating_p_3960"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3941/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3960/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3960/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment3945">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/">#3945</a>(<script language="JavaScript">print_time(new Date("2007/11/13 12:14 GMT"));</script><noscript>2007/11/13 12:14 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  お題を見て「BF→言語Ａへのトランスレータを言語Ａで製作する」のだと思ったんですけど、お手本見るとなんかちょっと違う感じがしたので全部やってみました (^-^;;
BF ソースファイルから C# ソースと実行ファイルを生成してそれを実行します。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.CodeDom.Compiler</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Reflection</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">Microsoft.CSharp</span><span class="p">;</span>
<span class="k">static</span> <span class="k">class</span> <span class="nc">BFCompiler</span> <span class="k">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="m">0</span> <span class="p">&lt;</span> <span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">&amp;&amp;</span> <span class="n">File</span><span class="p">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]))</span> <span class="k">{</span>
            <span class="n">using</span><span class="p">(</span><span class="n">StringWriter</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="p">())</span>
            <span class="n">using</span><span class="p">(</span><span class="n">StreamReader</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]))</span> <span class="k">{</span>
                <span class="n">Stack</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">labels</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stack</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
                <span class="kt">int</span> <span class="n">label_num</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
                <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;using System; static class BF {&quot;</span><span class="p">);</span>
                <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;public static void Main() {&quot;</span><span class="p">);</span>
                <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;byte[] m = new byte[256]; int p = 0;&quot;</span><span class="p">);</span>
                <span class="k">foreach</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span> <span class="k">in</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadToEnd</span><span class="p">())</span> <span class="k">{</span>
                    <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">{</span>
                        <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="p">:</span> <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;m[p]++;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="p">:</span> <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;m[p]--;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">:</span> <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;p++;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">:</span> <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;p--;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="p">:</span> <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Console.Write((char)m[p]);&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="p">:</span> <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;m[p] = (byte)Console.Read();&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
                        <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="p">:</span> <span class="k">{</span>
                            <span class="kt">string</span> <span class="n">ll</span> <span class="p">=</span> <span class="s">&quot;L&quot;</span> <span class="p">+</span> <span class="p">(</span><span class="n">label_num</span><span class="p">++);</span>
                            <span class="n">labels</span><span class="p">.</span><span class="n">Push</span><span class="p">(</span><span class="n">ll</span><span class="p">);</span>
                            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;if (m[p] == 0) goto {0}_END;&quot;</span><span class="p">,</span> <span class="n">ll</span><span class="p">);</span>
                            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}_START:;&quot;</span><span class="p">,</span> <span class="n">ll</span><span class="p">);</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="k">}</span>
                        <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="p">:</span> <span class="k">{</span>
                            <span class="kt">string</span> <span class="n">ll</span> <span class="p">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">Pop</span><span class="p">();</span>
                            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;if (m[p] != 0) goto {0}_START;&quot;</span><span class="p">,</span> <span class="n">ll</span><span class="p">);</span>
                            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}_END:;&quot;</span><span class="p">,</span> <span class="n">ll</span><span class="p">);</span>
                            <span class="k">break</span><span class="p">;</span>
                        <span class="k">}</span>
                    <span class="k">}</span>
                <span class="k">}</span>
                <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;}}&quot;</span><span class="p">);</span>
                <span class="n">Generate</span><span class="p">(</span><span class="n">Path</span><span class="p">.</span><span class="n">GetFileNameWithoutExtension</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]),</span> <span class="n">sw</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="k">else</span> <span class="k">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;usage: bfc [sourcefile]&quot;</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Generate</span><span class="p">(</span><span class="kt">string</span> <span class="n">filename</span><span class="p">,</span> <span class="kt">string</span> <span class="n">cs_code</span><span class="p">)</span> <span class="k">{</span>
        <span class="c">// ソースファイル生成</span>
        <span class="k">using</span> <span class="p">(</span><span class="n">StreamWriter</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="n">filename</span> <span class="p">+</span> <span class="s">&quot;.cs&quot;</span><span class="p">))</span> <span class="k">{</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">cs_code</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="c">// 実行ファイル生成</span>
        <span class="n">CompilerParameters</span> <span class="n">param</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CompilerParameters</span><span class="p">();</span>
        <span class="n">param</span><span class="p">.</span><span class="n">OutputAssembly</span> <span class="p">=</span> <span class="n">filename</span> <span class="p">+</span> <span class="s">&quot;.exe&quot;</span><span class="p">;</span>
        <span class="n">param</span><span class="p">.</span><span class="n">GenerateExecutable</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
        <span class="n">CompilerResults</span> <span class="n">rs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CSharpCodeProvider</span><span class="p">().</span><span class="n">CompileAssemblyFromSource</span><span class="p">(</span><span class="n">param</span><span class="p">,</span> <span class="n">cs_code</span><span class="p">);</span>
        <span class="c">// 実行</span>
        <span class="n">rs</span><span class="p">.</span><span class="n">CompiledAssembly</span><span class="p">.</span><span class="n">GetType</span><span class="p">(</span><span class="s">&quot;BF&quot;</span><span class="p">).</span><span class="n">GetMethod</span><span class="p">(</span><span class="s">&quot;Main&quot;</span><span class="p">).</span><span class="n">Invoke</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/addtag/" class="addtag" id="addtag_3945">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3945"
  >-</span><span
  class="button yellow"
  id="rating_z_3945"
  >0</span><span 
  class="button green"
  id="rating_p_3945"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/">
    2
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3945/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3949">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3949/">#3949</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:10 GMT"));</script><noscript>2007/11/13 13:10 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>&gt;お題を見て「BF→言語Ａへのトランスレータを言語Ａで製作する」のだと思ったんですけど</p>
<p>それであっていると思いますよ。お手本は
「Language::BF-&gt;new_from_file(shift)-&gt;as_perl」というコードで「t/hello.bf」というBrainf*ckで書かれたコードを読んでPerlに変換し、その出力をさいごの「| perl」でもう一度Perlに食わせて実行させているわけです。</p>
<pre class="literal-block">
perl -MLanguage::BF \
-e 'print Language::BF-&gt;new_from_file(shift)-&gt;as_perl' t/hello.bf \
| perl
Hello World!
</pre>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3949/addtag/" class="addtag" id="addtag_3949">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3949"
  >-</span><span
  class="button yellow"
  id="rating_z_3949"
  >0</span><span 
  class="button green"
  id="rating_p_3949"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3949/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3949/">
    2
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3949/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3951">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3951/">#3951</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:15 GMT"));</script><noscript>2007/11/13 13:15 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>SiroKuroさんがおっしゃっているお手本は
http://blog.livedoor.jp/dankogai/archives/50545151.html  

のほうだと思います。投稿時間を見てみるとわかります。

僕もURLの方だけみて勘違いしてました･･･
今から書き直します(^^;</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3951/addtag/" class="addtag" id="addtag_3951">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3951"
  >-</span><span
  class="button yellow"
  id="rating_z_3951"
  >0</span><span 
  class="button green"
  id="rating_p_3951"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3949/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3951/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3951/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3954">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3954/">#3954</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:36 GMT"));</script><noscript>2007/11/13 13:36 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  あ、ごめんなさい。yuin さんの仰るとおり、弾さんのブログを見ての疑問でした。弾さんのブログだと普通に実行してるみたいでしたので……。
んで、トランスレートかな？コンパイルかな？実行かな？と迷ったので全部やってみた感じです。どれか１つはあってると思いたい (^-^;;
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3954/addtag/" class="addtag" id="addtag_3954">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3954"
  >-</span><span
  class="button yellow"
  id="rating_z_3954"
  >0</span><span 
  class="button green"
  id="rating_p_3954"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3949/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3954/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3954/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3954/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3957">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3957/">#3957</a>(<script language="JavaScript">print_time(new Date("2007/11/13 14:03 GMT"));</script><noscript>2007/11/13 14:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>はっきりしなくてごめんなさい。にしおさんが言う通り。

コンパイラー(トランスレーター)
  BF ====&gt; 言語A
      言語A

というのが本来の趣旨で、そしてBFの場合こちらの方が

インタープリター(ランタイム)
  BF =&gt; 言語Aで書かれた実行環境

よりもずっと実装が簡単なので。
ちなみにLanguage::BFはどちらの機能も持っています。

Dan the Brainf.cker</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3957/addtag/" class="addtag" id="addtag_3957">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3957"
  >-</span><span
  class="button yellow"
  id="rating_z_3957"
  >0</span><span 
  class="button green"
  id="rating_p_3957"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3954/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3957/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3957/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4111">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4111/">#4111</a>(<script language="JavaScript">print_time(new Date("2007/11/16 13:06 GMT"));</script><noscript>2007/11/16 13:06 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  なんか弄ってたら得体の知れないものに……ｗ
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">static</span> <span class="k">class</span> <span class="nc">BFCompiler</span> <span class="k">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="m">0</span> <span class="p">==</span> <span class="n">args</span><span class="p">.</span><span class="n">Length</span> <span class="p">||</span> <span class="p">!</span><span class="n">File</span><span class="p">.</span><span class="n">Exists</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">])</span> <span class="p">?</span> <span class="s">&quot;usage: bfc [sourcefile]&quot;</span> <span class="p">:</span> <span class="s">&quot;using System;static class BF{static void Main(){byte[]m=new byte[256];int p=0;&quot;</span> <span class="p">+</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]).</span><span class="n">ReadToEnd</span><span class="p">().</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">,</span><span class="s">&quot;}&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">,</span><span class="s">&quot;while(m[p]!=0){&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">,</span><span class="s">&quot;Console.Write((char)m[p]);&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="s">&quot;m[p]=(byte)Console.Read();&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;+&quot;</span><span class="p">,</span><span class="s">&quot;m[p]++;&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;-&quot;</span><span class="p">,</span><span class="s">&quot;m[p]--;&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;&gt;&quot;</span><span class="p">,</span><span class="s">&quot;p++;&quot;</span><span class="p">).</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;&lt;&quot;</span><span class="p">,</span><span class="s">&quot;p--;&quot;</span><span class="p">)</span> <span class="p">+</span> <span class="s">&quot;}}&quot;</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4111/addtag/" class="addtag" id="addtag_4111">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4111/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4111/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4111"
  >-</span><span
  class="button yellow"
  id="rating_z_4111"
  >0</span><span 
  class="button green"
  id="rating_p_4111"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3945/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4111/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4111/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  

  
    





<div class="comment" id="comment3952">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/433/" target="_top">dpp</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/">#3952</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:17 GMT"));</script><noscript>2007/11/13 13:17 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ひねり無し。
python bf.py -o hello.py hello.bf  みたいな感じで使います。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>
<span class="k">from</span> <span class="nn">getopt</span> <span class="k">import</span> <span class="n">getopt</span>

<span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">bfcode</span><span class="p">):</span>
    <span class="n">depth</span> <span class="o">=</span> <span class="n">code</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">pycode</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="n">f</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">default</span><span class="p">[</span><span class="s">&#39;-o&#39;</span><span class="p">],</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
    
    <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;import sys&#39;</span><span class="p">)</span>
    <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;tape, ptr, code = {}, 0, 0&#39;</span><span class="p">)</span>
    
    <span class="k">while</span> <span class="n">code</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">bfcode</span><span class="p">):</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">bfcode</span><span class="p">[</span><span class="n">code</span><span class="p">]</span>
        
        <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;&gt;&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;ptr += 1&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;&lt;&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;ptr -= 1&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;+&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;tape[ptr] = tape.get(ptr, 0) + 1&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;-&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;tape[ptr] = tape.get(ptr, 0) - 1&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;,&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;tape[ptr] = sys.stdin.read(1)&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;.&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;sys.stdout.write(chr(tape.get(ptr, 0)))&#39;</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;[&#39;</span><span class="p">:</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s">&#39;while tape.get(ptr, 0):&#39;</span><span class="p">)</span>
            <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span>
            <span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;]&#39;</span><span class="p">:</span>
            <span class="n">depth</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        
        <span class="n">code</span> <span class="o">+=</span> <span class="mi">1</span>
    
    <span class="nb">file</span><span class="p">(</span><span class="n">default</span><span class="p">[</span><span class="s">&#39;-o&#39;</span><span class="p">],</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">pycode</span><span class="p">))</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">default</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;-o&#39;</span><span class="p">:</span> <span class="s">&#39;a.py&#39;</span><span class="p">}</span>
    <span class="n">optlist</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#39;o:&#39;</span><span class="p">,</span> <span class="p">[])</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">:</span>
        <span class="n">default</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">optlist</span><span class="p">)</span>
        <span class="n">encode</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">file</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">readlines</span><span class="p">()))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/addtag/" class="addtag" id="addtag_3952">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3952"
  >-</span><span
  class="button yellow"
  id="rating_z_3952"
  >0</span><span 
  class="button green"
  id="rating_p_3952"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/">
    2
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3952/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3963">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/433/" target="_top">dpp</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/">#3963</a>(<script language="JavaScript">print_time(new Date("2007/11/13 15:09 GMT"));</script><noscript>2007/11/13 15:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自己ツッコミ。
このままだと"～[]～" のようなBFコードがあった際にwhile文のところで文法エラーを起こすので、
']'が出た時にはpassをダミーで放り込んだ方がよさそうです。


あと、最初間違えてインタプリタを書いてしまった名残で変なやり方になっていました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre>def encode(bfcode):
<span class="gd">-   depth = code = 0 </span>
<span class="gi">+   depth = 0</span>
    pycode = []
    stack = []
    
    f = file(default[&#39;-o&#39;], &#39;w&#39;)
    
    pycode.append(&#39;import sys&#39;)
<span class="gd">-   pycode.append(&#39;tape, ptr, code = {}, 0, 0&#39;)</span>
<span class="gi">+   pycode.append(&#39;tape, ptr = {}, 0&#39;)</span>
    

<span class="gd">-     while code != len(bfcode):</span>
<span class="gd">-        c = bfcode[code]</span>
<span class="gi">+     for c in bfcode:</span>
        if c == &#39;&gt;&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;ptr += 1&#39;)
        elif c == &#39;&lt;&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;ptr -= 1&#39;)
        elif c == &#39;+&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;tape[ptr] = tape.get(ptr, 0) + 1&#39;)
        elif c == &#39;-&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;tape[ptr] = tape.get(ptr, 0) - 1&#39;)
        elif c == &#39;,&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;tape[ptr] = sys.stdin.read(1)&#39;)
        elif c == &#39;.&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;sys.stdout.write(chr(tape.get(ptr, 0)))&#39;)
        elif c == &#39;[&#39;:
            pycode.append(&#39;\t&#39; * depth + &#39;while tape.get(ptr, 0):&#39;)
            stack.append(depth)
            depth += 1
        elif c == &#39;]&#39;:
<span class="gi">+           pycode.append(&#39;\t&#39; * depth + &#39;pass&#39;)</span>
            depth = stack.pop()

<span class="gd">-    code += 1</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/addtag/" class="addtag" id="addtag_3963">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3963"
  >-</span><span
  class="button yellow"
  id="rating_z_3963"
  >0</span><span 
  class="button green"
  id="rating_p_3963"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3963/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3977">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/">#3977</a>(<script language="JavaScript">print_time(new Date("2007/11/13 17:43 GMT"));</script><noscript>2007/11/13 17:43 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>これまたifの羅列をHashに置き換え。ただし、pythonの場合、<code>[]</code>は少し特別扱いが必要。こちらはindent不要とは行かないので。
   あと、関数名やインターフェースも好みにあわせて変えました。
</p>
<p>Dan the Novice Snake Tamer
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/env python</span>
<span class="k">import</span> <span class="nn">sys</span>
<span class="k">from</span> <span class="nn">getopt</span> <span class="k">import</span> <span class="n">getopt</span>

<span class="k">def</span> <span class="nf">bf2py</span><span class="p">(</span><span class="n">bfcode</span><span class="p">):</span>
    <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">opcode</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">&#39;&gt;&#39;</span><span class="p">:</span><span class="s">&#39;ptr += 1&#39;</span><span class="p">,</span>
        <span class="s">&#39;&lt;&#39;</span><span class="p">:</span><span class="s">&#39;ptr -= 1&#39;</span><span class="p">,</span>
        <span class="s">&#39;+&#39;</span><span class="p">:</span><span class="s">&#39;tape[ptr] = tape.get(ptr, 0) + 1&#39;</span><span class="p">,</span>
        <span class="s">&#39;-&#39;</span><span class="p">:</span><span class="s">&#39;tape[ptr] = tape.get(ptr, 0) - 1&#39;</span><span class="p">,</span>
        <span class="s">&#39;,&#39;</span><span class="p">:</span><span class="s">&#39;tape[ptr] = sys.stdin.read(1)&#39;</span><span class="p">,</span>
        <span class="s">&#39;.&#39;</span><span class="p">:</span><span class="s">&#39;sys.stdout.write(chr(tape.get(ptr, 0)))&#39;</span><span class="p">,</span>
        <span class="s">&#39;[&#39;</span><span class="p">:</span><span class="s">&#39;while tape.get(ptr, 0):&#39;</span><span class="p">,</span>
        <span class="s">&#39;]&#39;</span><span class="p">:</span><span class="s">&#39;pass&#39;</span>
    <span class="p">}</span>
    <span class="n">pycode</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;import sys&#39;</span><span class="p">)</span>
    <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;tape, ptr = {}, 0&#39;</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">bfcode</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">opcode</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
            <span class="n">pycode</span><span class="o">.</span><span class="n">append</span><span class="p">(</span> <span class="s">&#39;</span><span class="se">\t</span><span class="s">&#39;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="n">opcode</span><span class="p">[</span><span class="n">c</span><span class="p">])</span>
            <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;[&#39;</span><span class="p">:</span>
                <span class="n">stack</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">depth</span><span class="p">)</span>
                <span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">c</span> <span class="o">==</span> <span class="s">&#39;]&#39;</span><span class="p">:</span>
                <span class="n">depth</span> <span class="o">=</span> <span class="n">stack</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
     
    <span class="k">return</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">pycode</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">defout</span> <span class="o">=</span> <span class="s">&#39;a.py&#39;</span>
    <span class="n">optlist</span><span class="p">,</span> <span class="n">args</span> <span class="o">=</span> <span class="n">getopt</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="s">&#39;o:&#39;</span><span class="p">,</span> <span class="p">[])</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">:</span>
        <span class="n">pysrc</span> <span class="o">=</span> <span class="n">bf2py</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">file</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">.</span><span class="n">readlines</span><span class="p">()));</span>
        <span class="nb">file</span><span class="p">(</span><span class="n">defout</span> <span class="ow">or</span> <span class="n">ops</span><span class="p">[</span><span class="s">&#39;-o&#39;</span><span class="p">],</span> <span class="s">&#39;w&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">pysrc</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/addtag/" class="addtag" id="addtag_3977">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3977"
  >-</span><span
  class="button yellow"
  id="rating_z_3977"
  >0</span><span 
  class="button green"
  id="rating_p_3977"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3963/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3977/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3988">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/">#3988</a>(<script language="JavaScript">print_time(new Date("2007/11/14 04:32 GMT"));</script><noscript>2007/11/14 04:32 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>せっかくなので++++がbf.inc(4)に置き換わるような設計にしてみました。</p>
<p>この程度の規模なら正規表現でも十分いけるんじゃないかと思いつつ勉強がてらにlexとyaccを使いました。</p>
<p><strong>PLY (Python Lex-Yacc)</strong></p>
<ul class="simple">
<li><a class="reference" href="/web/20090527035856/http://www.dabeaz.com/ply/ply.html">http://www.dabeaz.com/ply/ply.html</a></li>
<li><a class="reference" href="/web/20090527035856/http://www.dabeaz.com/ply/">http://www.dabeaz.com/ply/</a></li>
</ul>
<p>あとインデントうんぬんを考慮しないといけないのはそもそも直接while文を使うからなので式で表現しました。</p>
<p>,+[-.,+]を入力するとbf.get()or bf.inc(1)or bf.loop(lambda: bf.inc(-1)or bf.put()or bf.get()or bf.inc
(1))と出力されます。</p>
<p>下のFizzBuzzコードを食わせると2638バイトの出力で、処理時間はあっという間でした。
<a class="reference" href="/web/20090527035856/http://d.hatena.ne.jp/n_shuyo/20070516/fizzbuzz">http://d.hatena.ne.jp/n_shuyo/20070516/fizzbuzz</a></p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">ply</span> <span class="k">import</span> <span class="n">lex</span><span class="p">,</span> <span class="n">yacc</span>
<span class="k">import</span> <span class="nn">sys</span>

<span class="c"># lex</span>
<span class="n">tokens</span> <span class="o">=</span> <span class="s">&quot;PLUS MINUS LEFT RIGHT WHILE WEND PUT GET COMMENT&quot;</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>

<span class="n">t_WHILE</span> <span class="o">=</span> <span class="s">&quot;\[&quot;</span>
<span class="n">t_WEND</span> <span class="o">=</span> <span class="s">&quot;]&quot;</span>
<span class="n">t_PUT</span> <span class="o">=</span> <span class="s">&quot;\.&quot;</span>
<span class="n">t_GET</span> <span class="o">=</span> <span class="s">&quot;,&quot;</span>

<span class="k">def</span> <span class="nf">t_PLUS</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="s">&quot;\++&quot;</span>
    <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">t</span>

<span class="k">def</span> <span class="nf">t_MINUS</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="s">&quot;-+&quot;</span>
    <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">t</span>

<span class="k">def</span> <span class="nf">t_LEFT</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="s">&quot;&lt;+&quot;</span>
    <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">t</span>

<span class="k">def</span> <span class="nf">t_RIGHT</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="s">&quot;&gt;+&quot;</span>
    <span class="n">t</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">t</span>

<span class="k">def</span> <span class="nf">t_COMMENT</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
    <span class="s">&#39;[^[\]&gt;&lt;+-,.]&#39;</span> <span class="c"># return nothing</span>

<span class="k">def</span> <span class="nf">t_error</span><span class="p">(</span><span class="n">t</span><span class="p">):</span> <span class="k">pass</span>
    
<span class="c"># yacc</span>
<span class="sd">&quot;&quot;&quot;*** grammar definition</span>
<span class="sd">sequence : sequence command</span>
<span class="sd">         | command</span>

<span class="sd">command : PLUS</span>
<span class="sd">        | MINUS</span>
<span class="sd">        | LEFT</span>
<span class="sd">        | RIGHT</span>
<span class="sd">        | PUT</span>
<span class="sd">        | GET</span>
<span class="sd">        | loop</span>

<span class="sd">loop : WHILE sequence WEND</span>
<span class="sd">&quot;&quot;&quot;</span>

<span class="k">def</span> <span class="nf">p_sequence</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;sequence : sequence command&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="s">&quot;or &quot;</span> <span class="o">+</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_sequence_command</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;sequence : command&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_PLUS</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : PLUS&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.inc(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_MINUS</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : MINUS&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.inc(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="o">-</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_LEFT</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : LEFT&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.mov(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="o">-</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_RIGHT</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : RIGHT&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.mov(</span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_PUT</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : PUT&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.put()&quot;</span>

<span class="k">def</span> <span class="nf">p_command_GET</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : GET&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.get()&quot;</span>

<span class="k">def</span> <span class="nf">p_command_loop</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : loop&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    
<span class="k">def</span> <span class="nf">p_loop</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;loop : WHILE sequence WEND&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;bf.loop(lambda: </span><span class="si">%s</span><span class="s">)&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_error</span><span class="p">(</span><span class="n">p</span><span class="p">):</span> <span class="k">pass</span>

<span class="c"># input and parse</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="n">lex</span><span class="o">.</span><span class="n">lex</span><span class="p">()</span>
<span class="n">yacc</span><span class="o">.</span><span class="n">yacc</span><span class="p">()</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">yacc</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="c"># output</span>
<span class="k">print</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">from collections import defaultdict</span>
<span class="s">import sys</span>
<span class="s">class BF(object):</span>
<span class="s">    mem = defaultdict(int)</span>
<span class="s">    cur = 0</span>
<span class="s">    def inc(self, n):</span>
<span class="s">        self.mem[self.cur] += n</span>
<span class="s">        self.mem[self.cur] %= 256</span>
<span class="s">    def mov(self, n):</span>
<span class="s">        self.cur += n</span>
<span class="s">    def put(self):</span>
<span class="s">        c = chr(self.mem[self.cur])</span>
<span class="s">        sys.stdout.write(c)</span>
<span class="s">    def get(self):</span>
<span class="s">        c = sys.stdin.read(1)</span>
<span class="s">        self.mem[self.cur] = ord(c)</span>
<span class="s">    def loop(self, seq):</span>
<span class="s">        while self.mem[self.cur]:</span>
<span class="s">            seq()</span>

<span class="s">bf = BF()</span>
<span class="s">&quot;&quot;&quot;</span>

<span class="k">print</span> <span class="n">result</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/addtag/" class="addtag" id="addtag_3988">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/PLY/">PLY</a>
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/Python-Lex-Yacc/">Python-Lex-Yacc</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3988"
  >-</span><span
  class="button yellow"
  id="rating_z_3988"
  >0</span><span 
  class="button green"
  id="rating_p_3988"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3977/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3988/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3989">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3989/">#3989</a>(<script language="JavaScript">print_time(new Date("2007/11/14 04:46 GMT"));</script><noscript>2007/11/14 04:46 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>素数探索のコード：</p>
<p><a class="reference" href="/web/20090527035856/http://labs.cybozu.co.jp/blog/kazuho/archives/2006/06/bf_prime.php">http://labs.cybozu.co.jp/blog/kazuho/archives/2006/06/bf_prime.php</a></p>
<p>さすがに結構時間がかかるなー。Core2Duo &#64;2.4GHzで1分くらい。</p>
<pre class="literal-block">
real    1m2.317s
user    0m0.015s
sys     0m0.031s
</pre>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3989/addtag/" class="addtag" id="addtag_3989">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3989"
  >-</span><span
  class="button yellow"
  id="rating_z_3989"
  >0</span><span 
  class="button green"
  id="rating_p_3989"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3988/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3989/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3989/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3989/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3990">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3990/">#3990</a>(<script language="JavaScript">print_time(new Date("2007/11/14 04:56 GMT"));</script><noscript>2007/11/14 04:56 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>8行修正して[-]を単体で「リセット命令」にしたらreal　0m54.380sになった。</p>
<p>うーん、これ以上高速化するとなるとコピーの処理を置き換えるとかになりそうだけど、それは正規表現では無理な気がするなぁ。パースしながら出力文字列を作るのをやめて、sequenceを文字列に変換する際にmovとincだけで構成されているかどうかをチェックして…となるのかな。面倒だな。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3990/addtag/" class="addtag" id="addtag_3990">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3990"
  >-</span><span
  class="button yellow"
  id="rating_z_3990"
  >0</span><span 
  class="button green"
  id="rating_p_3990"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3989/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3990/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3990/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3990/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3997">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3997/">#3997</a>(<script language="JavaScript">print_time(new Date("2007/11/14 07:30 GMT"));</script><noscript>2007/11/14 07:30 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Pythonだとこれだけ時間がかかるんですね。
参考になります。

Scalaでもやってみたところ、#3960のコードで
出力したものを、コンパイルせずインタプリタで
実行しても1秒以内に結果が出ました。
Scalaは実はできる子です（笑</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3997/addtag/" class="addtag" id="addtag_3997">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3997"
  >-</span><span
  class="button yellow"
  id="rating_z_3997"
  >0</span><span 
  class="button green"
  id="rating_p_3997"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3990/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3997/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3997/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3997/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4009">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/">#4009</a>(<script language="JavaScript">print_time(new Date("2007/11/14 11:03 GMT"));</script><noscript>2007/11/14 11:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>うーん、それはちょっと違いますね。
#3960のコードはコードを一つの関数の中にローカルに展開しているのに対して、上のコードは一つ一つの命令がメソッド呼び出しですから。PythonとScalaの性能の違いと言うより、生成されたコードの質の違い思います。</p>
<p># 要するに僕のコードが生成したのは質が悪いと！orz</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/addtag/" class="addtag" id="addtag_4009">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4009"
  >-</span><span
  class="button yellow"
  id="rating_z_4009"
  >0</span><span 
  class="button green"
  id="rating_p_4009"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3997/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/">
    3
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4009/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4012">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4012/">#4012</a>(<script language="JavaScript">print_time(new Date("2007/11/14 11:27 GMT"));</script><noscript>2007/11/14 11:27 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>毎回bf.fooとメソッド名の解決をしているのをやめるとreal：0m32.481sになり、きちんとインデントするようにしたら(毎回関数呼び出しをするのをやめたら)real：0m15.548sになりました。</p>
<p>それでもScalaには全然追いつかないのか…orz</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4012/addtag/" class="addtag" id="addtag_4012">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4012"
  >-</span><span
  class="button yellow"
  id="rating_z_4012"
  >0</span><span 
  class="button green"
  id="rating_p_4012"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4012/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4012/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4015">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4015/">#4015</a>(<script language="JavaScript">print_time(new Date("2007/11/14 11:35 GMT"));</script><noscript>2007/11/14 11:35 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>コードを張り忘れたので。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">p_sequence</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;sequence : sequence command&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_sequence_command</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;sequence : command&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_PLUS</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : PLUS&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">mem[cur] = (mem[cur] + </span><span class="si">%s</span><span class="s">) </span><span class="si">%%</span><span class="s"> 256&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_MINUS</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : MINUS&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">mem[cur] = (mem[cur] - </span><span class="si">%s</span><span class="s">) </span><span class="si">%%</span><span class="s"> 256&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_LEFT</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : LEFT&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">cur -= </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_RIGHT</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : RIGHT&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">cur += </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">p_command_PUT</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : PUT&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">sys.stdout.write(chr(mem[cur]))&quot;</span>

<span class="k">def</span> <span class="nf">p_command_GET</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : GET&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">mem[cur] = ord(sys.stdin.read(1))&quot;</span>

<span class="k">def</span> <span class="nf">p_command_RESET</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : RESET&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">mem[cur] = 0&quot;</span>

<span class="k">def</span> <span class="nf">p_command_loop</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;command : loop&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    
<span class="k">def</span> <span class="nf">p_loop</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="s">&quot;loop : WHILE sequence WEND&quot;</span>
    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">while mem[cur]:</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">    &quot;</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">p_error</span><span class="p">(</span><span class="n">p</span><span class="p">):</span> <span class="k">pass</span>

<span class="c"># input and parse</span>
<span class="n">data</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
<span class="n">lex</span><span class="o">.</span><span class="n">lex</span><span class="p">()</span>
<span class="n">yacc</span><span class="o">.</span><span class="n">yacc</span><span class="p">()</span>
<span class="n">result</span> <span class="o">=</span> <span class="n">yacc</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

<span class="c"># output</span>
<span class="k">print</span> <span class="s">&quot;&quot;&quot;</span>
<span class="s">from collections import defaultdict</span>
<span class="s">import sys</span>
<span class="s">mem = defaultdict(int)</span>
<span class="s">cur = 0</span>
<span class="s">&quot;&quot;&quot;</span>

<span class="k">print</span> <span class="n">result</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4015/addtag/" class="addtag" id="addtag_4015">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4015/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4015/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4015"
  >-</span><span
  class="button yellow"
  id="rating_z_4015"
  >0</span><span 
  class="button green"
  id="rating_p_4015"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4015/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4015/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4016">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4016/">#4016</a>(<script language="JavaScript">print_time(new Date("2007/11/14 11:41 GMT"));</script><noscript>2007/11/14 11:41 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>あ、確かにそうですね。見落としてました。

せっかくなので#3952の素朴なタイプでも手元で時間とって見ましたが、

dppさんの#3952：55秒程度
にしおさんの#3988：2分10秒程度

でした。

あと、メモリとしてdictを使っているけど、
[0]*0xffffみたいにリストで長さ決めうちにすると
だいぶマシですね。55 -&gt; 31秒程度まで短縮できました。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4016/addtag/" class="addtag" id="addtag_4016">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4016"
  >-</span><span
  class="button yellow"
  id="rating_z_4016"
  >0</span><span 
  class="button green"
  id="rating_p_4016"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4009/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4016/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4016/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4014">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4014/">#4014</a>(<script language="JavaScript">print_time(new Date("2007/11/14 11:28 GMT"));</script><noscript>2007/11/14 11:28 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>これ</p>
<p>tape[ptr] = sys.stdin.read(1)</p>
<p>の部分でordしていないのでテープに文字列が書き込まる気が。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4014/addtag/" class="addtag" id="addtag_4014">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4014"
  >-</span><span
  class="button yellow"
  id="rating_z_4014"
  >0</span><span 
  class="button green"
  id="rating_p_4014"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3952/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4014/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4014/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment3953">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/415/" target="_top">yohei</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3953/">#3953</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:29 GMT"));</script><noscript>2007/11/13 13:29 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>簡単の為、標準出力を使用。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">arg_c</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">arg_v</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">*++</span><span class="n">arg_v</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;usage: bfc [source file]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="o">*</span><span class="n">arg_v</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;file open error.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdio.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdlib.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;int main(void) {&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot; char *s, *p;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot; p = s = (char *)calloc(1024, 1);&quot;</span><span class="p">);</span>
    
    <span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">=</span> <span class="n">getc</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span> <span class="o">!=</span> <span class="n">EOF</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; ++p;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; --p;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; ++*p;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; --*p;&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; putchar(*p);&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; *p = getchar();&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; while (*p) {&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot; }&quot;</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="o">:</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot; free(s);&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>
    
    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3953/addtag/" class="addtag" id="addtag_3953">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3953/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3953/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3953"
  >-</span><span
  class="button yellow"
  id="rating_z_3953"
  >0</span><span 
  class="button green"
  id="rating_p_3953"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3953/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment3955">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/481/" target="_top">mtsuyugu</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/">#3955</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:41 GMT"));</script><noscript>2007/11/13 13:41 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  出力のインデント処理と配列の長さを引数で調整できるようにしてみました。<br/>./bf2c&nbsp;hello.bf&nbsp;&gt;&nbsp;hello.c<br/>または<br/>./bf2c&nbsp;hello.bf&nbsp;128&nbsp;&gt;&nbsp;hello.c<br/>のように使います。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>

<span class="kt">char</span> <span class="o">*</span><span class="n">code</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;sp++;&quot;</span><span class="p">,</span> <span class="s">&quot;sp--;&quot;</span><span class="p">,</span> <span class="s">&quot;(*sp)++;&quot;</span><span class="p">,</span> <span class="s">&quot;(*sp)--;&quot;</span><span class="p">,</span> <span class="s">&quot;putchar(*sp);&quot;</span><span class="p">,</span>
                 <span class="s">&quot;*sp = getchar();&quot;</span><span class="p">,</span> <span class="s">&quot;while(*sp){&quot;</span><span class="p">,</span> <span class="s">&quot;}&quot;</span> <span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">){</span>
   <span class="kt">int</span> <span class="n">c</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">indent</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
   <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
   <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>

   <span class="k">if</span><span class="p">(</span> <span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">){</span>
      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Usage: %s sourcefile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;r&quot;</span> <span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">){</span>
      <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Error: %s cannot opened</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
      <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="n">length</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">))</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">){</span>
      <span class="n">length</span> <span class="o">=</span> <span class="mi">256</span><span class="p">;</span>
   <span class="p">}</span>

   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdio.h&gt;&quot;</span><span class="p">);</span>
   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdlib.h&gt;&quot;</span><span class="p">);</span>
   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;#define DATA_LEN %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;char code[DATA_LEN];&quot;</span><span class="p">);</span>
   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;int main (void){&quot;</span><span class="p">);</span>
   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;   char *sp = code;&quot;</span><span class="p">);</span>
   <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="n">fgetc</span><span class="p">(</span> <span class="n">fp</span> <span class="p">))</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="p">){</span>
      <span class="k">switch</span><span class="p">(</span><span class="n">c</span><span class="p">){</span>
      <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="n">indent</span><span class="o">++</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">7</span><span class="p">;</span> <span class="n">indent</span><span class="o">--</span><span class="p">;</span> <span class="k">break</span><span class="p">;</span>
      <span class="k">default</span><span class="o">:</span>
         <span class="c">/* skip other characters */</span>
         <span class="k">continue</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">for</span><span class="p">(</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">indent</span><span class="o">+</span><span class="p">(</span><span class="n">i</span><span class="o">==</span><span class="mi">6</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">));</span> <span class="n">j</span><span class="o">++</span> <span class="p">){</span>
         <span class="n">printf</span><span class="p">(</span><span class="s">&quot;   &quot;</span><span class="p">);</span>
      <span class="p">}</span>
      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">code</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
   <span class="p">}</span>
   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;   return EXIT_SUCCESS;&quot;</span><span class="p">);</span>
   <span class="n">puts</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>
   <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
   <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/addtag/" class="addtag" id="addtag_3955">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3955"
  >-</span><span
  class="button yellow"
  id="rating_z_3955"
  >0</span><span 
  class="button green"
  id="rating_p_3955"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3955/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3961">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3961/">#3961</a>(<script language="JavaScript">print_time(new Date("2007/11/13 14:30 GMT"));</script><noscript>2007/11/13 14:30 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>ケースが嫌いな私は、以下のように書き換えてしまいました。機能的には<a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/">#3955</a>と互換ですが、出力されたCコードのコンパイルには差し支えないのでインデントは省略しました。
</p>
<p>Dan the Brainf.cker
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">){</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">code</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>

    <span class="k">if</span><span class="p">(</span> <span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="p">){</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Usage: %s sourcefile</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&quot;r&quot;</span> <span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">){</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span><span class="s">&quot;Error: %s cannot opened</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
        <span class="k">return</span> <span class="n">EXIT_FAILURE</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span> <span class="o">!</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="n">length</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">))</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">){</span>
        <span class="n">length</span> <span class="o">=</span> <span class="mi">256</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">c</span> <span class="o">&lt;</span> <span class="mi">256</span><span class="p">;</span> <span class="n">c</span><span class="o">++</span><span class="p">)</span> <span class="n">code</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;&gt;&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;sp++;&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;&lt;&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;sp--;&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;+&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;(*sp)++;&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;-&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;(*sp)--;&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;.&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;putchar(*sp);&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;,&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;*sp = getchar();&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;[&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;while(*sp){&quot;</span><span class="p">;</span>
    <span class="n">code</span><span class="p">[</span><span class="sc">&#39;]&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;}&quot;</span><span class="p">;</span>

    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdio.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdlib.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;#define DATA_LEN %d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;char code[DATA_LEN];&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;int main (void){&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;   char *sp = code;&quot;</span><span class="p">);</span>
    <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="n">fgetc</span><span class="p">(</span> <span class="n">fp</span> <span class="p">))</span> <span class="o">!=</span> <span class="n">EOF</span> <span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">code</span><span class="p">[</span><span class="n">c</span><span class="p">])</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">code</span><span class="p">[</span><span class="n">c</span><span class="p">]);</span> 
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;   return EXIT_SUCCESS;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3961/addtag/" class="addtag" id="addtag_3961">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3961/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3961/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3961"
  >-</span><span
  class="button yellow"
  id="rating_z_3961"
  >0</span><span 
  class="button green"
  id="rating_p_3961"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3955/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3961/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3961/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment3956">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3956/">#3956</a>(<script language="JavaScript">print_time(new Date("2007/11/13 13:55 GMT"));</script><noscript>2007/11/13 13:55 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>コードをラベルと命令の列みたいなのにして、
prog の中へ放り込みます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre>(defun compile-bf (str &amp;optional (size 30000) (offset 0))
  (let ((tags ()))
    (flet ((translate (c)
             (case c
               (#\&gt; &#39;((incf ptr)))
               (#\&lt; &#39;((decf ptr)))
               (#\+ &#39;((setf *ptr (logand (1+ *ptr) #xff))))
               (#\- &#39;((setf *ptr (logand (1- *ptr) #xff))))
               (#\. &#39;((write-char (code-char *ptr))))
               (#\, &#39;((setf *ptr (char-code (read-char)))))
               (#\[ (let ((t1 (gensym)) (t2 (gensym)))
                      (setf tags (list* t1 t2 tags))
                      `(,t1 (if (= *ptr 0) (go ,t2)))))
               (#\] (let ((t1 (pop tags)) (t2 (pop tags)))
                      `((if (/= *ptr 0) (go ,t1)) ,t2))))))
      `(symbol-macrolet ((*ptr (aref array ptr)))
         (prog ((array ,(make-array size :initial-element 0))
                (ptr ,offset))
           ,@(loop for c across str append (translate c)))))))

;;; test
(eval (compile-bf &quot;+++++++++[&gt;++++++++&gt;+++++++++++&gt;+++++&lt;&lt;&lt;-]&gt;.&gt;++.
+++++++..+++.&gt;-.------------.&lt;++++++++.--------.+++.------.--------.&gt;+.&quot;))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3956/addtag/" class="addtag" id="addtag_3956">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3956/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3956/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3956"
  >-</span><span
  class="button yellow"
  id="rating_z_3956"
  >0</span><span 
  class="button green"
  id="rating_p_3956"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3956/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  
    





<div class="comment" id="comment3962">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/420/" target="_top">ぱみ</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3962/">#3962</a>(<script language="JavaScript">print_time(new Date("2007/11/13 14:50 GMT"));</script><noscript>2007/11/13 14:50 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ひねりなし。
配列の値がbyte型を越える場合についてはとりあえず考慮しない方向で…</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">BF</span>
  <span class="k">def</span> <span class="nf">compile</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
    <span class="n">depth</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">code</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;mem = [0]&quot;</span>
    <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;ptr = 0&quot;</span>
    <span class="n">str</span><span class="o">.</span><span class="n">each_byte</span> <span class="k">do</span> <span class="o">|</span><span class="n">ch</span><span class="o">|</span>   
      <span class="k">if</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?&gt;</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;ptr += 1; mem[ptr] = 0 if ptr &gt;= mem.size&quot;</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?&lt;</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;(ptr == 0)? mem.unshift(0) : ptr -= 1&quot;</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?+</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;mem[ptr] += 1&quot;</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?-</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;mem[ptr] -= 1&quot;</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?.</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;putc(mem[ptr])&quot;</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?,</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;mem[ptr] = STDIN.getc&quot;</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?[</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;while(mem[ptr] != 0) do&quot;</span>
        <span class="n">depth</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">elsif</span> <span class="n">ch</span> <span class="o">==</span> <span class="sc">?]</span>
        <span class="n">depth</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;</span><span class="se">\t</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="n">depth</span> <span class="o">+</span> <span class="s2">&quot;end&quot;</span>
      <span class="k">end</span>
    <span class="k">end</span>
   <span class="n">code</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="nb">eval</span> <span class="no">BF</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s2">&quot;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.&quot;</span><span class="p">)</span> <span class="c1"># =&gt; Hello World!</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3962/addtag/" class="addtag" id="addtag_3962">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3962/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3962/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3962"
  >-</span><span
  class="button yellow"
  id="rating_z_3962"
  >0</span><span 
  class="button green"
  id="rating_p_3962"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3962/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3962/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3965">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/">#3965</a>(<script language="JavaScript">print_time(new Date("2007/11/13 16:13 GMT"));</script><noscript>2007/11/13 16:13 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>これまたif文の羅列を置き換える方向で書き換えてみました。
Cと違ってHashが気軽に使えるのがうれしい。
next unless が使えるのもPerl Mongerとしてはうれしい。
    str.unpack("C*").map{|c| c.chr}.each do |ch|
は、単に{}とdo endを両方使ってみたかったから。
Dan the Occasional Rubyist</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">BF</span>
  <span class="vc">@@opcode</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;&gt;&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;ptr += 1; mem[ptr] = 0 if ptr &gt;= mem.size&quot;</span><span class="p">,</span>
    <span class="s1">&#39;&lt;&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;(ptr == 0)? mem.unshift(0) : ptr -= 1&quot;</span><span class="p">,</span>
    <span class="s1">&#39;+&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;mem[ptr] += 1&quot;</span><span class="p">,</span>
    <span class="s1">&#39;-&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;mem[ptr] -= 1&quot;</span><span class="p">,</span>
    <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;putc(mem[ptr])&quot;</span><span class="p">,</span>
    <span class="s1">&#39;,&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;mem[ptr] = STDIN.getc&quot;</span><span class="p">,</span>
    <span class="s1">&#39;[&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;while(mem[ptr] != 0) do&quot;</span><span class="p">,</span>
    <span class="s1">&#39;]&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;end&quot;</span>
  <span class="p">}</span>
  <span class="k">def</span> <span class="nf">compile</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
    <span class="n">code</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;mem = [0]&quot;</span><span class="p">,</span> <span class="s2">&quot;ptr = 0&quot;</span><span class="o">]</span>
    <span class="n">str</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;C*&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="n">c</span><span class="o">.</span><span class="n">chr</span><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">ch</span><span class="o">|</span>
      <span class="k">next</span> <span class="k">unless</span> <span class="vc">@@opcode</span><span class="o">[</span><span class="n">ch</span><span class="o">]</span>
      <span class="n">code</span> <span class="o">&lt;&lt;</span> <span class="vc">@@opcode</span><span class="o">[</span><span class="n">ch</span><span class="o">]</span>
    <span class="k">end</span>
   <span class="n">code</span><span class="o">.</span><span class="n">join</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/addtag/" class="addtag" id="addtag_3965">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3965"
  >-</span><span
  class="button yellow"
  id="rating_z_3965"
  >0</span><span 
  class="button green"
  id="rating_p_3965"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3962/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3965/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3968">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/420/" target="_top">ぱみ</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3968/">#3968</a>(<script language="JavaScript">print_time(new Date("2007/11/13 16:20 GMT"));</script><noscript>2007/11/13 16:20 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>おぉ、なるほど。勉強になります。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3968/addtag/" class="addtag" id="addtag_3968">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3968"
  >-</span><span
  class="button yellow"
  id="rating_z_3968"
  >0</span><span 
  class="button green"
  id="rating_p_3968"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3965/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3968/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3968/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  
    





<div class="comment" id="comment3964">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/">#3964</a>(<script language="JavaScript">print_time(new Date("2007/11/13 15:54 GMT"));</script><noscript>2007/11/13 15:54 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>久しぶりに投稿します。
-v optimize=1 とするとオプティマイズされます（笑

helloworld.bf:
++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]
&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.
&gt;.+++.------.--------.&gt;+.&gt;.

% awk -f bf2awk.awk helloworld.bf &gt; helloworld.awk
% awk -f helloworld.awk 
Hello World!

helloworld.awk:
BEGIN {
  ix = 0
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  while (st[ix]) {
    ix++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    ix++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    st[ix]++
    ix++
    st[ix]++
    st[ix]++
    st[ix]++
    ix++
    st[ix]++
    ix--
    ix--
    ix--
    ix--
    st[ix]--
  }
  ix++
  st[ix]++
  st[ix]++
  printf("%c", st[ix])
  ix++
  st[ix]++
  printf("%c", st[ix])
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  printf("%c", st[ix])
  printf("%c", st[ix])
  st[ix]++
  st[ix]++
  st[ix]++
  printf("%c", st[ix])
  ix++
  st[ix]++
  st[ix]++
  printf("%c", st[ix])
  ix--
  ix--
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  st[ix]++
  printf("%c", st[ix])
  ix++
  printf("%c", st[ix])
  st[ix]++
  st[ix]++
  st[ix]++
  printf("%c", st[ix])
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  printf("%c", st[ix])
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  st[ix]--
  printf("%c", st[ix])
  ix++
  st[ix]++
  printf("%c", st[ix])
  ix++
  printf("%c", st[ix])
}

% awk -v optimize=1 -f bf2awk.awk helloworld.bf &gt; helloworld-optimized.awk
% awk -f helloworld-optimized.awk 
Hello World!

helloworld-optimized.awk:
BEGIN {
  ix = 0
  st[ix] += 10
  while (st[ix]) {
    st[++ix]++
    st[ix] += 6
    st[++ix]++
    st[ix] += 9
    st[++ix]++
    st[ix] += 2
    st[++ix]++
    ix -= 4
    st[ix]--
  }
  st[++ix]++
  st[ix]++
  printf("%c", st[ix])
  st[++ix]++
  printf("%c", st[ix])
  st[ix] += 7
  printf("%c", st[ix])
  printf("%c", st[ix])
  st[ix] += 3
  printf("%c", st[ix])
  st[++ix]++
  st[ix]++
  printf("%c", st[ix])
  ix -= 2
  st[ix] += 15
  printf("%c", st[ix])
  printf("%c", st[++ix])
  st[ix] += 3
  printf("%c", st[ix])
  st[ix] -= 6
  printf("%c", st[ix])
  st[ix] -= 8
  printf("%c", st[ix])
  st[++ix]++
  printf("%c", st[ix])
  printf("%c", st[++ix])
}
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158</pre></td><td class="code"><div class="highlight"><pre>BEGIN {
    read_buf = &quot;&quot;
    if (optimize) reset_last()

    indent = &quot;&quot;
    indent_print(&quot;BEGIN {&quot;)

    indent_incr()
    indent_print(&quot;ix = 0&quot;)
}
{
    gsub(/#.*$/,&quot;&quot;); # comment
    gsub(/[^\[\]&lt;&gt;+\-.,]/,&quot;&quot;); if (/^$/) next

    N = split($0, op, &quot;&quot;)
    for (i=1; i&lt;=N; i++) {
        if (op[i] == &quot;&gt;&quot;) {
            if (optimize) {
                if (last_inst == &quot;ix&quot;) {
                    last_arg++
                } else {
                    out_last()
                    set_last(&quot;ix&quot;, 1)
                }
            } else {
                indent_print(&quot;ix++&quot;)
            }
        } else if (op[i] == &quot;&lt;&quot;) {
            if (optimize) {
                if (last_inst == &quot;ix&quot;) {
                    last_arg--
                } else {
                    out_last()
                    set_last(&quot;ix&quot;, -1)
                }
            } else {
                indent_print(&quot;ix--&quot;)
            }
        } else if (op[i] == &quot;+&quot;) {
            if (optimize) {
                if (last_inst == &quot;st[ix]&quot;) {
                    last_arg++
                } else {
                    s = set_incr_decr(&quot;st[ix]&quot;)
                    if (last_inst) out_last()
                    set_last(s, 1)
                }
            } else {
                indent_print(&quot;st[ix]++&quot;)
            }
        } else if (op[i] == &quot;-&quot;) {
            if (optimize) {
                if (last_inst == &quot;st[ix]&quot;) {
                    last_arg--
                } else {
                    s = set_incr_decr(&quot;st[ix]&quot;)
                    if (last_inst) out_last()
                    set_last(s, -1)
                }
            } else {
                indent_print(&quot;st[ix]--&quot;)
            }
        } else if (op[i] == &quot;.&quot;) {
            if (optimize) {
                s = set_incr_decr(&quot;printf(\&quot;%c\&quot;, st[ix])&quot;)
                if (last_inst) out_last()
                indent_print(s)
            } else {
                indent_print(&quot;printf(\&quot;%c\&quot;, st[ix])&quot;)
            }
        } else if (op[i] == &quot;,&quot;) {
            if (optimize) {
                s = set_incr_decr(&quot;st[ix] = getchar()&quot;)
                if (last_inst) out_last()
                indent_print(s)
            } else {
                indent_print(&quot;st[ix] = getchar()&quot;)
            }
        } else if (op[i] == &quot;[&quot;) {
            if (optimize) {
                s = set_incr_decr(&quot;while (st[ix]) {&quot;)
                if (last_inst) out_last()
                indent_print(s)
                indent_incr()
            } else {
                indent_print(&quot;while (st[ix]) {&quot;)
                indent_incr()
            }
        } else if (op[i] == &quot;]&quot;) {
            if (optimize) out_last()
            indent_decr()
            indent_print(&quot;}&quot;)
        } else {
            ;
        }
    }
}
END {
    if (optimize) out_last()
    indent_decr()
    indent_print(&quot;}&quot;)
}

function getchar(  ch)
{
    if (read_buf ~ /^$/) getline read_buf
    ch = substr(read_buf,1,1)
    read_buf = substr(read_buf,2)
    return ch
}
function indent_incr()
{
    indent = &quot;  &quot; indent
}
function indent_decr()
{
    indent = substr(indent, 3)
}
function indent_print(line)
{
    print indent line
}
function set_last(inst,arg)
{
    last_inst = inst
    last_arg = arg
}
function reset_last()
{
    last_inst = &quot;&quot;
    last_arg = 0
}
function out_last(  diff)
{
    if (last_inst ~ /ix/) {
        if (last_arg &gt; 1)
            diff = &quot; += &quot; last_arg
        else if (last_arg == 1)
            diff = &quot;++&quot;
        else if (last_arg == 0)
            diff = &quot;&quot;
        else if (last_arg == -1)
            diff = &quot;--&quot;
        else if (last_arg &lt; -1)
            diff = &quot; -= &quot; (0 - last_arg)

        if (diff) indent_print(last_inst diff)
    }
    last_inst = &quot;&quot;
}
function set_incr_decr(s)
{
    if (last_inst == &quot;ix&quot;) {
        if (last_arg == 1) { gsub(/ix/, &quot;++ix&quot;, s); last_inst = &quot;&quot; }
        else if (last_arg == -1) { gsub(/ix/, &quot;--ix&quot;, s); last_inst = &quot;&quot; }
    }
    return s
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/addtag/" class="addtag" id="addtag_3964">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3964"
  >-</span><span
  class="button yellow"
  id="rating_z_3964"
  >0</span><span 
  class="button green"
  id="rating_p_3964"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/">
    4
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3964/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3969">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3969/">#3969</a>(<script language="JavaScript">print_time(new Date("2007/11/13 16:22 GMT"));</script><noscript>2007/11/13 16:22 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>a2p的にもきれいなawkコードを吐きますねwww
</p>
<p>Dan the Cyberpolyglot
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2</pre></td><td class="code"><div class="highlight"><pre>% awk -f bfcc.awk helloworld.bf | a2p | perl
Hello, World!
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3969/addtag/" class="addtag" id="addtag_3969">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/a2p/">a2p</a>
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/mutilingual/">mutilingual</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3969/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3969/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3969"
  >-</span><span
  class="button yellow"
  id="rating_z_3969"
  >0</span><span 
  class="button green"
  id="rating_p_3969"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3969/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3969/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3972">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3972/">#3972</a>(<script language="JavaScript">print_time(new Date("2007/11/13 16:51 GMT"));</script><noscript>2007/11/13 16:51 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>optimize=1 の時に while(st[ix]) の直前に ix++ や ix-- が来ると while(st[++ix]) のように誤ったオプティマイズが行われるバグを修正</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre>--- bf2awk.awk.orig    2007-11-14 00:43:07.000000000 +0900
+++ bf2awk.awk    2007-11-14 01:46:46.000000000 +0900
@@ -77,15 +77,9 @@
                 indent_print(&quot;st[ix] = getchar()&quot;)
             }
         } else if (op[i] == &quot;[&quot;) {
-            if (optimize) {
-                s = set_incr_decr(&quot;while (st[ix]) {&quot;)
-                if (last_inst) out_last()
-                indent_print(s)
-                indent_incr()
-            } else {
-                indent_print(&quot;while (st[ix]) {&quot;)
-                indent_incr()
-            }
+            if (optimize) out_last()
+            indent_print(&quot;while (st[ix]) {&quot;)
+            indent_incr()
         } else if (op[i] == &quot;]&quot;) {
             if (optimize) out_last()
             indent_decr()
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3972/addtag/" class="addtag" id="addtag_3972">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/bugfix/">bugfix</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3972/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3972/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3972"
  >-</span><span
  class="button yellow"
  id="rating_z_3972"
  >0</span><span 
  class="button green"
  id="rating_p_3972"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3972/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3972/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3975">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3975/">#3975</a>(<script language="JavaScript">print_time(new Date("2007/11/13 17:00 GMT"));</script><noscript>2007/11/13 17:00 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>オプティマイズ時に
++ix
st[ix]++
st[ix]++
st[ix]++
が
st[++ix]++
st[ix] += 2
となっていたのを
st[++ix] += 3
のようにちゃんとまとめるように修正するパッチ</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre>--- bf2awk.awk.orig    2007-11-14 00:43:07.000000000 +0900
+++ bf2awk.awk    2007-11-14 01:55:50.000000000 +0900
@@ -38,7 +38,7 @@
             }
         } else if (op[i] == &quot;+&quot;) {
             if (optimize) {
-                if (last_inst == &quot;st[ix]&quot;) {
+                if (last_inst ~ /^st\[/) {
                     last_arg++
                 } else {
                     s = set_incr_decr(&quot;st[ix]&quot;)
@@ -50,7 +50,7 @@
             }
         } else if (op[i] == &quot;-&quot;) {
             if (optimize) {
-                if (last_inst == &quot;st[ix]&quot;) {
+                if (last_inst ~ /^st\[/) {
                     last_arg--
                 } else {
                     s = set_incr_decr(&quot;st[ix]&quot;)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3975/addtag/" class="addtag" id="addtag_3975">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3975/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3975/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3975"
  >-</span><span
  class="button yellow"
  id="rating_z_3975"
  >0</span><span 
  class="button green"
  id="rating_p_3975"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3975/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3975/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3978">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3978/">#3978</a>(<script language="JavaScript">print_time(new Date("2007/11/13 17:59 GMT"));</script><noscript>2007/11/13 17:59 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>うう駄目だ、getchar() の定義が出力されないので、#3976の ,+[-.,+] をコンパイルしても動かない。
しかも getchar() が文字コードを返すようになってない。ord() を実装。
全面書き換え。

a2pをかましても動くように getline, index 回りを微調整。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174</pre></td><td class="code"><div class="highlight"><pre>BEGIN {
    if (optimize) reset_last()

    indent = &quot;&quot;
    print &quot;BEGIN {&quot;

    indent_incr()
    indent_print(&quot;read_buf = \&quot;\&quot;&quot;)
    indent_print(&quot;ix = 0&quot;)
}
{
    gsub(/#.*$/,&quot;&quot;); # comment
    gsub(/[^\[\]&lt;&gt;+\-.,]/,&quot;&quot;); if (/^$/) next

    N = split($0, op, &quot;&quot;)
    for (i=1; i&lt;=N; i++) {
        if (op[i] == &quot;&gt;&quot;) {
            if (optimize) {
                if (last_inst == &quot;ix&quot;) {
                    last_arg++
                } else {
                    out_last()
                    set_last(&quot;ix&quot;, 1)
                }
            } else {
                indent_print(&quot;ix++&quot;)
            }
        } else if (op[i] == &quot;&lt;&quot;) {
            if (optimize) {
                if (last_inst == &quot;ix&quot;) {
                    last_arg--
                } else {
                    out_last()
                    set_last(&quot;ix&quot;, -1)
                }
            } else {
                indent_print(&quot;ix--&quot;)
            }
        } else if (op[i] == &quot;+&quot;) {
            if (optimize) {
                if (last_inst ~ /^st\[/) {
                    last_arg++
                } else {
                    s = set_incr_decr(&quot;st[ix]&quot;)
                    if (last_inst) out_last()
                    set_last(s, 1)
                }
            } else {
                indent_print(&quot;st[ix]++&quot;)
            }
        } else if (op[i] == &quot;-&quot;) {
            if (optimize) {
                if (last_inst ~ /^st\[/) {
                    last_arg--
                } else {
                    s = set_incr_decr(&quot;st[ix]&quot;)
                    if (last_inst) out_last()
                    set_last(s, -1)
                }
            } else {
                indent_print(&quot;st[ix]--&quot;)
            }
        } else if (op[i] == &quot;.&quot;) {
            if (optimize) {
                s = set_incr_decr(&quot;printf(\&quot;%c\&quot;, st[ix])&quot;)
                if (last_inst) out_last()
                indent_print(s)
            } else {
                indent_print(&quot;printf(\&quot;%c\&quot;, st[ix])&quot;)
            }
        } else if (op[i] == &quot;,&quot;) {
            if (optimize) {
                s = set_incr_decr(&quot;st[ix] = getchar()&quot;)
                if (last_inst) out_last()
                indent_print(s)
            } else {
                indent_print(&quot;st[ix] = getchar()&quot;)
            }
        } else if (op[i] == &quot;[&quot;) {
            if (optimize) {
                s = set_incr_decr(&quot;while (st[ix]) {&quot;)
                if (last_inst) out_last()
                indent_print(s)
                indent_incr()
            } else {
                indent_print(&quot;while (st[ix]) {&quot;)
                indent_incr()
            }
        } else if (op[i] == &quot;]&quot;) {
            if (optimize) out_last()
            indent_decr()
            indent_print(&quot;}&quot;)
        } else {
            ;
        }
    }
}
END {
    if (optimize) out_last()
    indent_decr()
    indent_print(&quot;}&quot;)

    print &quot;function getchar(  ch)&quot;
    print &quot;{&quot;
    print &quot;  if (read_buf ~ /^$/) {&quot;
    print &quot;    if (eof) return -1&quot;
#    print &quot;    if ((getline read_buf) &lt; 1) { eof = 1; return -1 }&quot;
    print &quot;    if (getline != 1) { eof = 1; return -1 }&quot; # a2p
    print &quot;    read_buf = $0&quot; # a2p
    print &quot;  }&quot;
    print &quot;  ch = ord(substr(read_buf,1,1))&quot;
    print &quot;  read_buf = substr(read_buf,2)&quot;
    print &quot;  return ch&quot;
    print &quot;}&quot;

    print &quot;function ord(ch, ofs)&quot;
    print &quot;{&quot;
    print &quot;  if (ch == \&quot;\\t\&quot;) return 9&quot;
    print &quot;  if (ch == \&quot;\\n\&quot;) return 13&quot;
#    print &quot;  ofs = index(\&quot; !\\\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\&quot;, ch)&quot;
    print &quot;  if (ch == \&quot;@\&quot;) return 64&quot; # a2p
    print &quot;  ofs = index(\&quot; !\\\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?.ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\&quot;, ch)&quot; # a2p
    print &quot;  return ofs ? 31 + ofs : 0&quot;
    print &quot;}&quot;
}

function indent_incr()
{
    indent = &quot;  &quot; indent
}
function indent_decr()
{
    indent = substr(indent, 3)
}
function indent_print(line)
{
    print indent line
}
function set_last(inst,arg)
{
    last_inst = inst
    last_arg = arg
}
function reset_last()
{
    last_inst = &quot;&quot;
    last_arg = 0
}
function out_last(  diff)
{
    if (last_inst ~ /ix/) {
        if (last_arg &gt; 1)
            diff = &quot; += &quot; last_arg
        else if (last_arg == 1)
            diff = &quot;++&quot;
        else if (last_arg == 0)
            diff = &quot;&quot;
        else if (last_arg == -1)
            diff = &quot;--&quot;
        else if (last_arg &lt; -1)
            diff = &quot; -= &quot; (0 - last_arg)

        if (diff) indent_print(last_inst diff)
    }
    last_inst = &quot;&quot;
}
function set_incr_decr(s)
{
    if (last_inst == &quot;ix&quot;) {
        if (last_arg == 1) { gsub(/ix/, &quot;++ix&quot;, s); last_inst = &quot;&quot; }
        else if (last_arg == -1) { gsub(/ix/, &quot;--ix&quot;, s); last_inst = &quot;&quot; }
    }
    return s
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3978/addtag/" class="addtag" id="addtag_3978">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3978/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3978/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3978"
  >-</span><span
  class="button yellow"
  id="rating_z_3978"
  >0</span><span 
  class="button green"
  id="rating_p_3978"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3964/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3978/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3978/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3966">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3966/">#3966</a>(<script language="JavaScript">print_time(new Date("2007/11/13 16:15 GMT"));</script><noscript>2007/11/13 16:15 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18</pre></td><td class="code"><div class="highlight"><pre>| bf st op in |
bf := FileStream fileNamed: &#39;hello.bf&#39;.
in := FileStream fileNamed: &#39;in.txt&#39;.
in binary.
st := WriteStream with: &#39;| ss | ss := ReadWriteStream with: #(0). ss reset&#39;.
[(op := bf next) notNil] whileTrue: [
    st nextPutAll: (op caseOf: {
        [$&gt;] -&gt; [&#39;. ss next. ss atEnd ifTrue: [ss nextPut: 0; back]&#39;].
        [$&lt;] -&gt; [&#39;. ss back&#39;].
        [$+] -&gt; [&#39;. ss nextPut: ss peek + 1; back&#39;].
        [$-] -&gt; [&#39;. ss nextPut: ss peek - 1; back&#39;].
        [$.] -&gt; [&#39;. Transcript show: (ss peek asCharacter)&#39;].
        [$,] -&gt; [&#39;. ss nextPut: &#39;, in next printString,&#39; value; back&#39;].
        [$[] -&gt; [&#39;. [ss peek isZero] whileFalse: [&#39;].
        [$]] -&gt; [&#39;]&#39;]} otherwise: [&#39;&#39;])].
bf close.  in close.
World findATranscript: nil.
Compiler evaluate: st contents
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3966/addtag/" class="addtag" id="addtag_3966">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3966/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3966/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3966"
  >-</span><span
  class="button yellow"
  id="rating_z_3966"
  >0</span><span 
  class="button green"
  id="rating_p_3966"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3966/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  

  
    





<div class="comment" id="comment3976">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3976/">#3976</a>(<script language="JavaScript">print_time(new Date("2007/11/13 17:00 GMT"));</script><noscript>2007/11/13 17:00 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/brainfuck/">
	  Brainf*ck
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>BFによるBFコンパイラーは、これほど簡単です:-)
</p>
<p>種明かしは、<a href="/web/20090527035856/http://en.wikipedia.org/wiki/Brainfuck#Trivial">こちら</a>。
</p>
<p>本来であれば、<code>,[.,]</code>でもOKなのですが、これだとEOFが処理できません。
</p>
<p>Dan the Brainf.cker
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="highlight"><pre>,+[-.,+]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3976/addtag/" class="addtag" id="addtag_3976">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/brainfuck/">
		Brainf*ck
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3976/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3976/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3976"
  >-</span><span
  class="button yellow"
  id="rating_z_3976"
  >0</span><span 
  class="button green"
  id="rating_p_3976"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3976/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  
    





<div class="comment" id="comment3981">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/343/" target="_top">matyr</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3981/">#3981</a>(<script language="JavaScript">print_time(new Date("2007/11/13 22:13 GMT"));</script><noscript>2007/11/13 22:13 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  処理系間の差を吸収するため，入出力用の関数を受け取る関数を生成。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">BF</span><span class="p">(</span><span class="nx">code</span><span class="p">){</span>
  <span class="k">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">,</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;&gt;&#39;</span><span class="o">:</span> <span class="s1">&#39;m[p+=?]|=0;&#39;</span><span class="o">,</span>
    <span class="s1">&#39;&lt;&#39;</span><span class="o">:</span> <span class="s1">&#39;m[p-=?]|=0;&#39;</span><span class="o">,</span>
    <span class="s1">&#39;+&#39;</span><span class="o">:</span> <span class="s1">&#39;m[p]+=?;&#39;</span><span class="o">,</span>
    <span class="s1">&#39;-&#39;</span><span class="o">:</span> <span class="s1">&#39;m[p]-=?;&#39;</span><span class="o">,</span>
    <span class="s1">&#39;,&#39;</span><span class="o">:</span> <span class="s1">&#39;m[p]=get().charCodeAt(0);&#39;</span><span class="o">,</span>
    <span class="s1">&#39;.&#39;</span><span class="o">:</span> <span class="s1">&#39;put(c(m[p]));&#39;</span><span class="o">,</span>
    <span class="s1">&#39;[&#39;</span><span class="o">:</span> <span class="s1">&#39;while(m[p]){&#39;</span><span class="o">,</span>
    <span class="s1">&#39;]&#39;</span><span class="o">:</span> <span class="s1">&#39;}&#39;</span> <span class="p">};</span>
  <span class="nx">code</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/&gt;+|&lt;+|\++|-+|([,.[\]])/g</span><span class="o">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">$</span><span class="o">,</span> <span class="nx">_</span><span class="p">){</span>
    <span class="nx">s</span> <span class="o">+=</span> <span class="nx">_</span> <span class="o">?</span> <span class="nx">o</span><span class="p">[</span><span class="nx">$</span><span class="p">]</span> <span class="o">:</span> <span class="nx">o</span><span class="p">[</span><span class="nx">$</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)].</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;?&#39;</span><span class="o">,</span> <span class="nx">$</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">});</span>
  <span class="k">return</span> <span class="nb">eval</span><span class="p">(</span><span class="s1">&#39;0,function(get,put){var m=[0],p=0,c=String.fromCharCode;&#39;</span><span class="o">+</span> <span class="nx">s</span> <span class="o">+</span><span class="s1">&#39;}&#39;</span><span class="p">);</span>
<span class="p">}</span>
<span class="c">/// Rhinoで「hello world」のテスト ///</span>
<span class="nx">BF</span><span class="p">(</span><span class="s1">&#39;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]\</span>
<span class="s1">    &gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&gt;.&#39;</span>
<span class="p">)(</span><span class="k">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s1">&#39;?&#39;</span> <span class="p">}</span><span class="o">,</span> <span class="k">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span> <span class="nx">java</span><span class="p">.</span><span class="nx">lang</span><span class="p">.</span><span class="nx">System</span><span class="p">.</span><span class="nx">out</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span> <span class="p">});</span>

<span class="c">/// WSHで「echo」のテスト ///</span>
<span class="c">//BF(&#39;,+[-.,+]&#39;)(function(){ return WSH.stdIn.read(1) }, function(c){ WSH.stdOut.write(c) });</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3981/addtag/" class="addtag" id="addtag_3981">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/Rhino/">Rhino</a>
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/WSH/">WSH</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3981/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3981/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3981"
  >-</span><span
  class="button yellow"
  id="rating_z_3981"
  >0</span><span 
  class="button green"
  id="rating_p_3981"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3981/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3983">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/418/" target="_top">mad</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3983/">#3983</a>(<script language="JavaScript">print_time(new Date("2007/11/14 03:42 GMT"));</script><noscript>2007/11/14 03:42 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>あまり綺麗なコードではないですが...。
メモリは左右に伸びる無限リストで表現しました。

&gt;=&gt;演算子 (Kleisli composition)は非常に便利です。
GHC6.8で新しく追加されましたが,一応定義を書きました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>

<span class="nv">putCode</span> <span class="sc">&#39;&gt;&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;incP &gt;=&gt; &quot;</span>
<span class="nv">putCode</span> <span class="sc">&#39;&lt;&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;decP &gt;=&gt; &quot;</span>
<span class="nv">putCode</span> <span class="sc">&#39;+&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;inc &gt;=&gt; &quot;</span> 
<span class="nv">putCode</span> <span class="sc">&#39;-&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;dec &gt;=&gt; &quot;</span> 
<span class="nv">putCode</span> <span class="sc">&#39;.&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;put &gt;=&gt; &quot;</span> 
<span class="nv">putCode</span> <span class="sc">&#39;,&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;get &gt;=&gt; &quot;</span> 
<span class="nv">putCode</span> <span class="sc">&#39;[&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;loop(&quot;</span>
<span class="nv">putCode</span> <span class="sc">&#39;]&#39;</span> <span class="o">=</span> <span class="nv">putStr</span> <span class="s">&quot;return) &gt;=&gt; &quot;</span>

<span class="nv">genCode</span> <span class="nv">source</span> 
    <span class="o">=</span> <span class="kr">do</span> <span class="nv">putStr</span> <span class="s">&quot;runBF = &quot;</span>
         <span class="nv">mapM_</span> <span class="nv">putCode</span> <span class="p">(</span><span class="nv">source</span> <span class="p">`</span><span class="nv">intersect</span><span class="p">`</span> <span class="s">&quot;&gt;&lt;+-.,[]&quot;</span><span class="p">)</span>
         <span class="nv">putStrLn</span> <span class="s">&quot;return&quot;</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="nv">source</span> <span class="o">&lt;-</span> <span class="nv">readFile</span> <span class="o">.</span> <span class="nv">head</span> <span class="o">=&lt;&lt;</span> <span class="nv">getArgs</span>

    <span class="nv">putStrLn</span> <span class="s">&quot;import Data.Char&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;(&gt;=&gt;) m1 m2 = \\s -&gt; m1 s &gt;&gt;= m2&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;incP (ps, n:ns)    = return (n:ps, ns)&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;decP (p:ps, ns)    = return (ps, p:ns)&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;inc (ps, n:ns)     = return (ps, n+1:ns)&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;dec (ps, n:ns)     = return (ps, n-1:ns)&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;put mem@(_, n:_)   = putChar (chr n) &gt;&gt; return mem&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;get mem@(ps, _:ns) = getChar &gt;&gt; (\\c -&gt; return (ps, ord c:ns))&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;loop code mem@(_, 0:_) = return mem&quot;</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;loop code mem = code mem &gt;&gt;= loop code&quot;</span>
    <span class="nv">genCode</span> <span class="nv">source</span>
    <span class="nv">putStrLn</span> <span class="s">&quot;main = runBF ([0,0..], [0,0..])&quot;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3983/addtag/" class="addtag" id="addtag_3983">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3983/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3983/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3983"
  >-</span><span
  class="button yellow"
  id="rating_z_3983"
  >0</span><span 
  class="button green"
  id="rating_p_3983"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3983/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3984">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/564/" target="_top">herumi</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3984/">#3984</a>(<script language="JavaScript">print_time(new Date("2007/11/14 03:54 GMT"));</script><noscript>2007/11/14 03:54 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  C++→Cの変化球．

Xbyakを使ってオブジェクトコードを出力．
./bf hello.bf
なら即実行
./bf hello.bf 1 &gt; a.c
でx86 32bit用Cコードを生成します．これでも32bit x86ならMac/Win/Linuxで動作します．
gccの場合は-fno-operator-namesをつけてコンパイルしてください．

	</div>
	
	<p class="link">
	  参考: <a href="/web/20090527035856/http://homepage1.nifty.com/herumi/soft/xbyak.html">Xbyak</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105</pre></td><td class="code"><div class="highlight"><pre><span class="c">/*</span>
<span class="c">    出力例</span>
<span class="c">#include &lt;stdio.h&gt;</span>
<span class="c">static int stack[32768];</span>
<span class="c">static const unsigned char code[] = {</span>
<span class="c">0x55,0x56,0x57,0x8b,0x74,0x24,0x10,0x8b,0x7c,0x24,0x14,0x8b,0x6c,0x24,0x18,0x83,</span>
<span class="c">...</span>
<span class="c">};</span>
<span class="c">main()</span>
<span class="c">{</span>
<span class="c">    ((void (*)(void*, void*, int *))code)((void*)putchar, (void*)getchar, stack);</span>
<span class="c">}</span>

<span class="c">*/</span>
<span class="cp">#include &quot;xbyak/xbyak.h&quot;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stack&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>

<span class="k">struct</span> <span class="n">Brainfuck</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Xbyak</span><span class="o">::</span><span class="n">CodeGenerator</span> <span class="p">{</span>
    <span class="n">Brainfuck</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">)</span> <span class="o">:</span> <span class="n">CodeGenerator</span><span class="p">(</span><span class="mi">10000</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">push</span><span class="p">(</span><span class="n">ebp</span><span class="p">);</span> <span class="c">// stack</span>
        <span class="n">push</span><span class="p">(</span><span class="n">esi</span><span class="p">);</span>
        <span class="n">push</span><span class="p">(</span><span class="n">edi</span><span class="p">);</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">_P</span> <span class="o">=</span> <span class="mi">4</span> <span class="o">*</span> <span class="mi">3</span><span class="p">;</span>
        <span class="n">mov</span><span class="p">(</span><span class="n">esi</span><span class="p">,</span> <span class="n">ptr</span><span class="p">[</span><span class="n">esp</span> <span class="o">+</span> <span class="n">_P</span> <span class="o">+</span> <span class="mi">4</span><span class="p">]);</span>
        <span class="n">mov</span><span class="p">(</span><span class="n">edi</span><span class="p">,</span> <span class="n">ptr</span><span class="p">[</span><span class="n">esp</span> <span class="o">+</span> <span class="n">_P</span> <span class="o">+</span> <span class="mi">8</span><span class="p">]);</span>
        <span class="n">mov</span><span class="p">(</span><span class="n">ebp</span><span class="p">,</span> <span class="n">ptr</span><span class="p">[</span><span class="n">esp</span> <span class="o">+</span> <span class="n">_P</span> <span class="o">+</span> <span class="mi">12</span><span class="p">]);</span>
        <span class="kt">int</span> <span class="n">labelNo</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">std</span><span class="o">::</span><span class="n">stack</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">keepLabelNo</span><span class="p">;</span>
        <span class="kt">char</span> <span class="n">label</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
        <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">is</span> <span class="o">&gt;&gt;</span> <span class="n">c</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">switch</span> <span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span> <span class="n">inc</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span> <span class="n">dec</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span> <span class="n">push</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span> <span class="n">call</span><span class="p">(</span><span class="n">esi</span><span class="p">);</span> <span class="n">pop</span><span class="p">(</span><span class="n">eax</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span> <span class="n">call</span><span class="p">(</span><span class="n">edi</span><span class="p">);</span> <span class="n">mov</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">],</span> <span class="n">eax</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span> <span class="n">add</span><span class="p">(</span><span class="n">ebp</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span> <span class="n">sub</span><span class="p">(</span><span class="n">ebp</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
                <span class="n">sprintf</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="s">&quot;B%d&quot;</span><span class="p">,</span> <span class="n">labelNo</span><span class="p">);</span> <span class="n">L</span><span class="p">(</span><span class="n">label</span><span class="p">);</span>
                <span class="n">mov</span><span class="p">(</span><span class="n">eax</span><span class="p">,</span> <span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span>
                <span class="n">test</span><span class="p">(</span><span class="n">eax</span><span class="p">,</span> <span class="n">eax</span><span class="p">);</span>
                <span class="n">sprintf</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="s">&quot;F%d&quot;</span><span class="p">,</span> <span class="n">labelNo</span><span class="p">);</span> <span class="n">jz</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">T_NEAR</span><span class="p">);</span>
                <span class="n">keepLabelNo</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">labelNo</span><span class="o">++</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
                <span class="p">{</span>
                    <span class="kt">int</span> <span class="n">no</span> <span class="o">=</span> <span class="n">keepLabelNo</span><span class="p">.</span><span class="n">top</span><span class="p">();</span> <span class="n">keepLabelNo</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
                    <span class="n">sprintf</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="s">&quot;B%d&quot;</span><span class="p">,</span> <span class="n">no</span><span class="p">);</span> <span class="n">jmp</span><span class="p">(</span><span class="n">label</span><span class="p">);</span>
                    <span class="n">sprintf</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="s">&quot;F%d&quot;</span><span class="p">,</span> <span class="n">no</span><span class="p">);</span> <span class="n">L</span><span class="p">(</span><span class="n">label</span><span class="p">);</span>
                <span class="p">}</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="o">:</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">pop</span><span class="p">(</span><span class="n">edi</span><span class="p">);</span>
        <span class="n">pop</span><span class="p">(</span><span class="n">esi</span><span class="p">);</span>
        <span class="n">pop</span><span class="p">(</span><span class="n">ebp</span><span class="p">);</span>
        <span class="n">ret</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">dump</span><span class="p">(</span><span class="k">const</span> <span class="n">Xbyak</span><span class="o">::</span><span class="n">uint8</span> <span class="o">*</span><span class="n">code</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">size</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdio.h&gt;</span><span class="se">\n</span><span class="s">static int stack[32768];</span><span class="se">\n</span><span class="s">static const unsigned char code[] = {&quot;</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">size_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;0x%02x,&quot;</span><span class="p">,</span> <span class="n">code</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span> <span class="k">if</span> <span class="p">((</span><span class="n">i</span> <span class="o">%</span> <span class="mi">16</span><span class="p">)</span> <span class="o">==</span> <span class="mi">15</span><span class="p">)</span> <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">};&quot;</span><span class="p">);</span>
<span class="cp">#ifdef __linux__</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;unistd.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;sys/mman.h&gt;&quot;</span><span class="p">);</span>
<span class="cp">#endif</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;main()</span><span class="se">\n</span><span class="s">{&quot;</span><span class="p">);</span>
<span class="cp">#ifdef __linux__</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">long pageSize = sysconf(_SC_PAGESIZE) - 1;&quot;</span><span class="p">);</span>
    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">mprotect((void*)code, (sizeof(code) + pageSize) &amp; ~pageSize, PROT_READ | PROT_EXEC);&quot;</span><span class="p">);</span>
<span class="cp">#endif</span>
    <span class="n">puts</span><span class="p">(</span>
        <span class="s">&quot;</span><span class="se">\t</span><span class="s">((void (*)(void*, void*, int *))code)((void*)putchar, (void*)getchar, stack);</span><span class="se">\n</span><span class="s">&quot;</span>
        <span class="s">&quot;}&quot;</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;bf filename.bf [0|1]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
    <span class="kt">int</span> <span class="n">mode</span> <span class="o">=</span> <span class="n">argc</span> <span class="o">==</span> <span class="mi">3</span> <span class="o">?</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span> 
    <span class="n">Brainfuck</span> <span class="n">bf</span><span class="p">(</span><span class="n">ifs</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">static</span> <span class="kt">int</span> <span class="n">stack</span><span class="p">[</span><span class="mi">32768</span><span class="p">];</span>
        <span class="p">((</span><span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="p">))</span><span class="n">bf</span><span class="p">.</span><span class="n">getCode</span><span class="p">())((</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">putchar</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">getchar</span><span class="p">,</span> <span class="n">stack</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">dump</span><span class="p">(</span><span class="n">bf</span><span class="p">.</span><span class="n">getCode</span><span class="p">(),</span> <span class="n">bf</span><span class="p">.</span><span class="n">getSize</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3984/addtag/" class="addtag" id="addtag_3984">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/Xbyak%2Casm/">Xbyak,asm</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3984/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3984/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3984"
  >-</span><span
  class="button yellow"
  id="rating_z_3984"
  >0</span><span 
  class="button green"
  id="rating_p_3984"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3984/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3984/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3994">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/564/" target="_top">herumi</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3994/">#3994</a>(<script language="JavaScript">print_time(new Date("2007/11/14 05:43 GMT"));</script><noscript>2007/11/14 05:43 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  にしおさんに倣って，若干最適化コードを生成するようにしました．素数計算のだと3割ぐらい出力コード長が短くなるようです．
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="o">+</span>       <span class="kt">int</span> <span class="n">getContinuousChar</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">is</span><span class="p">,</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span>
<span class="o">+</span>       <span class="p">{</span>
<span class="o">+</span>               <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="o">+</span>               <span class="kt">char</span> <span class="n">p</span><span class="p">;</span>
<span class="o">+</span>               <span class="k">while</span> <span class="p">(</span><span class="n">is</span> <span class="o">&gt;&gt;</span> <span class="n">p</span><span class="p">)</span> <span class="p">{</span>
<span class="o">+</span>                       <span class="k">if</span> <span class="p">(</span><span class="n">p</span> <span class="o">!=</span> <span class="n">c</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
<span class="o">+</span>                       <span class="n">count</span><span class="o">++</span><span class="p">;</span>
<span class="o">+</span>               <span class="p">}</span>
<span class="o">+</span>               <span class="n">is</span><span class="p">.</span><span class="n">unget</span><span class="p">();</span>
<span class="o">+</span>               <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="o">+</span>       <span class="p">}</span>

<span class="o">+</span><span class="err">#</span><span class="k">if</span> <span class="mi">0</span>
        <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span> <span class="n">inc</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span> <span class="n">dec</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span> <span class="n">add</span><span class="p">(</span><span class="n">ebp</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span> <span class="n">sub</span><span class="p">(</span><span class="n">ebp</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
<span class="cp">#else</span>
       <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
       <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
               <span class="p">{</span>
                       <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">getContinuousChar</span><span class="p">(</span><span class="n">is</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
                       <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                               <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">?</span> <span class="n">inc</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">])</span> <span class="o">:</span> <span class="n">dec</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">]);</span>
                       <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                               <span class="n">add</span><span class="p">(</span><span class="n">dword</span> <span class="p">[</span><span class="n">ebp</span><span class="p">],</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span> <span class="o">?</span> <span class="n">count</span> <span class="o">:</span> <span class="o">-</span><span class="n">count</span><span class="p">));</span>
                       <span class="p">}</span>
               <span class="p">}</span>
               <span class="k">break</span><span class="p">;</span>
       <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
       <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
               <span class="p">{</span>
                       <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">getContinuousChar</span><span class="p">(</span><span class="n">is</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
                       <span class="n">add</span><span class="p">(</span><span class="n">ebp</span><span class="p">,</span> <span class="mi">4</span> <span class="o">*</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span> <span class="o">?</span> <span class="n">count</span> <span class="o">:</span> <span class="o">-</span><span class="n">count</span><span class="p">));</span>
               <span class="p">}</span>
               <span class="k">break</span><span class="p">;</span>
<span class="cp">#endif</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3994/addtag/" class="addtag" id="addtag_3994">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3994/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3994/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3994"
  >-</span><span
  class="button yellow"
  id="rating_z_3994"
  >0</span><span 
  class="button green"
  id="rating_p_3994"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3984/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3994/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3994/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment3986">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/">#3986</a>(<script language="JavaScript">print_time(new Date("2007/11/14 04:19 GMT"));</script><noscript>2007/11/14 04:19 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>仮想機械(機械状態とインストラクションセット)を明示的に定義した．</p>
<p>機械状態は，プログラムカウンタのスタック，プログラムカウンタ，ヒープ，ヒープポインタの4つ組み．インストラクションはBFのインストラクションに対応する.</p>
<p></p>
<ul>
<li>
 '&gt;' → incp
</li>
<li>
 '&lt;' → decp
</li>
<li>
 '+' → incp
</li>
<li>
 '-' → decc
</li>
<li>
 '.' → putc
</li>
<li>
 ',' → getc
</li>
<li>
 ']' → jmpb
</li>
<li> '[' → jmpf &lt;PC&gt;</li>
</ul>
<p></p>
<p>jmpf 以外はオペランドのないインストラクション．jmpfは飛び先をオペランドとする．</p>
<p> % runghc bfc.hs hello_world</p>
<p>とやるとhello_world.bというBFコードファイルを読み，インストラクション列をbfrts.templというランタイムテンプレートの最後に追加して，hello_world.hsというHaskellのファイルを作成する．上のhello_world.bをコンパイルしてできたインストラクション列は，</p>
<p></p>
<p>codeL :: [Instruction]</p>
<p>codeL = [incc,incc,incc,incc,incc,incc,incc,incc,jmpf 22,incp,incc,incc,incc,incc,incc,incc,incc,incc,incc,decp,decc,jmpb,incp,putc,decp,incc,incc,incc,incc,incc,jmpf 41,incp,incc,incc,incc,incc,incc,incc,decp,decc,jmpb,incp,decc,putc,incc,incc,incc,incc,incc,incc,incc,putc,putc,incc,incc,incc,putc,decp,incc,incc,incc,incc,incc,incc,incc,incc,jmpf 77,incp,incp,incc,incc,incc,incc,decp,decp,decc,jmpb,incp,incp,putc,decp,decp,incc,incc,incc,incc,jmpf 97,incp,decc,decc,decc,decc,decc,decc,decp,decc,jmpb,incp,putc,decp,incc,incc,incc,incc,jmpf 115,incp,incc,incc,incc,incc,incc,incc,decp,decc,jmpb,incp,putc,incc,incc,incc,putc,decc,decc,decc,decc,decc,decc,putc,decc,decc,decc,decc,decc,decc,decc,decc,putc,incp,incc,putc]</p>
<p></p>
<p>で，これがbfrts.templの最後の追加されて hello_world.hs が出きる．</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107</pre></td><td class="code"><div class="highlight"><pre><span class="c1">-- bfc.hs : BF コンパイラ ---------------------------------------------------</span>
<span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Char</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">args</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="p">;</span> <span class="kr">case</span> <span class="nv">args</span> <span class="kr">of</span>
              <span class="p">[]</span>  <span class="o">-&gt;</span> <span class="nv">runcompiler</span> <span class="nv">stdin</span> <span class="nv">stdout</span>
              <span class="nv">s</span><span class="o">:</span><span class="kr">_</span> <span class="o">-&gt;</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">ih</span> <span class="o">&lt;-</span> <span class="nv">openFile</span> <span class="p">(</span><span class="nv">s</span><span class="o">++</span><span class="s">&quot;.b&quot;</span><span class="p">)</span> <span class="n">ReadMode</span>
                        <span class="p">;</span> <span class="nv">oh</span> <span class="o">&lt;-</span> <span class="nv">openFile</span> <span class="p">(</span><span class="nv">s</span><span class="o">++</span><span class="s">&quot;.hs&quot;</span><span class="p">)</span> <span class="n">WriteMode</span>
                        <span class="p">;</span> <span class="nv">runcompiler</span> <span class="nv">ih</span> <span class="nv">oh</span>
                        <span class="p">}</span>
          <span class="p">}</span>

<span class="nv">runcompiler</span> <span class="nv">ih</span> <span class="nv">oh</span> <span class="o">=</span>
 <span class="kr">do</span> <span class="p">{</span> <span class="nv">cs</span> <span class="o">&lt;-</span> <span class="nv">hGetContents</span> <span class="nv">ih</span>
    <span class="p">;</span> <span class="kr">let</span> <span class="nv">cs&#39;</span> <span class="o">=</span> <span class="nv">zip</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span> <span class="o">$</span> <span class="nv">filter</span> <span class="p">(</span><span class="nv">not</span> <span class="o">.</span> <span class="nv">isSpace</span><span class="p">)</span> <span class="nv">cs</span>
    <span class="p">;</span> <span class="nv">outputCode</span> <span class="nv">oh</span> <span class="o">$</span> <span class="nv">compile</span> <span class="nv">cs&#39;</span>
    <span class="p">}</span>

<span class="nv">compile</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">compile</span> <span class="p">(</span><span class="nv">c</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">c</span> <span class="kr">of</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;&gt;&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;incp&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;&lt;&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;decp&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;incc&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;-&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;decc&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;putc&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;,&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;getc&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="s">&quot;jmpb&quot;</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="s">&quot;jmpf &quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">pc</span><span class="p">)</span> <span class="o">:</span> <span class="nv">compile</span> <span class="nv">cs</span>
               <span class="kr">where</span> <span class="nv">pc</span> <span class="o">=</span> <span class="nv">findpc</span> <span class="p">[]</span> <span class="nv">cs</span>
  <span class="kr">_</span>       <span class="o">-&gt;</span> <span class="nv">error</span> <span class="s">&quot;invalid input&quot;</span>

<span class="nv">findpc</span> <span class="nv">s</span> <span class="p">[]</span>     <span class="o">=</span> <span class="nv">error</span> <span class="s">&quot;syntax error&quot;</span>
<span class="nv">findpc</span> <span class="nv">s</span> <span class="p">(</span><span class="nv">c</span><span class="o">:</span><span class="nv">cs</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">c</span> <span class="kr">of</span>
  <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="sc">&#39;[&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nv">findpc</span> <span class="p">(</span><span class="sc">&#39;[&#39;</span><span class="o">:</span><span class="nv">s</span><span class="p">)</span> <span class="nv">cs</span>
  <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">case</span> <span class="nv">s</span> <span class="kr">of</span>
               <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nv">p</span><span class="o">+</span><span class="mi">1</span>
               <span class="kr">_</span>  <span class="o">-&gt;</span> <span class="nv">findpc</span> <span class="p">(</span><span class="nv">tail</span> <span class="nv">s</span><span class="p">)</span> <span class="nv">cs</span>
  <span class="kr">_</span>       <span class="o">-&gt;</span> <span class="nv">findpc</span> <span class="nv">s</span> <span class="nv">cs</span>

<span class="nv">outputCode</span> <span class="nv">h</span> <span class="nv">s</span> 
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">hd</span> <span class="o">&lt;-</span> <span class="nv">readFile</span> <span class="s">&quot;bfrts.tmpl&quot;</span>
      <span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">h</span> <span class="nv">hd</span>
      <span class="p">;</span> <span class="nv">hPutStrLn</span> <span class="nv">h</span> <span class="s">&quot;codeL :: [Instruction]&quot;</span>
      <span class="p">;</span> <span class="nv">hPutStr</span> <span class="nv">h</span> <span class="s">&quot;codeL = [&quot;</span>
      <span class="p">;</span> <span class="nv">hPutStr</span> <span class="nv">h</span> <span class="p">(</span><span class="nv">concat</span> <span class="p">(</span><span class="nv">intersperse</span> <span class="s">&quot;,&quot;</span> <span class="nv">s</span><span class="p">))</span>
      <span class="p">;</span> <span class="nv">hPutStr</span> <span class="nv">h</span> <span class="s">&quot;]\n&quot;</span>
      <span class="p">}</span>

<span class="c1">-- bfrts.templ : ランタイムテンプレート -------------------------------------</span>

<span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span><span class="o">.</span><span class="n">State</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Array</span> <span class="nv">as</span> <span class="n">A</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Char</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">IntMap</span> <span class="nv">as</span> <span class="n">M</span>
<span class="kr">import</span> <span class="n">Debug</span><span class="o">.</span><span class="n">Trace</span>

<span class="kr">type</span> <span class="n">PC</span>      <span class="o">=</span> <span class="n">Int</span>
<span class="kr">type</span> <span class="n">Code</span>    <span class="o">=</span> <span class="n">Array</span> <span class="n">PC</span> <span class="n">Instruction</span>
<span class="kr">type</span> <span class="n">Heap</span>    <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="n">IntMap</span> <span class="n">Char</span>
<span class="kr">type</span> <span class="n">Stack</span>   <span class="o">=</span> <span class="p">[</span><span class="n">PC</span><span class="p">]</span>
<span class="kr">type</span> <span class="n">Pointer</span> <span class="o">=</span> <span class="n">Int</span>
<span class="kr">type</span> <span class="n">VM</span>   <span class="o">=</span> <span class="p">(</span><span class="n">Stack</span><span class="p">,</span><span class="n">PC</span><span class="p">,</span><span class="n">Heap</span><span class="p">,</span><span class="n">Pointer</span><span class="p">)</span>

<span class="kr">type</span> <span class="n">Instruction</span> <span class="o">=</span> <span class="n">VM</span> <span class="o">-&gt;</span> <span class="n">StateT</span> <span class="n">VM</span> <span class="n">IO</span> <span class="p">()</span>

<span class="nv">top</span> <span class="o">=</span> <span class="nv">head</span>
<span class="nv">pop</span> <span class="o">=</span> <span class="nv">tail</span>
<span class="nv">push</span> <span class="o">=</span> <span class="p">(</span><span class="o">:</span><span class="p">)</span>

<span class="c1">-- initial machine state</span>

<span class="nv">iStat</span> <span class="o">=</span> <span class="p">([],</span><span class="mi">0</span><span class="p">,</span><span class="n">M</span><span class="o">.</span><span class="nv">fromList</span> <span class="o">$</span> <span class="nv">zip</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="mi">29999</span><span class="p">]</span> <span class="p">(</span><span class="nv">repeat</span> <span class="o">$</span> <span class="nv">chr</span> <span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="p">)</span>

<span class="c1">-- instruction set</span>

<span class="nv">incp</span><span class="p">,</span><span class="nv">decp</span><span class="p">,</span><span class="nv">incc</span><span class="p">,</span><span class="nv">decc</span><span class="p">,</span><span class="nv">putc</span><span class="p">,</span><span class="nv">getc</span><span class="p">,</span><span class="nv">jmpb</span> <span class="o">::</span> <span class="n">Instruction</span>
<span class="nv">jmpf</span> <span class="o">::</span> <span class="n">PC</span> <span class="o">-&gt;</span> <span class="n">Instruction</span>
<span class="nv">incp</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">p</span><span class="p">)</span>
<span class="nv">decp</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">pred</span> <span class="nv">p</span><span class="p">)</span>
<span class="nv">incc</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="n">M</span><span class="o">.</span><span class="nv">update</span> <span class="p">(</span><span class="n">Just</span> <span class="o">.</span> <span class="nv">succ</span><span class="p">)</span> <span class="nv">p</span> <span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span>
<span class="nv">decc</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="n">M</span><span class="o">.</span><span class="nv">update</span> <span class="p">(</span><span class="n">Just</span> <span class="o">.</span> <span class="nv">pred</span><span class="p">)</span> <span class="nv">p</span> <span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span>
<span class="nv">putc</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="nv">liftIO</span> <span class="p">(</span><span class="nv">putChar</span> <span class="p">(</span><span class="nv">h</span> <span class="n">M</span><span class="o">.!</span> <span class="nv">p</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span>
<span class="nv">getc</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="nv">liftIO</span> <span class="p">(</span><span class="nv">getChar</span> <span class="o">&gt;&gt;=</span> <span class="o">\</span> <span class="nv">ch</span> <span class="o">-&gt;</span> <span class="nv">return</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="n">M</span><span class="o">.</span><span class="nv">update</span> <span class="p">(</span><span class="nv">const</span> <span class="p">(</span><span class="n">Just</span> <span class="nv">ch</span><span class="p">))</span> <span class="nv">p</span> <span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">))</span> <span class="o">&gt;&gt;=</span> <span class="nv">put</span>
<span class="nv">jmpb</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">h</span> <span class="n">M</span><span class="o">.!</span> <span class="nv">p</span> <span class="o">==</span> <span class="nv">chr</span> <span class="mi">0</span> <span class="kr">then</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">pop</span> <span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="kr">else</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">top</span> <span class="nv">s</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span>
<span class="nv">jmpf</span> <span class="nv">pc</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">h</span> <span class="n">M</span><span class="o">.!</span> <span class="nv">p</span> <span class="o">==</span> <span class="nv">chr</span> <span class="mi">0</span> <span class="kr">then</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">pc</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="kr">else</span> <span class="nv">put</span> <span class="p">(</span><span class="nv">push</span> <span class="p">(</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">s</span><span class="p">,</span><span class="nv">succ</span> <span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span>

<span class="c1">-- run compiled bf code</span>
             
<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">evalStateT</span> <span class="nv">execute</span> <span class="nv">iStat</span> <span class="o">&gt;&gt;</span> <span class="nv">putStrLn</span> <span class="s">&quot;&quot;</span>

<span class="nv">run</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">stat</span><span class="o">@</span><span class="p">(</span><span class="nv">s</span><span class="p">,</span><span class="nv">c</span><span class="p">,</span><span class="nv">h</span><span class="p">,</span><span class="nv">p</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">get</span>
         <span class="p">;</span> <span class="kr">if</span> <span class="nv">inRange</span> <span class="p">(</span><span class="nv">bounds</span> <span class="nv">code</span><span class="p">)</span> <span class="nv">c</span> <span class="kr">then</span> <span class="p">(</span><span class="nv">code</span> <span class="n">A</span><span class="o">.!</span> <span class="nv">c</span><span class="p">)</span> <span class="nv">stat</span> <span class="o">&gt;&gt;</span> <span class="nv">run</span>
           <span class="kr">else</span> <span class="nv">return</span> <span class="p">()</span> 
         <span class="p">}</span>

<span class="nv">code</span> <span class="o">::</span> <span class="n">Code</span> 
<span class="nv">code</span> <span class="o">=</span> <span class="nv">listArray</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nv">length</span> <span class="nv">codeL</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">codeL</span>

<span class="c1">-- この下にコンパイル済みの codeL :: [Instruction] が追加される</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/addtag/" class="addtag" id="addtag_3986">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3986"
  >-</span><span
  class="button yellow"
  id="rating_z_3986"
  >0</span><span 
  class="button green"
  id="rating_p_3986"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/">
    2
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3986/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4282">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4282/">#4282</a>(<script language="JavaScript">print_time(new Date("2007/11/21 00:44 GMT"));</script><noscript>2007/11/21 00:44 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>バグ発見。ランタイムテンプレート

コメント内のファイル名
  bfrts.templ → bfrts.tmpl

main の定義の右辺
  execute → run
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4282/addtag/" class="addtag" id="addtag_4282">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4282"
  >-</span><span
  class="button yellow"
  id="rating_z_4282"
  >0</span><span 
  class="button green"
  id="rating_p_4282"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4282/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4282/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4288">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/304/" target="_top">[1..100]&gt;&gt;=pen</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4288/">#4288</a>(<script language="JavaScript">print_time(new Date("2007/11/21 09:36 GMT"));</script><noscript>2007/11/21 09:36 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>高階関数を使ってみたい年頃なので高階関数使った版findpc を書いてみました。

findpc はループがネストしているとき '[' が来るごとに何度も呼ばれるのが
ちょっともったいない気もします。

それと hClose oh しないとバッファが flush されませんでした。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="highlight"><pre><span class="c1">-- import Maybe</span>
<span class="c1">-- import Control.Monad</span>

<span class="c1">-- -- where pc = findpc [] cs</span>
<span class="c1">-- where pc = findpc cs</span>

<span class="nv">findpc</span> <span class="nv">cs</span> <span class="o">=</span> <span class="nv">fromMaybe</span> <span class="p">(</span><span class="nv">error</span> <span class="s">&quot;syntax error&quot;</span><span class="p">)</span>
  <span class="o">$</span> <span class="nv">msum</span> <span class="o">$</span> <span class="nv">snd</span> <span class="o">$</span> <span class="nv">mapAccumL</span> <span class="nv">f</span> <span class="mi">0</span> <span class="nv">cs</span>  <span class="kr">where</span>
    <span class="nv">f</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="sc">&#39;]&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">p</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
    <span class="nv">f</span> <span class="nv">s</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">c</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">s</span><span class="o">+</span><span class="nv">d</span><span class="p">,</span> <span class="n">Nothing</span><span class="p">)</span> <span class="kr">where</span>
      <span class="nv">d</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">c</span> <span class="kr">of</span><span class="p">;</span> <span class="sc">&#39;]&#39;</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="sc">&#39;[&#39;</span> <span class="o">-&gt;</span> <span class="mi">1</span><span class="p">;</span> <span class="kr">_</span> <span class="o">-&gt;</span> <span class="mi">0</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4288/addtag/" class="addtag" id="addtag_4288">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4288/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4288/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4288"
  >-</span><span
  class="button yellow"
  id="rating_z_4288"
  >0</span><span 
  class="button green"
  id="rating_p_4288"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/3986/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4288/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4288/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  

  
    





<div class="comment" id="comment3991">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/348/" target="_top">naoya_t</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3991/">#3991</a>(<script language="JavaScript">print_time(new Date("2007/11/14 05:13 GMT"));</script><noscript>2007/11/14 05:13 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>#3964-#3978を、optimize=2 を指定すると身も蓋もなく最適化を行うように改良(?)したもの。

- http://namazu.org/~takesako/ppencode/bpencode.html
- http://pc11.2ch.net/test/read.cgi/tech/1177988460/135
あたりのソースを通してみると面白いです。

% cat helloworld.bf
++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]
&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.
&gt;.+++.------.--------.&gt;+.&gt;.

% awk -v optimize=1 -f bf2awk.awk &lt; helloworld.bf
BEGIN {
  ix = 0
  st[ix] += 10
  while (st[ix]) {
    st[++ix] += 7
    st[++ix] += 10
    st[++ix] += 3
    st[++ix]++
    ix -= 4
    st[ix]--
  }
  st[++ix] += 2
  printf("%c", st[ix])
  printf("%c", ++st[++ix])
  st[ix] += 7
  printf("%c", st[ix])
  printf("%c", st[ix])
  st[ix] += 3
  printf("%c", st[ix])
  st[++ix] += 2
  printf("%c", st[ix])
  ix -= 2
  st[ix] += 15
  printf("%c", st[ix])
  printf("%c", st[++ix])
  st[ix] += 3
  printf("%c", st[ix])
  st[ix] -= 6
  printf("%c", st[ix])
  st[ix] -= 8
  printf("%c", st[ix])
  printf("%c", ++st[++ix])
  printf("%c", st[++ix])
}

% awk -v optimize=2 -f bf2awk.awk &lt; helloworld.bf
BEGIN {
  print "Hello World!"
}
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220</pre></td><td class="code"><div class="highlight"><pre>#
# Brainf*ck to AWK compiler, written in AWK by naoya_t/
#
BEGIN {
    inst_buf = &quot;&quot;
    ix = 0
}
{
    gsub(/#.*$/,&quot;&quot;); # comment
    gsub(/[^\[\]&lt;&gt;+\-.,]/,&quot;&quot;); if (/^$/) next
    inst_buf = inst_buf $0
}
END {
    if (inst_buf ~ /,/) getchar_used = 1

    # compile
    if (optimize &gt;= 1) reset_last()
    output_buf = &quot;&quot;

    indent = &quot;&quot;
    print &quot;BEGIN {&quot;

    indent_incr()
    if (getchar_used) indent_print(&quot;read_buf = \&quot;\&quot;&quot;)
    if (getchar_used || optimize &lt; 2) indent_print(&quot;ix = 0&quot;)

    diff_value[&quot;&gt;&quot;] = diff_value[&quot;+&quot;] = 1
    diff_value[&quot;&lt;&quot;] = diff_value[&quot;-&quot;] = -1
    incr_decr[&quot;&gt;&quot;] = incr_decr[&quot;+&quot;] = &quot;++&quot;
    incr_decr[&quot;&lt;&quot;] = incr_decr[&quot;-&quot;] = &quot;--&quot;

    N = split(inst_buf, ops, &quot;&quot;)
    eval(ops,1,N)

    if (optimize &gt;= 1) out_last()
    flush_buf(0)

    indent_decr()
    indent_print(&quot;}&quot;)

    if (getchar_used) output_getchar_funcs()
}

function eval(ops,begin,end,  i,j,op,s,till)
{
    for (i=begin; i&lt;=end; i++) {
        op = ops[i]
        if (op ~ /[&gt;&lt;]/) {
            ix += diff_value[op] # emulation
            if (optimize &gt;= 1) {
                if (last_inst == &quot;ix&quot;) {
                    last_arg += diff_value[op]
                } else {
                    out_last()
                    set_last(&quot;ix&quot;, diff_value[op])
                }
            } else {
                if (getchar_used || optimize &lt; 2) indent_print(&quot;ix&quot; incr_decr[op])
            }
        } else if (op ~ /[+-]/) {
            st[ix] += diff_value[op] # emulation
            if (optimize &gt;= 1) {
                if (last_inst ~ /^st\[/) {
                    last_arg += diff_value[op]
                } else {
                    s = set_incr_decr(&quot;st[ix]&quot;)
                    if (last_inst) out_last()
                    set_last(s, diff_value[op])
                }
            } else {
                if (getchar_used || optimize &lt; 2) indent_print(&quot;st[ix]&quot; incr_decr[op])
            }
        } else if (op == &quot;.&quot;) {
            s = &quot;printf(\&quot;%c\&quot;, st[ix])&quot;
            if (optimize &gt;= 1) {
                s = set_incr_decr(s)
                if (last_inst) out_last()
            }
            if (getchar_used || optimize &lt; 2)
                indent_print(s)
            else
                putchar(st[ix])
        } else if (op == &quot;,&quot;) {
            s = &quot;st[ix] = getchar()&quot;
            if (optimize &gt;= 1) {
                s = set_incr_decr(s)
                if (last_inst) out_last()
            }
            indent_print(s)
        } else if (op == &quot;[&quot;) {
            nest = 1
            for (j=i+1; j&lt;=N; j++) {
                if (ops[j] == &quot;[&quot;) nest++
                if (ops[j] == &quot;]&quot;) nest--
                if (nest == 0) { till = j ; break }
            }
            while_loop(ops, i+1, till-1)
            i = till
        } else {
            ;
        }
    }
}
function while_loop(ops,begin,end,  i,j,putchar_used)
{
    putchar_used = 0
    for (j=begin; j&lt;=end; j++) if (ops[j] == &quot;.&quot;) { putchar_used = 1; break }

    if (getchar_used || optimize &lt; 2) {
        out_last()
        indent_print(&quot;while (st[ix]) {&quot;)
        indent_incr()

        eval(ops,begin,end)

        if (optimize &gt;= 1) out_last()
        indent_decr()
        indent_print(&quot;}&quot;)
    } else {
        while (st[ix]) eval(ops,begin,end)
    }
}

function putchar(ch)
{
    if (ch == 10 || ch == 13) {
        flush_buf(1)
    } else {
        output_buf = output_buf sprintf(&quot;%c&quot;, st[ix])
    }
}
function flush_buf(cr)
{
    if (output_buf) {
        gsub(/\\/, &quot;\\\\&quot;, output_buf)
        if (cr)
            indent_print(&quot;print \&quot;&quot; output_buf &quot;\&quot;&quot;)
        else
            indent_print(&quot;printf(\&quot;%s\&quot;, \&quot;&quot; output_buf &quot;\&quot;)&quot;)
        output_buf = &quot;&quot;
    }
}

function indent_incr()
{
    indent = &quot;  &quot; indent
}
function indent_decr()
{
    indent = substr(indent, 3)
}
function indent_print(line)
{
    print indent line
}
function set_last(inst,arg)
{
    last_inst = inst
    last_arg = arg
}
function reset_last()
{
    last_inst = &quot;&quot;
    last_arg = 0
}
function out_last(  diff)
{
    if (last_inst ~ /ix/) {
        if (last_arg &gt; 1)
            diff = &quot; += &quot; last_arg
        else if (last_arg == 1)
            diff = &quot;++&quot;
        else if (last_arg == 0)
            diff = &quot;&quot;
        else if (last_arg == -1)
            diff = &quot;--&quot;
        else if (last_arg &lt; -1)
            diff = &quot; -= &quot; (0 - last_arg)

        if (diff &amp;&amp; (getchar_used || optimize &lt; 2)) indent_print(last_inst diff)
    }
    last_inst = &quot;&quot;
}
function set_incr_decr(s)
{
    if (last_inst == &quot;ix&quot;) {
        if (last_arg == 1) { gsub(/ix/, &quot;++ix&quot;, s); last_inst = &quot;&quot; }
        else if (last_arg == -1) { gsub(/ix/, &quot;--ix&quot;, s); last_inst = &quot;&quot; }
    } else if (last_inst ~ /^st\[/ &amp;&amp; s ~ /printf/) {
        if (last_arg == 1) { gsub(/st\[ix\]/, &quot;++&quot; last_inst, s); last_inst = &quot;&quot; }
        else if (last_arg == -1) { gsub(/st\[ix\]/, &quot;--&quot; last_inst, s); last_inst = &quot;&quot; }
    }

    return s
}

function output_getchar_funcs()
{
    print &quot;function getchar(  ch)&quot;
    print &quot;{&quot;
    print &quot;  if (read_buf ~ /^$/) {&quot;
    print &quot;    if (eof) return -1&quot;
#    print &quot;    if ((getline read_buf) &lt; 1) { eof = 1; return -1 }&quot;
    print &quot;    if (getline != 1) { eof = 1; return -1 } ; read_buf = $0&quot; # a2p
    print &quot;  }&quot;
    print &quot;  ch = ord(substr(read_buf,1,1))&quot;
    print &quot;  read_buf = substr(read_buf,2)&quot;
    print &quot;  return ch&quot;
    print &quot;}&quot;
    
    print &quot;function ord(ch, ofs)&quot;
    print &quot;{&quot;
    print &quot;  if (ch == \&quot;\\t\&quot;) return 9&quot;
    print &quot;  if (ch == \&quot;\\n\&quot;) return 13&quot;
#    print &quot;  ofs = index(\&quot; !\\\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\&quot;, ch)&quot;
    print &quot;  if (ch == \&quot;@\&quot;) return 64&quot; # a2p
    print &quot;  ofs = index(\&quot; !\\\&quot;#$%&amp;&#39;()*+,-./0123456789:;&lt;=&gt;?.ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\&quot;, ch)&quot; # a2p
    print &quot;  return ofs ? 31 + ofs : 0&quot;
    print &quot;}&quot;
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/3991/addtag/" class="addtag" id="addtag_3991">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/neta/">neta</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3991/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/3991/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3991"
  >-</span><span
  class="button yellow"
  id="rating_z_3991"
  >0</span><span 
  class="button green"
  id="rating_p_3991"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/3991/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  
    





<div class="comment" id="comment4003">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/448/" target="_top">naranja</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4003/">#4003</a>(<script language="JavaScript">print_time(new Date("2007/11/14 10:09 GMT"));</script><noscript>2007/11/14 10:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>素直に変換。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">file</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">string</span>;

<span class="kt">void</span> <span class="n">main</span>(<span class="n">string</span>[] <span class="n">args</span>){
    <span class="n">string</span> <span class="n">bfCode</span> = <span class="k">cast</span>(<span class="n">string</span>)<span class="n">read</span>(<span class="n">args</span>[<span class="mi">1</span>]);
    <span class="n">string</span>[] <span class="n">buf</span>;
    <span class="kt">uint</span> <span class="n">ptrIndex</span>;
    <span class="kt">uint</span> <span class="n">maxPtrIndex</span>;
    <span class="kt">uint</span> <span class="n">indentLevel</span> = <span class="mi">1</span>;

    <span class="kt">void</span> <span class="n">addLine</span>(<span class="n">string</span> <span class="n">line</span>){
        <span class="n">buf</span> ~= <span class="n">repeat</span>(<span class="s">&quot;\t&quot;</span>, <span class="n">indentLevel</span>) ~ <span class="n">line</span>;
    }

    <span class="k">foreach</span>(<span class="n">c</span>; <span class="n">bfCode</span>){
        <span class="k">switch</span>(<span class="n">c</span>){
            <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;ptr++;&quot;</span>);
                <span class="k">if</span>(++<span class="n">ptrIndex</span> &gt; <span class="n">maxPtrIndex</span>){
                    <span class="n">maxPtrIndex</span>++;
                }
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;ptr--;&quot;</span>);
                <span class="n">ptrIndex</span>--;
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;+&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;mem[ptr]++;&quot;</span>);
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;-&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;mem[ptr]--;&quot;</span>);
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;.&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;putchar(cast(char)mem[ptr]);&quot;</span>);
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;,&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;mem[ptr] = cast(ubyte)getchar();&quot;</span>);
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;[&#39;</span>:
                <span class="n">addLine</span>(<span class="s">&quot;while(mem[ptr]){&quot;</span>);
                <span class="n">indentLevel</span>++;
                <span class="k">break</span>;
            <span class="k">case</span> <span class="sc">&#39;]&#39;</span>:
                <span class="n">indentLevel</span>--;
                <span class="n">addLine</span>(<span class="s">&quot;}&quot;</span>);
                <span class="k">break</span>;
            <span class="k">default</span>:
        }
    }
    <span class="n">writefln</span>(<span class="s">&quot;import std.c.stdio;&quot;</span>);
    <span class="n">writefln</span>(<span class="s">&quot;void main(){&quot;</span>);
    <span class="n">writefln</span>(<span class="s">&quot;\tubyte mem[&quot;</span>, <span class="n">maxPtrIndex</span> + <span class="mi">1</span>, <span class="s">&quot;];&quot;</span>);
    <span class="n">writefln</span>(<span class="s">&quot;\tuint ptr;&quot;</span>);
    <span class="n">writefln</span>(<span class="n">buf</span>.<span class="n">join</span>(<span class="s">&quot;\n&quot;</span>));
    <span class="n">writefln</span>(<span class="s">&quot;}&quot;</span>);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4003/addtag/" class="addtag" id="addtag_4003">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4003/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4003/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4003"
  >-</span><span
  class="button yellow"
  id="rating_z_4003"
  >0</span><span 
  class="button green"
  id="rating_p_4003"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4003/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4007">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4007/">#4007</a>(<script language="JavaScript">print_time(new Date("2007/11/14 10:41 GMT"));</script><noscript>2007/11/14 10:41 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>こんなもの dict にするのがいいに決まっている、と思ったら Dan さんに先こされているし。
仕方がないので、インデント情報も dict に突っ込んだやつを。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">__future__</span> <span class="k">import</span> <span class="n">with_statement</span>
<span class="k">import</span> <span class="nn">sys</span>

<span class="k">def</span> <span class="nf">brainfuck_compile</span><span class="p">(</span><span class="n">source</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">from</span> <span class="nn">cStringIO</span> <span class="k">import</span> <span class="n">StringIO</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">from</span> <span class="nn">StringIO</span> <span class="k">import</span> <span class="n">StringIO</span>

    <span class="n">actions</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">&#39;&gt;&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;pointer += 1&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="s">&#39;&lt;&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;pointer -= 1&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="s">&#39;+&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;tape[pointer] = tape.get(pointer, 0) + 1&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="s">&#39;-&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;tape[pointer] = tape.get(pointer, 0) - 1&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="s">&#39;.&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;sys.stdout.write(chr(tape.get(pointer, 0)))&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="s">&#39;,&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;tape[pointer] = sys.stdin.read(1)&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span>
        <span class="s">&#39;[&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;while tape.get(pointer, 0):&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span>
        <span class="s">&#39;]&#39;</span><span class="p">:</span> <span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span>
    <span class="p">}</span>

    <span class="n">generated</span> <span class="o">=</span> <span class="n">StringIO</span><span class="p">()</span>
    <span class="k">print</span> <span class="o">&gt;&gt;</span><span class="n">generated</span><span class="p">,</span> <span class="s">&#39;import sys&#39;</span>
    <span class="k">print</span> <span class="o">&gt;&gt;</span><span class="n">generated</span><span class="p">,</span> <span class="s">&#39;tape, pointer = dict(), 0&#39;</span>
    <span class="n">indent</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">source</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">c</span><span class="o">.</span><span class="n">isspace</span><span class="p">():</span> <span class="k">continue</span>
        <span class="n">stmt</span><span class="p">,</span> <span class="n">indent_diff</span> <span class="o">=</span> <span class="n">actions</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="k">print</span> <span class="o">&gt;&gt;</span><span class="n">generated</span><span class="p">,</span> <span class="s">&#39;</span><span class="si">%*s%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">indent</span><span class="p">,</span> <span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">stmt</span><span class="p">)</span>
        <span class="n">indent</span> <span class="o">+=</span> <span class="n">indent_diff</span>

    <span class="k">return</span> <span class="n">generated</span><span class="o">.</span><span class="n">getvalue</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">iterchar</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">yield</span> <span class="n">c</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">:</span>
            <span class="k">with</span> <span class="nb">file</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">code</span> <span class="o">=</span> <span class="n">brainfuck_compile</span><span class="p">(</span><span class="n">iterchar</span><span class="p">(</span><span class="n">fp</span><span class="p">))</span>
                <span class="k">print</span> <span class="n">code</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">code</span> <span class="o">=</span> <span class="n">brainfuck_compile</span><span class="p">(</span><span class="n">iterchar</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="p">))</span>
        <span class="k">print</span> <span class="n">code</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4007/addtag/" class="addtag" id="addtag_4007">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4007/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4007/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4007"
  >-</span><span
  class="button yellow"
  id="rating_z_4007"
  >0</span><span 
  class="button green"
  id="rating_p_4007"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4007/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  

  

  
    





<div class="comment" id="comment4017">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4017/">#4017</a>(<script language="JavaScript">print_time(new Date("2007/11/14 12:24 GMT"));</script><noscript>2007/11/14 12:24 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>正規表現とハッシュの合わせ技で</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">compile</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$source</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$out</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$code</span> <span class="o">=</span> <span class="s">&#39;sub{no warnings;my(@t, $p, @o);&#39;</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">%patterns</span> <span class="o">=</span> <span class="p">(</span>
        <span class="s">&#39;&gt;&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span> <span class="s">&#39;$p+=%d;&#39;</span><span class="p">,</span> <span class="nb">length</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">},</span>
        <span class="s">&#39;&lt;&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span> <span class="s">&#39;$p-=%d;&#39;</span><span class="p">,</span> <span class="nb">length</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">},</span>
        <span class="s">&#39;+&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span> <span class="s">&#39;$t[$p]+=%s;&#39;</span><span class="p">,</span> <span class="nb">length</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">},</span>
        <span class="s">&#39;-&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span> <span class="s">&#39;$t[$p]-=%d;&#39;</span><span class="p">,</span> <span class="nb">length</span> <span class="nv">$_</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">},</span>
        <span class="s">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span> <span class="s">&#39;push @o,$t[$p];&#39;</span> <span class="p">},</span>
        <span class="s">&#39;,&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="nb">sprintf</span> <span class="s">&#39;$t[$p] = shift;&#39;</span> <span class="p">},</span>
        <span class="s">&#39;[&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="s">&#39;while($t[$p]){&#39;</span> <span class="p">},</span>
        <span class="s">&#39;]&#39;</span> <span class="o">=&gt;</span> <span class="k">sub </span><span class="p">{</span> <span class="s">&#39;}&#39;</span> <span class="p">},</span>
    <span class="p">);</span>
    <span class="k">my</span> <span class="nv">$re</span> <span class="o">=</span> <span class="n">qr</span><span class="sr">/&gt;+|&lt;+|\++|-+|\.|,|\[|\]/</span><span class="p">;</span>

    <span class="k">my</span> <span class="nv">$tmp</span> <span class="o">=</span> <span class="nv">$source</span><span class="p">;</span>
    <span class="nv">$tmp</span> <span class="o">=~</span> <span class="nb">tr</span><span class="sr">/&lt;&gt;+\-,.[]/</span><span class="o">/</span><span class="n">cd</span><span class="p">;</span>
    <span class="nv">$tmp</span> <span class="o">=~</span> <span class="sr">s/$re/$patterns{substr($&amp;, 0, 1)}-&gt;($&amp;)/ge</span><span class="p">;</span>

    <span class="nv">$code</span> <span class="o">.=</span> <span class="nv">$tmp</span><span class="p">;</span>
    <span class="nv">$code</span> <span class="o">.=</span> <span class="s">&#39;@o;}&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">main</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$source</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span> <span class="nb">local</span> <span class="vg">$/</span><span class="p">;</span> <span class="o">&lt;&gt;</span> <span class="p">};</span>
    <span class="k">my</span> <span class="nv">$code</span> <span class="o">=</span> <span class="n">compile</span><span class="p">(</span><span class="nv">$source</span><span class="p">);</span>

    <span class="k">my</span> <span class="nv">@out</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span> <span class="nb">eval</span> <span class="nv">$code</span> <span class="p">}</span><span class="o">-&gt;</span><span class="p">();</span>
    <span class="k">print</span> <span class="nb">pack</span><span class="p">(</span><span class="s">&#39;c*&#39;</span><span class="p">,</span> <span class="nv">@out</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">main</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4017/addtag/" class="addtag" id="addtag_4017">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4017/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4017/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4017"
  >-</span><span
  class="button yellow"
  id="rating_z_4017"
  >0</span><span 
  class="button green"
  id="rating_p_4017"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4017/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4026">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4026/">#4026</a>(<script language="JavaScript">print_time(new Date("2007/11/14 14:33 GMT"));</script><noscript>2007/11/14 14:33 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>引数にBFのプログラムを与えて実行します。

java Sample '&gt;,----------[&gt;,----------]&lt;[++++++++++.&lt;]'

BF.javaという名前のファイルが作られるので、さらにjavacでコンパイルします。
上記の例は入力を逆順に出力するプログラム（入力の終了は改行(\n)）です。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="o">{</span>
    <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">NL</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">&quot;line.separator&quot;</span><span class="o">);</span>
    <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">HEADER</span> <span class="o">=</span> <span class="s">&quot;import java.io.*;&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span><span class="s">&quot;public class BF {&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span>
        <span class="s">&quot;    static final int SIZE = 32768;&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span><span class="s">&quot;    static byte[] a = new byte[SIZE];&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span>
        <span class="s">&quot;    public static void main(String[] args) throws IOException {&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span>
        <span class="s">&quot;\tBufferedReader r = new BufferedReader(new InputStreamReader(System.in));&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span>
        <span class="s">&quot;\tint ptr = 0;&quot;</span><span class="o">;</span>
    <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">FOOTER</span> <span class="o">=</span> <span class="s">&quot;\tSystem.out.println();&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span><span class="s">&quot;    }&quot;</span><span class="o">+</span><span class="n">NL</span><span class="o">+</span><span class="s">&quot;}&quot;</span><span class="o">;</span>
    <span class="k">static</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">bfCode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;();</span>
    <span class="k">static</span> <span class="o">{</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;&gt;&#39;</span><span class="o">,</span> <span class="s">&quot;\tptr++;&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;&lt;&#39;</span><span class="o">,</span> <span class="s">&quot;\tptr--;&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;+&#39;</span><span class="o">,</span> <span class="s">&quot;\ta[ptr]++;&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;-&#39;</span><span class="o">,</span> <span class="s">&quot;\ta[ptr]--;&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="s">&quot;\tSystem.out.write(a[ptr]);&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">,</span> <span class="s">&quot;\ta[ptr] = (byte)r.read();&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;[&#39;</span><span class="o">,</span> <span class="s">&quot;\twhile (a[ptr] != 0) {&quot;</span><span class="o">);</span>
        <span class="n">bfCode</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;]&#39;</span><span class="o">,</span> <span class="s">&quot;\t}&quot;</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">PrintWriter</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span><span class="s">&quot;BF.java&quot;</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">HEADER</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">code</span> <span class="o">=</span> <span class="n">bfCode</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">code</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
                <span class="n">w</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">code</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">w</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">FOOTER</span><span class="o">);</span>
        <span class="n">w</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4026/addtag/" class="addtag" id="addtag_4026">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4026/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4026/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4026"
  >-</span><span
  class="button yellow"
  id="rating_z_4026"
  >0</span><span 
  class="button green"
  id="rating_p_4026"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4026/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4034">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4034/">#4034</a>(<script language="JavaScript">print_time(new Date("2007/11/14 17:56 GMT"));</script><noscript>2007/11/14 17:56 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'></pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>
<span class="cp">#include &lt;cctype&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="cp">#define REP(n) for (size_t i = 0; i &lt; n; ++i)</span>

<span class="kt">void</span> <span class="n">compile</span><span class="p">(</span><span class="n">istream</span><span class="o">&amp;</span> <span class="n">in</span><span class="p">,</span> <span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">size_t</span> <span class="n">indent</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="cp">#define OUTPUT(s) REP(indent) out &lt;&lt; &quot;\t&quot;; out &lt;&lt; s &lt;&lt; endl;</span>

    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;#include &lt;stdio.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;#include &lt;mem.h&gt;&quot;</span><span class="p">);</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;int main()&quot;</span><span class="p">);</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;{&quot;</span><span class="p">);</span>
    <span class="o">++</span><span class="n">indent</span><span class="p">;</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;unsigned char buf[33000], *p = buf;&quot;</span><span class="p">);</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;memset(buf, 0, sizeof(buf));&quot;</span><span class="p">);</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">);</span>

    <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">in</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">isspace</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="c">// pass</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;--p;&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;++p;&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;++*p;&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;--*p;&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;putchar(*p);&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;,&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;*p = getchar();&quot;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;[&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;while (*p)&quot;</span><span class="p">);</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;{&quot;</span><span class="p">);</span>
            <span class="o">++</span><span class="n">indent</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;]&#39;</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="o">--</span><span class="n">indent</span><span class="p">;</span>
            <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="o">--</span><span class="n">indent</span><span class="p">;</span>
    <span class="n">OUTPUT</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>

<span class="cp">#undef OUTPUT</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;usage: name&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>

        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">compile</span><span class="p">(</span><span class="n">ifstream</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">cout</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4034/addtag/" class="addtag" id="addtag_4034">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4034/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4034/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4034"
  >-</span><span
  class="button yellow"
  id="rating_z_4034"
  >0</span><span 
  class="button green"
  id="rating_p_4034"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4034/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4057">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/218/" target="_top">susu</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/">#4057</a>(<script language="JavaScript">print_time(new Date("2007/11/15 09:41 GMT"));</script><noscript>2007/11/15 09:41 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>スタックオーバーフローすると反対側に出ます。</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090527035856/http://tlas.i.kyushu-u.ac.jp/~bannai/ocaml-intro/traps.html#mutable_array">配列の中の一つの値を変更しようとすると全部変更されてしまう!?!</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="kr">let</span> <span class="n">parse</span> <span class="k">=</span> <span class="kr">function</span>
  <span class="k">|</span> <span class="sc">&#39;&gt;&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;stackincr p;&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;&lt;&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;stackdecr p;&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;+&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;incr code.(!p);&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;-&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;decr code.(!p);&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;.&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;print_char (char_of_int !(code.(!p)));&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;,&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;code.(!p) := read_char ();&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;[&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;while 0 &lt;&gt; !(code.(!p)) do&quot;</span>
  <span class="k">|</span> <span class="sc">&#39;]&#39;</span> <span class="k">-&gt;</span> <span class="s2">&quot;done;;&quot;</span>
  <span class="k">|</span>  <span class="k">_</span>  <span class="k">-&gt;</span> <span class="s2">&quot;&quot;</span>  <span class="k">;;</span>

<span class="kr">let</span> <span class="n">main</span> <span class="k">?(</span><span class="n">stacksize</span><span class="k">=</span><span class="mi">256</span><span class="k">)</span> <span class="n">filename</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">file</span> <span class="k">=</span> <span class="n">open_in</span> <span class="n">filename</span> <span class="kr">in</span>
  <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;\</span>
<span class="s2">    let stackincr x = if %d &lt; (incr x; !x) then x:=0;;</span><span class="se">\n</span><span class="s2">\</span>
<span class="s2">    let stackdecr x = if 0 &gt; (decr x; !x) then x:=%d;;</span><span class="se">\n</span><span class="s2">\</span>
<span class="s2">    let read_char () = int_of_char (read_line () ).[0];;</span><span class="se">\n</span><span class="s2">\</span>
<span class="s2">    let code = Array.init %d (fun i -&gt; ref 0);;</span><span class="se">\n</span><span class="s2">\</span>
<span class="s2">    let p = ref 0;;</span><span class="se">\n\n</span><span class="s2">&quot;</span>
    <span class="k">(</span><span class="n">stacksize</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">stacksize</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span> <span class="n">stacksize</span><span class="k">;</span>
      
  <span class="kr">let</span> <span class="kr">rec</span> <span class="n">read_loop</span> <span class="k">()</span> <span class="k">=</span>
    <span class="kr">try</span>
      <span class="kr">let</span> <span class="n">next</span> <span class="k">=</span> <span class="n">input_line</span> <span class="n">file</span> <span class="kr">in</span>
      <span class="n">String</span><span class="k">.</span><span class="n">iter</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="n">print_endline</span> <span class="k">(</span><span class="n">parse</span> <span class="n">x</span><span class="k">))</span> <span class="n">next</span><span class="k">;</span>
      <span class="n">read_loop</span> <span class="k">();</span>
    <span class="kr">with</span>
      <span class="n">End_of_file</span> <span class="k">-&gt;</span> <span class="n">close_in</span> <span class="n">file</span>   
  <span class="kr">in</span> <span class="n">read_loop</span> <span class="k">();;</span>
  

<span class="kr">if</span> <span class="o">!</span><span class="k">(</span><span class="n">Sys</span><span class="k">.</span><span class="n">interactive</span><span class="k">)=</span><span class="kr">false</span> <span class="kr">then</span>
  <span class="kr">match</span> <span class="k">(</span><span class="n">Array</span><span class="k">.</span><span class="n">length</span> <span class="n">Sys</span><span class="k">.</span><span class="n">argv</span><span class="k">)</span> <span class="kr">with</span>
  <span class="k">|</span> <span class="n">n</span> <span class="kr">when</span> <span class="n">n</span><span class="k">=</span><span class="mi">2</span> <span class="k">-&gt;</span> <span class="n">main</span> <span class="n">Sys</span><span class="k">.</span><span class="n">argv</span><span class="k">.(</span><span class="mi">1</span><span class="k">)</span>
  <span class="k">|</span> <span class="n">n</span> <span class="kr">when</span> <span class="mi">2</span><span class="k">&lt;</span><span class="n">n</span> <span class="k">-&gt;</span> <span class="n">main</span> <span class="k">~</span><span class="n">stacksize</span><span class="k">:(</span><span class="n">int_of_string</span> <span class="n">Sys</span><span class="k">.</span><span class="n">argv</span><span class="k">.(</span><span class="mi">2</span><span class="k">))</span> <span class="n">Sys</span><span class="k">.</span><span class="n">argv</span><span class="k">.(</span><span class="mi">1</span><span class="k">)</span>
  <span class="k">|</span> <span class="n">n</span>          <span class="k">-&gt;</span> <span class="n">print_endline</span> <span class="s2">&quot;usage: ocaml bf2ml.ml [stacksize] filename&quot;</span>
<span class="k">;;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/addtag/" class="addtag" id="addtag_4057">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4057"
  >-</span><span
  class="button yellow"
  id="rating_z_4057"
  >0</span><span 
  class="button green"
  id="rating_p_4057"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/">
    2
    replies
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4057/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4058">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/218/" target="_top">susu</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4058/">#4058</a>(<script language="JavaScript">print_time(new Date("2007/11/15 09:44 GMT"));</script><noscript>2007/11/15 09:44 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ああ、スタックじゃなくてー</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4058/addtag/" class="addtag" id="addtag_4058">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4058"
  >-</span><span
  class="button yellow"
  id="rating_z_4058"
  >0</span><span 
  class="button green"
  id="rating_p_4058"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4058/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4058/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4058/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4071">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4071/">#4071</a>(<script language="JavaScript">print_time(new Date("2007/11/15 14:17 GMT"));</script><noscript>2007/11/15 14:17 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>リングバッファ？</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4071/addtag/" class="addtag" id="addtag_4071">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4071"
  >-</span><span
  class="button yellow"
  id="rating_z_4071"
  >0</span><span 
  class="button green"
  id="rating_p_4071"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4058/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4071/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4071/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4071/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4640">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/218/" target="_top">susu</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4640/">#4640</a>(<script language="JavaScript">print_time(new Date("2007/12/06 06:43 GMT"));</script><noscript>2007/12/06 06:43 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre>名前が付いてたんですかっっ。
でも上のは、スタックオーバーフローじゃなくて単に
Out of rangeなんだろうかとふらふら考えてた跡です。
すみません。
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4640/addtag/" class="addtag" id="addtag_4640">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4640/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4640/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4640"
  >-</span><span
  class="button yellow"
  id="rating_z_4640"
  >0</span><span 
  class="button green"
  id="rating_p_4640"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4071/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4640/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4640/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4076">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4076/">#4076</a>(<script language="JavaScript">print_time(new Date("2007/11/15 15:18 GMT"));</script><noscript>2007/11/15 15:18 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>',' の処理が変じゃありません？
echo を試してみましたが、各行頭の一文字しか出力されませんでした。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4076/addtag/" class="addtag" id="addtag_4076">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4076"
  >-</span><span
  class="button yellow"
  id="rating_z_4076"
  >0</span><span 
  class="button green"
  id="rating_p_4076"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4057/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4076/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4076/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4076/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4078">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/">#4078</a>(<script language="JavaScript">print_time(new Date("2007/11/15 15:29 GMT"));</script><noscript>2007/11/15 15:29 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>書き換えてみました。echo はそれらしい動きをしています。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre><span class="gu">@@ -4,7 +4,7 @@</span>
   | &#39;+&#39; -&gt; &quot;incr code.(!p);&quot;
   | &#39;-&#39; -&gt; &quot;decr code.(!p);&quot;
   | &#39;.&#39; -&gt; &quot;print_char (char_of_int !(code.(!p)));&quot;
<span class="gd">-  | &#39;,&#39; -&gt; &quot;code.(!p) := read_char ();&quot;</span>
<span class="gi">+  | &#39;,&#39; -&gt; &quot;code.(!p) := input_byte stdin;&quot;</span>
   | &#39;[&#39; -&gt; &quot;while 0 &lt;&gt; !(code.(!p)) do&quot;
   | &#39;]&#39; -&gt; &quot;done;;&quot;
   |  _  -&gt; &quot;&quot;  ;;
<span class="gu">@@ -14,7 +14,6 @@</span>
   Printf.printf &quot;\
     let stackincr x = if %d &lt; (incr x; !x) then x:=0;;\n\
     let stackdecr x = if 0 &gt; (decr x; !x) then x:=%d;;\n\
<span class="gd">-    let read_char () = int_of_char (read_line () ).[0];;\n\</span>
     let code = Array.init %d (fun i -&gt; ref 0);;\n\
     let p = ref 0;;\n\n&quot;
     (stacksize-1) (stacksize-1) stacksize;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/addtag/" class="addtag" id="addtag_4078">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4078"
  >-</span><span
  class="button yellow"
  id="rating_z_4078"
  >0</span><span 
  class="button green"
  id="rating_p_4078"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4076/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4078/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4641">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/218/" target="_top">susu</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4641/">#4641</a>(<script language="JavaScript">print_time(new Date("2007/12/06 06:49 GMT"));</script><noscript>2007/12/06 06:49 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ありがとうございます。ぴったしな関数があったんですね。<br/>Pervasivesなんて聞き慣れないモジュール名だったので<br/>リファレンスも見逃してました。基本だったのに……
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4641/addtag/" class="addtag" id="addtag_4641">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4641"
  >-</span><span
  class="button yellow"
  id="rating_z_4641"
  >0</span><span 
  class="button green"
  id="rating_p_4641"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4078/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4641/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4641/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


  

  

  

  

  

  
    





<div class="comment" id="comment4081">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/232/" target="_top">kkobayashi</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4081/">#4081</a>(<script language="JavaScript">print_time(new Date("2007/11/15 17:28 GMT"));</script><noscript>2007/11/15 17:28 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Wikipediaの説明をそのままコードにしただけですが・・・
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre>bf &lt;- function(str){
    cat(&quot;ptr &lt;- 1&quot;, &quot;\n&quot;)
    cat(&quot;buf &lt;- numeric(1)&quot;, &quot;\n&quot;)
    for(c in unlist(strsplit(str, &#39;&#39;))){
        switch(c,
            &#39;&gt;&#39; = cat(&quot;ptr &lt;- ptr+1; if(is.na(buf[ptr])) buf[ptr] &lt;- 0&quot;, &quot;\n&quot;),
            &#39;&lt;&#39; = cat(&quot;ptr &lt;- ptr-1; if(is.na(buf[ptr])) buf[ptr] &lt;- 0&quot;, &quot;\n&quot;),
            &#39;+&#39; = cat(&quot;buf[ptr] &lt;- buf[ptr]+1&quot;, &quot;\n&quot;),
            &#39;-&#39; = cat(&quot;buf[ptr] &lt;- buf[ptr]-1&quot;, &quot;\n&quot;),
            &#39;.&#39; = cat(&quot;cat(rawToChar(as.raw(buf[ptr])))&quot;, &quot;\n&quot;),
            &#39;,&#39; = cat(&quot;buf[ptr] &lt;- as.integer(charToRaw(readLines(n=1)))&quot;, &quot;\n&quot;),
            &#39;[&#39; = cat(&quot;while(buf[ptr]){&quot;, &quot;\n&quot;),
            &#39;]&#39; = cat(&quot;}&quot;, &quot;\n&quot;))
    }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4081/addtag/" class="addtag" id="addtag_4081">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4081/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4081/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4081"
  >-</span><span
  class="button yellow"
  id="rating_z_4081"
  >0</span><span 
  class="button green"
  id="rating_p_4081"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4081/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4084">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/154/" target="_top">xsd</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4084/">#4084</a>(<script language="JavaScript">print_time(new Date("2007/11/15 17:29 GMT"));</script><noscript>2007/11/15 17:29 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>トランスレーターといえばcamlp4ということで、camlp4の3.10版で書いてみました。

LexerはBF用に書いていますが、TokenはOCaml用のものを流用しています。

Parserのコンパイル:
 ocamlc -c -I +camlp4 -pp camlp4orf dk80.ml

Parserを利用したBFファイルのトランスレート結果の確認:
 camlp4orf dk80.cmo -impl helloworld.bf 

Parserを利用したBFファイルのコンパイル:
 ocamlc -o dk80 -pp "camlp4 -printer Camlp4OCamlPrinter dk80.cmo -impl" -impl helloworld.bf

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre><span class="kr">open</span> <span class="n">Camlp4</span><span class="k">.</span><span class="n">PreCast</span>

<span class="kr">module</span> <span class="n">MyLexer</span> <span class="k">=</span> <span class="kr">struct</span>
  <span class="kr">module</span> <span class="n">Loc</span> <span class="k">=</span> <span class="n">Loc</span>
  <span class="kr">module</span> <span class="n">Token</span> <span class="k">=</span> <span class="n">Token</span>
  <span class="kr">module</span> <span class="n">Error</span> <span class="k">=</span> <span class="n">Token</span><span class="k">.</span><span class="n">Error</span>

  <span class="kr">let</span> <span class="n">mk</span> <span class="k">()</span> <span class="n">loc</span> <span class="n">sc</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">next</span> <span class="n">n</span> <span class="k">=</span> <span class="kr">match</span> <span class="n">Stream</span><span class="k">.</span><span class="n">peek</span> <span class="n">sc</span> <span class="kr">with</span>
      <span class="k">|</span> <span class="n">None</span>   <span class="k">-&gt;</span> <span class="n">Some</span><span class="k">(</span><span class="n">EOI</span><span class="k">,</span> <span class="n">loc</span><span class="k">)</span>
      <span class="k">|</span> <span class="n">Some</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">Stream</span><span class="k">.</span><span class="n">junk</span> <span class="n">sc</span> <span class="kr">in</span> <span class="k">(</span><span class="kr">match</span> <span class="n">x</span> <span class="kr">with</span>
        <span class="k">|</span><span class="sc">&#39;&gt;&#39;</span><span class="k">|</span><span class="sc">&#39;&lt;&#39;</span><span class="k">|</span><span class="sc">&#39;+&#39;</span><span class="k">|</span><span class="sc">&#39;-&#39;</span><span class="k">|</span><span class="sc">&#39;.&#39;</span><span class="k">|</span><span class="sc">&#39;,&#39;</span><span class="k">|</span><span class="sc">&#39;[&#39;</span><span class="k">|</span><span class="sc">&#39;]&#39;</span><span class="k">-&gt;</span> <span class="n">Some</span><span class="k">((</span><span class="n">SYMBOL</span> <span class="k">(</span><span class="n">Printf</span><span class="k">.</span><span class="n">sprintf</span> <span class="s2">&quot;%c&quot;</span> <span class="n">x</span><span class="k">)),</span> <span class="n">loc</span><span class="k">)</span>
        <span class="k">|</span> <span class="k">_</span>                             <span class="k">-&gt;</span> <span class="n">next</span> <span class="n">n</span><span class="k">)</span>
    <span class="kr">in</span> <span class="n">Stream</span><span class="k">.</span><span class="n">from</span> <span class="n">next</span>
<span class="kr">end</span>

<span class="kr">module</span> <span class="n">BF</span> <span class="k">=</span> <span class="n">MakeGram</span> <span class="n">MyLexer</span>

<span class="kr">let</span> <span class="n">expr</span> <span class="k">=</span> <span class="n">BF</span><span class="k">.</span><span class="n">Entry</span><span class="k">.</span><span class="n">mk</span> <span class="s2">&quot;expr&quot;</span>
<span class="kr">let</span> <span class="n">repr</span> <span class="k">=</span> <span class="n">BF</span><span class="k">.</span><span class="n">Entry</span><span class="k">.</span><span class="n">mk</span> <span class="s2">&quot;repr&quot;</span>
<span class="kr">let</span> <span class="n">term</span> <span class="k">=</span> <span class="n">BF</span><span class="k">.</span><span class="n">Entry</span><span class="k">.</span><span class="n">mk</span> <span class="s2">&quot;term&quot;</span>

<span class="n">EXTEND</span> <span class="n">BF</span>
  <span class="n">expr</span><span class="k">:</span> <span class="k">[[</span>
      <span class="n">t</span> <span class="k">=</span> <span class="n">repr</span><span class="k">;</span> <span class="k">`</span><span class="n">EOI</span>     <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">str_item</span><span class="k">&lt;</span>
        <span class="kr">let</span> <span class="n">p</span> <span class="k">=</span> <span class="n">ref</span> <span class="mi">0</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">a</span> <span class="k">=</span> <span class="n">Array</span><span class="k">.</span><span class="n">create</span> <span class="mi">1024</span> <span class="mi">0</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">inc</span> <span class="n">a</span> <span class="n">p</span> <span class="k">=</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">)</span> <span class="k">:=</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">)</span> <span class="k">+</span> <span class="mi">1</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">dec</span> <span class="n">a</span> <span class="n">p</span> <span class="k">=</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">)</span> <span class="k">:=</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">)</span> <span class="k">-</span> <span class="mi">1</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">prt</span> <span class="n">a</span> <span class="n">p</span> <span class="k">=</span> <span class="n">print_char</span> <span class="k">(</span><span class="n">char_of_int</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">))</span> <span class="kr">in</span>
        <span class="k">(</span> <span class="o">$</span><span class="n">t</span><span class="o">$</span> <span class="k">)</span>
      <span class="k">&gt;&gt;</span>
  <span class="k">]];</span>

  <span class="n">repr</span><span class="k">:</span> <span class="k">[[</span>
      <span class="n">t</span> <span class="k">=</span> <span class="n">term</span>           <span class="k">-&gt;</span> <span class="n">t</span>
    <span class="k">|</span> <span class="n">t</span> <span class="k">=</span> <span class="n">term</span><span class="k">;</span> <span class="n">u</span> <span class="k">=</span> <span class="n">repr</span> <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="o">$</span><span class="n">t</span><span class="o">$</span><span class="k">;</span> <span class="o">$</span><span class="n">u</span><span class="o">$</span> <span class="k">&gt;&gt;</span>
  <span class="k">]];</span>

  <span class="n">term</span><span class="k">:</span> <span class="k">[[</span>
      <span class="s2">&quot;&gt;&quot;</span>                <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">incr</span>  <span class="n">p</span> <span class="k">&gt;&gt;</span>
    <span class="k">|</span> <span class="s2">&quot;&lt;&quot;</span>                <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">decr</span>  <span class="n">p</span> <span class="k">&gt;&gt;</span>
    <span class="k">|</span> <span class="s2">&quot;+&quot;</span>                <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">inc</span> <span class="n">a</span> <span class="n">p</span> <span class="k">&gt;&gt;</span>
    <span class="k">|</span> <span class="s2">&quot;-&quot;</span>                <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">dec</span> <span class="n">a</span> <span class="n">p</span> <span class="k">&gt;&gt;</span>
    <span class="k">|</span> <span class="s2">&quot;.&quot;</span>                <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">prt</span> <span class="n">a</span> <span class="n">p</span> <span class="k">&gt;&gt;</span>
    <span class="k">|</span> <span class="s2">&quot;,&quot;</span>                <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">)</span> <span class="k">:=</span> <span class="n">input_byte</span> <span class="n">stdin</span> <span class="k">&gt;&gt;</span>
    <span class="k">|</span> <span class="s2">&quot;[&quot;</span><span class="k">;</span> <span class="n">t</span> <span class="k">=</span> <span class="n">repr</span><span class="k">;</span> <span class="s2">&quot;]&quot;</span> <span class="k">-&gt;</span> <span class="k">&lt;:</span><span class="n">expr</span><span class="k">&lt;</span> <span class="kr">while</span> <span class="n">a</span><span class="k">.(</span><span class="o">!</span><span class="n">p</span><span class="k">)</span> <span class="k">&lt;&gt;</span> <span class="mi">0</span> <span class="kr">do</span> <span class="k">(</span> <span class="o">$</span><span class="n">t</span><span class="o">$</span> <span class="k">)</span> <span class="kr">done</span> <span class="k">&gt;&gt;</span>
  <span class="k">]];</span>
<span class="n">END</span>

<span class="kr">let</span> <span class="n">myparse</span>  <span class="k">?(</span><span class="n">directive_handler</span> <span class="k">=</span> <span class="kr">fun</span> <span class="k">_</span> <span class="k">-&gt;</span> <span class="n">None</span><span class="k">)</span> <span class="k">_</span><span class="n">loc</span> <span class="n">cs</span> <span class="k">=</span> <span class="n">BF</span><span class="k">.</span><span class="n">parse</span> <span class="n">expr</span> <span class="k">_</span><span class="n">loc</span> <span class="n">cs</span>
<span class="kr">let</span> <span class="n">myparse2</span> <span class="k">?(</span><span class="n">directive_handler</span> <span class="k">=</span> <span class="kr">fun</span> <span class="k">_</span> <span class="k">-&gt;</span> <span class="n">None</span><span class="k">)</span> <span class="k">_</span><span class="n">loc</span> <span class="k">_</span>  <span class="k">=</span> <span class="k">&lt;:</span><span class="n">sig_item</span><span class="k">&lt;</span> <span class="k">&gt;&gt;</span>

<span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">Camlp4</span><span class="k">.</span><span class="n">Register</span><span class="k">.</span><span class="n">register_parser</span> <span class="n">myparse</span> <span class="n">myparse2</span><span class="k">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4084/addtag/" class="addtag" id="addtag_4084">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/camlp4_3.10/">camlp4_3.10</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4084/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4084/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4084"
  >-</span><span
  class="button yellow"
  id="rating_z_4084"
  >0</span><span 
  class="button green"
  id="rating_p_4084"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4084/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4085">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4085/">#4085</a>(<script language="JavaScript">print_time(new Date("2007/11/15 17:41 GMT"));</script><noscript>2007/11/15 17:41 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Wikipedia と dankogai さんの実装を見つつ、C# で書いてみました。誰か添削してくださいｗ
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090527035856/http://d.hatena.ne.jp/noliaqui/20071116">がぶるでぃぐく - Brainfuck書いた</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Kinoko</span>
<span class="k">{</span>
    <span class="c">/*</span>
<span class="c">        BrainF*ck</span>
<span class="c">    */</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">LinkedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">Tape</span> <span class="p">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>
            <span class="n">Tape</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
            <span class="n">LinkedListNode</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">Head</span> <span class="p">=</span> <span class="n">Tape</span><span class="p">.</span><span class="n">First</span><span class="p">;</span>

            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">=</span><span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
            <span class="k">{</span>
                <span class="n">String</span> <span class="n">op</span> <span class="p">=</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="m">1</span><span class="p">);</span>
                <span class="k">switch</span><span class="p">(</span><span class="n">op</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">case</span> <span class="s">&quot;+&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="n">Head</span><span class="p">.</span><span class="n">Value</span><span class="p">++;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;-&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="n">Head</span><span class="p">.</span><span class="n">Value</span><span class="p">--;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;&lt;&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="n">Head</span> <span class="p">==</span> <span class="n">Tape</span><span class="p">.</span><span class="n">First</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="n">Tape</span><span class="p">.</span><span class="n">AddFirst</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
                        <span class="k">}</span>
                        <span class="n">Head</span><span class="p">=</span><span class="n">Head</span><span class="p">.</span><span class="n">Previous</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;&gt;&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="n">Head</span> <span class="p">==</span> <span class="n">Tape</span><span class="p">.</span><span class="n">Last</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="n">Tape</span><span class="p">.</span><span class="n">AddLast</span><span class="p">(</span><span class="m">0</span><span class="p">);</span>
                        <span class="k">}</span>
                        <span class="n">Head</span><span class="p">=</span><span class="n">Head</span><span class="p">.</span><span class="n">Next</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;[&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="n">Head</span><span class="p">.</span><span class="n">Value</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="kt">int</span> <span class="n">nest</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                            <span class="kt">int</span> <span class="n">step</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                            <span class="k">while</span><span class="p">(</span><span class="n">nest</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                            <span class="k">{</span>
                                <span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">+</span><span class="n">step</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;[&quot;</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="n">nest</span><span class="p">++;</span>
                                <span class="k">}</span>
                                <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">+</span><span class="n">step</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;]&quot;</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="n">nest</span><span class="p">--;</span>
                                <span class="k">}</span>
                                <span class="n">step</span><span class="p">++;</span>
                                <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="p">+</span><span class="n">step</span> <span class="p">&gt;</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Length</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="k">break</span><span class="p">;</span>
                                <span class="k">}</span>
                            <span class="k">}</span>
                            <span class="n">i</span> <span class="p">+=</span> <span class="n">step</span><span class="p">;</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;]&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="n">Head</span><span class="p">.</span><span class="n">Value</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="kt">int</span> <span class="n">nest</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                            <span class="kt">int</span> <span class="n">step</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
                            <span class="k">while</span><span class="p">(</span><span class="n">nest</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
                            <span class="k">{</span>
                                <span class="k">if</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">-</span><span class="n">step</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;]&quot;</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="n">nest</span><span class="p">++;</span>
                                <span class="k">}</span>
                                <span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">-</span><span class="n">step</span><span class="p">,</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="s">&quot;[&quot;</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="n">nest</span><span class="p">--;</span>
                                <span class="k">}</span>
                                <span class="n">step</span><span class="p">++;</span>
                                <span class="k">if</span><span class="p">(</span><span class="n">i</span><span class="p">-</span><span class="n">step</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="k">break</span><span class="p">;</span>
                                <span class="k">}</span>
                            <span class="k">}</span>
                            <span class="n">i</span> <span class="p">-=</span> <span class="n">step</span><span class="p">;</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;.&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;{0}&quot;</span><span class="p">,</span> <span class="p">((</span><span class="n">Char</span><span class="p">)</span><span class="n">Head</span><span class="p">.</span><span class="n">Value</span><span class="p">));</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">case</span> <span class="s">&quot;,&quot;</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="kt">int</span> <span class="n">input</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
                        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;input:&quot;</span><span class="p">);</span>
                        <span class="n">input</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">Read</span><span class="p">();</span>
                        <span class="n">Head</span><span class="p">.</span><span class="n">Value</span> <span class="p">=</span> <span class="n">input</span><span class="p">;</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                    <span class="k">default</span><span class="p">:</span>
                    <span class="k">{</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">}</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4085/addtag/" class="addtag" id="addtag_4085">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/Brainfuck/">Brainfuck</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4085/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4085/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4085"
  >-</span><span
  class="button yellow"
  id="rating_z_4085"
  >0</span><span 
  class="button green"
  id="rating_p_4085"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4085/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4093">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/498/" target="_top">uho</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4093/">#4093</a>(<script language="JavaScript">print_time(new Date("2007/11/16 02:33 GMT"));</script><noscript>2007/11/16 02:33 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>unsafeを使って、
C#でポインタを使ってみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">BrainFuck</span>
<span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">StreamWriter</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamWriter</span><span class="p">(</span><span class="s">&quot;C:\\txt.txt&quot;</span><span class="p">);</span>

            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;using System;&quot;</span><span class="p">);</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;namespace BrainFuck{&quot;</span><span class="p">);</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;class Program{&quot;</span><span class="p">);</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;unsafe static void Main(string[] args){&quot;</span><span class="p">);</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;fixed (byte* b = new byte[1024]){&quot;</span><span class="p">);</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;byte* ptr = b;&quot;</span><span class="p">);</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">char</span> <span class="n">s</span> <span class="k">in</span> <span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">])</span>
            <span class="k">{</span>
                <span class="k">switch</span> <span class="p">(</span><span class="n">s</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;ptr++;&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;ptr--;&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;(*ptr)++;&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;(*ptr)--;&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Console.Write((char)*ptr);&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;*ptr = Console.Read();&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;while(*ptr != 0){&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="p">:</span>
                        <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>
                        <span class="k">break</span><span class="p">;</span>
                <span class="k">}</span>
            <span class="k">}</span>

            <span class="n">sw</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;}}}}&quot;</span><span class="p">);</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">Close</span><span class="p">();</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4093/addtag/" class="addtag" id="addtag_4093">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4093/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4093/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4093"
  >-</span><span
  class="button yellow"
  id="rating_z_4093"
  >0</span><span 
  class="button green"
  id="rating_p_4093"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4093/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4095">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4095/">#4095</a>(<script language="JavaScript">print_time(new Date("2007/11/16 04:28 GMT"));</script><noscript>2007/11/16 04:28 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>strictもwarningsも通るけど一文。
</p>
<p>Dan the Brainf.cker
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="sr">s/(.)/do{no warnings &#39;syntax&#39;;my %c=qw!</span>
<span class="sr">&lt; $p--;</span>
<span class="sr">&gt; $p++;</span>
<span class="sr">+ $d[$p]++;</span>
<span class="sr">- $d[$p]--;</span>
<span class="sr">. print(chr$d[$p]);</span>
<span class="sr">, $d[$p]=getc;</span>
<span class="sr">[ while($d[$p]){</span>
<span class="sr">] }</span>
<span class="sr">!;\%c}-&gt;{$1}/egx</span> <span class="ow">and</span> <span class="k">print</span> <span class="k">for</span><span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4095/addtag/" class="addtag" id="addtag_4095">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/BF/">BF</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4095/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4095/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4095"
  >-</span><span
  class="button yellow"
  id="rating_z_4095"
  >0</span><span 
  class="button green"
  id="rating_p_4095"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4095/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4103">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/560/" target="_top">ihag</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4103/">#4103</a>(<script language="JavaScript">print_time(new Date("2007/11/16 10:02 GMT"));</script><noscript>2007/11/16 10:02 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ポインタとメモリ領域を，文字列stackの中に置き，regexpなどでstackを操作しつつ動作するようなコードを吐きます．<br/>例)<br/>%&nbsp;cat&nbsp;hello.bf<br/>++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]<br/>&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.<br/>&gt;.+++.------.--------.&gt;+.&gt;.<br/><br/>%&nbsp;make<br/>ruby&nbsp;bfcompile.rb&nbsp;&lt;&nbsp;hello.bf&nbsp;&gt;&nbsp;hello.rb<br/>ruby&nbsp;hello.rb<br/>Hello&nbsp;World!<br/><br/>%&nbsp;cat&nbsp;hello.rb<br/>class&nbsp;String<br/>&nbsp;&nbsp;def&nbsp;until_nz<br/>&nbsp;&nbsp;&nbsp;&nbsp;while&nbsp;self[self[0]&nbsp;+&nbsp;1]&nbsp;!=&nbsp;0<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;replace(yield(self))<br/>&nbsp;&nbsp;&nbsp;&nbsp;end<br/>&nbsp;&nbsp;&nbsp;&nbsp;self<br/>&nbsp;&nbsp;end<br/><br/>&nbsp;&nbsp;def&nbsp;refer<br/>&nbsp;&nbsp;&nbsp;&nbsp;self.sub(/\A(.)(.*)\Z/m)&nbsp;do<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$1&nbsp;+&nbsp;$2.sub(/^(.{#{$1[0]}})(.)/m)&nbsp;do<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$1&nbsp;+&nbsp;yield($2)<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;end<br/>&nbsp;&nbsp;&nbsp;&nbsp;end<br/>&nbsp;&nbsp;end<br/>end<br/><br/>stack&nbsp;=&nbsp;"\000"&nbsp;+&nbsp;"\000"&nbsp;*&nbsp;256<br/>stack.refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>until_nz&nbsp;{|stack|<br/>stack.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>to_s<br/>}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;-&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;(mem[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>sub(/./m)&nbsp;{|p|&nbsp;(p[0]&nbsp;+&nbsp;1).chr&nbsp;}.<br/>refer&nbsp;{|mem|&nbsp;putc(mem)&nbsp;}.<br/>to_s
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="highlight"><pre><span class="nb">puts</span> <span class="o">&lt;&lt;</span><span class="sh">&#39;</span><span class="no">EOS</span><span class="sh">&#39;</span>
<span class="sh">class String</span>
<span class="sh">  def until_nz</span>
<span class="sh">    while self[self[0] + 1] != 0</span>
<span class="sh">      replace(yield(self))</span>
<span class="sh">    end</span>
<span class="sh">    self</span>
<span class="sh">  end</span>

<span class="sh">  def refer</span>
<span class="sh">    self.sub(/\A(.)(.*)\Z/m) do</span>
<span class="sh">      $1 + $2.sub(/^(.{#{$1[0]}})(.)/m) do</span>
<span class="sh">        $1 + yield($2)</span>
<span class="sh">      end</span>
<span class="sh">    end</span>
<span class="sh">  end</span>
<span class="sh">end</span>

<span class="sh">stack = &quot;\000&quot; + &quot;\000&quot; * 256</span>
<span class="no">EOS</span>

<span class="nb">print</span> <span class="s1">&#39;stack.&#39;</span>

<span class="n">code</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s1">&#39;&gt;&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;sub(/./m) {|p| (p[0] + 1).chr }.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;&lt;&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;sub(/./m) {|p| (p[0] - 1).chr }.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;+&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;refer {|mem| (mem[0] + 1).chr }.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;-&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;refer {|mem| (mem[0] - 1).chr }.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;.&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;refer {|mem| putc(mem) }.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;,&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;refer { STDIN.getc }.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;[&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;until_nz {|stack|&#39;</span><span class="p">,</span> <span class="s1">&#39;stack.&#39;</span> <span class="o">]</span><span class="p">,</span>
  <span class="s1">&#39;]&#39;</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;to_s&#39;</span><span class="p">,</span> <span class="s1">&#39;}.&#39;</span> <span class="o">]</span><span class="p">,</span>
<span class="p">}</span>
<span class="k">while</span> <span class="n">ch</span> <span class="o">=</span> <span class="no">STDIN</span><span class="o">.</span><span class="n">getc</span>
  <span class="k">next</span> <span class="k">if</span> <span class="n">code</span><span class="o">[</span><span class="n">ch</span><span class="o">.</span><span class="n">chr</span><span class="o">].</span><span class="n">nil?</span>
  <span class="nb">puts</span> <span class="n">code</span><span class="o">[</span><span class="n">ch</span><span class="o">.</span><span class="n">chr</span><span class="o">]</span>
<span class="k">end</span>
<span class="nb">puts</span> <span class="s1">&#39;to_s&#39;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4103/addtag/" class="addtag" id="addtag_4103">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4103/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4103/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4103"
  >-</span><span
  class="button yellow"
  id="rating_z_4103"
  >0</span><span 
  class="button green"
  id="rating_p_4103"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4103/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4104">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/134/" target="_top">こう。</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4104/">#4104</a>(<script language="JavaScript">print_time(new Date("2007/11/16 10:13 GMT"));</script><noscript>2007/11/16 10:13 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>少しだけ最適化を行います。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">void</span> <span class="n">putnest</span><span class="p">(</span><span class="n">FILE</span><span class="o">*</span> <span class="n">fout</span><span class="p">,</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
    <span class="k">while</span><span class="p">(</span><span class="n">n</span><span class="o">--</span><span class="p">){</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="p">};</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
    <span class="kt">char</span> <span class="n">filename</span><span class="p">[]</span><span class="o">=</span><span class="s">&quot;test.bf&quot;</span><span class="p">;</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fin</span><span class="p">;</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fout</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cmd</span><span class="o">=</span><span class="sc">&#39; &#39;</span><span class="p">,</span><span class="n">lastcmd</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">nest</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">fin</span> <span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">);</span>
    <span class="n">fout</span><span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="s">&quot;bf.c&quot;</span><span class="p">,</span><span class="s">&quot;w&quot;</span><span class="p">);</span>
    
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;#include&lt;stdio.h&gt;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;int main(){</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">int  buf[256];</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">int *ptr;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">int i;&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">for(i=0;i&lt;256;i++) buf[i]=0;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\t</span><span class="s">ptr=buf;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    
    <span class="k">do</span><span class="p">{</span>
        <span class="n">lastcmd</span><span class="o">=</span><span class="n">cmd</span><span class="p">;</span>
        <span class="n">cmd</span><span class="o">=</span><span class="n">fgetc</span><span class="p">(</span><span class="n">fin</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="n">lastcmd</span><span class="o">!=</span><span class="n">cmd</span><span class="p">){</span>
            <span class="k">switch</span><span class="p">(</span><span class="n">lastcmd</span><span class="p">){</span>
            <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
                <span class="n">putnest</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="n">nest</span><span class="p">);</span>
                <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;%s%c&quot;</span><span class="p">,</span><span class="n">lastcmd</span><span class="o">&amp;</span><span class="mh">0x10</span><span class="o">?</span><span class="s">&quot;ptr&quot;</span><span class="o">:</span><span class="s">&quot;(*ptr)&quot;</span><span class="p">,</span><span class="n">lastcmd</span><span class="o">&amp;</span><span class="mh">0x02</span><span class="o">?</span><span class="sc">&#39;+&#39;</span><span class="o">:</span><span class="sc">&#39;-&#39;</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="n">count</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span>
                    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;%c;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">lastcmd</span><span class="o">&amp;</span><span class="mh">0x02</span><span class="o">?</span><span class="sc">&#39;+&#39;</span><span class="o">:</span><span class="sc">&#39;-&#39;</span><span class="p">);</span>
                <span class="k">else</span>
                    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;=%d;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">count</span><span class="p">);</span>
                <span class="n">count</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">switch</span><span class="p">(</span><span class="n">cmd</span><span class="p">){</span>
            <span class="k">case</span> <span class="sc">&#39;+&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="sc">&#39;-&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="sc">&#39;&gt;&#39;</span><span class="o">:</span>
            <span class="k">case</span> <span class="sc">&#39;&lt;&#39;</span><span class="o">:</span>
                <span class="n">count</span><span class="o">++</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;[&#39;</span><span class="o">:</span>
                <span class="n">putnest</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="n">nest</span><span class="p">);</span>
                <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;while(*ptr){</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
                <span class="n">nest</span><span class="o">++</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;]&#39;</span><span class="o">:</span>
                <span class="n">nest</span><span class="o">--</span><span class="p">;</span>
                <span class="n">putnest</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="n">nest</span><span class="p">);</span>
                <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;}</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;.&#39;</span><span class="o">:</span>
                <span class="n">putnest</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="n">nest</span><span class="p">);</span>
                <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;putchar(*ptr);</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="sc">&#39;,&#39;</span><span class="o">:</span>
                <span class="n">putnest</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="n">nest</span><span class="p">);</span>
                <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;*ptr=getchar();</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
                <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">cmd</span><span class="o">!=</span><span class="n">EOF</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;    return 0;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;}</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">fprintf</span><span class="p">(</span><span class="n">fout</span><span class="p">,</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4104/addtag/" class="addtag" id="addtag_4104">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4104/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4104/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4104"
  >-</span><span
  class="button yellow"
  id="rating_z_4104"
  >0</span><span 
  class="button green"
  id="rating_p_4104"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4104/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4110">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/189/" target="_top">takatoh</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4110/">#4110</a>(<script language="JavaScript">print_time(new Date("2007/11/16 12:37 GMT"));</script><noscript>2007/11/16 12:37 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>メモリとポインタを用意しておいて，あとは命令を1つずつRubyに置き換えるだけ。他の人と々アプローチだけど，いくらかわかりやすく書いたつもり。</p>
<p>書いてて気がついたけど，BFのループって終了判定が2カ所（前後）にあるんだな。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50</pre></td><td class="code"><div class="highlight"><pre><span class="nb">print</span> <span class="o">&lt;&lt;</span><span class="sh">&quot;</span><span class="no">EOBF</span><span class="sh">&quot;</span>
<span class="sh">class BF</span>
<span class="sh">  def initialize</span>
<span class="sh">    @memory = [0]</span>
<span class="sh">    @pointer = 0</span>
<span class="sh">  end</span>
<span class="sh">  def current</span>
<span class="sh">    @memory[@pointer]</span>
<span class="sh">  end</span>
<span class="sh">  def incr</span>
<span class="sh">    @memory[@pointer] += 1</span>
<span class="sh">  end</span>
<span class="sh">  def decr</span>
<span class="sh">    @memory[@pointer] -= 1</span>
<span class="sh">  end</span>
<span class="sh">  def right</span>
<span class="sh">    @pointer += 1</span>
<span class="sh">    unless @memory[@pointer]</span>
<span class="sh">      @memory &lt;&lt; 0</span>
<span class="sh">    end</span>
<span class="sh">  end</span>
<span class="sh">  def left</span>
<span class="sh">    @pointer -= 1</span>
<span class="sh">  end</span>
<span class="sh">  def set(c)</span>
<span class="sh">    @memory[@pointer] = c</span>
<span class="sh">  end</span>
<span class="sh">  def printc</span>
<span class="sh">    print @memory[@pointer].chr</span>
<span class="sh">  end</span>
<span class="sh">end</span>

<span class="sh">bf = BF.new</span>

<span class="no">EOBF</span>

<span class="n">commands</span> <span class="o">=</span> <span class="p">{</span>
  <span class="s2">&quot;&gt;&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bf.right&quot;</span><span class="p">,</span>
  <span class="s2">&quot;&lt;&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bf.left&quot;</span><span class="p">,</span>
  <span class="s2">&quot;+&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bf.incr&quot;</span><span class="p">,</span>
  <span class="s2">&quot;-&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bf.decr&quot;</span><span class="p">,</span>
  <span class="s2">&quot;.&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;bf.printc&quot;</span><span class="p">,</span>
  <span class="s2">&quot;,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;c = STDIN.getc; bf.set(c)&quot;</span><span class="p">,</span>
  <span class="s2">&quot;[&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;begin; break if bf.current.zero?&quot;</span><span class="p">,</span>
  <span class="s2">&quot;]&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;end until bf.current.zero?&quot;</span>
<span class="p">}</span>
<span class="no">ARGF</span><span class="o">.</span><span class="n">each_byte</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
  <span class="n">cmd</span> <span class="o">=</span> <span class="n">commands</span><span class="o">[</span><span class="n">c</span><span class="o">.</span><span class="n">chr</span><span class="o">]</span>
  <span class="nb">puts</span> <span class="n">cmd</span> <span class="k">if</span> <span class="n">cmd</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4110/addtag/" class="addtag" id="addtag_4110">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4110/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4110/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4110"
  >-</span><span
  class="button yellow"
  id="rating_z_4110"
  >0</span><span 
  class="button green"
  id="rating_p_4110"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4110/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4110/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4114">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4114/">#4114</a>(<script language="JavaScript">print_time(new Date("2007/11/16 14:49 GMT"));</script><noscript>2007/11/16 14:49 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>うーんと、]が条件判断を行わなわずに[に無条件ジャンプしても[が判断して]の後にジャンプするので同じということでしょう。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4114/addtag/" class="addtag" id="addtag_4114">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4114"
  >-</span><span
  class="button yellow"
  id="rating_z_4114"
  >0</span><span 
  class="button green"
  id="rating_p_4114"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4110/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4114/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4114/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  
    





<div class="comment" id="comment4154">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/389/" target="_top">konbu</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4154/">#4154</a>(<script language="JavaScript">print_time(new Date("2007/11/17 13:27 GMT"));</script><noscript>2007/11/17 13:27 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>にしおさんのlex/yacc見てなるほど思ったので、本家lexのお勉強。
下のコードをbf.lとすると
% lex bf.l
% cc lex.yy.c -ll -o bfc
としてコンパイル。
% ./bfc &lt;hello.bf &gt;hello.c
% cc hello.c
% ./a.out
Hello World!
のように使います。</p>
<p>一応
++++++ → <a href="/web/20090527035856/http://ja.doukaku.org/80/nested/#id1" name="id2"><span class="problematic" id="id2">*</span></a>pt = 6
みたいなことするようにしてみました。</p>
<div class="system-message" id="id1">
<p class="system-message-title">System Message: <a name="id1">WARNING/2</a> (<tt class="docutils">&lt;string&gt;</tt>, line 12); <em><a href="/web/20090527035856/http://ja.doukaku.org/80/nested/#id2">backlink</a></em></p>
Inline emphasis start-string without end-string.</div>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre><span class="o">%</span><span class="p">{</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="o">%</span><span class="p">}</span>
<span class="o">%</span><span class="n">option</span> <span class="n">noyywrap</span>
<span class="o">%%</span>
<span class="err">\</span><span class="o">++</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;*pt+=%d;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">yytext</span><span class="p">));</span>
<span class="err">\</span><span class="o">-+</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;*pt-=%d;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">yytext</span><span class="p">));</span>
<span class="err">\</span><span class="o">&gt;+</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pt+=%d;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">yytext</span><span class="p">));</span>
<span class="err">\</span><span class="o">&lt;+</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;pt-=%d;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">yytext</span><span class="p">));</span>
<span class="err">\</span><span class="p">,</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;*pt=getchar();&quot;</span><span class="p">);</span>
<span class="err">\</span><span class="p">.</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;putchar(*pt);&quot;</span><span class="p">);</span>
<span class="err">\</span><span class="p">[</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;while(*pt){&quot;</span><span class="p">);</span>
<span class="err">\</span><span class="p">]</span> <span class="n">puts</span><span class="p">(</span><span class="s">&quot;}&quot;</span><span class="p">);</span>
<span class="p">.</span> <span class="p">;</span>
<span class="o">%%</span>
<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;#include &lt;stdio.h&gt;</span><span class="se">\n</span><span class="s">&quot;</span>
  <span class="s">&quot;int mem[30000];</span><span class="se">\n</span><span class="s">&quot;</span>
  <span class="s">&quot;int *pt = mem;</span><span class="se">\n</span><span class="s">&quot;</span>
  <span class="s">&quot;int main(){&quot;</span><span class="p">);</span>
  <span class="n">yylex</span><span class="p">();</span>
  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;return 0;</span><span class="se">\n</span><span class="s">}&quot;</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4154/addtag/" class="addtag" id="addtag_4154">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4154/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4154/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4154"
  >-</span><span
  class="button yellow"
  id="rating_z_4154"
  >0</span><span 
  class="button green"
  id="rating_p_4154"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4154/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4260">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4260/">#4260</a>(<script language="JavaScript">print_time(new Date("2007/11/19 15:39 GMT"));</script><noscript>2007/11/19 15:39 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>無理矢理ですけど健全なマクロで解いてみました。</p>
<p>なお、出力されたコードもbf.scmを参照するのでロードパスを適切に設定しておく必要があります。</p>
<p>;;; bf-test.scm (サンプル)</p>
<p>(use bf)</p>
<p>(bf-compiler &quot;+++++++++[&gt;++++++++&gt;+++++++++++&gt;+++++&lt;&lt;&lt;-]&gt;.&gt;++.+++++++..+++.&gt;-.------------.&lt;++++++++.--------.+++.------.--------.&gt;+.&quot; 32)</p>
<p>;;; gosh bf-test.scm | gosh で&quot;Hello, world!&quot;が出力されます</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70</pre></td><td class="code"><div class="highlight"><pre><span class="c1">;;; bf.scm</span>
<span class="p">(</span><span class="nf">define-module</span> <span class="nv">bf</span>
  <span class="p">(</span><span class="nf">export-all</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-syntax </span><span class="nv">%bf-compiler</span>
  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">&gt;</span> <span class="nv">+</span> <span class="nv">-</span> <span class="err">|</span><span class="o">.</span><span class="err">|</span> <span class="err">|</span><span class="o">,</span><span class="err">|</span><span class="p">)</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span><span class="p">)</span>
     <span class="nv">proc</span><span class="p">)</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">&lt;</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">))</span>
                                    <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">)))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">&gt;</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cdar </span><span class="nv">tape</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">caar </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tape</span><span class="p">))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">+</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">modulo </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">256</span><span class="p">)</span>
                                                     <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">-</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">modulo </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">256</span><span class="p">)</span>
                                                     <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="err">|</span><span class="o">.</span><span class="err">|</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nf">write-byte</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">))</span>
                              <span class="p">(</span><span class="nf">flush</span><span class="p">)</span>
                              <span class="nv">tape</span><span class="p">)</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>     
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="err">|</span><span class="o">,</span><span class="err">|</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nf">let1</span> <span class="nv">c</span> <span class="p">(</span><span class="nf">read-byte</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eof-object? </span><span class="nv">c</span><span class="p">)</span> <span class="mi">0</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">)))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>                   
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="err">[</span><span class="nv">body</span> <span class="o">...</span><span class="err">]</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
                                  <span class="nv">tape</span>
                                  <span class="p">(</span><span class="nf">let1</span> <span class="nv">f</span> <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="nv">values</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
                                    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">t</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">tape</span><span class="p">)))</span>
                                      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">t</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
                                          <span class="nv">t</span>
                                          <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">t</span><span class="p">)))))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bf-compiler</span> <span class="nv">str</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">write </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">use</span> <span class="nv">bf</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">write </span><span class="o">`</span><span class="p">((</span><span class="nf">%bf-compiler</span> <span class="nv">values</span> <span class="o">,@</span><span class="p">(</span><span class="nf">with-input-from-string</span>
                              <span class="p">(</span><span class="nf">regexp-replace-all</span> <span class="o">#</span><span class="nv">/</span><span class="err">[</span><span class="o">.,</span><span class="nv">+-&lt;&gt;</span><span class="err">]</span><span class="nv">/</span> <span class="o">#`</span><span class="s">&quot;(,str)&quot;</span> <span class="s">&quot;|\\0|&quot;</span><span class="p">)</span>
                            <span class="nv">read</span><span class="p">))</span>
           <span class="ss">&#39;,</span><span class="p">(</span><span class="nf">tape</span> <span class="nv">n</span><span class="p">))))</span>
                              
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">tape</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cons </span><span class="nv">t</span> <span class="nv">t</span><span class="p">)))</span>

<span class="p">(</span><span class="nf">provide</span> <span class="s">&quot;bf&quot;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4260/addtag/" class="addtag" id="addtag_4260">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4260/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4260/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4260"
  >-</span><span
  class="button yellow"
  id="rating_z_4260"
  >0</span><span 
  class="button green"
  id="rating_p_4260"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4260/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4260/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4261">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/">#4261</a>(<script language="JavaScript">print_time(new Date("2007/11/19 15:55 GMT"));</script><noscript>2007/11/19 15:55 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>あっ、tapeの実装がちょっと変だった。前のやつだと&lt;でポインタが戻りすぎたときに変な挙動になります(修正版ではエラーになるはず)。</p>
<p>まあ、変なプログラムを書かなければさっきのでも問題ないはずです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3</pre></td><td class="code"><div class="highlight"><pre>(define (tape n)
  (let1 t (make-list n 0)
    (cons &#39;() t)))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/addtag/" class="addtag" id="addtag_4261">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4261"
  >-</span><span
  class="button yellow"
  id="rating_z_4261"
  >0</span><span 
  class="button green"
  id="rating_p_4261"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4260/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/">
    1
    reply
  </a>

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4261/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4262">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4262/">#4262</a>(<script language="JavaScript">print_time(new Date("2007/11/19 16:07 GMT"));</script><noscript>2007/11/19 16:07 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>ぐぁ、ポインタの進む向き逆にしてた。コードをあげなおします。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70</pre></td><td class="code"><div class="highlight"><pre><span class="c1">;;; bf.scm</span>
<span class="p">(</span><span class="nf">define-module</span> <span class="nv">bf</span>
  <span class="p">(</span><span class="nf">export-all</span><span class="p">))</span>

<span class="p">(</span><span class="k">define-syntax </span><span class="nv">%bf-compiler</span>
  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">&gt;</span> <span class="nv">+</span> <span class="nv">-</span> <span class="err">|</span><span class="o">.</span><span class="err">|</span> <span class="err">|</span><span class="o">,</span><span class="err">|</span><span class="p">)</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span><span class="p">)</span>
     <span class="nv">proc</span><span class="p">)</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">&gt;</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">))</span>
                                    <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">)))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">&lt;</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cdar </span><span class="nv">tape</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">caar </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tape</span><span class="p">))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">+</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">modulo </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">256</span><span class="p">)</span>
                                                     <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="nv">-</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">modulo </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">256</span><span class="p">)</span>
                                                     <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="err">|</span><span class="o">.</span><span class="err">|</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nf">write-byte</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">))</span>
                              <span class="p">(</span><span class="nf">flush</span><span class="p">)</span>
                              <span class="nv">tape</span><span class="p">)</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>     
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="err">|</span><span class="o">,</span><span class="err">|</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="nf">let1</span> <span class="nv">c</span> <span class="p">(</span><span class="nf">read-byte</span><span class="p">)</span>
                              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tape</span><span class="p">)</span>
                                    <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eof-object? </span><span class="nv">c</span><span class="p">)</span> <span class="mi">0</span> <span class="nv">c</span><span class="p">)</span> <span class="p">(</span><span class="nb">cddr </span><span class="nv">tape</span><span class="p">)))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))</span>                   
    <span class="p">((</span><span class="nf">_</span> <span class="nv">proc</span> <span class="err">[</span><span class="nv">body</span> <span class="o">...</span><span class="err">]</span> <span class="nv">rest</span> <span class="o">...</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="p">(</span><span class="nf">compose</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tape</span><span class="p">)</span>
                              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">tape</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
                                  <span class="nv">tape</span>
                                  <span class="p">(</span><span class="nf">let1</span> <span class="nv">f</span> <span class="p">(</span><span class="nf">%bf-compiler</span> <span class="nv">values</span> <span class="nv">body</span> <span class="o">...</span><span class="p">)</span>
                                    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">t</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">tape</span><span class="p">)))</span>
                                      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">t</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
                                          <span class="nv">t</span>
                                          <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nf">f</span> <span class="nv">t</span><span class="p">)))))))</span>
                            <span class="nv">proc</span><span class="p">)</span>
                   <span class="nv">rest</span> <span class="o">...</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">bf-compiler</span> <span class="nv">str</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">write </span><span class="o">&#39;</span><span class="p">(</span><span class="nv">use</span> <span class="nv">bf</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">write </span><span class="o">`</span><span class="p">((</span><span class="nf">%bf-compiler</span> <span class="nv">values</span> <span class="o">,@</span><span class="p">(</span><span class="nf">with-input-from-string</span>
                              <span class="p">(</span><span class="nf">regexp-replace-all</span> <span class="o">#</span><span class="nv">/</span><span class="err">[</span><span class="o">.,</span><span class="nv">+-&lt;&gt;</span><span class="err">]</span><span class="nv">/</span> <span class="o">#`</span><span class="s">&quot;(,str)&quot;</span> <span class="s">&quot;|\\0|&quot;</span><span class="p">)</span>
                            <span class="nv">read</span><span class="p">))</span>
           <span class="ss">&#39;,</span><span class="p">(</span><span class="nf">tape</span> <span class="nv">n</span><span class="p">))))</span>
                              
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">tape</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">t</span> <span class="p">(</span><span class="nf">make-list</span> <span class="nv">n</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">cons </span><span class="o">&#39;</span><span class="p">()</span> <span class="nv">t</span><span class="p">)))</span>

<span class="p">(</span><span class="nf">provide</span> <span class="s">&quot;bf&quot;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4262/addtag/" class="addtag" id="addtag_4262">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4262/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4262/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4262"
  >-</span><span
  class="button yellow"
  id="rating_z_4262"
  >0</span><span 
  class="button green"
  id="rating_p_4262"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4261/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090527035856/http://ja.doukaku.org/comment/4262/root/"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4262/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  

  

  

  
    





<div class="comment" id="comment4340">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4340/">#4340</a>(<script language="JavaScript">print_time(new Date("2007/11/22 13:27 GMT"));</script><noscript>2007/11/22 13:27 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>なでしこへ変換。1.50047以降用。出力されるコードはもはや日本語でもなんでもない(^ ^;</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="highlight"><pre>!変数宣言が必要
FNとは文字列
BFCODEとは文字列
NAKOとは文字列=`mとは配列　
pとは整数=0
//コード開始
`
INDとは文字列=&quot;&quot;
TABとは整数=0

FN=&quot;bf&quot;の&quot;&quot;でファイル選択
もし(FN=&quot;&quot;)ならば、おわり
BFCODE=FNを開く
BFCODEの改行を&quot;&quot;に置換して文字列分解
反復
    対象で条件分岐
        &quot;&gt;&quot;ならば
            NAKO=NAKO&amp;IND&amp;`p=p+1`&amp;改行
        &quot;&lt;&quot;ならば
            NAKO=NAKO&amp;IND&amp;`p=p-1`&amp;改行
        &quot;+&quot;ならば
            NAKO=NAKO&amp;IND&amp;`m[p]=m[p]+1`&amp;改行
        &quot;-&quot;ならば
            NAKO=NAKO&amp;IND&amp;`m[p]=m[p]-1`&amp;改行
        &quot;.&quot;ならば
            NAKO=NAKO&amp;IND&amp;`継続表示(CHR(m[p]))`&amp;改行
        &quot;,&quot;ならば
            NAKO=NAKO&amp;IND&amp;`m[p]=INT(&quot;${HEXエンコード(文字抜出(入力(空),1,1))}&quot;)`&amp;改行
        &quot;[&quot;ならば
            NAKO=NAKO&amp;IND&amp;`(m[p]&lt;&gt;0)の間`&amp;改行
            TAB=TAB+1
            IND=リフレイン(タブ,TAB)
        &quot;]&quot;ならば
            TAB=TAB-1
            IND=リフレイン(タブ,TAB)
「nako」のファイル名抽出(FN)&amp;「.nako」で保存ファイル選択
NAKOをそれに保存
おわり
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4340/addtag/" class="addtag" id="addtag_4340">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4340/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4340/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4340"
  >-</span><span
  class="button yellow"
  id="rating_z_4340"
  >0</span><span 
  class="button green"
  id="rating_p_4340"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4340/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4434">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/582/" target="_top">jijixi</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4434/">#4434</a>(<script language="JavaScript">print_time(new Date("2007/11/27 10:49 GMT"));</script><noscript>2007/11/27 10:49 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>素朴な実装。
一応、連続したインクリメント・デクリメントは一つにまとめる程度の最適化はしてます。
サンプルコードは弾さんのページからコピペしました。

% cat hello.bf
++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]
&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.
&gt;.+++.------.--------.&gt;+.&gt;.

% ./bf.byte hello.bf
% cat hello.ml
(* runtime *)
let p = ref 0
let buf_size = 256
let make_buf () = Array.make buf_size 0
let buf = ref (make_buf ())
let extend () = buf := Array.append !buf (make_buf ())
let pincr n = p := !p + n; if Array.length !buf &gt;= !p then extend ()
let pdecr n = p := !p - n; if !p &lt; 0 then failwith "invalid pointer address!"
type vtype = INCR | DECR
let vset v n = !buf.(!p) &lt;- !buf.(!p) + (match v with INCR -&gt; n | DECR -&gt; -n)
let output () = print_char (char_of_int !buf.(!p))
let input () = !buf.(!p) &lt;- int_of_char (input_char stdin)
(* end of runtime *)
let () =
(* begin of code *)
vset INCR 10;
while !buf.(!p) &lt;&gt; 0 do
pincr 1;
vset INCR 7;
pincr 1;
vset INCR 10;
pincr 1;
vset INCR 3;
pincr 1;
vset INCR 1;
pdecr 4;
vset DECR 1;
done;
pincr 1;
vset INCR 2;
output ();
pincr 1;
vset INCR 1;
output ();
vset INCR 7;
output ();
vset INCR 3;
output ();
pincr 1;
vset INCR 2;
output ();
pdecr 2;
vset INCR 15;
output ();
pincr 1;
output ();
vset INCR 3;
output ();
vset DECR 6;
output ();
vset DECR 8;
output ();
pincr 1;
vset INCR 1;
output ();
pincr 1;
output ();
(* end of code *)
()

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97</pre></td><td class="code"><div class="highlight"><pre><span class="c">(* lexer.mll *)</span>
<span class="k">{</span>
<span class="kr">exception</span> <span class="n">Eof</span>
<span class="kr">type</span> <span class="n">instruction</span> <span class="k">=</span>
<span class="k">|</span> <span class="n">PINCR</span> <span class="kr">of</span> <span class="n">int</span> <span class="k">|</span> <span class="n">PDECR</span> <span class="kr">of</span> <span class="n">int</span>
<span class="k">|</span> <span class="n">VINCR</span> <span class="kr">of</span> <span class="n">int</span> <span class="k">|</span> <span class="n">VDECR</span> <span class="kr">of</span> <span class="n">int</span>
<span class="k">|</span> <span class="n">OUTPUT</span> <span class="k">|</span> <span class="n">INPUT</span> <span class="k">|</span> <span class="n">FJUMP</span> <span class="k">|</span> <span class="n">BJUMP</span>
<span class="k">}</span>

<span class="n">rule</span> <span class="n">token</span> <span class="k">=</span> <span class="n">parse</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;&gt;&#39;</span> <span class="k">+)</span> <span class="kr">as</span> <span class="n">s</span> <span class="k">{</span> <span class="n">PINCR</span> <span class="k">(</span><span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">s</span><span class="k">)</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;&lt;&#39;</span> <span class="k">+)</span> <span class="kr">as</span> <span class="n">s</span> <span class="k">{</span> <span class="n">PDECR</span> <span class="k">(</span><span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">s</span><span class="k">)</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;+&#39;</span> <span class="k">+)</span> <span class="kr">as</span> <span class="n">s</span> <span class="k">{</span> <span class="n">VINCR</span> <span class="k">(</span><span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">s</span><span class="k">)</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;-&#39;</span> <span class="k">+)</span> <span class="kr">as</span> <span class="n">s</span> <span class="k">{</span> <span class="n">VDECR</span> <span class="k">(</span><span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">s</span><span class="k">)</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;.&#39;</span> <span class="k">+)</span>      <span class="k">{</span> <span class="n">OUTPUT</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;,&#39;</span> <span class="k">+)</span>      <span class="k">{</span> <span class="n">INPUT</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;[&#39;</span> <span class="k">+)</span>      <span class="k">{</span> <span class="n">FJUMP</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">(</span><span class="sc">&#39;]&#39;</span> <span class="k">+)</span>      <span class="k">{</span> <span class="n">BJUMP</span> <span class="k">}</span>
   <span class="k">|</span> <span class="k">[</span><span class="sc">&#39;\n&#39;</span> <span class="sc">&#39;\r&#39;</span><span class="k">]</span>  <span class="k">{</span> <span class="n">token</span> <span class="n">lexbuf</span> <span class="k">}</span>
   <span class="k">|</span> <span class="n">eof</span>          <span class="k">{</span> <span class="n">raise</span> <span class="n">Eof</span> <span class="k">}</span>

<span class="c">(* bf.ml *)</span>
<span class="kr">let</span> <span class="n">runtime</span> <span class="k">=</span> <span class="s2">&quot;\</span>
<span class="s2">(* runtime *)</span>
<span class="s2">let p = ref 0</span>
<span class="s2">let buf_size = 256</span>
<span class="s2">let make_buf () = Array.make buf_size 0</span>
<span class="s2">let buf = ref (make_buf ())</span>
<span class="s2">let extend () = buf := Array.append !buf (make_buf ())</span>
<span class="s2">let pincr n = p := !p + n; if Array.length !buf &gt;= !p then extend ()</span>
<span class="s2">let pdecr n = p := !p - n; if !p &lt; 0 then failwith </span><span class="se">\&quot;</span><span class="s2">invalid pointer address!</span><span class="se">\&quot;</span><span class="s2"></span>
<span class="s2">type vtype = INCR | DECR</span>
<span class="s2">let vset v n = !buf.(!p) &lt;- !buf.(!p) + (match v with INCR -&gt; n | DECR -&gt; -n)</span>
<span class="s2">let output () = print_char (char_of_int !buf.(!p))</span>
<span class="s2">let input () = !buf.(!p) &lt;- int_of_char (input_char stdin)</span>
<span class="s2">(* end of runtime *)</span>
<span class="s2">&quot;</span>
<span class="kr">let</span> <span class="n">code_begin</span> <span class="k">=</span> <span class="s2">&quot;\</span>
<span class="s2">let () =</span>
<span class="s2">(* begin of code *)</span>
<span class="s2">&quot;</span>
<span class="kr">let</span> <span class="n">code_end</span> <span class="k">=</span> <span class="s2">&quot;\</span>
<span class="s2">(* end of code *)</span>
<span class="s2">()</span>
<span class="s2">&quot;</span>

<span class="kr">open</span> <span class="n">Lexer</span>

<span class="kr">let</span> <span class="n">code_of_instruction</span> <span class="n">token</span> <span class="k">=</span>
   <span class="kr">let</span> <span class="n">to_s</span> <span class="k">=</span> <span class="n">string_of_int</span> <span class="kr">in</span>
   <span class="kr">match</span> <span class="n">token</span> <span class="kr">with</span>
   <span class="k">|</span> <span class="n">PINCR</span> <span class="n">i</span> <span class="k">-&gt;</span> <span class="s2">&quot;pincr &quot;</span> <span class="o">^</span> <span class="k">(</span><span class="n">to_s</span> <span class="n">i</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;;</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">PDECR</span> <span class="n">i</span> <span class="k">-&gt;</span> <span class="s2">&quot;pdecr &quot;</span> <span class="o">^</span> <span class="k">(</span><span class="n">to_s</span> <span class="n">i</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;;</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">VINCR</span> <span class="n">i</span> <span class="k">-&gt;</span> <span class="s2">&quot;vset INCR &quot;</span> <span class="o">^</span> <span class="k">(</span><span class="n">to_s</span> <span class="n">i</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;;</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">VDECR</span> <span class="n">i</span> <span class="k">-&gt;</span> <span class="s2">&quot;vset DECR &quot;</span> <span class="o">^</span> <span class="k">(</span><span class="n">to_s</span> <span class="n">i</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;;</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">OUTPUT</span>  <span class="k">-&gt;</span> <span class="s2">&quot;output ();</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">INPUT</span>   <span class="k">-&gt;</span> <span class="s2">&quot;input ();</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">FJUMP</span>   <span class="k">-&gt;</span> <span class="s2">&quot;while !buf.(!p) &lt;&gt; 0 do</span><span class="se">\n</span><span class="s2">&quot;</span>
   <span class="k">|</span> <span class="n">BJUMP</span>   <span class="k">-&gt;</span> <span class="s2">&quot;done;</span><span class="se">\n</span><span class="s2">&quot;</span>

<span class="kr">let</span> <span class="n">translate</span> <span class="n">str</span> <span class="k">=</span>
   <span class="kr">let</span> <span class="n">buf</span> <span class="k">=</span> <span class="n">Buffer</span><span class="k">.</span><span class="n">create</span> <span class="k">((</span><span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">runtime</span><span class="k">)</span> <span class="k">*</span> <span class="mi">2</span><span class="k">)</span> <span class="kr">in</span>
   <span class="kr">let</span> <span class="n">add</span> <span class="k">=</span> <span class="n">Buffer</span><span class="k">.</span><span class="n">add_string</span> <span class="n">buf</span> <span class="kr">in</span>
   <span class="kr">let</span> <span class="k">()</span>  <span class="k">=</span> <span class="n">add</span> <span class="n">runtime</span><span class="k">;</span> <span class="n">add</span> <span class="n">code_begin</span> <span class="kr">in</span>
   <span class="kr">let</span> <span class="n">lexbuf</span> <span class="k">=</span> <span class="n">Lexing</span><span class="k">.</span><span class="n">from_string</span> <span class="n">str</span> <span class="kr">in</span>
   <span class="kr">try</span>
      <span class="kr">while</span> <span class="kr">true</span> <span class="kr">do</span>
         <span class="n">add</span> <span class="k">(</span><span class="n">code_of_instruction</span> <span class="k">(</span><span class="n">Lexer</span><span class="k">.</span><span class="n">token</span> <span class="n">lexbuf</span><span class="k">))</span>
      <span class="kr">done</span><span class="k">;</span>
      <span class="n">failwith</span> <span class="s2">&quot;unreached&quot;</span>
   <span class="kr">with</span> <span class="n">Lexer</span><span class="k">.</span><span class="n">Eof</span> <span class="k">-&gt;</span>
      <span class="n">add</span> <span class="n">code_end</span><span class="k">;</span>
      <span class="n">Buffer</span><span class="k">.</span><span class="n">contents</span> <span class="n">buf</span>

<span class="kr">let</span> <span class="n">main</span> <span class="k">()</span> <span class="k">=</span>
   <span class="kr">match</span> <span class="n">Sys</span><span class="k">.</span><span class="n">argv</span> <span class="kr">with</span>
   <span class="k">|</span> <span class="k">[|_;</span> <span class="n">fname</span> <span class="k">|]</span> <span class="k">-&gt;</span> <span class="kr">begin</span>
        <span class="kr">let</span> <span class="n">out_file_name</span> <span class="k">=</span>
           <span class="kr">try</span> <span class="k">(</span><span class="n">Filename</span><span class="k">.</span><span class="n">chop_extension</span> <span class="n">fname</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot;.ml&quot;</span>
           <span class="kr">with</span> <span class="k">_</span> <span class="k">-&gt;</span> <span class="n">fname</span> <span class="o">^</span> <span class="s2">&quot;.ml&quot;</span>
        <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">in_ch</span> <span class="k">=</span> <span class="n">open_in</span> <span class="n">fname</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">buf</span> <span class="k">=</span> <span class="n">Buffer</span><span class="k">.</span><span class="n">create</span> <span class="mi">10</span> <span class="kr">in</span>
        <span class="kr">try</span>
           <span class="kr">while</span> <span class="kr">true</span> <span class="kr">do</span>
              <span class="n">Buffer</span><span class="k">.</span><span class="n">add_string</span> <span class="n">buf</span> <span class="k">(</span><span class="n">input_line</span> <span class="n">in_ch</span><span class="k">)</span>
           <span class="kr">done</span>
        <span class="kr">with</span> <span class="n">End_of_file</span> <span class="k">-&gt;</span>
           <span class="n">close_in</span> <span class="n">in_ch</span><span class="k">;</span>
           <span class="kr">let</span> <span class="n">code</span> <span class="k">=</span> <span class="n">translate</span> <span class="k">(</span><span class="n">Buffer</span><span class="k">.</span><span class="n">contents</span> <span class="n">buf</span><span class="k">)</span> <span class="kr">in</span>
           <span class="kr">let</span> <span class="n">out_ch</span> <span class="k">=</span> <span class="n">open_out</span> <span class="n">out_file_name</span> <span class="kr">in</span>
           <span class="n">output_string</span> <span class="n">out_ch</span> <span class="n">code</span><span class="k">;</span>
           <span class="n">close_out</span> <span class="n">out_ch</span>
     <span class="kr">end</span>
   <span class="k">|</span> <span class="k">_</span> <span class="k">-&gt;</span>
        <span class="n">print_endline</span> <span class="k">(</span><span class="s2">&quot;usage: &quot;</span> <span class="o">^</span> <span class="n">Sys</span><span class="k">.</span><span class="n">argv</span><span class="k">.(</span><span class="mi">0</span><span class="k">)</span> <span class="o">^</span> <span class="s2">&quot; BF_file&quot;</span><span class="k">)</span>
<span class="kr">let</span> <span class="k">()</span> <span class="k">=</span> <span class="kr">if</span> <span class="n">not</span> <span class="o">!</span><span class="n">Sys</span><span class="k">.</span><span class="n">interactive</span> <span class="kr">then</span> <span class="n">main</span> <span class="k">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/4434/addtag/" class="addtag" id="addtag_4434">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/ocamllex/">ocamllex</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4434/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/4434/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4434"
  >-</span><span
  class="button yellow"
  id="rating_z_4434"
  >0</span><span 
  class="button green"
  id="rating_p_4434"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/4434/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  
    





<div class="comment" id="comment5116">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/507/" target="_top">fujidig</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5116/">#5116</a>(<script language="JavaScript">print_time(new Date("2008/01/02 09:45 GMT"));</script><noscript>2008/01/02 09:45 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/hidemaru_macro/">
	  秀丸マクロ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  一番手間がかかったのはgetcharの実装です。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre>begingroupundo;
gofiletop;
$code[&#39;&gt;&#39;] = &quot;#ptr=#ptr+1;&quot;;
$code[&#39;&lt;&#39;] = &quot;#ptr=#ptr-1;&quot;;
$code[&#39;+&#39;] = &quot;#buf[#ptr]=#buf[#ptr]+1;&quot;;
$code[&#39;-&#39;] = &quot;#buf[#ptr]=#buf[#ptr]-1;&quot;;
$code[&#39;.&#39;] = &quot;insert char(#buf[#ptr]);&quot;;
$code[&#39;,&#39;] = &quot;call get;&quot;;
$code[&#39;[&#39;] = &quot;while(#buf[#ptr]){&quot;;
$code[&#39;]&#39;] = &quot;}&quot;;
#isUsedGetchar = false;
while( code != eof ) {
    if( code == &#39;,&#39; ) #isUsedGetchar = true;
    insert $code[code];
    delete;
}
if( #isUsedGetchar ) {
    insert &quot;endmacro;get:if($get==\&quot;\&quot;&amp;&amp;#c&lt;=0)$get=input(\&quot;入力\&quot;);#c=ascii($get);if($get==\&quot;\&quot;)#c=-1;$get=rightstr($get,strlen($get)-strlen(char(#c)));#buf[#ptr]=#c;return;&quot;;
}
endgroupundo;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5116/addtag/" class="addtag" id="addtag_5116">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/hidemaru_macro/">
		秀丸マクロ
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5116/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5116/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5116"
  >-</span><span
  class="button yellow"
  id="rating_z_5116"
  >0</span><span 
  class="button green"
  id="rating_p_5116"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/5116/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5264">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/648/" target="_top">szktty</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5264/">#5264</a>(<script language="JavaScript">print_time(new Date("2008/01/11 06:35 GMT"));</script><noscript>2008/01/11 06:35 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Mac OS X (PowerPC 32bit) アセンブリで。コマンドラインでBFのソースを書いて、標準出力にアセンブリを出力します。当方ヘタレなもんで、Mac OS X PowerPCアセンブリでのファイルの扱いがよくわかりません。</p>
<pre class="literal-block">
# BFコンパイラのコンパイル
% gcc -o bfc-osxppc bfc-osxppc.s
% ./bfc-osxppc &quot;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&quot; &gt; hello-bf.s

# 出力されたソースのコンパイルと実行
% gcc -o hello-bf hello-bf.s
% ./hello-bf
Hello World!
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317</pre></td><td class="code"><div class="highlight"><pre>;; % gcc -o bfc-osxppc bfc-osxppc.s
;; 
;; Usage: ./bfc-osxppc &quot;source...&quot; &gt; output
;;
;; ex)
;; % ./bfc-osxppc &quot;++++++++++[&gt;+++++++&gt;++++++++++&gt;+++&gt;+&lt;&lt;&lt;&lt;-]&gt;++.&gt;+.+++++++..+++.&gt;++.&lt;&lt;+++++++++++++++.&gt;.+++.------.--------.&gt;+.&quot; &gt; hello-bf.s
;; % gcc -o hello-bf hello-bf.s
;; % ./hello-bf
;; Hello World!

        .machine ppc
        .globl _main
        
        .macro  PUSH
                stwu    r3, -4(r1)
                stwu    r4, -4(r1)
                stwu    r5, -4(r1)
                stwu    r6, -4(r1)
                stwu    r7, -4(r1)
                stwu    r8, -4(r1)
                stwu    r9, -4(r1)
                stwu    r10, -4(r1)
                stwu    r11, -4(r1)
                stwu    r12, -4(r1)
                stwu    r13, -4(r1)
                mflr    r20
                stwu    r20, -4(r1)
        .endmacro

        .macro POP
                lwz     r20, 0(r1)
                mtlr    r20
                lwzu    r13, 4(r1)
                lwzu    r12, 4(r1)
                lwzu    r11, 4(r1)
                lwzu    r10, 4(r1)
                lwzu    r9, 4(r1)
                lwzu    r8, 4(r1)
                lwzu    r7, 4(r1)
                lwzu    r6, 4(r1)
                lwzu    r5, 4(r1)
                lwzu    r4, 4(r1)
                lwzu    r3, 4(r1)
                addi    r1, r1, 4
        .endmacro

        .macro PRINT
                PUSH
                li      r3, 1
                lis     r4, hi16($0)
                addi    r4, r4, lo16($0)
                lis     r5, hi16($0_len)
                addi    r5, r5, lo16($0_len)
                li      r0, 4
                sc
                POP
        .endmacro

        .macro PRINT_DIGIT
                PUSH
                mr      r3, $0
                bl      print_digit
                POP
        .endmacro

;; r7:  ソースコード
;; r8:  読み込んだ文字
;; r9:  配列のサイズ
;; r10: ラベルの数
_main:
        lwz     r7, 4(r4)       ; argv[1]
        li      r8, 0
        li      r9, 10
        li      r10, 0

;; ヘッダを出力
print_header:
        PRINT   bf_header

compile:
        lbz     r8, 0(r7)
        cmpli   cr7, r8, 0
        beq     cr7, finish_compile
        addi    r7, r7, 1

        cmpli   cr7, r8, 62     ; &#39;&gt;&#39;
        beq     cr7, compile_inc
        cmpli   cr7, r8, 60     ; &#39;&lt;&#39;
        beq     cr7, compile_dec
        cmpli   cr7, r8, 43     ; &#39;+&#39;
        beq     cr7, compile_plus
        cmpli   cr7, r8, 45     ; &#39;-&#39;
        beq     cr7, compile_minus
        cmpli   cr7, r8, 46     ; &#39;.&#39;
        beq     cr7, compile_output
        cmpli   cr7, r8, 44     ; &#39;,&#39;
        beq     cr7, compile_input
        cmpli   cr7, r8, 91     ; &#39;[&#39;
        beq     cr7, compile_forward
        cmpli   cr7, r8, 93     ; &#39;]&#39;
        beq     cr7, compile_backward

        ;; 他の文字は無視
        b       compile

compile_inc:
        addi    r9, r9, 1
        PRINT   bf_inc
        b       compile

compile_dec:
        subi    r9, r9, 1
        PRINT   bf_dec
        b       compile

compile_plus:
        PRINT   bf_plus
        b       compile

compile_minus:
        PRINT   bf_minus
        b       compile

compile_output:
        PRINT   bf_output
        b       compile

compile_input:
        PRINT   bf_input
        b       compile

compile_forward:
        addi    r10, r10, 1
        stwu    r10, -4(r1)
        PRINT   bf_forward_cmp
        PRINT   bf_end_label
        PRINT_DIGIT     r10
        PRINT   lf
        PRINT   bf_begin_label
        PRINT_DIGIT     r10
        PRINT   bf_label_term
        b       compile

compile_backward:
        lwz     r2, 0(r1)
        addi    r1, r1, 4
        PRINT   bf_backward_cmp
        PRINT   bf_begin_label
        PRINT_DIGIT     r2
        PRINT   lf
        PRINT   bf_end_label
        PRINT_DIGIT     r2
        PRINT   bf_label_term
        b       compile

finish_compile:
        PRINT   lf
        PRINT   bf_exit
        PRINT   bf_data
        PRINT   bf_array_decl

print_array:
        PRINT   bf_array_element
        cmpli   cr7, r9, 0
        subi    r9, r9, 1
        bgt     cr7, print_array
        PRINT   bf_array_decl_end
        
exit:
        PRINT   lf
        
        ;; sys_exit()
        li      r3, 0
        li      r0, 1           ; sys_exit
        sc


;; 正の整数を10進数で出力
;; r3: 出力する整数
print_digit:
        mr      r10, r3
        li      r11, 25000      ; fig, 桁
        mulli   r11, r11, 4
        li      r14, 10         ; 桁の除算用
        li      r15, 0          ; 残りの数字をすべて表示するか

;; 上の桁から順に出力する
print_each_digit:
        divw    r12, r10, r11   ; d = i / fig
        mullw   r13, r11, r12   ; rem = i - fig * d
        sub     r10, r10, r13

        cmpli   cr7, r15, 0
        cmpli   cr6, r12, 0     ; d == 0
        cmpli   cr5, r11, 1     ; fig &gt; 1
        crand   2, 30, 26       ; cr0[eq] = cr7[eq] &amp;&amp; cr6[eq]
        crand   2, 2, 21        ; cr0[eq] = cr0[eq] &amp;&amp; cr5[gt]
        divw    r11, r11, r14   ; fig /= 10
        beq     cr0, print_each_digit

        ;; 出力
        li      r15, 1
        addi    r12, r12, 48    ; ASCIIコードにする
        li      r3, 1           ; 標準出力
        lis     r4, hi16(temp)
        addi    r4, r4, lo16(temp)
        li      r5, 1
        li      r0, 4           ; sys_write
        stb     r12, 0(r4)
        PUSH
        sc
        POP

        cmpli   cr7, r11, 0     ; fig == 0 なら終了
        beqlr   cr7
        b       print_each_digit


;; 定数

        .data
        .align  4

temp:
        .asciz  &quot;    &quot;
        .align  4

lf:
        .asciz  &quot;\n&quot;
        .align  4
        lf_len = 1
        .align  4

bf_header:
        .asciz  &quot;;; This file is automatically generated. Do not edit.\n\n    .machine ppc\n    .globl _main\n\n    .macro  PUSH\n            stwu    r7, -4(r1)\n            stwu    r8, -4(r1)\n            stwu    r9, -4(r1)\n    .endmacro\n\n    .macro  POP\n            lwz     r9, 0(r1)\n            lwzu    r8, 4(r1)\n            lwzu    r7, 4(r1)\n            addi    r1, r1, 4\n    .endmacro\n\n    .macro  OUTPUT\n            PUSH\n            li      r3, 1\n            lis     r4, hi16(temp)\n            addi    r4, r4, lo16(temp)\n            stb     r8, 0(r4)\n            li      r5, 1\n            li      r0, 4\n            sc\n            POP\n    .endmacro\n\n\n_main:\n    lis     r7, hi16(array)\n    addi    r7, r7, lo16(array)\n    li      r8, 0\n\n&quot;
        bf_header_len = . - bf_header - 1
        .align  4

bf_exit:
        .asciz  &quot;exit:\n    li      r8, 10\n    OUTPUT\n    li      r3, 0\n    li      r0, 1\n    sc\n\n&quot;
        bf_exit_len = . - bf_exit - 1
        .align  4

bf_data:
        .asciz  &quot;\n\n    .data\n    .align  4\n\ntemp:\n    .asciz  \&quot;  \&quot;\n    .align  4\n\n&quot;
        bf_data_len = . - bf_data - 1
        .align  4

bf_array_decl:
        .asciz  &quot;array:\n    .long &quot;
        bf_array_decl_len = . - bf_array_decl - 1
        .align  4

bf_array_element:
        .asciz  &quot;0, &quot;
        bf_array_element_len = . - bf_array_element - 1
        .align  4

bf_array_decl_end:
        .asciz  &quot;0\n    .align  4\n&quot;
        bf_array_decl_end_len = . - bf_array_decl_end - 1
        .align  4

bf_inc:
        .asciz  &quot;    addi    r7, r7, 4\n&quot;
        bf_inc_len = . - bf_inc - 1
        .align  4

bf_dec:
        .asciz  &quot;    subi    r7, r7, 4\n&quot;
        bf_dec_len = . - bf_dec - 1
        .align  4

bf_plus:
        .asciz  &quot;    lwz     r8, 0(r7)\n    addi    r8, r8, 1\n    stw     r8, 0(r7)\n&quot;
        bf_plus_len = . - bf_plus - 1
        .align  4

bf_minus:
        .asciz  &quot;    lwz     r8, 0(r7)\n    subi    r8, r8, 1\n    stw     r8, 0(r7)\n&quot;
        bf_minus_len = . - bf_minus - 1
        .align  4

bf_output:
        .asciz  &quot;    lwz     r8, 0(r7)\n    OUTPUT\n&quot;
        bf_output_len = . - bf_output - 1
        .align  4

bf_input:
        .asciz  &quot;    INPUT\n&quot;
        bf_input_len = . - bf_input - 1
        .align  4

bf_forward_cmp:
        .asciz  &quot;    lwz     r8, 0(r7)\n    cmpi    cr7, r8, 0\n    beq     cr7, &quot;
        bf_forward_cmp_len = . - bf_forward_cmp - 1
        .align  4

bf_begin_label:
        .asciz  &quot;begin&quot;
        bf_begin_label_len = . - bf_begin_label - 1
        .align  4

bf_end_label:
        .asciz  &quot;end&quot;
        bf_end_label_len = . - bf_end_label - 1
        .align  4

bf_label_term:
        .asciz  &quot;:\n&quot;
        bf_label_term_len = . - bf_label_term - 1
        .align  4

bf_backward_cmp:
        .asciz  &quot;    lwz     r8, 0(r7)\n    cmpi    cr7, r8, 0\n    bne     cr7, &quot;
        bf_backward_cmp_len = . - bf_backward_cmp - 1
        .align  4
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5264/addtag/" class="addtag" id="addtag_5264">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/Assembly/">Assembly</a>
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/MacOSX/">MacOSX</a>
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/PowerPC/">PowerPC</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5264/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5264/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5264"
  >-</span><span
  class="button yellow"
  id="rating_z_5264"
  >0</span><span 
  class="button green"
  id="rating_p_5264"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/5264/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5594">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5594/">#5594</a>(<script language="JavaScript">print_time(new Date("2008/01/31 06:58 GMT"));</script><noscript>2008/01/31 06:58 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>昔七行スレに投下したのを投稿してみる。
要gcc、出力はa.outで固定です。
$ gcc bfc.c -o bfc #コンパイラのコンパイル
$ ./bfc hoge.bf #コンパイル
$ ./a.out #実行
</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090527035856/http://pc2.2ch.net/tech/kako/1033/10331/1033143528.html"></a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="kt">int</span> <span class="n">system</span><span class="p">(),</span><span class="n">i</span><span class="p">;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span><span class="kt">char</span><span class="o">**</span><span class="n">v</span><span class="p">){</span><span class="n">FILE</span><span class="o">*</span><span class="n">f</span><span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="o">*++</span><span class="n">v</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">),</span><span class="o">*</span><span class="n">g</span><span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="s">&quot;!.c&quot;</span><span class="p">,</span><span class="s">&quot;w&quot;</span>
<span class="p">);</span><span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">99</span><span class="p">],</span><span class="o">*</span><span class="n">o</span><span class="p">[]</span><span class="o">=</span><span class="p">{</span><span class="s">&quot;putchar(*p);&quot;</span><span class="p">,</span><span class="s">&quot;*p=getchar();&quot;</span><span class="p">,</span><span class="s">&quot;while(*p){&quot;</span><span class="p">,</span><span class="s">&quot;}&quot;</span><span class="p">,</span><span class="s">&quot;++p;&quot;</span><span class="p">,</span><span class="s">&quot;--p;&quot;</span>
<span class="p">,</span><span class="s">&quot;++*p;&quot;</span><span class="p">,</span><span class="s">&quot;--*p;&quot;</span><span class="p">};</span><span class="n">fputs</span><span class="p">(</span><span class="s">&quot;#include&lt;stdio.h&gt;</span><span class="se">\n</span><span class="s">int main(void){static int b[30000],&quot;</span>
<span class="s">&quot;*p=b;&quot;</span><span class="p">,</span><span class="n">g</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="n">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="n">c</span><span class="o">=</span><span class="n">fgetc</span><span class="p">(</span><span class="n">f</span><span class="p">))</span><span class="o">-</span><span class="n">EOF</span><span class="p">;)</span><span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="n">i</span><span class="o">--</span><span class="p">;)</span><span class="n">fputs</span><span class="p">(</span><span class="s">&quot;.,[]&gt;&lt;+-&quot;</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">c</span><span class="o">?</span><span class="s">&quot;&quot;</span><span class="o">:</span><span class="n">o</span><span class="p">[</span><span class="n">i</span>
<span class="p">],</span><span class="n">g</span><span class="p">);</span><span class="n">fputs</span><span class="p">(</span><span class="s">&quot;return 0;}&quot;</span><span class="p">,</span><span class="n">g</span><span class="p">);</span><span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span><span class="n">fclose</span><span class="p">(</span><span class="n">g</span><span class="p">);</span><span class="n">sprintf</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="s">&quot;gcc !.c -o%s&quot;</span><span class="p">,</span><span class="o">*++</span><span class="n">v</span><span class="p">);</span>
<span class="k">return</span> <span class="n">system</span><span class="p">(</span><span class="n">s</span><span class="p">);}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5594/addtag/" class="addtag" id="addtag_5594">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5594/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5594/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5594"
  >-</span><span
  class="button yellow"
  id="rating_z_5594"
  >0</span><span 
  class="button green"
  id="rating_p_5594"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/5594/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5925">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5925/">#5925</a>(<script language="JavaScript">print_time(new Date("2008/03/02 15:11 GMT"));</script><noscript>2008/03/02 15:11 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>MetaOCaml 使ってみました。コード生成部が読みにくい……</p>
<p>出力されるコードはこんな風になります:</p>
<pre class="literal-block">
# compile &quot;++++++++[&gt;++++++++&lt;-]&gt;+.&quot;;;
- : ('a, state -&gt; unit) code =
.&lt;fun s_1 -&gt;
   let _ = (s_1.array).(s_1.ptr) &lt;- ((s_1.array).(s_1.ptr) + 8) in
   let _ =
    while ((s_1.array).(s_1.ptr) &lt;&gt; 0) do
     let _ = s_1.ptr &lt;- ((s_1.ptr + 1) mod s_1.array_size) in
     let _ = (s_1.array).(s_1.ptr) &lt;- ((s_1.array).(s_1.ptr) + 8) in
     let _ = s_1.ptr &lt;- ((s_1.ptr + (-1)) mod s_1.array_size) in
     let _ = (s_1.array).(s_1.ptr) &lt;- ((s_1.array).(s_1.ptr) + (-1)) in ()
    done in
   let _ = s_1.ptr &lt;- ((s_1.ptr + 1) mod s_1.array_size) in
   let _ = (s_1.array).(s_1.ptr) &lt;- ((s_1.array).(s_1.ptr) + 1) in
   let _ =
    (output_char stdout
      (((* cross-stage persistent value (as id: Char.chr) *))
        (s_1.array).(s_1.ptr))) in
   ()&gt;.
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></td><td class="code"><div class="highlight"><pre><span class="kr">type</span> <span class="n">inst</span> <span class="k">=</span> <span class="n">Inc</span> <span class="kr">of</span> <span class="n">int</span> <span class="k">|</span> <span class="n">Shift</span> <span class="kr">of</span> <span class="n">int</span> <span class="k">|</span> <span class="n">Input</span> <span class="k">|</span> <span class="n">Output</span> <span class="k">|</span> <span class="n">Loop</span> <span class="kr">of</span> <span class="n">inst</span> <span class="n">list</span>

<span class="kr">let</span> <span class="n">count_while</span> <span class="n">c</span> <span class="n">s</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">m</span> <span class="k">=</span>
    <span class="kr">match</span> <span class="n">Stream</span><span class="k">.</span><span class="n">peek</span> <span class="n">s</span> <span class="kr">with</span>
      <span class="k">|</span> <span class="n">Some</span> <span class="n">c&#39;</span> <span class="kr">when</span> <span class="n">c</span> <span class="k">=</span> <span class="n">c&#39;</span> <span class="k">-&gt;</span> <span class="n">Stream</span><span class="k">.</span><span class="n">junk</span> <span class="n">s</span><span class="k">;</span> <span class="n">loop</span> <span class="k">(</span><span class="n">m</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span>
      <span class="k">|</span> <span class="k">_</span> <span class="k">-&gt;</span> <span class="n">m</span>
  <span class="kr">in</span> <span class="n">loop</span> <span class="mi">1</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">parse1</span> <span class="n">s</span> <span class="k">=</span>
  <span class="kr">match</span> <span class="n">Stream</span><span class="k">.</span><span class="n">next</span> <span class="n">s</span> <span class="kr">with</span>
    <span class="k">|</span> <span class="sc">&#39;+&#39;</span> <span class="k">-&gt;</span> <span class="n">Inc</span> <span class="k">(</span><span class="n">count_while</span> <span class="sc">&#39;+&#39;</span> <span class="n">s</span><span class="k">)</span>
    <span class="k">|</span> <span class="sc">&#39;-&#39;</span> <span class="k">-&gt;</span> <span class="n">Inc</span> <span class="k">(-</span> <span class="k">(</span><span class="n">count_while</span> <span class="sc">&#39;-&#39;</span> <span class="n">s</span><span class="k">))</span>
    <span class="k">|</span> <span class="sc">&#39;&gt;&#39;</span> <span class="k">-&gt;</span> <span class="n">Shift</span> <span class="k">(</span><span class="n">count_while</span> <span class="sc">&#39;&gt;&#39;</span> <span class="n">s</span><span class="k">)</span>
    <span class="k">|</span> <span class="sc">&#39;&lt;&#39;</span> <span class="k">-&gt;</span> <span class="n">Shift</span> <span class="k">(-</span> <span class="k">(</span><span class="n">count_while</span> <span class="sc">&#39;&lt;&#39;</span> <span class="n">s</span><span class="k">))</span>
    <span class="k">|</span> <span class="sc">&#39;.&#39;</span> <span class="k">-&gt;</span> <span class="n">Output</span>
    <span class="k">|</span> <span class="sc">&#39;,&#39;</span> <span class="k">-&gt;</span> <span class="n">Input</span>
    <span class="k">|</span> <span class="sc">&#39;[&#39;</span> <span class="k">-&gt;</span> <span class="n">Loop</span> <span class="k">(</span><span class="n">parseloop</span> <span class="n">s</span> <span class="k">[])</span>
    <span class="k">|</span> <span class="k">_</span>   <span class="k">-&gt;</span> <span class="n">parse1</span> <span class="n">s</span>
<span class="kr">and</span> <span class="n">parse</span> <span class="n">s</span> <span class="n">acc</span> <span class="k">=</span>
  <span class="kr">try</span> <span class="kr">let</span> <span class="n">i</span> <span class="k">=</span> <span class="n">parse1</span> <span class="n">s</span> <span class="kr">in</span> <span class="n">parse</span> <span class="n">s</span> <span class="k">(</span><span class="n">i</span> <span class="k">::</span> <span class="n">acc</span><span class="k">)</span>
  <span class="kr">with</span> <span class="n">Stream</span><span class="k">.</span><span class="n">Failure</span> <span class="k">-&gt;</span> <span class="n">List</span><span class="k">.</span><span class="n">rev</span> <span class="n">acc</span>
<span class="kr">and</span> <span class="n">parseloop</span> <span class="n">s</span> <span class="n">acc</span> <span class="k">=</span>
  <span class="kr">if</span> <span class="n">Stream</span><span class="k">.</span><span class="n">peek</span> <span class="n">s</span> <span class="k">=</span> <span class="n">Some</span> <span class="sc">&#39;]&#39;</span> <span class="kr">then</span> <span class="k">(</span><span class="n">Stream</span><span class="k">.</span><span class="n">junk</span> <span class="n">s</span><span class="k">;</span> <span class="n">List</span><span class="k">.</span><span class="n">rev</span> <span class="n">acc</span><span class="k">)</span>
  <span class="kr">else</span> <span class="n">parseloop</span> <span class="n">s</span> <span class="k">(</span><span class="n">parse1</span> <span class="n">s</span> <span class="k">::</span> <span class="n">acc</span><span class="k">)</span>

<span class="kr">type</span> <span class="n">state</span> <span class="k">=</span> <span class="k">{</span> <span class="kr">mutable</span> <span class="n">ptr</span> <span class="k">:</span> <span class="n">int</span><span class="k">;</span> <span class="n">array</span> <span class="k">:</span> <span class="n">int</span> <span class="n">array</span><span class="k">;</span> <span class="n">array_size</span> <span class="k">:</span> <span class="n">int</span><span class="k">;</span> <span class="k">}</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">trans1</span> <span class="n">i</span> <span class="n">s</span> <span class="k">=</span>
  <span class="kr">match</span> <span class="n">i</span> <span class="kr">with</span>
    <span class="k">|</span> <span class="n">Inc</span> <span class="n">n</span>   <span class="k">-&gt;</span> <span class="k">.&lt;</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">array</span><span class="k">.((.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span><span class="k">)</span> <span class="k">&lt;-</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">array</span><span class="k">.((.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span><span class="k">)</span> <span class="k">+</span> <span class="n">n</span> <span class="k">&gt;.</span>
    <span class="k">|</span> <span class="n">Shift</span> <span class="n">n</span> <span class="k">-&gt;</span> <span class="k">.&lt;</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span> <span class="k">&lt;-</span> <span class="k">((.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span> <span class="k">+</span> <span class="n">n</span><span class="k">)</span> <span class="kr">mod</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">array_size</span> <span class="k">&gt;.</span>
    <span class="k">|</span> <span class="n">Output</span>  <span class="k">-&gt;</span> <span class="k">.&lt;</span> <span class="n">output_char</span> <span class="n">stdout</span> <span class="k">(</span><span class="n">Char</span><span class="k">.</span><span class="n">chr</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">array</span><span class="k">.((.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span><span class="k">))</span> <span class="k">&gt;.</span>
    <span class="k">|</span> <span class="n">Input</span>   <span class="k">-&gt;</span> <span class="k">.&lt;</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">array</span><span class="k">.((.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span><span class="k">)</span> <span class="k">&lt;-</span> <span class="n">Char</span><span class="k">.</span><span class="n">code</span> <span class="k">(</span><span class="n">input_char</span> <span class="n">stdin</span><span class="k">)</span> <span class="k">&gt;.</span>
    <span class="k">|</span> <span class="n">Loop</span> <span class="n">is</span> <span class="k">-&gt;</span>
        <span class="k">.&lt;</span> <span class="kr">while</span> <span class="k">(.~</span><span class="n">s</span><span class="k">).</span><span class="n">array</span><span class="k">.((.~</span><span class="n">s</span><span class="k">).</span><span class="n">ptr</span><span class="k">)</span> <span class="k">&lt;&gt;</span> <span class="mi">0</span> <span class="kr">do</span> <span class="k">.~(</span><span class="n">trans</span> <span class="n">is</span> <span class="n">s</span><span class="k">)</span> <span class="kr">done</span> <span class="k">&gt;.</span>
<span class="kr">and</span> <span class="n">trans</span> <span class="n">insts</span> <span class="n">s</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">f</span> <span class="n">i</span> <span class="n">code</span> <span class="k">=</span> <span class="k">.&lt;</span> <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="k">.~(</span><span class="n">trans1</span> <span class="n">i</span> <span class="n">s</span><span class="k">)</span> <span class="kr">in</span> <span class="k">.~</span><span class="n">code</span> <span class="k">&gt;.</span>
  <span class="kr">in</span> <span class="n">List</span><span class="k">.</span><span class="n">fold_right</span> <span class="n">f</span> <span class="n">insts</span> <span class="k">.&lt;()&gt;.</span>

<span class="kr">let</span> <span class="n">make_state</span> <span class="n">n</span> <span class="k">=</span> <span class="k">{</span> <span class="n">ptr</span> <span class="k">=</span> <span class="mi">0</span><span class="k">;</span> <span class="n">array</span> <span class="k">=</span> <span class="n">Array</span><span class="k">.</span><span class="n">create</span> <span class="n">n</span> <span class="mi">0</span><span class="k">;</span> <span class="n">array_size</span> <span class="k">=</span> <span class="n">n</span><span class="k">;</span> <span class="k">}</span>
<span class="kr">let</span> <span class="n">compile</span> <span class="n">str</span> <span class="k">=</span>
  <span class="k">.&lt;</span><span class="kr">fun</span> <span class="n">s</span> <span class="k">-&gt;</span> <span class="k">.~(</span><span class="n">trans</span> <span class="k">(</span><span class="n">parse</span> <span class="k">(</span><span class="n">Stream</span><span class="k">.</span><span class="n">of_string</span> <span class="n">str</span><span class="k">)</span> <span class="k">[])</span> <span class="k">.&lt;</span><span class="n">s</span><span class="k">&gt;.)&gt;.</span>
<span class="kr">let</span> <span class="n">execute</span> <span class="n">str</span> <span class="k">=</span> <span class="k">(.</span><span class="o">!</span> <span class="n">compile</span> <span class="n">str</span><span class="k">)</span> <span class="k">(</span><span class="n">make_state</span> <span class="mi">100</span><span class="k">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/5925/addtag/" class="addtag" id="addtag_5925">タグ</a>:
	
    
    <a href="/web/20090527035856/http://ja.doukaku.org/tag/MetaOCaml/">MetaOCaml</a>
    
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5925/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/5925/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5925"
  >-</span><span
  class="button yellow"
  id="rating_z_5925"
  >0</span><span 
  class="button green"
  id="rating_p_5925"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/5925/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6259">
  <p class="banner"><a href="/web/20090527035856/http://ja.doukaku.org/user/801/" target="_top">Unkun</a><a href="/web/20090527035856/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/6259/">#6259</a>(<script language="JavaScript">print_time(new Date("2008/05/04 14:08 GMT"));</script><noscript>2008/05/04 14:08 GMT</noscript>)
	
	
	
	[<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>VBAを使用せず、Excelの普通(?)の関数のみでBrainfuckインタプリタを作りました。</p>
<p>メモリセル(16個だけ)、プログラムの長さ(1024文字まで)、実行ステップ数(1024ステップまで)に制限があります。
あと、Excelで表示できない文字は出力されないようにしました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3</pre></td><td class="code"><div class="highlight"><pre>ソースを貼り付けることができないので、
Excelファイルをここにアップロードしておきました。
http://unkun.ikaduchi.com/uploadFiles/BF.xls
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090527035856/http://ja.doukaku.org/comment/6259/addtag/" class="addtag" id="addtag_6259">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090527035856/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20090527035856/http://ja.doukaku.org/comment/6259/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090527035856/http://ja.doukaku.org/comment/6259/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6259"
  >-</span><span
  class="button yellow"
  id="rating_z_6259"
  >0</span><span 
  class="button green"
  id="rating_p_6259"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090527035856/http://ja.doukaku.org/80/reply_to/6259/">
  返信
  </a>]
  </div>
</div>
</div>




  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20090527035856if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20090527035856/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20090527035856/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20090527035856/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20090527035856/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20090527035856/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20090527035856/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20090527035856/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20090527035856/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090527035856/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090527035856/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20090527035856im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20090527035856/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20090527035856/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20090527035856/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20090527035856/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20090527035856/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20090527035856/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20090527035856/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20090527035856/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20090527035856im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20090527035856/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20090527035856/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20090527035856/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20090527035856js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 3:58:56 May 27, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:08:17 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
