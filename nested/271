
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
リングノードベンチマーク
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100617092512cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100617092512cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100617092512cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20100617092512/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100617092512/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100617092512js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100617092512js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100617092512js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100617092512js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app18.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/271\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "17";
var displayMonth = "Jun";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/271/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100617092512" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 9:25:12 Jun 17, 2010">JUN</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jul
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" />
                       
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 9:25:12 Jun 17, 2010">17</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 9:25:12 Jun 17, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100617092512*/http://ja.doukaku.org/271/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>1 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">17 Jun 10 - 17 Jun 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000000000_2010:5:000001000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100617092512/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100617092512/http://ja.doukaku.org/271/">リングノードベンチマーク</a>
</h2>

    





<div class="comment" id="comment9207">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/479/" target="_top">tsuwabuki</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9207/">#9207</a>(<script language="JavaScript">print_time(new Date("2009/06/20 02:27 GMT"));</script><noscript>2009/06/20 02:27 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>N個のノードを作り、1番目のノードに送られたメッセージは2番目のノードに、2番目のノードに送られたメッセージは3番目のノードに、・・・、N番目のノードに送られたメッセージは1番目のノードに送られるようにリングを形成し、そのリング上を一つのメッセージがM回まわるのにかかる時間を計測してください。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9207/addtag/" class="addtag" id="addtag_9207">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9207"
  >-</span><span
  class="button yellow"
  id="rating_z_9207"
  >0</span><span 
  class="button green"
  id="rating_p_9207"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9207/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100617092512/http://ja.doukaku.org/271/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20100617092512/http://ja.doukaku.org/271/flatten/">フラット表示</a> 
<a href="/web/20100617092512/http://ja.doukaku.org/271/">非表示</a> 


  

  
    





<div class="comment" id="comment9265">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/732/" target="_top">bleis-tift</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9265/">#9265</a>(<script language="JavaScript">print_time(new Date("2009/06/30 21:48 GMT"));</script><noscript>2009/06/30 21:48 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/sql/">
	  SQL
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>SQL Server 2008 で確認しました。</p>
<p>へっぽこノートで 20 秒程度かかりました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre><span class="k">DECLARE</span> <span class="o">@</span><span class="k">start</span> <span class="k">AS</span> <span class="n">datetime</span> <span class="o">=</span> <span class="n">GETDATE</span><span class="p">();</span>

<span class="k">DECLARE</span> <span class="o">@</span><span class="n">results</span> <span class="k">AS</span> <span class="k">table</span><span class="p">(</span><span class="n">id</span> <span class="nb">int</span><span class="p">,</span> <span class="n">n</span> <span class="nb">int</span><span class="p">,</span> <span class="k">m</span> <span class="nb">int</span><span class="p">,</span> <span class="n">msg</span> <span class="nb">varchar</span><span class="p">(</span><span class="k">max</span><span class="p">));</span>

<span class="k">WITH</span>
  <span class="k">Input</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="k">m</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span> <span class="mi">1000</span><span class="p">,</span> <span class="s1">&#39;hoge&#39;</span><span class="p">,</span> <span class="mi">10</span>
  <span class="p">)</span>
<span class="p">,</span> <span class="n">Nodes</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">next_id</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="mi">0</span>
      <span class="p">,</span> <span class="mi">1</span> <span class="o">%</span> <span class="n">n</span>
      <span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">FROM</span>
        <span class="k">Input</span>
    <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="k">SELECT</span>
        <span class="n">id</span> <span class="o">+</span> <span class="mi">1</span>
      <span class="p">,</span> <span class="p">(</span><span class="n">id</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">id</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">n</span><span class="p">)</span>
      <span class="p">,</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">FROM</span>
        <span class="n">Nodes</span>
    <span class="k">WHERE</span>
        <span class="n">n</span> <span class="o">&lt;&gt;</span> <span class="mi">0</span>
  <span class="p">)</span>
<span class="p">,</span> <span class="n">LoopNodes</span><span class="p">(</span><span class="n">id</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="k">m</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span> <span class="k">AS</span> <span class="p">(</span>
    <span class="k">SELECT</span>
        <span class="n">id</span>
      <span class="p">,</span> <span class="k">Input</span><span class="p">.</span><span class="n">n</span>
      <span class="p">,</span> <span class="k">m</span>
      <span class="p">,</span> <span class="n">msg</span>
    <span class="k">FROM</span>
        <span class="n">Nodes</span>
      <span class="p">,</span> <span class="k">Input</span>
    <span class="k">WHERE</span>
        <span class="n">id</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">UNION</span> <span class="k">ALL</span>
    <span class="k">SELECT</span>
        <span class="n">Node</span><span class="p">.</span><span class="n">id</span>
      <span class="p">,</span> <span class="n">Own</span><span class="p">.</span><span class="n">n</span>
      <span class="p">,</span> <span class="k">CASE</span> <span class="n">Node</span><span class="p">.</span><span class="n">id</span> <span class="k">WHEN</span> <span class="mi">0</span> <span class="k">THEN</span> <span class="n">Own</span><span class="p">.</span><span class="k">m</span> <span class="o">-</span> <span class="mi">1</span> <span class="k">ELSE</span> <span class="n">Own</span><span class="p">.</span><span class="k">m</span> <span class="k">END</span>
      <span class="p">,</span> <span class="n">Own</span><span class="p">.</span><span class="n">msg</span>
    <span class="k">FROM</span>
        <span class="n">LoopNodes</span> <span class="n">Own</span>
          <span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">Nodes</span> <span class="n">Node</span> <span class="k">ON</span> <span class="p">((</span><span class="n">Own</span><span class="p">.</span><span class="n">id</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">Own</span><span class="p">.</span><span class="n">n</span><span class="p">)</span> <span class="o">=</span> <span class="n">Node</span><span class="p">.</span><span class="n">id</span>
    <span class="k">WHERE</span>
        <span class="n">Own</span><span class="p">.</span><span class="k">m</span> <span class="o">&lt;&gt;</span> <span class="mi">0</span>
  <span class="p">)</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">results</span>
  <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">LoopNodes</span>
  <span class="k">OPTION</span> <span class="p">(</span><span class="n">MAXRECURSION</span> <span class="mi">32767</span><span class="p">);</span>

<span class="k">SELECT</span> <span class="k">CONVERT</span><span class="p">(</span><span class="nb">varchar</span><span class="p">,</span> <span class="n">GETDATE</span><span class="p">()</span> <span class="o">-</span> <span class="o">@</span><span class="k">start</span><span class="p">,</span> <span class="mi">114</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9265/addtag/" class="addtag" id="addtag_9265">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/sql/">
		SQL
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9265/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9265/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9265"
  >-</span><span
  class="button yellow"
  id="rating_z_9265"
  >0</span><span 
  class="button green"
  id="rating_p_9265"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9265/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9266">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/654/" target="_top">kh</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9266/">#9266</a>(<script language="JavaScript">print_time(new Date("2009/06/30 23:04 GMT"));</script><noscript>2009/06/30 23:04 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ファイバを用いました。

N = 1000, M = 1000: 719 ms
N = 10000, M = 1000: 11521 ms
N = 1000, M = 10000: 11079 ms
N = 10000, M = 10000: 114837 ms</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100617092512/http://www.digitalmars.com/d/2.0/phobos/std_thread.html">core.thread - D Programming Language - Digital Mars</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97</pre></td><td class="code"><div class="highlight"><pre><span class="k">module</span> <span class="n">ringnode</span>;
<span class="k">import</span> <span class="n">core</span>.<span class="n">thread</span>, <span class="n">std</span>.<span class="n">range</span>, <span class="n">std</span>.<span class="n">stdio</span>, <span class="n">std</span>.<span class="n">perf</span>;

<span class="k">class</span> <span class="n">Node</span>: <span class="n">Fiber</span> {
    <span class="k">private</span> <span class="n">Message</span>[] <span class="n">_msgs</span>;
    <span class="k">private</span> <span class="n">Node</span> <span class="n">_next</span>;
    
    <span class="k">this</span>() {    
        <span class="k">super</span>(&amp;<span class="n">process</span>);
    }
    
    <span class="kt">void</span> <span class="n">nextNode</span>(<span class="n">Node</span> <span class="n">value</span>) {
        <span class="n">_next</span> = <span class="n">value</span>;
    }
    
    <span class="kt">void</span> <span class="n">post</span>(<span class="n">Message</span> <span class="n">msg</span>) {
        <span class="n">_msgs</span> ~= <span class="n">msg</span>;
    }
    
    <span class="k">private</span> <span class="kt">void</span> <span class="n">process</span>() {
        <span class="k">for</span>(;;) {
            <span class="k">if</span>(!<span class="n">_msgs</span>.<span class="n">empty</span>) {
                <span class="k">auto</span> <span class="n">msg</span> = <span class="n">_msgs</span>.<span class="n">front</span>;
                <span class="n">_msgs</span>.<span class="n">popFront</span>;
                
                <span class="k">debug</span> <span class="n">writefln</span>(<span class="s">&quot;Node[%s] received message &#39;%s&#39; (hopLimit: %s)&quot;</span>, <span class="k">cast</span>(<span class="kt">void</span>*)<span class="k">this</span>, <span class="n">msg</span>.<span class="n">text</span>, <span class="n">msg</span>.<span class="n">hopLimit</span>);
                <span class="n">msg</span>.<span class="n">hopLimit</span>--;
                <span class="k">if</span>(!<span class="n">msg</span>.<span class="n">hopLimit</span>) {
                    <span class="n">yieldAndThrow</span>(<span class="k">new</span> <span class="n">Completed</span>(<span class="n">msg</span>));
                }
                <span class="n">_next</span>.<span class="n">post</span>(<span class="n">msg</span>);
            }
            <span class="n">yield</span>;
        }
    }
}

<span class="k">class</span> <span class="n">Ring</span> {
    <span class="n">Node</span>[] <span class="n">_nodes</span>;
    
    <span class="k">this</span>(<span class="kt">uint</span> <span class="n">n</span>) {
        <span class="n">_nodes</span>.<span class="n">length</span> = <span class="n">n</span>;
        <span class="k">foreach</span>(<span class="n">i</span>, <span class="k">ref</span> <span class="n">node</span>; <span class="n">_nodes</span>) <span class="n">node</span> = <span class="k">new</span> <span class="n">Node</span>;
        <span class="k">foreach</span>(<span class="n">i</span>, <span class="n">_</span>; <span class="n">_nodes</span>) <span class="n">_nodes</span>[<span class="n">i</span>].<span class="n">nextNode</span> = <span class="n">_nodes</span>[(<span class="n">i</span> + <span class="mi">1</span>) % $];
    }
    
    <span class="k">auto</span> <span class="n">nodes</span>() {
        <span class="k">return</span> <span class="n">cycle</span>(<span class="n">_nodes</span>);
    }
    
    <span class="k">alias</span> <span class="n">nodes</span> <span class="k">this</span>;
}

<span class="k">class</span> <span class="n">Message</span> {
    <span class="kt">uint</span> <span class="n">hopLimit</span>;
    <span class="n">string</span> <span class="n">text</span>;
    
    <span class="k">this</span>(<span class="kt">uint</span> <span class="n">hopLimit</span>, <span class="n">string</span> <span class="n">text</span>) {
        <span class="k">this</span>.<span class="n">hopLimit</span> = <span class="n">hopLimit</span>;
        <span class="k">this</span>.<span class="n">text</span> = <span class="n">text</span>;
    }
}

<span class="k">class</span> <span class="n">Completed</span>: <span class="n">Throwable</span> {
    <span class="k">this</span>(<span class="n">Message</span> <span class="n">msg</span>) {
        <span class="k">super</span>(<span class="s">&quot;completed: &#39;&quot;</span> ~ <span class="n">msg</span>.<span class="n">text</span> ~ <span class="s">&quot;&#39;&quot;</span>);
    }
}


<span class="kt">void</span> <span class="n">benchmark</span>(<span class="kt">uint</span> <span class="n">N</span>, <span class="kt">uint</span> <span class="n">M</span>)() {
    <span class="k">auto</span> <span class="n">ring</span> = <span class="k">new</span> <span class="n">Ring</span>(<span class="n">N</span>);
    
    <span class="n">ring</span>.<span class="n">front</span>.<span class="n">post</span>(<span class="k">new</span> <span class="n">Message</span>(<span class="n">N</span> * <span class="n">M</span>, <span class="s">&quot;hello&quot;</span>));
    
    <span class="k">auto</span> <span class="n">pc</span> = <span class="k">new</span> <span class="n">PerformanceCounter</span>;
    <span class="n">pc</span>.<span class="n">start</span>;
    
    <span class="k">try</span> {
        <span class="k">foreach</span>(<span class="n">node</span>; <span class="n">ring</span>.<span class="n">nodes</span>) {
            <span class="n">node</span>.<span class="n">call</span>;
        }
    } <span class="k">catch</span>(<span class="n">Completed</span> <span class="n">c</span>) {
        <span class="k">debug</span> <span class="n">writeln</span>(<span class="n">c</span>.<span class="n">msg</span>);
    }
    
    <span class="n">pc</span>.<span class="n">stop</span>;
    
    <span class="n">writefln</span>(<span class="s">&quot;N = %s, M = %s: %s ms&quot;</span>, <span class="n">N</span>, <span class="n">M</span>, <span class="n">pc</span>.<span class="n">milliseconds</span>);
}

<span class="kt">void</span> <span class="n">main</span>() {
    <span class="n">benchmark</span>!(<span class="mi">1000</span>, <span class="mi">1000</span>);
    <span class="n">benchmark</span>!(<span class="mi">10000</span>, <span class="mi">1000</span>);
    <span class="n">benchmark</span>!(<span class="mi">1000</span>, <span class="mi">10000</span>);
    <span class="n">benchmark</span>!(<span class="mi">10000</span>, <span class="mi">10000</span>);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9266/addtag/" class="addtag" id="addtag_9266">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/D2.030/">D2.030</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9266/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9266/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9266"
  >-</span><span
  class="button yellow"
  id="rating_z_9266"
  >0</span><span 
  class="button green"
  id="rating_p_9266"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9266/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9267">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9267/">#9267</a>(<script language="JavaScript">print_time(new Date("2009/07/01 00:00 GMT"));</script><noscript>2009/07/01 00:00 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>M = 1000 で固定して N を 100～10000 で振ってみました。2.4GHz Core 2 Duo, Vista です。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre>| elapsedTime |
{1}, (5 to: 50 by: 5), (60 to: 100 by: 10) do: [:nn |
   Smalltalk garbageCollect.
   elapsedTime := [
      | numNodes numMsgs firstMailbox neighborMailbox |
      numNodes := nn * 100.
      numMsgs := 1000.
      firstMailbox := neighborMailbox := OrderedCollection new.

      (1 to: numNodes) do: [:idx |
         | myMailbox semaphore |
         myMailbox := neighborMailbox.
         neighborMailbox := (idx = numNodes) not
            ifTrue: [OrderedCollection new]
            ifFalse: [firstMailbox].
         semaphore := Semaphore new.

         [  | mutex numUnsent |
            mutex := Semaphore forMutualExclusion.
            numUnsent := numMsgs.
            [numUnsent &gt; 0] whileTrue: [
               mutex critical: [
                  myMailbox ifNotEmpty: [
                     &quot;Transcript cr; show: (&#39;Pid = {1}, M = {2}&#39;
                        format: {Processor activeProcess name. numUnsent}).&quot;
                     numUnsent := numUnsent - 1.
                     myMailbox removeFirst.
                     neighborMailbox add: #message]].
               Processor yield].
            (idx = numNodes) ifTrue: [semaphore signal]] fixTemps fork].

      firstMailbox add: #message.
      semaphore wait] timeToRun.

   World findATranscript: nil.
   Transcript cr; show: (&#39;N = {1}, M = {2}; elapsed time = {3} milliseconds&#39;
      format:  {numNodes. numMsgs. elapsedTime})]

&quot;=&gt; 
N = 100, M = 1000; elapsed time = 276 milliseconds
N = 500, M = 1000; elapsed time = 1661 milliseconds
N = 1000, M = 1000; elapsed time = 3317 milliseconds
N = 1500, M = 1000; elapsed time = 5495 milliseconds
N = 2000, M = 1000; elapsed time = 7394 milliseconds
N = 2500, M = 1000; elapsed time = 9482 milliseconds
N = 3000, M = 1000; elapsed time = 11590 milliseconds
N = 3500, M = 1000; elapsed time = 13526 milliseconds
N = 4000, M = 1000; elapsed time = 15473 milliseconds
N = 4500, M = 1000; elapsed time = 19731 milliseconds
N = 5000, M = 1000; elapsed time = 19566 milliseconds
N = 6000, M = 1000; elapsed time = 23861 milliseconds
N = 7000, M = 1000; elapsed time = 28079 milliseconds
N = 8000, M = 1000; elapsed time = 31738 milliseconds
N = 9000, M = 1000; elapsed time = 36308 milliseconds
N = 10000, M = 1000; elapsed time = 40090 milliseconds &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9267/addtag/" class="addtag" id="addtag_9267">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9267/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9267/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9267"
  >-</span><span
  class="button yellow"
  id="rating_z_9267"
  >0</span><span 
  class="button green"
  id="rating_p_9267"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9267/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9268">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/994/" target="_top">creeper</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9268/">#9268</a>(<script language="JavaScript">print_time(new Date("2009/07/01 01:44 GMT"));</script><noscript>2009/07/01 01:44 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>BegenInvokeで。
すごく遅いです

WinXP SP3 32bit
C2Q9300
N = 100 M = 100: 306ms
N = 1000 M = 100: 3149ms
N = 100 M = 1000: 3211ms
N = 1000 M = 1000: 32135ms</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">doukaku271</span>
<span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">benchmark</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="m">100</span><span class="p">);</span>
            <span class="n">benchmark</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span> <span class="m">100</span><span class="p">);</span>
            <span class="n">benchmark</span><span class="p">(</span><span class="m">100</span><span class="p">,</span> <span class="m">1000</span><span class="p">);</span>
            <span class="n">benchmark</span><span class="p">(</span><span class="m">1000</span><span class="p">,</span> <span class="m">1000</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">benchmark</span><span class="p">(</span><span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="kt">int</span> <span class="n">M</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">Node</span><span class="p">[]</span> <span class="n">n</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">();</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">].</span><span class="n">Next</span> <span class="p">=</span> <span class="n">n</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
            <span class="n">n</span><span class="p">[</span><span class="n">N</span><span class="p">-</span><span class="m">1</span><span class="p">].</span><span class="n">Next</span> <span class="p">=</span> <span class="n">n</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
            <span class="n">EventWaitHandle</span> <span class="n">ev</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ManualResetEvent</span><span class="p">(</span><span class="k">false</span><span class="p">);</span>
            <span class="n">Message</span> <span class="n">msg</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Message</span><span class="p">(</span><span class="s">&quot;msg&quot;</span><span class="p">,</span> <span class="n">N</span> <span class="p">*</span> <span class="n">M</span><span class="p">,</span> <span class="n">ev</span><span class="p">);</span>
            <span class="n">Stopwatch</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stopwatch</span><span class="p">();</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
            <span class="n">n</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Post</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
            <span class="n">ev</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
            <span class="n">sw</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;N = {0} M = {1}: {2}ms&quot;</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">,</span> <span class="n">sw</span><span class="p">.</span><span class="n">ElapsedMilliseconds</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">class</span> <span class="nc">Message</span>
    <span class="k">{</span>
        <span class="k">public</span> <span class="k">static</span> <span class="n">Message</span> <span class="n">EXITMESSAGE</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Message</span><span class="p">(</span><span class="k">null</span><span class="p">,</span> <span class="kt">int</span><span class="p">.</span><span class="n">MaxValue</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>

        <span class="k">public</span> <span class="kt">object</span> <span class="n">msg</span><span class="p">;</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">ttl</span><span class="p">;</span>
        <span class="k">public</span> <span class="n">EventWaitHandle</span> <span class="n">ev</span><span class="p">;</span>
        <span class="k">public</span> <span class="nf">Message</span><span class="p">(</span><span class="kt">object</span> <span class="n">msg</span><span class="p">,</span> <span class="kt">int</span> <span class="n">ttl</span><span class="p">,</span> <span class="n">EventWaitHandle</span> <span class="n">ev</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="k">this</span><span class="p">.</span><span class="n">msg</span> <span class="p">=</span> <span class="n">msg</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="n">ttl</span> <span class="p">=</span> <span class="n">ttl</span><span class="p">;</span>
            <span class="k">this</span><span class="p">.</span><span class="n">ev</span> <span class="p">=</span> <span class="n">ev</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">ev</span><span class="p">!=</span><span class="k">null</span><span class="p">)</span> <span class="n">ev</span><span class="p">.</span><span class="n">Reset</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;[msg:{0} ttl:{1}]&quot;</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">ttl</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">class</span> <span class="nc">Node</span>
    <span class="k">{</span>
        <span class="k">static</span> <span class="kt">int</span> <span class="n">sid</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="kt">int</span> <span class="n">id</span> <span class="p">=</span> <span class="n">sid</span><span class="p">++;</span>
        <span class="n">Node</span> <span class="n">next</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

        <span class="k">public</span> <span class="nf">Node</span><span class="p">()</span>
        <span class="k">{</span>
            <span class="n">messageDelegate</span> <span class="p">=</span> <span class="k">new</span> <span class="n">messageDelegateT</span><span class="p">(</span><span class="n">post</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="k">public</span> <span class="n">Node</span> <span class="n">Next</span>
        <span class="k">{</span>
            <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">next</span><span class="p">;</span> <span class="k">}</span>
            <span class="k">set</span> <span class="k">{</span> <span class="n">next</span> <span class="p">=</span> <span class="n">value</span><span class="p">;</span> <span class="k">}</span>
        <span class="k">}</span>

        <span class="k">void</span> <span class="nf">post</span><span class="p">(</span><span class="n">Message</span> <span class="n">msg</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="c">//Console.WriteLine(&quot;{0}: {1}&quot;, id, message);</span>
            <span class="k">if</span> <span class="p">(--</span><span class="n">msg</span><span class="p">.</span><span class="n">ttl</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">ev</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">msg</span><span class="p">.</span><span class="n">ev</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
            <span class="k">}</span>
            <span class="k">else</span>
            <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">next</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="n">next</span><span class="p">.</span><span class="n">Post</span><span class="p">(</span><span class="n">msg</span><span class="p">);</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="k">delegate</span> <span class="k">void</span> <span class="n">messageDelegateT</span><span class="p">(</span><span class="n">Message</span> <span class="n">msg</span><span class="p">);</span>
        <span class="n">messageDelegateT</span> <span class="n">messageDelegate</span><span class="p">;</span>
        <span class="k">public</span> <span class="k">void</span> <span class="nf">Post</span><span class="p">(</span><span class="n">Message</span> <span class="n">msg</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">messageDelegate</span><span class="p">.</span><span class="n">BeginInvoke</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="k">null</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9268/addtag/" class="addtag" id="addtag_9268">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9268/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9268/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9268"
  >-</span><span
  class="button yellow"
  id="rating_z_9268"
  >0</span><span 
  class="button green"
  id="rating_p_9268"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9268/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9269">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/755/" target="_top">athos</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9269/">#9269</a>(<script language="JavaScript">print_time(new Date("2009/07/01 04:02 GMT"));</script><noscript>2009/07/01 04:02 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffdf;">0/2=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ノードの実現方法に制限はないようなので、ノードをクロージャ、
メッセージの送信を手続き呼び出しとします :-)
ノードの数を決め打ちでなく、実行時に決まるようにするとちょっと
汚くなっちゃいますが、出力さえしなければかなり高速です。

N = 10000, M = 10000 で 6.50s くらいです。
$ time ./doukaku271.scm 10000 10000
./doukaku271.scm 10000 10000  6.42s user 0.05s system 97% cpu 6.619 total
$</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre><span class="o">#</span><span class="nv">!/usr/bin/env</span> <span class="nv">gosh</span>

<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>

<span class="p">(</span><span class="nf">define-macro</span> <span class="p">(</span><span class="nf">define-nodes</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">p</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
            <span class="o">#</span><span class="c1">;`(format #t &quot;~a: ~a~%&quot; &#39;,x msg)</span>
            <span class="no">#f</span><span class="p">)</span> 
    <span class="o">`</span><span class="p">(</span><span class="nf">begin</span>
       <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">N0</span> <span class="nv">msg</span> <span class="nv">m</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">= </span><span class="nv">m</span> <span class="mi">0</span><span class="p">)</span>
           <span class="o">,</span><span class="p">(</span><span class="nf">p</span> <span class="ss">&#39;N0</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">N1</span> <span class="nv">msg</span> <span class="p">(</span><span class="nb">- </span><span class="nv">m</span> <span class="mi">1</span><span class="p">))))</span>
       <span class="o">,@</span><span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">i</span><span class="p">)</span>
                <span class="p">(</span><span class="k">let </span><span class="p">(</span><span class="err">[</span><span class="nv">self</span> <span class="p">(</span><span class="nb">string-&gt;symbol </span><span class="o">#`</span><span class="s">&quot;N,|i|&quot;</span><span class="p">)</span><span class="err">]</span>
                      <span class="err">[</span><span class="nv">next</span> <span class="p">(</span><span class="nb">string-&gt;symbol </span><span class="o">#`</span><span class="s">&quot;N,(remainder (+ i 1) n)&quot;</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
                  <span class="o">`</span><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="o">,</span><span class="nv">self</span> <span class="nv">msg</span> <span class="nv">m</span><span class="p">)</span>
                     <span class="o">,</span><span class="p">(</span><span class="nf">p</span> <span class="nv">self</span><span class="p">)</span>
                     <span class="p">(</span><span class="o">,</span><span class="nv">next</span> <span class="nv">msg</span> <span class="nv">m</span><span class="p">))))</span>
              <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">1</span><span class="p">)))))</span>

<span class="p">(</span><span class="nb">eval </span><span class="o">`</span><span class="p">(</span><span class="nf">define-nodes</span> <span class="o">,</span><span class="p">(</span><span class="nb">string-&gt;number </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">*argv*</span><span class="p">)))</span>
      <span class="p">(</span><span class="nf">current-module</span><span class="p">))</span>

<span class="p">(</span><span class="nf">N0</span> <span class="s">&quot;Hello, world!&quot;</span> <span class="p">(</span><span class="nb">string-&gt;number </span><span class="p">(</span><span class="nb">car </span><span class="nv">*argv*</span><span class="p">)))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9269/addtag/" class="addtag" id="addtag_9269">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9269/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9269/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffdf;"
  >0/2=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9269"
  >-</span><span
  class="button yellow"
  id="rating_z_9269"
  >0</span><span 
  class="button green"
  id="rating_p_9269"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9269/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9271">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/1045/" target="_top">ワサビ</a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9271/">#9271</a>(<script language="JavaScript">print_time(new Date("2009/07/01 13:09 GMT"));</script><noscript>2009/07/01 13:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  MailboxProcessor&nbsp;を使用して実装しました。<br/>m&nbsp;=&nbsp;1000&nbsp;で固定、n&nbsp;=&nbsp;100,&nbsp;1000,&nbsp;10000&nbsp;の場合のベンチマークをとっています。<br/><br/>環境：Core2Quad&nbsp;2.5GHz,&nbsp;Windows&nbsp;Vista&nbsp;32bit<br/><br/>&gt;&nbsp;benchmark&nbsp;100&nbsp;1000&nbsp;|&gt;&nbsp;printfn&nbsp;"%d&nbsp;ms";;<br/>825&nbsp;ms<br/>val&nbsp;it&nbsp;:&nbsp;unit&nbsp;=&nbsp;()<br/>&gt;&nbsp;benchmark&nbsp;1000&nbsp;1000&nbsp;|&gt;&nbsp;printfn&nbsp;"%d&nbsp;ms";;<br/>7770&nbsp;ms<br/>val&nbsp;it&nbsp;:&nbsp;unit&nbsp;=&nbsp;()<br/>&gt;&nbsp;benchmark&nbsp;10000&nbsp;1000&nbsp;|&gt;&nbsp;printfn&nbsp;"%d&nbsp;ms";;<br/>113861&nbsp;ms<br/>val&nbsp;it&nbsp;:&nbsp;unit&nbsp;=&nbsp;()
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">#</span><span class="n">light</span>

<span class="kr">open</span> <span class="n">System</span>
<span class="kr">open</span> <span class="n">System</span><span class="k">.</span><span class="n">Diagnostics</span>
<span class="kr">open</span> <span class="n">System</span><span class="k">.</span><span class="n">Threading</span>

<span class="kr">type</span> <span class="n">Node</span><span class="k">(</span><span class="n">next</span><span class="k">,</span> <span class="n">m</span><span class="k">,</span> <span class="n">eventwait</span> <span class="k">:</span> <span class="n">AutoResetEvent</span><span class="k">)</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">mailbox</span> <span class="k">=</span>
        <span class="n">MailboxProcessor</span><span class="k">.</span><span class="n">Start</span><span class="k">(</span><span class="kr">fun</span> <span class="n">inbox</span> <span class="k">-&gt;</span>
            <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">l</span> <span class="k">=</span>
                <span class="n">async</span> <span class="k">{</span>
                    <span class="kr">let</span><span class="o">!</span> <span class="k">(</span><span class="n">nodes</span> <span class="k">:</span> <span class="n">Node</span><span class="k">[])</span> <span class="k">=</span> <span class="n">inbox</span><span class="k">.</span><span class="n">Receive</span><span class="k">()</span>
                    <span class="n">nodes</span><span class="k">.[</span><span class="n">next</span><span class="k">].</span><span class="n">Post</span><span class="k">(</span><span class="n">nodes</span><span class="k">)</span>
                    <span class="kr">if</span> <span class="n">l</span> <span class="k">&lt;</span> <span class="n">m</span> <span class="kr">then</span>
                        <span class="n">return</span><span class="o">!</span> <span class="n">loop</span> <span class="k">(</span><span class="n">l</span> <span class="k">+</span> <span class="mi">1</span><span class="k">)</span>
                    <span class="kr">else</span>
                        <span class="n">eventwait</span><span class="k">.</span><span class="n">Set</span><span class="k">()</span> <span class="k">|&gt;</span> <span class="n">ignore</span>
                        <span class="n">return</span> <span class="k">()</span>
                <span class="k">}</span>
            <span class="n">loop</span> <span class="mi">0</span>
        <span class="k">)</span>
    <span class="n">member</span> <span class="n">this</span><span class="k">.</span><span class="n">Post</span><span class="k">(</span><span class="n">msg</span><span class="k">)</span> <span class="k">=</span> <span class="n">mailbox</span><span class="k">.</span><span class="n">Post</span><span class="k">(</span><span class="n">msg</span><span class="k">)</span>

<span class="kr">let</span> <span class="n">benchmark</span> <span class="n">n</span> <span class="n">m</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">eventwait</span> <span class="k">=</span> <span class="kr">new</span> <span class="n">AutoResetEvent</span><span class="k">(</span><span class="kr">false</span><span class="k">)</span>
    <span class="kr">let</span> <span class="n">nodes</span> <span class="k">=</span> <span class="k">[|</span><span class="kr">for</span> <span class="n">i</span> <span class="kr">in</span> <span class="mi">1</span><span class="k">..</span><span class="n">n</span> <span class="k">-&gt;</span> <span class="kr">new</span> <span class="n">Node</span><span class="k">(</span><span class="n">i</span> <span class="o">%</span> <span class="n">n</span><span class="k">,</span> <span class="n">m</span><span class="k">,</span> <span class="n">eventwait</span><span class="k">)|]</span>
    <span class="kr">let</span> <span class="n">stopwatch</span> <span class="k">=</span> <span class="n">Stopwatch</span><span class="k">.</span><span class="n">StartNew</span><span class="k">()</span>
    <span class="n">nodes</span><span class="k">.[</span><span class="mi">0</span><span class="k">].</span><span class="n">Post</span><span class="k">(</span><span class="n">nodes</span><span class="k">)</span>
    <span class="n">eventwait</span><span class="k">.</span><span class="n">WaitOne</span><span class="k">()</span> <span class="k">|&gt;</span> <span class="n">ignore</span>
    <span class="n">stopwatch</span><span class="k">.</span><span class="n">Stop</span><span class="k">()</span>
    <span class="n">stopwatch</span><span class="k">.</span><span class="n">ElapsedMilliseconds</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9271/addtag/" class="addtag" id="addtag_9271">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/F%23/">F#</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9271/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9271/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9271"
  >-</span><span
  class="button yellow"
  id="rating_z_9271"
  >0</span><span 
  class="button green"
  id="rating_p_9271"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9271/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9273">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9273/">#9273</a>(<script language="JavaScript">print_time(new Date("2009/07/01 18:44 GMT"));</script><noscript>2009/07/01 18:44 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>時間計測はお題22で作成したprofileを利用。時間の単位は秒です。
CPU PentiumIII M 532MHzで動作

*Main&gt; benchmark 1000 1000 -- 1000 nodes 1000 loops
0.456028 
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">Unsafe</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">CPUTime</span>

<span class="kr">type</span> <span class="n">Node</span> <span class="o">=</span> <span class="n">Message</span> <span class="o">-&gt;</span> <span class="n">Message</span>
<span class="kr">type</span> <span class="n">Message</span> <span class="o">=</span> <span class="p">()</span>

<span class="nv">node</span> <span class="o">::</span> <span class="n">Node</span>
<span class="nv">node</span> <span class="o">=</span> <span class="nv">id</span>

<span class="nv">link</span> <span class="o">::</span> <span class="n">Node</span> <span class="o">-&gt;</span> <span class="n">Node</span> <span class="o">-&gt;</span> <span class="n">Node</span>
<span class="nv">link</span> <span class="o">=</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span>

<span class="nv">message</span> <span class="o">::</span> <span class="n">Message</span>
<span class="nv">message</span> <span class="o">=</span> <span class="p">()</span>

<span class="nv">benchmark</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">()</span>
<span class="nv">benchmark</span> <span class="nv">n</span> <span class="nv">m</span> 
  <span class="o">=</span> <span class="nv">profile</span> <span class="o">$</span>
            <span class="p">(</span> <span class="nv">foldr1</span> <span class="nv">link</span> <span class="o">.</span> <span class="nv">take</span> <span class="nv">m</span>  <span class="c1">-- m周まわっておわりにする</span>
            <span class="o">$</span> <span class="nv">cycle</span> <span class="o">.</span> <span class="p">(</span><span class="o">:</span><span class="p">[])</span>         <span class="c1">-- 輪にする</span>
            <span class="o">$</span> <span class="nv">foldr1</span> <span class="nv">link</span>           <span class="c1">-- 連結</span>
            <span class="o">$</span> <span class="nv">replicate</span> <span class="nv">n</span> <span class="nv">node</span>      <span class="c1">-- n個のノード</span>
            <span class="p">)</span> <span class="nv">message</span>

<span class="c1">-- profile お題22で作成したもの</span>

<span class="nv">profile</span> <span class="o">::</span> <span class="nv">a</span> <span class="o">-&gt;</span> <span class="nv">a</span>
<span class="nv">profile</span> <span class="nv">e</span> 
 <span class="o">=</span> <span class="nv">unsafePerformIO</span>
 <span class="o">$</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">s</span> <span class="o">&lt;-</span> <span class="nv">getCPUTime</span>
      <span class="p">;</span> <span class="nv">r</span> <span class="o">&lt;-</span> <span class="nv">return</span> <span class="o">$!</span> <span class="nv">e</span>
      <span class="p">;</span> <span class="nv">e</span> <span class="o">&lt;-</span> <span class="nv">getCPUTime</span>
      <span class="p">;</span> <span class="nv">putStrLn</span> <span class="o">$</span> <span class="nv">show</span> <span class="o">$</span> <span class="nv">fromInteger</span> <span class="p">(</span><span class="nv">e</span><span class="o">-</span><span class="nv">s</span><span class="p">)</span> <span class="o">/</span> <span class="nv">fromInteger</span> <span class="p">(</span><span class="mi">10</span><span class="o">^</span><span class="mi">12</span><span class="p">)</span>
      <span class="p">;</span> <span class="nv">return</span> <span class="nv">r</span>
      <span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9273/addtag/" class="addtag" id="addtag_9273">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/System.CPUTime/">System.CPUTime</a>
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/System.IO.Unsafe/">System.IO.Unsafe</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9273/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9273/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9273"
  >-</span><span
  class="button yellow"
  id="rating_z_9273"
  >0</span><span 
  class="button green"
  id="rating_p_9273"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9273/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9274">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/242/" target="_top">lufia</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9274/">#9274</a>(<script language="JavaScript">print_time(new Date("2009/07/01 18:45 GMT"));</script><noscript>2009/07/01 18:45 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>チャネルを使ってリングを表現しました。
計算時間に含めていないので数値には現れていませんが、
N=10000の場合、計算そのものより
プロセス生成(buildrings)に時間がかかります。

  100 times  1000 nodes    109 msec
 1000 times  1000 nodes    984 msec
 1000 times 10000 nodes  10609 msec
10000 times  1000 nodes   9547 msec
10000 times 10000 nodes 106313 msec</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</pre></td><td class="code"><div class="highlight"><pre>implement Bench;

include &quot;sys.m&quot;;
    sys: Sys;
include &quot;draw.m&quot;;
include &quot;lists.m&quot;;
    lists: Lists;

Bench: module
{
    init: fn(ctxt: ref Draw-&gt;Context, argv: list of string);
};

Ring: adt
{
    cin, cout: chan of int;
};

N: con 10000;            # &gt;0
M: con 10000;

init(nil: ref Draw-&gt;Context, nil: list of string)
{
    sys = load Sys Sys-&gt;PATH;
    lists = load Lists &quot;/dis/lib/lists.dis&quot;;

    rings := buildrings(N);
    tick0 := sys-&gt;millisec();
    for(i := 0; i &lt; M; i++){
        (hd rings).cin &lt;- = i;
        &lt;- (hd rings).cout;
    }
    tick1 := sys-&gt;millisec();
    sys-&gt;print(&quot;%d times %d nodes %d msec\n&quot;, M, N, tick1-tick0);
    destroyrings(rings);
}

buildrings(n: int): list of ref Ring
{
    rings: list of ref Ring;
    for(i := 0; i &lt; n; i++)
        rings = lists-&gt;append(rings, ref Ring(nil, chan of int));
    last := lists-&gt;last(rings);
    for(p := rings; p != nil; p = tl p){
        (hd p).cin = last.cout;
        last = hd p;
    }

    for(p = rings; p != nil; p = tl p)
        spawn relay(hd p);
    return rings;
}

relay(r: ref Ring)
{
    while((n:=&lt;-r.cin) &gt;= 0)
        r.cout &lt;- = n;
}

destroyrings(rings: list of ref Ring)
{
    for(p := rings; p != nil; p = tl p)
        (hd p).cin &lt;- = -1;
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9274/addtag/" class="addtag" id="addtag_9274">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Limbo/">Limbo</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9274/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9274/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9274"
  >-</span><span
  class="button yellow"
  id="rating_z_9274"
  >0</span><span 
  class="button green"
  id="rating_p_9274"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9274/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9276">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/755/" target="_top">athos</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9276/">#9276</a>(<script language="JavaScript">print_time(new Date("2009/07/01 22:03 GMT"));</script><noscript>2009/07/01 22:03 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>#9269 は不評だったようなので、継続でコルーチンっぽいものを作って
#9266 を参考にしてやってみました。

継続を生成するのにかなり時間がかかっているようです。
$ time ./doukaku271.scm 10000 1000
./doukaku271.scm 10000 1000  43.23s user 0.36s system 98% cpu 44.303 total
$</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="o">#</span><span class="nv">!/usr/bin/env</span> <span class="nv">gosh</span>

<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">queue</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">parameter</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">*nodes*</span> <span class="p">(</span><span class="nf">make-parameter</span> <span class="no">#f</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">yield</span> <span class="nv">msg</span> <span class="nv">hop</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let/cc</span> <span class="nv">cc</span>
    <span class="p">(</span><span class="nf">enqueue!</span> <span class="p">(</span><span class="nf">*nodes*</span><span class="p">)</span> <span class="nv">cc</span><span class="p">)</span>
    <span class="p">((</span><span class="nf">dequeue!</span> <span class="p">(</span><span class="nf">*nodes*</span><span class="p">))</span> <span class="nv">msg</span> <span class="nv">hop</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-node</span> <span class="nv">name</span><span class="p">)</span>
  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">msg</span> <span class="nv">hop</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">(</span><span class="err">[</span><span class="nv">msg</span> <span class="nv">msg</span><span class="err">]</span> <span class="err">[</span><span class="nv">hop</span> <span class="nv">hop</span><span class="err">]</span><span class="p">)</span>
      <span class="p">(</span><span class="k">cond </span><span class="err">[</span><span class="p">(</span><span class="nb">= </span><span class="nv">hop</span> <span class="mi">0</span><span class="p">)</span> <span class="no">#f</span><span class="err">]</span>
            <span class="err">[</span><span class="nv">else</span>
             <span class="o">#</span><span class="c1">;(format #t &quot;~a: ~a~%&quot; name msg)</span>
             <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">msg</span> <span class="nv">hop</span><span class="p">)</span> <span class="p">(</span><span class="nf">yield</span> <span class="nv">msg</span> <span class="p">(</span><span class="nb">- </span><span class="nv">hop</span> <span class="mi">1</span><span class="p">))</span>
               <span class="p">(</span><span class="nf">loop</span> <span class="nv">msg</span> <span class="nv">hop</span><span class="p">))</span><span class="err">]</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">init-nodes</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">*nodes*</span> <span class="p">(</span><span class="nf">make-queue</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">dotimes</span> <span class="p">(</span><span class="nf">i</span> <span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">enqueue!</span> <span class="p">(</span><span class="nf">*nodes*</span><span class="p">)</span> <span class="p">(</span><span class="nf">make-node</span> <span class="o">#`</span><span class="s">&quot;N,|i|&quot;</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">run</span> <span class="nv">msg</span> <span class="nv">n</span> <span class="nv">m</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">init-nodes</span> <span class="nv">n</span><span class="p">)</span>
  <span class="p">((</span><span class="nf">dequeue!</span> <span class="p">(</span><span class="nf">*nodes*</span><span class="p">))</span> <span class="nv">msg</span> <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">m</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">run</span> <span class="s">&quot;Hello, world!&quot;</span>
       <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="p">(</span><span class="nb">car </span><span class="nv">*argv*</span><span class="p">))</span>
       <span class="p">(</span><span class="nf">x-&gt;integer</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">*argv*</span><span class="p">)))</span>
  <span class="mi">0</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9276/addtag/" class="addtag" id="addtag_9276">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9276/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9276/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9276"
  >-</span><span
  class="button yellow"
  id="rating_z_9276"
  >0</span><span 
  class="button green"
  id="rating_p_9276"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9276/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9277">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/759/" target="_top">egtra</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9277/">#9277</a>(<script language="JavaScript">print_time(new Date("2009/07/02 05:50 GMT"));</script><noscript>2009/07/02 05:50 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Boost.Asioでやりました。bindとfunctionの多用が速度を落としている原因の1つにあると思います。</p>
<table border="1" class="docutils">
<colgroup>
<col width="28%" />
<col width="28%" />
<col width="44%" />
</colgroup>
<thead valign="bottom">
<tr><th class="head">M</th>
<th class="head">N</th>
<th class="head">時間(秒)</th>
</tr>
</thead>
<tbody valign="top">
<tr><td>1000</td>
<td>1000</td>
<td>1.698</td>
</tr>
<tr><td>10000</td>
<td>1000</td>
<td>16.997</td>
</tr>
<tr><td>1000</td>
<td>10000</td>
<td>16.910</td>
</tr>
<tr><td>10000</td>
<td>10000</td>
<td>171.371</td>
</tr>
</tbody>
</table>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;boost/function.hpp&gt;</span>
<span class="cp">#include &lt;boost/bind.hpp&gt;</span>
<span class="cp">#include &lt;boost/ref.hpp&gt;</span>
<span class="cp">#include &lt;boost/optional.hpp&gt;</span>
<span class="cp">#include &lt;boost/timer.hpp&gt;</span>
<span class="cp">#include &lt;boost/asio.hpp&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>

<span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="p">;</span>

<span class="c">// 1番目のノード: 何周目かのカウント、経過時刻の表示を担当</span>
<span class="k">class</span> <span class="nc">first</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">typedef</span> <span class="kt">void</span> <span class="n">result_type</span><span class="p">;</span>
    <span class="n">first</span><span class="p">(</span><span class="kt">int</span> <span class="n">m</span><span class="p">)</span> <span class="o">:</span> <span class="n">count</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="p">{}</span>
    <span class="kt">void</span> <span class="k">operator</span> <span class="p">()(</span><span class="n">io_service</span><span class="o">&amp;</span> <span class="n">ios</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">next</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">id</span> <span class="o">==</span> <span class="n">last_id</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="o">++</span><span class="n">cur</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">cur</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">t</span><span class="p">.</span><span class="n">elapsed</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;秒かかりました&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">last_id</span> <span class="o">=</span> <span class="n">id</span><span class="p">;</span>
            <span class="n">t</span><span class="p">.</span><span class="n">restart</span><span class="p">();</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">ios</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">id</span><span class="p">));</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">last_id</span><span class="p">;</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">timer</span> <span class="n">t</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cur</span><span class="p">;</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span>

    <span class="n">first</span><span class="p">(</span><span class="k">const</span> <span class="n">first</span><span class="o">&amp;</span><span class="p">);</span>
    <span class="n">first</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">=</span><span class="p">(</span><span class="k">const</span> <span class="n">first</span><span class="o">&amp;</span><span class="p">);</span>
<span class="p">};</span>

<span class="c">// 2からN番目までのノード</span>
<span class="kt">void</span> <span class="n">pass_to_next</span><span class="p">(</span><span class="n">io_service</span><span class="o">&amp;</span> <span class="n">ios</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">next</span><span class="p">,</span> <span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ios</span><span class="p">.</span><span class="n">post</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">next</span><span class="p">,</span> <span class="n">id</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">using</span> <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">;</span>
    <span class="n">io_service</span> <span class="n">ios</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">first</span> <span class="n">f</span><span class="p">(</span><span class="n">m</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">void</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ring</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
    <span class="n">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">boost</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">f</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">ios</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">cref</span><span class="p">(</span><span class="n">ring</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span> <span class="n">_1</span><span class="p">));</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">ring</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">bind</span><span class="p">(</span><span class="n">pass_to_next</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">ios</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">cref</span><span class="p">(</span><span class="n">ring</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]),</span> <span class="n">_1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">ring</span><span class="p">[</span><span class="n">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">bind</span><span class="p">(</span><span class="n">pass_to_next</span><span class="p">,</span> <span class="n">boost</span><span class="o">::</span><span class="n">ref</span><span class="p">(</span><span class="n">ios</span><span class="p">),</span> <span class="n">boost</span><span class="o">::</span><span class="n">cref</span><span class="p">(</span><span class="n">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">_1</span><span class="p">);</span>

    <span class="n">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">](</span><span class="mi">42</span><span class="p">);</span> <span class="c">// メッセージの送信開始</span>
    <span class="n">ios</span><span class="p">.</span><span class="n">run</span><span class="p">();</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9277/addtag/" class="addtag" id="addtag_9277">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Boost/">Boost</a>
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Boost.Asio/">Boost.Asio</a>
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Boost1.39/">Boost1.39</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9277/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9277/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9277"
  >-</span><span
  class="button yellow"
  id="rating_z_9277"
  >0</span><span 
  class="button green"
  id="rating_p_9277"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9277/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9296">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/100/" target="_top">konn</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9296/">#9296</a>(<script language="JavaScript">print_time(new Date("2009/07/07 08:48 GMT"));</script><noscript>2009/07/07 08:48 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>とりあえず、Rubyで書いてみました。</p>
<p>しかし愚直に書いたので、あっと云う間にStack Overflow してしまいます……。むぅ。</p>
<p></p>
<p>$ time ruby1.9 ringnode.rb 100 77</p>
<p>ruby1.9 ringnode.rb 100 77  0.01s user 0.01s system 94% cpu 0.020 total</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Node</span>
  <span class="kp">attr_accessor</span> <span class="ss">:receiver</span>
  <span class="vc">@@insts</span> <span class="o">=</span> <span class="o">[]</span>
  
  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">start</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
    <span class="vc">@@insts</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">recv</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">count</span> <span class="o">*</span> <span class="vc">@@insts</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@id</span> <span class="o">=</span> <span class="vc">@@insts</span><span class="o">.</span><span class="n">size</span>
    <span class="vc">@@insts</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
    <span class="vc">@@insts</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">receiver</span> <span class="o">=</span> <span class="vc">@@insts</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
    <span class="vc">@@insts</span><span class="o">[-</span><span class="mi">2</span><span class="o">].</span><span class="n">receiver</span> <span class="o">=</span> <span class="vc">@@insts</span><span class="o">[-</span><span class="mi">1</span><span class="o">]</span> <span class="k">if</span> <span class="vc">@@insts</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;=</span> <span class="mi">2</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">recv</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">msg</span> <span class="k">if</span> <span class="n">count</span><span class="o">.</span><span class="n">zero?</span>
    <span class="vi">@receiver</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">count</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">m</span><span class="p">,</span> <span class="n">n</span> <span class="p">,</span><span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">)</span>
<span class="n">n</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
<span class="no">Node</span><span class="o">.</span><span class="n">start</span><span class="p">(</span><span class="s2">&quot;Hi, &quot;</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9296/addtag/" class="addtag" id="addtag_9296">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Ruby/">Ruby</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9296/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9296/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9296"
  >-</span><span
  class="button yellow"
  id="rating_z_9296"
  >0</span><span 
  class="button green"
  id="rating_p_9296"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9296/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9341">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/1026/" target="_top">airhead</a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9341/">#9341</a>(<script language="JavaScript">print_time(new Date("2009/07/11 09:19 GMT"));</script><noscript>2009/07/11 09:19 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Pen4 2.53Ghzのにおいて1000ノード1000周をやったとき、Firefox 3.5で1400-1700ms、Operaで600msちょいでした。</p>
<p>蛇足ですが、コメントアウト部はノード網羅の確認用。alertで表示できる文字数には限りがあるし、Firefoxでは最大10000文字で切り捨てるようなので、それにあわせてm,nを減らす必要があります。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100617092512/http://slashdot.jp/~airhead/journal/481544">memo: リングノードベンチマーク</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></td><td class="code"><div class="highlight"><pre><span class="k">var</span> <span class="nx">send</span><span class="o">;</span>
<span class="k">var</span> <span class="nx">Node</span> <span class="o">=</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">relayDest</span><span class="o">,</span> <span class="nx">relayMsg</span><span class="o">;</span>
    <span class="nx">send</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">relayDest</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        <span class="nx">relayMsg</span> <span class="o">=</span> <span class="nx">msg</span><span class="o">;</span> 
        <span class="k">while</span> <span class="p">(</span><span class="nx">relayDest</span><span class="p">.</span><span class="nx">receive</span><span class="p">(</span><span class="nx">relayMsg</span><span class="p">));</span>
        <span class="k">return</span> <span class="nx">relayMsg</span><span class="o">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="k">function</span> <span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">id</span><span class="o">++;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">dest</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">receive</span> <span class="o">=</span> <span class="k">function</span> <span class="p">(</span><span class="nx">msg</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">==</span> <span class="s2">&quot;number&quot;</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="c">//                msg += &quot;\n&quot; + this.count + &quot;: &quot;;</span>
                <span class="k">this</span><span class="p">.</span><span class="nx">count</span><span class="o">--;</span>
            <span class="p">}</span>
<span class="c">//            msg += this.id + &quot; &quot;;</span>
            <span class="nx">relayDest</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">dest</span><span class="o">;</span>
            <span class="nx">relayMsg</span> <span class="o">=</span> <span class="nx">msg</span><span class="o">;</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="p">};</span>
    <span class="p">};</span>
<span class="p">}();</span>
<span class="nx">Node</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">send</span> <span class="o">=</span> <span class="nx">send</span><span class="o">;</span>

<span class="k">var</span> <span class="nx">n</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">,</span> <span class="nx">m</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>

<span class="k">var</span> <span class="nx">ring</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">();</span>
<span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ring</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">();</span>
    <span class="nx">ring</span><span class="p">[</span><span class="nx">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nx">dest</span> <span class="o">=</span> <span class="nx">ring</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
<span class="p">}</span>
<span class="nx">ring</span><span class="p">[</span><span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span><span class="p">].</span><span class="nx">dest</span> <span class="o">=</span> <span class="nx">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="nx">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">count</span> <span class="o">=</span> <span class="nx">m</span><span class="o">;</span>

<span class="k">var</span> <span class="nx">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
<span class="k">var</span> <span class="nx">lastMsg</span> <span class="o">=</span> <span class="nx">ring</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">send</span><span class="p">(</span><span class="s2">&quot;read me in turn.&quot;</span><span class="p">);</span>
<span class="nx">t</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">()</span> <span class="o">-</span> <span class="nx">t</span><span class="o">;</span>

<span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;elapsed time:\n&quot;</span> <span class="o">+</span> <span class="nx">t</span> <span class="o">+</span> <span class="s2">&quot;[ms]\n\nmessage:\n&quot;</span> <span class="o">+</span> <span class="nx">lastMsg</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9341/addtag/" class="addtag" id="addtag_9341">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9341/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9341/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9341"
  >-</span><span
  class="button yellow"
  id="rating_z_9341"
  >0</span><span 
  class="button green"
  id="rating_p_9341"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9341/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9351">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/913/" target="_top">nattou_curry</a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9351/">#9351</a>(<script language="JavaScript">print_time(new Date("2009/07/13 14:05 GMT"));</script><noscript>2009/07/13 14:05 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Threadにて実装。</p>
<p>Pentium M 1.30 GHzで、1000ノード1000周を実行したところ、約30,000msかかりました。</p>
<p>Threadで実装したせいか、時間がかかりすぎています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">RingNodeBenchMark</span> <span class="o">{</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span> <span class="n">String</span><span class="o">[]</span> <span class="n">args</span> <span class="o">)</span> <span class="o">{</span>
        
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>    <span class="c">// ノードの数</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>    <span class="c">// 処理回数</span>

        <span class="c">///////////////////////////////////////////////////////////////////////</span>
        <span class="c">// 前処理</span>
        <span class="c">///////////////////////////////////////////////////////////////////////</span>

        <span class="c">// ノードを作成する。</span>
        <span class="n">Node</span><span class="o">[]</span> <span class="n">nodes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">nodes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c">// ノードをリング上に繋げる。</span>
        <span class="n">nodes</span><span class="o">[</span><span class="n">nodes</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">].</span><span class="na">nextNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">nodes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">nextNode</span> <span class="o">=</span> <span class="n">nodes</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>
        <span class="o">}</span>

        <span class="c">// 各ノードのスレッドを開始する。</span>
        <span class="k">for</span> <span class="o">(</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nodes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span> <span class="o">)</span> <span class="o">{</span>
            <span class="n">nodes</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
        
        <span class="c">// 処理回数を先頭のノードに指定する。</span>
        <span class="n">nodes</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">max</span> <span class="o">=</span> <span class="mi">1000</span><span class="o">;</span>

        <span class="c">///////////////////////////////////////////////////////////////////////</span>
        <span class="c">// 主処理</span>
        <span class="c">///////////////////////////////////////////////////////////////////////</span>

        <span class="c">// 開始時刻を取得する。</span>
        <span class="n">Date</span> <span class="n">startTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>
        
        <span class="c">// 先頭のノードにメッセージを送信する。</span>
        <span class="n">nodes</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">interrupt</span><span class="o">();</span>
        
        <span class="c">// 先頭ノードが終了するまで待機する。</span>
        <span class="c">// なお、先頭ノードは、一定回数処理を実行した時点で終了する。</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">nodes</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="na">join</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span> <span class="n">InterruptedException</span> <span class="n">e</span> <span class="o">)</span> <span class="o">{}</span>

        <span class="c">// 終了時刻を取得する。</span>
        <span class="n">Date</span> <span class="n">endTime</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Date</span><span class="o">();</span>

        <span class="c">///////////////////////////////////////////////////////////////////////</span>
        <span class="c">// 後処理</span>
        <span class="c">///////////////////////////////////////////////////////////////////////</span>
        
        <span class="c">// 経過時間を計算する。</span>
        <span class="kt">long</span> <span class="n">result</span> <span class="o">=</span> <span class="n">endTime</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">startTime</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>
        
        <span class="c">// 経過時間を表示する。</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span> <span class="n">result</span> <span class="o">+</span> <span class="s">&quot; ms&quot;</span> <span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c">// ノード</span>
    <span class="c">// スレッドで実装する。</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Node</span> <span class="k">extends</span> <span class="n">Thread</span> <span class="o">{</span>
        
        <span class="n">Node</span> <span class="n">nextNode</span><span class="o">;</span>    <span class="c">// 次のノード</span>
        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>    <span class="c">// 処理回数</span>
        
        <span class="k">public</span> <span class="n">Node</span><span class="o">()</span> <span class="o">{</span>
            <span class="c">// ノードのスレッドはデーモンスレッドにする。</span>
            <span class="c">// この結果、メインスレッドが終了すると、ノードのスレッドは自動的に終了する。</span>
            <span class="n">setDaemon</span><span class="o">(</span> <span class="kc">true</span> <span class="o">);</span>
        <span class="o">}</span>
        
        <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
            
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c">// 処理回数のカウンタ。先頭ノードでのみ使用する。</span>
            
            <span class="k">while</span> <span class="o">(</span> <span class="kc">true</span> <span class="o">)</span> <span class="o">{</span>
                
                <span class="c">// メッセージを受信するまで待機する。</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="k">while</span> <span class="o">(</span> <span class="kc">true</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span> <span class="mi">1000</span> <span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span> <span class="n">InterruptedException</span> <span class="n">e</span> <span class="o">)</span> <span class="o">{</span>
                <span class="o">}</span>

                <span class="c">// 先頭ノードの場合、処理回数をカウントする。</span>
                <span class="k">if</span> <span class="o">(</span> <span class="n">max</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="n">max</span> <span class="o">)</span> <span class="o">{</span>
                        <span class="c">// 処理回数が一定の回数を超えた:</span>
                        
                        <span class="c">// 先頭ノードのスレッドを終了する。</span>
                        <span class="k">return</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="n">count</span> <span class="o">=</span> <span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
                
                <span class="c">// 次のノードにメッセージを送信する。</span>
                <span class="n">nextNode</span><span class="o">.</span><span class="na">interrupt</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9351/addtag/" class="addtag" id="addtag_9351">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9351/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9351/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9351"
  >-</span><span
  class="button yellow"
  id="rating_z_9351"
  >0</span><span 
  class="button green"
  id="rating_p_9351"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9351/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9362">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/1025/" target="_top">tanakahisateru</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9362/">#9362</a>(<script language="JavaScript">print_time(new Date("2009/07/13 18:54 GMT"));</script><noscript>2009/07/13 18:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>出題意図のなかで、ベンチマークというのがあまりピンときてないのですが、他の言語の例を見るに、こういうことなんでしょうか？</p>
<p>メッセージ送信でスタックを掘らないようにディスパッチループをつくり、メッセージを持っているノードを特定するコスト節約のために辞書を持つなどしています。…っていうような最適化やりだすと、何を計測するベンチマークテストなのかよくわからない、う～ん…</p>
<p>結果
terminated msg=1000000
8062ms</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">itertools</span><span class="o">,</span> <span class="nn">datetime</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">M</span> <span class="o">=</span> <span class="mi">1000</span>

<span class="c"># quit signal in maggage dispatch loop</span>
<span class="n">quit_mesage_posted</span> <span class="o">=</span> <span class="bp">False</span>

<span class="c"># nodes only which currently owns some message.</span>
<span class="n">active_nodes</span> <span class="o">=</span> <span class="n">set</span><span class="p">()</span>

<span class="c"># node</span>
<span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">msg</span><span class="p">:</span> <span class="bp">None</span> <span class="c"># set your function to this.</span>
    <span class="n">msgbox</span> <span class="o">=</span> <span class="bp">None</span>
    
    <span class="k">def</span> <span class="nf">post</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">msg</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">msgbox</span> <span class="o">=</span> <span class="n">msg</span>
        <span class="n">active_nodes</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        
    <span class="k">def</span> <span class="nf">consume</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">proc</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">msgbox</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">msgbox</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c"># creating N nodes.</span>
<span class="n">nodes</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">N</span><span class="p">):</span>
    <span class="n">nodes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">Node</span><span class="p">())</span>

<span class="c"># function generator for &quot;proc&quot; of Node object.</span>
<span class="c"># passed message are delegated to the next node with increment.</span>
<span class="k">def</span> <span class="nf">gen_send</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">break_at</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">break_at</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">lambda</span> <span class="n">msg</span><span class="p">:</span> <span class="n">node</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
            <span class="k">global</span> <span class="n">quit_mesage_posted</span>
            <span class="n">send</span><span class="o">.</span><span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="n">send</span><span class="o">.</span><span class="n">c</span> <span class="o">&lt;</span> <span class="n">break_at</span><span class="p">:</span>
                <span class="n">node</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">print</span> <span class="s">&quot;terminated with msg=</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">msg</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">quit_mesage_posted</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">send</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">return</span> <span class="n">send</span>

<span class="c"># building node chain for each (0, 1), (1, 2), (2, 3), ..., (N-2, N-1) pairs.</span>
<span class="k">for</span> <span class="n">node_from</span><span class="p">,</span> <span class="n">node_to</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">izip</span><span class="p">(</span><span class="n">nodes</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">nodes</span><span class="p">[</span><span class="mi">1</span><span class="p">:]):</span>
    <span class="n">node_from</span><span class="o">.</span><span class="n">proc</span> <span class="o">=</span> <span class="n">gen_send</span><span class="p">(</span><span class="n">node_to</span><span class="p">)</span>
<span class="c"># the last chain from N-1 to 0, (that would be tareminated at M times passed)</span>
<span class="n">nodes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">proc</span> <span class="o">=</span> <span class="n">gen_send</span><span class="p">(</span><span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">break_at</span><span class="o">=</span><span class="n">M</span><span class="p">)</span>

<span class="c">######################## start</span>
<span class="n">time_start</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>

<span class="c"># 1st message</span>
<span class="n">nodes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c"># message dispatch loop</span>
<span class="k">while</span> <span class="p">(</span><span class="ow">not</span> <span class="n">quit_mesage_posted</span><span class="p">):</span>
    <span class="n">acn</span> <span class="o">=</span> <span class="n">active_nodes</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
    <span class="n">active_nodes</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">acn</span><span class="p">:</span>
        <span class="n">n</span><span class="o">.</span><span class="n">consume</span><span class="p">()</span>

<span class="n">time_delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span> <span class="o">-</span> <span class="n">time_start</span><span class="p">)</span>
<span class="k">print</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s">ms&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">time_delta</span><span class="o">.</span><span class="n">seconds</span> <span class="o">*</span> <span class="mi">1000</span> <span class="o">+</span> <span class="n">time_delta</span><span class="o">.</span><span class="n">microseconds</span> <span class="o">/</span> <span class="mf">1000.0</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9362/addtag/" class="addtag" id="addtag_9362">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9362/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9362/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9362"
  >-</span><span
  class="button yellow"
  id="rating_z_9362"
  >0</span><span 
  class="button green"
  id="rating_p_9362"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100617092512/http://ja.doukaku.org/comment/9362/">
    1
    reply
  </a>

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9362/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment9363">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9363/">#9363</a>(<script language="JavaScript">print_time(new Date("2009/07/14 00:57 GMT"));</script><noscript>2009/07/14 00:57 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>このリングノードベンチというのは、Erlang のスレッドの“軽さ”を他の言語処理系と比較して誇示するためのベンチマークとして知られているものです。私は出題者ではありませんが、出題者の意図もそこからは大きく外れていないものと想像しています。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100617092512/http://muharem.wordpress.com/2007/07/31/erlang-vs-stackless-python-a-first-benchmark/">Erlang vs. Stackless python: a first benchmark</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9363/addtag/" class="addtag" id="addtag_9363">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9363"
  >-</span><span
  class="button yellow"
  id="rating_z_9363"
  >0</span><span 
  class="button green"
  id="rating_p_9363"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100617092512/http://ja.doukaku.org/comment/9362/"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100617092512/http://ja.doukaku.org/comment/9363/root/"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9363/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment9375">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/994/" target="_top">creeper</a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100617092512/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9375/">#9375</a>(<script language="JavaScript">print_time(new Date("2009/07/16 01:25 GMT"));</script><noscript>2009/07/16 01:25 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Squirrel 3.0で。
末尾再起でぐるぐると。
1行目をconst usethread = 1;にするとスレッドを使うようになります。
所要時間は10倍くらいになります。

結果：（usethread=0）
N:1000 M:1000 time:0.594s
N:1000 M:10000 time:5.859s
N:10000 M:1000 time:5.875s
N:10000 M:10000 time:58.766s</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="highlight"><pre>const usethread = 0;
class Node
{
    next = null
    function process(msg, ttl)
    {
        if (--ttl)
        {
            if (usethread) suspend(ttl);
            return next.process(msg, ttl);
        }
    }
};

function test(n, m)
{
    local nodes = array(n);
    nodes.apply(@(a) Node());
    nodes.reduce(@(a,b) a.next = b);
    nodes[n-1].next = nodes[0];
    local start = clock();
    if (usethread)
    {
        local t = newthread(@() nodes[0].process(&quot;hello&quot;, n*m));
        t.call();
        while(t.wakeup()) {}
    }
    else
    {
        nodes[0].process(&quot;hello&quot;, n*m);
    }
    print(format(&quot;N:%d M:%d time:%.3fs\n&quot;, n, m, clock()-start));
}

test(1000, 1000);
test(1000, 10000);
test(10000, 1000);
test(10000, 10000);
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9375/addtag/" class="addtag" id="addtag_9375">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/Squirrel/">Squirrel</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9375/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9375/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9375"
  >-</span><span
  class="button yellow"
  id="rating_z_9375"
  >0</span><span 
  class="button green"
  id="rating_p_9375"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9375/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9465">
  <p class="banner"><a href="/web/20100617092512/http://ja.doukaku.org/user/959/" target="_top">uehaj</a>

	
	&nbsp;
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9465/">#9465</a>(<script language="JavaScript">print_time(new Date("2009/08/09 14:01 GMT"));</script><noscript>2009/08/09 14:01 GMT</noscript>)
	
	
	
	[<a href="/web/20100617092512/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>Groovy用の並行処理記述DSL＆ライブラリであるところのGParallelizerで記述してみます。</p>
<p></p>
<p>GParallelizerは、Java 5のExecutorServiceやjsr166yなどをもとにして４つの並列計算モデル(Asynchronizer、Parallelizer、Actors、Dataflow Concurrency)を選んだり組み合わせたりして利用することができるわけであり、これらのモデルにはActor風な並行処理、データフロー処理などの特色があるわけですが、今回Event-driven actorsというのを用いてみました。</p>
<p></p>
<p>$ groovy ringnode.groovy</p>
<p>node9 received: 0</p>
<p>node8 received: 1</p>
<p>node7 received: 2</p>
<p>node6 received: 3</p>
<p>node5 received: 4</p>
<p>node4 received: 5</p>
<p>  :</p>
<p>node0 received: 99</p>
<p>node9 received: 100</p>
<p>661</p>
</div>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100617092512/http://code.google.com/p/gparallelizer/wiki/Actors">gparallelizer</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre>import org.gparallelizer.actors.pooledActors.AbstractPooledActor

class Node extends AbstractPooledActor {
  Node next
  def name
  def counter = 0
  def maxcount

  void act()
  {
    loop
    {
      react {
        println &quot;$name received: $it&quot;
        if (++counter &gt; maxcount) {
          stop(); return
        }
        if (next != null) {
          next.send it+1
        }
      }
    }
  }
}


NUMBER_OF_NODE = 10
MAX_CYCLE=10
node0 = node = new Node(name:&quot;node0&quot;, next:null, maxcount:MAX_CYCLE).start()
(1..&lt;NUMBER_OF_NODE).each {
  node = new Node(name:&quot;node$it&quot;, next:node, maxcount:MAX_CYCLE)
  node.start()
}
node0.next = node

start = System.currentTimeMillis()
node.send 0
node.join()
println (System.currentTimeMillis()-start)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100617092512/http://ja.doukaku.org/comment/9465/addtag/" class="addtag" id="addtag_9465">タグ</a>:
	
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/GParallelizer/">GParallelizer</a>
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/actor/">actor</a>
    
    <a href="/web/20100617092512/http://ja.doukaku.org/tag/groovy/">groovy</a>
    
	&nbsp;

	
      [<a href="/web/20100617092512/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9465/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100617092512/http://ja.doukaku.org/comment/9465/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9465"
  >-</span><span
  class="button yellow"
  id="rating_z_9465"
  >0</span><span 
  class="button green"
  id="rating_p_9465"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100617092512/http://ja.doukaku.org/271/reply_to/9465/">
  返信
  </a>]
  </div>
</div>
</div>




  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100617092512if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100617092512/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100617092512/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100617092512/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100617092512/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100617092512/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100617092512/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100617092512/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100617092512/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100617092512/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100617092512/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100617092512im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100617092512/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100617092512/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100617092512/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100617092512/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100617092512/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100617092512/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100617092512/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100617092512/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100617092512im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100617092512/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100617092512/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100617092512/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100617092512js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 9:25:12 Jun 17, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:17:16 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
