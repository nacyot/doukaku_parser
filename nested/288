
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
箱詰めパズルの判定
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20110408110729cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20110408110729cs_/http://ja.doukaku.org/static/style/style.css" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20110408110729cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<script src="/web/20110408110729js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20110408110729js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20110408110729js_/http://ja.doukaku.org/static/js/addtag.js" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20110408110729js_/http://ja.doukaku.org/static/js/utils.js" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app3.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/288\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "8";
var displayMonth = "Apr";
var displayYear = "2011";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/288/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20110408110729" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100605050054/http://ja.doukaku.org/288/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="5 Jun 2010"><strong>JUN</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 11:07:29 Apr 8, 2011">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20100605050054/http://ja.doukaku.org/288/nested/" title="5:00:54 Jun 5, 2010" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 11:07:29 Apr 8, 2011">8</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20100323223251/http://ja.doukaku.org/288/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="23 Mar 2010"><strong>2010</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 11:07:29 Apr 8, 2011">2011</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2012
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20110408110729*/http://ja.doukaku.org/288/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>4 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">17 Jan 10 - 8 Apr 11</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:-1:000000000000_2009:-1:000000000000_2010:-1:101001000000_2011:3:000100000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20110408110729/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20110408110729im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20110408110729/http://ja.doukaku.org/288/">箱詰めパズルの判定</a>
</h2>

    




<div class="comment" id="comment9755"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/893/" target="_top">ckbx</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9755/">#9755</a>(<script language="JavaScript">print_time(new Date("2009/12/28 10:41 GMT"));</script><noscript>2009/12/28 10:41 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>以下の積み木のうち4つを、
重複を含めてランダムに選びます。
このとき、それらを4×4の箱に
詰められるかどうかを判定してください。

1.
■■■■

2.
■■
■■

3.
■■■
　■

4.
■■■
■

5.
■■
　■■

例えば、{ 1, 1, 1, 1 }, { 2, 2, 2, 2 } は箱につめることができますが、
{ 1, 2, 2, 3 } は箱につめることができません。

余力のある方は、以下の値を求めてみてください。
・箱につめることができる積み木の組み合わせの総数
・上記総数を、異なる詰め方の個数別にカウント
　（箱の回転・裏返しで一致するものは同一視します）</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9755/addtag/" class="addtag" id="addtag_9755">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9755"
  >-</span><span
  class="button yellow"
  id="rating_z_9755"
  >0</span><span 
  class="button green"
  id="rating_p_9755"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://reply_to/9755/">
  返信
  </a>]
  </div>
</div>
</div>



  



<div class="indent">
<a href="/web/20110408110729/http://ja.doukaku.org/288/post_comment/">
コメントを投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20110408110729/http://ja.doukaku.org/288/flatten/">フラット表示</a> 
<a href="/web/20110408110729/http://ja.doukaku.org/288/">非表示</a> 


  
    




<div class="comment" id="comment9795"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9795/">#9795</a>(<script language="JavaScript">print_time(new Date("2010/01/05 09:27 GMT"));</script><noscript>2010/01/05 09:27 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>二次元配列とか使ってないです。
整数とビット演算だけでゴリゴリ処理してます。
Cに移植しようかどうしようか考え中。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217</pre></td><td class="code"><div class="highlight"><pre><span class="c">#coding:utf-8</span>

<span class="k">import</span> <span class="nn">copy</span>


<span class="k">class</span> <span class="nc">packField</span><span class="p">:</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">strToBitpattern</span><span class="p">(</span><span class="n">patternString</span><span class="p">):</span>
        <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">patternString</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&#39;x&#39;</span><span class="p">:</span>
                <span class="n">n</span> <span class="o">|=</span> <span class="mi">1</span>
                <span class="n">n</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span>
            <span class="k">elif</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&#39;_&#39;</span><span class="p">:</span>
                <span class="n">n</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">pass</span>

        <span class="k">while</span> <span class="n">n</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">n</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">n</span>

    <span class="k">def</span> <span class="nf">__init__</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">field</span> <span class="o">=</span> <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xxxxxx</span>
<span class="sd">                x____x</span>
<span class="sd">                x____x</span>
<span class="sd">                x____x</span>
<span class="sd">                x____x</span>
<span class="sd">                xxxxxx</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">block</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;I&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;O&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;T&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;Z&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;I&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
            <span class="sd">&#39;&#39;&#39;xxxx&#39;&#39;&#39;</span>
            <span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;I&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                x_____</span>
<span class="sd">                x_____</span>
<span class="sd">                x_____</span>
<span class="sd">                x_____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;O&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xx____</span>
<span class="sd">                xx____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;T&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                _x____</span>
<span class="sd">                xxx___</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;T&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xxx___</span>
<span class="sd">                _x____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;T&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                x_____</span>
<span class="sd">                xx____</span>
<span class="sd">                x_____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;T&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                _x____</span>
<span class="sd">                xx____</span>
<span class="sd">                _x____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                x_____</span>
<span class="sd">                x_____</span>
<span class="sd">                xx____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                _x____</span>
<span class="sd">                _x____</span>
<span class="sd">                xx____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xx____</span>
<span class="sd">                _x____</span>
<span class="sd">                _x____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xx____</span>
<span class="sd">                x_____</span>
<span class="sd">                x_____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xxx___</span>
<span class="sd">                x_____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xxx___</span>
<span class="sd">                __x___</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                x_____</span>
<span class="sd">                xxx___</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;L&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                __x___</span>
<span class="sd">                xxx___</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>

        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;Z&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                xx____</span>
<span class="sd">                _xx___</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;Z&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                _xx___</span>
<span class="sd">                xx____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;Z&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                x_____</span>
<span class="sd">                xx____</span>
<span class="sd">                _x____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="s">&#39;Z&#39;</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span>
            <span class="n">packField</span><span class="o">.</span><span class="n">strToBitpattern</span><span class="p">(</span>
                <span class="sd">&#39;&#39;&#39;</span>
<span class="sd">                _x____</span>
<span class="sd">                xx____</span>
<span class="sd">                x_____</span>
<span class="sd">                &#39;&#39;&#39;</span><span class="p">)</span>
        <span class="p">)</span>

        <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">field</span>
        <span class="k">print</span> <span class="bp">self</span><span class="o">.</span><span class="n">block</span>

    <span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">blocks</span><span class="p">,</span> <span class="n">field</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">blocks</span> <span class="o">==</span> <span class="p">[]:</span>
            <span class="k">return</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="n">field</span> <span class="o">==</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">field</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">field</span>

        <span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">block</span><span class="p">[</span><span class="n">blocks</span><span class="p">[</span><span class="mi">0</span><span class="p">]]:</span>
            <span class="k">while</span> <span class="n">pattern</span> <span class="o">&lt;</span> <span class="n">field</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">field</span> <span class="o">&amp;</span> <span class="n">pattern</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">field</span> <span class="o">^=</span> <span class="n">pattern</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">solve</span><span class="p">(</span><span class="n">blocks</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">field</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">result</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
                        <span class="k">return</span> <span class="bp">True</span>
                    <span class="n">field</span> <span class="o">^=</span> <span class="n">pattern</span>
                <span class="n">pattern</span> <span class="o">&lt;&lt;=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">False</span>




<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">packField</span><span class="p">()</span>
    <span class="k">print</span> <span class="s">&#39;IIII&#39;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">solve</span><span class="p">([</span><span class="s">&#39;I&#39;</span><span class="p">,</span><span class="s">&#39;I&#39;</span><span class="p">,</span><span class="s">&#39;I&#39;</span><span class="p">,</span><span class="s">&#39;I&#39;</span><span class="p">,])</span>
    <span class="k">print</span> <span class="s">&#39;OOOO&#39;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">solve</span><span class="p">([</span><span class="s">&#39;O&#39;</span><span class="p">,</span><span class="s">&#39;O&#39;</span><span class="p">,</span><span class="s">&#39;O&#39;</span><span class="p">,</span><span class="s">&#39;O&#39;</span><span class="p">,])</span>
    <span class="k">print</span> <span class="s">&#39;IOOT&#39;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">solve</span><span class="p">([</span><span class="s">&#39;I&#39;</span><span class="p">,</span><span class="s">&#39;O&#39;</span><span class="p">,</span><span class="s">&#39;O&#39;</span><span class="p">,</span><span class="s">&#39;T&#39;</span><span class="p">,])</span>
    <span class="k">print</span> <span class="s">&#39;LZLZ&#39;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">solve</span><span class="p">([</span><span class="s">&#39;L&#39;</span><span class="p">,</span><span class="s">&#39;Z&#39;</span><span class="p">,</span><span class="s">&#39;L&#39;</span><span class="p">,</span><span class="s">&#39;Z&#39;</span><span class="p">,])</span>
    <span class="k">print</span> <span class="s">&#39;IZZZ&#39;</span><span class="p">,</span> <span class="n">p</span><span class="o">.</span><span class="n">solve</span><span class="p">([</span><span class="s">&#39;I&#39;</span><span class="p">,</span><span class="s">&#39;Z&#39;</span><span class="p">,</span><span class="s">&#39;Z&#39;</span><span class="p">,</span><span class="s">&#39;Z&#39;</span><span class="p">,])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9795/addtag/" class="addtag" id="addtag_9795">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9795/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9795/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9795"
  >-</span><span
  class="button yellow"
  id="rating_z_9795"
  >0</span><span 
  class="button green"
  id="rating_p_9795"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110408110729/http://ja.doukaku.org/comment/9795/">
    1
    reply
  </a>

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9795/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment9796"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9796/">#9796</a>(<script language="JavaScript">print_time(new Date("2010/01/05 09:28 GMT"));</script><noscript>2010/01/05 09:28 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>import copyは不要ですね。整数演算してなかったときの名残です。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9796/addtag/" class="addtag" id="addtag_9796">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9796"
  >-</span><span
  class="button yellow"
  id="rating_z_9796"
  >0</span><span 
  class="button green"
  id="rating_p_9796"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9795/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9796/root/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9796/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment10551"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/1085/" target="_top"> U D </a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10551/">#10551</a>(<script language="JavaScript">print_time(new Date("2010/06/19 03:19 GMT"));</script><noscript>2010/06/19 03:19 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>やってることは Ruby と同じ。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92</pre></td><td class="code"><div class="highlight"><pre>！I = 1
！O = 2
！T = 3
！L = 4
！Z = 5

四路盤とは配列
四路盤=「0,0,0,0{~}0,0,0,0{~}0,0,0,0{~}0,0,0,0」をデータ化

ミノとは配列
ミノ[I] = 「1,1,1,1」をデータ化
ミノ[O] = 「1,1{~}1,1」をデータ化
ミノ[T] = 「1,1,1{~}0,1,0」をデータ化
ミノ[L] = 「1,1,1{~}1,0,0」をデータ化
ミノ[Z] = 「1,1,0{~}0,1,1」をデータ化

ミノ候補とは配列
ミノ候補[I] = ミノ[I],(ミノ[I]を表右回転)のミノ達
ミノ候補[O] = ミノ[O]のミノ達
ミノ候補[T] = ミノ[T],ミノ[T]のミノ達
ミノ候補[T]を鏡増
ミノ候補[L] = ミノ[L],ミノ[L]を表右回転,ミノ[L]を表反転,ミノ[L]を表左回転のミノ達
ミノ候補[L]を鏡増
ミノ候補[Z] = ミノ[Z],ミノ[Z]を表右回転のミノ達
ミノ候補[Z]を鏡増

四路盤にI,I,I,Iのミノ達を詰められるかを表示
四路盤にO,O,O,Oのミノ達を詰められるかを表示
四路盤にI,O,O,Tのミノ達を詰められるかを表示
四路盤にL,Z,L,Zのミノ達を詰められるかを表示
四路盤にI,Z,Z,Zのミノ達を詰められるかを表示

●データ化({文字列}Sを)
　結果とは配列。一行とは配列
　SをCSV取得して反復
　　一行 = 空
　　対象を反復、一行にINT(対象)を配列追加
　　一行を結果に配列追加
　結果を戻す

●ミノ達({=?}A,{=?}B,{=?}C,{=?}Dの)
　MINOとは配列
　もしAが空でなければMINOにAを配列追加
　もしBが空でなければMINOにBを配列追加
　もしCが空でなければMINOにCを配列追加
　もしDが空でなければMINOにDを配列追加
　MINOを戻す

●表反転({配列 値渡し}Aを)
　Aを表右回転を表右回転

●表左回転({配列 値渡し}Aを)
　Aを表反転を表右回転

●配列末尾切り取り({配列}Aの|Aから)
　Aの(Aの要素数-1)を配列切り取る

●鏡増({配列}MINOSを)
　MINOSを反復
　　対象を配列逆順
　　対象をMINOSに配列追加

●詰める({配列 値渡し}盤に{配列 値渡し}MINOSを)
　もしMINOSの要素数が0ならば
　　盤が完成済みかどうかを戻す
　Xとは整数。Yとは整数
　Mとは配列。M = MINOSから配列末尾切り取り
　残りミノとは配列。仮盤とは配列
　Yを0から3まで繰り返し、Xを0から3まで繰り返す
　　ミノ候補[M]を反復
　　　仮盤 = 盤
　　　もし仮盤のX,Yに対象を配置可能ならば
　　　　残りミノ=MINOS
　　　　もし仮盤に残りミノを詰められるならば
　　　　　OKを戻す
　NGを戻す

●配置可能か({配列 参照渡し}盤の{整数}X,{整数}Yに{配列}MINOを)
　Wとは整数=MINOの表列数
　Hとは整数=MINOの表行数
　もし(X+W＞4)||(Y+H＞4)ならば、NGを戻す
　DXとは整数。DYとは整数
　DYを0からH-1まで繰り返し、DXを0からW-1まで繰り返す
　　盤[Y+DY][X+DX]にMINO[DY][DX]を直接足す
　　もしそれが2ならば、NGを戻す
　OKを戻す

●完成済み({配列}盤が)
　Xとは整数。Yとは整数
　Yを0から3まで繰り返し、Xを0から3まで繰り返す
　　もし盤[Y][X]が1でなければNGを戻す
　OKを戻す
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10551/addtag/" class="addtag" id="addtag_10551">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/10551/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/10551/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10551"
  >-</span><span
  class="button yellow"
  id="rating_z_10551"
  >0</span><span 
  class="button green"
  id="rating_p_10551"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10551/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment10546"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10546/">#10546</a>(<script language="JavaScript">print_time(new Date("2010/06/17 04:33 GMT"));</script><noscript>2010/06/17 04:33 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Download Free Best Films HD in the World.</p>
<p>&lt;a href=http://animal-health-online.zanovo.pp.ua/&gt;Harry Potter and the Deathly Hallows (2010) HDTV&lt;/a&gt;</p>
<p>&lt;a href=http://college-world-series-rosenblatt-stadium.zanovo.pp.ua/&gt;&lt;img&gt;http://kino-manija.ru/images/stories/films_1/harry-potter-and-the-deathly-hallows%201.jpg&lt;/img&gt;&lt;/a&gt;
&lt;a href=http://advanced-placement-american-politics-review.zanovo.pp.ua/&gt;advanced placement american politics review&lt;/a&gt; 43402 movie theatres
&lt;a href=http://belfair-hilton-head-reviews.zanovo.pp.ua/&gt;belfair hilton head reviews&lt;/a&gt; book imac to external dvd
&lt;a href=http://dvd-to-video-transfer.zanovo.pp.ua/&gt;dvd to video transfer&lt;/a&gt; flotv reviews
&lt;a href=http://czech-babes-naked-free.zanovo.pp.ua/&gt;czech babes naked free&lt;/a&gt; dvd cover we were marshalls
&lt;a href=http://big-black-dong-free.zanovo.pp.ua/&gt;big black dong free&lt;/a&gt; cosmi forms maker download
<a class="reference" href="/web/20110408110729/http://dvd-swrink.zanovo.pp.ua/">http://dvd-swrink.zanovo.pp.ua/</a> dvd columbo
<a class="reference" href="/web/20110408110729/http://automatic-watch-instructions.zanovo.pp.ua/">http://automatic-watch-instructions.zanovo.pp.ua/</a> 1996 audi a6 reviews
<a class="reference" href="/web/20110408110729/http://free-explosive-cum-shots-movies.zanovo.pp.ua/">http://free-explosive-cum-shots-movies.zanovo.pp.ua/</a> download phil keaggy beyond nature
<a class="reference" href="/web/20110408110729/http://bible-dictionary-review.zanovo.pp.ua/">http://bible-dictionary-review.zanovo.pp.ua/</a> free 1800 voice mail
<a class="reference" href="/web/20110408110729/http://cathy-barry-free-movie-clips.zanovo.pp.ua/">http://cathy-barry-free-movie-clips.zanovo.pp.ua/</a> free cocoto</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20110408110729/http://california-senate-video.zanovo.pp.ua/">Harry Potter and the Deathly Hallows (2010) HDTV</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10546/addtag/" class="addtag" id="addtag_10546">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10546"
  >-</span><span
  class="button yellow"
  id="rating_z_10546"
  >0</span><span 
  class="button green"
  id="rating_p_10546"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10546/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment10545"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10545/">#10545</a>(<script language="JavaScript">print_time(new Date("2010/06/14 10:53 GMT"));</script><noscript>2010/06/14 10:53 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Download Free Best Films HD in the World.</p>
<p>&lt;a href=http://free-birth-help-tennessee.zanovo.pp.ua/&gt;Harry Potter and the Deathly Hallows (2010) HDTV&lt;/a&gt;</p>
<p>&lt;a href=http://city-show.zanovo.pp.ua/&gt;&lt;img&gt;http://kino-manija.ru/images/stories/films_1/harry-potter-and-the-deathly-hallows%201.jpg&lt;/img&gt;&lt;/a&gt;
&lt;a href=http://download-70-270-dumps.zanovo.pp.ua/&gt;download 70 270 dumps&lt;/a&gt; downtown file free
&lt;a href=http://free-devil-mascot-clip-art.zanovo.pp.ua/&gt;free devil mascot clip art&lt;/a&gt; free map of saltillo mexico
&lt;a href=http://anime-werewolf-transformation-video.zanovo.pp.ua/&gt;anime werewolf transformation video&lt;/a&gt; dhudgus torrent on rapidshare
&lt;a href=http://concord-cameras-and-driver-downloads.zanovo.pp.ua/&gt;concord cameras and driver downloads&lt;/a&gt; child actors starz
&lt;a href=http://best-free-photo-software.zanovo.pp.ua/&gt;best free photo software&lt;/a&gt; all seasons jet ski rental
<a class="reference" href="/web/20110408110729/http://aol-version-50-download.zanovo.pp.ua/">http://aol-version-50-download.zanovo.pp.ua/</a> free diveing powered by phpbb
<a class="reference" href="/web/20110408110729/http://free-beaded-doily-patterns.zanovo.pp.ua/">http://free-beaded-doily-patterns.zanovo.pp.ua/</a> extraordinary measures trailer
<a class="reference" href="/web/20110408110729/http://extend-a-watch-band.zanovo.pp.ua/">http://extend-a-watch-band.zanovo.pp.ua/</a> free no join birthday ecard
<a class="reference" href="/web/20110408110729/http://free-mature-pporno-videos.zanovo.pp.ua/">http://free-mature-pporno-videos.zanovo.pp.ua/</a> black rifle powder online
<a class="reference" href="/web/20110408110729/http://boy-britney-video-psycho.zanovo.pp.ua/">http://boy-britney-video-psycho.zanovo.pp.ua/</a> carmike cinemas olean</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20110408110729/http://film-studios-sample-business-plans.zanovo.pp.ua/">Harry Potter and the Deathly Hallows (2010) HDTV</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10545/addtag/" class="addtag" id="addtag_10545">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10545"
  >-</span><span
  class="button yellow"
  id="rating_z_10545"
  >0</span><span 
  class="button green"
  id="rating_p_10545"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10545/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  
    




<div class="comment" id="comment9794"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/425/" target="_top">taisuke_h</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9794/">#9794</a>(<script language="JavaScript">print_time(new Date("2010/01/05 09:17 GMT"));</script><noscript>2010/01/05 09:17 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>Scheme(Gauche)です。</p>
<p></p>
<p>積み木は、(行 . 列)という整数のペアで表しています。</p>
<p>探索は、DFSで、回転、反転をした積み木をテーブルのすべての位置に置くことを順に試しています。</p>
<p></p>
<p># Schemeの練習として書いてみました。あまりきれいに書けている気がしません。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">match</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">array</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">height</span> <span class="mi">4</span><span class="p">)</span>
<span class="p">(</span><span class="k">define </span><span class="nv">width</span> <span class="mi">4</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">mino-images</span>
  <span class="o">&#39;</span><span class="p">((</span><span class="s">&quot;****&quot;</span><span class="p">)</span>

    <span class="p">(</span><span class="s">&quot;**&quot;</span>
     <span class="s">&quot;**&quot;</span><span class="p">)</span>

    <span class="p">(</span><span class="s">&quot;***&quot;</span>
     <span class="s">&quot; * &quot;</span><span class="p">)</span>

    <span class="p">(</span><span class="s">&quot;***&quot;</span>
     <span class="s">&quot;*  &quot;</span><span class="p">)</span>

    <span class="p">(</span><span class="s">&quot;** &quot;</span>
     <span class="s">&quot; **&quot;</span><span class="p">)))</span>


<span class="c1">;; string list -&gt; point list</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">mino-image-&gt;points</span> <span class="nv">mino-image</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">append-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">row</span> <span class="nv">s</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">filter-map</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">col</span><span class="p">)</span>
                              <span class="c1">;; asterisk -&gt; (row . col)</span>
                              <span class="p">(</span><span class="nf">match</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">s</span> <span class="nv">col</span><span class="p">)</span>
                                <span class="err">[</span><span class="o">#</span><span class="err">\</span><span class="nv">*</span>    <span class="p">(</span><span class="nb">cons </span><span class="nv">row</span> <span class="nv">col</span><span class="p">)</span><span class="err">]</span>
                                <span class="err">[</span><span class="sc">#\space</span> <span class="no">#f</span><span class="err">]</span><span class="p">))</span>
                            <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">string-length </span><span class="nv">s</span><span class="p">)</span> <span class="mi">0</span><span class="p">)))</span>
              <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">length </span><span class="nv">mino-image</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
              <span class="nv">mino-image</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">rotate</span> <span class="nv">mino</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">match-lambda</span> <span class="err">[</span><span class="p">(</span><span class="nf">row</span> <span class="o">.</span> <span class="nv">col</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">col</span> <span class="p">(</span><span class="nb">- </span><span class="nv">row</span><span class="p">))</span><span class="err">]</span><span class="p">)</span> <span class="nv">mino</span><span class="p">))</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">flip</span> <span class="nv">mino</span><span class="p">)</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">match-lambda</span> <span class="err">[</span><span class="p">(</span><span class="nf">row</span> <span class="o">.</span> <span class="nv">col</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">col</span> <span class="nv">row</span><span class="p">)</span><span class="err">]</span><span class="p">)</span> <span class="nv">mino</span><span class="p">))</span>

<span class="c1">;; rotate, flip and delete duplicates</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">mino-patterns</span> <span class="nv">mino</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">rotate-n</span> <span class="nv">mino</span> <span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="k">let </span><span class="nv">f</span> <span class="p">(</span><span class="err">[</span><span class="nv">i</span> <span class="mi">0</span><span class="err">]</span> <span class="err">[</span><span class="nv">m</span> <span class="nv">mino</span><span class="err">]</span> <span class="err">[</span><span class="nv">l</span> <span class="o">&#39;</span><span class="p">()</span><span class="err">]</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">i</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">f</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">i</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nf">rotate</span> <span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">m</span> <span class="nv">l</span><span class="p">))</span> <span class="nv">l</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">delete-duplicates</span> <span class="p">(</span><span class="nb">append </span><span class="p">(</span><span class="nf">rotate-n</span> <span class="nv">mino</span> <span class="mi">4</span><span class="p">)</span> <span class="p">(</span><span class="nf">rotate-n</span> <span class="p">(</span><span class="nf">flip</span> <span class="nv">mino</span><span class="p">)</span> <span class="mi">4</span><span class="p">))))</span>

<span class="c1">;;; Table</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-tbl</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span> <span class="p">(</span><span class="nf">make-array</span> <span class="p">(</span><span class="nf">shape</span> <span class="mi">0</span> <span class="nv">row</span> <span class="mi">0</span> <span class="nv">col</span><span class="p">)</span> <span class="no">#f</span><span class="p">))</span>
<span class="p">(</span><span class="k">define </span><span class="nv">tbl-ref</span> <span class="nv">array-ref</span><span class="p">)</span>
<span class="p">(</span><span class="k">define </span><span class="nv">tbl-set</span>  <span class="p">(</span><span class="nf">cut</span> <span class="nv">array-set!</span> <span class="nv">&lt;&gt;</span> <span class="nv">&lt;&gt;</span> <span class="nv">&lt;&gt;</span> <span class="no">#t</span><span class="p">))</span>
<span class="p">(</span><span class="k">define </span><span class="nv">tbl-unset</span>  <span class="p">(</span><span class="nf">cut</span> <span class="nv">array-set!</span> <span class="nv">&lt;&gt;</span> <span class="nv">&lt;&gt;</span> <span class="nv">&lt;&gt;</span> <span class="no">#f</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">tbl-encode</span> <span class="nv">tbl</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">fold</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nf">match</span> <span class="nv">c</span> <span class="err">[</span><span class="no">#t</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">n</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span><span class="err">]</span> <span class="err">[</span><span class="no">#f</span> <span class="p">(</span><span class="nb">* </span><span class="mi">2</span> <span class="nv">n</span><span class="p">)</span><span class="err">]</span><span class="p">))</span>
        <span class="mi">0</span>
        <span class="p">(</span><span class="nf">array-&gt;list</span> <span class="nv">tbl</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">tbl-put</span> <span class="nv">tbl</span> <span class="nv">mino</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">valid?</span> <span class="nv">tbl</span> <span class="nv">mino</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">every</span> <span class="p">(</span><span class="nf">match-lambda</span> <span class="err">[</span><span class="p">(</span><span class="nf">d-row</span> <span class="o">.</span> <span class="nv">d-col</span><span class="p">)</span>
                          <span class="p">(</span><span class="k">let </span><span class="p">(</span><span class="err">[</span><span class="nv">r</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">row</span> <span class="nv">d-row</span><span class="p">)</span><span class="err">]</span> <span class="err">[</span><span class="nv">c</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">col</span> <span class="nv">d-col</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
                            <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">&gt;= </span><span class="nv">r</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">r</span> <span class="nv">height</span><span class="p">)</span>
                                 <span class="p">(</span><span class="nb">&gt;= </span><span class="nv">c</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">c</span> <span class="nv">width</span><span class="p">)</span>
                                 <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">tbl-ref</span> <span class="nv">tbl</span> <span class="nv">r</span> <span class="nv">c</span><span class="p">))))</span><span class="err">]</span><span class="p">)</span>
           <span class="nv">mino</span><span class="p">))</span>
  <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nf">valid?</span> <span class="nv">tbl</span> <span class="nv">mino</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span>
      <span class="p">(</span><span class="k">let </span><span class="p">()</span>
        <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="nf">match-lambda</span> <span class="err">[</span><span class="p">(</span><span class="nf">d-row</span> <span class="o">.</span> <span class="nv">d-col</span><span class="p">)</span>
                                 <span class="p">(</span><span class="nf">tbl-set</span> <span class="nv">tbl</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">row</span> <span class="nv">d-row</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">col</span> <span class="nv">d-col</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
                  <span class="nv">mino</span><span class="p">)</span>
        <span class="no">#t</span><span class="p">)))</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">tbl-unput-mino</span> <span class="nv">tbl</span> <span class="nv">mino</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="nf">match-lambda</span> <span class="err">[</span><span class="p">(</span><span class="nf">d-row</span> <span class="o">.</span> <span class="nv">d-col</span><span class="p">)</span>
                           <span class="p">(</span><span class="nf">tbl-unset</span> <span class="nv">tbl</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">row</span> <span class="nv">d-row</span><span class="p">)</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">col</span> <span class="nv">d-col</span><span class="p">))</span><span class="err">]</span><span class="p">)</span>
            <span class="nv">mino</span><span class="p">))</span>

<span class="c1">;; for debug</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">tbl-dump</span> <span class="nv">tbl</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">format</span> <span class="no">#t</span> <span class="s">&quot;--~%&quot;</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">row</span> <span class="mi">0</span> <span class="nv">height</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">begin</span>
           <span class="p">(</span><span class="nf">do-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">col</span> <span class="mi">0</span> <span class="nv">width</span><span class="p">)</span>
                  <span class="p">(</span><span class="nf">format</span> <span class="no">#t</span> <span class="s">&quot;~a&quot;</span> <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">tbl-ref</span> <span class="nv">tbl</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span> <span class="o">#</span><span class="err">\</span><span class="nv">*</span> <span class="sc">#\space</span><span class="p">)))</span>
           <span class="p">(</span><span class="nf">format</span> <span class="no">#t</span> <span class="s">&quot;~%&quot;</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">dfs</span> <span class="nv">ht</span> <span class="nv">tbl</span> <span class="nv">mino-list</span><span class="p">)</span>
  <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">null? </span><span class="nv">mino-list</span><span class="p">)</span>
      <span class="p">(</span><span class="k">let* </span><span class="p">(</span><span class="err">[</span><span class="nv">e</span> <span class="p">(</span><span class="nf">tbl-encode</span> <span class="nv">tbl</span><span class="p">)</span><span class="err">]</span><span class="p">)</span>
        <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nf">hash-table-get</span> <span class="nv">ht</span> <span class="nv">e</span> <span class="no">#f</span><span class="p">))</span>
            <span class="p">(</span><span class="k">let </span><span class="p">()</span>
              <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">ht</span> <span class="nv">e</span> <span class="no">#t</span><span class="p">)</span>
              <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">mino-list</span><span class="p">))</span>
                   <span class="p">(</span><span class="nf">any?-ec</span> <span class="p">(</span><span class="nf">:list</span> <span class="nv">m</span> <span class="p">(</span><span class="nf">mino-patterns</span> <span class="p">(</span><span class="nb">car </span><span class="nv">mino-list</span><span class="p">)))</span>
                            <span class="p">(</span><span class="nf">:</span> <span class="nv">row</span> <span class="mi">0</span> <span class="nv">height</span><span class="p">)</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">col</span> <span class="mi">0</span> <span class="nv">width</span><span class="p">)</span>
                            <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">tbl-put</span> <span class="nv">tbl</span> <span class="nv">m</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span>
                                <span class="p">(</span><span class="nf">let1</span> <span class="nv">r</span> <span class="p">(</span><span class="nf">dfs</span> <span class="nv">ht</span> <span class="nv">tbl</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">mino-list</span><span class="p">))</span>
                                  <span class="p">(</span><span class="nf">tbl-unput-mino</span> <span class="nv">tbl</span> <span class="nv">m</span> <span class="nv">row</span> <span class="nv">col</span><span class="p">)</span>
                                  <span class="nv">r</span><span class="p">)</span>
                                <span class="no">#f</span><span class="p">))))))))</span>

<span class="p">(</span><span class="k">define </span><span class="nv">all-mino-list</span> <span class="p">(</span><span class="nb">map </span><span class="nv">mino-image-&gt;points</span> <span class="nv">mino-images</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">can-put-minos?</span> <span class="nv">ids</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">format</span> <span class="no">#t</span> <span class="s">&quot;~a : ~a~%&quot;</span>
          <span class="nv">ids</span>
          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">dfs</span> <span class="p">(</span><span class="nf">make-hash-table</span><span class="p">)</span> <span class="p">(</span><span class="nf">make-tbl</span> <span class="nv">height</span> <span class="nv">width</span><span class="p">)</span>
                   <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">id</span><span class="p">)</span> <span class="p">(</span><span class="nf">ref</span> <span class="nv">all-mino-list</span> <span class="p">(</span><span class="nb">- </span><span class="nv">id</span> <span class="mi">1</span><span class="p">)))</span> <span class="nv">ids</span><span class="p">))</span>
              <span class="s">&quot;ok&quot;</span>
              <span class="s">&quot;ng&quot;</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">2</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span> <span class="mi">3</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">4</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">4</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">5</span> <span class="mi">5</span> <span class="mi">5</span> <span class="mi">5</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">can-put-minos?</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">4</span> <span class="mi">4</span> <span class="mi">5</span><span class="p">))</span>
  <span class="mi">0</span><span class="p">)</span> <span class="c1">; exit code</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9794/addtag/" class="addtag" id="addtag_9794">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9794/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9794/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9794"
  >-</span><span
  class="button yellow"
  id="rating_z_9794"
  >0</span><span 
  class="button green"
  id="rating_p_9794"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110408110729/http://ja.doukaku.org/comment/9794/">
    1
    reply
  </a>

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9794/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment9797"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/425/" target="_top">taisuke_h</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9797/">#9797</a>(<script language="JavaScript">print_time(new Date("2010/01/05 16:56 GMT"));</script><noscript>2010/01/05 16:56 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>dfs手続きが非常に見づらかったので書き直してみました。</p>
<p></p>
<p>手続き型言語のようなコードなので、継続を使って脱出すると見通しがだいぶ良くなります。</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>(define (dfs ht tbl mino-list)
  (let/cc return
    (if (null? mino-list) (return #t))
    (let ([e (tbl-encode tbl)])
      (if (hash-table-get ht e #f) (return #f))
      (hash-table-put! ht e #t)
      (for-each (lambda (m)
                  (do-ec (: row 0 height) (: col 0 width)
                    (when (tbl-put tbl m row col)
                      (if (dfs ht tbl (cdr mino-list)) (return #t))
                      (tbl-unput-mino tbl m row col))))
                (mino-patterns (car mino-list)))
      #f)))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9797/addtag/" class="addtag" id="addtag_9797">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9797/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9797/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9797"
  >-</span><span
  class="button yellow"
  id="rating_z_9797"
  >0</span><span 
  class="button green"
  id="rating_p_9797"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9794/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9797/root/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9797/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment10095"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10095/">#10095</a>(<script language="JavaScript">print_time(new Date("2010/02/04 05:06 GMT"));</script><noscript>2010/02/04 05:06 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Explorerでは積み木の形が認識できませんでした。
地道な解法です。5の裏返しを認めない場合は、置き方の総数は99通り。
認めた場合は117通り。
どちらにしろ、組み合わせの総数は12通り、詰め方は22通りという結果となりました。
実行結果は次のようになります。

置き方の総数...99

[1; 1; 1; 1]
[1; 1; 2; 2]
[1; 1; 4; 4]
[1; 2; 4; 4]
[1; 3; 3; 4]
[1; 4; 4; 5]
[2; 2; 2; 2]
[2; 2; 4; 4]
[3; 3; 3; 3]
[3; 3; 4; 5]
[4; 4; 4; 4]
[4; 4; 5; 5]

組み合わせの総数...12

異なる詰め方の個数...22

[1; 1; 1; 1]

1|1|1|1
       
1|1|1|1
       
1|1|1|1
       
1|1|1|1


[1; 1; 2; 2]

1|2 2|1
       
1|2 2|1
  - -  
1|2 2|1
       
1|2 2|1


[1; 1; 2; 2]

2 2|2 2
       
2 2|2 2
- - - -
1 1 1 1
- - - -
1 1 1 1


[1; 1; 4; 4]

1|4 4|1
    -  
1|4|4|1
       
1|4|4|1
  -    
1|4 4|1


[1; 1; 4; 4]

4|4 4 4
  - -  
4 4 4|4
- - - -
1 1 1 1
- - - -
1 1 1 1


[1; 2; 4; 4]

4 4|2 2
  -    
4|4|2 2
    - -
4|4 4 4
- - - -
1 1 1 1


[1; 2; 4; 4]

4 4|4 4
  - -  
4|2 2|4
       
4|2 2|4
- - - -
1 1 1 1


[1; 2; 4; 4]

4 4 4|1
- -    
2 2|4|1
    -  
2 2|4|1
- -    
4 4 4|1


[1; 2; 4; 4]

4 4 4|4
- -    
2 2|4|4
    -  
2 2|4 4
- - - -
1 1 1 1


[1; 3; 3; 4]

3|4 4|1
  -    
3 3|4|1
  -    
3|3|4|1
-   -  
3 3 3|1


[1; 3; 3; 4]

4 4|3|1
  -    
4|3 3|1
  -    
4|3|3|1
-   -  
3 3 3|1


[1; 4; 4; 5]

4 4|5|1
  -    
4|5 5|1
    -  
4|5|4|1
- -    
4 4 4|1


[1; 4; 4; 5]

4 4|5|4
  -    
4|5 5|4
    -  
4|5|4 4
- - - -
1 1 1 1


[1; 4; 4; 5]

5 5|4 4
-   -  
4|5 5|4
  - -  
4 4 4|4
- - - -
1 1 1 1


[2; 2; 2; 2]

2 2|2 2
       
2 2|2 2
- - - -
2 2|2 2
       
2 2|2 2


[2; 2; 4; 4]

4|4 4 4
  - -  
4 4 4|4
- - - -
2 2|2 2
       
2 2|2 2


[3; 3; 3; 3]

3|3 3 3
  -   -
3 3|3|3
  - -  
3|3|3 3
-   -  
3 3 3|3


[3; 3; 4; 5]

5 5|4 4
-   -  
3|5 5|4
  - -  
3 3|3|4
  -   -
3|3 3 3


[4; 4; 4; 4]

4|4 4 4
  - -  
4 4 4|4
- - - -
4|4 4 4
  - -  
4 4 4|4


[4; 4; 4; 4]

4|4 4 4
  - -  
4 4 4|4
- - - -
4 4 4|4
  - -  
4|4 4 4


[4; 4; 4; 4]

4 4 4|4
- -    
4 4|4|4
  - -  
4|4|4 4
    - -
4|4 4 4


[4; 4; 5; 5]

5 5|4 4
-   -  
4|5 5|4
  - -  
4|5 5|4
  -   -
4 4|5 5</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176</pre></td><td class="code"><div class="highlight"><pre>let pieces = [|
        ((1,0),[|(0,0);(1,0);(2,0);(3,0)|]);((1,1),[|(0,0);(0,1);(0,2);(0,3)|]);
        ((2,0),[|(0,0);(1,0);(0,1);(1,1)|]);
        ((3,0),[|(0,0);(1,0);(2,0);(1,1)|]);((3,1),[|(0,0);(0,1);(1,1);(0,2)|]);                       
        ((3,2),[|(0,0);(-1,1);(0,1);(1,1)|]);((3,3),[|(0,0);(-1,1);(0,1);(0,2)|]);                       
        ((4,0),[|(0,0);(1,0);(2,0);(0,1)|]);((4,1),[|(0,0);(1,0);(1,1);(1,2)|]);                       
        ((4,2),[|(0,0);(0,1);(0,2);(1,2)|]);((4,3),[|(0,0);(-2,1);(-1,1);(0,1)|]);
        ((4,4),[|(0,0);(1,0);(2,0);(2,1)|]);((4,5),[|(0,0);(1,0);(0,1);(0,2)|]);                       
        ((4,6),[|(0,0);(0,1);(1,1);(2,1)|]);((4,7),[|(0,0);(0,1);(-1,2);(0,2)|]);
        ((5,0),[|(0,0);(1,0);(1,1);(2,1)|]);((5,1),[|(0,0);(-1,1);(0,1);(-1,2)|]);                       
//5の逆転     ((5,2),[|(0,0);(0,1);(1,1);(1,2)|]);((5,3),[|(0,0);(1,0);(-1,1);(0,1)|])
             |]
let Mdim = 4 
let isPutable p (x,y) (arr:int[,])=
    let isThatPositionPutable (x1,y1) = 
        0 &lt;= x+x1 &amp;&amp; 0 &lt;= y+y1 &amp;&amp; 
        x+x1&lt;Mdim &amp;&amp; y+y1&lt;Mdim &amp;&amp; arr.[y+y1,x+x1] = 0
    let (_,rPositions) = p     
    Array.forall isThatPositionPutable rPositions    

let put p (x,y) (arr:int[,]) =
    let putOneLocation pID  (x1,y1) = arr.[y+y1,x+x1] &lt;- pID
    let ((pId,_),rPositions) = p
    Array.map (putOneLocation pId) rPositions

let remove p (x,y) (arr:int[,]) =
   let removeOneLocation (x1,y1) = arr.[y+y1,x+x1] &lt;- 0
   let (_,rPositions) = p     
   Array.map removeOneLocation rPositions

let findNextPutLoc (arr:int[,]) =
    let mutable isFirst = true
    let  result = ref None
    for y in 0 .. Mdim-1 do
       for x in 0 .. Mdim-1 do
            if arr.[y,x] = 0 &amp;&amp; isFirst then
                result := Some((x,y))
                isFirst &lt;- false
    !result
 
let check in_arr =
    let sucHisLst = ref []  
    let rec search hist  (arr:int[,]) =
        if findNextPutLoc arr = None then //成功!全部置けた
            sucHisLst := hist:: !sucHisLst
        else
            let (x,y) = (findNextPutLoc arr).Value
            for p in pieces do
                if isPutable p (x,y) arr then
                    put p (x,y) arr |&gt; ignore
                    search (((x,y),p)::hist) arr
                    remove p (x,y) arr |&gt; ignore
    search [] in_arr                       
    sucHisLst
 
let initArr = Array2D.create Mdim Mdim 0 //0は何も置かれていない状態 
let solutions = !(check initArr)

printfn &quot;\n置き方の総数...%d\n&quot; solutions.Length

///ここから「箱につめることができる積み木の組み合わせの総数」の処理

let extractKindlistAndSort eles  =
    let t = List.map (fun ((x,y),((k,_),_)) -&gt; k) eles
    List.sort t

let combSet = solutions 
              |&gt; List.map extractKindlistAndSort 
              |&gt; Set.ofList
Set.iter (fun x -&gt; printfn &quot;%A&quot; x ) combSet
printfn &quot;\n組み合わせの総数...%d\n&quot; combSet.Count

///ここから「上記総数を、異なる詰め方の個数別にカウント
//　（箱の回転・裏返しで一致するものは同一視します）」の処理

//縦横2*Mdimの配列を準備して境界線を引きながら、もう一度積み木を置いていく。
//それから、回転裏返しで一致するものを除きながら、解のリストを作る。

let Connected = -1
let Discreet = -2

let put2 p (x,y) (arr:int[,]) =
    let putOneLocation pID  (x1,y1) = arr.[2*y+2*y1,2*x+2*x1] &lt;- pID
    let ((pId,_),rPositions) = p
    Array.map (putOneLocation pId) rPositions

let upDateConnection (arr:int[,]) =
    for c in 0 .. Mdim - 1 do
        for r in 0 .. Mdim - 2 do
            if arr.[2*r,2*c] &lt;&gt; 0 &amp;&amp; arr.[2*r,2*c]=arr.[2*r + 2,2*c] &amp;&amp; arr.[2*r+1,2*c] = 0
                then arr.[2*r+1,2*c] &lt;- Connected 
            if arr.[2*r,2*c] &lt;&gt; arr.[2*r + 2,2*c] &amp;&amp; arr.[2*r+1,2*c] = 0
                then arr.[2*r+1,2*c] &lt;- Discreet 
    for c in 0 .. Mdim - 2 do
        for r in 0 .. Mdim - 1 do
            if arr.[2*r,2*c] &lt;&gt; 0 &amp;&amp; arr.[2*r,2*c]=arr.[2*r,2*c+2] &amp;&amp; arr.[2*r,2*c+1] = 0
                then arr.[2*r,2*c+1] &lt;- Connected 
            if arr.[2*r,2*c] &lt;&gt; arr.[2*r,2*c+2] &amp;&amp; arr.[2*r,2*c+1] = 0
                then arr.[2*r,2*c+1] &lt;- Discreet 
             
let rotateArr (arr:int[,]) =
    let tempArr = Array2D.create (2*Mdim-1) (2*Mdim-1) 0
    for c in 0 .. 2*Mdim - 2 do
        for r in 0 .. 2*Mdim - 2 do
            tempArr.[r,(2*Mdim-1) - c - 1 ] &lt;- arr.[c,r]
    tempArr

let reverseArr (arr:int[,]) =
    let tempArr = Array2D.create (2*Mdim-1) (2*Mdim-1) 0
    for c in 0 .. 2*Mdim - 2 do
        for r in 0 .. 2*Mdim - 2 do
            tempArr.[r,c] &lt;- arr.[c,r]
    tempArr

let makeUpPA ele =
    let tempArr = Array2D.create (2*Mdim-1) (2*Mdim-1) 0
    let t = List.fold (fun s ((x,y),((k,id),a)) -&gt;
                            put2 ((k,id),a)(x,y) tempArr |&gt;ignore;
                            upDateConnection tempArr|&gt; ignore ;
                            k :: s) [] ele
    ((List.sort t),tempArr)

let isEqueWRR oriP uP oriArr arr = //回転反転すると等しくなる 
    let rec isEqueWRRSub arr1 arr2 count =
        if count = 4 then 
            false
        else
          if oriArr = arr1 || oriArr = arr2 then
            true
          else
            isEqueWRRSub (rotateArr arr1) (rotateArr arr2) (count + 1)
    if oriP &lt;&gt; uP then
        false
    else
        isEqueWRRSub arr (reverseArr arr) 0
              
let makeUpSolutions2 sols =
    let isInclude ele lst =
        let (usedPiece,arr0) = ele
        List.exists(fun (u,arr) -&gt;isEqueWRR usedPiece u arr0 arr) lst

    let rec musSub lst res =
        match lst with
        |[]
            -&gt;res
        |hd::tl 
            -&gt;let t = makeUpPA hd
              if (isInclude t res)  then
                musSub tl res
              else
                musSub tl (t::res)
    musSub sols []


let solutions2 = (makeUpSolutions2 solutions)

printf &quot;異なる詰め方の個数...%d&quot;  solutions2.Length

///ここまでで答え終わり
//ここから見やすく答えを表示

let dispEach (kLst, (arr : int [,])) =
    printfn &quot;\n\n%A&quot; kLst
    for r in 0 .. 2*Mdim - 2 do
        printfn &quot;&quot;
        for c in 0 .. 2*Mdim - 2 do
          let st =  
                match arr.[r,c] with
                |i  when i = 0 || i = Connected -&gt; &quot; &quot;
                |i  when i = Discreet &amp;&amp; (c % 2 = 1 &amp;&amp; r % 2 = 0) -&gt; &quot;|&quot;
                |i  when i = Discreet &amp;&amp; (c % 2 = 0 &amp;&amp; r % 2 = 1) -&gt; &quot;-&quot;
                |i   -&gt; i.ToString()
          printf &quot;%s&quot; st     
    printfn &quot;&quot;

List.iter (fun ele -&gt; dispEach ele) (List.sort solutions2)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10095/addtag/" class="addtag" id="addtag_10095">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/10095/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/10095/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10095"
  >-</span><span
  class="button yellow"
  id="rating_z_10095"
  >0</span><span 
  class="button green"
  id="rating_p_10095"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10095/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment10541"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10541/">#10541</a>(<script language="JavaScript">print_time(new Date("2010/06/09 06:55 GMT"));</script><noscript>2010/06/09 06:55 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Download Free Best Films HD in the World.</p>
<p>&lt;a href=http://christian-cross-clip-art.zanuda.pp.ua/&gt;Harry Potter and the Deathly Hallows (2010) HDTV&lt;/a&gt;</p>
<p>&lt;a href=http://blah-blah-blah-download.zanuda.pp.ua/&gt;&lt;img&gt;http://kino-manija.ru/images/stories/films_1/harry-potter-and-the-deathly-hallows%201.jpg&lt;/img&gt;&lt;/a&gt;
&lt;a href=http://female-christian-artist-2000.zanuda.pp.ua/&gt;female christian artist 2000&lt;/a&gt; covert blu ray
&lt;a href=http://ab-core-belt-tv.zanuda.pp.ua/&gt;ab core belt tv&lt;/a&gt; buy msoffice online
&lt;a href=http://adult-dvd-collection.zanuda.pp.ua/&gt;adult dvd collection&lt;/a&gt; capsa 68 download
&lt;a href=http://free-lessons-on-the-banjo.zanuda.pp.ua/&gt;free lessons on the banjo&lt;/a&gt; college course online saddlestring wyoming
&lt;a href=http://dartsy-model-gallery-pairs-free.zanuda.pp.ua/&gt;dartsy model gallery pairs free&lt;/a&gt; backmasking in movies
<a class="reference" href="/web/20110408110729/http://abudhabi-cinema.zanuda.pp.ua/">http://abudhabi-cinema.zanuda.pp.ua/</a> editable free recipe cards
<a class="reference" href="/web/20110408110729/http://camera-film-movie.zanuda.pp.ua/">http://camera-film-movie.zanuda.pp.ua/</a> disney halloween movies bogie
<a class="reference" href="/web/20110408110729/http://big-tit-fuck-massage-movies.zanuda.pp.ua/">http://big-tit-fuck-massage-movies.zanuda.pp.ua/</a> ba music education online
<a class="reference" href="/web/20110408110729/http://adobe-premier-pro-training-video.zanuda.pp.ua/">http://adobe-premier-pro-training-video.zanuda.pp.ua/</a> assparade laundr o buns torrent
<a class="reference" href="/web/20110408110729/http://free-adobe-acrobat-pro-download.zanuda.pp.ua/">http://free-adobe-acrobat-pro-download.zanuda.pp.ua/</a> casino empire download</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20110408110729/http://dodge-charger-brake-clips.zanuda.pp.ua/">Harry Potter and the Deathly Hallows (2010) HDTV</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10541/addtag/" class="addtag" id="addtag_10541">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10541"
  >-</span><span
  class="button yellow"
  id="rating_z_10541"
  >0</span><span 
  class="button green"
  id="rating_p_10541"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10541/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment9798"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/1111/" target="_top">hoge</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/">#9798</a>(<script language="JavaScript">print_time(new Date("2010/01/05 13:00 GMT"));</script><noscript>2010/01/05 13:00 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>　先に全数検索するコードを書いて、後でブロックが置けるか調べるコードを追加したら、
グチャグチャになってしまいました。テトリスと違って裏返しもカウントしてます。

＜実行結果＞
*Main&gt; main
&lt;1111&gt;
[0,0,0,0]
[0,0,0,0]
[0,0,0,0]
[1,1,1,1]

[0,0,0,0]
[0,0,0,0]
[1,1,1,1]
[0,0,0,0]

[0,0,0,0]
[1,1,1,1]
[0,0,0,0]
[0,0,0,0]

[1,1,1,1]
[0,0,0,0]
[0,0,0,0]
[0,0,0,0]
...
&lt;4455&gt;
[0,0,0,0]
[0,0,0,0]
[0,1,1,0]
[0,0,1,1]

[0,0,0,0]
[1,0,0,0]
[1,0,0,0]
[1,1,0,0]

[0,0,1,1]
[0,0,0,1]
[0,0,0,1]
[0,0,0,0]

[1,1,0,0]
[0,1,1,0]
[0,0,0,0]
[0,0,0,0]

Number of solutions: 70

Can put {1,1,2,2}? : True
Can put {2,3,4,5}? : False
Can put {4,4,5,5}? : True</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Maybe</span><span class="p">(</span><span class="nv">isJust</span><span class="p">,</span> <span class="nv">mapMaybe</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Tree</span><span class="p">(</span><span class="nv">unfoldTree</span><span class="p">,</span> <span class="nv">levels</span><span class="p">)</span>

<span class="nv">initialState</span> <span class="o">=</span> <span class="nv">replicate</span> <span class="mi">16</span> <span class="mi">0</span> <span class="c1">-- 空箱</span>
<span class="nv">b1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>
<span class="nv">b2</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>
<span class="nv">b3</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
<span class="nv">b4</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
<span class="nv">b5</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>

<span class="nv">packBox</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">packBox</span> <span class="nv">b</span>  <span class="o">=</span> <span class="p">[</span><span class="nv">take</span> <span class="mi">4</span> <span class="nv">b</span><span class="p">]</span> <span class="o">++</span> <span class="p">(</span><span class="nv">packBox</span> <span class="o">$</span> <span class="nv">drop</span> <span class="mi">4</span> <span class="nv">b</span><span class="p">)</span>
<span class="nv">unpackBox</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">concat</span> <span class="nv">b</span>

<span class="nv">rotate</span> <span class="nv">b</span> <span class="nv">d</span> <span class="o">=</span> <span class="kr">case</span> <span class="p">(</span><span class="nv">d</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="mi">360</span> <span class="o">+</span> <span class="mi">360</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="mi">360</span> <span class="kr">of</span>
  <span class="mi">0</span> <span class="o">-&gt;</span> <span class="nv">b</span>
  <span class="mi">90</span> <span class="o">-&gt;</span> <span class="nv">reverse</span> <span class="o">$</span> <span class="nv">transpose</span> <span class="nv">b</span>
  <span class="mi">180</span> <span class="o">-&gt;</span> <span class="nv">flip</span> <span class="nv">rotate</span>  <span class="mi">90</span> <span class="o">$</span> <span class="nv">rotate</span> <span class="nv">b</span> <span class="mi">90</span>
  <span class="mi">270</span> <span class="o">-&gt;</span> <span class="nv">flip</span> <span class="nv">rotate</span> <span class="mi">180</span> <span class="o">$</span> <span class="nv">rotate</span> <span class="nv">b</span> <span class="mi">90</span>

<span class="nv">normalize</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">unfoldr</span> <span class="nv">f</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">b</span><span class="p">)</span> <span class="c1">--箱の大きさに正規化</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="kr">_</span>     <span class="p">)</span> <span class="o">=</span> <span class="n">Nothing</span>
        <span class="nv">f</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">))</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">take</span> <span class="mi">4</span> <span class="o">$</span> <span class="nv">x</span> <span class="o">++</span> <span class="p">(</span><span class="nv">repeat</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="nv">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">xs</span><span class="p">))</span>
        <span class="nv">f</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span> <span class="kr">_</span>     <span class="p">)</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">(</span><span class="nv">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[]))</span>

<span class="nv">horizontalPatterns</span> <span class="nv">b</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">any</span> <span class="p">(</span><span class="o">/=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">$</span> <span class="nv">b&#39;</span> <span class="o">!!</span> <span class="mi">3</span> <span class="kr">then</span> <span class="p">[</span><span class="nv">b</span><span class="p">]</span>
                       <span class="kr">else</span> <span class="nv">b</span> <span class="o">:</span> <span class="p">(</span><span class="nv">horizontalPatterns</span> <span class="o">$</span> <span class="nv">transpose</span> <span class="o">$</span> <span class="p">[</span><span class="nv">last</span> <span class="nv">b&#39;</span><span class="p">]</span> <span class="o">++</span> <span class="p">(</span><span class="nv">take</span> <span class="mi">3</span> <span class="nv">b&#39;</span><span class="p">))</span>
  <span class="kr">where</span> <span class="nv">b&#39;</span> <span class="o">=</span> <span class="nv">transpose</span> <span class="nv">b</span>

<span class="nv">verticalPatterns</span>   <span class="nv">b</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">any</span> <span class="p">(</span><span class="o">/=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">$</span> <span class="nv">b</span> <span class="o">!!</span> <span class="mi">3</span> <span class="kr">then</span> <span class="p">[</span><span class="nv">b</span><span class="p">]</span>
                       <span class="kr">else</span> <span class="nv">b</span> <span class="o">:</span> <span class="p">(</span><span class="nv">verticalPatterns</span> <span class="o">$</span> <span class="p">[</span><span class="nv">last</span> <span class="nv">b</span><span class="p">]</span> <span class="o">++</span> <span class="p">(</span><span class="nv">take</span> <span class="mi">3</span> <span class="nv">b</span><span class="p">))</span>

<span class="c1">-- 指定されたブロックの全ての配置パターンを生成</span>
<span class="nv">generatePatterns</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="nv">verticalPatterns</span> <span class="o">$</span> <span class="nv">concatMap</span> <span class="nv">horizontalPatterns</span> <span class="nv">ps</span>
  <span class="kr">where</span> <span class="nv">ps</span> <span class="o">=</span> <span class="nv">nub</span>
             <span class="o">$</span> <span class="p">(</span><span class="nv">normalize</span> <span class="o">$</span> <span class="nv">reverse</span> <span class="nv">b</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="nv">normalize</span> <span class="o">$</span> <span class="nv">reverse</span> <span class="o">$</span> <span class="nv">rotate</span> <span class="nv">b</span> <span class="mi">90</span><span class="p">)</span> <span class="c1">-- 反転パターン</span>
             <span class="o">:</span> <span class="p">(</span><span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="nv">d</span> <span class="o">-&gt;</span> <span class="nv">normalize</span> <span class="o">$</span> <span class="nv">rotate</span> <span class="nv">b</span> <span class="nv">d</span><span class="p">)</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">270</span><span class="p">])</span>        <span class="c1">-- 回転パターン</span>

<span class="nv">listOfPatterns</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">((</span><span class="nv">map</span> <span class="nv">unpackBox</span><span class="p">)</span> <span class="o">.</span> <span class="nv">generatePatterns</span><span class="p">)</span> <span class="p">[</span><span class="nv">b1</span><span class="p">,</span> <span class="nv">b2</span><span class="p">,</span> <span class="nv">b3</span><span class="p">,</span> <span class="nv">b4</span><span class="p">,</span> <span class="nv">b5</span><span class="p">]</span>

<span class="nv">listOfBlocks</span> <span class="nv">ps</span> <span class="o">=</span> <span class="nv">sort</span> <span class="o">$</span> <span class="nv">f</span> <span class="nv">ps</span> <span class="nv">listOfPatterns</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="p">[]</span>       <span class="kr">_</span>           <span class="o">=</span> <span class="s">&quot;&quot;</span>
        <span class="nv">f</span> <span class="kr">_</span>        <span class="p">[]</span>          <span class="o">=</span> <span class="s">&quot;&quot;</span>
        <span class="nv">f</span> <span class="nv">pps&#39;</span><span class="o">@</span><span class="p">(</span><span class="nv">p&#39;</span><span class="o">:</span><span class="nv">ps&#39;</span><span class="p">)</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">find</span> <span class="p">(</span><span class="o">==</span> <span class="nv">p&#39;</span><span class="p">)</span> <span class="nv">x</span> <span class="kr">of</span>
                              <span class="n">Just</span> <span class="nv">i</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">show</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">listOfPatterns</span> <span class="o">-</span> <span class="nv">length</span> <span class="nv">xs</span><span class="p">))</span> <span class="o">++</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">ps&#39;</span> <span class="nv">listOfPatterns</span><span class="p">)</span>
                              <span class="nv">otherwise</span> <span class="o">-&gt;</span> <span class="nv">f</span> <span class="nv">pps&#39;</span> <span class="nv">xs</span>

<span class="nv">solutions</span> <span class="o">=</span> <span class="nv">sortBy</span> <span class="p">(</span><span class="o">\</span><span class="nv">a</span> <span class="nv">b</span> <span class="o">-&gt;</span> <span class="nv">compare</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">b</span><span class="p">))</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">listOfBlocks</span> <span class="nv">x</span><span class="p">,</span> <span class="nv">x</span><span class="p">))</span>
            <span class="o">$</span> <span class="nv">nub</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">sort</span> <span class="o">.</span> <span class="nv">snd</span><span class="p">)</span> <span class="o">$</span> <span class="nv">flip</span> <span class="p">(</span><span class="o">!!</span><span class="p">)</span> <span class="mi">4</span> <span class="o">$</span> <span class="nv">levels</span> <span class="o">$</span> <span class="nv">unfoldTree</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">initialState</span><span class="p">,</span> <span class="p">[])</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">x</span><span class="o">@</span><span class="p">(</span><span class="nv">b</span><span class="p">,</span> <span class="nv">ps</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">mapMaybe</span> <span class="nv">g</span> <span class="o">$</span> <span class="nv">concat</span> <span class="nv">listOfPatterns</span><span class="p">)</span>
          <span class="kr">where</span> <span class="nv">g</span> <span class="nv">p</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">any</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span><span class="p">)</span> <span class="nv">b&#39;</span> <span class="kr">then</span> <span class="n">Nothing</span> <span class="kr">else</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">b&#39;</span><span class="p">,</span> <span class="nv">p</span> <span class="o">:</span> <span class="nv">ps</span><span class="p">)</span>
                  <span class="kr">where</span> <span class="nv">b&#39;</span> <span class="o">=</span> <span class="nv">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="nv">b</span> <span class="nv">p</span>

<span class="nv">solve</span> <span class="nv">s</span> <span class="o">=</span> <span class="kr">let</span> <span class="nv">s&#39;</span> <span class="o">=</span> <span class="nv">sort</span> <span class="nv">s</span> <span class="kr">in</span>
            <span class="kr">if</span> <span class="nv">isJust</span> <span class="o">$</span> <span class="nv">find</span> <span class="p">(</span><span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="nv">s&#39;</span> <span class="o">==</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">x</span><span class="p">))</span> <span class="nv">solutions</span> <span class="kr">then</span> <span class="n">True</span> <span class="kr">else</span> <span class="n">False</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">mapM_</span> <span class="nv">f</span> <span class="nv">solutions</span>
          <span class="nv">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Number of solutions: &quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">show</span> <span class="o">$</span> <span class="nv">length</span> <span class="nv">solutions</span><span class="p">)</span>
          <span class="nv">putStrLn</span> <span class="s">&quot;&quot;</span>
          <span class="nv">putStr</span> <span class="s">&quot;Can put {1,1,2,2}? : &quot;</span>
          <span class="nv">print</span> <span class="o">$</span> <span class="nv">solve</span> <span class="s">&quot;1122&quot;</span>
          <span class="nv">putStr</span> <span class="s">&quot;Can put {2,3,4,5}? : &quot;</span>
          <span class="nv">print</span> <span class="o">$</span> <span class="nv">solve</span> <span class="s">&quot;2345&quot;</span>
          <span class="nv">putStr</span> <span class="s">&quot;Can put {4,4,5,5}? : &quot;</span>
          <span class="nv">print</span> <span class="o">$</span> <span class="nv">solve</span> <span class="s">&quot;4455&quot;</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">x</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">putStrLn</span> <span class="o">$</span> <span class="s">&quot;&lt;&quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">x</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;&gt;&quot;</span>
                 <span class="nv">mapM_</span> <span class="nv">g</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">packBox</span> <span class="o">$</span> <span class="nv">snd</span> <span class="nv">x</span>
          <span class="kr">where</span> <span class="nv">g</span> <span class="nv">x&#39;</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">mapM_</span> <span class="nv">print</span> <span class="nv">x&#39;</span>
                          <span class="nv">putStrLn</span> <span class="s">&quot;&quot;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/addtag/" class="addtag" id="addtag_9798">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9798"
  >-</span><span
  class="button yellow"
  id="rating_z_9798"
  >0</span><span 
  class="button green"
  id="rating_p_9798"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/">
    2
    reply
  </a>

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9798/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment9803"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/1111/" target="_top">hoge</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/">#9803</a>(<script language="JavaScript">print_time(new Date("2010/01/06 14:43 GMT"));</script><noscript>2010/01/06 14:43 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>補題だけに集中してみた。

＜実行結果＞
Combinations of Blocks: 12
1111: 1
1122: 2
1144: 2
1244: 3
1334: 2
1445: 2
2222: 1
2244: 1
3333: 1
3345: 1
4444: 2
4455: 1</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Maybe</span><span class="p">(</span><span class="nv">mapMaybe</span><span class="p">)</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Tree</span><span class="p">(</span><span class="nv">unfoldTree</span><span class="p">,</span> <span class="nv">levels</span><span class="p">)</span>

<span class="nv">emptyBox</span> <span class="o">=</span> <span class="nv">replicate</span> <span class="mi">16</span> <span class="mi">0</span>
<span class="nv">b1</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>
<span class="nv">b2</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>
<span class="nv">b3</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
<span class="nv">b4</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]]</span>
<span class="nv">b5</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]]</span>

<span class="nv">packBlock</span>   <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">packBlock</span>   <span class="nv">b</span>  <span class="o">=</span> <span class="p">[</span><span class="nv">take</span> <span class="mi">4</span> <span class="nv">b</span><span class="p">]</span> <span class="o">++</span> <span class="p">(</span><span class="nv">packBlock</span> <span class="o">$</span> <span class="nv">drop</span> <span class="mi">4</span> <span class="nv">b</span><span class="p">)</span>
<span class="nv">unpackBlock</span> <span class="nv">b</span>  <span class="o">=</span> <span class="nv">concat</span> <span class="nv">b</span>

<span class="nv">rotateBlock</span> <span class="nv">d</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">d</span> <span class="nv">b</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">d</span> <span class="o">=</span> <span class="kr">case</span> <span class="p">(</span><span class="nv">d</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="mi">360</span> <span class="o">+</span> <span class="mi">360</span><span class="p">)</span> <span class="p">`</span><span class="nv">mod</span><span class="p">`</span> <span class="mi">360</span> <span class="kr">of</span>
                <span class="mi">0</span>   <span class="o">-&gt;</span> <span class="nv">id</span>
                <span class="mi">90</span>  <span class="o">-&gt;</span> <span class="nv">reverse</span> <span class="o">.</span> <span class="nv">transpose</span>
                <span class="mi">180</span> <span class="o">-&gt;</span> <span class="nv">rotateBlock</span>  <span class="mi">90</span> <span class="o">.</span> <span class="nv">rotateBlock</span> <span class="mi">90</span>
                <span class="mi">270</span> <span class="o">-&gt;</span> <span class="nv">rotateBlock</span> <span class="mi">180</span> <span class="o">.</span> <span class="nv">rotateBlock</span> <span class="mi">90</span>

<span class="nv">normalizeBlock</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">unfoldr</span> <span class="nv">f</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">b</span><span class="p">)</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="kr">_</span>     <span class="p">)</span> <span class="o">=</span> <span class="n">Nothing</span>
        <span class="nv">f</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">))</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">take</span> <span class="mi">4</span> <span class="o">$</span> <span class="nv">x</span> <span class="o">++</span> <span class="p">(</span><span class="nv">repeat</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="nv">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">xs</span><span class="p">))</span>
        <span class="nv">f</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span> <span class="kr">_</span>     <span class="p">)</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">replicate</span> <span class="mi">4</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="nv">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="p">[]))</span>

<span class="nv">rotatePattern</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">unfoldr</span> <span class="nv">f</span> <span class="nv">b</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">b&#39;</span>
          <span class="o">|</span> <span class="nv">null</span> <span class="nv">b&#39;</span> <span class="o">=</span> <span class="n">Nothing</span>
          <span class="o">|</span> <span class="nv">any</span> <span class="p">(</span><span class="o">/=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">$</span> <span class="nv">last</span> <span class="nv">b&#39;</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">b&#39;</span><span class="p">,</span> <span class="p">[])</span>
          <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">b&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nv">last</span> <span class="nv">b&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="nv">take</span> <span class="mi">3</span> <span class="nv">b&#39;</span><span class="p">))</span>

<span class="nv">generatePatterns</span> <span class="nv">b</span> <span class="o">=</span> <span class="nv">nub</span> <span class="o">$</span> <span class="p">[]</span> <span class="o">++</span> <span class="p">(</span><span class="nv">map</span> <span class="p">(</span><span class="nv">f</span> <span class="p">(</span><span class="nv">reverse</span> <span class="nv">b</span><span class="p">))</span> <span class="nv">l</span><span class="p">)</span> <span class="o">++</span> <span class="p">(</span><span class="nv">map</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">l</span><span class="p">)</span>
          <span class="kr">where</span> <span class="nv">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">270</span><span class="p">]</span>
                <span class="nv">f</span> <span class="nv">b</span> <span class="nv">d</span> <span class="o">=</span> <span class="nv">normalizeBlock</span> <span class="o">$</span> <span class="nv">rotateBlock</span> <span class="nv">d</span> <span class="nv">b</span>

<span class="nv">allPatterns</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">((</span><span class="nv">map</span> <span class="nv">unpackBlock</span><span class="p">)</span> <span class="o">.</span> <span class="nv">f</span><span class="p">)</span> <span class="p">[</span><span class="nv">b1</span><span class="p">,</span> <span class="nv">b2</span><span class="p">,</span> <span class="nv">b3</span><span class="p">,</span> <span class="nv">b4</span><span class="p">,</span> <span class="nv">b5</span><span class="p">]</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="nv">rotatePattern</span> <span class="o">.</span> <span class="nv">concatMap</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">transpose</span> <span class="o">.</span> <span class="nv">rotatePattern</span> <span class="o">.</span> <span class="nv">transpose</span><span class="p">)</span>
            <span class="o">.</span> <span class="nv">generatePatterns</span>

<span class="nv">patternsToBlocks</span> <span class="nv">ps</span> <span class="o">=</span> <span class="nv">sort</span> <span class="o">$</span> <span class="nv">f</span> <span class="nv">ps</span> <span class="nv">allPatterns</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="p">[]</span>       <span class="kr">_</span>           <span class="o">=</span> <span class="s">&quot;&quot;</span>
        <span class="nv">f</span> <span class="nv">pps&#39;</span><span class="o">@</span><span class="p">(</span><span class="nv">p&#39;</span><span class="o">:</span><span class="nv">ps&#39;</span><span class="p">)</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">find</span> <span class="p">(</span><span class="o">==</span> <span class="nv">p&#39;</span><span class="p">)</span> <span class="nv">x</span> <span class="kr">of</span>
                              <span class="n">Just</span> <span class="kr">_</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">show</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">allPatterns</span> <span class="o">-</span> <span class="nv">length</span> <span class="nv">xs</span><span class="p">))</span> <span class="o">++</span> <span class="p">(</span><span class="nv">f</span> <span class="nv">ps&#39;</span> <span class="nv">allPatterns</span><span class="p">)</span>
                              <span class="nv">otherwise</span> <span class="o">-&gt;</span> <span class="nv">f</span> <span class="nv">pps&#39;</span> <span class="nv">xs</span>

<span class="nv">rawSolutions</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">sort</span><span class="o">.</span> <span class="nv">snd</span><span class="p">)</span> <span class="o">$</span> <span class="nv">levels</span> <span class="p">(</span><span class="nv">unfoldTree</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">emptyBox</span><span class="p">,</span> <span class="p">[]))</span> <span class="o">!!</span> <span class="mi">4</span>
  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">x</span><span class="o">@</span><span class="p">(</span><span class="nv">b</span><span class="p">,</span> <span class="nv">ps</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">mapMaybe</span> <span class="nv">g</span> <span class="o">$</span> <span class="nv">concat</span> <span class="nv">allPatterns</span><span class="p">)</span>
          <span class="kr">where</span> <span class="nv">g</span> <span class="nv">p</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">any</span> <span class="p">(</span><span class="mi">1</span> <span class="o">&lt;</span><span class="p">)</span> <span class="nv">b&#39;</span> <span class="kr">then</span> <span class="n">Nothing</span> <span class="kr">else</span> <span class="n">Just</span> <span class="p">(</span><span class="nv">b&#39;</span><span class="p">,</span> <span class="nv">p</span> <span class="o">:</span> <span class="nv">ps</span><span class="p">)</span>
                  <span class="kr">where</span> <span class="nv">b&#39;</span> <span class="o">=</span> <span class="nv">zipWith</span> <span class="p">(</span><span class="o">+</span><span class="p">)</span> <span class="nv">b</span> <span class="nv">p</span>

<span class="nv">solutions</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">patternsToBlocks</span> <span class="p">(</span><span class="nv">head</span> <span class="nv">x</span><span class="p">),</span> <span class="nv">x</span><span class="p">))</span>
            <span class="o">$</span> <span class="nv">filterPatterns</span> <span class="o">$</span> <span class="nv">groupByPatterns</span> <span class="o">$</span> <span class="nv">nub</span> <span class="nv">rawSolutions</span>
              <span class="kr">where</span> <span class="nv">groupByPatterns</span> <span class="o">=</span> <span class="nv">f</span> <span class="o">.</span> <span class="nv">g</span>
                      <span class="kr">where</span> <span class="nv">f</span> <span class="o">=</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="o">\</span><span class="nv">x1</span> <span class="nv">x2</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">patternsToBlocks</span> <span class="nv">x1</span><span class="p">)</span> <span class="o">==</span> <span class="p">(</span><span class="nv">patternsToBlocks</span> <span class="nv">x2</span><span class="p">))</span>
                            <span class="nv">g</span> <span class="o">=</span> <span class="nv">sortBy</span>  <span class="p">(</span><span class="o">\</span><span class="nv">x1</span> <span class="nv">x2</span> <span class="o">-&gt;</span> <span class="nv">compare</span> <span class="p">(</span><span class="nv">patternsToBlocks</span> <span class="nv">x1</span><span class="p">)</span> <span class="p">(</span><span class="nv">patternsToBlocks</span> <span class="nv">x2</span><span class="p">))</span>
                    <span class="nv">filterPatterns</span>  <span class="o">=</span> <span class="nv">map</span> <span class="nv">f</span>
                      <span class="kr">where</span> <span class="nv">f</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
                            <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">x</span> <span class="o">:</span> <span class="p">(</span><span class="nv">f</span> <span class="o">$</span> <span class="nv">filter</span> <span class="nv">g</span> <span class="nv">xs</span><span class="p">)</span>
                              <span class="kr">where</span> <span class="nv">g</span> <span class="nv">p</span> <span class="o">=</span>  <span class="nv">h</span> <span class="nv">x</span> <span class="o">/=</span> <span class="nv">h</span> <span class="nv">p</span>
                                    <span class="nv">h</span> <span class="o">=</span> <span class="nv">sort</span> <span class="o">.</span> <span class="nv">concatMap</span> <span class="p">(</span><span class="nv">generatePatterns</span> <span class="o">.</span> <span class="nv">packBlock</span><span class="p">)</span>

<span class="nv">printResult</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="c1">-- 箱につめることができる積み木の組み合わせの総数</span>
    <span class="nv">putStrLn</span> <span class="o">$</span> <span class="s">&quot;Combinations of Blocks: &quot;</span>   <span class="o">++</span> <span class="p">(</span><span class="nv">show</span> <span class="o">$</span> <span class="nv">length</span> <span class="nv">solutions</span><span class="p">)</span>

    <span class="c1">-- 上記総数を、異なる詰め方の個数別にカウント</span>
    <span class="nv">flip</span> <span class="nv">mapM_</span> <span class="nv">solutions</span> <span class="o">$</span> <span class="o">\</span><span class="nv">x</span> <span class="o">-&gt;</span> <span class="nv">putStrLn</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">x</span> <span class="o">++</span> <span class="s">&quot;: &quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">show</span> <span class="o">$</span> <span class="nv">length</span> <span class="o">$</span> <span class="nv">snd</span> <span class="nv">x</span><span class="p">))</span>

    <span class="c1">-- 組み合わせをテキストで出力</span>
    <span class="nv">p</span> <span class="nv">solutions</span>

  <span class="kr">where</span> <span class="nv">p</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="nv">f</span>
        <span class="nv">f</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">putStrLn</span> <span class="s">&quot;\n---------&quot;</span> <span class="o">&gt;&gt;</span> <span class="nv">putStrLn</span> <span class="p">(</span><span class="s">&quot;&lt;&quot;</span> <span class="o">++</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">x</span><span class="p">)</span> <span class="o">++</span> <span class="s">&quot;&gt;&quot;</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="nv">mapM_</span> <span class="nv">g</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">x</span><span class="p">)</span>
        <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">putStrLn</span> <span class="s">&quot;---------\n&quot;</span> <span class="o">&gt;&gt;</span> <span class="nv">mapM_</span> <span class="nv">h</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">packBlock</span> <span class="nv">x</span><span class="p">)</span>
        <span class="nv">h</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">mapM_</span> <span class="nv">print</span> <span class="nv">x</span> <span class="o">&gt;&gt;</span> <span class="nv">putStrLn</span> <span class="s">&quot;&quot;</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">printResult</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/addtag/" class="addtag" id="addtag_9803">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9803"
  >-</span><span
  class="button yellow"
  id="rating_z_9803"
  >0</span><span 
  class="button green"
  id="rating_p_9803"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/root/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/">
    1
    reply
  </a>

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9803/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment9833"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/1111/" target="_top">hoge</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9833/">#9833</a>(<script language="JavaScript">print_time(new Date("2010/01/18 14:49 GMT"));</script><noscript>2010/01/18 14:49 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>　解の同一視処理で、面倒なので反転、回転させた集合全体で比較していたのですが、それでは
不十分で漏れがありました。結局、地道に処理することに...。すいません。出直してきます...

Combinations of Blocks: 12
1111: 1
1122: 2
1144: 2
1244: 4
1334: 2
1445: 3
2222: 1
2244: 1
3333: 1
3345: 1
4444: 3
4455: 1

generatePatterns b = (map (f (reverse b)) l) ++ (map (f b) l)
          where l = [0, 90, 180, 270]
                f b d = normalizeBlock $ rotateBlock d b

allPatterns = map ((map unpackBlock) . f) [b1, b2, b3, b4, b5]
  where f = concatMap rotatePattern . concatMap (map transpose . rotatePattern . transpose)
            . nub . generatePatterns

solutions = map (\x -&gt; (patternsToBlocks (head x), x))
...
                    filterPatterns  = map f
                      where f [] = []
                            f (x:xs) = x : (f $ filter g xs)
                              where g p =  all (/= x) $ h p
                                    h = map sort . transpose . map (map unpackBlock . generatePatterns . packBlock)</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9833/addtag/" class="addtag" id="addtag_9833">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9833"
  >-</span><span
  class="button yellow"
  id="rating_z_9833"
  >0</span><span 
  class="button green"
  id="rating_p_9833"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9803/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9833/root/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9833/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment9800"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/1111/" target="_top">hoge</a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9800/">#9800</a>(<script language="JavaScript">print_time(new Date("2010/01/05 15:40 GMT"));</script><noscript>2010/01/05 15:40 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>　しまった。反転パターンを回転させてなかった。

generatePatterns b = concatMap verticalPatterns $ concatMap horizontalPatterns ps
  where ps = nub
             $ (map (\d -&gt; normalize $ rotate (reverse b) d) [0, 90, 180, 270])  -- 反転パターン
             ++ (map (\d -&gt; normalize $ rotate b d) [0, 90, 180, 270])           -- 回転パターン

＜実行結果＞
Number of solutions: 117

　なんか、怪しい数字になってしまった...</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9800/addtag/" class="addtag" id="addtag_9800">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9800"
  >-</span><span
  class="button yellow"
  id="rating_z_9800"
  >0</span><span 
  class="button green"
  id="rating_p_9800"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9798/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110408110729/http://ja.doukaku.org/comment/9800/root/"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9800/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  
    




<div class="comment" id="comment10542"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10542/">#10542</a>(<script language="JavaScript">print_time(new Date("2010/06/10 02:01 GMT"));</script><noscript>2010/06/10 02:01 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Download Free Best Films HD in the World.</p>
<p>&lt;a href=http://elegance-constitution-pocket-watch.zanuda.pp.ua/&gt;Harry Potter and the Deathly Hallows (2010) HDTV&lt;/a&gt;</p>
<p>&lt;a href=http://free-club-pogo-promo-code.zanuda.pp.ua/&gt;&lt;img&gt;http://kino-manija.ru/images/stories/films_1/harry-potter-and-the-deathly-hallows%201.jpg&lt;/img&gt;&lt;/a&gt;
&lt;a href=http://dog-knot-cum-trailer.zanuda.pp.ua/&gt;dog knot cum trailer&lt;/a&gt; free fake magazine cover
&lt;a href=http://comdey-show-san-diego.zanuda.pp.ua/&gt;comdey show san diego&lt;/a&gt; detoxifying foot patch tv commercial
&lt;a href=http://apple-ipod-shuffle-dock.zanuda.pp.ua/&gt;apple ipod shuffle dock&lt;/a&gt; escaflowne movie images
&lt;a href=http://consumer-reviews-gas-range.zanuda.pp.ua/&gt;consumer reviews gas range&lt;/a&gt; free jet express
&lt;a href=http://bellingham-airbrush-artist.zanuda.pp.ua/&gt;bellingham airbrush artist&lt;/a&gt; accura legend review mirror
<a class="reference" href="/web/20110408110729/http://colibri-deer-pocket-watch.zanuda.pp.ua/">http://colibri-deer-pocket-watch.zanuda.pp.ua/</a> david walliams sex tape
<a class="reference" href="/web/20110408110729/http://acne-free-diets.zanuda.pp.ua/">http://acne-free-diets.zanuda.pp.ua/</a> free erotic stiories
<a class="reference" href="/web/20110408110729/http://download-art-instruction-videos.zanuda.pp.ua/">http://download-art-instruction-videos.zanuda.pp.ua/</a> free educational interactive kid games
<a class="reference" href="/web/20110408110729/http://best-christmas-pageant-ever-downloads.zanuda.pp.ua/">http://best-christmas-pageant-ever-downloads.zanuda.pp.ua/</a> attainment movie
<a class="reference" href="/web/20110408110729/http://free-kyocera-mobile-phone-ringtones.zanuda.pp.ua/">http://free-kyocera-mobile-phone-ringtones.zanuda.pp.ua/</a> free acroread</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20110408110729/http://dvd-overnight.zanuda.pp.ua/">Harry Potter and the Deathly Hallows (2010) HDTV</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10542/addtag/" class="addtag" id="addtag_10542">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10542"
  >-</span><span
  class="button yellow"
  id="rating_z_10542"
  >0</span><span 
  class="button green"
  id="rating_p_10542"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10542/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment9801"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/498/" target="_top">uho</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9801/">#9801</a>(<script language="JavaScript">print_time(new Date("2010/01/06 08:50 GMT"));</script><noscript>2010/01/06 08:50 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>ごちゃごちゃと長くなってしまったが、答えは出たっぽいので投稿。組み合わせ数：11、重複の無い詰め方数：15</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">hakodume</span>
<span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">var</span> <span class="n">a1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">a2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">1</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">1</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">1</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">1</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>

            <span class="n">var</span> <span class="n">b</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">2</span><span class="p">,</span><span class="m">2</span><span class="k">}</span>
                       <span class="k">}</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>

            <span class="n">var</span> <span class="n">c1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">0</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">3</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">c2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">3</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">3</span><span class="p">,</span><span class="m">0</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">3</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">c3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">3</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">c4</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="p">,</span><span class="m">3</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">3</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">d1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">4</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">4</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">d2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">4</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">4</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">4</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">4</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">d3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">4</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">4</span><span class="p">,</span><span class="m">4</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">4</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">d4</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">4</span><span class="p">,</span><span class="m">4</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">4</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">e1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">5</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="p">,</span><span class="m">5</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">5</span><span class="p">);</span>
            <span class="n">var</span> <span class="n">e2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Mino</span><span class="p">(</span><span class="k">new</span> <span class="kt">int</span><span class="p">[,]</span><span class="k">{</span>
                            <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">5</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">5</span><span class="p">,</span><span class="m">5</span><span class="k">}</span><span class="p">,</span>
                            <span class="k">{</span><span class="m">5</span><span class="p">,</span><span class="m">0</span><span class="k">}</span>
                        <span class="k">}</span><span class="p">,</span><span class="m">5</span><span class="p">);</span>

            <span class="n">var</span> <span class="n">minos</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Mino</span><span class="p">&gt;</span> <span class="k">{</span> <span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">,</span> <span class="n">c4</span><span class="p">,</span> <span class="n">d1</span><span class="p">,</span> <span class="n">d2</span><span class="p">,</span> <span class="n">d3</span><span class="p">,</span> <span class="n">d4</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">e2</span> <span class="k">}</span><span class="p">;</span>

            <span class="n">Box</span> <span class="n">box</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Box</span><span class="p">(</span><span class="n">minos</span><span class="p">);</span>

            <span class="n">box</span><span class="p">.</span><span class="n">Solve</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
            <span class="n">box</span><span class="p">.</span><span class="n">DisplayAll</span><span class="p">();</span>
        <span class="k">}</span>

        <span class="k">class</span> <span class="nc">Mino</span>
        <span class="k">{</span>
            <span class="k">private</span> <span class="kt">int</span><span class="p">[,]</span> <span class="n">mino</span><span class="p">;</span>

            <span class="k">public</span> <span class="nf">Mino</span><span class="p">(</span> <span class="kt">int</span><span class="p">[,]</span> <span class="n">mino</span><span class="p">,</span> <span class="kt">int</span> <span class="n">pattern</span> <span class="p">)</span>
            <span class="k">{</span>
                <span class="k">this</span><span class="p">.</span><span class="n">mino</span> <span class="p">=</span> <span class="n">mino</span><span class="p">;</span>
                <span class="k">this</span><span class="p">.</span><span class="n">Pattern</span> <span class="p">=</span> <span class="n">pattern</span><span class="p">;</span>
            <span class="k">}</span>

            <span class="k">public</span> <span class="kt">int</span> <span class="n">RowLength</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">mino</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="m">0</span><span class="p">);</span> <span class="k">}</span> <span class="k">}</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">ColomnLength</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">mino</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="m">1</span><span class="p">);</span> <span class="k">}</span> <span class="k">}</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="n">Pattern</span> <span class="k">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="k">}</span>
            <span class="k">public</span> <span class="kt">int</span> <span class="nf">GetValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">mino</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">];</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="k">class</span> <span class="nc">Box</span>
        <span class="k">{</span>
            <span class="k">private</span> <span class="kt">int</span><span class="p">[,]</span> <span class="n">box</span> <span class="p">=</span> <span class="k">{</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span>
                       <span class="k">}</span><span class="p">;</span>
            <span class="k">private</span> <span class="kt">int</span> <span class="n">RowLength</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">box</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="m">0</span><span class="p">);</span> <span class="k">}</span> <span class="k">}</span>
            <span class="k">private</span> <span class="kt">int</span> <span class="n">ColomnLength</span> <span class="k">{</span> <span class="k">get</span> <span class="k">{</span> <span class="k">return</span> <span class="n">box</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="m">1</span><span class="p">);</span> <span class="k">}</span> <span class="k">}</span>
            <span class="k">private</span> <span class="kt">int</span> <span class="nf">GetValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">box</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">];</span>
            <span class="k">}</span>
            <span class="k">private</span> <span class="k">void</span> <span class="nf">SetValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="n">box</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">]</span> <span class="p">=</span> <span class="n">value</span><span class="p">;</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Mino</span><span class="p">&gt;</span> <span class="n">minos</span><span class="p">;</span>

            <span class="k">public</span> <span class="nf">Box</span><span class="p">(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">Mino</span><span class="p">&gt;</span> <span class="n">minos</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">this</span><span class="p">.</span><span class="n">minos</span> <span class="p">=</span> <span class="n">minos</span><span class="p">;</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">[,]&gt;</span> <span class="n">boxes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">[,]&gt;();</span>
            <span class="k">private</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">pattern</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="m">4</span><span class="p">];</span>
            <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">[]&gt;</span> <span class="n">patterns</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">[]&gt;();</span>

            <span class="k">public</span> <span class="k">void</span> <span class="nf">DisplayAll</span><span class="p">()</span>
            <span class="k">{</span>
                <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">b</span> <span class="k">in</span> <span class="n">boxes</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">RowLength</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span>
                    <span class="k">{</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">ColomnLength</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="s">&quot;{0}&quot;</span><span class="p">,</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]);</span>
                        <span class="k">}</span>
                        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
                    <span class="k">}</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
                <span class="k">}</span>

                <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">p</span> <span class="k">in</span> <span class="n">patterns</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">i</span> <span class="k">in</span> <span class="n">p</span><span class="p">)</span>
                    <span class="k">{</span>
                        <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                    <span class="k">}</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>
                <span class="k">}</span>

                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;組み合わせ積み木のパターン数：{0}&quot;</span><span class="p">,</span> <span class="n">patterns</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;重複のない詰め方の数：{0}&quot;</span><span class="p">,</span> <span class="n">boxes</span><span class="p">.</span><span class="n">Count</span><span class="p">);</span>
            <span class="k">}</span>
            
            <span class="k">private</span> <span class="k">void</span> <span class="nf">Record</span><span class="p">()</span>
            <span class="k">{</span>
                <span class="n">var</span> <span class="n">pattern_sorted</span> <span class="p">=</span> <span class="n">pattern</span><span class="p">.</span><span class="n">Clone</span><span class="p">()</span> <span class="k">as</span> <span class="kt">int</span><span class="p">[];</span>
                <span class="n">Array</span><span class="p">.</span><span class="n">Sort</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(</span><span class="n">pattern_sorted</span><span class="p">);</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">ExistPatternMino</span><span class="p">(</span><span class="n">pattern_sorted</span><span class="p">))</span>
                <span class="k">{</span>
                    <span class="n">patterns</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">pattern_sorted</span><span class="p">);</span>
                <span class="k">}</span>

                <span class="k">if</span> <span class="p">(!</span><span class="n">ExistPatternBox</span><span class="p">(</span><span class="n">box</span><span class="p">))</span>
                <span class="k">{</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">box</span><span class="p">.</span><span class="n">Clone</span><span class="p">()</span> <span class="k">as</span> <span class="kt">int</span><span class="p">[,]);</span>
                <span class="k">}</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ExistPatternMino</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span> <span class="n">pattern</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">patterns</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span> <span class="n">p</span> <span class="p">=&gt;</span> <span class="n">EqualArray</span><span class="p">(</span> <span class="n">p</span><span class="p">,</span> <span class="n">pattern</span> <span class="p">)</span> <span class="p">);</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">ExistPatternBox</span><span class="p">(</span><span class="kt">int</span><span class="p">[,]</span> <span class="n">box</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">box</span><span class="p">))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_90</span> <span class="p">)))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_180</span> <span class="p">)))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_270</span> <span class="p">)))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_y</span> <span class="p">)))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_90y</span> <span class="p">)))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_180y</span> <span class="p">)))</span> <span class="p">||</span>
                    <span class="n">boxes</span><span class="p">.</span><span class="n">Any</span><span class="p">(</span><span class="n">r</span> <span class="p">=&gt;</span> <span class="n">EqualBox</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">Rotate</span><span class="p">(</span><span class="n">box</span><span class="p">,</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_270y</span> <span class="p">)));</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">int</span><span class="p">[,]</span> <span class="n">Rotate</span><span class="p">(</span><span class="kt">int</span><span class="p">[,]</span> <span class="n">box_s</span><span class="p">,</span> <span class="n">Rotation</span> <span class="n">rotation</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="kt">int</span><span class="p">[,]</span> <span class="n">box_d</span> <span class="p">=</span> <span class="k">{</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span><span class="p">,</span>
                           <span class="k">{</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="k">}</span>
                       <span class="k">}</span><span class="p">;</span>
                
                <span class="k">switch</span> <span class="p">(</span><span class="n">rotation</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_90</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="m">3</span> <span class="p">-</span> <span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_180</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="m">3</span> <span class="p">-</span> <span class="n">i</span><span class="p">,</span> <span class="m">3</span> <span class="p">-</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_270</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="m">3</span> <span class="p">-</span> <span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_y</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="m">3</span> <span class="p">-</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_90y</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_180y</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="m">3</span> <span class="p">-</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                    <span class="k">case</span> <span class="n">Rotation</span><span class="p">.</span><span class="n">_270y</span><span class="p">:</span>
                        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                        <span class="k">{</span>
                            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                            <span class="k">{</span>
                                <span class="n">box_d</span><span class="p">[</span><span class="m">3</span> <span class="p">-</span> <span class="n">j</span><span class="p">,</span> <span class="m">3</span> <span class="p">-</span> <span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">box_s</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">];</span>
                            <span class="k">}</span>
                        <span class="k">}</span>
                        <span class="k">break</span><span class="p">;</span>
                <span class="k">}</span>

                <span class="k">return</span> <span class="n">box_d</span><span class="p">;</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="k">enum</span> <span class="n">Rotation</span>
            <span class="k">{</span>
                <span class="n">_90</span><span class="p">,</span>
                <span class="n">_180</span><span class="p">,</span>
                <span class="n">_270</span><span class="p">,</span>
                <span class="n">_y</span><span class="p">,</span>
                <span class="n">_90y</span><span class="p">,</span>
                <span class="n">_180y</span><span class="p">,</span>
                <span class="n">_270y</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">EqualBox</span><span class="p">(</span><span class="kt">int</span><span class="p">[,]</span> <span class="n">lhs</span><span class="p">,</span> <span class="kt">int</span><span class="p">[,]</span> <span class="n">rhs</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">lhs</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="m">0</span><span class="p">)).</span><span class="n">All</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span>
                    <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">lhs</span><span class="p">.</span><span class="n">GetLength</span><span class="p">(</span><span class="m">1</span><span class="p">)).</span><span class="n">All</span><span class="p">(</span><span class="n">j</span> <span class="p">=&gt;</span>
                        <span class="n">lhs</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="n">rhs</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span>
                    <span class="p">));</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">EqualArray</span><span class="p">(</span><span class="kt">int</span><span class="p">[]</span> <span class="n">lhs</span><span class="p">,</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">rhs</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">lhs</span><span class="p">.</span><span class="n">Length</span><span class="p">).</span><span class="n">All</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span> <span class="n">lhs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">==</span> <span class="n">rhs</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CanPut</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="n">Mino</span> <span class="n">mino</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">row</span> <span class="p">+</span> <span class="n">mino</span><span class="p">.</span><span class="n">RowLength</span> <span class="p">&gt;</span> <span class="n">RowLength</span> <span class="p">||</span>    <span class="n">col</span> <span class="p">+</span> <span class="n">mino</span><span class="p">.</span><span class="n">ColomnLength</span> <span class="p">&gt;</span> <span class="n">ColomnLength</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
                <span class="k">}</span>

                <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">mino</span><span class="p">.</span><span class="n">RowLength</span><span class="p">).</span><span class="n">Any</span><span class="p">(</span><span class="n">i</span> <span class="p">=&gt;</span>
                    <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">mino</span><span class="p">.</span><span class="n">ColomnLength</span><span class="p">).</span><span class="n">Any</span><span class="p">(</span><span class="n">j</span> <span class="p">=&gt;</span>
                        <span class="n">GetValue</span><span class="p">(</span><span class="n">row</span> <span class="p">+</span> <span class="n">i</span><span class="p">,</span> <span class="n">col</span> <span class="p">+</span> <span class="n">j</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">mino</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">))</span> <span class="p">?</span> <span class="k">false</span> <span class="p">:</span> <span class="k">true</span><span class="p">;</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="k">void</span> <span class="nf">Put</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="n">Mino</span> <span class="n">mino</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">mino</span><span class="p">.</span><span class="n">RowLength</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="k">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">mino</span><span class="p">.</span><span class="n">ColomnLength</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                    <span class="k">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">mino</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="n">SetValue</span><span class="p">(</span><span class="n">row</span><span class="p">+</span><span class="n">i</span><span class="p">,</span> <span class="n">col</span><span class="p">+</span><span class="n">j</span><span class="p">,</span> <span class="n">mino</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
                        <span class="k">}</span>
                    <span class="k">}</span>
                <span class="k">}</span>
                <span class="n">pattern</span><span class="p">[</span><span class="n">n</span> <span class="p">-</span> <span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">mino</span><span class="p">.</span><span class="n">Pattern</span><span class="p">;</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="k">void</span> <span class="nf">Remove</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">,</span> <span class="kt">int</span> <span class="n">col</span><span class="p">,</span> <span class="n">Mino</span> <span class="n">mino</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">mino</span><span class="p">.</span><span class="n">RowLength</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
                <span class="k">{</span>
                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">mino</span><span class="p">.</span><span class="n">ColomnLength</span><span class="p">;</span> <span class="n">j</span><span class="p">++)</span>
                    <span class="k">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">mino</span><span class="p">.</span><span class="n">GetValue</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="n">SetValue</span><span class="p">(</span><span class="n">row</span><span class="p">+</span><span class="n">i</span><span class="p">,</span> <span class="n">col</span><span class="p">+</span><span class="n">j</span><span class="p">,</span> <span class="m">0</span><span class="p">);</span>
                        <span class="k">}</span>
                    <span class="k">}</span>
                <span class="k">}</span>
            <span class="k">}</span>

            <span class="k">public</span> <span class="k">void</span> <span class="nf">Solve</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">row</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">row</span> <span class="p">&lt;</span> <span class="n">RowLength</span><span class="p">;</span> <span class="n">row</span><span class="p">++)</span>
                <span class="k">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">CheckFilledRow</span><span class="p">(</span><span class="n">row</span><span class="p">))</span>
                    <span class="k">{</span>
                        <span class="k">continue</span><span class="p">;</span>
                    <span class="k">}</span>

                    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">col</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">col</span> <span class="p">&lt;</span> <span class="n">ColomnLength</span><span class="p">;</span> <span class="n">col</span><span class="p">++)</span>
                    <span class="k">{</span>
                        <span class="k">if</span> <span class="p">(</span><span class="n">CheckFilledColomn</span><span class="p">(</span><span class="n">col</span><span class="p">))</span>
                        <span class="k">{</span>
                            <span class="k">continue</span><span class="p">;</span>
                        <span class="k">}</span>

                        <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">mino</span> <span class="k">in</span> <span class="n">minos</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="k">if</span> <span class="p">(</span><span class="n">CanPut</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span> <span class="n">mino</span><span class="p">))</span>
                            <span class="k">{</span>
                                <span class="n">Put</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span> <span class="n">mino</span><span class="p">,</span> <span class="n">n</span><span class="p">);</span>

                                <span class="k">if</span> <span class="p">(</span><span class="n">n</span> <span class="p">!=</span> <span class="m">4</span><span class="p">)</span>
                                <span class="k">{</span>
                                    <span class="n">Solve</span><span class="p">(</span><span class="n">n</span> <span class="p">+</span> <span class="m">1</span><span class="p">);</span>
                                <span class="k">}</span>
                                <span class="k">else</span>
                                <span class="k">{</span>
                                    <span class="n">Record</span><span class="p">();</span>
                                <span class="k">}</span>
                                <span class="n">Remove</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">,</span> <span class="n">mino</span><span class="p">);</span>
                            <span class="k">}</span>
                        <span class="k">}</span>

                        <span class="k">if</span> <span class="p">(</span><span class="n">GetValue</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span>
                        <span class="k">{</span>
                            <span class="k">return</span><span class="p">;</span>
                        <span class="k">}</span>
                    <span class="k">}</span>
                <span class="k">}</span>
            <span class="k">}</span>

            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CheckFilledRow</span><span class="p">(</span><span class="kt">int</span> <span class="n">row</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">ColomnLength</span><span class="p">).</span><span class="n">All</span><span class="p">(</span><span class="n">col</span> <span class="p">=&gt;</span> <span class="n">GetValue</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="k">private</span> <span class="kt">bool</span> <span class="nf">CheckFilledColomn</span><span class="p">(</span><span class="kt">int</span> <span class="n">col</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">RowLength</span><span class="p">).</span><span class="n">All</span><span class="p">(</span><span class="n">row</span> <span class="p">=&gt;</span> <span class="n">GetValue</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span> <span class="p">!=</span> <span class="m">0</span><span class="p">);</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9801/addtag/" class="addtag" id="addtag_9801">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9801/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9801/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9801"
  >-</span><span
  class="button yellow"
  id="rating_z_9801"
  >0</span><span 
  class="button green"
  id="rating_p_9801"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9801/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  
    




<div class="comment" id="comment10496"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10496/">#10496</a>(<script language="JavaScript">print_time(new Date("2010/05/07 11:28 GMT"));</script><noscript>2010/05/07 11:28 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Download Free Best Films HD in the World.</p>
<p>&lt;a href=http://2005-wilson-stock-trailer.zanjatie.pp.ua/&gt;Harry Potter and the Deathly Hallows (2010) HDTV&lt;/a&gt;</p>
<p>&lt;a href=http://awsome-show.zanjatie.pp.ua/&gt;&lt;img&gt;http://kino-manija.ru/images/stories/films_1/harry-potter-and-the-deathly-hallows%201.jpg&lt;/img&gt;&lt;/a&gt;
&lt;a href=http://blackberry-video-format.zanjatie.pp.ua/&gt;blackberry video format&lt;/a&gt; cgx download
&lt;a href=http://free-amatuer-spanking-video.zanjatie.pp.ua/&gt;free amatuer spanking video&lt;/a&gt;  free mandolin gospel tabs
&lt;a href=http://breathing-clip-art.zanjatie.pp.ua/&gt;breathing clip art&lt;/a&gt; download sound driver for emachines
&lt;a href=http://amazon-ca-video-catalogs-books.zanjatie.pp.ua/&gt;amazon ca video catalogs books&lt;/a&gt; comedy improv new york classes
&lt;a href=http://dairy-free-cornbread-recipe.zanjatie.pp.ua/&gt;dairy free cornbread recipe&lt;/a&gt; complaint department direct tv
<a class="reference" href="/web/20110408110729/http://best-virus-free-freware.zanjatie.pp.ua/">http://best-virus-free-freware.zanjatie.pp.ua/</a>  350gt review
<a class="reference" href="/web/20110408110729/http://dvd-stock-sounds.zanjatie.pp.ua/">http://dvd-stock-sounds.zanjatie.pp.ua/</a>  free download of ronald jenkees
<a class="reference" href="/web/20110408110729/http://free-bicycle-photos.zanjatie.pp.ua/">http://free-bicycle-photos.zanjatie.pp.ua/</a>  amateur mature oral videos
<a class="reference" href="/web/20110408110729/http://corey-stevens-review.zanjatie.pp.ua/">http://corey-stevens-review.zanjatie.pp.ua/</a>  canon pixma 780 driver download
<a class="reference" href="/web/20110408110729/http://free-dial-up-software.zanjatie.pp.ua/">http://free-dial-up-software.zanjatie.pp.ua/</a>  cleveland browns online greeting cards</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20110408110729/http://cartoon-dragon-free-online.zanjatie.pp.ua/">Harry Potter and the Deathly Hallows (2010) HDTV...</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/10496/addtag/" class="addtag" id="addtag_10496">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_10496"
  >-</span><span
  class="button yellow"
  id="rating_z_10496"
  >0</span><span 
  class="button green"
  id="rating_p_10496"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/10496/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment11219"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/11219/">#11219</a>(<script language="JavaScript">print_time(new Date("2010/07/01 01:54 GMT"));</script><noscript>2010/07/01 01:54 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Download Free Best Films HD in the World.</p>
<p>&lt;a href=http://free-language-translation-services-online.zanovo.pp.ua/&gt;Harry Potter and the Deathly Hallows (2010) HDTV&lt;/a&gt;</p>
<p>&lt;a href=http://aerosmith-show-az.zanovo.pp.ua/&gt;&lt;img&gt;http://kino-manija.ru/images/stories/films_1/harry-potter-and-the-deathly-hallows%201.jpg&lt;/img&gt;&lt;/a&gt;
&lt;a href=http://avi-mantra.zanovo.pp.ua/&gt;avi mantra&lt;/a&gt; corrugated boxes order online
&lt;a href=http://charlotte-free-legal-advice.zanovo.pp.ua/&gt;charlotte free legal advice&lt;/a&gt; free guyvideo porns
&lt;a href=http://agony-column-torrent.zanovo.pp.ua/&gt;agony column torrent&lt;/a&gt; dehp free symbol
&lt;a href=http://free-micro-sd-cards.zanovo.pp.ua/&gt;free micro sd cards&lt;/a&gt; carrot cake clip art
&lt;a href=http://2006-disciplinary-review-cimmittee.zanovo.pp.ua/&gt;2006 disciplinary review cimmittee&lt;/a&gt; arca remax video game
<a class="reference" href="/web/20110408110729/http://free-ms-office-2006-download.zanovo.pp.ua/">http://free-ms-office-2006-download.zanovo.pp.ua/</a> free grant companies for mortgages
<a class="reference" href="/web/20110408110729/http://boys-to-girls-reality-show.zanovo.pp.ua/">http://boys-to-girls-reality-show.zanovo.pp.ua/</a> fre fps creator download
<a class="reference" href="/web/20110408110729/http://cctv-online-training.zanovo.pp.ua/">http://cctv-online-training.zanovo.pp.ua/</a> free gin rummy games online
<a class="reference" href="/web/20110408110729/http://firefox-v20014-download.zanovo.pp.ua/">http://firefox-v20014-download.zanovo.pp.ua/</a> download free full games sanandreas
<a class="reference" href="/web/20110408110729/http://emerson-tv-parts-and-sevice.zanovo.pp.ua/">http://emerson-tv-parts-and-sevice.zanovo.pp.ua/</a> download free maker resume software</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20110408110729/http://free-animations-baseball.zanovo.pp.ua/">Harry Potter and the Deathly Hallows (2010) HDTV</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/11219/addtag/" class="addtag" id="addtag_11219">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_11219"
  >-</span><span
  class="button yellow"
  id="rating_z_11219"
  >0</span><span 
  class="button green"
  id="rating_p_11219"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/11219/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment9806"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20110408110729/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9806/">#9806</a>(<script language="JavaScript">print_time(new Date("2010/01/09 13:00 GMT"));</script><noscript>2010/01/09 13:00 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk で。つめることができる組み合わせを列挙させてみました。ブロックは画素で表現し、４×４の領域を塗りつぶせる配置があるかで判断しています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre>| blocks extent rec results |

blocks := {
  Form extent: 4@1 fromArray: #(2r1111e28) offset: nil.
  Form extent: 2@2 fromArray: #(2r11e30 2r11e30) offset: nil.
  Form extent: 3@2 fromArray: #(2r111e29 2r010e29) offset: nil.
  Form extent: 3@2 fromArray: #(2r111e29 2r100e29) offset: nil.
  Form extent: 3@2 fromArray: #(2r110e29 2r011e29) offset: nil}.
extent := 4@4.

blocks := blocks collect: [:ori |
  | specs |
  specs := Set new.
  #(0 90 180 270) do: [:angle |
    | rot |
    rot := (ori rotateBy: angle) trimBordersOfColor: Color white.
    specs add: {rot extent. rot bits}.
    rot := rot flipBy: #horizontal centerAt: 0@0.
    specs add: {rot extent. rot bits}].
    specs collect: [:spec | Form extent: spec first depth: 1 bits: spec second]].

results := Set new.
(1 to: 5) asDigitsToPower: 4 do: [:comb |
  comb isSorted ifTrue: [
    | box |
    comb printString displayAt: 0@0.
    box := Form extent: extent.
    rec := nil.
    rec := [:prevBox :rest |
      | trials currBox |
      rest ifEmpty: [results add: comb copy] ifNotEmpty: [
        trials := blocks at: rest first.
        trials do: [:currBlk |
        (0 to: 4 - currBlk width) do: [:xx | (0 to: 4 - currBlk height) do: [:yy | 
          currBlk displayOn: (currBox := prevBox deepCopy) at: xx@yy rule: Form paint.
          currBox primCountBits = (4 * (5 - rest size)) ifTrue: [
            rec copy fixTemps value: currBox value: rest allButFirst]]]]]].
    rec copy fixTemps value: box value: comb]].
^results asArray sort: [:a :b | (b - a detect: [:delta | delta abs &gt; 0] ifNone: [0]) &gt;= 0]

&quot;=&gt; #(
  #(1 1 1 1)
  #(1 1 2 2)
  #(1 1 4 4)
  #(1 2 4 4)
  #(1 3 3 4)
  #(1 4 4 5)
  #(2 2 2 2)
  #(2 2 4 4)
  #(3 3 3 3)
  #(3 3 4 5)
  #(4 4 4 4)
  #(4 4 5 5))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9806/addtag/" class="addtag" id="addtag_9806">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9806/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9806/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9806"
  >-</span><span
  class="button yellow"
  id="rating_z_9806"
  >0</span><span 
  class="button green"
  id="rating_p_9806"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9806/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment9791"><!--dj-->
  <p class="banner"><a href="/web/20110408110729/http://ja.doukaku.org/user/1085/" target="_top"> U D </a>

	
	&nbsp;
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9791/">#9791</a>(<script language="JavaScript">print_time(new Date("2010/01/04 14:11 GMT"));</script><noscript>2010/01/04 14:11 GMT</noscript>)
	
	
	
	[<a href="/web/20110408110729/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>最近 Ruby を書いていなかったので、復習がてら。余力は残っていない（汗；）ので、箱にピッタリつめられるかの判定のみ。しかしこのやり方だと、組み合わせ総数を求められるように改造するのは、難しそうな気がする…。</p>
<ul class="simple">
<li>[I,I,I,I] #=&gt; true</li>
<li>[O,O,O,O] #=&gt; true</li>
<li>[I,O,O,T] #=&gt; false</li>
<li>[L,Z,L,Z] #=&gt; true</li>
<li>[I,Z,Z,Z] #=&gt; false</li>
</ul>
<p>※1をIミノ、2をOミノ、3をTミノ、4をLミノ、5をZミノと表記しています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">QuadraticArray</span> <span class="o">&lt;</span> <span class="nb">Array</span>
  <span class="k">def</span> <span class="nf">col_size</span>
    <span class="k">return</span> <span class="nb">self</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">length</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">row_size</span>
    <span class="k">return</span> <span class="nb">self</span><span class="o">.</span><span class="n">length</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">each_elem</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fn</span><span class="p">)</span>
    <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">row_size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">col_size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">j</span><span class="o">|</span>
        <span class="n">fn</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Mino</span> <span class="o">&lt;</span> <span class="no">QuadraticArray</span>
  <span class="k">def</span> <span class="nf">rot</span><span class="p">()</span>
    <span class="n">res</span> <span class="o">=</span> <span class="no">Mino</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">col_size</span><span class="p">){</span><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">row_size</span><span class="p">,</span> <span class="mi">0</span><span class="p">)}</span>
    <span class="n">each_elem</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">|</span> <span class="n">res</span><span class="o">[</span><span class="n">j</span><span class="o">][</span><span class="n">row_size</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="p">}</span>
    <span class="k">return</span> <span class="n">res</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">I</span> <span class="o">=</span> <span class="no">Mino</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]]</span>
<span class="n">O</span> <span class="o">=</span> <span class="no">Mino</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]]</span>
<span class="n">L</span> <span class="o">=</span> <span class="no">Mino</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="o">]]</span>
<span class="n">T</span> <span class="o">=</span> <span class="no">Mino</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="o">]]</span>
<span class="n">Z</span> <span class="o">=</span> <span class="no">Mino</span><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="o">]]</span>

<span class="k">def</span> <span class="nf">mirrors</span><span class="p">(</span><span class="o">*</span><span class="n">minos</span><span class="p">)</span>
  <span class="n">minos</span><span class="o">.</span><span class="n">clone</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">mino</span><span class="o">|</span> <span class="n">minos</span> <span class="o">&lt;&lt;</span> <span class="n">mino</span><span class="o">.</span><span class="n">reverse</span> <span class="p">}</span>
  <span class="k">return</span> <span class="n">minos</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rotations</span><span class="p">(</span><span class="n">mino</span><span class="p">)</span>
  <span class="n">minos</span> <span class="o">=</span> <span class="o">[</span><span class="n">mino</span><span class="o">]</span>
  <span class="mi">3</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="n">minos</span> <span class="o">&lt;&lt;</span> <span class="n">minos</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">rot</span> <span class="k">end</span>
  <span class="k">return</span> <span class="n">minos</span>
<span class="k">end</span>

<span class="no">BasicMinos</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">[]</span>
<span class="no">BasicMinos</span><span class="o">[</span><span class="n">I</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">I</span><span class="p">,</span> <span class="n">I</span><span class="o">.</span><span class="n">rot</span><span class="o">]</span>
<span class="no">BasicMinos</span><span class="o">[</span><span class="n">O</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="n">O</span><span class="o">]</span>
<span class="no">BasicMinos</span><span class="o">[</span><span class="n">T</span><span class="o">]</span> <span class="o">=</span> <span class="n">rotations</span><span class="p">(</span><span class="n">T</span><span class="p">)</span>
<span class="no">BasicMinos</span><span class="o">[</span><span class="n">L</span><span class="o">]</span> <span class="o">=</span> <span class="n">mirrors</span><span class="p">(</span><span class="o">*</span><span class="n">rotations</span><span class="p">(</span><span class="n">L</span><span class="p">))</span> 
<span class="no">BasicMinos</span><span class="o">[</span><span class="n">Z</span><span class="o">]</span> <span class="o">=</span> <span class="n">mirrors</span><span class="p">(</span><span class="n">Z</span><span class="p">,</span> <span class="n">Z</span><span class="o">.</span><span class="n">rot</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Plate</span> <span class="o">&lt;</span> <span class="no">QuadraticArray</span>
  <span class="k">def</span> <span class="nf">clone</span>
    <span class="no">Plate</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">map</span> <span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span> <span class="n">e</span><span class="o">.</span><span class="n">clone</span><span class="p">})</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">isAbleToArrayMinos</span><span class="p">(</span><span class="n">minos</span><span class="p">)</span>
    <span class="n">mino</span> <span class="o">=</span> <span class="n">minos</span><span class="o">.</span><span class="n">pop</span>
    <span class="n">each_elem</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="o">|</span> <span class="no">BasicMinos</span><span class="o">[</span><span class="n">mino</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">m</span><span class="o">|</span>
        <span class="n">plate</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">clone</span>
        <span class="k">if</span> <span class="n">plate</span><span class="o">.</span><span class="n">isAbleToPutMino</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">then</span>
          <span class="k">if</span> <span class="n">minos</span><span class="o">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">then</span> 
            <span class="k">return</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">plate</span><span class="o">.</span><span class="n">isCompleted</span>
          <span class="k">elsif</span> <span class="n">plate</span><span class="o">.</span><span class="n">isAbleToArrayMinos</span><span class="p">(</span><span class="n">minos</span><span class="o">.</span><span class="n">clone</span><span class="p">)</span> <span class="k">then</span>
            <span class="k">return</span> <span class="kp">true</span> 
          <span class="k">end</span>
        <span class="k">end</span>
    <span class="k">end</span> <span class="k">end</span>
    <span class="k">return</span> <span class="kp">false</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">isAbleToPutMino</span><span class="p">(</span><span class="n">mino</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">mino</span><span class="o">.</span><span class="n">row_size</span> <span class="o">+</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="n">row_size</span><span class="p">)</span> <span class="k">then</span> <span class="k">return</span> <span class="kp">false</span>
    <span class="k">elsif</span> <span class="p">(</span><span class="n">mino</span><span class="o">.</span><span class="n">col_size</span> <span class="o">+</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">col_size</span><span class="p">)</span> <span class="k">then</span> <span class="k">return</span> <span class="kp">false</span> <span class="k">end</span>
    <span class="n">mino</span><span class="o">.</span><span class="n">each_elem</span> <span class="k">do</span> <span class="o">|</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="o">|</span>
      <span class="k">return</span> <span class="kp">false</span> <span class="k">if</span> <span class="p">((</span><span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="n">y</span><span class="o">][</span><span class="n">j</span><span class="o">+</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="n">mino</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="k">return</span> <span class="kp">true</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">isCompleted</span>
    <span class="n">each_elem</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="o">|</span> <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="nb">self</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">then</span> <span class="k">return</span> <span class="kp">false</span> <span class="k">end</span><span class="p">}</span>
    <span class="k">return</span> <span class="kp">true</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="no">EmptyPlate</span> <span class="o">=</span> <span class="no">Plate</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">){</span><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span>

<span class="nb">p</span> <span class="no">EmptyPlate</span><span class="o">.</span><span class="n">isAbleToArrayMinos</span><span class="p">(</span><span class="o">[</span><span class="n">I</span><span class="p">,</span><span class="n">I</span><span class="p">,</span><span class="n">I</span><span class="p">,</span><span class="n">I</span><span class="o">]</span><span class="p">)</span>
<span class="nb">p</span> <span class="no">EmptyPlate</span><span class="o">.</span><span class="n">isAbleToArrayMinos</span><span class="p">(</span><span class="o">[</span><span class="n">O</span><span class="p">,</span><span class="n">O</span><span class="p">,</span><span class="n">O</span><span class="p">,</span><span class="n">O</span><span class="o">]</span><span class="p">)</span>
<span class="nb">p</span> <span class="no">EmptyPlate</span><span class="o">.</span><span class="n">isAbleToArrayMinos</span><span class="p">(</span><span class="o">[</span><span class="n">I</span><span class="p">,</span><span class="n">O</span><span class="p">,</span><span class="n">O</span><span class="p">,</span><span class="n">T</span><span class="o">]</span><span class="p">)</span>
<span class="nb">p</span> <span class="no">EmptyPlate</span><span class="o">.</span><span class="n">isAbleToArrayMinos</span><span class="p">(</span><span class="o">[</span><span class="n">L</span><span class="p">,</span><span class="n">Z</span><span class="p">,</span><span class="n">L</span><span class="p">,</span><span class="n">Z</span><span class="o">]</span><span class="p">)</span>
<span class="nb">p</span> <span class="no">EmptyPlate</span><span class="o">.</span><span class="n">isAbleToArrayMinos</span><span class="p">(</span><span class="o">[</span><span class="n">I</span><span class="p">,</span><span class="n">Z</span><span class="p">,</span><span class="n">Z</span><span class="p">,</span><span class="n">Z</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110408110729/http://ja.doukaku.org/comment/9791/addtag/" class="addtag" id="addtag_9791">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110408110729/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9791/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110408110729/http://ja.doukaku.org/comment/9791/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9791"
  >-</span><span
  class="button yellow"
  id="rating_z_9791"
  >0</span><span 
  class="button green"
  id="rating_p_9791"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110408110729/http://ja.doukaku.org/288/reply_to/9791/">
  返信
  </a>]
  </div>
</div>
</div>



  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20110408110729if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<li><a href="/web/20110408110729/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20110408110729/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20110408110729/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20110408110729/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20110408110729/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20110408110729/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20110408110729/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20110408110729/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20110408110729im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>

<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20110408110729/http://ja.doukaku.org/qa/">Q&amp;A</a>
<li><a href="/web/20110408110729/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20110408110729/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20110408110729/http://www.djangoproject.com/">Django</a>
</ul>


</div>
</div>


<div id="page_foot" class="bordered">
<a rel="license" href="/web/20110408110729/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20110408110729im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20110408110729/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20110408110729/http://ja.doukaku.org/qa/#licence">[詳細]</a>
</div>

</body>



<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20110408110729/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20110408110729js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>



</html>





<!--
     FILE ARCHIVED ON 11:07:29 Apr 8, 2011 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:13:15 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
