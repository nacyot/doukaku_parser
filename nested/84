
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
文字列リストをTRIE Optimizeされた正規表現に
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20110214142832cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20110214142832cs_/http://ja.doukaku.org/static/style/style.css" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20110214142832cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<script src="/web/20110214142832js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20110214142832js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20110214142832js_/http://ja.doukaku.org/static/js/addtag.js" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20110214142832js_/http://ja.doukaku.org/static/js/utils.js" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app15.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/84\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "14";
var displayMonth = "Feb";
var displayYear = "2011";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/84/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20110214142832" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202181632/http://ja.doukaku.org/84/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 14:28:32 Feb 14, 2011">FEB</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Mar
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081202181632/http://ja.doukaku.org/84/nested/" title="18:16:32 Dec 2, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 14:28:32 Feb 14, 2011">14</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202181632/http://ja.doukaku.org/84/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 14:28:32 Feb 14, 2011">2011</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2012
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20110214142832*/http://ja.doukaku.org/84/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>5 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 14 Feb 11</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:-1:001000000001_2009:-1:000000000000_2010:-1:000000000000_2011:1:010000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20110214142832/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20110214142832im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20110214142832/http://ja.doukaku.org/84/">文字列リストをTRIE Optimizeされた正規表現に</a>
</h2>

    




<div class="comment" id="comment4038"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4038/">#4038</a>(<script language="JavaScript">print_time(new Date("2007/11/14 19:23 GMT"));</script><noscript>2007/11/14 19:23 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffcf;">1/3=0.33</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  
<p>これは、実例を見た方が簡単だと思います。
   CPANに<a href="/web/20110214142832/http://search.cpan.org/perldoc?Regexp::Assemble">Regexp::Assemble</a>というモジュールがあるのですが、要はこれの簡易版を作って欲しいということです。私自身、同様のことを行うモジュールを過去にいくつか作っています(e.g <a href="/web/20110214142832/http://search.cpan.org/perldoc?Regexp::Optimizer">Regexp::Optimizer</a>)。
</p>
<p>ここでは、文字列のリストを受け取って、それをTRIE化した正規表現に出来ればOKです。Regexp::AssembleやRegexp::Optimizerは正規表現を受け取ってそれをTrie化することも可能ですし、Perl 5.10では内部的にTrie Optimizationを行ったりするのですが、そこまでの機能は求めません。
</p>
<p>なお、ここで言う「正規表現」は、必ずしもPerl互換のものである必要はありません。それがTrieになっていることをきちんと示せればOKです。
</p>
<p>とはいうものの、Perl5互換になっていた方が、サポートしている環境が多くて有用性は高そうです。可能であればそうして下さい。
</p>
<p>Dan the Regexp Assembler
</p>



	</div>
	
	<p class="link">
	  参考: <a href="/web/20110214142832/http://en.wikipedia.org/wiki/Trie">Trie (en.wikipedia)</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Regexp::</span><span class="n">Assemble</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$ra</span> <span class="o">=</span> <span class="nn">Regexp::</span><span class="n">Assemble</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">;</span>
<span class="k">while</span><span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">){</span>
    <span class="nb">chomp</span><span class="p">;</span>
    <span class="k">next</span> <span class="k">unless</span> <span class="nv">$_</span><span class="p">;</span>
    <span class="nv">$ra</span><span class="o">-&gt;</span><span class="n">add</span><span class="p">(</span><span class="nv">$_</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">print</span> <span class="nv">$ra</span><span class="o">-&gt;</span><span class="n">re</span><span class="p">,</span> <span class="s">&quot;\n&quot;</span>
<span class="cp">__END__</span>

<span class="cp">% grep program /usr/share/dict/words </span>
<span class="cp">program</span>
<span class="cp">programist</span>
<span class="cp">programistic</span>
<span class="cp">programma</span>
<span class="cp">programmar</span>
<span class="cp">programmatic</span>
<span class="cp">programmatically</span>
<span class="cp">programmatist</span>
<span class="cp">programmer</span>

<span class="cp">% grep program /usr/share/dict/words | perl sample.pl </span>
<span class="cp">(?-xism:program(?:m(?:a(?:ti(?:c(?:ally)?|st)|r)?|er)|ist(?:ic)?)?)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4038/addtag/" class="addtag" id="addtag_4038">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4038/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4038/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffcf;"
  >1/3=0.33</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4038"
  >-</span><span
  class="button yellow"
  id="rating_z_4038"
  >0</span><span 
  class="button green"
  id="rating_p_4038"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://reply_to/4038/">
  返信
  </a>]
  </div>
</div>
</div>



  



<div class="indent">
<a href="/web/20110214142832/http://ja.doukaku.org/84/post_comment/">
コメントを投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20110214142832/http://ja.doukaku.org/84/flatten/">フラット表示</a> 
<a href="/web/20110214142832/http://ja.doukaku.org/84/">非表示</a> 


  

  
    




<div class="comment" id="comment5365"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/642/" target="_top">saws</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/5365/">#5365</a>(<script language="JavaScript">print_time(new Date("2008/01/16 10:59 GMT"));</script><noscript>2008/01/16 10:59 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>最適化されてるとはほど遠いですが, 一応Trie構造は作れたと思います. 

出力結果: 
program(ist(i(c(ally)?)|(st)?)?)|(m(a(t(i(c(ally)?)|(st)?)?)|(r)?)|(er)?)?</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre><span class="no">Words</span> <span class="o">=</span> <span class="sx">%w(program programist programistic programma programmar</span>
<span class="sx">           programmatic programmatically programmatist programmer)</span>
<span class="k">class</span> <span class="nc">Array</span>
  <span class="k">def</span> <span class="nf">index2</span><span class="p">(</span><span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
    <span class="n">j</span> <span class="o">=</span> <span class="kp">nil</span> <span class="ow">or</span> <span class="n">each_with_index</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="p">,</span> <span class="n">i</span><span class="o">|</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="k">if</span> <span class="k">yield</span> <span class="n">x</span><span class="p">}</span> <span class="ow">and</span> <span class="n">j</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="k">class</span> <span class="nc">Trie</span>
  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>
    <span class="vi">@words</span> <span class="o">=</span> <span class="n">words</span>
    <span class="n">max</span> <span class="o">=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="vi">@words</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">max</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span> <span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">size</span> <span class="o">&gt;</span> <span class="n">max</span><span class="p">}</span>
    <span class="vi">@trie</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">max</span><span class="p">){</span><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">}</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">run</span>
    <span class="vi">@words</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">str</span><span class="o">|</span> <span class="n">add</span><span class="p">(</span><span class="n">str</span><span class="p">)}</span>
    <span class="n">substitute</span>
    <span class="nb">puts</span> <span class="n">rep</span><span class="p">(</span><span class="vi">@trie</span><span class="p">)</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
    <span class="p">(</span><span class="n">ary</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">//</span><span class="p">))</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">ary</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">,</span> <span class="p">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">ary</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span> <span class="o">?</span> <span class="n">ary</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span> <span class="p">:</span> <span class="kp">nil</span><span class="p">)</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">index2</span><span class="p">{</span><span class="o">|</span><span class="n">strc</span><span class="o">|</span> <span class="n">strc</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">x</span><span class="p">})</span>
        <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">].</span><span class="n">index2</span><span class="p">{</span><span class="o">|</span><span class="n">char</span><span class="o">|</span> <span class="n">char</span> <span class="o">==</span> <span class="n">y</span><span class="p">}</span> <span class="p">?</span>
        <span class="k">next</span> <span class="p">:</span> <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">y</span>
      <span class="k">else</span>
        <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">x</span><span class="p">,</span> <span class="o">[</span><span class="n">y</span><span class="o">]]</span>
      <span class="k">end</span>
    <span class="p">}</span>
  <span class="k">end</span>
  <span class="k">def</span> <span class="nf">substitute</span> <span class="c1">#文字をインデックスに置換</span>
    <span class="p">(</span><span class="vi">@trie</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">size</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">j</span><span class="o">|</span>
        <span class="n">trie</span> <span class="o">=</span> <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span>
        <span class="n">trie</span><span class="o">.</span><span class="n">map!</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="vi">@trie</span><span class="o">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">].</span><span class="n">index2</span><span class="p">{</span><span class="o">|</span><span class="n">y</span><span class="o">|</span> <span class="n">x</span> <span class="o">==</span> <span class="n">y</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">}}</span><span class="o">.</span><span class="n">all?</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">x</span><span class="p">}</span> <span class="p">?</span>
        <span class="n">trie</span><span class="o">.</span><span class="n">sort!</span> <span class="p">:</span> <span class="n">trie</span><span class="o">.</span><span class="n">compact!</span> <span class="o">&amp;&amp;</span> <span class="n">trie</span><span class="o">.</span><span class="n">sort!</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="kp">nil</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="k">end</span>
  <span class="kp">private</span>
  <span class="k">def</span> <span class="nf">rep</span><span class="p">(</span><span class="n">ary</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">trie</span> <span class="o">=</span> <span class="n">ary</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">i</span><span class="o">]</span>
    <span class="k">if</span> <span class="n">ary</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span>
      <span class="n">trie</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
    <span class="k">else</span>
      <span class="k">if</span> <span class="n">trie</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">size</span> <span class="o">!=</span> <span class="mi">1</span>
        <span class="n">trie</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="n">trie</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span>
          <span class="k">if</span> <span class="n">x</span>
            <span class="n">suffix</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span> <span class="o">==</span> <span class="n">trie</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">compact</span><span class="o">.</span><span class="n">max</span> <span class="p">?</span> <span class="s1">&#39;?&#39;</span> <span class="p">:</span> <span class="s1">&#39;|&#39;</span><span class="p">)</span>
            <span class="s2">&quot;(</span><span class="si">#{</span><span class="n">rep</span><span class="p">(</span><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span><span class="si">}</span><span class="s2">)</span><span class="si">#{</span><span class="n">suffix</span><span class="si">}</span><span class="s2">&quot;</span>
          <span class="k">else</span>
            <span class="s1">&#39;&#39;</span>
          <span class="k">end</span>
        <span class="p">}</span><span class="o">.</span><span class="n">join</span>
      <span class="k">else</span>
        <span class="n">trie</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="p">(</span><span class="n">trie</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="p">?</span> <span class="n">rep</span><span class="p">(</span><span class="n">ary</span><span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">trie</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span> <span class="p">:</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
<span class="n">trie</span> <span class="o">=</span> <span class="no">Trie</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Words</span><span class="p">)</span>
<span class="n">trie</span><span class="o">.</span><span class="n">run</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/5365/addtag/" class="addtag" id="addtag_5365">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/5365/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/5365/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5365"
  >-</span><span
  class="button yellow"
  id="rating_z_5365"
  >0</span><span 
  class="button green"
  id="rating_p_5365"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/5365/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment4153"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4153/">#4153</a>(<script language="JavaScript">print_time(new Date("2007/11/17 13:09 GMT"));</script><noscript>2007/11/17 13:09 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ごちゃごちゃになってしまいました。
(空文字列の有無 (先頭 残り)...) で trie っぽいものを作ってますが、
データ構造が適当すぎたかも。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre>(defun classify (strings)
  (let ((a ()) (empty nil))
    (dolist (s strings (cons empty a))
      (if (string= s &quot;&quot;)
          (setf empty t)
        (let* ((fst (elt s 0)) (rest (subseq s 1))
               (x (assoc fst a)))
          (if x (push rest (cdr x))
            (push `(,fst . (,rest)) a)))))))

;; TRIE ::= (data (char . TRIE)*)
(defun make-trie (strings)
  (let ((x (classify strings)))
    (cons (car x)
          (mapcar (lambda (a) (cons (car a) (make-trie (cdr a))))
                  (cdr x)))))

(defun make-regexp (trie)
  (cond ((and (null (car trie)) (null (cddr trie)))
         ;; (nil (c . subtrie)) =&gt; common prefix がある
         (format nil &quot;~C~A&quot; (caadr trie) (make-regexp (cdadr trie))))
        ((cdr trie)
         ;; (d (c . subtrie) ...) =&gt; common prefix なし
         (format nil &quot;(?:~{~{~C~A~}~^|~})~@[?~]&quot;
                 (mapcar (lambda (a) (list (car a) (make-regexp (cdr a))))
                         (cdr trie))
                 (car trie)))
        (t
         ;; 空文字列しかない
         &quot;&quot;)))

(defun trie-optimize (strings) (make-regexp (make-trie strings)))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4153/addtag/" class="addtag" id="addtag_4153">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4153/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4153/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4153"
  >-</span><span
  class="button yellow"
  id="rating_z_4153"
  >0</span><span 
  class="button green"
  id="rating_p_4153"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4153/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4153/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4198"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4198/">#4198</a>(<script language="JavaScript">print_time(new Date("2007/11/18 07:57 GMT"));</script><noscript>2007/11/18 07:57 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>だいたい同じことを OCaml で。
パターンマッチのおかげで多少は読みやすくなったかも。
リストの破壊的操作ができないので Map を使ってみました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29</pre></td><td class="code"><div class="highlight"><pre><span class="kr">open</span> <span class="n">Printf</span>

<span class="kr">type</span> <span class="n">trie</span> <span class="k">=</span> <span class="n">Node</span> <span class="kr">of</span> <span class="n">bool</span> <span class="k">*</span> <span class="k">(</span><span class="n">char</span> <span class="k">*</span> <span class="n">trie</span><span class="k">)</span> <span class="n">list</span>

<span class="kr">module</span> <span class="n">M</span> <span class="k">=</span> <span class="n">Map</span><span class="k">.</span><span class="n">Make</span><span class="k">(</span><span class="kr">struct</span> <span class="kr">type</span> <span class="n">t</span> <span class="k">=</span> <span class="n">char</span> <span class="kr">let</span> <span class="n">compare</span> <span class="k">=</span> <span class="n">Char</span><span class="k">.</span><span class="n">compare</span> <span class="kr">end</span><span class="k">)</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">classify</span> <span class="n">b</span> <span class="n">map</span> <span class="k">=</span> <span class="kr">function</span>
  <span class="k">|</span> <span class="k">[]</span> <span class="k">-&gt;</span> <span class="n">b</span><span class="k">,</span> <span class="n">map</span>
  <span class="k">|</span> <span class="s2">&quot;&quot;</span><span class="k">::</span><span class="n">rest</span> <span class="k">-&gt;</span> <span class="n">classify</span> <span class="kr">true</span> <span class="n">map</span> <span class="n">rest</span>
  <span class="k">|</span> <span class="n">str</span><span class="k">::</span><span class="n">rest</span> <span class="k">-&gt;</span>
      <span class="kr">let</span> <span class="n">c</span><span class="k">,</span> <span class="n">s</span> <span class="k">=</span> <span class="n">str</span><span class="k">.[</span><span class="mi">0</span><span class="k">],</span> <span class="n">String</span><span class="k">.</span><span class="n">sub</span> <span class="n">str</span> <span class="mi">1</span> <span class="k">(</span><span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">str</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
      <span class="kr">let</span> <span class="n">newmap</span> <span class="k">=</span>
        <span class="n">M</span><span class="k">.</span><span class="n">add</span> <span class="n">c</span> <span class="k">(</span><span class="n">s</span><span class="k">::</span><span class="kr">try</span> <span class="n">M</span><span class="k">.</span><span class="n">find</span> <span class="n">c</span> <span class="n">map</span> <span class="kr">with</span> <span class="n">Not_found</span> <span class="k">-&gt;</span> <span class="k">[])</span> <span class="n">map</span> <span class="kr">in</span>
        <span class="n">classify</span> <span class="n">b</span> <span class="n">newmap</span> <span class="n">rest</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">make_trie</span> <span class="n">strings</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">b</span><span class="k">,</span> <span class="n">map</span> <span class="k">=</span> <span class="n">classify</span> <span class="kr">false</span> <span class="n">M</span><span class="k">.</span><span class="n">empty</span> <span class="n">strings</span> <span class="kr">in</span>
    <span class="n">Node</span><span class="k">(</span><span class="n">b</span><span class="k">,</span> <span class="n">M</span><span class="k">.</span><span class="n">fold</span> <span class="k">(</span><span class="kr">fun</span> <span class="n">c</span> <span class="n">strs</span> <span class="n">al</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">c</span><span class="k">,</span> <span class="k">(</span><span class="n">make_trie</span> <span class="n">strs</span><span class="k">))::</span><span class="n">al</span><span class="k">)</span> <span class="n">map</span> <span class="k">[])</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">make_regexp</span> <span class="k">=</span> <span class="kr">function</span>
  <span class="k">|</span> <span class="n">Node</span><span class="k">(</span><span class="kr">false</span><span class="k">,</span> <span class="k">[</span><span class="n">c</span><span class="k">,</span> <span class="n">trie</span><span class="k">])</span> <span class="k">-&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;%c%s&quot;</span> <span class="n">c</span> <span class="k">(</span><span class="n">make_regexp</span> <span class="n">trie</span><span class="k">)</span>
  <span class="k">|</span> <span class="n">Node</span><span class="k">(</span><span class="n">b</span><span class="k">,</span> <span class="k">(_::_</span> <span class="kr">as</span> <span class="n">alist</span><span class="k">))</span> <span class="k">-&gt;</span>
      <span class="kr">let</span> <span class="n">res</span> <span class="k">=</span>
        <span class="n">List</span><span class="k">.</span><span class="n">map</span> <span class="k">(</span><span class="kr">fun</span> <span class="k">(</span><span class="n">c</span><span class="k">,</span> <span class="n">t</span><span class="k">)</span> <span class="k">-&gt;</span> <span class="n">sprintf</span> <span class="s2">&quot;%c%s&quot;</span> <span class="n">c</span> <span class="k">(</span><span class="n">make_regexp</span> <span class="n">t</span><span class="k">))</span> <span class="n">alist</span> <span class="kr">in</span>
      <span class="kr">let</span> <span class="n">re</span> <span class="k">=</span> <span class="n">String</span><span class="k">.</span><span class="n">concat</span> <span class="s2">&quot;|&quot;</span> <span class="n">res</span> <span class="kr">in</span>
        <span class="n">sprintf</span> <span class="s2">&quot;(?:%s)%s&quot;</span> <span class="n">re</span> <span class="k">(</span><span class="kr">if</span> <span class="n">b</span> <span class="kr">then</span> <span class="s2">&quot;?&quot;</span> <span class="kr">else</span> <span class="s2">&quot;&quot;</span><span class="k">)</span>
  <span class="k">|</span> <span class="k">_</span> <span class="k">-&gt;</span> <span class="s2">&quot;&quot;</span>

<span class="kr">let</span> <span class="n">trie_optimize</span> <span class="n">strings</span> <span class="k">=</span> <span class="n">make_regexp</span> <span class="k">(</span><span class="n">make_trie</span> <span class="n">strings</span><span class="k">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4198/addtag/" class="addtag" id="addtag_4198">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4198/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4198/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4198"
  >-</span><span
  class="button yellow"
  id="rating_z_4198"
  >0</span><span 
  class="button green"
  id="rating_p_4198"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4153/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4198/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4198/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment5214"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/654/" target="_top">ika</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/5214/">#5214</a>(<script language="JavaScript">print_time(new Date("2008/01/07 09:59 GMT"));</script><noscript>2008/01/07 09:59 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  連想配列を使って普通に木を作る方法で。<br/><br/>標準ライブラリ(std.regexp)では後方参照なしのグルーピングがサポートされないので、普通の括弧にしました。<br/><br/>program(ist(ic)?|m(a(r|ti(c(ally)?|st))?|er))?
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>, <span class="n">std</span>.<span class="n">string</span>, <span class="n">std</span>.<span class="n">utf</span>;

<span class="k">class</span> <span class="n">Trie</span> {
    <span class="k">private</span> <span class="k">struct</span> <span class="n">Node</span> {
        <span class="n">Node</span>*[<span class="kt">dchar</span>] <span class="n">nodes</span>;
        <span class="kt">bool</span> <span class="n">matchTail</span>;
        
        <span class="k">const</span> <span class="n">string</span> <span class="n">toString</span>() {
            <span class="k">if</span>(!<span class="n">nodes</span>.<span class="n">length</span>) <span class="k">return</span> <span class="s">&quot;&quot;</span>;
            <span class="n">string</span>[] <span class="n">patterns</span>;
            <span class="k">foreach</span>(<span class="n">c</span>, <span class="n">node</span>; <span class="k">this</span>.<span class="n">nodes</span>) {
                <span class="n">patterns</span> ~= <span class="n">quotemeta</span>(<span class="n">toUTF8</span>([<span class="n">c</span>])) ~ <span class="n">node</span>.<span class="n">toString</span>();
            }
            <span class="n">string</span> <span class="n">pattern</span> = <span class="n">patterns</span>.<span class="n">join</span>(<span class="s">&quot;|&quot;</span>);
            <span class="k">if</span>(<span class="n">nodes</span>.<span class="n">length</span> == <span class="mi">1</span>) {
                <span class="k">return</span> <span class="n">matchTail</span> ? <span class="s">&quot;(&quot;</span> ~ <span class="n">pattern</span> ~ <span class="s">&quot;)?&quot;</span> : <span class="n">pattern</span>;
            } <span class="k">else</span> {
                <span class="k">return</span> <span class="s">&quot;(&quot;</span> ~ <span class="n">pattern</span> ~ <span class="s">&quot;)&quot;</span> ~ (<span class="n">matchTail</span> ? <span class="s">&quot;?&quot;</span> : <span class="s">&quot;&quot;</span>);
            }
        }
    }
    
    <span class="k">private</span> <span class="n">Node</span> <span class="n">tree</span>;
    
    <span class="k">this</span>() { }
    
    <span class="k">this</span>(<span class="k">const</span>(<span class="n">string</span>)[] <span class="n">words</span>) {
        <span class="k">foreach</span>(<span class="n">word</span>; <span class="n">words</span>) {
            <span class="k">this</span>.<span class="n">addWord</span>(<span class="n">word</span>);
        }
    }
    
    <span class="kt">void</span> <span class="n">addWord</span>(<span class="n">string</span> <span class="n">word</span>) {
        <span class="k">auto</span> <span class="n">node</span> = &amp;<span class="k">this</span>.<span class="n">tree</span>;
        <span class="k">foreach</span>(<span class="kt">dchar</span> <span class="n">c</span>; <span class="n">word</span>) {
            <span class="k">if</span>(<span class="k">auto</span> <span class="n">p</span> = <span class="n">c</span> <span class="k">in</span> <span class="n">node</span>.<span class="n">nodes</span>) {
                <span class="n">node</span> = *<span class="n">p</span>;
            } <span class="k">else</span> {
                <span class="n">node</span> = <span class="n">node</span>.<span class="n">nodes</span>[<span class="n">c</span>] = <span class="k">new</span> <span class="n">Node</span>;
            }
        }
        <span class="n">node</span>.<span class="n">matchTail</span> = <span class="kc">true</span>;
    }
    
    <span class="k">const</span> <span class="n">string</span> <span class="n">toString</span>() {
        <span class="k">return</span> <span class="n">tree</span>.<span class="n">toString</span>();
    }
}

<span class="k">private</span> <span class="n">string</span> <span class="n">quotemeta</span>(<span class="n">string</span> <span class="n">str</span>) {
    <span class="n">string</span> <span class="n">result</span>;
    <span class="k">foreach</span>(<span class="n">c</span>; <span class="n">str</span>) {
        <span class="k">switch</span>(<span class="n">c</span>) {
            <span class="k">case</span> <span class="sc">&#39;.&#39;</span>: <span class="k">case</span> <span class="sc">&#39;*&#39;</span>: <span class="k">case</span> <span class="sc">&#39;+&#39;</span>: <span class="k">case</span> <span class="sc">&#39;?&#39;</span>:
            <span class="k">case</span> <span class="sc">&#39;^&#39;</span>: <span class="k">case</span> <span class="sc">&#39;$&#39;</span>: <span class="k">case</span> <span class="sc">&#39;{&#39;</span>: <span class="k">case</span> <span class="sc">&#39;}&#39;</span>:
            <span class="k">case</span> <span class="sc">&#39;[&#39;</span>: <span class="k">case</span> <span class="sc">&#39;]&#39;</span>: <span class="k">case</span> <span class="sc">&#39;(&#39;</span>: <span class="k">case</span> <span class="sc">&#39;)&#39;</span>:
            <span class="k">case</span> <span class="sc">&#39;|&#39;</span>:
                <span class="n">result</span> ~= [<span class="sc">&#39;\\&#39;</span>, <span class="n">c</span>];
                <span class="k">break</span>;
            <span class="k">default</span>:
                <span class="n">result</span> ~= <span class="n">c</span>;
        }
    }
    <span class="k">return</span> <span class="n">result</span>;
}

<span class="kt">void</span> <span class="n">main</span>(){
    <span class="k">auto</span> <span class="n">words</span> = <span class="s">`program</span>
<span class="s">programist</span>
<span class="s">programistic</span>
<span class="s">programma</span>
<span class="s">programmar</span>
<span class="s">programmatic</span>
<span class="s">programmatically</span>
<span class="s">programmatist</span>
<span class="s">programmer`</span>.<span class="n">splitlines</span>();
    <span class="n">writeln</span>(<span class="k">new</span> <span class="n">Trie</span>(<span class="n">words</span>));
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/5214/addtag/" class="addtag" id="addtag_5214">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/5214/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/5214/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5214"
  >-</span><span
  class="button yellow"
  id="rating_z_5214"
  >0</span><span 
  class="button green"
  id="rating_p_5214"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/5214/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4105"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4105/">#4105</a>(<script language="JavaScript">print_time(new Date("2007/11/16 10:15 GMT"));</script><noscript>2007/11/16 10:15 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  とりあえず素朴に。例題データ読ませると「^program(?:|(?:ist(?:|ic)|m(?:a(?:|(?:r|ti(?:c(?:|ally)|st)))|er)))$」を吐きます。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span> <span class="k">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="n">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="c">// 行ごとに読み込んで</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">words</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
        <span class="n">using</span><span class="p">(</span><span class="n">StreamReader</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">]))</span> <span class="k">{</span>
            <span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">line</span> <span class="k">in</span> <span class="n">sr</span><span class="p">.</span><span class="n">ReadToEnd</span><span class="p">().</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">,</span> <span class="sc">&#39;\r&#39;</span><span class="p">))</span> <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">line</span> <span class="p">!=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">words</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">line</span><span class="p">))</span> <span class="k">{</span>
                    <span class="n">words</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="n">words</span><span class="p">.</span><span class="n">Sort</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="c">// 重複文字数をチェックして</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">indexes</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span> <span class="k">{</span>
            <span class="kt">int</span><span class="p">[]</span> <span class="n">itemp</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">words</span><span class="p">.</span><span class="n">Count</span><span class="p">];</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">words</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="m">1</span> <span class="p">&lt;=</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="p">--)</span> <span class="k">{</span>
                <span class="kt">int</span> <span class="n">to</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="n">Min</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">].</span><span class="n">Length</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Length</span><span class="p">);</span>
                <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">to</span> <span class="p">&amp;&amp;</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">];</span> <span class="n">j</span><span class="p">++)</span> <span class="k">{</span>
                    <span class="n">itemp</span><span class="p">[</span><span class="n">i</span><span class="p">]++;</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="n">indexes</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="n">itemp</span><span class="p">);</span>
        <span class="k">}</span>
        <span class="c">// 重複文字数を多い順に並び替えて</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">times</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span> <span class="k">{</span>
            <span class="k">foreach</span><span class="p">(</span><span class="kt">int</span> <span class="n">cnt</span> <span class="k">in</span> <span class="n">indexes</span><span class="p">)</span> <span class="k">{</span>
                <span class="k">if</span> <span class="p">(!</span><span class="n">times</span><span class="p">.</span><span class="n">Contains</span><span class="p">(</span><span class="n">cnt</span><span class="p">))</span>
                    <span class="n">times</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">cnt</span><span class="p">);</span>
            <span class="k">}</span>
            <span class="n">times</span><span class="p">.</span><span class="n">Sort</span><span class="p">();</span>
            <span class="n">times</span><span class="p">.</span><span class="n">Reverse</span><span class="p">();</span>
        <span class="k">}</span>
        <span class="c">// 重複部分を削っていく</span>
        <span class="k">foreach</span><span class="p">(</span><span class="kt">int</span> <span class="n">steps</span> <span class="k">in</span> <span class="n">times</span><span class="p">)</span> <span class="k">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">words</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="m">0</span> <span class="p">&lt;</span> <span class="n">i</span><span class="p">;</span> <span class="n">i</span><span class="p">--)</span> <span class="k">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">indexes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">==</span> <span class="n">steps</span><span class="p">)</span> <span class="k">{</span>
                    <span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}(?:{1}|{2})&quot;</span><span class="p">,</span>
                        <span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">steps</span><span class="p">),</span>
                        <span class="n">words</span><span class="p">[</span><span class="n">i</span> <span class="p">-</span> <span class="m">1</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">steps</span><span class="p">),</span>
                        <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">Substring</span><span class="p">(</span><span class="n">steps</span><span class="p">));</span>
                    <span class="n">words</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                    <span class="n">indexes</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="kt">string</span> <span class="n">result</span> <span class="p">=</span> <span class="s">&quot;^&quot;</span> <span class="p">+</span> <span class="n">words</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">+</span> <span class="s">&quot;$&quot;</span><span class="p">;</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">result</span><span class="p">);</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4105/addtag/" class="addtag" id="addtag_4105">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4105/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4105/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4105"
  >-</span><span
  class="button yellow"
  id="rating_z_4105"
  >0</span><span 
  class="button green"
  id="rating_p_4105"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4105/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4105/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4263"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4263/">#4263</a>(<script language="JavaScript">print_time(new Date("2007/11/19 16:35 GMT"));</script><noscript>2007/11/19 16:35 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  #4259 の指摘を受けて、とりあえず Regex.Escape 挟んでみました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- trie.cs.old Tue Nov 20 01:20:52 2007</span>
<span class="gi">+++ trie.cs     Tue Nov 20 01:21:24 2007</span>
<span class="gu">@@ -8,7 +8,7 @@</span>
         using(StreamReader sr = new StreamReader(args[0])) {
             foreach(string line in sr.ReadToEnd().Split(&#39;\n&#39;, &#39;\r&#39;)) {
                 if (line != string.Empty &amp;&amp; !words.Contains(line)) {
<span class="gd">-                    words.Add(line);</span>
<span class="gi">+                    words.Add(System.Text.RegularExpressions.Regex.Escape(line)</span>
);
                 }
             }
             words.Sort();
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4263/addtag/" class="addtag" id="addtag_4263">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4263/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4263/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4263"
  >-</span><span
  class="button yellow"
  id="rating_z_4263"
  >0</span><span 
  class="button green"
  id="rating_p_4263"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4105/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4263/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4263/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment4118"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4118/">#4118</a>(<script language="JavaScript">print_time(new Date("2007/11/16 15:44 GMT"));</script><noscript>2007/11/16 15:44 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/emacslisp/">
	  Emacs Lisp
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffbf;">2/4=0.50</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Emacs Lisp だと regexp-opt が要求通り(+α)のことをやってくれるようです。
ただ、backslash だらけな elisp の正規表現が返ります。

実行結果は以下。
"program\\(?:ist\\(?:ic\\)?\\|m\\(?:a\\(?:r\\|ti\\(?:c\\(?:ally\\)?\\|st\\)\\)?\
\\|er\\)\\)?"</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre>(regexp-opt &#39;(&quot;program&quot;
              &quot;programist&quot;
              &quot;programistic&quot;
              &quot;programma&quot;
              &quot;programmar&quot;
              &quot;programmatic&quot;
              &quot;programmatically&quot;
              &quot;programmatist&quot;
              &quot;programmer&quot;))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4118/addtag/" class="addtag" id="addtag_4118">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/emacslisp/">
		Emacs Lisp
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4118/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4118/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffbf;"
  >2/4=0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4118"
  >-</span><span
  class="button yellow"
  id="rating_z_4118"
  >0</span><span 
  class="button green"
  id="rating_p_4118"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4118/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4207"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/573/" target="_top">greentea</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4207/">#4207</a>(<script language="JavaScript">print_time(new Date("2007/11/18 15:12 GMT"));</script><noscript>2007/11/18 15:12 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>1文字ずつのツリーを作って、子を1つしかもたない親に子をくっつけて、参考ページにあるようなTrieツリーにしました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>import sys

def get_chr_tree(strs, before=&quot;&quot;):
  index = len(before)
  s = set([str[index] for str in strs if len(str) &gt; index and str[:index]==before])
  l = [get_chr_tree(strs, before+c) for c in s]
  return [before[-1]] + l if before else l[0]

def merge_chr(chr_tree):
  try:
    if len(chr_tree) == 2:
      return merge_chr([chr_tree[0]+chr_tree[1][0]] + chr_tree[1][1:])
    else: return [chr_tree[0]] + [merge_chr(tree) for tree in chr_tree[1:]]
  except IndexError:
    return chr_tree

def to_regexp(chr_tree):
  def make_regexp(chr_tree):
    if len(chr_tree) == 1: return chr_tree[0]
    else:
      hatena = &quot;?&quot; if [True for l in chr_tree[1:] if &quot;\n&quot; in l] else &quot;&quot;
      try:
        inner = &quot;&quot;.join([&quot;|&quot; + make_regexp(tree) for tree in chr_tree[1:]])
      except IndexError:
        print &quot;IndexError&quot;,chr_tree
        inner = &quot;&quot;
      return chr_tree[0] + &quot;(?:&quot; + inner + &quot;)&quot; + hatena

  return &quot;(?-xism:&quot; + make_regexp(chr_tree).replace(&quot;|\n&quot;, &quot;&quot;).replace(&quot;\n&quot;, &quot;&quot;).replace(&quot;:|&quot;, &quot;:&quot;) + &quot;)&quot;

words = []
for line in sys.stdin: words.append(line)
chr_tree = get_chr_tree(words)
merged_chr_tree = merge_chr(chr_tree)
print to_regexp(merged_chr_tree) # =&gt; (?-xism:program(?:m(?:a(?:ti(?:c(?:ally)?|st)|r)?|er)|ist(?:ic)?)?)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4207/addtag/" class="addtag" id="addtag_4207">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4207/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4207/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4207"
  >-</span><span
  class="button yellow"
  id="rating_z_4207"
  >0</span><span 
  class="button green"
  id="rating_p_4207"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4207/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4207/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4208"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/573/" target="_top">greentea</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4208/">#4208</a>(<script language="JavaScript">print_time(new Date("2007/11/18 15:25 GMT"));</script><noscript>2007/11/18 15:25 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>しまった。言語の指定忘れてた。Pythonです。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4208/addtag/" class="addtag" id="addtag_4208">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4208"
  >-</span><span
  class="button yellow"
  id="rating_z_4208"
  >0</span><span 
  class="button green"
  id="rating_p_4208"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4207/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4208/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4208/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  

  
    




<div class="comment" id="comment4196"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4196/">#4196</a>(<script language="JavaScript">print_time(new Date("2007/11/18 07:09 GMT"));</script><noscript>2007/11/18 07:09 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>内部ではTRIEを使っていませんが、出力はお題でのサンプルと、
少なくともこの入力に関しては、同じになっています。

お題の解釈が出力だけを要求しているようにも読めるので、
とりあえず投稿します。

ちなみにカッコの中に'-xism'がある正規表現は
pythonのreモジュールでは使えないようです。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="k">def</span> <span class="nf">f1</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
  <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

  <span class="n">r</span> <span class="o">=</span> <span class="s">&#39;^(?:</span><span class="si">%s%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="s">&#39;(?:&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">])),</span> <span class="s">&#39;)?&#39;</span> <span class="o">*</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
  <span class="n">b</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">c</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
      <span class="n">b</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">m</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">s</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="n">c</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

  <span class="n">a</span> <span class="o">=</span> <span class="nb">min</span><span class="p">([</span><span class="n">t</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">b</span><span class="p">])</span>
  <span class="n">flg</span> <span class="o">=</span> <span class="nb">bool</span><span class="p">([</span><span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">b</span> <span class="k">if</span> <span class="n">a</span> <span class="o">==</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>
  <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">):]</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">b</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">!=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)]</span>
  <span class="k">if</span> <span class="n">b</span><span class="p">:</span>
    <span class="n">a</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">(?:</span><span class="si">%s</span><span class="s">)</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">f1</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="s">&#39;?&#39;</span> <span class="k">if</span> <span class="n">flg</span> <span class="k">else</span> <span class="s">&#39;&#39;</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">f1</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">|</span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">else</span> <span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">a</span><span class="p">))</span>
  <span class="k">return</span> <span class="n">a</span>

<span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
  <span class="k">return</span> <span class="s">&#39;(?-xism:</span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="n">f1</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>
<span class="c">#  return &#39;(?:%s)&#39; % f1(l)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
  <span class="k">print</span> <span class="n">f</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">readlines</span><span class="p">())</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4196/addtag/" class="addtag" id="addtag_4196">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4196/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4196/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4196"
  >-</span><span
  class="button yellow"
  id="rating_z_4196"
  >0</span><span 
  class="button green"
  id="rating_p_4196"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4196/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment4097"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4097/">#4097</a>(<script language="JavaScript">print_time(new Date("2007/11/16 06:03 GMT"));</script><noscript>2007/11/16 06:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>参考までに日本語版</p>
<p>トライ木 - Wikipedia：
<a class="reference" href="/web/20110214142832/http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4%E6%9C%A8">http://ja.wikipedia.org/wiki/%E3%83%88%E3%83%A9%E3%82%A4%E6%9C%A8</a></p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4097/addtag/" class="addtag" id="addtag_4097">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4097"
  >-</span><span
  class="button yellow"
  id="rating_z_4097"
  >0</span><span 
  class="button green"
  id="rating_p_4097"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4097/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4097/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4098"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4098/">#4098</a>(<script language="JavaScript">print_time(new Date("2007/11/16 06:08 GMT"));</script><noscript>2007/11/16 06:08 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>お題は要するに「文字列のリストを与えられたときに、それにマッチする正規表現を返せ」ということですね。</p>
<p>で、(?:foo|bar|baz)なんていうトリビアルな出力を許すと何も面白くないので、単語の頭が一致する場合はくっつけて(?:foo|ba[rz])とかにするということですよね？</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4098/addtag/" class="addtag" id="addtag_4098">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4098"
  >-</span><span
  class="button yellow"
  id="rating_z_4098"
  >0</span><span 
  class="button green"
  id="rating_p_4098"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4097/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4098/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4098/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4098/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4147"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4147/">#4147</a>(<script language="JavaScript">print_time(new Date("2007/11/17 07:31 GMT"));</script><noscript>2007/11/17 07:31 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  
<p>&gt; お題は要するに「文字列のリストを与えられたときに、それにマッチする正規表現を返せ」ということですね。
</p>
<p>出力的にはYesですが、実装的にはNoです。
   TRIE Optimizeされた正規表現は、そうでない正規表現と比べてかなりの速度差が出ます。詳しくは
</p>
<ul>
 <li>
     <a href="/web/20110214142832/http://search.cpan.org/perldoc?Regexp::List">Regexp::List</a>
 </li>
</ul>
<p>のベンチマークの項をご覧ください。
</p>
<p>Dan the Regular Expressionist
</p>



	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4147/addtag/" class="addtag" id="addtag_4147">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4147"
  >-</span><span
  class="button yellow"
  id="rating_z_4147"
  >0</span><span 
  class="button green"
  id="rating_p_4147"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4098/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4147/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4147/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  


  

  
    




<div class="comment" id="comment4109"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4109/">#4109</a>(<script language="JavaScript">print_time(new Date("2007/11/16 12:15 GMT"));</script><noscript>2007/11/16 12:15 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>こういうやり方もあるよ、ということで。</p>
<ol class="arabic simple">
<li>文字列を辞書順にソート</li>
<li>隣り合う文字列同士の共通接頭辞長(lcps)を計算</li>
</ol>
<p>で、後はある範囲で lcp の最小値が共通接頭辞の長さで、最小値の位置でリストを分割すれば分割統治法でパターンを構築できると。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="n">SLIM_RE</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">class</span> <span class="nc">RangeError</span><span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">def</span> <span class="nf">lcp</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="s">&quot;returns length of longest common prefix&quot;</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">l</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">l</span> <span class="ow">and</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">i</span>

<span class="k">def</span> <span class="nf">min_index</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
    <span class="s">&quot;returns index of minimum value in [first:last]&quot;</span>
    <span class="k">if</span> <span class="n">last</span> <span class="o">-</span> <span class="n">first</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">raise</span> <span class="n">RangeError</span><span class="p">()</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">first</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">first</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">l</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">l</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">i</span> <span class="o">=</span> <span class="n">j</span>
    <span class="k">return</span> <span class="n">i</span>

<span class="k">def</span> <span class="nf">get_pattern</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">lcps</span><span class="p">,</span> <span class="n">level</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span><span class="p">):</span>
    <span class="s">&quot;get optimized regular expression from list of words which is sorted&quot;</span>
    <span class="k">if</span> <span class="n">last</span> <span class="o">-</span> <span class="n">first</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">first</span><span class="p">][</span><span class="n">level</span><span class="p">:])</span>

    <span class="n">m</span> <span class="o">=</span> <span class="n">min_index</span><span class="p">(</span><span class="n">lcps</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="n">last</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">prefix</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">first</span><span class="p">][</span><span class="n">level</span><span class="p">:</span><span class="n">lcps</span><span class="p">[</span><span class="n">m</span><span class="p">]]</span>
    <span class="n">sub</span> <span class="o">=</span> <span class="p">(</span><span class="n">get_pattern</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">lcps</span><span class="p">,</span> <span class="n">lcps</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">first</span><span class="p">,</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
           <span class="n">get_pattern</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">lcps</span><span class="p">,</span> <span class="n">lcps</span><span class="p">[</span><span class="n">m</span><span class="p">],</span> <span class="n">m</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">last</span><span class="p">))</span>

    <span class="k">if</span> <span class="n">SLIM_RE</span><span class="p">:</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">(?:</span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">prefix</span><span class="p">),</span> <span class="s">&#39;|&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="nb">bool</span><span class="p">,</span> <span class="n">sub</span><span class="p">)))</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">m</span><span class="p">])</span> <span class="o">==</span> <span class="n">lcps</span><span class="p">[</span><span class="n">m</span><span class="p">]:</span>
            <span class="n">pattern</span> <span class="o">+=</span> <span class="s">&#39;?&#39;</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="s">&#39;</span><span class="si">%s</span><span class="s">(?:</span><span class="si">%s</span><span class="s">|</span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">prefix</span><span class="p">),</span> <span class="n">sub</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">sub</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">pattern</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
    <span class="k">import</span> <span class="nn">fileinput</span>

    <span class="n">words</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
        <span class="n">words</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>

    <span class="n">words</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="n">lcps</span> <span class="o">=</span> <span class="p">[</span><span class="n">lcp</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">words</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">words</span><span class="p">[</span><span class="mi">1</span><span class="p">:])]</span>
    <span class="n">pattern</span> <span class="o">=</span> <span class="n">get_pattern</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">lcps</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">))</span>
    <span class="k">print</span> <span class="n">pattern</span>

    <span class="n">pat</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">pat</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">print</span> <span class="o">&gt;&gt;</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&#39;not match with </span><span class="si">%s</span><span class="s">&#39;</span> <span class="o">%</span> <span class="n">word</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4109/addtag/" class="addtag" id="addtag_4109">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4109/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4109/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4109"
  >-</span><span
  class="button yellow"
  id="rating_z_4109"
  >0</span><span 
  class="button green"
  id="rating_p_4109"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4109/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4257"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4257/">#4257</a>(<script language="JavaScript">print_time(new Date("2007/11/19 15:16 GMT"));</script><noscript>2007/11/19 15:16 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。<br/><br/>SiroKuro&nbsp;さんの&nbsp;#4105&nbsp;を参考にさせて頂きました。最後、たたみ込みながら正規表現を生成するところはたいへん小気味よいですね。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre>| assemble |
assemble := [:words |
    | prefixSizes |
    words := words sort.
    prefixSizes := words overlappingPairsCollect: [:aa :bb |
        | shorterSize found |
        shorterSize := aa size min: bb size.
        found := (1 to: shorterSize) findFirst: [:idx | (aa at: idx) ~= (bb at: idx)].
        found isZero ifTrue: [shorterSize] ifFalse: [found - 1]].
    prefixSizes asSet asArray sort reverseDo: [:idx |
        | found |
        [(found := prefixSizes lastIndexOf: idx) &gt; 0] whileTrue: [
            words at: found put: (&#39;{1}(?:{2}|{3})&#39; format: {
                (words at: found) first: idx.
                (words at: found) allButFirst: idx.
                (words at: found + 1) allButFirst: idx}).
            words := words copyWithoutIndex: found + 1.
            prefixSizes := prefixSizes copyWithoutIndex: found]].
    &#39;^&#39;, words first, &#39;$&#39;].

assemble value: #(
    program
    programist
    programistic
    programma
    programmar
    programmatic
    programmatically
    programmatist
    programmer)

&quot;=&gt; &#39;^program(?:|(?:ist(?:|ic)|m(?:a(?:|(?:r|ti(?:c(?:|ally)|st)))|er)))$&#39; &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4257/addtag/" class="addtag" id="addtag_4257">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4257/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4257/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4257"
  >-</span><span
  class="button yellow"
  id="rating_z_4257"
  >0</span><span 
  class="button green"
  id="rating_p_4257"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4257/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4272"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4272/">#4272</a>(<script language="JavaScript">print_time(new Date("2007/11/20 10:22 GMT"));</script><noscript>2007/11/20 10:22 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Text.RegexモジュールではデフォルトではPOSIXの正規表現をつかっている．
ここではそれにしたがった正規表現文字列を生成する．
メタ文字のエスケープもしたつもり．

実行結果
*Main&gt; putStrLn $ oregex (unfoldTree phi sample) ""
program(ist(ic)?|m(a(r|ti(c(ally)?|st))?|er))?
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Tree</span>

<span class="kr">type</span> <span class="n">Trie</span> <span class="o">=</span> <span class="n">Tree</span> <span class="p">(</span><span class="n">Bool</span><span class="p">,</span><span class="n">String</span><span class="p">)</span>

<span class="nv">eqapp</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">f</span> <span class="nv">y</span>

<span class="nv">lcp</span> <span class="o">::</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span> <span class="p">[</span><span class="n">String</span><span class="p">])</span>
<span class="nv">lcp</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,[])</span>
<span class="nv">lcp</span> <span class="nv">xxs</span><span class="o">@</span><span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> 
 <span class="o">=</span> <span class="kr">if</span> <span class="nv">null</span> <span class="nv">x</span> 
      <span class="kr">then</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nv">xxs</span><span class="p">)</span>
      <span class="kr">else</span> <span class="kr">if</span> <span class="nv">all</span> <span class="p">(</span><span class="nv">isPrefixOf</span> <span class="p">[</span><span class="nv">head</span> <span class="nv">x</span><span class="p">])</span> <span class="nv">xs</span> 
              <span class="kr">then</span> <span class="kr">case</span> <span class="nv">lcp</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">tail</span> <span class="nv">xxs</span><span class="p">)</span> <span class="kr">of</span>
                     <span class="p">(</span><span class="nv">ps</span><span class="p">,</span><span class="nv">yys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">head</span> <span class="nv">x</span><span class="o">:</span><span class="nv">ps</span><span class="p">,</span><span class="nv">yys</span><span class="p">)</span>
              <span class="kr">else</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nv">xxs</span><span class="p">)</span>


<span class="nv">phi</span> <span class="o">::</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">((</span><span class="n">Bool</span><span class="p">,</span><span class="n">String</span><span class="p">),</span> <span class="p">[[</span><span class="n">String</span><span class="p">]])</span>
<span class="nv">phi</span> <span class="p">[</span><span class="nv">x</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="n">False</span><span class="p">,</span><span class="nv">x</span><span class="p">),</span> <span class="p">[])</span>
<span class="nv">phi</span> <span class="nv">xxs</span>  <span class="o">=</span> <span class="kr">case</span> <span class="nv">lcp</span> <span class="nv">xxs</span> <span class="kr">of</span>
 <span class="p">(</span><span class="nv">ps</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="o">:</span><span class="nv">ys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">((</span><span class="n">True</span><span class="p">,</span><span class="nv">ps</span><span class="p">),</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="nv">eqapp</span> <span class="nv">head</span><span class="p">)</span> <span class="nv">ys</span><span class="p">)</span>
 <span class="p">(</span><span class="nv">ps</span><span class="p">,</span><span class="nv">yys</span><span class="p">)</span>   <span class="o">-&gt;</span> <span class="p">((</span><span class="n">False</span><span class="p">,</span><span class="nv">ps</span><span class="p">),</span><span class="nv">groupBy</span> <span class="p">(</span><span class="nv">eqapp</span> <span class="nv">head</span><span class="p">)</span> <span class="nv">yys</span><span class="p">)</span>

<span class="nv">oregex</span> <span class="o">::</span> <span class="n">Trie</span> <span class="o">-&gt;</span> <span class="n">ShowS</span>
<span class="nv">oregex</span> <span class="p">(</span><span class="n">Node</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="p">[])</span>
 <span class="o">|</span> <span class="nv">p</span>         <span class="o">=</span> <span class="nv">showString</span> <span class="p">(</span><span class="nv">escape</span> <span class="nv">s</span><span class="p">)</span> <span class="o">.</span> <span class="nv">showString</span> <span class="s">&quot;?&quot;</span>
 <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="nv">showString</span> <span class="p">(</span><span class="nv">escape</span> <span class="nv">s</span><span class="p">)</span>
<span class="nv">oregex</span> <span class="p">(</span><span class="n">Node</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="nv">cs</span><span class="p">)</span>
 <span class="o">|</span> <span class="nv">p</span>         <span class="o">=</span> <span class="p">(</span><span class="nv">showString</span> <span class="p">(</span><span class="nv">escape</span> <span class="nv">s</span><span class="p">)</span> <span class="o">.</span><span class="p">)</span> <span class="o">$</span> <span class="p">(</span><span class="o">.</span> <span class="nv">showString</span> <span class="s">&quot;?&quot;</span><span class="p">)</span> <span class="o">$</span> <span class="nv">paren</span> <span class="o">$</span> <span class="nv">foldr</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="nv">id</span> <span class="p">(</span><span class="nv">intersperse</span> <span class="p">(</span><span class="nv">showString</span> <span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">oregex</span> <span class="nv">cs</span><span class="p">))</span>
 <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="p">(</span><span class="nv">showString</span> <span class="p">(</span><span class="nv">escape</span> <span class="nv">s</span><span class="p">)</span> <span class="o">.</span><span class="p">)</span> <span class="o">$</span> <span class="nv">paren</span> <span class="o">$</span> <span class="nv">foldr</span> <span class="p">(</span><span class="o">.</span><span class="p">)</span> <span class="nv">id</span> <span class="p">(</span><span class="nv">intersperse</span> <span class="p">(</span><span class="nv">showString</span> <span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">oregex</span> <span class="nv">cs</span><span class="p">))</span>

<span class="nv">paren</span> <span class="o">::</span> <span class="n">ShowS</span> <span class="o">-&gt;</span> <span class="n">ShowS</span>
<span class="nv">paren</span> <span class="nv">s</span> <span class="o">=</span> <span class="nv">showString</span> <span class="s">&quot;(&quot;</span> <span class="o">.</span> <span class="nv">s</span> <span class="o">.</span> <span class="nv">showString</span> <span class="s">&quot;)&quot;</span>

<span class="nv">metaChars</span> <span class="o">=</span> <span class="s">&quot;\\|[](){}.*+?^$&quot;</span>
<span class="nv">escapeMeta</span> <span class="nv">c</span> <span class="o">|</span> <span class="nv">elem</span> <span class="nv">c</span> <span class="nv">metaChars</span> <span class="o">=</span> <span class="sc">&#39;\\&#39;</span><span class="o">:</span><span class="p">[</span><span class="nv">c</span><span class="p">]</span>
             <span class="o">|</span> <span class="nv">otherwise</span>        <span class="o">=</span> <span class="p">[</span><span class="nv">c</span><span class="p">]</span>

<span class="nv">escape</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="nv">escapeMeta</span>

<span class="nv">sample</span> <span class="o">=</span> <span class="nv">sort</span> <span class="p">[</span><span class="s">&quot;program&quot;</span>
              <span class="p">,</span><span class="s">&quot;programist&quot;</span>
              <span class="p">,</span><span class="s">&quot;programistic&quot;</span>
              <span class="p">,</span><span class="s">&quot;programma&quot;</span>
              <span class="p">,</span><span class="s">&quot;programmar&quot;</span>
              <span class="p">,</span><span class="s">&quot;programmatic&quot;</span>
              <span class="p">,</span><span class="s">&quot;programmatically&quot;</span>
              <span class="p">,</span><span class="s">&quot;programmatist&quot;</span>
              <span class="p">,</span><span class="s">&quot;programmer&quot;</span>
              <span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4272/addtag/" class="addtag" id="addtag_4272">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4272/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4272/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4272"
  >-</span><span
  class="button yellow"
  id="rating_z_4272"
  >0</span><span 
  class="button green"
  id="rating_p_4272"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4272/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment4101"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4101/">#4101</a>(<script language="JavaScript">print_time(new Date("2007/11/16 07:51 GMT"));</script><noscript>2007/11/16 07:51 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>素朴な方法で</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="k">class</span> <span class="nc">Node</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">acceptable</span><span class="p">,</span> <span class="n">children</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">children</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nb">super</span><span class="p">(</span><span class="n">Node</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">super</span><span class="p">(</span><span class="n">Node</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span> <span class="o">=</span> <span class="n">acceptable</span>

    <span class="k">def</span> <span class="nf">get_pattern</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">c</span><span class="p">)</span>
        <span class="n">trail</span> <span class="o">=</span> <span class="s">&#39;|&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">child</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span> <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">itervalues</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">trail</span><span class="p">:</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="s">&#39;(?:</span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="n">trail</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span><span class="p">:</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="s">&#39;?&#39;</span>
        <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">optimize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">children</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">itervalues</span><span class="p">():</span>
            <span class="n">optimized</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">optimize</span><span class="p">()</span>
            <span class="n">children</span><span class="p">[</span><span class="n">optimized</span><span class="o">.</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">optimized</span>

        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span><span class="p">:</span>
            <span class="n">child</span> <span class="o">=</span> <span class="n">children</span><span class="o">.</span><span class="n">values</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">c</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">+</span> <span class="n">child</span><span class="o">.</span><span class="n">c</span>
            <span class="n">acceptable</span> <span class="o">=</span> <span class="n">child</span><span class="o">.</span><span class="n">acceptable</span>
            <span class="k">return</span> <span class="n">Node</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">acceptable</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Node</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">c</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span><span class="p">,</span> <span class="n">children</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>

        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
                <span class="n">node</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="n">node</span><span class="o">.</span><span class="n">acceptable</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">get_pattern</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">optimize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">Trie</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">optimize</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
    <span class="k">import</span> <span class="nn">fileinput</span>

    <span class="n">trie</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
        <span class="n">word</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">trie</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

    <span class="n">trie</span> <span class="o">=</span> <span class="n">trie</span><span class="o">.</span><span class="n">optimize</span><span class="p">()</span>
    <span class="k">print</span> <span class="n">trie</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4101/addtag/" class="addtag" id="addtag_4101">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4101/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4101/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4101"
  >-</span><span
  class="button yellow"
  id="rating_z_4101"
  >0</span><span 
  class="button green"
  id="rating_p_4101"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4101/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4101/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4102"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4102/">#4102</a>(<script language="JavaScript">print_time(new Date("2007/11/16 08:06 GMT"));</script><noscript>2007/11/16 08:06 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>あぁ、よく考えれば TRIE そのものをいじらなくてもいいな。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="k">class</span> <span class="nc">Node</span><span class="p">(</span><span class="nb">dict</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">acceptable</span><span class="p">,</span> <span class="n">children</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">children</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nb">super</span><span class="p">(</span><span class="n">Node</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nb">super</span><span class="p">(</span><span class="n">Node</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">c</span> <span class="o">=</span> <span class="n">c</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span> <span class="o">=</span> <span class="n">acceptable</span>

    <span class="k">def</span> <span class="nf">get_pattern</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">c</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span><span class="p">:</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="bp">self</span><span class="o">.</span><span class="n">values</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="s">&#39;(?:</span><span class="si">%s</span><span class="s">)&#39;</span> <span class="o">%</span> <span class="s">&#39;|&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">c</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">itervalues</span><span class="p">())</span>

            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">acceptable</span><span class="p">:</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="s">&#39;?&#39;</span>
        <span class="k">return</span> <span class="n">s</span>

<span class="k">class</span> <span class="nc">Trie</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">root</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">root</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">root</span> <span class="o">=</span> <span class="n">root</span>

    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">word</span><span class="p">):</span>
        <span class="n">node</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span>

        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">word</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">c</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">node</span><span class="p">:</span>
                <span class="n">node</span><span class="p">[</span><span class="n">c</span><span class="p">]</span> <span class="o">=</span> <span class="n">Node</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
            <span class="n">node</span> <span class="o">=</span> <span class="n">node</span><span class="p">[</span><span class="n">c</span><span class="p">]</span>
        <span class="n">node</span><span class="o">.</span><span class="n">acceptable</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">get_pattern</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
    <span class="k">import</span> <span class="nn">fileinput</span>

    <span class="n">trie</span> <span class="o">=</span> <span class="n">Trie</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
        <span class="n">word</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">trie</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>

    <span class="k">print</span> <span class="n">trie</span><span class="o">.</span><span class="n">get_pattern</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4102/addtag/" class="addtag" id="addtag_4102">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4102/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4102/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4102"
  >-</span><span
  class="button yellow"
  id="rating_z_4102"
  >0</span><span 
  class="button green"
  id="rating_p_4102"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4101/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4102/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4102/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  
    




<div class="comment" id="comment4352"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4352/">#4352</a>(<script language="JavaScript">print_time(new Date("2007/11/23 03:27 GMT"));</script><noscript>2007/11/23 03:27 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  引数で与えられた文字列（のみ）にマッチする正規表現を生成します。生成される正規表現はPerl互換のはずです（Javaで動作する事は確認してあります）。<br/><br/>program<br/>programist<br/>programistic<br/>programma<br/>programmar<br/>programmatic<br/>programmatically<br/>programmatist<br/>programmer<br/>を与えた場合は、<br/>program(?:|ist(?:|ic)|m(?:a(?:|r|ti(?:c(?:|ally)|st))|er))<br/>を生成します。<br/><br/>＃Javaの総称で再帰的なデータ構造を表現する事はできないのでしょうか（この例ではキャストで逃げています）。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unckecked&quot;</span><span class="o">)</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Trie</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">final</span> <span class="n">String</span> <span class="n">MUST_ESCAPE</span> <span class="o">=</span> <span class="s">&quot;()[]\\.+*?|&quot;</span><span class="o">;</span>
    <span class="k">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;</span> <span class="n">trie</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;();</span>
    <span class="k">public</span> <span class="kt">void</span> <span class="n">add</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;</span> <span class="n">t</span> <span class="o">=</span> <span class="n">trie</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">char</span> <span class="n">c</span> <span class="o">:</span> <span class="n">str</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">c</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">t</span> <span class="o">=</span> <span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;)</span><span class="n">t</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;</span> <span class="n">t2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;();</span>
                <span class="n">t</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">t2</span><span class="o">);</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">t2</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">t</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="sc">&#39;\0&#39;</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">toRegex</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">toRegex</span><span class="o">(</span><span class="n">trie</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="n">StringBuilder</span> <span class="n">toRegex</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Map</span><span class="o">&gt;</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">keys</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">keys</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;(?:&quot;</span><span class="o">);</span>
        <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">&gt;</span> <span class="n">i</span> <span class="o">=</span> <span class="n">keys</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">MUST_ESCAPE</span><span class="o">.</span><span class="na">indexOf</span><span class="o">(</span><span class="n">c</span><span class="o">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\\&#39;</span><span class="o">);</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">toRegex</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">)));</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span>
                <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;|&#39;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">keys</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;)&quot;</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Trie</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Trie</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">str</span> <span class="o">:</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">t</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">t</span><span class="o">.</span><span class="na">toRegex</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4352/addtag/" class="addtag" id="addtag_4352">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4352/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/4352/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4352"
  >-</span><span
  class="button yellow"
  id="rating_z_4352"
  >0</span><span 
  class="button green"
  id="rating_p_4352"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4352/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment6757"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/840/" target="_top">leque</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/6757/">#6757</a>(<script language="JavaScript">print_time(new Date("2008/07/17 04:00 GMT"));</script><noscript>2008/07/17 04:00 GMT</noscript>)
	
	
	
	[<a href="/web/20110214142832/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>共通部分文字列を切り出しながら Trie を作っています。もう少しスマートにできないものかしらん。</p>
<p>出力:</p>
<pre class="literal-block">
(?:program(?:ist(?:ic)?|m(?:a(?:r|ti(?:c(?:ally)?|st))?|er))?)
</pre>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-13</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">collection</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-trie</span> <span class="nv">strs</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">string-ref*</span> <span class="nv">s</span> <span class="nv">n</span><span class="p">)</span>
    <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">string-null?</span> <span class="nv">s</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">s</span> <span class="nv">n</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-node</span> <span class="nv">xs</span><span class="p">)</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">xs</span><span class="p">))</span>
        <span class="nv">xs</span>
        <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">b</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">min</span>
                        <span class="p">(</span><span class="nf">pair-fold</span>
                         <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">ys</span> <span class="nv">knil</span><span class="p">)</span>
                           <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">ys</span><span class="p">))</span>
                               <span class="nv">knil</span>
                               <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">string-prefix-length</span> <span class="p">(</span><span class="nb">car </span><span class="nv">ys</span><span class="p">)</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">ys</span><span class="p">))</span>
                                     <span class="nv">knil</span><span class="p">)))</span>
                         <span class="o">&#39;</span><span class="p">()</span> <span class="nv">xs</span><span class="p">))))</span>
          <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">string-take</span> <span class="p">(</span><span class="nb">car </span><span class="nv">xs</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span>
                <span class="p">(</span><span class="nf">make-trie*</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">cut</span> <span class="nv">string-drop</span> <span class="nv">&lt;&gt;</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">xs</span><span class="p">))))))</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-trie*</span> <span class="nv">ss</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">map </span><span class="nv">make-node</span> <span class="p">(</span><span class="nf">group-collection</span> <span class="nv">ss</span> <span class="nv">:key</span> <span class="p">(</span><span class="nf">cut</span> <span class="nv">string-ref*</span> <span class="nv">&lt;&gt;</span> <span class="mi">0</span><span class="p">))))</span>
  <span class="p">(</span><span class="nb">cons </span><span class="s">&quot;&quot;</span> <span class="p">(</span><span class="nf">make-trie*</span> <span class="nv">strs</span><span class="p">)))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">trie-&gt;regexp-str</span> <span class="nv">tree</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">null-node?</span> <span class="nv">node</span><span class="p">)</span>
    <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">node</span><span class="p">)</span>
         <span class="p">(</span><span class="nf">string-null?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">node</span><span class="p">))</span>
         <span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">node</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">tree</span><span class="p">))</span>
      <span class="p">(</span><span class="nb">car </span><span class="nv">tree</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">format</span> <span class="s">&quot;~A(?:~A)~A&quot;</span>
              <span class="p">(</span><span class="nb">car </span><span class="nv">tree</span><span class="p">)</span>
              <span class="p">(</span><span class="nf">string-join</span> <span class="p">(</span><span class="nb">map </span><span class="nv">trie-&gt;regexp-str</span>
                                <span class="p">(</span><span class="nf">remove</span> <span class="nv">null-node?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tree</span><span class="p">)))</span> <span class="s">&quot;|&quot;</span><span class="p">)</span>
              <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">any</span> <span class="nv">null-node?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tree</span><span class="p">))</span> <span class="s">&quot;?&quot;</span> <span class="s">&quot;&quot;</span><span class="p">))))</span>

<span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nf">trie-&gt;regexp-str</span>
        <span class="p">(</span><span class="nf">make-trie</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;program&quot;</span>
                     <span class="s">&quot;programist&quot;</span>
                     <span class="s">&quot;programistic&quot;</span>
                     <span class="s">&quot;programma&quot;</span>
                     <span class="s">&quot;programmar&quot;</span>
                     <span class="s">&quot;programmatic&quot;</span>
                     <span class="s">&quot;programmatically&quot;</span>
                     <span class="s">&quot;programmatist&quot;</span>
                     <span class="s">&quot;programmer&quot;</span><span class="p">))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/6757/addtag/" class="addtag" id="addtag_6757">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110214142832/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20110214142832/http://ja.doukaku.org/comment/6757/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110214142832/http://ja.doukaku.org/comment/6757/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6757"
  >-</span><span
  class="button yellow"
  id="rating_z_6757"
  >0</span><span 
  class="button green"
  id="rating_p_6757"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/6757/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment4259"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/212/" target="_top">odz</a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4259/">#4259</a>(<script language="JavaScript">print_time(new Date("2007/11/19 15:34 GMT"));</script><noscript>2007/11/19 15:34 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>なんだかメタキャラクタのエスケープを全くしていないコードが目立つような。
まずくないですかね？</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4259/addtag/" class="addtag" id="addtag_4259">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4259"
  >-</span><span
  class="button yellow"
  id="rating_z_4259"
  >0</span><span 
  class="button green"
  id="rating_p_4259"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110214142832/http://ja.doukaku.org/comment/4259/">
    1
    reply
  </a>

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4259/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment4275"><!--dj-->
  <p class="banner"><a href="/web/20110214142832/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20110214142832/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4275/">#4275</a>(<script language="JavaScript">print_time(new Date("2007/11/20 12:40 GMT"));</script><noscript>2007/11/20 12:40 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>気付いていながらエスケープしないコードを投稿してしまった人です。</p>
<p>単に、まあいいかなと思ってそのままにしました。
お題の趣旨はどうやって trie を作るかで、問題文が細かいところにはあまり拘らないという感じだったので。</p>
<p>ただ、改めて考えると一応正規表現を作れという問題ですから、よくなかったかもしれません。少なくとも気付いてたなら投稿時に言及しとくべきでしたね。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110214142832/http://ja.doukaku.org/comment/4275/addtag/" class="addtag" id="addtag_4275">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4275"
  >-</span><span
  class="button yellow"
  id="rating_z_4275"
  >0</span><span 
  class="button green"
  id="rating_p_4275"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4259/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110214142832/http://ja.doukaku.org/comment/4275/root/"><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110214142832/http://ja.doukaku.org/84/reply_to/4275/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20110214142832if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<li><a href="/web/20110214142832/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20110214142832/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20110214142832/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20110214142832/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20110214142832/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20110214142832/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20110214142832/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20110214142832/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20110214142832im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>

<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20110214142832/http://ja.doukaku.org/qa/">Q&amp;A</a>
<li><a href="/web/20110214142832/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20110214142832/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20110214142832/http://www.djangoproject.com/">Django</a>
</ul>


</div>
</div>


<div id="page_foot" class="bordered">
<a rel="license" href="/web/20110214142832/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20110214142832im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20110214142832/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20110214142832/http://ja.doukaku.org/qa/#licence">[詳細]</a>
</div>

</body>



<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20110214142832/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20110214142832js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>



</html>





<!--
     FILE ARCHIVED ON 14:28:32 Feb 14, 2011 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:07:28 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
