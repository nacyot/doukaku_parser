
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
アクセスログのIPアドレスを逆引き
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20110426043058cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20110426043058cs_/http://ja.doukaku.org/static/style/style.css" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20110426043058cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<script src="/web/20110426043058js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20110426043058js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20110426043058js_/http://ja.doukaku.org/static/js/addtag.js" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20110426043058js_/http://ja.doukaku.org/static/js/utils.js" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app11.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/39\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "26";
var displayMonth = "Apr";
var displayYear = "2011";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/39/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20110426043058" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081019013347/http://ja.doukaku.org/39/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="19 Oct 2008"><strong>OCT</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 4:30:58 Apr 26, 2011">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081019013347/http://ja.doukaku.org/39/nested/" title="1:33:47 Oct 19, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 4:30:58 Apr 26, 2011">26</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081019013347/http://ja.doukaku.org/39/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="19 Oct 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 4:30:58 Apr 26, 2011">2011</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2012
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20110426043058*/http://ja.doukaku.org/39/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>3 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 26 Apr 11</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000000_2008:-1:000000000100_2009:-1:000000000000_2010:-1:000000000000_2011:3:000100000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20110426043058/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20110426043058im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20110426043058/http://ja.doukaku.org/39/">アクセスログのIPアドレスを逆引き</a>
</h2>

    




<div class="comment" id="comment3395"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/101/" target="_top">沢渡 みかげ</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3395/">#3395</a>(<script language="JavaScript">print_time(new Date("2007/08/03 11:32 GMT"));</script><noscript>2007/08/03 11:32 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  アクセスログのIPアドレスを逆引きするフィルタを作成してください．
<p>
アクセスログの各行の先頭にIPアドレスがあります．そのIPアドレスを逆引き結果のFQDNで置き換えてください．
<p>
逆引きが出来なかった場合は，IPアドレスのまま残します．
IPアドレス以外の部分は，そのまま加工せずに残してください．

<p>
----
<p>
例）192.168.7.1 が逆引きできない場合
<p>
210.166.209.71 - - [26/Jul/2007:22:32:47 +0900] "GET / HTTP/1.1" 403 283 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"<br>
192.168.7.1 - - [26/Jul/2007:22:32:48 +0900] "GET /favicon.ico HTTP/1.1" 404 290 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"
<p>
↓
<p>
mikage.to - - [26/Jul/2007:22:32:47 +0900] "GET / HTTP/1.1" 403 283 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"<br>
192.168.7.1 - - [26/Jul/2007:22:32:48 +0900] "GET /favicon.ico HTTP/1.1" 404 290 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"
<p>
----
<p>

アクセスログは膨大な量があるため，現実的な時間で処理できるよう，以下の条件をつけます．
<p>
・メモリに入りきらないような巨大なログも処理できるようにしてください．（ファイル全体をメモリに読み込むのはNG）
<p>
・十分な速度で処理できるよう，並列化する等の工夫をしてください．
<p>
・DNSサーバに大量のリクエストが行かないよう，結果をキャッシュしてDNSサーバへのアクセスを削減してください．
　なお，DNSのTTLは無視して結果をキャッシュしてかまいません．
　（ログの記録された時間の逆引きするタイミングがずれているため，正確な逆引きは元々無理なので）
<p>
名前解決はgethostbyaddrを利用しても良いですし，再帰的に名前解決が出来るDNSサーバと直接通信してもかまいません．

<p>
ログを順次読み取り処理する部分を，データを共有しつついかに並列化するか，という部分を問うのが目的です．
<p>
このお題は沢渡みかげさんの投稿です。ご投稿ありがとうございます。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3395/addtag/" class="addtag" id="addtag_3395">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3395"
  >-</span><span
  class="button yellow"
  id="rating_z_3395"
  >0</span><span 
  class="button green"
  id="rating_p_3395"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://reply_to/3395/">
  返信
  </a>]
  </div>
</div>
</div>



  



<div class="indent">
<a href="/web/20110426043058/http://ja.doukaku.org/39/post_comment/">
コメントを投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20110426043058/http://ja.doukaku.org/39/flatten/">フラット表示</a> 
<a href="/web/20110426043058/http://ja.doukaku.org/39/">非表示</a> 


  
    




<div class="comment" id="comment3718"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3718/">#3718</a>(<script language="JavaScript">print_time(new Date("2007/11/05 17:04 GMT"));</script><noscript>2007/11/05 17:04 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffbf;">0/4=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  
<p>Perlがなぜかないので。
</p>
<p>Regexpは<a href="/web/20110426043058/http://blog.livedoor.jp/dankogai/archives/50932438.html">こちら</a>
   を参照のこと。
</p>
<p>一行で
</p>
<p><code>perl -MSocket -ple 's{((?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2})[.](?:25[0-5]|2[0-4][0-9]|[0-1]?[0-9]{1,2}))}{$cache{$1}||=(gethostbyaddr(inet_aton($1),AF_INET))[0]}eg'</code>
</p>
<p>でもOK.
</p>
<p>Dan the Perl Monger
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">Socket</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">%cache</span><span class="p">;</span>
<span class="k">while</span> <span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">s</span><span class="p">{((?:</span><span class="mi">25</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span><span class="o">|</span><span class="mi">2</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">|</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">]?[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">})[</span><span class="o">.</span><span class="p">](?:</span><span class="mi">25</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span><span class="o">|</span><span class="mi">2</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">|</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">]?[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">})[</span><span class="o">.</span><span class="p">](?:</span><span class="mi">25</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span><span class="o">|</span><span class="mi">2</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">|</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">]?[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">})[</span><span class="o">.</span><span class="p">](?:</span><span class="mi">25</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">5</span><span class="p">]</span><span class="o">|</span><span class="mi">2</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">4</span><span class="p">][</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]</span><span class="o">|</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">1</span><span class="p">]?[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="p">]{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">}))}{</span><span class="nv">$cache</span><span class="p">{</span><span class="nv">$1</span><span class="p">}</span><span class="o">||=</span><span class="p">(</span><span class="nb">gethostbyaddr</span><span class="p">(</span><span class="n">inet_aton</span><span class="p">(</span><span class="nv">$1</span><span class="p">),</span><span class="n">AF_INET</span><span class="p">))[</span><span class="mi">0</span><span class="p">]}</span><span class="n">eg</span><span class="p">;</span>
    <span class="k">print</span><span class="p">;</span>
<span class="p">}</span>
<span class="cp">__END__</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3718/addtag/" class="addtag" id="addtag_3718">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3718/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3718/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffbf;"
  >0/4=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3718"
  >-</span><span
  class="button yellow"
  id="rating_z_3718"
  >0</span><span 
  class="button green"
  id="rating_p_3718"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/3718/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment1896"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/172/" target="_top">cats</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1896/">#1896</a>(<script language="JavaScript">print_time(new Date("2007/08/06 02:43 GMT"));</script><noscript>2007/08/06 02:43 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  queは、1命令で更新されると思われるので、lockしていない。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
  <span class="k">{</span>
    <span class="n">Stopwatch</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stopwatch</span><span class="p">();</span>
    <span class="n">sw</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
    <span class="c">// DNSのキャッシュ</span>
    <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="n">cash</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="c">// FIFOで結果を出力するためのデータ</span>
    <span class="n">Queue</span><span class="p">&lt;</span><span class="n">StringBuilder</span><span class="p">&gt;</span> <span class="n">que</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">StringBuilder</span><span class="p">&gt;();</span>
    <span class="kt">string</span> <span class="n">s</span><span class="p">;</span>
    <span class="c">// 入力が残っているか、未出力の結果がある間、ループ</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">s</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span> <span class="p">||</span> <span class="n">que</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="c">// 出力すべきデータがあれば出力</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">que</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">que</span><span class="p">.</span><span class="n">Peek</span><span class="p">().</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">que</span><span class="p">.</span><span class="n">Dequeue</span><span class="p">().</span><span class="n">ToString</span><span class="p">());</span>
      <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
      <span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
      <span class="kt">string</span> <span class="n">ip</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
      <span class="kt">string</span> <span class="n">msg</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
      <span class="n">que</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="n">sb</span><span class="p">);</span>
      <span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="k">delegate</span><span class="p">()</span>
      <span class="k">{</span>
        <span class="kt">string</span> <span class="n">ad</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">cash</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="k">out</span> <span class="n">ad</span><span class="p">))</span>
        <span class="k">{</span>
          <span class="n">ad</span> <span class="p">=</span> <span class="n">GetHost</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span>
          <span class="k">lock</span> <span class="p">(</span><span class="n">cash</span><span class="p">)</span> <span class="n">cash</span><span class="p">[</span><span class="n">ip</span><span class="p">]</span> <span class="p">=</span> <span class="n">ad</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="c">// ここで非同期に結果が作成される</span>
        <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">ad</span> <span class="p">+</span> <span class="n">msg</span><span class="p">);</span>
      <span class="k">}</span><span class="p">).</span><span class="n">Start</span><span class="p">();</span>
    <span class="k">}</span>
    <span class="n">sw</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">sw</span><span class="p">.</span><span class="n">Elapsed</span><span class="p">.</span><span class="n">TotalSeconds</span> <span class="p">+</span> <span class="s">&quot; sec&quot;</span><span class="p">);</span>
  <span class="k">}</span>
  <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetHost</span><span class="p">(</span><span class="kt">string</span> <span class="n">ip</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="c">// 並列化の効果を確認するため、遅延させる</span>
    <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">ip</span> <span class="p">==</span> <span class="s">&quot;XXX&quot;</span> <span class="p">?</span> <span class="m">600</span> <span class="p">:</span> <span class="m">300</span><span class="p">);</span>
    <span class="k">try</span> <span class="k">{</span> <span class="n">ip</span> <span class="p">=</span> <span class="n">Dns</span><span class="p">.</span><span class="n">GetHostEntry</span><span class="p">(</span><span class="n">ip</span><span class="p">).</span><span class="n">HostName</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">catch</span> <span class="k">{</span> <span class="k">}</span>
    <span class="k">return</span> <span class="n">ip</span><span class="p">;</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1896/addtag/" class="addtag" id="addtag_1896">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1896/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1896/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1896"
  >-</span><span
  class="button yellow"
  id="rating_z_1896"
  >0</span><span 
  class="button green"
  id="rating_p_1896"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1896/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1896/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1916"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1916/">#1916</a>(<script language="JavaScript">print_time(new Date("2007/08/06 06:48 GMT"));</script><noscript>2007/08/06 06:48 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>&gt; queは、1命令で更新されると思われるので、lockしていない

C#はよく知らないのですが、複数のCPUがあってもVM命令レベルでのatomicityというのは
保証されているのでしょうか?

(queue実装の方で内部的に排他している、とかの方がありそう、と思ってしまいます)
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1916/addtag/" class="addtag" id="addtag_1916">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1916"
  >-</span><span
  class="button yellow"
  id="rating_z_1916"
  >0</span><span 
  class="button green"
  id="rating_p_1916"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1896/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1916/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1916/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1916/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1922"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1922/">#1922</a>(<script language="JavaScript">print_time(new Date("2007/08/06 08:07 GMT"));</script><noscript>2007/08/06 08:07 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  http://msdn2.microsoft.com/en-us/library/system.collections.queue.aspx
を見ると、QueueはSynchronizeメソッドを使わない限り、スレッドセーフではないようですね。

というか、このコードだと、最悪入力行の数だけスレッドが立ち、
キューにStringBuilderが追加されることになりませんか？
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1922/addtag/" class="addtag" id="addtag_1922">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1922"
  >-</span><span
  class="button yellow"
  id="rating_z_1922"
  >0</span><span 
  class="button green"
  id="rating_p_1922"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1916/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1922/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1922/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1922/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1924"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/172/" target="_top">cats</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/">#1924</a>(<script language="JavaScript">print_time(new Date("2007/08/06 09:10 GMT"));</script><noscript>2007/08/06 09:10 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  いろいろ直してみました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Threading</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
  <span class="k">{</span>
    <span class="c">// スレッドの最大数</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">max</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
    <span class="n">Stopwatch</span> <span class="n">sw</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Stopwatch</span><span class="p">();</span>
    <span class="n">sw</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
    <span class="c">// DNSのキャッシュ</span>
    <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">String</span><span class="p">&gt;</span> <span class="n">cash</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
    <span class="c">// FIFOで結果を出力するためのデータ</span>
    <span class="n">Queue</span><span class="p">&lt;</span><span class="n">StringBuilder</span><span class="p">&gt;</span> <span class="n">que</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Queue</span><span class="p">&lt;</span><span class="n">StringBuilder</span><span class="p">&gt;();</span>
    <span class="kt">string</span> <span class="n">s</span><span class="p">;</span>
    <span class="n">Thread</span> <span class="n">th</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="p">(</span><span class="k">delegate</span><span class="p">()</span>
    <span class="k">{</span>
      <span class="k">while</span> <span class="p">(</span><span class="k">true</span><span class="p">)</span>
      <span class="k">{</span>
        <span class="c">// 出力すべきデータがあれば出力</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">que</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span> <span class="p">&amp;&amp;</span> <span class="n">que</span><span class="p">.</span><span class="n">Peek</span><span class="p">().</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">{</span>
          <span class="n">StringBuilder</span> <span class="n">stb</span><span class="p">;</span>
          <span class="k">lock</span> <span class="p">(</span><span class="n">que</span><span class="p">)</span> <span class="n">stb</span> <span class="p">=</span> <span class="n">que</span><span class="p">.</span><span class="n">Dequeue</span><span class="p">();</span>
          <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">stb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
        <span class="k">}</span>
        <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
      <span class="k">}</span>
    <span class="k">}</span><span class="p">);</span>
    <span class="n">th</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">s</span> <span class="p">=</span> <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">())</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="n">IsNullOrEmpty</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
      <span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">IndexOf</span><span class="p">(</span><span class="sc">&#39; &#39;</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
      <span class="k">while</span> <span class="p">(</span><span class="n">que</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;=</span> <span class="n">max</span><span class="p">)</span> <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
      <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
      <span class="kt">string</span> <span class="n">ip</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="n">i</span><span class="p">);</span>
      <span class="kt">string</span> <span class="n">msg</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
      <span class="k">lock</span> <span class="p">(</span><span class="n">que</span><span class="p">)</span> <span class="n">que</span><span class="p">.</span><span class="n">Enqueue</span><span class="p">(</span><span class="n">sb</span><span class="p">);</span>
      <span class="k">new</span> <span class="nf">Thread</span><span class="p">(</span><span class="k">delegate</span><span class="p">()</span>
      <span class="k">{</span>
        <span class="c">// Console.WriteLine(&quot;Thread start&quot;);</span>
        <span class="kt">string</span> <span class="n">ad</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">cash</span><span class="p">.</span><span class="n">TryGetValue</span><span class="p">(</span><span class="n">ip</span><span class="p">,</span> <span class="k">out</span> <span class="n">ad</span><span class="p">))</span>
        <span class="k">{</span>
          <span class="n">ad</span> <span class="p">=</span> <span class="n">GetHost</span><span class="p">(</span><span class="n">ip</span><span class="p">);</span>
          <span class="k">lock</span> <span class="p">(</span><span class="n">cash</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(!</span><span class="n">cash</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span> <span class="n">cash</span><span class="p">[</span><span class="n">ip</span><span class="p">]</span> <span class="p">=</span> <span class="n">ad</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="c">// ここで非同期に結果が作成される</span>
        <span class="n">sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">ad</span> <span class="p">+</span> <span class="n">msg</span><span class="p">);</span>
        <span class="c">// Console.WriteLine(&quot;Thread end&quot;);</span>
      <span class="k">}</span><span class="p">).</span><span class="n">Start</span><span class="p">();</span>
    <span class="k">}</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">que</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span> <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="m">10</span><span class="p">);</span>
    <span class="n">th</span><span class="p">.</span><span class="n">Abort</span><span class="p">();</span>
    <span class="n">sw</span><span class="p">.</span><span class="n">Stop</span><span class="p">();</span>
    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">sw</span><span class="p">.</span><span class="n">Elapsed</span><span class="p">.</span><span class="n">TotalSeconds</span> <span class="p">+</span> <span class="s">&quot; sec&quot;</span><span class="p">);</span>
  <span class="k">}</span>
  <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetHost</span><span class="p">(</span><span class="kt">string</span> <span class="n">ip</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="c">// 並列化の効果を確認するため、遅延させる</span>
    <span class="n">Thread</span><span class="p">.</span><span class="n">Sleep</span><span class="p">(</span><span class="n">ip</span> <span class="p">==</span> <span class="s">&quot;XXX&quot;</span> <span class="p">?</span> <span class="m">600</span> <span class="p">:</span> <span class="m">300</span><span class="p">);</span>
    <span class="k">try</span> <span class="k">{</span> <span class="n">ip</span> <span class="p">=</span> <span class="n">Dns</span><span class="p">.</span><span class="n">GetHostEntry</span><span class="p">(</span><span class="n">ip</span><span class="p">).</span><span class="n">HostName</span><span class="p">;</span> <span class="k">}</span>
    <span class="k">catch</span> <span class="k">{</span> <span class="k">}</span>
    <span class="k">return</span> <span class="n">ip</span><span class="p">;</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/addtag/" class="addtag" id="addtag_1924">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1924"
  >-</span><span
  class="button yellow"
  id="rating_z_1924"
  >0</span><span 
  class="button green"
  id="rating_p_1924"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1922/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1924/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1949"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1949/">#1949</a>(<script language="JavaScript">print_time(new Date("2007/08/06 16:05 GMT"));</script><noscript>2007/08/06 16:05 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>C# の lock って、クリティカルセクションですよ
ね？例えば下のコードですが、

    if (!cash.TryGetValue(ip, out ad))
    {
      ad = GetHost(ip);
      lock (cash)
        if (!cash.ContainsKey(ip)) cash[ip] = ad;
    }

TryGetValue が lock されてないので、他の
cashのロックが意味をなさなくなっていると
思います。複数のスレッドからアクセスされ
る変数は、すべての部分でロックしないと意味
がありません。では、TryGetValue をロックすれ
ばいいかというと、もし TryGetValue と 
ContainsKey の間で別のスレッドが cash を
変更してしまうと条件文で判定したことが意味
をなさなくなってしまうので、全体を lock する
必要があります。しかし単に全体を lock すると
GetHost(ip); で lock を保持したままブロック
してしまうので・・・という具合に、スレッド
プログラミングは面倒なのです（汗）

私なら、スレッドで cash をチェックするのでは
なく、cash をメインスレッドでチェックしてから
スレッドを起動する方向で検討すると思います。

こつとしては、

1. 複数スレッドから参照（変更）される変数は
なるべく減らす。
2. どうしても複数スレッドから参照される変数
は、必ず lock する。（PythonのQueue.Queue
のように、それ自体スレッドセーフで、周囲の
コードと一緒にまとめてlockする必要がない
場合を除く）
3. 時間のかかる処理（この場合は逆引き）は
lockの外に置くようにし、処理に必要な共有
データはlockの中で得て、ローカル変数に
取り出すような実装にする。

といったところでしょうか。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1949/addtag/" class="addtag" id="addtag_1949">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1949"
  >-</span><span
  class="button yellow"
  id="rating_z_1949"
  >0</span><span 
  class="button green"
  id="rating_p_1949"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1924/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1949/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1949/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


  

  

  
    




<div class="comment" id="comment1874"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/235/" target="_top">onjo</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1874/">#1874</a>(<script language="JavaScript">print_time(new Date("2007/08/05 13:53 GMT"));</script><noscript>2007/08/05 13:53 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  とりあえず、ipaddr-to-hostname の解決だけ並列化。まぁ、そもそもこのコードだと resolver 自体が並列動作できないけれど…そこまでやる場合はロックやキューを resolver 内で作って、process-run-function のパラメータとして渡せばいいと思います。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre>(defpackage :doukaku-39 (:use :cl))
(in-package :doukaku-39)

(defvar *endp* nil)
(defvar *lock* (mp:make-process-lock))
(defvar *reader-queue* (make-instance &#39;mp:queue))
(defvar *writer-queue* (make-instance &#39;mp:queue))

(defmacro with-dequeue ((elem queue lock) &amp;body body)
  &quot;キューに要素があるなら、取り出す。なければ別スレッドへ切り換え&quot;
  `(let ((,elem (mp:with-process-lock (,lock)
                  (unless (mp:queue-empty-p ,queue)
                    (mp:dequeue ,queue)))))
     (if (null ,elem)
         (mp:process-allow-schedule)
         (progn ,@body))))

(defun process/resolver ()
  &quot;ひたすら名前解決&quot;
  (loop
     (when (and (mp:queue-empty-p *reader-queue*) *endp*) (return))
     ;; キューが空なら待ち、要素があるなら読み出して処理し、結果を書き込みキューに入れる
     (with-dequeue (line *reader-queue* *lock*)
       (multiple-value-bind (match? whole ip rest)
           (excl:match-re &quot;(\\d+.\\d+.\\d+.\\d+)(.*)&quot; line)
         (declare (ignorable match? whole))
         ;; socket:ipaddr-to-hostname は Lisp レベルで名前のキャッシュを行ってる
         (mp:enqueue *writer-queue*
                     (concatenate &#39;string
                                  (or (socket:ipaddr-to-hostname ip) ip)
                                  rest))))))

(defun process/writer (output-file)
  &quot;ひたすら結果を出力&quot;
  (with-open-file (out output-file :direction :output :if-exists :supersede)
    (loop
       (when (and *endp* (mp:queue-empty-p *writer-queue*)
		         (mp:queue-empty-p *reader-queue*))
         (return))
       (with-dequeue (line *writer-queue* *lock*)
         (write-line line out)))))

(defun resolver (input-file output-file &amp;aux processes)
  &quot;ブロックする可能性のある名前解決をスレッド化して高速化&quot;
  (with-open-file (in input-file :direction :input)
      ;; 並列化
      (setf *endp* nil)
      (loop for i from 1 to 5 do
           (push (mp:process-run-function (format nil &quot;Resolver Process ~D&quot; i)
                                          #&#39;process/resolver) processes))
      (push (mp:process-run-function &quot;Writer Process&quot;
                                     #&#39;process/writer output-file) processes)
      ;; ファイルからの読み込み
      (loop for line = (read-line in nil :eof)
            until (eql line :eof)  
            do (mp:enqueue *reader-queue* line) ; 読み込んだ行をリゾルバ用キューに入れる
            finally (mp:with-process-lock (*lock*) (setf *endp* t)))
      ;; 全プロセスの終了待ち
      (loop until (some #&#39;mp:process-active-p processes)
            do (mp:process-allow-schedule))
      *endp*))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1874/addtag/" class="addtag" id="addtag_1874">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1874/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1874/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1874"
  >-</span><span
  class="button yellow"
  id="rating_z_1874"
  >0</span><span 
  class="button green"
  id="rating_p_1874"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1874/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  
    




<div class="comment" id="comment1798"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/103/" target="_top">mimizu</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1798/">#1798</a>(<script language="JavaScript">print_time(new Date("2007/08/03 18:42 GMT"));</script><noscript>2007/08/03 18:42 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  一応並列化してみたけど、どの程度効果があるのかは謎
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.File</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.FileNotFoundException</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.PrintWriter</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.net.InetAddress</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.net.UnknownHostException</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.Callable</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.ConcurrentLinkedQueue</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.ExecutionException</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.Executors</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.ExecutorService</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.FutureTask</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.regex.Pattern</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.regex.Matcher</span><span class="o">;</span>


<span class="k">public</span> <span class="k">class</span> <span class="nc">LogFilter</span> <span class="o">{</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">s</span>  <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">LogFilter</span> <span class="n">filter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LogFilter</span><span class="o">();</span>
        <span class="n">filter</span><span class="o">.</span><span class="na">nameResolve</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">1</span><span class="o">]));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()</span> <span class="o">-</span> <span class="n">s</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="k">public</span> <span class="kt">void</span> <span class="n">nameResolve</span><span class="o">(</span><span class="n">File</span> <span class="n">input</span><span class="o">,</span> <span class="n">File</span> <span class="n">output</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Reader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Reader</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        <span class="n">Writer</span> <span class="n">w</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Writer</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
        
        <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">r</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
        <span class="n">Thread</span> <span class="n">writeThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">w</span><span class="o">);</span>
        <span class="n">writeThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">writeThread</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">addressQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
    <span class="k">private</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">restQueue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentLinkedQueue</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
    
    <span class="k">private</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
    
    <span class="k">private</span> <span class="kt">boolean</span> <span class="n">eof</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
    
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">Pattern</span> <span class="n">ipPattern</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;^\\d{1,3}.\\d{1,3}.\\d{1,3}.\\d{1,3}\\b&quot;</span><span class="o">);</span>
    
    <span class="k">private</span> <span class="k">class</span> <span class="nc">Reader</span> <span class="k">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
        
        <span class="k">private</span> <span class="n">File</span> <span class="n">file</span><span class="o">;</span>
        
        <span class="k">public</span> <span class="n">Reader</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">file</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="n">ExecutorService</span> <span class="n">e</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
                <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
                <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">emptyTask</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span> <span class="o">{</span>
                    <span class="k">public</span> <span class="n">String</span> <span class="n">call</span><span class="o">()</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
                    <span class="o">}</span>
                <span class="o">});</span>
                <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">,</span> <span class="n">emptyTask</span><span class="o">);</span>
                <span class="n">e</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">emptyTask</span><span class="o">);</span>
                <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">ipPattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span> <span class="o">{</span>
                        <span class="n">String</span> <span class="n">address</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">();</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">address</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">task</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FutureTask</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="k">new</span> <span class="n">NameResolveTask</span><span class="o">(</span><span class="n">address</span><span class="o">));</span>
                            <span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">address</span><span class="o">,</span> <span class="n">task</span><span class="o">);</span>
                            <span class="n">e</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="n">task</span><span class="o">);</span>
                        <span class="o">}</span>
                        <span class="n">addressQueue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">address</span><span class="o">);</span>
                        <span class="n">StringBuffer</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">();</span>
                        <span class="n">m</span><span class="o">.</span><span class="na">appendReplacement</span><span class="o">(</span><span class="n">sb</span><span class="o">,</span> <span class="s">&quot;&quot;</span><span class="o">);</span>
                        <span class="n">m</span><span class="o">.</span><span class="na">appendTail</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
                        <span class="n">restQueue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="n">addressQueue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
                        <span class="n">restQueue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="n">in</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="n">eof</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ie</span><span class="o">)</span> <span class="o">{}</span>
            <span class="k">finally</span> <span class="o">{</span>
                <span class="n">e</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">class</span> <span class="nc">Writer</span> <span class="k">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
        
        <span class="k">private</span> <span class="n">File</span> <span class="n">file</span><span class="o">;</span>
        
        <span class="k">public</span> <span class="n">Writer</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">file</span> <span class="o">=</span> <span class="n">file</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintWriter</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">file</span><span class="o">);</span>
                <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">restQueue</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">try</span> <span class="o">{</span>
                            <span class="n">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">addressQueue</span><span class="o">.</span><span class="na">peek</span><span class="o">()).</span><span class="na">get</span><span class="o">());</span>
                            <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">restQueue</span><span class="o">.</span><span class="na">poll</span><span class="o">());</span>
                            <span class="n">addressQueue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                        <span class="o">}</span>
                        <span class="k">catch</span> <span class="o">(</span><span class="n">ExecutionException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
                        <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">eof</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">break</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">else</span> <span class="o">{</span>
                        <span class="n">Thread</span><span class="o">.</span><span class="na">yield</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{}</span>
        <span class="o">}</span>
        
    <span class="o">}</span>
    
    <span class="k">private</span> <span class="k">class</span> <span class="nc">NameResolveTask</span> <span class="k">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
        
        <span class="k">private</span> <span class="k">final</span> <span class="n">String</span> <span class="n">address</span><span class="o">;</span>
        
        <span class="k">private</span> <span class="n">NameResolveTask</span><span class="o">(</span><span class="n">String</span> <span class="n">address</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">address</span> <span class="o">=</span> <span class="n">address</span><span class="o">;</span>
        <span class="o">}</span>
        
        <span class="k">public</span> <span class="n">String</span> <span class="n">call</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">address</span><span class="o">).</span><span class="na">getHostName</span><span class="o">();</span>
            <span class="o">}</span>
            <span class="k">catch</span> <span class="o">(</span><span class="n">UnknownHostException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">address</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
    <span class="o">}</span>
    
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1798/addtag/" class="addtag" id="addtag_1798">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1798/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1798/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1798"
  >-</span><span
  class="button yellow"
  id="rating_z_1798"
  >0</span><span 
  class="button green"
  id="rating_p_1798"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1798/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment1787"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1787/">#1787</a>(<script language="JavaScript">print_time(new Date("2007/08/03 14:10 GMT"));</script><noscript>2007/08/03 14:10 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  Squeak Smalltalk で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><div class="highlight"><pre>| in out cache nameQueue restQueue mutex |
in := FileStream fileNamed: &#39;access_log&#39;.
out := FileStream fileNamed: &#39;access_log.txt&#39;.
cache := Dictionary new.
nameQueue := SharedQueue new.
restQueue := OrderedCollection new.
mutex := Semaphore forMutualExclusion.
[in atEnd] whileFalse: [
    nameQueue size &lt; 1000 ifTrue: [
        | ip |
        ip := in upTo: Character space.
        restQueue add: in nextLine.
        [   | name |
            mutex critical: [
                name := cache at: ip ifAbsentPut: [
                    (NetNameResolver
                        nameForAddress: (NetNameResolver addressFromString: ip)
                        timeout: 30) ifNil: [ip]]].
            nameQueue nextPut: name] fork.
        out nextPutAll: nameQueue next; space; nextPutAll: restQueue removeFirst; cr]].
in close.
out close
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1787/addtag/" class="addtag" id="addtag_1787">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1787/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1787/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1787"
  >-</span><span
  class="button yellow"
  id="rating_z_1787"
  >0</span><span 
  class="button green"
  id="rating_p_1787"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1787/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1787/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1799"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1799/">#1799</a>(<script language="JavaScript">print_time(new Date("2007/08/03 18:54 GMT"));</script><noscript>2007/08/03 18:54 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  すみません。nameQueue next のところで待ち合わせてしまうので、並列化されていませんでした(^_^;)。ということで、再チャレンジ。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre>| in numLines out queue sema mutex cache |
in := FileStream fileNamed: &#39;access_log&#39;.
out := FileStream fileNamed: &#39;access_log.txt&#39;.
queue := SharedQueue new.
numLines := 0.
[in atEnd] whileFalse: [in nextLine. numLines := numLines + 1].
sema := Semaphore new.
[   numLines timesRepeat: [
        | pair |
        pair := queue next.
        pair first wait.
        out nextPutAll: pair second; cr].
    in close.
    out close.
    sema signal] fixTemps fork.
in reset.
cache := Dictionary new.
mutex := Semaphore forMutualExclusion.
[in atEnd] whileFalse: [
    queue size &lt; 1000 ifTrue: [
        | ip rest pair |
        ip := in upTo: $ .
        rest := in nextLine.
        pair := {Semaphore new. #future}.
        queue nextPut: pair.
        [   | name |
            mutex critical: [
                name := cache at: ip ifAbsentPut: [
                    (NetNameResolver
                        nameForAddress: (NetNameResolver addressFromString: ip)
                        timeout: 30) ifNil: [ip]]].
            pair at: 2 put: name, &#39; &#39;, rest.
            pair first signal] fixTemps fork]].
sema wait
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1799/addtag/" class="addtag" id="addtag_1799">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1799/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1799/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1799"
  >-</span><span
  class="button yellow"
  id="rating_z_1799"
  >0</span><span 
  class="button green"
  id="rating_p_1799"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1787/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1799/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1799/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  
    




<div class="comment" id="comment1846"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1846/">#1846</a>(<script language="JavaScript">print_time(new Date("2007/08/04 18:42 GMT"));</script><noscript>2007/08/04 18:42 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  ScalaといえばActorです。というわけでActor使ってます。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76</pre></td><td class="code"><div class="highlight"><pre>import java.net.{InetAddress, UnknownHostException}
import scala.collection.mutable.{HashMap, Queue}
import scala.io._
import java.io._
import scala.actors._
import scala.actors.Actor._

class Log(in:String, out:String, n:int){
  val outio = new BufferedWriter(new FileWriter(out))
  val inio  = new BufferedReader(new FileReader(in))
  var resolved = new HashMap[int, String]
  var writeQueue  = new Queue[int]
  val readers = (for(i &lt;- 0 to n-1) yield new reader(i)).toArray
  var done = false

  val lookupCahce = new HashMap[String, String]
  def lookup(ip:String) = lookupCahce.getOrElseUpdate(ip, (try {
    InetAddress.getByName(ip).getHostName
  }catch {
    case _ =&gt; ip
  }))

  def process() = {
    done = false
    readers.foreach(x =&gt; {
      x.link(writer)
      x.trapExit = true
      x.start
      x ! &#39;resolve
    })
  }

  val writer:Actor = actor {
    loop {
      react {
        case &#39;write =&gt;
          if(writeQueue.size &gt; 0) {
            if(resolved.contains(writeQueue.front)) {
              val i = writeQueue.dequeue
              val line = resolved(i)
              resolved -= i 
              readers(i) ! &#39;resolve
              outio.write(line+&quot;\n&quot;)
            }
            writer ! &#39;write
          }
          if(done &amp;&amp; writeQueue.size == 1){
            outio.close; 
            exit
          }
      }
    }
  }

  class reader(i:int) extends Actor {
    def act() = loop {
      react {
        case &#39;resolve =&gt; 
          if(!done) {
            writeQueue += i
            val line = inio.readLine
            if(line != null) {
              val (ip::rest) = line.split(&quot; &quot;).toList
              resolved(i) = (lookup(ip)::rest).mkString(&quot; &quot;)
            }else {
              done = true
            }
            writer ! &#39;write
          }
        case Exit(_, _) =&gt; exit
      }
    }
  }
}

new Log(&quot;test.log&quot;, &quot;testout.log&quot;, 20) process
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1846/addtag/" class="addtag" id="addtag_1846">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1846/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1846/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1846"
  >-</span><span
  class="button yellow"
  id="rating_z_1846"
  >0</span><span 
  class="button green"
  id="rating_p_1846"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1846/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment2074"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2074/">#2074</a>(<script language="JavaScript">print_time(new Date("2007/08/12 05:08 GMT"));</script><noscript>2007/08/12 05:08 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Cの投稿がなかったので作ってみました。
夏休み万歳！

ばかでかくなってしまってごめんなさい。
半分くらいはリスト管理です。
並列化はしていませんorz
入力が1つしかないので
シリアルでも十分な性能は出ていると
思いますけど、動作テストしただけだし
大きなログを持っていないのでそのへんは適当です。
マルチスレッドにするのならどこをやるんだろう？
BTREEにして分割検索？

#名前解決ができないと3秒くらい止まってしまうのはうちの環境だけ?

gcc -std=c99 -Wall doukaku039.c -o a</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;limits.h&gt;</span>
<span class="cp">#include &lt;memory.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;sys/types.h&gt;</span>
<span class="cp">#include &lt;netdb.h&gt;</span>
<span class="cp">#include &lt;arpa/inet.h&gt;</span>
<span class="cp">#include &lt;netinet/in.h&gt;</span>

<span class="cp">#ifdef TEST</span>
<span class="cp">#define DPRINTF(fmt, ...) {  printf(&quot;#debug(%4d)@%-10s: &quot;, __LINE__, __func__); \</span>
<span class="cp">                             printf(fmt, ## __VA_ARGS__); fflush(stdout); }</span>
<span class="cp">#else</span>
<span class="cp">#define DPRINTF(fmt, ...) { ; }</span>
<span class="cp">#endif</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagHOSTINFO</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">in_addr</span> <span class="n">addr</span><span class="p">;</span>
    <span class="kt">char</span> <span class="n">IPv4</span><span class="p">[</span><span class="mi">16</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">char</span> <span class="n">hostname</span><span class="p">[</span><span class="mi">63</span><span class="p">];</span>
    <span class="k">struct</span> <span class="n">tagHOSTINFO</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">}</span> <span class="n">HOSTINFO</span><span class="p">;</span>

<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagROOTNODE</span>
<span class="p">{</span>
    <span class="kt">int</span>                <span class="n">count</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">tagHOSTINFO</span> <span class="o">*</span><span class="n">begin</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">tagHOSTINFO</span> <span class="o">*</span><span class="n">end</span><span class="p">;</span>
<span class="p">}</span> <span class="n">ROOTNODE</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">compare_IPv4</span><span class="p">(</span><span class="k">const</span> <span class="n">HOSTINFO</span>  <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">HOSTINFO</span>  <span class="n">b</span> <span class="p">)</span>
<span class="p">{</span>

    <span class="k">if</span><span class="p">(</span> <span class="n">a</span><span class="p">.</span><span class="n">addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">&lt;</span> <span class="n">b</span><span class="p">.</span><span class="n">addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="p">)</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">a</span><span class="p">.</span><span class="n">addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="p">)</span> <span class="k">return</span>  <span class="mi">1</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">clear_list</span><span class="p">(</span><span class="k">const</span> <span class="n">ROOTNODE</span> <span class="n">root</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">cursor</span><span class="p">;</span>
    <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">store</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="n">cursor</span><span class="o">=</span><span class="n">root</span><span class="p">.</span><span class="n">begin</span><span class="p">;</span> <span class="n">n</span><span class="o">&lt;=</span><span class="n">root</span><span class="p">.</span><span class="n">count</span><span class="p">;</span> <span class="n">n</span> <span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
<span class="cp">#ifdef TEST</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%2d:[%s] %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">);</span>
<span class="cp">#endif</span>
        <span class="n">store</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
        <span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
        <span class="n">free</span><span class="p">(</span><span class="n">store</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">free</span><span class="p">(</span><span class="n">store</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>  <span class="nf">addList</span><span class="p">(</span><span class="n">ROOTNODE</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">before</span><span class="p">,</span> <span class="k">const</span> <span class="n">HOSTINFO</span> <span class="n">info</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span>      <span class="n">result</span><span class="p">;</span>

    <span class="c">/* 追加用のキッシュアイテム 作成 */</span>
    <span class="n">DPRINTF</span><span class="p">(</span><span class="s">&quot;登録(%d):[%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">info</span><span class="p">.</span><span class="n">IPv4</span><span class="p">);</span>
    <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">HOSTINFO</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span> <span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HOSTINFO</span><span class="p">)</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">item</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">memcpy</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">info</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HOSTINFO</span><span class="p">));</span>
    <span class="n">item</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>

    <span class="c">/* IPアドレスの変換 */</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">inet_aton</span><span class="p">(</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">addr</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">DPRINTF</span><span class="p">(</span><span class="s">&quot;IPアドレスの書式不正:[%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="n">IPv4</span><span class="p">);</span>
        <span class="n">free</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

<span class="cp">#ifdef TEST</span>
    <span class="n">strncpy</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="s">&quot;HOSTNAME&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
<span class="cp">#else</span>
    <span class="c">/* ホスト名取得 */</span>
    <span class="k">struct</span> <span class="n">hostent</span> <span class="o">*</span><span class="n">ent</span><span class="p">;</span>
    <span class="n">ent</span> <span class="o">=</span> <span class="n">gethostbyaddr</span><span class="p">((</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">addr</span><span class="p">.</span><span class="n">s_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">addr</span><span class="p">.</span><span class="n">s_addr</span><span class="p">),</span> <span class="n">AF_INET</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">ent</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">strncpy</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="n">ent</span><span class="o">-&gt;</span><span class="n">h_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
    <span class="p">}</span>
<span class="cp">#endif</span>
    <span class="n">root</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">++</span><span class="p">;</span> <span class="c">/* キッシュした数*/</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">count</span> <span class="o">==</span> <span class="mi">1</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span>  <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">end</span>    <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>


    <span class="c">/* 挿入 before item cursor */</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">before</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="c">/* 先頭へ挿入 */</span>
        <span class="n">item</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">;</span>
        <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span>     <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">end</span> <span class="o">==</span> <span class="n">before</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* 最後尾へ追加 */</span>
            <span class="n">before</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
            <span class="n">root</span><span class="o">-&gt;</span><span class="n">end</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="c">/* 中間へ挿入 */</span>
            <span class="n">item</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">before</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="n">before</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">item</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="n">ROOTNODE</span> <span class="o">*</span><span class="n">root</span><span class="p">,</span> <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">in</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">cache</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">cursor</span> <span class="o">=</span> <span class="n">cache</span><span class="p">;</span>
    <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">before</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">;</span>
    <span class="n">HOSTINFO</span> <span class="o">*</span><span class="n">term</span>   <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">;</span>
    <span class="kt">int</span>      <span class="n">compare_status</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="kt">int</span>      <span class="n">result</span> <span class="p">;</span>
    <span class="kt">int</span>      <span class="n">n</span> <span class="p">;</span>

    <span class="n">memset</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">inet_aton</span><span class="p">(</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">addr</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">DPRINTF</span><span class="p">(</span><span class="s">&quot;IPアドレスの書式不正:[%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">in</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">);</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c">/* 検索範囲設定 */</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="c">/* 初めてなので強制的に追加 */</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">addList</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">find</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">cursor</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">compare_status</span> <span class="o">=</span> <span class="n">compare_IPv4</span><span class="p">(</span><span class="o">*</span><span class="n">cursor</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
        <span class="c">//DPRINTF(&quot;a:[%s] / b:[%s] result=[%d]\n&quot;,cache-&gt;IPv4, in-&gt;IPv4, compare_status );</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* 前回と同じIPアドレス */</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">*</span><span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="p">)</span>
            <span class="p">{</span>
                <span class="c">/* 不明なホスト */</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">strncpy</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c">/* 検索の必要なし */</span>
        <span class="p">}</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* 前回ヒットした位置から終点まで */</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
            <span class="n">term</span>   <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">;</span>
            <span class="n">DPRINTF</span><span class="p">(</span><span class="s">&quot;前回からの続きで検索:[%s] ～ [%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">,</span> <span class="n">term</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="c">/* 先頭から前回ヒットした位置まで */</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">;</span>
            <span class="n">term</span>   <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
            <span class="n">DPRINTF</span><span class="p">(</span><span class="s">&quot;先頭から検索:[%s] ～ [%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">,</span> <span class="n">term</span><span class="o">-&gt;</span><span class="n">IPv4</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">cursor</span> <span class="o">=</span> <span class="n">root</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c">/* キャッシュ内検索開始 */</span>

    <span class="c">/* 最初に最後尾と比較 */</span>
    <span class="n">compare_status</span> <span class="o">=</span> <span class="n">compare_IPv4</span><span class="p">(</span><span class="o">*</span><span class="n">term</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span> <span class="o">*</span><span class="n">term</span><span class="o">-&gt;</span><span class="n">hostname</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* 不明なホスト */</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">strncpy</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="n">term</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c">/* 検索の必要なし */</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="c">/* 最後尾よりも大きいので検索する必要なし */</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">addList</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">term</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="n">term</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">find</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c">/* おおざっぱに検索 */</span>
    <span class="n">before</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span> <span class="n">cursor</span> <span class="o">!=</span> <span class="n">term</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">compare_status</span> <span class="o">=</span> <span class="n">compare_IPv4</span><span class="p">(</span><span class="o">*</span><span class="n">cursor</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* キャッシュヒット */</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">*</span><span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="p">)</span>
            <span class="p">{</span>
                <span class="c">/* 不明なホスト */</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">strncpy</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* SKIPした範囲内のIPアドレス */</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="n">n</span><span class="o">=</span><span class="n">root</span><span class="o">-&gt;</span><span class="n">count</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span> <span class="n">n</span><span class="o">&gt;=</span><span class="mi">0</span> <span class="p">;</span> <span class="n">n</span><span class="o">--</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">==</span> <span class="n">term</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span> 

    <span class="c">/* SKIPした部分を一つずつ検索 */</span>
    <span class="k">for</span><span class="p">(</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">before</span><span class="p">;</span> <span class="n">before</span> <span class="o">!=</span> <span class="n">term</span> <span class="p">;</span> <span class="n">cursor</span> <span class="o">=</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">next</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">compare_status</span> <span class="o">=</span> <span class="n">compare_IPv4</span><span class="p">(</span><span class="o">*</span><span class="n">cursor</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* キャッシュヒット */</span>
            <span class="k">if</span><span class="p">(</span> <span class="o">*</span><span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span> <span class="p">)</span>
            <span class="p">{</span>
                <span class="c">/* 不明なホスト */</span>
                <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">strncpy</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="n">cursor</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">in</span><span class="o">-&gt;</span><span class="n">hostname</span><span class="p">));</span>
            <span class="n">cache</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">compare_status</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* 初めてのIPアドレス */</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">cursor</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="c">/* 初めてのIPアドレスをキャッシュに登録 */</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">cursor</span> <span class="o">==</span> <span class="n">before</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="c">/* 一番小さいので先頭に挿入 */</span>
        <span class="n">before</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">addList</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="o">*</span><span class="n">in</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cache</span> <span class="o">=</span> <span class="n">before</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">find</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">in</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
 <span class="nf">convertLog</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">log_filename</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ROOTNODE</span> <span class="n">root</span><span class="p">;</span>
    <span class="n">HOSTINFO</span> <span class="n">ip</span><span class="p">;</span>

    <span class="n">FILE</span>   <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
    <span class="kt">char</span>   <span class="n">line</span><span class="p">[</span><span class="mi">2048</span><span class="p">];</span>
    <span class="kt">char</span>   <span class="o">*</span><span class="n">data</span><span class="p">;</span>
    <span class="n">size_t</span> <span class="n">length</span><span class="p">;</span>
    <span class="kt">int</span>    <span class="n">result</span> <span class="p">;</span>
    <span class="kt">long</span>   <span class="n">line_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="n">root</span><span class="p">.</span><span class="n">begin</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">root</span><span class="p">.</span><span class="n">end</span>   <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="n">fp</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">log_filename</span><span class="p">,</span> <span class="s">&quot;rb&quot;</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">fp</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">while</span><span class="p">(</span> <span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">),</span> <span class="n">fp</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="n">line_count</span> <span class="o">++</span><span class="p">;</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">data</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="c">/* 空白無しはおかしい */</span>
            <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;FILENAME:[%s] LINE:[%ld]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">log_filename</span><span class="p">,</span> <span class="n">line_count</span><span class="p">);</span>
            <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
            <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">length</span> <span class="o">=</span> <span class="n">data</span> <span class="o">-</span> <span class="n">line</span><span class="p">;</span>
        <span class="n">length</span> <span class="o">=</span> <span class="p">(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ip</span><span class="p">.</span><span class="n">IPv4</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;</span> <span class="n">length</span> <span class="p">)</span><span class="o">?</span><span class="k">sizeof</span><span class="p">(</span><span class="n">ip</span><span class="p">.</span><span class="n">IPv4</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="n">length</span><span class="p">;</span>
        <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ip</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ip</span><span class="p">));</span>
        <span class="n">strncpy</span><span class="p">(</span><span class="n">ip</span><span class="p">.</span><span class="n">IPv4</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span> <span class="n">length</span><span class="p">);</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">root</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ip</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%s&quot;</span><span class="p">,</span> <span class="n">ip</span><span class="p">.</span><span class="n">hostname</span><span class="p">,</span> <span class="n">data</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">fp</span><span class="p">);</span>
    <span class="n">clear_list</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
 <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>

<span class="cp">#ifdef TEST</span>
    <span class="k">static</span> <span class="n">ROOTNODE</span> <span class="n">root</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="p">;</span>
    <span class="n">HOSTINFO</span> <span class="n">ip</span><span class="p">;</span>

    <span class="n">root</span><span class="p">.</span><span class="n">begin</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">root</span><span class="p">.</span><span class="n">end</span>   <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">;</span>
    <span class="n">srand</span><span class="p">(</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="p">);</span>
    <span class="k">for</span><span class="p">(</span> <span class="n">size_t</span> <span class="n">wkA</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">wkA</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">;</span> <span class="n">wkA</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
        <span class="n">b</span> <span class="o">=</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
        <span class="n">d</span> <span class="o">=</span> <span class="p">(</span> <span class="n">rand</span><span class="p">()</span> <span class="o">*</span> <span class="mi">100</span> <span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="p">;</span>
        <span class="n">sprintf</span><span class="p">(</span><span class="n">ip</span><span class="p">.</span><span class="n">IPv4</span><span class="p">,</span> <span class="s">&quot;%d.%d.%d.%d&quot;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">);</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">find</span><span class="p">(</span><span class="o">&amp;</span><span class="n">root</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ip</span><span class="p">);</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;result=[%d] / ip=[ %16s ] hostname=[%s]</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ip</span><span class="p">.</span><span class="n">IPv4</span><span class="p">,</span> <span class="n">ip</span><span class="p">.</span><span class="n">hostname</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">clear_list</span><span class="p">(</span><span class="n">root</span><span class="p">);</span>
<span class="cp">#else</span>
    <span class="n">convertLog</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
<span class="cp">#endif</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2074/addtag/" class="addtag" id="addtag_2074">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/2074/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/2074/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_2074"
  >-</span><span
  class="button yellow"
  id="rating_z_2074"
  >0</span><span 
  class="button green"
  id="rating_p_2074"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/2074/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/2074/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment2075"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2075/">#2075</a>(<script language="JavaScript">print_time(new Date("2007/08/12 05:14 GMT"));</script><noscript>2007/08/12 05:14 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>しまったよく考えたらアクセスログなのだから
昇順固定でなく個数制限付きのラウンドロビンにすれば良かったorz
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2075/addtag/" class="addtag" id="addtag_2075">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_2075"
  >-</span><span
  class="button yellow"
  id="rating_z_2075"
  >0</span><span 
  class="button green"
  id="rating_p_2075"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/2074/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/2075/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/2075/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment2197"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2197/">#2197</a>(<script language="JavaScript">print_time(new Date("2007/08/15 08:41 GMT"));</script><noscript>2007/08/15 08:41 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>logを流してみたんだけど、おそっ！</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Concurrent</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Concurrent</span><span class="o">.</span><span class="n">STM</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">Data</span><span class="o">.</span><span class="n">Map</span> <span class="nv">as</span> <span class="n">M</span>
<span class="kr">import</span> <span class="n">Network</span><span class="o">.</span><span class="n">BSD</span>
<span class="kr">import</span> <span class="n">Network</span><span class="o">.</span><span class="n">Socket</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>

<span class="kr">type</span> <span class="n">Table</span> <span class="o">=</span> <span class="n">M</span><span class="o">.</span><span class="n">Map</span> <span class="n">HostAddress</span> <span class="p">(</span><span class="n">TMVar</span> <span class="n">String</span><span class="p">)</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">args</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span> 
          <span class="p">;</span> <span class="nv">cs</span>   <span class="o">&lt;-</span> <span class="nv">getContents</span>
          <span class="p">;</span> <span class="nv">loop</span> <span class="n">M</span><span class="o">.</span><span class="nv">empty</span> <span class="o">$</span> <span class="nv">slice</span> <span class="p">(</span><span class="kr">case</span> <span class="nv">args</span> <span class="kr">of</span> <span class="p">{[]</span><span class="o">-&gt;</span><span class="mi">20</span><span class="p">;</span><span class="nv">a</span><span class="o">:</span><span class="kr">_</span><span class="o">-&gt;</span><span class="nv">read</span> <span class="nv">a</span><span class="p">})</span> <span class="o">$</span> <span class="nv">lines</span> <span class="nv">cs</span>
          <span class="p">}</span>

<span class="nv">slice</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="nv">a</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="nv">a</span><span class="p">]]</span>
<span class="nv">slice</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">unfoldr</span> <span class="nv">phi</span>
  <span class="kr">where</span> <span class="nv">phi</span> <span class="p">[]</span> <span class="o">=</span> <span class="n">Nothing</span>
        <span class="nv">phi</span> <span class="nv">xs</span> <span class="o">=</span> <span class="n">Just</span> <span class="o">$</span> <span class="nv">splitAt</span> <span class="nv">n</span> <span class="nv">xs</span>

<span class="nv">loop</span> <span class="o">::</span> <span class="n">Table</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">String</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">loop</span> <span class="nv">t0</span> <span class="p">[]</span> <span class="o">=</span> <span class="nv">return</span> <span class="p">()</span>
<span class="nv">loop</span> <span class="nv">t0</span> <span class="p">(</span><span class="nv">ls</span><span class="o">:</span><span class="nv">lss</span><span class="p">)</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="kr">let</span> <span class="p">(</span><span class="nv">fss</span><span class="p">,</span><span class="nv">rss</span><span class="p">)</span> <span class="o">=</span> <span class="nv">unzip</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">splitAt</span> <span class="mi">1</span> <span class="o">.</span> <span class="nv">words</span><span class="p">)</span> <span class="nv">ls</span>
      <span class="p">;</span> <span class="nv">addrs</span>  <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="nv">inet_addr</span> <span class="o">$</span> <span class="nv">concat</span> <span class="nv">fss</span>
      <span class="p">;</span> <span class="nv">addrs&#39;</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="nv">assc</span> <span class="o">$</span> <span class="nv">filter</span> <span class="p">(</span><span class="nv">not</span> <span class="o">.</span> <span class="nv">flip</span> <span class="n">M</span><span class="o">.</span><span class="nv">member</span> <span class="nv">t0</span><span class="p">)</span> <span class="nv">addrs</span>
      <span class="p">;</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">forkIO</span> <span class="o">.</span> <span class="nv">resolv</span><span class="p">)</span> <span class="nv">addrs&#39;</span>
      <span class="p">;</span> <span class="kr">let</span> <span class="nv">t</span> <span class="o">=</span> <span class="nv">foldr</span> <span class="p">(</span><span class="nv">uncurry</span> <span class="n">M</span><span class="o">.</span><span class="nv">insert</span><span class="p">)</span> <span class="nv">t0</span> <span class="nv">addrs&#39;</span>
      <span class="p">;</span> <span class="nv">yield</span>
      <span class="p">;</span> <span class="nv">fs</span> <span class="o">&lt;-</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">atomically</span> <span class="o">.</span> <span class="nv">readTMVar</span> <span class="o">.</span> <span class="nv">head</span> <span class="o">.</span> <span class="nv">flip</span> <span class="n">M</span><span class="o">.</span><span class="nv">lookup</span> <span class="nv">t</span><span class="p">)</span> <span class="nv">addrs</span>
      <span class="p">;</span> <span class="nv">putStr</span> <span class="o">$</span> <span class="nv">unlines</span> <span class="o">$</span> <span class="nv">map</span> <span class="nv">unwords</span> <span class="o">$</span> <span class="nv">zipWith</span> <span class="p">(</span><span class="o">:</span><span class="p">)</span> <span class="nv">fs</span> <span class="nv">rss</span>
      <span class="p">;</span> <span class="nv">loop</span> <span class="nv">t</span> <span class="nv">lss</span>
      <span class="p">}</span>

<span class="nv">resolv</span> <span class="o">::</span> <span class="p">(</span><span class="n">HostAddress</span><span class="p">,</span> <span class="n">TMVar</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">resolv</span> <span class="p">(</span><span class="nv">addr</span><span class="p">,</span> <span class="nv">tmv</span><span class="p">)</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">name</span> <span class="o">&lt;-</span> <span class="nv">catch</span> <span class="p">(</span><span class="nv">getHostByAddr</span> <span class="n">AF_INET</span> <span class="nv">addr</span> <span class="o">&gt;&gt;=</span> <span class="nv">return</span> <span class="o">.</span> <span class="nv">hostName</span><span class="p">)</span>
                      <span class="p">(</span><span class="nv">const</span> <span class="o">$</span> <span class="nv">inet_ntoa</span> <span class="nv">addr</span> <span class="o">&gt;&gt;=</span> <span class="nv">return</span><span class="p">)</span>
      <span class="p">;</span> <span class="nv">atomically</span> <span class="o">$</span> <span class="nv">putTMVar</span> <span class="nv">tmv</span> <span class="nv">name</span>
      <span class="p">}</span>
                         
<span class="nv">assc</span> <span class="o">::</span> <span class="n">HostAddress</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">(</span><span class="n">HostAddress</span><span class="p">,</span> <span class="n">TMVar</span> <span class="n">String</span><span class="p">)</span>
<span class="nv">assc</span> <span class="o">=</span> <span class="p">(</span><span class="nv">newEmptyTMVarIO</span> <span class="o">&gt;&gt;=</span><span class="p">)</span> <span class="o">.</span>  <span class="p">(</span><span class="nv">return</span> <span class="o">.</span><span class="p">)</span> <span class="o">.</span> <span class="p">(,)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2197/addtag/" class="addtag" id="addtag_2197">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/2197/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/2197/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_2197"
  >-</span><span
  class="button yellow"
  id="rating_z_2197"
  >0</span><span 
  class="button green"
  id="rating_p_2197"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/2197/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment3709"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/62/" target="_top">id:amachang</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3709/">#3709</a>(<script language="JavaScript">print_time(new Date("2007/11/05 11:21 GMT"));</script><noscript>2007/11/05 11:21 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>JavaScript だってマルチスレッドできるさ＞＜！
Rhino で動かしてください。

きっと、もっとキレイに書けるんだろうなあ。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87</pre></td><td class="code"><div class="highlight"><pre><span class="k">var</span> <span class="nx">lk1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">concurrent</span><span class="p">.</span><span class="nx">locks</span><span class="p">.</span><span class="nx">ReentrantLock</span><span class="p">();</span>
<span class="k">var</span> <span class="nx">lk2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">util</span><span class="p">.</span><span class="nx">concurrent</span><span class="p">.</span><span class="nx">locks</span><span class="p">.</span><span class="nx">ReentrantLock</span><span class="p">();</span>
<span class="k">var</span> <span class="nx">queue1</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">var</span> <span class="nx">queue2</span> <span class="o">=</span> <span class="p">[];</span>
<span class="k">var</span> <span class="nx">eof</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="k">var</span> <span class="nx">eop</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
<span class="k">var</span> <span class="nx">infile</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="k">var</span> <span class="nx">outfile</span> <span class="o">=</span> <span class="nx">arguments</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>

<span class="nx">spawn</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">input</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">BufferedReader</span><span class="p">(</span><span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">FileReader</span><span class="p">(</span><span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">File</span><span class="p">(</span><span class="nx">infile</span><span class="p">)));</span>
    <span class="k">var</span> <span class="nx">line</span><span class="o">;</span>
    <span class="k">try</span> <span class="p">{</span>
        <span class="k">while</span> <span class="p">(</span><span class="nx">line</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">readLine</span><span class="p">())</span> <span class="p">{</span>
            <span class="nx">lk1</span><span class="p">.</span><span class="nx">lock</span><span class="p">();</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="nx">queue1</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">finally</span> <span class="p">{</span>
                <span class="nx">lk1</span><span class="p">.</span><span class="nx">unlock</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">finally</span> <span class="p">{</span>
        <span class="nx">eof</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="nx">input</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="nx">spawn</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
<span class="nx">out</span><span class="o">:</span>
        <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">lk1</span><span class="p">.</span><span class="nx">lock</span><span class="p">();</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="k">while</span> <span class="p">(</span><span class="nx">queue1</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">eof</span><span class="p">)</span> <span class="k">break</span> <span class="nx">out</span><span class="o">;</span>
                    <span class="nx">lk1</span><span class="p">.</span><span class="nx">unlock</span><span class="p">();</span>
                    <span class="nx">lk1</span><span class="p">.</span><span class="nx">lock</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">queue1</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">finally</span> <span class="p">{</span>
                <span class="nx">lk1</span><span class="p">.</span><span class="nx">unlock</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="k">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">line</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/^(\d+\.\d+\.\d+\.\d+)(.*)$/</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">m</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">line</span> <span class="o">=</span> <span class="nx">java</span><span class="p">.</span><span class="nx">net</span><span class="p">.</span><span class="nx">InetAddress</span><span class="p">.</span><span class="nx">getByName</span><span class="p">(</span><span class="nx">m</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="nx">getHostName</span><span class="p">()</span> <span class="o">+</span> <span class="nx">m</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="nx">lk2</span><span class="p">.</span><span class="nx">lock</span><span class="p">();</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="nx">queue2</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="nx">finally</span> <span class="p">{</span>
                <span class="nx">lk2</span><span class="p">.</span><span class="nx">unlock</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">finally</span> <span class="p">{</span>
        <span class="nx">eop</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="nx">spawn</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">output</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">PrintWriter</span><span class="p">(</span><span class="k">new</span> <span class="nx">java</span><span class="p">.</span><span class="nx">io</span><span class="p">.</span><span class="nx">File</span><span class="p">(</span><span class="nx">outfile</span><span class="p">));</span>
    <span class="k">try</span> <span class="p">{</span>
<span class="nx">out</span><span class="o">:</span>
        <span class="k">while</span> <span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">lk2</span><span class="p">.</span><span class="nx">lock</span><span class="p">();</span>
            <span class="k">try</span> <span class="p">{</span>
                <span class="k">while</span> <span class="p">(</span><span class="nx">queue2</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="nx">eop</span><span class="p">)</span> <span class="k">break</span> <span class="nx">out</span><span class="o">;</span>
                    <span class="nx">lk2</span><span class="p">.</span><span class="nx">unlock</span><span class="p">();</span>
                    <span class="nx">lk2</span><span class="p">.</span><span class="nx">lock</span><span class="p">();</span>
                <span class="p">}</span>
                <span class="k">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">queue2</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">finally</span> <span class="p">{</span>
                <span class="nx">lk2</span><span class="p">.</span><span class="nx">unlock</span><span class="p">();</span>
            <span class="p">}</span>
            <span class="nx">output</span><span class="p">.</span><span class="nx">println</span><span class="p">(</span><span class="nx">line</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">finally</span> <span class="p">{</span>
        <span class="nx">output</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">});</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3709/addtag/" class="addtag" id="addtag_3709">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3709/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3709/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3709"
  >-</span><span
  class="button yellow"
  id="rating_z_3709"
  >0</span><span 
  class="button green"
  id="rating_p_3709"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/3709/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  
    




<div class="comment" id="comment1876"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/101/" target="_top">沢渡 みかげ</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1876/">#1876</a>(<script language="JavaScript">print_time(new Date("2007/08/05 14:17 GMT"));</script><noscript>2007/08/05 14:17 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/erlang/">
	  Erlang
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自分で出題しておいてあれですが，思ったよりめんどくさかったです．(^^;

アクセスログの順番を保持しなければいけないところと，
一度名前解決を始めたIPアドレスに対して再度名前解決を
実行しないようにする部分で少し悩みました．

アクセスログは，同じIPアドレスが連続する事が多いため，
キャッシュミスしてからキャッシュに結果が登録されるまでの間に，
再度同じIPが出てくる可能性が高いので，そこは対処が必要と考えました．


&gt; wc access.log
  24093  517929 5088101 access.log

&gt; time erl -noshell -s iplookup iplookup -s init stop &gt; access.log.2
real    0m13.260s
user    0m6.930s
sys     0m0.693s

&gt; wc access.log.2
  24093  517929 5516010 access.log.2

といった感じです．
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168</pre></td><td class="code"><div class="highlight"><pre>-module(iplookup).
-export([iplookup/0, reader/0, writer/1, resolver/0, resolve_dns/3]).
-include_lib(&quot;kernel/include/inet.hrl&quot;).

-define(MAX_DNS_PARALLEL, 1000).


iplookup() -&gt;
	proc_lib:start(?MODULE, writer, [self()]),
	proc_lib:start(?MODULE, resolver, []),
	proc_lib:start(?MODULE, reader, []),
	receive
		shutdown -&gt; ok
	end.

%% reader
%% ファイルから読み込んで，行番号をつけてresolverへ渡す

reader() -&gt;
	register(reader, self()),
	proc_lib:init_ack(ok),
	{ok, Fd} = file:open(&quot;access.log&quot;, [read]),
	reader_loop(Fd, 0),
	file:close(Fd).

reader_loop(Fd, LineNo) -&gt;
	NextLineNo = LineNo + 1,
	case io:get_line(Fd, &quot;&quot;) of
		eof -&gt;
			resolver ! {line, NextLineNo, eof},
			ok;
		Line -&gt;
			resolver ! {line, NextLineNo, Line},
			receive
				next -&gt;
					ok
			end,
			reader_loop(Fd, NextLineNo)
	end.


%% resolver
%% キャッシュ済みなら変換してwriterへ渡す
%% 未キャッシュで，名前解決処理を開始していなければ子プロセスを起動
%% 未キャッシュで，名前解決中ならバッファへ蓄える
%% 名前解決終了のメッセージがあったら，そのデータと，バッファにたまった内容をwriterへ渡す

resolver() -&gt;
	register(resolver, self()),
	proc_lib:init_ack(ok),
	resolver_loop(false, 0).

resolver_loop(ShutdownFlag, ResolvingCount) -&gt;
	if
		ShutdownFlag == true, ResolvingCount == 0 -&gt;
			ok;
		true -&gt;
			receive
				{resolved, Ip, ResolvedIp} -&gt;
					put({dnscache, Ip}, ResolvedIp),
					case get({resolvingbuff, Ip}) of
						undefined -&gt;
							ok;
						Buff -&gt;
							flush_buff(ResolvedIp, lists:reverse(Buff)),
							erase({resolvingbuff, Ip})
					end,
					
					reader_next(),
					resolver_loop(ShutdownFlag, ResolvingCount - 1);
				{line, LineNo, eof} -&gt;
					writer ! {line, LineNo, eof},
					resolver_loop(true, ResolvingCount);
				{line, LineNo, Line} -&gt;
					IsResolving = convline(LineNo, Line),
					case IsResolving of
						ok -&gt;
							reader_next(),
							resolver_loop(ShutdownFlag, ResolvingCount);
						tryresolv -&gt;
							% 並列度が最大に達していなければ次のデータを読み込む
							if
								ResolvingCount + 1 &lt; ?MAX_DNS_PARALLEL -&gt;
									reader_next();
								true -&gt;
									ok
							end,
							resolver_loop(ShutdownFlag, ResolvingCount + 1)
					end
			end
	end.

reader_next() -&gt;
	% readerには並列処理分余計にnextメッセージが届くことがあるので
	% readerがすでに終了していても落ちないように例外をcatch
	try
		reader ! next
	catch
		error:badarg -&gt;
			ok
	end.

flush_buff(ResolvedIp, [Head|Rest]) -&gt;
	{LineNo, Line} = Head,
	writer ! {line, LineNo, io_lib:format(&quot;~s~s&quot;, [ResolvedIp, Line])},
	flush_buff(ResolvedIp, Rest);
flush_buff(_, []) -&gt;
	ok.


convline(LineNo, Line) -&gt;
	Index = string:chr(Line, $ ),
	IpStr = string:substr(Line, 1, Index - 1),
	RestStr = string:substr(Line, Index),
	IsResolving = resolve(LineNo, IpStr, RestStr),
	IsResolving.

resolve(LineNo, Ip, RestStr) -&gt;
	case get({dnscache, Ip}) of
		undefined -&gt;
			case get({resolving, Ip}) of
				undefined -&gt;
					put({resolving, Ip}, 1),
					spawn(?MODULE, resolve_dns, [LineNo, Ip, RestStr]),
					tryresolv;
				_ -&gt;
					case get({resolvingbuff, Ip}) of
						undefined -&gt;
							put({resolvingbuff, Ip}, [{LineNo, RestStr}]);
						Buff -&gt;
							put({resolvingbuff, Ip}, [{LineNo, RestStr}|Buff])
					end,
					ok
			end;
		ResolvedIp -&gt;
			writer ! {line, LineNo, io_lib:format(&quot;~s~s&quot;, [ResolvedIp,RestStr])},
			ok
	end.

resolve_dns(LineNo, Ip, RestStr) -&gt;
	ResolvedIp = case inet:gethostbyaddr(Ip) of
		{ok, Hostent} -&gt;
			Hostent#hostent.h_name;
		{error, _} -&gt;
			Ip
	end,
	writer ! {line, LineNo, io_lib:format(&quot;~s~s&quot;, [ResolvedIp,RestStr])},
	resolver ! {resolved, Ip, ResolvedIp},
	ok.


%% 行番号順に結果を書き出す

writer(Parent) -&gt;
	register(writer, self()),
	proc_lib:init_ack(ok),
	
	writer_loop(Parent, 1).

writer_loop(Parent, LineNo) -&gt;
	receive
		{line, LineNo, eof} -&gt;
			Parent ! shutdown,
			ok;
		{line, LineNo, Line} -&gt;
			io:format(&quot;~s&quot;, [Line]),
			writer_loop(Parent, LineNo + 1)
	end.
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1876/addtag/" class="addtag" id="addtag_1876">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/erlang/">
		Erlang
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1876/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1876/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1876"
  >-</span><span
  class="button yellow"
  id="rating_z_1876"
  >0</span><span 
  class="button green"
  id="rating_p_1876"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1876/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  

  

  

  

  
    




<div class="comment" id="comment1849"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/323/" target="_top">tomatsu</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1849/">#1849</a>(<script language="JavaScript">print_time(new Date("2007/08/04 19:09 GMT"));</script><noscript>2007/08/04 19:09 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/pnuts/">
	  Pnuts
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  dnsjava使用。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre>concurrency = 100
n = 1000
inputfile = &quot;access_log&quot;
outputfile &quot;access_log_out&quot;

function processLog(input){
  nameservice = LRUcache(10000, reverseDns)
  pool = threadPool(concurrency)
  t = Object[n]
  i = 0
  for (line: readLines(input)){
    idx = line.indexOf(&#39; &#39;)
    t[i] = async({line, idx -&gt; {-&gt;[nameservice[line[0..idx-1]], line[idx..]]}}(line, idx), pool)
    if (++i &gt;= n){
      for (j: 0..n-1){
         r0, r1 = t[j]()
         println(r0, r1)
      }
      i = 0
    }
  }
}

import org.xbill.DNS.*
function reverseDns(hostIp){
  answers = Lookup(ReverseMap.fromAddress(hostIp), Type.PTR, DClass.IN).run()
  (answers == null || answers.length == 0) ? hostIp : answers[0].rdataToString()
}

input = reader(inputfile, &quot;ASCII&quot;)
output = writer(outputfile, &quot;ASCII&quot;)
addShutdownHook({-&gt;output.close(); input.close()})
getContext().setWriter(output) 
processLog(input)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1849/addtag/" class="addtag" id="addtag_1849">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/pnuts/">
		Pnuts
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1849/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1849/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1849"
  >-</span><span
  class="button yellow"
  id="rating_z_1849"
  >0</span><span 
  class="button green"
  id="rating_p_1849"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1849/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment1776"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/101/" target="_top">沢渡 みかげ</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1776/">#1776</a>(<script language="JavaScript">print_time(new Date("2007/08/03 12:01 GMT"));</script><noscript>2007/08/03 12:01 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>例の部分の改行が抜けてしまっているようです．

210.166.209.71 - - [26/Jul/2007:22:32:47 +0900] "GET / HTTP/1.1" 403 283 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"
192.168.7.1 - - [26/Jul/2007:22:32:48 +0900] "GET /favicon.ico HTTP/1.1" 404 290 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"

↓

mikage.to - - [26/Jul/2007:22:32:47 +0900] "GET / HTTP/1.1" 403 283 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5"
192.168.7.1 - - [26/Jul/2007:22:32:48 +0900] "GET /favicon.ico HTTP/1.1" 404 290 "-" "Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5" 

1行目が逆引きできた例，2行目が逆引きできなかった場合の例です．
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1776/addtag/" class="addtag" id="addtag_1776">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1776"
  >-</span><span
  class="button yellow"
  id="rating_z_1776"
  >0</span><span 
  class="button green"
  id="rating_p_1776"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1776/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1776/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1786"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1786/">#1786</a>(<script language="JavaScript">print_time(new Date("2007/08/03 14:06 GMT"));</script><noscript>2007/08/03 14:06 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  おっと、すみません。修正します。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1786/addtag/" class="addtag" id="addtag_1786">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1786"
  >-</span><span
  class="button yellow"
  id="rating_z_1786"
  >0</span><span 
  class="button green"
  id="rating_p_1786"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1776/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1786/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1786/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment1813"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/">#1813</a>(<script language="JavaScript">print_time(new Date("2007/08/04 10:41 GMT"));</script><noscript>2007/08/04 10:41 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  Pythonで組んでみました。最初 thread.join() をせず、Queue.Queue#get() でブロックしたままインタプリタを終了していたところ、時々例外がでるのに悩まされましたが、Queue に None を送ることで明示的にスレッドを終了し、joinで待つことで解決しました（と思う）いまいち美しくない気がしますが、しかたないのかな。（with文を使っているので、Python2.5以降です）
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">__future__</span> <span class="k">import</span> <span class="n">with_statement</span>
<span class="k">import</span> <span class="nn">collections</span>
<span class="k">import</span> <span class="nn">threading</span>
<span class="k">import</span> <span class="nn">socket</span>
<span class="k">import</span> <span class="nn">Queue</span>
<span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="k">class</span> <span class="nc">Line</span><span class="p">:</span>
    <span class="n">_cond</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">()</span>
    <span class="n">_dict</span> <span class="o">=</span> <span class="p">{}</span> <span class="c"># addr: host</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">addr</span><span class="p">,</span> <span class="n">rest</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_addr</span> <span class="o">=</span> <span class="n">addr</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_rest</span> <span class="o">=</span> <span class="n">rest</span>
        <span class="k">with</span> <span class="n">Line</span><span class="o">.</span><span class="n">_cond</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">addr</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">Line</span><span class="o">.</span><span class="n">_dict</span><span class="p">:</span>
                <span class="n">Line</span><span class="o">.</span><span class="n">_dict</span><span class="p">[</span><span class="n">addr</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">resolve</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_resolve</span>

    <span class="k">def</span> <span class="nf">resolve</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">_resolve</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">host</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">gethostbyaddr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_addr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">:</span>
            <span class="n">host</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_addr</span>
        <span class="k">with</span> <span class="n">Line</span><span class="o">.</span><span class="n">_cond</span><span class="p">:</span>
            <span class="n">Line</span><span class="o">.</span><span class="n">_dict</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">_addr</span><span class="p">]</span> <span class="o">=</span> <span class="n">host</span>
            <span class="n">Line</span><span class="o">.</span><span class="n">_cond</span><span class="o">.</span><span class="n">notifyAll</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">with</span> <span class="n">Line</span><span class="o">.</span><span class="n">_cond</span><span class="p">:</span>
            <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">host</span> <span class="o">=</span> <span class="n">Line</span><span class="o">.</span><span class="n">_dict</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">_addr</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">host</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="n">Line</span><span class="o">.</span><span class="n">_cond</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">host</span><span class="p">)</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_rest</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">read</span><span class="p">():</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="s">&#39;^&#39;</span> <span class="o">+</span> <span class="s">&#39;\.&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;\d+&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">4</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;access.log&quot;</span><span class="p">):</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;line should start with IP address&quot;</span><span class="p">)</span>
        <span class="k">yield</span> <span class="n">Line</span><span class="p">(</span><span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">line</span><span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">(</span><span class="mi">0</span><span class="p">):])</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">count</span><span class="p">:</span>
            <span class="n">lines</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span><span class="o">.</span><span class="n">output</span><span class="p">()</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="o">.</span><span class="n">Queue</span><span class="p">()</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">10</span> <span class="c"># hint: configure thread count here</span>
    <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
        <span class="k">def</span> <span class="nf">resolve</span><span class="p">():</span>
            <span class="k">while</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">line</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">get</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">line</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="c"># terminator</span>
                    <span class="k">break</span>
                <span class="n">line</span><span class="o">.</span><span class="n">resolve</span><span class="p">()</span>
        <span class="n">thread</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">resolve</span><span class="p">)</span>
        <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">thread</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">read</span><span class="p">():</span>
        <span class="n">lines</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="n">queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
        <span class="n">output</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
    <span class="n">output</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
        <span class="n">queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span> <span class="c"># terminator</span>
    <span class="k">for</span> <span class="n">thread</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
        <span class="n">thread</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/addtag/" class="addtag" id="addtag_1813">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1813"
  >-</span><span
  class="button yellow"
  id="rating_z_1813"
  >0</span><span 
  class="button green"
  id="rating_p_1813"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/">
    2
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1813/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1948"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1948/">#1948</a>(<script language="JavaScript">print_time(new Date("2007/08/06 15:44 GMT"));</script><noscript>2007/08/06 15:44 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  スレッドの生成コストが気にならなければ、この方がシンプルですね。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">__future__</span> <span class="k">import</span> <span class="n">with_statement</span>
<span class="k">import</span> <span class="nn">collections</span>
<span class="k">import</span> <span class="nn">threading</span>
<span class="k">import</span> <span class="nn">socket</span>
<span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">re</span>

<span class="n">cache</span> <span class="o">=</span> <span class="p">{}</span> <span class="c"># addr: host</span>
<span class="n">cond</span> <span class="o">=</span> <span class="n">threading</span><span class="o">.</span><span class="n">Condition</span><span class="p">()</span> <span class="c"># protect `cache&#39;</span>

<span class="k">class</span> <span class="nc">Resolver</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">addr</span><span class="p">):</span>
        <span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_addr</span> <span class="o">=</span> <span class="n">addr</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">host</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">gethostbyaddr</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_addr</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">except</span> <span class="n">socket</span><span class="o">.</span><span class="n">error</span><span class="p">:</span>
            <span class="n">host</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_addr</span>
        <span class="k">with</span> <span class="n">cond</span><span class="p">:</span>
            <span class="n">cache</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">_addr</span><span class="p">]</span> <span class="o">=</span> <span class="n">host</span>
            <span class="n">cond</span><span class="o">.</span><span class="n">notify</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">output</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
        <span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">count</span><span class="p">:</span>
            <span class="n">addr</span><span class="p">,</span> <span class="n">rest</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">cond</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">cache</span><span class="p">[</span><span class="n">addr</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">cond</span><span class="o">.</span><span class="n">wait</span><span class="p">()</span>
                <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">cache</span><span class="p">[</span><span class="n">addr</span><span class="p">],</span> <span class="n">rest</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;access.log&quot;</span><span class="p">):</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s">&#39;^&#39;</span> <span class="o">+</span> <span class="s">&#39;\.&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s">&#39;\d+&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="mi">4</span><span class="p">),</span> <span class="n">line</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;line should start with IP address&quot;</span><span class="p">)</span>
        <span class="n">addr</span><span class="p">,</span> <span class="n">rest</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">line</span><span class="p">[</span><span class="n">m</span><span class="o">.</span><span class="n">end</span><span class="p">(</span><span class="mi">0</span><span class="p">):]</span>
        <span class="n">queue</span><span class="o">.</span><span class="n">appendleft</span><span class="p">((</span><span class="n">addr</span><span class="p">,</span> <span class="n">rest</span><span class="p">))</span>
        <span class="k">with</span> <span class="n">cond</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">addr</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cache</span><span class="p">:</span>
                <span class="n">cache</span><span class="p">[</span><span class="n">addr</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="n">thread</span> <span class="o">=</span> <span class="n">Resolver</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
                <span class="n">thread</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
        <span class="n">output</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="c"># configure this count!</span>
    <span class="n">output</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1948/addtag/" class="addtag" id="addtag_1948">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1948/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1948/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1948"
  >-</span><span
  class="button yellow"
  id="rating_z_1948"
  >0</span><span 
  class="button green"
  id="rating_p_1948"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1948/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1948/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1946"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1946/">#1946</a>(<script language="JavaScript">print_time(new Date("2007/08/06 14:59 GMT"));</script><noscript>2007/08/06 14:59 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  そうか、デーモンスレッドでなければ、それが終了するまでメインスレッドは終了しないから、joinする必要はないはず・・・。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- prev.py     Mon Aug  6 23:55:36 2007</span>
<span class="gi">+++ main.py     Mon Aug  6 23:56:02 2007</span>
<span class="gu">@@ -55,7 +55,6 @@</span>
             lines.pop().output()
     queue = Queue.Queue()
     count = 10 # hint: configure thread count here
<span class="gd">-    threads = []</span>
     for _ in xrange(count):
         def resolve():
             while 1:
<span class="gu">@@ -65,7 +64,6 @@</span>
                 line.resolve()
         thread = threading.Thread(target=resolve)
         thread.start()
<span class="gd">-        threads.append(thread)</span>
     for line in read():
         lines.appendleft(line)
         queue.put(line)
<span class="gu">@@ -73,8 +71,6 @@</span>
     output(0)
     for _ in xrange(count):
         queue.put(None) # terminator
<span class="gd">-    for thread in threads:</span>
<span class="gd">-        thread.join()</span>

 if __name__ == &#39;__main__&#39;:
     main()
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1946/addtag/" class="addtag" id="addtag_1946">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1946/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1946/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1946"
  >-</span><span
  class="button yellow"
  id="rating_z_1946"
  >0</span><span 
  class="button green"
  id="rating_p_1946"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1813/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1946/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1946/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment1800"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/">#1800</a>(<script language="JavaScript">print_time(new Date("2007/08/03 18:57 GMT"));</script><noscript>2007/08/03 18:57 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  先を越されてしまいましたが(^^; 微妙に違うようなので気にせず投稿。_count の値を変えると、童子に走るスレッドの数を調節できるはずです。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.net.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.concurrent.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.regex.*</span><span class="o">;</span>

<span class="k">class</span> <span class="nc">MeApp</span>
<span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">Queue</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">_queue</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">_map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>

    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">_count</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span> <span class="c">// 大きいほど並列度が高いが、より多くのスレッドを必要とする。</span>

    <span class="k">private</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">output</span><span class="o">()</span> <span class="k">throws</span> <span class="n">Exception</span>
    <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">_queue</span><span class="o">.</span><span class="na">poll</span><span class="o">().</span><span class="na">call</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span>
    <span class="o">{</span>
        <span class="k">final</span> <span class="n">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="n">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">&quot;^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)&quot;</span><span class="o">);</span>

        <span class="k">final</span> <span class="n">ExecutorService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">Executors</span><span class="o">.</span><span class="na">newCachedThreadPool</span><span class="o">();</span>

        <span class="k">try</span>
        <span class="o">{</span>
            <span class="k">final</span> <span class="n">BufferedReader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="s">&quot;access.log&quot;</span><span class="o">));</span>

            <span class="k">try</span>
            <span class="o">{</span>
                <span class="n">String</span> <span class="n">line</span><span class="o">;</span>

                <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
                <span class="o">{</span>
                    <span class="k">final</span> <span class="n">Matcher</span> <span class="n">m</span> <span class="o">=</span> <span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>

                    <span class="k">if</span> <span class="o">(!</span> <span class="n">m</span><span class="o">.</span><span class="na">find</span><span class="o">())</span>
                    <span class="o">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">&quot;line should start with IP address&quot;</span><span class="o">);</span>
                    <span class="o">}</span>

                    <span class="k">final</span> <span class="n">Future</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">future</span><span class="o">;</span>

                    <span class="k">if</span> <span class="o">(</span><span class="n">_map</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">0</span><span class="o">)))</span>
                    <span class="o">{</span>
                        <span class="n">future</span> <span class="o">=</span> <span class="n">_map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
                    <span class="o">}</span>
                    <span class="k">else</span>
                    <span class="o">{</span>
                        <span class="n">future</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span>
                        <span class="o">{</span>
                            <span class="k">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="k">throws</span> <span class="n">Exception</span>
                            <span class="o">{</span>
                                <span class="k">final</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">m</span><span class="o">.</span><span class="na">groupCount</span><span class="o">()];</span>

                                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">bytes</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span>
                                <span class="o">{</span>
                                    <span class="n">bytes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="kt">byte</span><span class="o">)</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
                                <span class="o">}</span>

                                <span class="k">try</span>
                                <span class="o">{</span>
                                    <span class="k">return</span> <span class="n">InetAddress</span><span class="o">.</span><span class="na">getByAddress</span><span class="o">(</span><span class="n">bytes</span><span class="o">).</span><span class="na">getHostName</span><span class="o">();</span>
                                <span class="o">}</span>
                                <span class="k">catch</span> <span class="o">(</span><span class="n">UnknownHostException</span> <span class="n">e</span><span class="o">)</span>
                                <span class="o">{</span>
                                    <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
                                <span class="o">}</span>
                            <span class="o">}</span>
                        <span class="o">});</span>

                        <span class="n">_map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="n">future</span><span class="o">);</span>
                    <span class="o">}</span>

                    <span class="n">_queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;()</span>
                    <span class="o">{</span>
                        <span class="k">public</span> <span class="n">String</span> <span class="nf">call</span><span class="o">()</span> <span class="k">throws</span> <span class="n">Exception</span>
                        <span class="o">{</span>
                            <span class="k">return</span> <span class="n">m</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="n">future</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
                        <span class="o">}</span>
                    <span class="o">});</span>

                    <span class="k">while</span> <span class="o">(</span><span class="n">_queue</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">&gt;=</span> <span class="n">_count</span><span class="o">)</span> <span class="n">output</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">finally</span>
            <span class="o">{</span>
                <span class="n">r</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>

            <span class="k">while</span> <span class="o">(!</span> <span class="n">_queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="n">output</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">finally</span>
        <span class="o">{</span>
            <span class="n">service</span><span class="o">.</span><span class="na">shutdown</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/addtag/" class="addtag" id="addtag_1800">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1800"
  >-</span><span
  class="button yellow"
  id="rating_z_1800"
  >0</span><span 
  class="button green"
  id="rating_p_1800"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/">
    2
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1800/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1974"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1974/">#1974</a>(<script language="JavaScript">print_time(new Date("2007/08/07 08:28 GMT"));</script><noscript>2007/08/07 08:28 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>他の人にコメントして気づいたんだけど、Matcher
に複数スレッドからロックなしにアクセスしてます
ね・・・。変更せず取得しているだけだから安全だと
思ってたけど、メソッド内で例えば計算結果を
キャッシュするなどして、メンバ変数を変更して
いたら・・・安全とは言えない気がしてきました。

というわけで、別スレッドからアクセスするのは
bytes と addr だけにするパッチです。addr は
参照を返してるだけだし、bytes はスレッド
開始以降変更してないので、これで完全に
スレッドセーフなはず。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- MeApp.java.orig     Tue Aug  7 17:12:58 2007</span>
<span class="gi">+++ MeApp.java  Tue Aug  7 17:14:36 2007</span>
<span class="gu">@@ -40,37 +40,39 @@</span>
                         throw new RuntimeException(&quot;line should start with IP a
ddress&quot;);
                     }

<span class="gi">+                    final String addr = m.group(0);</span>
<span class="gi">+</span>
                     final Future&lt;String&gt; future;

<span class="gd">-                    if (_map.containsKey(m.group(0)))</span>
<span class="gi">+                    if (_map.containsKey(addr))</span>
                     {
<span class="gd">-                        future = _map.get(m.group(0));</span>
<span class="gi">+                        future = _map.get(addr);</span>
                     }
                     else
                     {
<span class="gi">+                        final byte[] bytes = new byte[m.groupCount()];</span>
<span class="gi">+</span>
<span class="gi">+                        for (int i = 0; i &lt; bytes.length; ++i)</span>
<span class="gi">+                        {</span>
<span class="gi">+                            bytes[i] = (byte)Integer.parseInt(m.group(i + 1));</span>
<span class="gi">+                        }</span>
<span class="gi">+</span>
                         future = service.submit(new Callable&lt;String&gt;()
                         {
                             public String call() throws Exception
                             {
<span class="gd">-                                final byte[] bytes = new byte[m.groupCount()];</span>
<span class="gd">-</span>
<span class="gd">-                                for (int i = 0; i &lt; bytes.length; ++i)</span>
<span class="gd">-                                {</span>
<span class="gd">-                                    bytes[i] = (byte)Integer.parseInt(m.group(i</span>
 + 1));
<span class="gd">-                                }</span>
<span class="gd">-</span>
                                 try
                                 {
                                     return InetAddress.getByAddress(bytes).getH
ostName();
                                 }
                                 catch (UnknownHostException e)
                                 {
<span class="gd">-                                    return m.group(0);</span>
<span class="gi">+                                    return addr;</span>
                                 }
                             }
                         });

<span class="gd">-                        _map.put(m.group(0), future);</span>
<span class="gi">+                        _map.put(addr, future);</span>
                     }

                     _queue.offer(new Callable&lt;String&gt;()
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1974/addtag/" class="addtag" id="addtag_1974">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1974/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1974/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1974"
  >-</span><span
  class="button yellow"
  id="rating_z_1974"
  >0</span><span 
  class="button green"
  id="rating_p_1974"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1974/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1974/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1801"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/177/" target="_top">ocean</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1801/">#1801</a>(<script language="JavaScript">print_time(new Date("2007/08/03 18:58 GMT"));</script><noscript>2007/08/03 18:58 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  × 童子
○ 同時
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1801/addtag/" class="addtag" id="addtag_1801">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1801"
  >-</span><span
  class="button yellow"
  id="rating_z_1801"
  >0</span><span 
  class="button green"
  id="rating_p_1801"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1800/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1801/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1801/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  

  

  

  
    




<div class="comment" id="comment1973"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1973/">#1973</a>(<script language="JavaScript">print_time(new Date("2007/08/07 08:13 GMT"));</script><noscript>2007/08/07 08:13 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>子プロセスでphpを複数起動して並列化してみた。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nf">define</span><span class="p">(</span><span class="s2">&quot;MAX_RESOLVER&quot;</span><span class="p">,</span><span class="m">4</span><span class="p">);</span>
<span class="nf">define</span><span class="p">(</span><span class="s2">&quot;MAX_QUEUE&quot;</span><span class="p">,</span><span class="m">1024</span><span class="p">);</span>

<span class="nv">$dnscache</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="nv">$resolvers</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="nv">$queue</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>

<span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nf">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$queue</span><span class="p">)</span><span class="o">&lt;=</span><span class="m">0</span><span class="p">)</span>
<span class="p">{</span>	<span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="nf">feof</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$resolvers</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">MAX_RESOLVER</span> <span class="o">&amp;&amp;</span> <span class="nf">count</span><span class="p">(</span><span class="nv">$queue</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">MAX_QUEUE</span><span class="p">)</span>
	<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nf">strlen</span><span class="p">(</span><span class="nv">$line</span><span class="o">=</span><span class="nf">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span><span class="o">&gt;</span><span class="m">1</span><span class="p">)</span>
		<span class="p">{</span>	<span class="nv">$queue</span><span class="p">[]</span><span class="o">=</span><span class="k">list</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span><span class="nv">$line</span><span class="p">)</span><span class="o">=</span><span class="nf">explode</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">,</span><span class="nv">$line</span><span class="p">,</span><span class="m">2</span><span class="p">);</span>
			<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nf">isset</span><span class="p">(</span><span class="nv">$dnscache</span><span class="p">[</span><span class="nv">$ip</span><span class="p">]))</span>
			<span class="p">{</span>	<span class="nv">$pp</span><span class="o">=</span><span class="nf">popen</span><span class="p">(</span><span class="s1">&#39;php -r &quot;echo gethostbyaddr(&#39;</span><span class="o">.</span><span class="s2">&quot;&#39;</span><span class="si">$ip</span><span class="s2">&#39;&quot;</span><span class="o">.</span><span class="s1">&#39;);&quot;&#39;</span><span class="p">,</span><span class="s2">&quot;r&quot;</span><span class="p">);</span>
				<span class="k">if</span><span class="p">(</span><span class="nv">$pp</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
					<span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
				<span class="nv">$resolvers</span><span class="p">[</span><span class="nv">$ip</span><span class="p">]</span><span class="o">=</span><span class="nv">$pp</span><span class="p">;</span>
				<span class="nv">$dnscache</span><span class="p">[</span><span class="nv">$ip</span><span class="p">]</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nv">$r</span><span class="o">=</span><span class="nv">$resolvers</span><span class="p">;</span>
	<span class="nv">$w</span><span class="o">=</span><span class="nv">$e</span><span class="o">=</span><span class="k">null</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="nf">stream_select</span><span class="p">(</span><span class="nv">$r</span><span class="p">,</span><span class="nv">$w</span><span class="p">,</span><span class="nv">$e</span><span class="p">,</span><span class="k">null</span><span class="p">)</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
		<span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
	<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(,</span><span class="nv">$pp</span><span class="p">)</span><span class="o">=</span><span class="nf">each</span><span class="p">(</span><span class="nv">$r</span><span class="p">))</span>
	<span class="p">{</span>	<span class="k">if</span><span class="p">((</span><span class="nv">$ip</span><span class="o">=</span><span class="nf">array_search</span><span class="p">(</span><span class="nv">$pp</span><span class="p">,</span><span class="nv">$resolvers</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
		<span class="p">{</span>	<span class="nv">$dnscache</span><span class="p">[</span><span class="nv">$ip</span><span class="p">]</span><span class="o">=</span><span class="nf">trim</span><span class="p">(</span><span class="nf">fgets</span><span class="p">(</span><span class="nv">$pp</span><span class="p">));</span>
			<span class="nf">pclose</span><span class="p">(</span><span class="nv">$pp</span><span class="p">);</span>
			<span class="nf">unset</span><span class="p">(</span><span class="nv">$resolvers</span><span class="p">[</span><span class="nv">$ip</span><span class="p">]);</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">while</span><span class="p">(</span><span class="nf">count</span><span class="p">(</span><span class="nv">$queue</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">$fqdn</span><span class="o">=</span><span class="nv">$dnscache</span><span class="p">[</span><span class="nv">$queue</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">0</span><span class="p">]])</span><span class="o">!=</span><span class="k">false</span><span class="p">)</span>
	<span class="p">{</span>	<span class="k">list</span><span class="p">(</span><span class="nv">$ip</span><span class="p">,</span><span class="nv">$line</span><span class="p">)</span><span class="o">=</span><span class="nf">array_shift</span><span class="p">(</span><span class="nv">$queue</span><span class="p">);</span>
		<span class="k">echo</span> <span class="s2">&quot;</span><span class="si">$fqdn</span><span class="s2"> </span><span class="si">$line</span><span class="s2">&quot;</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1973/addtag/" class="addtag" id="addtag_1973">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1973/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/1973/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1973"
  >-</span><span
  class="button yellow"
  id="rating_z_1973"
  >0</span><span 
  class="button green"
  id="rating_p_1973"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/1973/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1973/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment1975"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1975/">#1975</a>(<script language="JavaScript">print_time(new Date("2007/08/07 08:29 GMT"));</script><noscript>2007/08/07 08:29 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>9行め
while(!feof(STDIN) || count($queue)&gt;0)
です。ハズカシー(;_;)</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/1975/addtag/" class="addtag" id="addtag_1975">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1975"
  >-</span><span
  class="button yellow"
  id="rating_z_1975"
  >0</span><span 
  class="button green"
  id="rating_p_1975"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1973/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/1975/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/1975/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment3078"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3078/">#3078</a>(<script language="JavaScript">print_time(new Date("2007/09/19 03:08 GMT"));</script><noscript>2007/09/19 03:08 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>逆引き部分だけスレッドに。手抜きです。
まだRubyなかったので。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;resolv&#39;</span>

<span class="k">class</span> <span class="nc">Writer</span>
  <span class="k">def</span> <span class="nf">initialize</span>
    <span class="vi">@a</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="vi">@t</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span><span class="p">{</span>
      <span class="k">while</span> <span class="kp">true</span>
        <span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mo">01</span> <span class="k">while</span> <span class="vi">@a</span><span class="o">.</span><span class="n">empty?</span> <span class="o">||</span> <span class="vi">@a</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">alive?</span>

        <span class="nb">puts</span> <span class="vi">@a</span><span class="o">.</span><span class="n">shift</span><span class="o">.</span><span class="n">result</span>
      <span class="k">end</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">empty?</span>
    <span class="vi">@a</span><span class="o">.</span><span class="n">empty?</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">&lt;&lt;</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
    <span class="vi">@a</span> <span class="o">&lt;&lt;</span> <span class="n">r</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">kill</span>
    <span class="vi">@t</span><span class="o">.</span><span class="n">kill</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">Resolver</span>
  <span class="kp">attr_reader</span> <span class="ss">:result</span>
  <span class="vc">@@cache</span> <span class="o">=</span> <span class="p">{}</span>

  <span class="k">def</span> <span class="nf">resolv</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
    <span class="k">return</span> <span class="vc">@@cache</span><span class="o">[</span><span class="n">ip</span><span class="o">]</span> <span class="k">if</span> <span class="vc">@@cache</span><span class="o">[</span><span class="n">ip</span><span class="o">]</span>

    <span class="vc">@@cache</span> <span class="o">=</span>
      <span class="k">begin</span>
        <span class="no">Resolv</span><span class="o">.</span><span class="n">getname</span><span class="p">(</span><span class="n">ip</span><span class="p">)</span>
      <span class="k">rescue</span> <span class="no">Resolv</span><span class="o">::</span><span class="no">ResolvError</span>
        <span class="n">ip</span>
      <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
    <span class="vi">@t</span> <span class="o">=</span> <span class="no">Thread</span><span class="o">.</span><span class="n">start</span><span class="p">{</span>
      <span class="n">reg</span> <span class="o">=</span> <span class="sr">/(^\d+?\.\d+?\.\d+?\.\d+?)/</span>
      <span class="k">if</span> <span class="n">str</span> <span class="o">=~</span> <span class="n">reg</span>
        <span class="n">ip</span> <span class="o">=</span> <span class="vg">$1</span>
        <span class="vi">@result</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="n">reg</span><span class="p">,</span> <span class="n">resolv</span><span class="p">(</span><span class="n">ip</span><span class="p">))</span>
      <span class="k">else</span>
        <span class="vg">$stderr</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;does not match.&quot;</span>
      <span class="k">end</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">alive?</span>
    <span class="vi">@t</span><span class="o">.</span><span class="n">alive?</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">reader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="n">wtr</span> <span class="o">=</span> <span class="no">Writer</span><span class="o">.</span><span class="n">new</span>

  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">gets</span>
    <span class="n">wtr</span> <span class="o">&lt;&lt;</span> <span class="no">Resolver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="nb">sleep</span> <span class="mi">0</span><span class="o">.</span><span class="mo">01</span> <span class="k">until</span> <span class="n">wtr</span><span class="o">.</span><span class="n">empty?</span>
  <span class="n">wtr</span><span class="o">.</span><span class="n">kill</span>
<span class="k">end</span>

<span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$0</span>
  <span class="nb">require</span> <span class="s1">&#39;stringio&#39;</span>

  <span class="n">log</span> <span class="o">=</span> <span class="o">&lt;&lt;</span><span class="no">_LOG_</span>
<span class="sh">210.166.209.71 - - [26/Jul/2007:22:32:47 +0900] &quot;GET / HTTP/1.1&quot; 403 283 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2.0.0.5&quot;</span>
<span class="sh">192.168.7.1 - - [26/Jul/2007:22:32:48 +0900] &quot;GET /favicon.ico HTTP/1.1&quot; 404 290 &quot;-&quot; &quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; ja; rv:1.8.1.5) Gecko/20070713 Firefox/2\</span>
<span class="sh">.0.0.5&quot;</span>
<span class="no">_LOG_</span>

  <span class="n">reader</span><span class="p">(</span><span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">log</span><span class="p">))</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3078/addtag/" class="addtag" id="addtag_3078">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3078/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3078/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3078"
  >-</span><span
  class="button yellow"
  id="rating_z_3078"
  >0</span><span 
  class="button green"
  id="rating_p_3078"
  >+</span></span></span>
  
<p>

  

  <a href="/web/20110426043058/http://ja.doukaku.org/comment/3078/">
    1
    reply
  </a>

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/3078/">
  返信
  </a>]
  </div>
</div>
</div>



  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      




<div class="comment" id="comment8205"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/8205/">#8205</a>(<script language="JavaScript">print_time(new Date("2008/12/18 20:32 GMT"));</script><noscript>2008/12/18 20:32 GMT</noscript>)
	
	
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <p>すげえいまさらですが35行目間違ってますねこれ。正しくは&#64;&#64;cache[ip] =</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/8205/addtag/" class="addtag" id="addtag_8205">タグ</a>:
	なし&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8205"
  >-</span><span
  class="button yellow"
  id="rating_z_8205"
  >0</span><span 
  class="button green"
  id="rating_p_8205"
  >+</span></span></span>
  
<p>

  
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/3078/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20110426043058/http://ja.doukaku.org/comment/8205/root/"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/8205/">
  返信
  </a>]
  </div>
</div>
</div>



  


    </div>
  


  

  
    




<div class="comment" id="comment6737"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/242/" target="_top">lufia</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/6737/">#6737</a>(<script language="JavaScript">print_time(new Date("2008/07/15 11:38 GMT"));</script><noscript>2008/07/15 11:38 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  並びをそのまま保つことに悩みました。。

今回の回答では、chanはブロックされることを利用してのq: array[4] of chan of chan of (string, string)がたぶん中心です。ブロックされるので順番になっているし、ブロック中にスレッドが動いているので並列化も。

最悪のケース(同じIPが4つ並んだ状態)では並列化の意味がなくなるのが悩みどころ。。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97</pre></td><td class="code"><div class="highlight"><pre>implement Resolv;

include &quot;sys.m&quot;;
    sys: Sys;
    FD, print: import sys;
include &quot;draw.m&quot;;
include &quot;srv.m&quot;;
    srv: Srv;
include &quot;hash.m&quot;;
    hash: Hash;
    HashTable, HashVal: import hash;
include &quot;bufio.m&quot;;
    bufio: Bufio;
    Iobuf: import bufio;
include &quot;string.m&quot;;
    str: String;

Resolv: module
{
    init: fn(ctxt: ref Draw-&gt;Context, argv: list of string);
};

dnsin: chan of (string, string);
q := array[4] of chan of chan of (string, string);    # DNS que
cache: ref HashTable;

init(nil: ref Draw-&gt;Context, nil: list of string)
{
    sys = load Sys Sys-&gt;PATH;
    srv = load Srv Srv-&gt;PATH;
    srv-&gt;init();
    hash = load Hash Hash-&gt;PATH;
    bufio = load Bufio Bufio-&gt;PATH;
    str = load String String-&gt;PATH;

    dnsin = chan of (string, string);
    for(i := 0; i &lt; len q; i++)
        q[i] = chan of chan of (string, string);
    cache = hash-&gt;new(500);
    spawn dnstask();
    spawn readtask(sys-&gt;fildes(0));

    n := 0;
    for(;;){
        (addr, opt) := &lt;- (&lt;- q[n++ % len q]);
        if(addr == nil)
            break;
        print(&quot;%s%s\n&quot;, addr, opt);
    }
}

readtask(fd: ref FD)
{
    fin := bufio-&gt;fopen(fd, bufio-&gt;OREAD);
    if(fin == nil)
        raise &quot;fopen&quot;;
    while((s := fin.gets(&#39;\n&#39;)) != nil){
        if(s[len s-1] == &#39;\n&#39;)
            s = s[0:len s -1];
        dnsin &lt;- = str-&gt;splitl(s, &quot; &quot;);
    }
    dnsin &lt;- = (nil, nil);        # term
}

dnstask()
{
    n := 0;
    for(;;){
        (addr, opt) := &lt;- dnsin;
        c := chan of (string, string);
        spawn dnsquery(c, addr, opt);
        q[n++ % len q] &lt;- = c;
        if(addr == nil)
            break;
    }
}

dnsquery(c: chan of (string, string), addr, opt: string)
{
    if(addr == nil){
        c &lt;- = (nil, nil);
        return;
    }

    v := cache.find(addr);
    if(v == nil){
        #sys-&gt;sleep(1000);
        v = ref HashVal;
        hosts := srv-&gt;ipa2h(addr);
        if(hosts == nil)
            v.s = addr;
        else
            v.s = hd hosts;
        cache.insert(addr, *v);
    }
    c &lt;- = (v.s, opt);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/6737/addtag/" class="addtag" id="addtag_6737">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/6737/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/6737/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6737"
  >-</span><span
  class="button yellow"
  id="rating_z_6737"
  >0</span><span 
  class="button green"
  id="rating_p_6737"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/6737/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment3259"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/438/" target="_top">koguro</a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3259/">#3259</a>(<script language="JavaScript">print_time(new Date("2007/10/05 13:40 GMT"));</script><noscript>2007/10/05 13:40 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>手抜きをして名前解決は外部コマンドのdigを使っています(あと出力結果を整形するためにawkも)。

一応特徴としては、
(1) スレッドを使うと排他とか面倒なので、プロセスで並列に動かしている
(2) ログを置換するフィルタプロセスと名前解決のプロセスの両方が並列に動作する
    (さらに名前解決のプロセスはdigを並列で実行する)
(3) 名前解決のプロセスも自分で勝手にファイルをスキャンしてIPアドレスを抜き出している。
    ファイルI/Oは通常の2倍になるが、フィルタプロセスとの相互作用が一方通行になるので作りは簡単になる。

実行は gosh resolv-filter.scm access.logのようにしてください。
max-processesをいじるとdigの同時実行数が変更できます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">process</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-13</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">max-processes</span> <span class="mi">4</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">filter</span> <span class="nv">log-port</span> <span class="nv">resolver-port</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">tbl</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;string=?</span><span class="p">)))</span>
    <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">resolv</span> <span class="nv">addr</span><span class="p">)</span>
      <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">hash-table-get</span> <span class="nv">tbl</span> <span class="nv">addr</span> <span class="no">#f</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">begin</span>
            <span class="p">(</span><span class="nb">apply </span><span class="nv">hash-table-put!</span> <span class="nv">tbl</span> <span class="p">(</span><span class="nb">read </span><span class="nv">resolver-port</span><span class="p">))</span>
            <span class="p">(</span><span class="nf">resolv</span> <span class="nv">addr</span><span class="p">))))</span>
    <span class="p">(</span><span class="nf">port-for-each</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">line</span><span class="p">)</span>
                     <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nf">regexp-replace</span> <span class="o">#</span><span class="nv">/^</span><span class="err">\</span><span class="nv">d+</span><span class="err">\</span><span class="o">.</span><span class="err">\</span><span class="nv">d+</span><span class="err">\</span><span class="o">.</span><span class="err">\</span><span class="nv">d+</span><span class="err">\</span><span class="o">.</span><span class="err">\</span><span class="nv">d+/</span> <span class="nv">line</span>
                                            <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span>
                                              <span class="p">(</span><span class="nf">resolv</span> <span class="p">(</span><span class="nf">m</span><span class="p">))))))</span>
                   <span class="p">(</span><span class="nf">cut</span> <span class="nv">read-line</span> <span class="nv">log-port</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">resolver</span> <span class="nv">log-port</span> <span class="nv">resolver-port</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">notify!</span> <span class="nv">nohang</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">and-let*</span> <span class="p">((</span><span class="nf">proc</span> <span class="p">(</span><span class="nf">process-wait-any</span> <span class="nv">nohang</span><span class="p">)))</span>
      <span class="p">(</span><span class="nb">write </span><span class="p">(</span><span class="nf">string-split</span> <span class="p">(</span><span class="nf">string-trim-right</span> <span class="p">(</span><span class="nf">port-&gt;string</span> <span class="p">(</span><span class="nf">process-output</span> <span class="nv">proc</span><span class="p">))</span>
                                              <span class="o">#</span><span class="err">[\</span><span class="nv">x0d</span><span class="err">\</span><span class="nv">x0a</span><span class="err">]</span><span class="p">)</span> <span class="s">&quot; &quot;</span><span class="p">)</span> <span class="nv">resolver-port</span><span class="p">)</span>
      <span class="p">(</span><span class="nf">flush</span> <span class="nv">resolver-port</span><span class="p">)))</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">tbl</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;string=?</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">port-for-each</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">line</span><span class="p">)</span>
                     <span class="p">(</span><span class="nf">rxmatch-if</span> <span class="p">(</span><span class="o">#</span><span class="nv">/^</span><span class="p">(</span><span class="err">\</span><span class="nv">d+</span><span class="err">\</span><span class="o">.</span><span class="err">\</span><span class="nv">d+</span><span class="err">\</span><span class="o">.</span><span class="err">\</span><span class="nv">d+</span><span class="err">\</span><span class="o">.</span><span class="err">\</span><span class="nv">d+</span><span class="p">)</span><span class="nv">/</span> <span class="nv">line</span><span class="p">)</span> <span class="p">(</span><span class="nf">addr</span><span class="p">)</span>
                       <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">tbl</span> <span class="nv">addr</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">tbl</span> <span class="nv">addr</span> <span class="no">#t</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">run-process</span> <span class="o">`</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span> <span class="s">&quot;-c&quot;</span> <span class="o">,#`</span><span class="s">&quot;dig -x ,addr | awk &#39;BEGIN{f=0}/^[0-9].*[\t ]PTR/&amp;&amp;f==0{sub(/\.$/,,\&quot;\&quot;,,$5);print \&quot;,addr\&quot;,,$5;f=1}END{if(f==0)print \&quot;,addr\&quot;,,\&quot;,addr\&quot;}&#39;&quot;</span><span class="p">)</span>
                                      <span class="nv">:output</span> <span class="nv">:pipe</span><span class="p">))</span>
                       <span class="no">#f</span><span class="p">)</span>
                     <span class="p">(</span><span class="nf">notify!</span> <span class="p">(</span><span class="nb">&lt; </span><span class="p">(</span><span class="nb">length </span><span class="p">(</span><span class="nf">process-list</span><span class="p">))</span> <span class="nv">max-processes</span><span class="p">)))</span>
                   <span class="p">(</span><span class="nf">cut</span> <span class="nv">read-line</span> <span class="nv">log-port</span><span class="p">))</span>
    <span class="p">(</span><span class="k">do </span><span class="p">()</span> <span class="p">((</span><span class="nb">not </span><span class="p">(</span><span class="nf">notify!</span> <span class="no">#f</span><span class="p">))))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">filename</span> <span class="p">(</span><span class="nb">list-ref </span><span class="nv">args</span> <span class="mi">1</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">in</span> <span class="nv">out</span><span class="p">)</span> <span class="p">(</span><span class="nf">sys-pipe</span><span class="p">)</span>
      <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">sys-fork</span><span class="p">)</span> <span class="mi">0</span><span class="p">)</span>
          <span class="p">(</span><span class="nb">call-with-input-file </span><span class="nv">filename</span>
            <span class="p">(</span><span class="nf">cut</span> <span class="nv">resolver</span> <span class="nv">&lt;&gt;</span> <span class="nv">out</span><span class="p">))</span>
          <span class="p">(</span><span class="nb">call-with-input-file </span><span class="nv">filename</span>
            <span class="p">(</span><span class="nf">cut</span> <span class="nv">filter</span> <span class="nv">&lt;&gt;</span> <span class="nv">in</span><span class="p">)))))</span>
  <span class="mi">0</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/3259/addtag/" class="addtag" id="addtag_3259">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3259/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/3259/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3259"
  >-</span><span
  class="button yellow"
  id="rating_z_3259"
  >0</span><span 
  class="button green"
  id="rating_p_3259"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/3259/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  
    




<div class="comment" id="comment2046"><!--dj-->
  <p class="banner"><a href="/web/20110426043058/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20110426043058/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2046/">#2046</a>(<script language="JavaScript">print_time(new Date("2007/08/09 13:30 GMT"));</script><noscript>2007/08/09 13:30 GMT</noscript>)
	
	
	
	[<a href="/web/20110426043058/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;
<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>

  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>めんどくさいので終了させていませんが・・・。

Twistedで非同期処理しています。キャッシュはOSに依存します。</pre>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20110426043058/http://www.liris.org/blog/twisted-lookuppointer/"></a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50</pre></td><td class="code"><div class="highlight"><pre><span class="k">from</span> <span class="nn">twisted.names</span> <span class="k">import</span> <span class="n">client</span>
<span class="k">from</span> <span class="nn">twisted.python</span> <span class="k">import</span> <span class="n">util</span>
<span class="k">from</span> <span class="nn">twisted.internet</span> <span class="k">import</span> <span class="n">reactor</span><span class="p">,</span><span class="n">defer</span>
<span class="k">import</span> <span class="nn">fileinput</span>
<span class="k">import</span> <span class="nn">re</span>



<span class="k">def</span> <span class="nf">getIp</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
    <span class="n">addr_str</span><span class="p">,</span> <span class="n">remain</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">addr_str</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">),</span> <span class="n">remain</span>

<span class="nd">@defer</span><span class="o">.</span><span class="n">deferredGenerator</span>
<span class="k">def</span> <span class="nf">lookupPtr</span><span class="p">(</span><span class="n">queue</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">wfd</span> <span class="o">=</span> <span class="n">defer</span><span class="o">.</span><span class="n">waitForDeferred</span><span class="p">(</span><span class="n">queue</span><span class="o">.</span><span class="n">get</span><span class="p">())</span>
        <span class="k">yield</span> <span class="n">wfd</span>
        <span class="n">addr</span><span class="p">,</span> <span class="n">ip_ptr</span><span class="p">,</span> <span class="n">remain</span> <span class="o">=</span> <span class="n">wfd</span><span class="o">.</span><span class="n">getResult</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">wfd</span> <span class="o">=</span> <span class="n">defer</span><span class="o">.</span><span class="n">waitForDeferred</span><span class="p">(</span><span class="n">client</span><span class="o">.</span><span class="n">lookupPointer</span><span class="p">(</span><span class="n">ip_ptr</span><span class="p">))</span>
            <span class="k">yield</span> <span class="n">wfd</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">wfd</span><span class="o">.</span><span class="n">getResult</span><span class="p">()</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">payload</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;.&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">addr</span><span class="p">)</span>
        <span class="k">print</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">remain</span>

<span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">fileinput</span><span class="o">.</span><span class="n">input</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">line</span><span class="p">:</span>
            <span class="n">addr</span><span class="p">,</span> <span class="n">remain</span> <span class="o">=</span> <span class="n">getIp</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
            <span class="n">ptr</span> <span class="o">=</span> <span class="s">&#39;.&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">addr</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">+</span> <span class="s">&#39;.in-addr.arpa&#39;</span>
            <span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="n">data</span><span class="p">):</span>
                <span class="n">queue</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        
            <span class="n">reactor</span><span class="o">.</span><span class="n">callFromThread</span><span class="p">(</span><span class="n">put</span><span class="p">,</span> <span class="p">(</span><span class="n">addr</span><span class="p">,</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">remain</span><span class="p">))</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&quot;__main__&quot;</span><span class="p">:</span>
    <span class="k">import</span> <span class="nn">sys</span>
    <span class="n">dlist</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">defer</span><span class="o">.</span><span class="n">DeferredQueue</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">100</span><span class="p">):</span>
        <span class="n">lookupPtr</span><span class="p">(</span><span class="n">queue</span><span class="p">)</span>
    
    <span class="n">reactor</span><span class="o">.</span><span class="n">callInThread</span><span class="p">(</span><span class="n">load</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    
    <span class="n">reactor</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20110426043058/http://ja.doukaku.org/comment/2046/addtag/" class="addtag" id="addtag_2046">タグ</a>:
	なし&nbsp;

	
      [<a href="/web/20110426043058/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20110426043058/http://ja.doukaku.org/comment/2046/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20110426043058/http://ja.doukaku.org/comment/2046/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_2046"
  >-</span><span
  class="button yellow"
  id="rating_z_2046"
  >0</span><span 
  class="button green"
  id="rating_p_2046"
  >+</span></span></span>
  
<p>

  

  

  [<a href="/web/20110426043058/http://ja.doukaku.org/39/reply_to/2046/">
  返信
  </a>]
  </div>
</div>
</div>



  


  

  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20110426043058if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<li><a href="/web/20110426043058/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20110426043058/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20110426043058/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20110426043058/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20110426043058/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20110426043058/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20110426043058/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20110426043058/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20110426043058im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>

<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20110426043058/http://ja.doukaku.org/qa/">Q&amp;A</a>
<li><a href="/web/20110426043058/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20110426043058/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20110426043058/http://www.djangoproject.com/">Django</a>
</ul>


</div>
</div>


<div id="page_foot" class="bordered">
<a rel="license" href="/web/20110426043058/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20110426043058im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20110426043058/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20110426043058/http://ja.doukaku.org/qa/#licence">[詳細]</a>
</div>

</body>



<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20110426043058/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20110426043058js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>



</html>





<!--
     FILE ARCHIVED ON 4:30:58 Apr 26, 2011 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:19:25 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
