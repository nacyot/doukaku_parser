
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
四字熟語パズルの作成
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20090519001707cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20090519001707cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20090519001707cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20090519001707/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20090519001707/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20090519001707js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20090519001707js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20090519001707js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20090519001707js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app19.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/75\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "19";
var displayMonth = "May";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/75/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090519001707" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202135439/http://ja.doukaku.org/75/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 0:17:07 May 19, 2009">MAY</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jun
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20081202135439/http://ja.doukaku.org/75/nested/" title="13:54:39 Dec 2, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 0:17:07 May 19, 2009">19</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080406015554/http://ja.doukaku.org/75/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="6 Apr 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 0:17:07 May 19, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20090519001707*/http://ja.doukaku.org/75/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>6 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 19 May 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000000_2008:-1:010100000001_2009:4:000020000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20090519001707/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20090519001707/http://ja.doukaku.org/75/">四字熟語パズルの作成</a>
</h2>

    





<div class="comment" id="comment3644">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3644/">#3644</a>(<script language="JavaScript">print_time(new Date("2007/11/01 03:02 GMT"));</script><noscript>2007/11/01 03:02 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>与えられた四字熟語のリストから下のように四角く配置することのできる熟語の組み合わせを探すプログラムを作成してください。</p>
<p>出力例:</p>
<pre class="literal-block">
無憂無風
礼　　林
千　　火
万水千山

知行合一
者　　筆
不　　勾
言語道断
</pre>
<p>四字熟語は左から右、上から下へ読むものとします。また右上隅の漢字と左下隅の漢字は異なるものでなければいけません。</p>
<p>四字熟語のデータは扱いやすい形(たとえばユニコード文字列のリスト)で与えられていると仮定して構いません。サンプルデータが必要であれば
<a class="reference" href="/web/20090519001707/http://vector.aol.co.jp/soft/data/writing/se400206.html">FOR Microsoft IME The四字熟語辞典(データ / 文書作成)</a>
にテキスト形式のデータが入っているのでそれを使えると思います。</p>
<p>問題の規模の参考までに、40行程度のPythonスクリプトでこのデータ(重複をのぞいて8312件)を処理してみたところ2.4GHzのCPUで13秒程度かかりました。結果は8133件出力されました。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3644/addtag/" class="addtag" id="addtag_3644">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3644"
  >-</span><span
  class="button yellow"
  id="rating_z_3644"
  >0</span><span 
  class="button green"
  id="rating_p_3644"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3644/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20090519001707/http://ja.doukaku.org/75/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20090519001707/http://ja.doukaku.org/75/flatten/">フラット表示</a> 
<a href="/web/20090519001707/http://ja.doukaku.org/75/">非表示</a> 


  

  
    





<div class="comment" id="comment3658">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3658/">#3658</a>(<script language="JavaScript">print_time(new Date("2007/11/02 06:49 GMT"));</script><noscript>2007/11/02 06:49 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>それなりに効率化を図ったつもり。
サンプルデータ 8312 件を 2.66 GHz の CPU で 3.5 秒でした。
出力が 12118 件で問題文と一致しませんが、
特におかしな結果は見当たりませんでした。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</pre></td><td class="code"><div class="highlight"><pre>(defun group (list key &amp;optional (test #&#39;eql))
  (let ((tbl (make-hash-table :test test)))
    (dolist (x list) (push x (gethash (funcall key x) tbl)))
    tbl))

(defun make-puzzle (words)
  (let ((tbl1 (group words (lambda (s) (elt s 0)))))
    (loop for grp1 being each hash-value of tbl1 nconc
      (loop for a in grp1 and rest1 on (cdr grp1) nconc
        (loop for b in rest1
          if (char/= (elt a 3) (elt b 3)) nconc
          (loop for c in (gethash (elt a 3) tbl1) nconc
            (loop for d in (gethash (elt b 3) tbl1)
              if (char= (elt c 3) (elt d 3))
              collect (list a b c d))))))))

;;; test
(compile &#39;make-puzzle)

(let ((words (with-open-file (s &quot;words.txt&quot; :direction :input)
               (loop for x = (read-line s nil) while x collect x))))
  (print (time (make-puzzle words))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3658/addtag/" class="addtag" id="addtag_3658">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3658/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3658/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3658"
  >-</span><span
  class="button yellow"
  id="rating_z_3658"
  >0</span><span 
  class="button green"
  id="rating_p_3658"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3658/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3658/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3659">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3659/">#3659</a>(<script language="JavaScript">print_time(new Date("2007/11/02 06:55 GMT"));</script><noscript>2007/11/02 06:55 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>データは words.txt というファイルの中に入っていて、
改行で区切られていると仮定しています。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3659/addtag/" class="addtag" id="addtag_3659">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3659"
  >-</span><span
  class="button yellow"
  id="rating_z_3659"
  >0</span><span 
  class="button green"
  id="rating_p_3659"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3658/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3659/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3659/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3661">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3661/">#3661</a>(<script language="JavaScript">print_time(new Date("2007/11/02 09:35 GMT"));</script><noscript>2007/11/02 09:35 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。<br/><br/>四字熟語のデータは、熟語ごとに行を改めた&nbsp;Unicode&nbsp;のテキストファイル（in.txt）で与えられているとします。<br/><br/>#groupBy:having:&nbsp;は、レシーバ（コレクション）に対し、まず第一引数のブロックで指定した条件（キー）にもとづいて要素を括りだした後、各グループについてあらためて第二引数で与えたブロックの条件に合致するかをチェックし、当てはまるものだけを集めて返すメソッドです。<br/><br/>結果として得られた四個の組の要素に重複がないことは組をセットにしてその要素を数えること（quartet&nbsp;asSet&nbsp;size&nbsp;=&nbsp;4）で、また、右上隅と左下隅の文字が異なることは、最初の熟語の最後の文字と、最後の熟語の最初の文字が一致しないこと（quartet&nbsp;first&nbsp;last&nbsp;~=&nbsp;quartet&nbsp;last&nbsp;first）でチェックしています。<br/><br/>お題の例と同じデータを使っているはずなのですが、出力件数は&nbsp;11712&nbsp;でした。熟語四組の抽出には、1.0&nbsp;GHz&nbsp;PowerPC&nbsp;(Mac&nbsp;OS&nbsp;X&nbsp;10.4.10)&nbsp;で&nbsp;14&nbsp;秒弱ほどかかりました（ただし、入出力時間は含まず）。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre>| in yojis yoji firstCharDict pairs bothCharsDict results out timeToRun |

in := FileStream fileNamed: &#39;in.txt&#39;.
yojis := OrderedCollection new.
[(yoji := in nextLine) notNil] whileTrue: [yojis add: yoji].
in close.

timeToRun := [
    firstCharDict := yojis
        groupBy: [:each | each first]
        having: [:group | group size &gt; 1].

    pairs := OrderedCollection new.
    yojis do: [:first |
        firstCharDict at: first last ifPresent: [:found |
            found do: [:second | pairs add: {first. second}]]].

    bothCharsDict := pairs
        groupBy: [:pair | {pair first first. pair second last}]
        having: [:group | group size &gt; 1].

    results := OrderedCollection new.
    bothCharsDict do: [:val | val combinations: 2 atATimeDo: [:pair |
        | quartet |
        quartet := pair first, pair second.
        (quartet asSet size = 4 and: [quartet first last ~= quartet last first])
            ifTrue: [results add: quartet]]]
] timeToRun.

out := FileStream fileNamed: &#39;out.txt&#39;.
results do: [:quartet |
    out nextPutAll: quartet first; cr.
    (2 to: 3) do: [:idx |
        out nextPut: (quartet third at: idx).
        out nextPutAll: &#39;　　&#39;.
        out nextPut: (quartet second at: idx); cr].
    out nextPutAll: quartet last; cr; cr].
out edit.

^{results size. timeToRun}   &quot;=&gt; #(11712 13835) &quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3661/addtag/" class="addtag" id="addtag_3661">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3661/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3661/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3661"
  >-</span><span
  class="button yellow"
  id="rating_z_3661"
  >0</span><span 
  class="button green"
  id="rating_p_3661"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3661/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3661/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3670">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/">#3670</a>(<script language="JavaScript">print_time(new Date("2007/11/02 15:48 GMT"));</script><noscript>2007/11/02 15:48 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  数が食い違う原因はまだ分からないのですが、とりあえずひとつ明らかなバグが見つかったので修正。結果、少し増えて&nbsp;12109&nbsp;件でした。多数派の数にちょっと近づいたか？(^_^;)
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre><span class="gu">@@ -8,7 +8,7 @@</span>
 timeToRun := [
     firstCharDict := yojis
         groupBy: [:each | each first]
<span class="gd">-        having: [:group | group size &gt; 1].</span>
<span class="gi">+        having: [:group | true].</span>

     pairs := OrderedCollection new.
     yojis do: [:first |
<span class="gu">@@ -37,4 +37,4 @@</span>
     out nextPutAll: quartet last; cr; cr].
 out edit.

<span class="gd">-^{results size. timeToRun}   &quot;=&gt; #(11712 13835) &quot;</span>
<span class="gi">+^{results size. timeToRun}   &quot;=&gt; #(12109 13792) &quot;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/addtag/" class="addtag" id="addtag_3670">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3670"
  >-</span><span
  class="button yellow"
  id="rating_z_3670"
  >0</span><span 
  class="button green"
  id="rating_p_3670"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3661/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3670/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3673">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3673/">#3673</a>(<script language="JavaScript">print_time(new Date("2007/11/02 15:59 GMT"));</script><noscript>2007/11/02 15:59 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Unicode&nbsp;の扱いが分かる言語が&nbsp;Python&nbsp;だけだったので&nbsp;にしおさんの結果と差分をとってみたところ、にしおさんのにあって私のになかったのは次の７個でした。<br/><br/>#('一切即一'&nbsp;'一期四相'&nbsp;'一期四相'&nbsp;'相門有相')<br/>#('一場春夢'&nbsp;'夢中説夢'&nbsp;'一切即一'&nbsp;'一場春夢')<br/>#('一念通天'&nbsp;'天下第一'&nbsp;'一切即一'&nbsp;'一切即一')<br/>#('一了百当'&nbsp;'当代第一'&nbsp;'一切即一'&nbsp;'一切即一')<br/>#('一期一会'&nbsp;'会三帰一'&nbsp;'一切即一'&nbsp;'一切即一')<br/>#('一文不知'&nbsp;'知行合一'&nbsp;'一切即一'&nbsp;'一切即一')<br/>#('一読三嘆'&nbsp;'嘆息嗟嘆'&nbsp;'一切即一'&nbsp;'一読三嘆')<br/><br/>とりあえずこれらについては、私のほうではセットを使って重複を外す手続きをしているのでその関係かと思われます。<br/><br/>これと別に、同じ組み合わせでも順序が違うときに省くかどうかという判断も影響しそうです。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3673/addtag/" class="addtag" id="addtag_3673">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3673"
  >-</span><span
  class="button yellow"
  id="rating_z_3673"
  >0</span><span 
  class="button green"
  id="rating_p_3673"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3670/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3673/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3673/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3673/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3677">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3677/">#3677</a>(<script language="JavaScript">print_time(new Date("2007/11/02 17:12 GMT"));</script><noscript>2007/11/02 17:12 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ocean&nbsp;さんの&nbsp;Python&nbsp;版&nbsp;12118&nbsp;個と比較したところ、先の&nbsp;7&nbsp;個に加えて次の２点が私のでははじかれていました。やはり、４組のうちの重複要素の扱いに起因する違いのようです。<br/><br/>#('一唱三嘆'&nbsp;'嘆息嗟嘆'&nbsp;'一切即一'&nbsp;'一唱三嘆')<br/>#('一切即一'&nbsp;'一炊之夢'&nbsp;'一炊之夢'&nbsp;'夢中説夢')<br/><br/><br/>あと、以下の並びの異なる２セットをそれぞれ区別するかで&nbsp;12109&nbsp;と&nbsp;12107&nbsp;の差が出ることも分かりました。<br/><br/>#('一切即一'&nbsp;'一読三嘆'&nbsp;'一唱三嘆'&nbsp;'嘆息嗟嘆')<br/>#('一切即一'&nbsp;'一唱三嘆'&nbsp;'一読三嘆'&nbsp;'嘆息嗟嘆')<br/><br/>#('一炊之夢'&nbsp;'夢中説夢'&nbsp;'一切即一'&nbsp;'一場春夢')<br/>#('一場春夢'&nbsp;'夢中説夢'&nbsp;'一切即一'&nbsp;'一炊之夢')
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3677/addtag/" class="addtag" id="addtag_3677">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3677"
  >-</span><span
  class="button yellow"
  id="rating_z_3677"
  >0</span><span 
  class="button green"
  id="rating_p_3677"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3673/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3677/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3677/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment3662">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/456/" target="_top">kenaxt</a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3662/">#3662</a>(<script language="JavaScript">print_time(new Date("2007/11/02 10:29 GMT"));</script><noscript>2007/11/02 10:29 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>サンプルデータ(8312件),CPU1.8GHz,3秒で14,456件出力されました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">jukugo</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="n">r</span><span class="p">,</span> <span class="n">ht</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">t</span> <span class="o">=</span> <span class="p">{},</span> <span class="p">{},</span> <span class="p">{},</span> <span class="p">{},</span> <span class="p">{}</span>
  <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">fin</span><span class="o">|</span>
    <span class="n">cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">gets</span>
      <span class="n">a</span><span class="o">[</span><span class="n">cnt</span><span class="o">]</span> <span class="o">=</span> <span class="n">line</span>

      <span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">]]</span> <span class="o">=</span> <span class="o">[]</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">]]</span>
      <span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">[</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">]]</span> <span class="o">&lt;&lt;</span> <span class="n">cnt</span> <span class="c1">#--- head</span>

      <span class="n">t</span><span class="o">[</span><span class="n">cnt</span><span class="o">]</span> <span class="o">=</span> <span class="n">line</span><span class="o">[</span><span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span> <span class="c1">#--- tail</span>
      <span class="n">cnt</span><span class="o">+=</span><span class="mi">1</span>
    <span class="k">end</span>
  <span class="p">}</span>
  <span class="n">t</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">c</span><span class="p">,</span><span class="n">i</span><span class="o">|</span>
    <span class="k">next</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">h</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
    
    <span class="n">hh</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">c</span><span class="o">][</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">1</span><span class="o">]</span>
    <span class="n">h</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span>
      <span class="n">tt</span> <span class="o">=</span> <span class="n">a</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="mi">6</span><span class="o">.</span><span class="n">.</span><span class="mi">7</span><span class="o">]</span>
      <span class="k">next</span> <span class="k">if</span> <span class="n">hh</span> <span class="o">==</span> <span class="n">tt</span>
      <span class="n">hhtt</span> <span class="o">=</span> <span class="n">hh</span><span class="o">+</span><span class="n">tt</span>
      <span class="n">ht</span><span class="o">[</span><span class="n">hhtt</span><span class="o">]</span> <span class="o">=</span> <span class="o">[]</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">ht</span><span class="o">[</span><span class="n">hhtt</span><span class="o">]</span>

      <span class="n">ht</span><span class="o">[</span><span class="n">hhtt</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">m</span><span class="o">|</span>
        <span class="n">mm</span> <span class="o">=</span> <span class="o">[</span><span class="n">a</span><span class="o">[</span><span class="n">m</span><span class="o">[</span><span class="mi">0</span><span class="o">]]</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">m</span><span class="o">[</span><span class="mi">1</span><span class="o">]]</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">c</span><span class="o">]</span><span class="p">,</span> <span class="n">a</span><span class="o">[</span><span class="n">k</span><span class="o">]].</span><span class="n">flatten</span><span class="o">.</span><span class="n">sort</span>
        <span class="n">r</span><span class="o">[</span><span class="nb">sprintf</span><span class="p">(</span><span class="s2">&quot;%s</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="n">mm</span><span class="p">)</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span> <span class="k">if</span> <span class="n">mm</span><span class="o">.</span><span class="n">uniq</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">4</span>
      <span class="p">}</span>
      <span class="n">ht</span><span class="o">[</span><span class="n">hhtt</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">c</span><span class="p">,</span> <span class="n">k</span><span class="o">]</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">r</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="nb">puts</span> <span class="n">i</span><span class="p">}</span>
<span class="k">end</span>

<span class="n">jukugo</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3662/addtag/" class="addtag" id="addtag_3662">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/Ruby1.8.5/">Ruby1.8.5</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3662/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3662/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3662"
  >-</span><span
  class="button yellow"
  id="rating_z_3662"
  >0</span><span 
  class="button green"
  id="rating_p_3662"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3662/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3662/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3663">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/">#3663</a>(<script language="JavaScript">print_time(new Date("2007/11/02 10:40 GMT"));</script><noscript>2007/11/02 10:40 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>なぜ4人とも結果が違うのかがむしろ新たな問題になっちゃうかも(笑
ソースコードは公開されていますし。

とりあえず僕のコードも公開することにします。
変数dataにユニコード文字列のリストが入っています。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37</pre></td><td class="code"><div class="highlight"><pre><span class="n">starts</span> <span class="o">=</span> <span class="n">set</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">data</span><span class="p">)</span>
<span class="n">ends</span> <span class="o">=</span> <span class="n">set</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">data</span><span class="p">)</span>

<span class="k">from</span> <span class="nn">collections</span> <span class="k">import</span> <span class="n">defaultdict</span>
<span class="n">start_dict</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="n">end_dict</span> <span class="o">=</span> <span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

<span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
    <span class="n">start_dict</span><span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>
    <span class="n">end_dict</span><span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="mi">3</span><span class="p">]]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">w</span><span class="p">)</span>

<span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">start_dict</span><span class="p">:</span>
    <span class="n">starts</span> <span class="o">=</span> <span class="n">start_dict</span><span class="p">[</span><span class="n">s</span><span class="p">]</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">starts</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span> <span class="k">continue</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">end_dict</span><span class="p">:</span>
        <span class="n">ends</span> <span class="o">=</span> <span class="n">end_dict</span><span class="p">[</span><span class="n">e</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">ends</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span> <span class="k">continue</span>
        <span class="n">heads</span> <span class="o">=</span> <span class="p">[</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="n">ends</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">w</span> <span class="o">=</span> <span class="n">starts</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
            <span class="n">tail</span> <span class="o">=</span> <span class="n">w</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">tail</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">heads</span><span class="p">:</span> <span class="k">continue</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                <span class="n">w2</span> <span class="o">=</span> <span class="n">starts</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
                <span class="n">tail2</span> <span class="o">=</span> <span class="n">w2</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">tail</span> <span class="o">==</span> <span class="n">tail2</span><span class="p">:</span> <span class="k">continue</span>
                <span class="k">if</span> <span class="n">tail2</span> <span class="ow">in</span> <span class="n">heads</span><span class="p">:</span>
                    <span class="n">w3</span> <span class="o">=</span> <span class="n">ends</span><span class="p">[</span><span class="n">heads</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">tail</span><span class="p">)]</span>
                    <span class="n">w4</span> <span class="o">=</span> <span class="n">ends</span><span class="p">[</span><span class="n">heads</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">tail2</span><span class="p">)]</span>
                    <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">print</span> <span class="n">w</span>
                    <span class="k">print</span> <span class="s">u&quot;</span><span class="si">%s</span><span class="s">　　</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">w2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">w3</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> 
                    <span class="k">print</span> <span class="s">u&quot;</span><span class="si">%s</span><span class="s">　　</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">w2</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">w3</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> 
                    <span class="k">print</span> <span class="n">w4</span>
                    <span class="k">print</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/addtag/" class="addtag" id="addtag_3663">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3663"
  >-</span><span
  class="button yellow"
  id="rating_z_3663"
  >0</span><span 
  class="button green"
  id="rating_p_3663"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3662/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3663/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3664">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3664/">#3664</a>(<script language="JavaScript">print_time(new Date("2007/11/02 10:55 GMT"));</script><noscript>2007/11/02 10:55 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>僕のコードも30～31行目あたり手抜きなので
もう一度きちんと考える必要がありそうだ…
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3664/addtag/" class="addtag" id="addtag_3664">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3664"
  >-</span><span
  class="button yellow"
  id="rating_z_3664"
  >0</span><span 
  class="button green"
  id="rating_p_3664"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3663/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3664/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3664/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  

  
    





<div class="comment" id="comment3665">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3665/">#3665</a>(<script language="JavaScript">print_time(new Date("2007/11/02 11:06 GMT"));</script><noscript>2007/11/02 11:06 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/vbnet/">
	  VB.net
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  　コマンドライン引数に、四字熟語を改行で区切って列挙したファイルのパスを指定したものとします。ファイルのパスは複数指定可です。文字コードはUnicodeです。<br/>出力例に含まれる四字熟語を列挙したファイルでは一瞬で例と同じ出力結果が得られました。<br/>　今、ダウンロードしたサンプルを上記形式に加工したファイルを読み込ませて実行しているのですが、待てど暮らせど終わりません。もう1時間程経ってます。<br/>　VB.net一番乗り狙って投稿します。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63</pre></td><td class="code"><div class="highlight"><pre><span class="k">Module</span> <span class="n">Module1</span>

    <span class="k">Sub</span> <span class="n">Main</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">args</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span> <span class="c">&#39;引数に四字熟語をCRLFで区切り列挙したテキストファイルを指定。文字コードはUnicode。ファイルは複数指定可能。</span>
        <span class="k">Dim</span> <span class="n">Ticks</span> <span class="ow">As</span> <span class="kt">Long</span> <span class="o">=</span> <span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span>
        <span class="k">Dim</span> <span class="n">JukugoList</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">)</span> <span class="c">&#39;四字熟語のリスト  </span>
        <span class="c">&#39;四字熟語リストの読み込みループ</span>
        <span class="k">For</span> <span class="k">Each</span> <span class="n">CmdLine</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">args</span>
            <span class="n">JukugoList</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">ReadAllLines</span><span class="p">(</span><span class="n">CmdLine</span><span class="p">))</span>
        <span class="k">Next</span>
        <span class="n">JukugoPuzul</span><span class="p">(</span><span class="n">JukugoList</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span> <span class="o">-</span> <span class="n">Ticks</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">()</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Private</span> <span class="k">Sub</span> <span class="n">JukugoPuzul</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">JukugoList</span> <span class="ow">As</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">))</span>
        <span class="k">Dim</span> <span class="n">Kouho</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">())</span>
        <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoTop</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;上</span>
            <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoRight</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;右</span>
                <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoBottom</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;下</span>
                    <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoLeft</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;左</span>
                        <span class="k">If</span> <span class="n">JukugoTop</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">JukugoRight</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">AndAlso</span> <span class="n">_</span>
                        <span class="n">JukugoRight</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">JukugoBottom</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">AndAlso</span> <span class="n">_</span>
                        <span class="n">JukugoBottom</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">JukugoLeft</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">AndAlso</span> <span class="n">_</span>
                        <span class="n">JukugoLeft</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="n">JukugoTop</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">Then</span>
                            <span class="k">If</span> <span class="n">JukugoTop</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&gt;</span> <span class="n">JukugoBottom</span><span class="p">.</span><span class="n">Substring</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">Then</span> <span class="c">&#39;右上隅の漢字と左下隅の漢字は異なるものでなければいけません。</span>
                                <span class="k">Dim</span> <span class="n">Group</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="p">{</span><span class="n">JukugoTop</span><span class="p">,</span> <span class="n">JukugoRight</span><span class="p">,</span> <span class="n">JukugoBottom</span><span class="p">,</span> <span class="n">JukugoLeft</span><span class="p">}</span>
                                <span class="k">If</span> <span class="n">ChofukuCheck</span><span class="p">(</span><span class="n">Kouho</span><span class="p">,</span> <span class="n">Group</span><span class="p">)</span> <span class="k">Then</span>
                                    <span class="n">OutPut</span><span class="p">(</span><span class="n">Group</span><span class="p">)</span>
                                    <span class="n">Kouho</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Group</span><span class="p">)</span>
                                <span class="k">End</span> <span class="k">If</span>
                            <span class="k">End</span> <span class="k">If</span>
                        <span class="k">End</span> <span class="k">If</span>
                    <span class="k">Next</span>
                <span class="k">Next</span>
            <span class="k">Next</span>
        <span class="k">Next</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Private</span> <span class="k">Function</span> <span class="n">ChofukuCheck</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">List</span> <span class="ow">As</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">()),</span> <span class="k">ByVal</span> <span class="n">Kouho</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">())</span> <span class="ow">As</span> <span class="kt">Boolean</span>
        <span class="k">For</span> <span class="k">Each</span> <span class="n">Group</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">()</span> <span class="ow">In</span> <span class="n">List</span>
            <span class="k">Dim</span> <span class="n">Count</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">For</span> <span class="k">Each</span> <span class="n">Jukugo</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">Group</span>
                <span class="k">For</span> <span class="k">Each</span> <span class="n">Jukugo1</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">Kouho</span>
                    <span class="k">If</span> <span class="n">Jukugo</span> <span class="o">=</span> <span class="n">Jukugo1</span> <span class="k">Then</span>
                        <span class="n">Count</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">End</span> <span class="k">If</span>
                <span class="k">Next</span>
            <span class="k">Next</span>
            <span class="k">If</span> <span class="n">Count</span> <span class="o">=</span> <span class="mi">4</span> <span class="k">Then</span>
                <span class="k">Return</span> <span class="k">False</span>
            <span class="k">End</span> <span class="k">If</span>
        <span class="k">Next</span>
        <span class="k">Return</span> <span class="k">True</span>
    <span class="k">End</span> <span class="k">Function</span>

    <span class="k">Private</span> <span class="k">Sub</span> <span class="n">OutPut</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">Group</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">&quot;　　&quot;</span> <span class="o">&amp;</span> <span class="n">Group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">&quot;　　&quot;</span> <span class="o">&amp;</span> <span class="n">Group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">vbCrLf</span><span class="p">)</span>
    <span class="k">End</span> <span class="k">Sub</span>

<span class="k">End</span> <span class="k">Module</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3665/addtag/" class="addtag" id="addtag_3665">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/VB.NET2005/">VB.NET2005</a>
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/VB2005/">VB2005</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/vbnet/">
		VB.net
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3665/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3665/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3665"
  >-</span><span
  class="button yellow"
  id="rating_z_3665"
  >0</span><span 
  class="button green"
  id="rating_p_3665"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3665/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3665/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3666">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3666/">#3666</a>(<script language="JavaScript">print_time(new Date("2007/11/02 11:17 GMT"));</script><noscript>2007/11/02 11:17 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>やっぱりガチムチにFor Eachの4重ネストで総当り判定してるのが遅い原因でしょうか…。
まだ終わりません…。CPUは2GHz、デバッグモードで実行してます。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3666/addtag/" class="addtag" id="addtag_3666">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3666"
  >-</span><span
  class="button yellow"
  id="rating_z_3666"
  >0</span><span 
  class="button green"
  id="rating_p_3666"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3665/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3666/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3666/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3667">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3667/">#3667</a>(<script language="JavaScript">print_time(new Date("2007/11/02 12:53 GMT"));</script><noscript>2007/11/02 12:53 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/vbnet/">
	  VB.net
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  　高速化しました。<br/>サンプル(重複あり)8,582件<br/>結果12,117件<br/>CPU2.0GHz　610秒orz
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70</pre></td><td class="code"><div class="highlight"><pre><span class="k">Module</span> <span class="n">Module1</span>

    <span class="k">Sub</span> <span class="n">Main</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">args</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span> <span class="c">&#39;引数に四字熟語をCRLFで区切り列挙したテキストファイルを指定。文字コードはUnicode。ファイルは複数指定可能。</span>
        <span class="k">Dim</span> <span class="n">Ticks</span> <span class="ow">As</span> <span class="kt">Long</span> <span class="o">=</span> <span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span>
        <span class="k">Dim</span> <span class="n">JukugoList</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">)</span> <span class="c">&#39;四字熟語のリスト  </span>
        <span class="c">&#39;四字熟語リストの読み込みループ</span>
        <span class="k">For</span> <span class="k">Each</span> <span class="n">CmdLine</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">args</span>
            <span class="n">JukugoList</span><span class="p">.</span><span class="n">AddRange</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">ReadAllLines</span><span class="p">(</span><span class="n">CmdLine</span><span class="p">))</span>
        <span class="k">Next</span>
        <span class="n">JukugoPuzul</span><span class="p">(</span><span class="n">JukugoList</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">((</span><span class="n">Now</span><span class="p">.</span><span class="n">Ticks</span> <span class="o">-</span> <span class="n">Ticks</span><span class="p">)</span> <span class="o">/</span> <span class="mi">10000000L</span> <span class="o">&amp;</span> <span class="s">&quot;秒&quot;</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">ReadKey</span><span class="p">()</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Private</span> <span class="k">Sub</span> <span class="n">JukugoPuzul</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">JukugoList</span> <span class="ow">As</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">))</span>
        <span class="k">Dim</span> <span class="n">Kouho</span> <span class="ow">As</span> <span class="k">New</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">())</span>
        <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoTop</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;上</span>
            <span class="k">Dim</span> <span class="n">Top</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">JukugoTop</span><span class="p">.</span><span class="n">ToCharArray</span>
            <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoRight</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;右</span>
                <span class="k">Dim</span> <span class="n">Right</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">JukugoRight</span><span class="p">.</span><span class="n">ToCharArray</span>
                <span class="k">If</span> <span class="n">Top</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="n">Right</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">Then</span>
                    <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoBottom</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;下</span>
                        <span class="k">Dim</span> <span class="n">Bottom</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">JukugoBottom</span><span class="p">.</span><span class="n">ToCharArray</span>
                        <span class="k">If</span> <span class="n">Right</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">=</span> <span class="n">Bottom</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="k">Then</span>
                            <span class="k">For</span> <span class="k">Each</span> <span class="n">JukugoLeft</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">JukugoList</span> <span class="c">&#39;左</span>
                                <span class="k">Dim</span> <span class="n">Left</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">Char</span> <span class="o">=</span> <span class="n">JukugoLeft</span><span class="p">.</span><span class="n">ToCharArray</span>
                                <span class="k">If</span> <span class="n">Bottom</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">Left</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="ow">AndAlso</span> <span class="n">_</span>
                                <span class="n">Left</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="o">=</span> <span class="n">Top</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">Then</span>
                                    <span class="k">If</span> <span class="n">Top</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&gt;</span> <span class="n">Bottom</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="k">Then</span> <span class="c">&#39;右上隅の漢字と左下隅の漢字は異なるものでなければいけません。</span>
                                        <span class="k">Dim</span> <span class="n">Group</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="p">{</span><span class="n">JukugoTop</span><span class="p">,</span> <span class="n">JukugoRight</span><span class="p">,</span> <span class="n">JukugoBottom</span><span class="p">,</span> <span class="n">JukugoLeft</span><span class="p">}</span>
                                        <span class="k">If</span> <span class="n">ChofukuCheck</span><span class="p">(</span><span class="n">Kouho</span><span class="p">,</span> <span class="n">Group</span><span class="p">)</span> <span class="k">Then</span>
                                            <span class="n">OutPut</span><span class="p">(</span><span class="n">Group</span><span class="p">)</span>
                                            <span class="n">Kouho</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Group</span><span class="p">)</span>
                                        <span class="k">End</span> <span class="k">If</span>
                                    <span class="k">End</span> <span class="k">If</span>
                                <span class="k">End</span> <span class="k">If</span>
                            <span class="k">Next</span>
                        <span class="k">End</span> <span class="k">If</span>
                    <span class="k">Next</span>
                <span class="k">End</span> <span class="k">If</span>
            <span class="k">Next</span>
        <span class="k">Next</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Kouho</span><span class="p">.</span><span class="n">Count</span> <span class="o">&amp;</span> <span class="s">&quot;組の組み合わせがありました。&quot;</span><span class="p">)</span>
    <span class="k">End</span> <span class="k">Sub</span>

    <span class="k">Private</span> <span class="k">Function</span> <span class="n">ChofukuCheck</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">List</span> <span class="ow">As</span> <span class="n">List</span><span class="p">(</span><span class="k">Of</span> <span class="kt">String</span><span class="p">()),</span> <span class="k">ByVal</span> <span class="n">Kouho</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">())</span> <span class="ow">As</span> <span class="kt">Boolean</span>
        <span class="k">For</span> <span class="k">Each</span> <span class="n">Group</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">()</span> <span class="ow">In</span> <span class="n">List</span>
            <span class="k">Dim</span> <span class="n">Count</span> <span class="ow">As</span> <span class="kt">Integer</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">For</span> <span class="k">Each</span> <span class="n">Jukugo</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">Group</span>
                <span class="k">For</span> <span class="k">Each</span> <span class="n">Jukugo1</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">Kouho</span>
                    <span class="k">If</span> <span class="n">Jukugo</span> <span class="o">=</span> <span class="n">Jukugo1</span> <span class="k">Then</span>
                        <span class="n">Count</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">End</span> <span class="k">If</span>
                <span class="k">Next</span>
            <span class="k">Next</span>
            <span class="k">If</span> <span class="n">Count</span> <span class="o">=</span> <span class="mi">4</span> <span class="k">Then</span>
                <span class="k">Return</span> <span class="k">False</span>
            <span class="k">End</span> <span class="k">If</span>
        <span class="k">Next</span>
        <span class="k">Return</span> <span class="k">True</span>
    <span class="k">End</span> <span class="k">Function</span>

    <span class="k">Private</span> <span class="k">Sub</span> <span class="n">OutPut</span><span class="p">(</span><span class="k">ByVal</span> <span class="n">Group</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">&quot;　　&quot;</span> <span class="o">&amp;</span> <span class="n">Group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="s">&quot;　　&quot;</span> <span class="o">&amp;</span> <span class="n">Group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="n">Substring</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">Group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">vbCrLf</span><span class="p">)</span>
    <span class="k">End</span> <span class="k">Sub</span>

<span class="k">End</span> <span class="k">Module</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3667/addtag/" class="addtag" id="addtag_3667">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/VB.net/">VB.net</a>
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/VB2005/">VB2005</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/vbnet/">
		VB.net
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3667/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3667/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3667"
  >-</span><span
  class="button yellow"
  id="rating_z_3667"
  >0</span><span 
  class="button green"
  id="rating_p_3667"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3667/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3667/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3681">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3681/">#3681</a>(<script language="JavaScript">print_time(new Date("2007/11/02 22:47 GMT"));</script><noscript>2007/11/02 22:47 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  重複無しの8312件を食わせて走らせてみました。<br/>OS:Windows&nbsp;XP&nbsp;Home&nbsp;SP2<br/>CPU:AMD&nbsp;Sempron&nbsp;3400+&nbsp;1.99GHz<br/>メモリ:480MB<br/>処理時間:507.078125秒<br/>件数:12117件<br/><br/>　組み合わせた後に重複チェックをしているので、元データの重複は件数に影響しないようです。<br/>　僕は<br/>&gt;四角く配置することのできる熟語の組み合わせを探すプログラム<br/>と言うところに着目して、同じ熟語の組み合わせなら、四角に組む順番が違っても同一の組み合わせと判断して結果から除いています。<br/>　もっと厳密に定義をすれば件数が揃うんじゃないでしょうか。<br/>　それよりも、この桁違いの遅さは何なんでしょうorz&nbsp;.NETだからって極端に遅いって事も無いと思うのですが…。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3681/addtag/" class="addtag" id="addtag_3681">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3681"
  >-</span><span
  class="button yellow"
  id="rating_z_3681"
  >0</span><span 
  class="button green"
  id="rating_p_3681"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3667/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3681/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3681/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3681/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4077">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/4077/">#4077</a>(<script language="JavaScript">print_time(new Date("2007/11/15 15:24 GMT"));</script><noscript>2007/11/15 15:24 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>　同じアルゴリズムでJavaでも書いてみました。更に遅くなりました。コード晒すの恥ずかしくなってきました…。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">class</span> <span class="nc">YojijukugoPuzul</span><span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[]){</span>    
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">[]&gt;</span> <span class="n">ans</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">[]&gt;();</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">jukugoList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="c">//読み込み</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
                <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
                    <span class="n">String</span> <span class="n">str</span><span class="o">;</span>
                    <span class="k">if</span><span class="o">((</span><span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
                    <span class="k">else</span> <span class="n">jukugoList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="n">IOException</span> <span class="n">err</span><span class="o">){</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">err</span><span class="o">);}</span>
        
        <span class="c">//組み合わせ探索</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">top</span> <span class="o">:</span> <span class="n">jukugoList</span><span class="o">){</span> <span class="c">//top</span>
            <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">right</span> <span class="o">:</span> <span class="n">jukugoList</span><span class="o">){</span> <span class="c">//right</span>
                <span class="k">if</span><span class="o">(</span><span class="n">top</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">==</span> <span class="n">right</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)){</span>
                    <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">bottom</span> <span class="o">:</span> <span class="n">jukugoList</span><span class="o">){</span> <span class="c">//bottom</span>
                        <span class="k">if</span><span class="o">((</span><span class="n">right</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">==</span> <span class="n">bottom</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">3</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">top</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">3</span><span class="o">)</span> <span class="o">!=</span> <span class="n">bottom</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">))){</span>
                            <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">left</span> <span class="o">:</span> <span class="n">jukugoList</span><span class="o">){</span> <span class="c">//left</span>
                                <span class="k">if</span><span class="o">((</span><span class="n">bottom</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">left</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">3</span><span class="o">))</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">left</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">==</span> <span class="n">top</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">))){</span>
                                    <span class="n">String</span><span class="o">[]</span> <span class="n">check</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="n">top</span><span class="o">,</span><span class="n">right</span><span class="o">,</span><span class="n">bottom</span><span class="o">,</span><span class="n">left</span><span class="o">};</span>
                                    <span class="k">if</span><span class="o">(</span> <span class="o">!</span><span class="n">isChofuku</span><span class="o">(</span><span class="n">check</span><span class="o">,</span><span class="n">ans</span><span class="o">)</span> <span class="o">){</span>
                                        <span class="n">ans</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">check</span><span class="o">);</span>
                                        <span class="c">//出力</span>
                                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">check</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
                                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">check</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;　　&quot;</span> <span class="o">+</span> <span class="n">check</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">));</span>
                                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">check</span><span class="o">[</span><span class="mi">3</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;　　&quot;</span> <span class="o">+</span> <span class="n">check</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">));</span>
                                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">check</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>
                                        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
                                    <span class="o">}</span>
                                <span class="o">}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="c">//出力</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
        <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">((</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;ms&quot;</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="c">//組み合わせの重複をチェック</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Boolean</span> <span class="n">isChofuku</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">check</span> <span class="o">,</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">[]&gt;</span> <span class="n">ans</span><span class="o">){</span>
        <span class="k">for</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">str</span> <span class="o">:</span> <span class="n">ans</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">str_</span> <span class="o">:</span> <span class="n">check</span><span class="o">){</span>
                <span class="k">for</span><span class="o">(</span><span class="n">String</span> <span class="n">str__</span> <span class="o">:</span> <span class="n">str</span><span class="o">){</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">str__</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">str_</span><span class="o">)){</span>
                        <span class="n">count</span><span class="o">++;</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">4</span><span class="o">){</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/4077/addtag/" class="addtag" id="addtag_4077">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/4077/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/4077/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4077"
  >-</span><span
  class="button yellow"
  id="rating_z_4077"
  >0</span><span 
  class="button green"
  id="rating_p_4077"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3681/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/4077/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/4077/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment3668">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3668/">#3668</a>(<script language="JavaScript">print_time(new Date("2007/11/02 13:09 GMT"));</script><noscript>2007/11/02 13:09 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>12107件でした。kozimaさんと近いですね。
Athlon64 3000,メモリ1G,WinXPで出力含め１５秒ほどでした。

ちなみに、Scalaのforはモナドのための記法として扱えます。
HashMap#getはOptionといういわゆるMaybeモナドですのでシンプルに書けます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></td><td class="code"><div class="highlight"><pre>import scala.io.Source.fromFile
import scala.collection.mutable.{HashMap,LinkedHashSet}

object JukugoPazzule {
  type S = LinkedHashSet[String]
  val jukugos = fromFile(&quot;kanji_uniq.txt&quot;).getLines.toList
  val headMap = (new HashMap[Char, S]() /: jukugos){(map, jukugo) =&gt; 
    map.getOrElseUpdate(jukugo(0), new S) += jukugo; map
  }

  def solve = {
    var i = 0
    var uniqChekMap = new S
    for(j1 &lt;- jukugos;
        jlst2 &lt;- headMap.get(j1(0));
        j2 &lt;- jlst2 if j2 != j1;
        jlst3 &lt;- headMap.get(j1(3));
        j3 &lt;- jlst3 if j3!=j2 &amp;&amp; j3!=j1 &amp;&amp; j1(3)!=j2(3);
        jlst4 &lt;- headMap.get(j2(3));
        j4 &lt;- jlst4 if j4!=j3 &amp;&amp; j4!=j2 &amp;&amp; j4!=j1 &amp;&amp; j4(3)==j3(3)
    ) {
      var all = List(j1,j2,j3,j4).sort(_&lt;_).mkString(&quot;&quot;)
      if(!uniqChekMap.contains(all)) {
        print(j1)
        (1 to 2).foreach{i =&gt; println(j2(i)+&quot;    &quot;+j3(i))}
        println(j4)
        println(&quot;-----------------------&quot;)
        i = i+1
        uniqChekMap += all
      }
    }
    println(i)
  }
}

JukugoPazzule.solve
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3668/addtag/" class="addtag" id="addtag_3668">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3668/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3668/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3668"
  >-</span><span
  class="button yellow"
  id="rating_z_3668"
  >0</span><span 
  class="button green"
  id="rating_p_3668"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3668/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3669">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/110/" target="_top">shin</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3669/">#3669</a>(<script language="JavaScript">print_time(new Date("2007/11/02 13:38 GMT"));</script><noscript>2007/11/02 13:38 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>熟語データはeuc-jpのin.txt

Celeron2.4GHzで8.6秒ほどかかって12118件でした。

40行目は鏡像のチェックです</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">use</span> <span class="n">encoding</span> <span class="s">&#39;euc-jp&#39;</span><span class="p">;</span>

<span class="nb">open</span><span class="p">(</span> <span class="k">my</span> <span class="nv">$file</span><span class="p">,</span> <span class="s">&quot;&lt;:encoding(euc-jp)&quot;</span><span class="p">,</span> <span class="s">&quot;in.txt&quot;</span> <span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">@words</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">%left_right_list</span><span class="p">;</span>    <span class="c1">#1文字目をキーにしたテーブル</span>
<span class="k">my</span> <span class="nv">%bottom_list</span><span class="p">;</span>        <span class="c1">#1,4文字目をキーにしたテーブル</span>
<span class="k">for</span> <span class="k">my</span> <span class="nv">$word</span> <span class="p">(</span><span class="o">&lt;</span><span class="nv">$file</span><span class="o">&gt;</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nb">chomp</span> <span class="nv">$word</span><span class="p">;</span>
    <span class="nb">push</span> <span class="nv">@words</span><span class="p">,</span> <span class="nv">$word</span><span class="p">;</span>
    <span class="k">my</span> <span class="p">(</span> <span class="nv">$char_0</span><span class="p">,</span> <span class="nv">$char_3</span> <span class="p">)</span> <span class="o">=</span> <span class="p">(</span> <span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="nv">$word</span> <span class="p">)[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span> <span class="p">];</span>
    <span class="nb">push</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$left_right_list</span><span class="p">{</span><span class="nv">$char_0</span><span class="p">}</span> <span class="p">},</span> <span class="nv">$word</span><span class="p">;</span>
    <span class="nb">push</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$bottom_list</span><span class="p">{</span><span class="s">&quot;$char_0$char_3&quot;</span><span class="p">}</span> <span class="p">},</span> <span class="nv">$word</span><span class="p">;</span>
<span class="p">}</span>
<span class="nb">close</span> <span class="nv">$file</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$counter</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">%seen</span><span class="p">;</span>
<span class="k">for</span> <span class="k">my</span> <span class="nv">$top</span> <span class="p">(</span><span class="nv">@words</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">my</span> <span class="p">(</span> <span class="nv">$top_char_0</span><span class="p">,</span> <span class="nv">$top_char_3</span> <span class="p">)</span> <span class="o">=</span> <span class="p">(</span> <span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="nv">$top</span> <span class="p">)[</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">3</span> <span class="p">];</span>

    <span class="k">for</span> <span class="k">my</span> <span class="nv">$left</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$left_right_list</span><span class="p">{</span><span class="nv">$top_char_0</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
    <span class="p">{</span>
        <span class="k">next</span> <span class="k">if</span> <span class="nv">$top</span> <span class="ow">eq</span> <span class="nv">$left</span><span class="p">;</span>
        <span class="k">my</span> <span class="nv">$left_char_3</span> <span class="o">=</span> <span class="nb">substr</span> <span class="nv">$left</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">next</span> <span class="k">if</span> <span class="nv">$top_char_3</span> <span class="ow">eq</span> <span class="nv">$left_char_3</span><span class="p">;</span>

        <span class="k">for</span> <span class="k">my</span> <span class="nv">$right</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$left_right_list</span><span class="p">{</span><span class="nv">$top_char_3</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
        <span class="p">{</span>
            <span class="k">my</span> <span class="nv">$right_char_3</span> <span class="o">=</span> <span class="nb">substr</span> <span class="nv">$right</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">;</span>

            <span class="k">for</span> <span class="k">my</span> <span class="nv">$bottom</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$bottom_list</span><span class="p">{</span><span class="s">&quot;$left_char_3$right_char_3&quot;</span><span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
            <span class="p">{</span>
                <span class="k">next</span> <span class="k">if</span> <span class="nv">$seen</span><span class="p">{</span><span class="s">&quot;$left$top$bottom$right&quot;</span><span class="p">};</span>
                <span class="nv">$seen</span><span class="p">{</span><span class="s">&quot;$top$left$right$bottom&quot;</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
                <span class="k">print</span> <span class="s">&quot;$top $left $right $bottom\n&quot;</span><span class="p">;</span>
                <span class="k">print</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$left</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">),</span> <span class="s">&quot;　&quot;</span><span class="p">,</span> <span class="s">&quot;　&quot;</span><span class="p">,</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$right</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span> <span class="p">),</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
                <span class="k">print</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$left</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="p">),</span> <span class="s">&quot;　&quot;</span><span class="p">,</span> <span class="s">&quot;　&quot;</span><span class="p">,</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$right</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span> <span class="p">),</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
                <span class="k">print</span> <span class="s">&quot;$bottom\n&quot;</span><span class="p">;</span>
                <span class="k">print</span> <span class="s">&quot;--------\n&quot;</span><span class="p">;</span>
                <span class="nv">$counter</span><span class="o">++</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">print</span> <span class="s">&quot;$counter\n&quot;</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3669/addtag/" class="addtag" id="addtag_3669">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3669/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3669/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3669"
  >-</span><span
  class="button yellow"
  id="rating_z_3669"
  >0</span><span 
  class="button green"
  id="rating_p_3669"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3669/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3669/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3706">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3706/">#3706</a>(<script language="JavaScript">print_time(new Date("2007/11/05 05:40 GMT"));</script><noscript>2007/11/05 05:40 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>重複がありますね。
雲竜風虎　雲蒸竜変　変成男子　虎穴虎子
などは4回，
千秋万歳　千秋万古　古琴之友　歳寒三友 
などは8回重複しています。
これらをそれぞれ1回と数えれば，
12118
個のようです。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3706/addtag/" class="addtag" id="addtag_3706">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3706"
  >-</span><span
  class="button yellow"
  id="rating_z_3706"
  >0</span><span 
  class="button green"
  id="rating_p_3706"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3669/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3706/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3706/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3706/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3720">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/110/" target="_top">shin</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3720/">#3720</a>(<script language="JavaScript">print_time(new Date("2007/11/06 03:48 GMT"));</script><noscript>2007/11/06 03:48 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>これは私の#3669に対してでしょうか？手元でもう一度処理してみましたが、重複は出ませんでした。

＃書いていませんでしたが元データは重複を排除してある物を前提にしていたので、そのせいでしょうか？</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3720/addtag/" class="addtag" id="addtag_3720">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3720"
  >-</span><span
  class="button yellow"
  id="rating_z_3720"
  >0</span><span 
  class="button green"
  id="rating_p_3720"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3706/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3720/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3720/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  
    





<div class="comment" id="comment3671">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3671/">#3671</a>(<script language="JavaScript">print_time(new Date("2007/11/02 15:49 GMT"));</script><noscript>2007/11/02 15:49 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>set()で重複を除いて、12118件の組み合わせ
となりました。shift_jisコーデックだとデコード
エラーになったので、cp932でデコード。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">codecs</span>

<span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">words</span><span class="p">):</span>
    <span class="n">table</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">table</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[])</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">itervalues</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">i1</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">i2</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">i1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
                <span class="n">c1</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">c2</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i2</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="k">for</span> <span class="n">word1</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="p">[]):</span>
                    <span class="k">for</span> <span class="n">word2</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="p">[]):</span>
                        <span class="k">if</span> <span class="n">word1</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">word2</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                            <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">ans</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">set</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">codecs</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;a.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="s">&quot;cp932&quot;</span><span class="p">):</span>
        <span class="n">word</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;not 4 length word: &quot;</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
        <span class="n">words</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">print</span> <span class="n">count</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3671/addtag/" class="addtag" id="addtag_3671">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3671/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3671/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3671"
  >-</span><span
  class="button yellow"
  id="rating_z_3671"
  >0</span><span 
  class="button green"
  id="rating_p_3671"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3671/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3671/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3672">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3672/">#3672</a>(<script language="JavaScript">print_time(new Date("2007/11/02 15:51 GMT"));</script><noscript>2007/11/02 15:51 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ログインしてなかったので改めて投稿。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">codecs</span>

<span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">words</span><span class="p">):</span>
    <span class="n">table</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">words</span><span class="p">:</span>
        <span class="n">table</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">word</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[])</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="n">ans</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">words</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">itervalues</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">i1</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">i2</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">i1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">words</span><span class="p">)):</span>
                <span class="n">c1</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i1</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="n">c2</span> <span class="o">=</span> <span class="n">words</span><span class="p">[</span><span class="n">i2</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                <span class="k">if</span> <span class="n">c1</span> <span class="o">==</span> <span class="n">c2</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="k">for</span> <span class="n">word1</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="p">[]):</span>
                    <span class="k">for</span> <span class="n">word2</span> <span class="ow">in</span> <span class="n">table</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="p">[]):</span>
                        <span class="k">if</span> <span class="n">word1</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">word2</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
                            <span class="n">ans</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">ans</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">words</span> <span class="o">=</span> <span class="n">set</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">codecs</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&quot;a.txt&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="s">&quot;cp932&quot;</span><span class="p">):</span>
        <span class="n">word</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">word</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">4</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;not 4 length word: &quot;</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
        <span class="n">words</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">print</span> <span class="n">count</span><span class="p">(</span><span class="n">words</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3672/addtag/" class="addtag" id="addtag_3672">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3672/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3672/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3672"
  >-</span><span
  class="button yellow"
  id="rating_z_3672"
  >0</span><span 
  class="button green"
  id="rating_p_3672"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3671/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3672/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3672/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  
    





<div class="comment" id="comment3675">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3675/">#3675</a>(<script language="JavaScript">print_time(new Date("2007/11/02 16:49 GMT"));</script><noscript>2007/11/02 16:49 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>重複なしの8312単語，utf-8 でソートしたもの

9080個の解が見つかったというのだが（少ない?）

1.33GH PowerPC G4

&gt; system.time(foo())
1 1 180 一上一下 一期四相 相利共生 下化衆生 
2 1 300 一上一下 一貧一富 富貴利達 下学上達 
3 2 175 一世一度 一朝之忿 忿忿之心 度衆生心 
4 2 245 一世一度 一筆啓上 上下一心 度衆生心 
5 2 268 一世一度 一草一木 木人石心 度衆生心 
6 4 21 一世之雄 一入再入 入室升堂 雄気堂堂 
　　　途中省略
071 8153 8158 鬼手仏心 鬼面仏心 心煩意乱 心狂意乱 
9072 8153 8158 鬼手仏心 鬼面仏心 心融神会 心領意会 
9073 8153 8158 鬼手仏心 鬼面仏心 心融神会 心領神会 
9074 8153 8158 鬼手仏心 鬼面仏心 心領意会 心領神会 
9075 8153 8159 鬼手仏心 鬼面嚇人 人人具足 心満意足 
9076 8157 8158 鬼臉嚇人 鬼面仏心 心満意足 人給家足 
9077 8157 8159 鬼臉嚇人 鬼面嚇人 人人具足 人給家足 
9078 8158 8159 鬼面仏心 鬼面嚇人 人人具足 心満意足 
9079 8185 8186 魯魚帝虎 魯魚烏焉 焉馬之誤 虎虚之誤 
9080 8223 8225 鴻門玉斗 鴻鵠之志 志士仁人 斗南一人 
m = 9080 
   ユーザ   システム       経過  
  1676.849    582.988   2544.118 
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre>foo &lt;- function() {
    x &lt;- read.table(&quot;yojijukugo.txt&quot;, header=FALSE, as.is=TRUE)
    y &lt;- unique(sort(x[,2]))
    n &lt;- length(y)
    w &lt;- sapply(y, function(i) unlist(strsplit(i, &quot;&quot;)))
    h &lt;- w[1,]
    t &lt;- w[4,]
    head &lt;- unique(h)
    nh &lt;- length(head)
    m &lt;- 0
    for (i0 in 1:nh) { # for (i0 in 1:nh)
        h12 &lt;- which(h == head[i0])
        lh12 &lt;- length(h12)
        if (lh12 == 1) next
        a &lt;- combn(lh12, 2)
        for (ia in 1:ncol(a)) {
            i1 &lt;- h12[a[1,ia]]
            i2 &lt;- h12[a[2,ia]]
            ki3 &lt;- which(h == t[i2])
            ki4 &lt;- which(h == t[i1])
            x &lt;- outer(t[ki3], t[ki4], &quot;==&quot;)
            x[lower.tri(x, diag=TRUE)] &lt;- FALSE
            x &lt;- which(x, arr.ind=TRUE)
            if (nrow(x) == 0) next
            for (ib in 1:nrow(x)) {
                i3 &lt;- ki3[x[ib, 1]]
                i4 &lt;- ki4[x[ib, 2]]
                m &lt;- m+1
                cat(m, i1, i2, y[c(i1, i2, i3, i4)], &quot;\n&quot;)
            }
        }
    }
    cat(&quot;m =&quot;,m,&quot;\n&quot;)
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3675/addtag/" class="addtag" id="addtag_3675">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3675/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3675/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3675"
  >-</span><span
  class="button yellow"
  id="rating_z_3675"
  >0</span><span 
  class="button green"
  id="rating_p_3675"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3675/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3675/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3707">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3707/">#3707</a>(<script language="JavaScript">print_time(new Date("2007/11/05 09:19 GMT"));</script><noscript>2007/11/05 09:19 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>重複防止が間違えていました

16864件でした

12118件とする解と比較してみると，1文字目と4文字目が同じでも別の熟語を拾えているようです。

愛屋及烏
及　　合
屋　　之
烏集之衆
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>foo &lt;- function() {
    x &lt;- read.table(&quot;yojijukugo.txt&quot;, header=FALSE, as.is=TRUE)
    y &lt;- unique(sort(x[,2]))
    n &lt;- length(y)
    w &lt;- sapply(y, function(i) unlist(strsplit(i, &quot;&quot;)))
    h &lt;- w[1,]
    t &lt;- w[4,]
    head &lt;- unique(h)
    nh &lt;- length(head)
    m &lt;- 0
    for (i0 in 1:nh) { # for (i0 in 1:nh)
        h12 &lt;- which(h == head[i0])
        lh12 &lt;- length(h12)
        if (lh12 == 1) next
        a &lt;- combn(lh12, 2)
        for (ia in 1:ncol(a)) {
            i1 &lt;- h12[a[1,ia]]
            i2 &lt;- h12[a[2,ia]]
            ki3 &lt;- which(h == t[i2])
            ki4 &lt;- which(h == t[i1])
            x &lt;- outer(t[ki3], t[ki4], &quot;==&quot;)
            x &lt;- which(x, arr.ind=TRUE)
            if (nrow(x)==0) next
            for (ib in 1:nrow(x)) {
                i3 &lt;- ki3[x[ib, 1]]
                i4 &lt;- ki4[x[ib, 2]]
                if (i3 != i4) {
                        m &lt;- m+1
                        cat(m, y[c(i1, i2, i3, i4)], &quot;\n&quot;)
                    }
            }
        }
    }
    cat(&quot;m =&quot;,m,&quot;\n&quot;)
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3707/addtag/" class="addtag" id="addtag_3707">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3707/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3707/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3707"
  >-</span><span
  class="button yellow"
  id="rating_z_3707"
  >0</span><span 
  class="button green"
  id="rating_p_3707"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3675/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3707/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3707/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3679">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/448/" target="_top">naranja</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3679/">#3679</a>(<script language="JavaScript">print_time(new Date("2007/11/02 20:47 GMT"));</script><noscript>2007/11/02 20:47 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>12109 個でした。

四字熟語データは重複を除いたものを改行区切りで UTF-8 で
words.txt に保存してあります。

Pentium4 3GHz、メモリ 2GB 下では 0.38 秒程度でした。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">file</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">string</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">utf</span>;

<span class="kt">void</span> <span class="n">main</span>(){
    <span class="kt">wchar</span>[][][<span class="kt">wchar</span>] <span class="n">hash</span>;
    <span class="k">foreach</span>(<span class="n">word</span>; <span class="n">splitlines</span>(<span class="k">cast</span>(<span class="n">string</span>)<span class="n">read</span>(<span class="s">&quot;words.txt&quot;</span>))){
        <span class="kt">wchar</span>[] <span class="n">convedWord</span> = <span class="n">word</span>.<span class="n">toUTF16</span>();
        <span class="n">hash</span>[<span class="n">convedWord</span>[<span class="mi">0</span>]] ~= <span class="n">convedWord</span>;
    }
    <span class="kt">bool</span>[<span class="kt">wchar</span>[]] <span class="n">checked</span>;
    <span class="kt">int</span> <span class="n">count</span>;
    <span class="k">foreach</span>(<span class="n">arr</span>; <span class="n">hash</span>){
        <span class="k">foreach</span>(<span class="n">top</span>; <span class="n">arr</span>){
            <span class="k">if</span>(<span class="n">top</span>[<span class="mi">0</span>] <span class="k">in</span> <span class="n">hash</span>){
                <span class="k">foreach</span>(<span class="n">left</span>; <span class="n">hash</span>[<span class="n">top</span>[<span class="mi">0</span>]]){
                    <span class="k">if</span>(!(<span class="n">left</span> <span class="k">in</span> <span class="n">checked</span>) &amp;&amp; <span class="n">top</span>[<span class="mi">3</span>] <span class="k">in</span> <span class="n">hash</span>){
                        <span class="k">foreach</span>(<span class="n">right</span>; <span class="n">hash</span>[<span class="n">top</span>[<span class="mi">3</span>]]){
                            <span class="k">if</span>(<span class="n">left</span>[<span class="mi">3</span>] <span class="k">in</span> <span class="n">hash</span> &amp;&amp; <span class="n">right</span> != <span class="n">top</span> &amp;&amp; <span class="n">right</span> != <span class="n">left</span>){
                                <span class="k">foreach</span>(<span class="n">bottom</span>; <span class="n">hash</span>[<span class="n">left</span>[<span class="mi">3</span>]]){
                                    <span class="k">if</span>(<span class="n">bottom</span>[<span class="mi">3</span>] == <span class="n">right</span>[<span class="mi">3</span>] &amp;&amp; <span class="n">bottom</span>[<span class="mi">0</span>] != <span class="n">top</span>[<span class="mi">3</span>]
                                       &amp;&amp; <span class="n">bottom</span> != <span class="n">top</span> &amp;&amp; <span class="n">bottom</span> != <span class="n">left</span> &amp;&amp; <span class="n">bottom</span> != <span class="n">right</span>){
                                        <span class="n">writefln</span>(<span class="n">top</span>);
                                        <span class="n">writefln</span>(<span class="n">left</span>[<span class="mi">1</span>], <span class="s">&quot;　　&quot;</span>, <span class="n">right</span>[<span class="mi">1</span>]);
                                        <span class="n">writefln</span>(<span class="n">left</span>[<span class="mi">2</span>], <span class="s">&quot;　　&quot;</span>, <span class="n">right</span>[<span class="mi">2</span>]);
                                        <span class="n">writefln</span>(<span class="n">bottom</span>);
                                        <span class="n">writefln</span>(<span class="s">&quot;-------&quot;</span>);
                                        <span class="n">count</span>++;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            <span class="n">checked</span>[<span class="n">top</span>] = <span class="kc">true</span>;
        }
    }
    <span class="n">writefln</span>(<span class="n">count</span>);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3679/addtag/" class="addtag" id="addtag_3679">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3679/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3679/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3679"
  >-</span><span
  class="button yellow"
  id="rating_z_3679"
  >0</span><span 
  class="button green"
  id="rating_p_3679"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3679/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3680">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/343/" target="_top">matyr</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3680/">#3680</a>(<script language="JavaScript">print_time(new Date("2007/11/02 21:24 GMT"));</script><noscript>2007/11/02 21:24 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  &nbsp;100秒程(@Turion64x2&nbsp;1.8GHz)かかって，8312件&nbsp;→&nbsp;24236通り。<br/>&nbsp;「可能な四角を全て出力」と解釈して鏡像・重複共に許したため，他の人の約二倍量になりました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">doukaku75</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">h</span> <span class="o">=</span> <span class="p">{}</span><span class="o">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">c</span><span class="o">;</span> <span class="nx">i</span><span class="o">--;</span><span class="p">)</span>
    <span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">c</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}))[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">o</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;　　&#39;</span><span class="o">,</span> <span class="nx">n</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="o">,</span> <span class="nx">t</span><span class="o">,</span> <span class="nx">l</span><span class="o">,</span> <span class="nx">r</span><span class="o">,</span> <span class="nx">b</span><span class="o">,</span> <span class="nx">tl</span><span class="o">,</span> <span class="nx">tr</span><span class="o">,</span> <span class="nx">bl</span><span class="o">,</span> <span class="nx">htl</span><span class="o">,</span> <span class="nx">htr</span><span class="o">,</span> <span class="nx">hbl</span><span class="o">;</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">tl</span> <span class="k">in</span> <span class="nx">h</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="nx">t</span> <span class="k">in</span> <span class="nx">htl</span> <span class="o">=</span> <span class="nx">h</span><span class="p">[</span><span class="nx">tl</span><span class="p">])</span> <span class="k">for</span><span class="p">(</span><span class="nx">l</span> <span class="k">in</span> <span class="nx">htl</span><span class="p">)</span> <span class="k">if</span><span class="p">((</span><span class="nx">tr</span> <span class="o">=</span> <span class="nx">htl</span><span class="p">[</span><span class="nx">t</span><span class="p">])</span> <span class="o">!=</span> <span class="p">(</span><span class="nx">bl</span> <span class="o">=</span> <span class="nx">htl</span><span class="p">[</span><span class="nx">l</span><span class="p">]))</span> <span class="c">// 右上隅 != 左下隅</span>
    <span class="k">for</span><span class="p">(</span><span class="nx">r</span> <span class="k">in</span> <span class="nx">htr</span> <span class="o">=</span> <span class="nx">h</span><span class="p">[</span><span class="nx">tr</span><span class="p">])</span> <span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">hbl</span> <span class="o">=</span> <span class="nx">h</span><span class="p">[</span><span class="nx">bl</span><span class="p">])</span> <span class="k">if</span><span class="p">(</span><span class="nx">htr</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span> <span class="o">==</span> <span class="nx">hbl</span><span class="p">[</span><span class="nx">b</span><span class="p">])</span>
      <span class="nx">o</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">y</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span>
                <span class="nx">y</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">y</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span>
                <span class="nx">y</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">y</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span>
                <span class="nx">y</span><span class="p">[</span><span class="nx">b</span><span class="p">]].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">o</span><span class="o">;</span>
<span class="p">}</span>

<span class="k">with</span><span class="p">(</span><span class="nx">WSH</span><span class="p">.</span><span class="nx">stdIn</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">lst</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="o">!</span><span class="nx">atEndOfStream</span><span class="o">;</span><span class="p">)</span> <span class="nx">lst</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="nx">readLine</span><span class="p">();</span>
<span class="k">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="o">,</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">doukaku75</span><span class="p">(</span><span class="nx">lst</span><span class="p">);</span>
<span class="nx">WSH</span><span class="p">.</span><span class="nx">echo</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span> <span class="o">-</span> <span class="nx">start</span><span class="p">)</span> <span class="o">+</span><span class="s1">&#39;[ms]\n\n&#39;</span><span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n\n&#39;</span><span class="p">));</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3680/addtag/" class="addtag" id="addtag_3680">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/WSH/">WSH</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3680/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3680/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3680"
  >-</span><span
  class="button yellow"
  id="rating_z_3680"
  >0</span><span 
  class="button green"
  id="rating_p_3680"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3680/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3680/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3703">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/343/" target="_top">matyr</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3703/">#3703</a>(<script language="JavaScript">print_time(new Date("2007/11/04 15:44 GMT"));</script><noscript>2007/11/04 15:44 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  &nbsp;ruckerさんのアルゴリズム(#3695)を拝借して高速化を図りました。上と同条件で約9秒。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">doukaku75r</span><span class="p">(</span><span class="nx">y</span><span class="p">){</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">C</span> <span class="o">=</span> <span class="p">{}</span><span class="o">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="nx">c</span><span class="o">,</span> <span class="nx">h</span><span class="o">,</span> <span class="nx">t</span><span class="o">;</span> <span class="nx">i</span><span class="o">--;</span><span class="p">){</span>
    <span class="nx">h</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">,</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="p">((</span><span class="nx">c</span> <span class="o">=</span> <span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}))).</span><span class="nx">asHead</span> <span class="o">||</span> <span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">asHead</span> <span class="o">=</span> <span class="p">{}))[</span><span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">t</span><span class="o">;</span>
    <span class="p">((</span><span class="nx">c</span> <span class="o">=</span> <span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">C</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}))).</span><span class="nx">asTail</span> <span class="o">||</span> <span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">asTail</span> <span class="o">=</span> <span class="p">{}))[</span><span class="nx">y</span><span class="p">[</span><span class="nx">i</span><span class="p">]]</span> <span class="o">=</span> <span class="nx">h</span><span class="o">;</span>
  <span class="p">}</span>
  <span class="k">var</span> <span class="nx">CC</span> <span class="o">=</span> <span class="p">{}</span><span class="o">,</span> <span class="nx">cc</span><span class="o">,</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">r</span><span class="o">;</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">C</span><span class="p">)</span> <span class="k">if</span><span class="p">((</span><span class="nx">h</span> <span class="o">=</span> <span class="nx">C</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">asHead</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nx">t</span> <span class="o">=</span> <span class="nx">C</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">asTail</span><span class="p">))</span> <span class="k">for</span><span class="p">(</span><span class="nx">r</span> <span class="k">in</span> <span class="nx">h</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="nx">f</span> <span class="k">in</span> <span class="nx">t</span><span class="p">)</span>
    <span class="p">(</span><span class="nx">CC</span><span class="p">[</span><span class="nx">cc</span> <span class="o">=</span> <span class="nx">t</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span> <span class="o">+</span> <span class="nx">h</span><span class="p">[</span><span class="nx">r</span><span class="p">]]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">CC</span><span class="p">[</span><span class="nx">cc</span><span class="p">]</span> <span class="o">=</span> <span class="p">[])).</span><span class="nx">push</span><span class="p">({</span><span class="nx">hitch</span><span class="o">:</span> <span class="nx">c</span><span class="o">,</span> <span class="nx">front</span><span class="o">:</span> <span class="nx">f</span><span class="o">,</span> <span class="nx">rear</span><span class="o">:</span> <span class="nx">r</span><span class="p">});</span>
  <span class="k">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span> <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;　　&#39;</span><span class="o">,</span> <span class="nx">n</span> <span class="o">=</span> <span class="s1">&#39;\n&#39;</span><span class="o">,</span> <span class="nx">x1</span><span class="o">,</span> <span class="nx">x2</span><span class="o">,</span> <span class="nx">c1</span><span class="o">,</span> <span class="nx">c2</span><span class="o">;</span>
  <span class="k">for</span><span class="p">(</span><span class="nx">cc</span> <span class="k">in</span> <span class="nx">CC</span><span class="p">)</span> <span class="k">for</span><span class="p">(</span><span class="nx">x1</span> <span class="k">in</span> <span class="nx">C</span> <span class="o">=</span> <span class="nx">CC</span><span class="p">[</span><span class="nx">cc</span><span class="p">])</span> <span class="k">for</span><span class="p">(</span><span class="nx">x2</span> <span class="k">in</span> <span class="nx">C</span><span class="p">)</span> <span class="k">if</span><span class="p">((</span><span class="nx">c1</span> <span class="o">=</span> <span class="nx">C</span><span class="p">[</span><span class="nx">x1</span><span class="p">]).</span><span class="nx">hitch</span> <span class="o">!=</span> <span class="p">(</span><span class="nx">c2</span> <span class="o">=</span> <span class="nx">C</span><span class="p">[</span><span class="nx">x2</span><span class="p">]).</span><span class="nx">hitch</span><span class="p">)</span>
    <span class="nx">out</span><span class="p">[</span><span class="o">++</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nx">c1</span><span class="p">.</span><span class="nx">front</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span>
                <span class="nx">c2</span><span class="p">.</span><span class="nx">front</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">c1</span><span class="p">.</span><span class="nx">rear</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span>
                <span class="nx">c2</span><span class="p">.</span><span class="nx">front</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="nx">s</span><span class="o">,</span> <span class="nx">c1</span><span class="p">.</span><span class="nx">rear</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">,</span> <span class="nx">n</span><span class="o">,</span>
                <span class="nx">c2</span><span class="p">.</span><span class="nx">rear</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">out</span><span class="o">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3703/addtag/" class="addtag" id="addtag_3703">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3703/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3703/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3703"
  >-</span><span
  class="button yellow"
  id="rating_z_3703"
  >0</span><span 
  class="button green"
  id="rating_p_3703"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3680/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3703/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3703/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3687">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3687/">#3687</a>(<script language="JavaScript">print_time(new Date("2007/11/03 03:32 GMT"));</script><noscript>2007/11/03 03:32 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  四字熟語のリストは標準入力から１行１エントリの形式で与えます。<br/>出題で参考に与えられたリストを重複排除したもの(8312個)を使用したところ、12118個の組み合わせが見つかりました（単純に縦横を入れ替えて同じになるのは除外しています）。例として「阿」で始まる組み合わせを示します。<br/><br/>阿衡之才&nbsp;阿付雷同&nbsp;才子佳人&nbsp;同行二人<br/>阿衡之才&nbsp;阿附迎合&nbsp;才弁縦横&nbsp;合従連横<br/>阿衡之才&nbsp;阿諛迎合&nbsp;才弁縦横&nbsp;合従連横<br/>阿衡之才&nbsp;阿諛苟合&nbsp;才弁縦横&nbsp;合従連横<br/>阿付雷同&nbsp;阿諛追随&nbsp;同心同徳&nbsp;随喜功徳<br/>阿爺下頷&nbsp;阿諛追随&nbsp;頷下之珠&nbsp;随侯之珠<br/>阿諛取容&nbsp;阿諛奉承&nbsp;容貌顔色&nbsp;承顔候色<br/><br/>上記データの場合、1.67&nbsp;GHz&nbsp;PowerPC&nbsp;G4&nbsp;で&nbsp;10秒程度かかりました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">BufferedReader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">jukugoList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">startMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
        <span class="n">String</span> <span class="n">jukugo</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">jukugo</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">jukugoList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jukugo</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">jukugo</span><span class="o">.</span><span class="na">codePointAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">il</span> <span class="o">=</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">il</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">il</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
                <span class="n">startMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">il</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">il</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jukugo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">e</span> <span class="o">:</span> <span class="n">startMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">jL</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i1</span> <span class="o">&lt;</span> <span class="n">jL</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i1</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">j1</span> <span class="o">=</span> <span class="n">jL</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i1</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">j1Last</span> <span class="o">=</span> <span class="n">j1</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j1</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">i1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i2</span> <span class="o">&lt;</span> <span class="n">jL</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i2</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">String</span> <span class="n">j2</span> <span class="o">=</span> <span class="n">jL</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i2</span><span class="o">);</span>
                    <span class="kt">int</span> <span class="n">j2Last</span> <span class="o">=</span> <span class="n">j2</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">j1Last</span> <span class="o">!=</span> <span class="n">j2Last</span> <span class="o">&amp;&amp;</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j1Last</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j2Last</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">j3</span> <span class="o">:</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j1Last</span><span class="o">))</span> <span class="o">{</span>
                            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">j4:</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j2Last</span><span class="o">))</span> <span class="o">{</span>
                                <span class="k">if</span> <span class="o">(</span><span class="n">j3</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j3</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">==</span> <span class="n">j4</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j4</span><span class="o">.</span><span class="na">length</span><span class="o">()))</span> <span class="o">{</span>
                                    <span class="n">print</span><span class="o">(</span><span class="n">j1</span><span class="o">,</span> <span class="n">j2</span><span class="o">,</span> <span class="n">j3</span><span class="o">,</span> <span class="n">j4</span><span class="o">);</span>
                                <span class="o">}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">print</span><span class="o">(</span><span class="n">String</span> <span class="n">j1</span><span class="o">,</span> <span class="n">String</span> <span class="n">j2</span><span class="o">,</span> <span class="n">String</span> <span class="n">j3</span><span class="o">,</span> <span class="n">String</span> <span class="n">j4</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j1</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;    &quot;</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;..(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;    &quot;</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;..(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j4</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3687/addtag/" class="addtag" id="addtag_3687">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3687/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3687/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3687"
  >-</span><span
  class="button yellow"
  id="rating_z_3687"
  >0</span><span 
  class="button green"
  id="rating_p_3687"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3687/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3687/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3688">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/">#3688</a>(<script language="JavaScript">print_time(new Date("2007/11/03 06:34 GMT"));</script><noscript>2007/11/03 06:34 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  最後の2つの熟語を単純に総当たりで調べていたのが若干気になったので、もう少し工夫してみました。先頭の文字と末尾の文字の両方から直接最後の熟語を求めています。<br/><br/>先ほどと同じ条件で7秒まで短縮しました。<br/><br/>ちなみに、最初に提示したプログラムを含めサロゲートペアに対応しています。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample3</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">BufferedReader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">startMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">startEndMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
        <span class="n">String</span> <span class="n">jukugo</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">jukugo</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">jukugo</span><span class="o">.</span><span class="na">codePointAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">il</span> <span class="o">=</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">il</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">il</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
                <span class="n">startMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">il</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">il</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jukugo</span><span class="o">);</span>
            <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">jukugo</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">jukugo</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
            <span class="n">List</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ll</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">ll</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ll</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
                <span class="n">startEndMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">ll</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">ll</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jukugo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">e</span> <span class="o">:</span> <span class="n">startMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">jL</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i1</span> <span class="o">&lt;</span> <span class="n">jL</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i1</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">j1</span> <span class="o">=</span> <span class="n">jL</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i1</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">j1Last</span> <span class="o">=</span> <span class="n">j1</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j1</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">i1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i2</span> <span class="o">&lt;</span> <span class="n">jL</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i2</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">String</span> <span class="n">j2</span> <span class="o">=</span> <span class="n">jL</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i2</span><span class="o">);</span>
                    <span class="kt">int</span> <span class="n">j2Last</span> <span class="o">=</span> <span class="n">j2</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">j1Last</span> <span class="o">!=</span> <span class="n">j2Last</span> <span class="o">&amp;&amp;</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j1Last</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j2Last</span><span class="o">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">j3</span> <span class="o">:</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j1Last</span><span class="o">))</span> <span class="o">{</span>
                            <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">j2Last</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">j3</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
                            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l4</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">l4</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                                <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">j4:</span> <span class="n">l4</span><span class="o">)</span> <span class="o">{</span>
                                    <span class="n">print</span><span class="o">(</span><span class="n">j1</span><span class="o">,</span> <span class="n">j2</span><span class="o">,</span> <span class="n">j3</span><span class="o">,</span> <span class="n">j4</span><span class="o">);</span>
                                <span class="o">}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">print</span><span class="o">(</span><span class="n">String</span> <span class="n">j1</span><span class="o">,</span> <span class="n">String</span> <span class="n">j2</span><span class="o">,</span> <span class="n">String</span> <span class="n">j3</span><span class="o">,</span> <span class="n">String</span> <span class="n">j4</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j1</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;    &quot;</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;..(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;    &quot;</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;..(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j4</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/addtag/" class="addtag" id="addtag_3688">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3688"
  >-</span><span
  class="button yellow"
  id="rating_z_3688"
  >0</span><span 
  class="button green"
  id="rating_p_3688"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3687/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3688/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3691">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3691/">#3691</a>(<script language="JavaScript">print_time(new Date("2007/11/03 11:26 GMT"));</script><noscript>2007/11/03 11:26 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  四隅の漢字を求めてから、中間の熟語をはめ込めば効率的ではないかという発想から改造してみました。組み合わせの数は同じですが生成される順番は変わっています。<br/><br/>ちなみに、先ほどの測定結果は全て裏で重いプロセスが走ったままで測定していましたので、計り直しました（4回測定して最速のもの）。<br/><br/>#3687&nbsp;&nbsp;&nbsp;&nbsp;3.56秒<br/>#3688&nbsp;&nbsp;&nbsp;&nbsp;2.36秒<br/>本コメント&nbsp;2.40秒<br/><br/>最適化が充分でなかったようで、わずかですが却って遅くなってしまいました（それでも、最初よりは早いです）。<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample4</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">BufferedReader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">startMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedHashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">startEndMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;&gt;();</span>
        <span class="n">String</span> <span class="n">jukugo</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">jukugo</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">jukugo</span><span class="o">.</span><span class="na">codePointAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">jukugo</span><span class="o">.</span><span class="na">codePointBefore</span><span class="o">(</span><span class="n">jukugo</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
            <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">il</span> <span class="o">=</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">il</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">il</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
                <span class="n">startMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">il</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">il</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">j</span><span class="o">);</span>
            <span class="kt">long</span> <span class="n">l</span> <span class="o">=</span> <span class="o">((</span><span class="kt">long</span><span class="o">)</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">j</span><span class="o">;</span>
            <span class="n">List</span> <span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">ll</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">ll</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">ll</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
                <span class="n">startEndMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">ll</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">ll</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">jukugo</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">e</span> <span class="o">:</span> <span class="n">startMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">j0</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getKey</span><span class="o">();</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">jL</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">e</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i1</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i1</span> <span class="o">&lt;</span> <span class="n">jL</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i1</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">j1</span> <span class="o">=</span> <span class="n">jL</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i1</span><span class="o">);</span>
                <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l1</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(((</span><span class="kt">long</span><span class="o">)</span><span class="n">j0</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">j1</span><span class="o">);</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">i1</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i2</span> <span class="o">&lt;</span> <span class="n">jL</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i2</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">j2</span> <span class="o">=</span> <span class="n">jL</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i2</span><span class="o">);</span>
                    <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l2</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(((</span><span class="kt">long</span><span class="o">)</span><span class="n">j0</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">j2</span><span class="o">);</span>
                    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">s</span> <span class="o">=</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j1</span><span class="o">);</span>
                    <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">startMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">j2</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">s</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">s2</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">s</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="n">s</span><span class="o">);</span>
                        <span class="n">s</span><span class="o">.</span><span class="na">retainAll</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
                        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j3</span> <span class="o">:</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
                            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l3</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(((</span><span class="kt">long</span><span class="o">)</span><span class="n">j1</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">j3</span><span class="o">);</span>
                            <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">l4</span> <span class="o">=</span> <span class="n">startEndMap</span><span class="o">.</span><span class="na">get</span><span class="o">(((</span><span class="kt">long</span><span class="o">)</span><span class="n">j2</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="o">)</span> <span class="o">+</span> <span class="n">j3</span><span class="o">);</span>
                            <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">jk1</span> <span class="o">:</span> <span class="n">l1</span><span class="o">)</span> <span class="o">{</span>
                                <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">jk2</span> <span class="o">:</span> <span class="n">l2</span><span class="o">)</span> <span class="o">{</span>
                                    <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">jk3</span> <span class="o">:</span> <span class="n">l3</span><span class="o">)</span> <span class="o">{</span>
                                        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">jk4</span> <span class="o">:</span> <span class="n">l4</span><span class="o">)</span> <span class="o">{</span>
                                            <span class="n">print</span><span class="o">(</span><span class="n">jk1</span><span class="o">,</span> <span class="n">jk2</span><span class="o">,</span> <span class="n">jk3</span><span class="o">,</span> <span class="n">jk4</span><span class="o">);</span>
                                        <span class="o">}</span>
                                    <span class="o">}</span>
                                <span class="o">}</span>
                            <span class="o">}</span>
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">print</span><span class="o">(</span><span class="n">String</span> <span class="n">j1</span><span class="o">,</span> <span class="n">String</span> <span class="n">j2</span><span class="o">,</span> <span class="n">String</span> <span class="n">j3</span><span class="o">,</span> <span class="n">String</span> <span class="n">j4</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j1</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;    &quot;</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;.(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j2</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;..(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;    &quot;</span> <span class="o">+</span> <span class="n">j3</span><span class="o">.</span><span class="na">replaceAll</span><span class="o">(</span><span class="s">&quot;..(.).*&quot;</span><span class="o">,</span> <span class="s">&quot;$1&quot;</span><span class="o">));</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">j4</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3691/addtag/" class="addtag" id="addtag_3691">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3691/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3691/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3691"
  >-</span><span
  class="button yellow"
  id="rating_z_3691"
  >0</span><span 
  class="button green"
  id="rating_p_3691"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3688/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3691/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3691/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  
    





<div class="comment" id="comment3689">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/498/" target="_top">uho</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3689/">#3689</a>(<script language="JavaScript">print_time(new Date("2007/11/03 08:02 GMT"));</script><noscript>2007/11/03 08:02 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>LINQ使ってみました。

かなり怪しい出来ですが、
Pen4 2.8Ghz 303秒　24223件となりました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Diagnostics</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">yojijukugo</span>
<span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="k">{</span>
        <span class="k">static</span> <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">array</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
        <span class="k">static</span> <span class="k">public</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">outputStr</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[</span><span class="m">4</span><span class="p">];</span>
        <span class="k">static</span> <span class="k">public</span> <span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="k">{</span>
            <span class="n">DateTime</span> <span class="n">prev</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>

            <span class="c">// １．ファイル読み取り</span>
            <span class="k">using</span> <span class="p">(</span><span class="n">StreamReader</span> <span class="n">sr</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StreamReader</span><span class="p">(</span><span class="n">Settings1</span><span class="p">.</span><span class="n">Default</span><span class="p">.</span><span class="n">fileName</span><span class="p">))</span>
            <span class="k">{</span>
                <span class="k">while</span> <span class="p">(</span><span class="n">sr</span><span class="p">.</span><span class="n">Peek</span><span class="p">()</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span>
                    <span class="n">array</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">sr</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">());</span>
            <span class="k">}</span>

            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">array</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span>
            <span class="k">{</span>
                <span class="n">var</span> <span class="n">n</span> <span class="p">=</span> <span class="n">from</span> <span class="n">a</span> <span class="k">in</span> <span class="n">array</span>
                        <span class="n">where</span> <span class="n">a</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">==</span> <span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="m">0</span><span class="p">]</span>
                        <span class="n">select</span> <span class="n">a</span><span class="p">;</span>
                <span class="k">if</span><span class="p">(</span> <span class="n">n</span><span class="p">.</span><span class="n">Count</span><span class="p">()</span> <span class="p">==</span> <span class="m">1</span> <span class="p">)</span>
                    <span class="k">continue</span><span class="p">;</span>

                <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">s</span> <span class="k">in</span> <span class="n">n</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="n">s</span><span class="p">;</span>
                    <span class="n">logic</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
                <span class="k">}</span>

                <span class="n">i</span> <span class="p">+=</span> <span class="p">(</span><span class="n">n</span><span class="p">.</span><span class="n">Count</span><span class="p">()-</span><span class="m">1</span><span class="p">);</span>
            <span class="k">}</span>

            <span class="n">DateTime</span> <span class="n">now</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">Now</span><span class="p">;</span>

            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">count</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">((</span><span class="n">now</span><span class="p">-</span><span class="n">prev</span><span class="p">).</span><span class="n">TotalSeconds</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Read</span><span class="p">();</span>
        <span class="k">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">logic</span><span class="p">(</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">a</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="n">var</span> <span class="n">n</span> <span class="p">=</span> <span class="n">from</span> <span class="n">b</span> <span class="k">in</span> <span class="n">a</span>
                    <span class="n">where</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">3</span><span class="p">]</span> <span class="p">!=</span> <span class="n">b</span><span class="p">[</span><span class="m">3</span><span class="p">]</span>
                    <span class="p">&amp;&amp;</span> <span class="n">b</span> <span class="p">!=</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
                    <span class="n">select</span> <span class="n">b</span><span class="p">;</span>

            <span class="n">var</span> <span class="n">x</span> <span class="p">=</span> <span class="n">from</span> <span class="n">c</span> <span class="k">in</span> <span class="n">array</span>
                    <span class="n">where</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">3</span><span class="p">]</span> <span class="p">==</span> <span class="n">c</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
                    <span class="p">&amp;&amp;</span> <span class="n">c</span> <span class="p">!=</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
                    <span class="n">select</span> <span class="n">c</span><span class="p">;</span>

            <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">yj</span> <span class="k">in</span> <span class="n">n</span> <span class="p">)</span>
            <span class="k">{</span>
                <span class="n">outputStr</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">yj</span><span class="p">;</span>

                <span class="n">var</span> <span class="n">z</span> <span class="p">=</span> <span class="n">from</span> <span class="n">d</span> <span class="k">in</span> <span class="n">array</span>
                        <span class="n">where</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">1</span><span class="p">][</span><span class="m">3</span><span class="p">]</span> <span class="p">==</span> <span class="n">d</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
                        <span class="p">&amp;&amp;</span> <span class="n">d</span> <span class="p">!=</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">]</span>
                        <span class="p">&amp;&amp;</span> <span class="n">d</span> <span class="p">!=</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">1</span><span class="p">]</span>
                        <span class="n">select</span> <span class="n">d</span><span class="p">;</span>

                <span class="n">var</span> <span class="n">y</span> <span class="p">=</span> <span class="n">from</span> <span class="n">e</span> <span class="k">in</span> <span class="n">x</span>
                        <span class="n">join</span> <span class="n">f</span> <span class="k">in</span> <span class="n">z</span>
                        <span class="n">on</span> <span class="n">e</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="n">equals</span> <span class="n">f</span><span class="p">[</span><span class="m">3</span><span class="p">]</span>
                        <span class="n">where</span> <span class="n">e</span> <span class="p">!=</span> <span class="n">f</span>
                        <span class="n">select</span> <span class="k">new</span> <span class="n">KeyValuePair</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;(</span><span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">);</span>

                <span class="k">foreach</span> <span class="p">(</span><span class="n">KeyValuePair</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">kvp</span> <span class="k">in</span> <span class="n">y</span><span class="p">)</span>
                <span class="k">{</span>
                    <span class="n">outputStr</span><span class="p">[</span><span class="m">2</span><span class="p">]</span> <span class="p">=</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Key</span><span class="p">;</span>
                    <span class="n">outputStr</span><span class="p">[</span><span class="m">3</span><span class="p">]</span> <span class="p">=</span> <span class="n">kvp</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>

                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">outputStr</span><span class="p">[</span><span class="m">1</span><span class="p">]);</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">1</span><span class="p">]</span> <span class="p">+</span> <span class="s">&quot;　　&quot;</span> <span class="p">+</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">3</span><span class="p">][</span><span class="m">1</span><span class="p">]);</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">outputStr</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="m">2</span><span class="p">]</span> <span class="p">+</span> <span class="s">&quot;　　&quot;</span> <span class="p">+</span> <span class="n">outputStr</span><span class="p">[</span><span class="m">3</span><span class="p">][</span><span class="m">2</span><span class="p">]);</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">outputStr</span><span class="p">[</span><span class="m">2</span><span class="p">]);</span>
                    <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">();</span>

                    <span class="n">count</span><span class="p">++;</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3689/addtag/" class="addtag" id="addtag_3689">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/LINQ/">LINQ</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3689/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3689/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3689"
  >-</span><span
  class="button yellow"
  id="rating_z_3689"
  >0</span><span 
  class="button green"
  id="rating_p_3689"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3689/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3690">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3690/">#3690</a>(<script language="JavaScript">print_time(new Date("2007/11/03 10:16 GMT"));</script><noscript>2007/11/03 10:16 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>27行目から31行目でフィルタ条件をコントロールします。

全部コメントで24236
27,29,31行をコメントで12118
29,31行をコメントで12109
28,30行をコメントで12107
になります。

実行時間は出力をファイルにリダイレクトして(画面出力は意外と時間を食う)20秒ほどでした。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>

<span class="n">ENCODING</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">getfilesystemencoding</span><span class="p">()</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">h</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">t</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">dict</span><span class="o">.</span><span class="n">fromkeys</span><span class="p">((</span><span class="n">sys</span><span class="o">.</span><span class="n">stdin</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span> <span class="k">else</span> <span class="nb">file</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span><span class="o">.</span><span class="n">readlines</span><span class="p">())</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
  <span class="n">s</span> <span class="o">=</span> <span class="nb">unicode</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">rstrip</span><span class="p">(),</span> <span class="n">ENCODING</span><span class="p">)</span>
  <span class="n">l</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">h</span><span class="p">:</span>
    <span class="n">h</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">h</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
    <span class="n">t</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="n">t</span><span class="p">[</span><span class="n">s</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>

<span class="n">r</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">l</span><span class="p">:</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">in</span> <span class="n">h</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="n">h</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]]:</span>
      <span class="k">if</span> <span class="n">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="n">h</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">==</span> <span class="n">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]:</span> <span class="k">continue</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">h</span><span class="p">[</span><span class="n">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]]:</span>
          <span class="k">if</span> <span class="n">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">set</span><span class="p">(</span><span class="n">h</span><span class="p">[</span><span class="n">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]])</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">t</span><span class="p">[</span><span class="n">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]]):</span>
              <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">set</span><span class="p">([</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">]))</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span> <span class="k">continue</span>
              <span class="k">if</span> <span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span> <span class="ow">in</span> <span class="n">r</span><span class="p">)</span> <span class="ow">or</span> <span class="p">((</span><span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">c</span><span class="p">)</span> <span class="ow">in</span> <span class="n">r</span><span class="p">):</span> <span class="k">continue</span>
<span class="c">#              if tuple(sorted([a, b, c, d])) in r: continue</span>
              <span class="n">r</span><span class="p">[(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">)]</span> <span class="o">=</span> <span class="mi">1</span>
<span class="c">#              r[tuple(sorted([a, b, c, d]))] = 1</span>
              <span class="k">print</span> <span class="p">(</span><span class="s">&#39;</span><span class="si">%s</span><span class="s">,</span><span class="si">%s</span><span class="s">,</span><span class="si">%s</span><span class="s">,</span><span class="si">%s</span><span class="s">&#39;</span><span class="o">%</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">))</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">ENCODING</span><span class="p">)</span>
<span class="c">#              print (&#39;%s\n%s    %s\n%s    %s\n%s\n&#39;%(a, b[1], c[1], b[2], c[2], d)).encode(ENCODING)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3690/addtag/" class="addtag" id="addtag_3690">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3690/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3690/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3690"
  >-</span><span
  class="button yellow"
  id="rating_z_3690"
  >0</span><span 
  class="button green"
  id="rating_p_3690"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3690/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment3694">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3694/">#3694</a>(<script language="JavaScript">print_time(new Date("2007/11/03 16:59 GMT"));</script><noscript>2007/11/03 16:59 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>重複のないデータ(熟語数8312)を使いました
漢字のエンコーディングはUTF8

実行結果
% time ./75 &lt; 4moji.data
一切即一
擲　　了
百　　百
万夫不当

一切即一
擲　　人
百　　当
万万千千

一切即一
擲　　切
百　　衆
万死一生

……途中略……

白雲孤飛
馬　　短
非　　流
馬痩毛長

一日不食
琴　　馬
一　　解
鶴翼之囲

一箪之食
琴　　馬
一　　解
鶴翼之囲

総数 12109 個
./75 &lt; 4moji.data  169.67s user 0.57s system 97% cpu 2:55.13 total
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="p">(</span><span class="nv">main</span><span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">UTF8</span> <span class="nv">as</span> <span class="n">U</span>

<span class="nv">eqapp</span>  <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">cmpapp</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">starling</span> <span class="nv">f</span> <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">listing</span> <span class="o">.</span> <span class="nv">starling</span> <span class="p">(,)</span> <span class="nv">length</span> <span class="o">.</span> <span class="nv">rings</span> <span class="o">.</span> <span class="nv">starling</span> <span class="p">(,)</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">reverse</span><span class="p">)</span> <span class="o">.</span> <span class="nv">lines</span>
     <span class="o">=&lt;&lt;</span> <span class="n">U</span><span class="o">.</span><span class="nv">getContents</span>

<span class="nv">listing</span> <span class="p">(</span><span class="nv">ws</span><span class="p">,</span><span class="nv">len</span><span class="p">)</span> <span class="o">=</span>  <span class="nv">mapM_</span> <span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">showRing</span><span class="p">)</span> <span class="nv">ws</span>
                 <span class="o">&gt;&gt;</span> <span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="p">(</span><span class="s">&quot;総数 &quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">len</span><span class="o">++</span><span class="s">&quot; 個&quot;</span><span class="p">)</span>

<span class="nv">showRing</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]</span> <span class="o">=</span> <span class="nv">unlines</span> <span class="o">$</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">f</span> <span class="mi">1</span> <span class="nv">q</span> <span class="nv">r</span><span class="p">,</span><span class="nv">f</span> <span class="mi">2</span> <span class="nv">q</span> <span class="nv">r</span><span class="p">,</span> <span class="nv">s</span><span class="p">]</span>
                     <span class="kr">where</span> <span class="nv">f</span> <span class="nv">i</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="p">(</span><span class="nv">r</span> <span class="o">!!</span> <span class="nv">i</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="s">&quot;　　&quot;</span><span class="o">++</span><span class="p">[</span><span class="nv">q</span> <span class="o">!!</span> <span class="nv">i</span><span class="p">])</span>

<span class="nv">rings</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="nv">ring</span> <span class="o">.</span> <span class="nv">comb</span> <span class="mi">2</span> 
      <span class="o">.</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="nv">eqapp</span> <span class="p">(</span><span class="nv">head</span> <span class="o">.</span> <span class="nv">snd</span><span class="p">))</span> <span class="o">.</span> <span class="nv">sortBy</span> <span class="p">(</span><span class="nv">cmpapp</span> <span class="p">(</span><span class="nv">head</span> <span class="o">.</span> <span class="nv">snd</span><span class="p">))</span> 
      <span class="o">.</span> <span class="nv">uncurry</span> <span class="nv">followings</span>

<span class="nv">followings</span> <span class="nv">xss</span> <span class="nv">yss</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">reverse</span> <span class="nv">ys</span><span class="p">,</span><span class="nv">xs</span><span class="p">)</span> <span class="o">|</span> <span class="nv">xs</span> <span class="o">&lt;-</span> <span class="nv">xss</span><span class="p">,</span> <span class="nv">ys</span> <span class="o">&lt;-</span> <span class="nv">yss</span><span class="p">,</span> <span class="nv">head</span> <span class="nv">xs</span> <span class="o">==</span> <span class="nv">head</span> <span class="nv">ys</span><span class="p">]</span>

<span class="nv">ring</span> <span class="p">[</span><span class="nv">pqs</span><span class="p">,</span><span class="nv">rss</span><span class="p">]</span> <span class="o">=</span> <span class="p">[[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]</span> <span class="o">|</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">pqs</span><span class="p">,</span> <span class="p">(</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">rss</span>
                             <span class="p">,</span> <span class="nv">head</span> <span class="nv">p</span> <span class="o">==</span> <span class="nv">head</span> <span class="nv">r</span> <span class="o">&amp;&amp;</span> <span class="nv">last</span> <span class="nv">q</span> <span class="o">==</span> <span class="nv">last</span> <span class="nv">s</span> <span class="o">&amp;&amp;</span> <span class="nv">uniq</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]]</span>

<span class="nv">uniq</span> <span class="p">[]</span>     <span class="o">=</span> <span class="n">True</span>
<span class="nv">uniq</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">notElem</span> <span class="nv">x</span> <span class="nv">xs</span> <span class="o">&amp;&amp;</span> <span class="nv">uniq</span> <span class="nv">xs</span>

<span class="nv">comb</span> <span class="mi">0</span> <span class="kr">_</span>      <span class="o">=</span> <span class="p">[[]]</span>
<span class="nv">comb</span> <span class="kr">_</span> <span class="p">[]</span>     <span class="o">=</span> <span class="p">[]</span>
<span class="nv">comb</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="p">)</span> <span class="p">(</span><span class="nv">comb</span> <span class="p">(</span><span class="nv">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nv">xs</span><span class="p">)</span> <span class="o">++</span> <span class="nv">comb</span> <span class="nv">n</span> <span class="nv">xs</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3694/addtag/" class="addtag" id="addtag_3694">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3694/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3694/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3694"
  >-</span><span
  class="button yellow"
  id="rating_z_3694"
  >0</span><span 
  class="button green"
  id="rating_p_3694"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3694/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3694/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3696">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/">#3696</a>(<script language="JavaScript">print_time(new Date("2007/11/03 20:06 GMT"));</script><noscript>2007/11/03 20:06 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Haskellでは文字列が文字の配列ではなくリストなので，文字列を辿る回数を
極力減らさないと遅くなる．

この問題では熟語の最後の文字を参照するときに文字列を辿ることになる．
そこで反転した文字列を使って尻取りペアを作るようにしてた．ところが
途中で元に戻したり，尻取りペア同志を比べるときに結局最後の要素まで
文字列を辿ったりして，元の黙阿弥だった．orz

最初に四字熟語の文字列を自分自身とその反転とのペアにするようにした．
これで速くなるはず．

ついでに，Data.Setを使って裏返し重複も除くようにしたら 12109 個だった
解が 12107 個になった．

実行結果は以下のとおり．実行時間は39秒とかなり改善された．

一切即一
上　　切
一　　衆
下化衆生

一切即一
上　　念
一　　化
下化衆生

一切即一
所　　上
懸　　一
命令一下

……途中省略……

阿諛追随
爺　　侯
下　　之
頷下之珠

雲壌懸隔
合　　岸
霧　　観
集中砲火

雲壌懸隔
屯　　岸
霧　　観
集中砲火

総数 12107 個
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="p">(</span><span class="nv">main</span><span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">Data</span><span class="o">.</span><span class="n">Set</span> <span class="nv">as</span> <span class="n">S</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">UTF8</span> <span class="nv">as</span> <span class="n">U</span>

<span class="c1">-- small utilities</span>
<span class="nv">eqapp</span>  <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">cmpapp</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">starling</span> <span class="nv">f</span> <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span>
<span class="nv">uniq</span> <span class="p">[]</span> <span class="o">=</span> <span class="n">True</span><span class="p">;</span> <span class="nv">uniq</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">notElem</span> <span class="nv">x</span> <span class="nv">xs</span> <span class="o">&amp;&amp;</span> <span class="nv">uniq</span> <span class="nv">xs</span>
<span class="nv">comb</span> <span class="mi">0</span> <span class="kr">_</span> <span class="o">=</span> <span class="p">[[]];</span> <span class="nv">comb</span> <span class="kr">_</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span> <span class="nv">comb</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="p">)</span> <span class="p">(</span><span class="nv">comb</span> <span class="p">(</span><span class="nv">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nv">xs</span><span class="p">)</span> <span class="o">++</span> <span class="nv">comb</span> <span class="nv">n</span> <span class="nv">xs</span>

<span class="c1">-- Types</span>
<span class="kr">type</span> <span class="n">AString</span> <span class="o">=</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span><span class="n">String</span><span class="p">)</span>

<span class="kr">newtype</span> <span class="n">Ring</span> <span class="o">=</span> <span class="n">Ring</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
<span class="kr">instance</span> <span class="n">Eq</span> <span class="n">Ring</span> <span class="kr">where</span>
  <span class="n">Ring</span> <span class="nv">xs</span> <span class="o">==</span> <span class="n">Ring</span> <span class="nv">ys</span> <span class="o">=</span> <span class="nv">sort</span> <span class="nv">xs</span> <span class="o">==</span> <span class="nv">sort</span> <span class="nv">ys</span>
<span class="kr">instance</span> <span class="n">Ord</span> <span class="n">Ring</span> <span class="kr">where</span>
  <span class="n">Ring</span> <span class="nv">xs</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="n">Ring</span> <span class="nv">ys</span> <span class="o">=</span> <span class="nv">sort</span> <span class="nv">xs</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">sort</span> <span class="nv">ys</span>

<span class="c1">-- Main</span>
<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">listing</span> <span class="o">.</span> <span class="nv">starling</span> <span class="p">(,)</span> <span class="n">S</span><span class="o">.</span><span class="nv">size</span>
     <span class="o">.</span> <span class="nv">rings</span>   <span class="o">.</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">starling</span> <span class="p">(,)</span> <span class="nv">reverse</span><span class="p">)</span>
     <span class="o">.</span> <span class="nv">lines</span> <span class="o">=&lt;&lt;</span> <span class="n">U</span><span class="o">.</span><span class="nv">getContents</span>

<span class="nv">listing</span> <span class="o">::</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">Ring</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">listing</span> <span class="p">(</span><span class="nv">ws</span><span class="p">,</span><span class="nv">len</span><span class="p">)</span> 
 <span class="o">=</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">showRing</span><span class="p">)</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="nv">toList</span> <span class="nv">ws</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="p">(</span><span class="s">&quot;総数 &quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">len</span><span class="o">++</span><span class="s">&quot; 個&quot;</span><span class="p">)</span>

<span class="nv">showRing</span> <span class="o">::</span> <span class="n">Ring</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">showRing</span> <span class="p">(</span><span class="n">Ring</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">])</span>
 <span class="o">=</span> <span class="nv">unlines</span> <span class="o">$</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">f</span> <span class="mi">1</span> <span class="nv">q</span> <span class="nv">r</span><span class="p">,</span><span class="nv">f</span> <span class="mi">2</span> <span class="nv">q</span> <span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]</span>
   <span class="kr">where</span> <span class="nv">f</span> <span class="nv">i</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="p">(</span><span class="nv">r</span> <span class="o">!!</span> <span class="nv">i</span><span class="p">)</span><span class="o">:</span><span class="s">&quot;　　&quot;</span><span class="o">++</span><span class="p">[</span><span class="nv">q</span> <span class="o">!!</span> <span class="nv">i</span><span class="p">]</span>

<span class="nv">rings</span> <span class="o">::</span> <span class="p">[</span><span class="n">AString</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">Ring</span>
<span class="nv">rings</span> <span class="o">=</span> <span class="n">S</span><span class="o">.</span><span class="nv">fromList</span> 
      <span class="o">.</span> <span class="nv">map</span> <span class="n">Ring</span>
      <span class="o">.</span> <span class="nv">concatMap</span> <span class="nv">ring</span>
      <span class="o">.</span> <span class="nv">comb</span> <span class="mi">2</span> 
      <span class="o">.</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="nv">eqapp</span> <span class="p">(</span><span class="nv">head</span> <span class="o">.</span> <span class="nv">fst</span> <span class="o">.</span> <span class="nv">snd</span><span class="p">))</span> 
      <span class="o">.</span> <span class="nv">sortBy</span> <span class="p">(</span><span class="nv">cmpapp</span> <span class="p">(</span><span class="nv">head</span> <span class="o">.</span> <span class="nv">fst</span> <span class="o">.</span> <span class="nv">snd</span><span class="p">))</span> 
      <span class="o">.</span> <span class="nv">followings</span>

<span class="nv">followings</span> <span class="o">::</span> <span class="p">[</span><span class="n">AString</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">AString</span><span class="p">,</span><span class="n">AString</span><span class="p">)]</span>
<span class="nv">followings</span> <span class="nv">xss</span> <span class="o">=</span> <span class="p">[(</span><span class="nv">xs</span><span class="p">,</span><span class="nv">ys</span><span class="p">)</span> <span class="o">|</span> <span class="nv">xs</span> <span class="o">&lt;-</span> <span class="nv">xss</span><span class="p">,</span> <span class="nv">ys</span> <span class="o">&lt;-</span> <span class="nv">xss</span><span class="p">,</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">xs</span><span class="p">)</span> <span class="o">==</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">ys</span><span class="p">)]</span>

<span class="nv">ring</span> <span class="o">::</span> <span class="p">[[(</span><span class="n">AString</span><span class="p">,</span><span class="n">AString</span><span class="p">)]]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">String</span><span class="p">]]</span>
<span class="nv">ring</span> <span class="p">[</span><span class="nv">pqs</span><span class="p">,</span><span class="nv">rss</span><span class="p">]</span>
 <span class="o">=</span> <span class="p">[</span><span class="nv">pqrs</span> <span class="o">|</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">pqs</span><span class="p">,</span> <span class="p">(</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">rss</span><span class="p">,</span> <span class="kr">let</span> <span class="nv">pqrs</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">fst</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]</span>
         <span class="p">,</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">p</span><span class="p">)</span> <span class="o">==</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">r</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">q</span><span class="p">)</span> <span class="o">==</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">s</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">uniq</span> <span class="nv">pqrs</span><span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/addtag/" class="addtag" id="addtag_3696">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3696"
  >-</span><span
  class="button yellow"
  id="rating_z_3696"
  >0</span><span 
  class="button green"
  id="rating_p_3696"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3694/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3696/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3697">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/">#3697</a>(<script language="JavaScript">print_time(new Date("2007/11/03 21:35 GMT"));</script><noscript>2007/11/03 21:35 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>コードを書いているうちにお題の次の部分に引っかかった．
「右上隅の漢字と左下隅の漢字は異なるものでなければなりません」

この制限は，たぶん

無憂無風
憂　　林
無　　火
風林火山

のような自明な解を排除しようとしたものではないかと思いますがどうでしょう？
ただ，上の制限では

雲合霧集
屯　　腋
霧　　成
集翠成裘

のような自明ではない解が排除されてしまいます．
これがいかにも残念なので，上の制限を勝手に(^^;)次のように変更してお題を
解きなおしてみました．

「4つの四字熟語はすべて異なるものでなければなりません」

また，お題の冒頭には
「与えられた四字熟語のリストから下のように四角く配置することのできる
熟語の組み合わせを探すプログラムを作成してください」
のように「組み合わせ」を求めよということなので，

#('一切即一' '一読三嘆' '一唱三嘆' '嘆息嗟嘆')
#('一切即一' '一唱三嘆' '一読三嘆' '嘆息嗟嘆') 

などは同じ組み合わせであると見なすことにしました．

結果は以下のとおり．解は 14479 組でした．
(#3695でruckerさんが示したアルゴリズムを使ったらずいぶん速くなり 2.5 秒でした．)

一上一下
切　　化
即　　衆
一切衆生

一上一下
切　　化
即　　衆
一念化生

一切即一
所　　上
懸　　一
命令一下

……途中省略……

雲合霧集
壌　　中
懸　　砲
隔岸観火

雲壌懸隔
屯　　岸
霧　　観
集中砲火

雲合霧集
屯　　腋
霧　　成
集翠成裘

総数 14479 個


</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="p">(</span><span class="nv">main</span><span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">Data</span><span class="o">.</span><span class="n">Set</span> <span class="nv">as</span> <span class="n">S</span>
<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span><span class="o">.</span><span class="n">UTF8</span> <span class="nv">as</span> <span class="n">U</span>

<span class="c1">-- small utilities</span>
<span class="nv">eqapp</span>  <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">cmpapp</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>
<span class="nv">starling</span> <span class="nv">f</span> <span class="nv">g</span> <span class="nv">x</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">g</span> <span class="nv">x</span><span class="p">)</span>
<span class="nv">uniq</span> <span class="p">[]</span> <span class="o">=</span> <span class="n">True</span><span class="p">;</span> <span class="nv">uniq</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">notElem</span> <span class="nv">x</span> <span class="nv">xs</span> <span class="o">&amp;&amp;</span> <span class="nv">uniq</span> <span class="nv">xs</span>
<span class="nv">comb</span> <span class="mi">0</span> <span class="kr">_</span> <span class="o">=</span> <span class="p">[[]];</span> <span class="nv">comb</span> <span class="kr">_</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[];</span> <span class="nv">comb</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="p">)</span> <span class="p">(</span><span class="nv">comb</span> <span class="p">(</span><span class="nv">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nv">xs</span><span class="p">)</span> <span class="o">++</span> <span class="nv">comb</span> <span class="nv">n</span> <span class="nv">xs</span>

<span class="c1">-- Types</span>
<span class="kr">type</span> <span class="n">AString</span> <span class="o">=</span> <span class="p">(</span><span class="n">String</span><span class="p">,</span><span class="n">String</span><span class="p">)</span>
<span class="kr">newtype</span> <span class="n">Ring</span> <span class="o">=</span> <span class="n">Ring</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
<span class="kr">instance</span> <span class="n">Eq</span> <span class="n">Ring</span> <span class="kr">where</span>
  <span class="n">Ring</span> <span class="nv">xs</span> <span class="o">==</span> <span class="n">Ring</span> <span class="nv">ys</span> <span class="o">=</span> <span class="nv">sort</span> <span class="nv">xs</span> <span class="o">==</span> <span class="nv">sort</span> <span class="nv">ys</span>
<span class="kr">instance</span> <span class="n">Ord</span> <span class="n">Ring</span> <span class="kr">where</span>
  <span class="n">Ring</span> <span class="nv">xs</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="n">Ring</span> <span class="nv">ys</span> <span class="o">=</span> <span class="nv">sort</span> <span class="nv">xs</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">sort</span> <span class="nv">ys</span>

<span class="c1">-- Main</span>
<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="nv">listing</span> <span class="o">.</span> <span class="nv">starling</span> <span class="p">(,)</span> <span class="n">S</span><span class="o">.</span><span class="nv">size</span>
     <span class="o">.</span> <span class="nv">rings</span>   <span class="o">.</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">starling</span> <span class="p">(,)</span> <span class="nv">reverse</span><span class="p">)</span>
     <span class="o">.</span> <span class="nv">lines</span> <span class="o">=&lt;&lt;</span> <span class="n">U</span><span class="o">.</span><span class="nv">getContents</span>

<span class="nv">listing</span> <span class="o">::</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">Ring</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">listing</span> <span class="p">(</span><span class="nv">ws</span><span class="p">,</span><span class="nv">len</span><span class="p">)</span> 
 <span class="o">=</span> <span class="nv">mapM_</span> <span class="p">(</span><span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">showRing</span><span class="p">)</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="nv">toList</span> <span class="nv">ws</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">U</span><span class="o">.</span><span class="nv">putStrLn</span> <span class="p">(</span><span class="s">&quot;総数 &quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">len</span><span class="o">++</span><span class="s">&quot; 個&quot;</span><span class="p">)</span>

<span class="nv">showRing</span> <span class="o">::</span> <span class="n">Ring</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">showRing</span> <span class="p">(</span><span class="n">Ring</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">])</span>
 <span class="o">=</span> <span class="nv">unlines</span> <span class="o">$</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">f</span> <span class="mi">1</span> <span class="nv">q</span> <span class="nv">r</span><span class="p">,</span><span class="nv">f</span> <span class="mi">2</span> <span class="nv">q</span> <span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]</span>
   <span class="kr">where</span> <span class="nv">f</span> <span class="nv">i</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="p">(</span><span class="nv">r</span> <span class="o">!!</span> <span class="nv">i</span><span class="p">)</span><span class="o">:</span><span class="s">&quot;　　&quot;</span><span class="o">++</span><span class="p">[</span><span class="nv">q</span> <span class="o">!!</span> <span class="nv">i</span><span class="p">]</span>

<span class="nv">rings</span> <span class="o">::</span> <span class="p">[</span><span class="n">AString</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">Ring</span>
<span class="nv">rings</span> <span class="o">=</span> <span class="n">S</span><span class="o">.</span><span class="nv">fromList</span> 
      <span class="o">.</span> <span class="nv">map</span> <span class="n">Ring</span>
      <span class="o">.</span> <span class="nv">filterMap</span> <span class="nv">uniq</span> <span class="p">(</span><span class="nv">concatMap</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">fst</span><span class="p">))</span>
      <span class="o">.</span> <span class="nv">concatMap</span> <span class="p">(</span><span class="nv">comb</span> <span class="mi">2</span><span class="p">)</span>
      <span class="o">.</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="nv">eqapp</span> <span class="nv">hdtl</span><span class="p">)</span>
      <span class="o">.</span> <span class="nv">sortBy</span> <span class="p">(</span><span class="nv">cmpapp</span> <span class="nv">hdtl</span><span class="p">)</span> 
      <span class="o">.</span> <span class="nv">followings</span>

<span class="nv">filterMap</span> <span class="nv">p</span> <span class="nv">f</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">filterMap</span> <span class="nv">p</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> 
 <span class="o">=</span> <span class="kr">let</span> <span class="p">{</span> <span class="nv">fx</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span><span class="p">;</span> <span class="nv">j</span> <span class="o">=</span> <span class="nv">p</span> <span class="nv">fx</span> <span class="p">}</span> <span class="kr">in</span> <span class="kr">if</span> <span class="nv">j</span> <span class="kr">then</span> <span class="nv">fx</span> <span class="o">:</span> <span class="nv">filterMap</span> <span class="nv">p</span> <span class="nv">f</span> <span class="nv">xs</span> <span class="kr">else</span> <span class="nv">filterMap</span> <span class="nv">p</span> <span class="nv">f</span> <span class="nv">xs</span>

<span class="nv">hdtl</span> <span class="o">::</span> <span class="p">[</span><span class="n">AString</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">hdtl</span> <span class="p">[(</span><span class="nv">h</span><span class="o">:</span><span class="kr">_</span><span class="p">,</span><span class="kr">_</span><span class="p">),(</span><span class="kr">_</span><span class="p">,</span><span class="nv">t</span><span class="o">:</span><span class="kr">_</span><span class="p">)]</span> <span class="o">=</span> <span class="p">[</span><span class="nv">h</span><span class="p">,</span><span class="nv">t</span><span class="p">]</span>

<span class="nv">followings</span> <span class="o">::</span> <span class="p">[</span><span class="n">AString</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">AString</span><span class="p">]]</span>
<span class="nv">followings</span> <span class="nv">xss</span> <span class="o">=</span> <span class="p">[[</span><span class="nv">xs</span><span class="p">,</span><span class="nv">ys</span><span class="p">]</span> <span class="o">|</span> <span class="nv">xs</span> <span class="o">&lt;-</span> <span class="nv">xss</span><span class="p">,</span> <span class="nv">ys</span> <span class="o">&lt;-</span> <span class="nv">xss</span><span class="p">,</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">xs</span><span class="p">)</span> <span class="o">==</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">ys</span><span class="p">)]</span>

<span class="nv">ring</span> <span class="o">::</span> <span class="p">[[(</span><span class="n">AString</span><span class="p">,</span><span class="n">AString</span><span class="p">)]]</span> <span class="o">-&gt;</span> <span class="p">[[</span><span class="n">String</span><span class="p">]]</span>
<span class="nv">ring</span> <span class="p">[</span><span class="nv">pqs</span><span class="p">,</span><span class="nv">rss</span><span class="p">]</span>
 <span class="o">=</span> <span class="p">[</span><span class="nv">pqrs</span> <span class="o">|</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">pqs</span><span class="p">,</span> <span class="p">(</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">rss</span><span class="p">,</span> <span class="kr">let</span> <span class="nv">pqrs</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">fst</span> <span class="p">[</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">,</span><span class="nv">r</span><span class="p">,</span><span class="nv">s</span><span class="p">]</span>
         <span class="p">,</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">p</span><span class="p">)</span> <span class="o">==</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">fst</span> <span class="nv">r</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">q</span><span class="p">)</span> <span class="o">==</span> <span class="nv">head</span> <span class="p">(</span><span class="nv">snd</span> <span class="nv">s</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">uniq</span> <span class="nv">pqrs</span><span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/addtag/" class="addtag" id="addtag_3697">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3697"
  >-</span><span
  class="button yellow"
  id="rating_z_3697"
  >0</span><span 
  class="button green"
  id="rating_p_3697"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3696/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3697/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3700">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3700/">#3700</a>(<script language="JavaScript">print_time(new Date("2007/11/04 06:16 GMT"));</script><noscript>2007/11/04 06:16 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>あれれ。
showRing の中のローカル関数f の定義(35行目)が変だな。

元のものでも正しく動作するけど、意図としては
      f i x y = (y !! i):"　　"++[x !! i]
が正しい。
   </pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3700/addtag/" class="addtag" id="addtag_3700">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3700"
  >-</span><span
  class="button yellow"
  id="rating_z_3700"
  >0</span><span 
  class="button green"
  id="rating_p_3700"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3697/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3700/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3700/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment3695">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3695/">#3695</a>(<script language="JavaScript">print_time(new Date("2007/11/03 17:36 GMT"));</script><noscript>2007/11/03 17:36 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>先頭の文字をキーとした配列、最後の文字をキーとした配列にふりわけな
がら重複をはじく。それを組み合わせで繋いで今度は一つめの単語の最初
の文字と二つ目の単語の最後の文字を繋いでキーとして分類、同じキーの
中で組み合わせで出力。
12118件出力 Core2Duo 1.2GHz で 0.70秒
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nv">$t</span><span class="o">=</span><span class="nf">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
<span class="nv">$a</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="k">while</span><span class="p">((</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
<span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nf">mb_strlen</span><span class="p">(</span><span class="nv">$str</span><span class="o">=</span><span class="nf">trim</span><span class="p">(</span><span class="nv">$str</span><span class="p">))</span><span class="o">==</span><span class="m">4</span><span class="p">)</span>
    <span class="p">{</span>    <span class="nv">$a</span><span class="p">[</span><span class="nf">mb_substr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="o">-</span><span class="m">1</span><span class="p">)][</span><span class="m">0</span><span class="p">][</span><span class="nv">$str</span><span class="p">]</span><span class="o">=</span><span class="m">1</span><span class="p">;</span>
        <span class="nv">$a</span><span class="p">[</span><span class="nf">mb_substr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)][</span><span class="m">1</span><span class="p">][</span><span class="nv">$str</span><span class="p">]</span><span class="o">=</span><span class="m">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nv">$b</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="k">foreach</span><span class="p">(</span><span class="nv">$a</span> <span class="k">as</span> <span class="nv">$v</span><span class="p">)</span>
<span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nf">count</span><span class="p">(</span><span class="nv">$v</span><span class="p">)</span><span class="o">==</span><span class="m">2</span><span class="p">)</span>
    <span class="p">{</span>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$v</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$k1</span><span class="o">=&gt;</span><span class="nv">$v1</span><span class="p">)</span>
        <span class="p">{</span>    <span class="k">foreach</span><span class="p">(</span><span class="nv">$v</span><span class="p">[</span><span class="m">1</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$k2</span><span class="o">=&gt;</span><span class="nv">$v2</span><span class="p">)</span>
                <span class="nv">$b</span><span class="p">[</span><span class="nf">mb_substr</span><span class="p">(</span><span class="nv">$k1</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span><span class="o">.</span><span class="nf">mb_substr</span><span class="p">(</span><span class="nv">$k2</span><span class="p">,</span><span class="o">-</span><span class="m">1</span><span class="p">)][]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$k1</span><span class="p">,</span><span class="nv">$k2</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">foreach</span><span class="p">(</span><span class="nv">$b</span> <span class="k">as</span> <span class="nv">$v</span><span class="p">)</span>
<span class="p">{</span>    <span class="k">while</span><span class="p">(</span><span class="nf">count</span><span class="p">(</span><span class="nv">$v</span><span class="p">)</span><span class="o">&gt;</span><span class="m">1</span><span class="p">)</span>
    <span class="p">{</span>    <span class="nv">$w1</span><span class="o">=</span><span class="nf">array_pop</span><span class="p">(</span><span class="nv">$v</span><span class="p">);</span>
        <span class="k">foreach</span><span class="p">(</span><span class="nv">$v</span> <span class="k">as</span> <span class="nv">$w2</span><span class="p">)</span>
        <span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nf">mb_substr</span><span class="p">(</span><span class="nv">$w1</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span><span class="o">!=</span><span class="nf">mb_substr</span><span class="p">(</span><span class="nv">$w2</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">))</span>
                <span class="k">echo</span> <span class="s2">&quot;</span><span class="si">${</span><span class="nv">w1[0]},${w1[1]},${w2[0]},${w2[1]</span><span class="si">}</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nf">fwrite</span><span class="p">(</span><span class="nx">STDERR</span><span class="p">,(</span><span class="nf">microtime</span><span class="p">(</span><span class="k">true</span><span class="p">)</span><span class="o">-</span><span class="nv">$t</span><span class="p">)</span><span class="o">.</span><span class="s2">&quot;sec</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3695/addtag/" class="addtag" id="addtag_3695">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3695/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3695/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3695"
  >-</span><span
  class="button yellow"
  id="rating_z_3695"
  >0</span><span 
  class="button green"
  id="rating_p_3695"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3695/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  

  

  

  

  
    





<div class="comment" id="comment3778">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3778/">#3778</a>(<script language="JavaScript">print_time(new Date("2007/11/09 14:53 GMT"));</script><noscript>2007/11/09 14:53 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/prolog/">
	  Prolog
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>12116組となりました。
件数が違うことが気になったので、Prologバカサーチで件数を確認しました。
12118件との差異は、
/一切即一/一唱三嘆/一読三嘆/嘆息嗟嘆/
/一切即一/一場春夢/一炊之夢/夢中説夢/
の2件について、それぞれ2パターン生成できるのですが、それをどう数えるかによります。
プログラムの結果として生成するresultというファイルは12118件、しかし、sort|uniqに相当する操作の結果の件数(リストの長さ)は12116となります。
さて、題意はどちらだったのでしょう？</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33</pre></td><td class="code"><div class="highlight"><pre>:-dynamic(for4/4).
for4:-
    reader,
    tell(&#39;result&#39;),
    setof(F,match(F),M),
    seen,
    length(M,L),display(L),ttynl.
reader:-
    see(&#39;for4.txt&#39;),
    repeat, getln(L), parse(L), L==[],!,
    seen.
parse([C|L]):-C\=0&#39;    ,!,parse(L).
parse([_,C1,C2,C3,C4|_]):-for4(C1,C2,C3,C4),!.
parse([_,C1,C2,C3,C4|_]):-!,
    asserta(for4(C1,C2,C3,C4)).
parse([]).

match(F):-
    for4(A1,A2,A3,A4),
    for4(A1,B2,B3,B4), A4&gt;B4,
    for4(A4,C2,C3,C4),
    for4(B4,D2,D3,C4),
     F0=[
    for4(A1,A2,A3,A4),
    for4(A1,B2,B3,B4),
    for4(A4,C2,C3,C4),
    for4(B4,D2,D3,C4)],
    sort(F0,F),
    pp(F).
pp([for4(X1,X2,X3,X4)|L]):-!,
    put(0&#39;/),put(X1), put(X2), put(X3), put(X4),
    pp(L).
pp([]):-put(0&#39;/),nl.
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3778/addtag/" class="addtag" id="addtag_3778">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/prolog/">
		Prolog
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3778/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3778/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3778"
  >-</span><span
  class="button yellow"
  id="rating_z_3778"
  >0</span><span 
  class="button green"
  id="rating_p_3778"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3778/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3824">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/543/" target="_top">cyberdoctor</a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3824/">#3824</a>(<script language="JavaScript">print_time(new Date("2007/11/10 22:29 GMT"));</script><noscript>2007/11/10 22:29 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>結果の総数は 12118 件でした．
実行時間は Power PC 1.5GHz で 10 秒程度．
元データは CP932 で取り込んで重複を除いた 8312 件で、変数 word に格納済み．</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre>w &lt;- data.frame(idx = seq(along=word), body=word,
    head = substr(word, 1, 1), tail = substr(word, 4, 4))
w13 &lt;- merge(w, w, by.x=&quot;tail&quot;, by.y=&quot;head&quot;)
w13$head.tail &lt;- paste(w13$head, w13$tail.1)
w1234 &lt;- merge(w13, w13, by=&quot;head.tail&quot;, sort=FALSE)
w1234 &lt;- subset(w1234, tail.x != tail.y &amp; idx.x.x &lt; idx.x.y,
    select=grep(&#39;body&#39;, names(w1234), value=TRUE))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3824/addtag/" class="addtag" id="addtag_3824">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3824/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3824/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3824"
  >-</span><span
  class="button yellow"
  id="rating_z_3824"
  >0</span><span 
  class="button green"
  id="rating_p_3824"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3824/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3829">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/535/" target="_top">nantan</a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3829/">#3829</a>(<script language="JavaScript">print_time(new Date("2007/11/11 00:52 GMT"));</script><noscript>2007/11/11 00:52 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>初投稿です。
四字熟語の異音による重複を排除してから処理を行っています。
処理結果は12116組の検出でした。（処理時間：5156ms、環境：Pen4 2.4GHz）
※組み合わせの検出を行っているため、処理結果は回転や入れ替えによる重複は単純に排除してあります。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92</pre></td><td class="code"><div class="highlight"><pre><span class="k">package</span> <span class="n">nt</span><span class="o">.</span><span class="na">doukaku</span><span class="o">;</span>

<span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Jukugo</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">words</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">headChars</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">headMap</span><span class="o">;</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
<span class="c">//        long start = System.currentTimeMillis();</span>
        <span class="n">init</span><span class="o">();</span>
        <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">[]&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">[]&gt;();</span>
        <span class="kt">int</span> <span class="n">top</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">upperRight</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">word</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">lefts</span> <span class="o">=</span> <span class="n">findChars</span><span class="o">(</span><span class="n">headChars</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">top</span><span class="o">));</span>
            <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">rights</span> <span class="o">=</span> <span class="n">findChars</span><span class="o">(</span><span class="n">upperRight</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">left</span> <span class="o">:</span> <span class="n">lefts</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">String</span> <span class="n">lowerLeft</span> <span class="o">=</span>
                    <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">left</span><span class="o">).</span><span class="na">substring</span><span class="o">(</span><span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">left</span><span class="o">).</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">upperRight</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">lowerLeft</span><span class="o">))</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">bottoms</span> <span class="o">=</span> <span class="n">findChars</span><span class="o">(</span><span class="n">lowerLeft</span><span class="o">);</span>
                <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">right</span> <span class="o">:</span> <span class="n">rights</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">String</span> <span class="n">lowerRight</span> <span class="o">=</span>
                        <span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">right</span><span class="o">).</span><span class="na">substring</span><span class="o">(</span><span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">right</span><span class="o">).</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
                    <span class="k">for</span> <span class="o">(</span><span class="n">Integer</span> <span class="n">bottom</span> <span class="o">:</span> <span class="n">bottoms</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">if</span> <span class="o">(</span><span class="n">words</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">bottom</span><span class="o">).</span><span class="na">endsWith</span><span class="o">(</span><span class="n">lowerRight</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">Integer</span><span class="o">[]</span> <span class="n">i</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Integer</span><span class="o">[]{</span><span class="n">top</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">,</span> <span class="n">bottom</span><span class="o">};</span>
                            <span class="n">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
                            <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">i</span><span class="o">);</span>
                            
                        <span class="o">}</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">top</span><span class="o">++;</span>
        <span class="o">}</span>
        <span class="n">Collection</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">[]&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">values</span><span class="o">();</span>
<span class="c">//        long end = System.currentTimeMillis();</span>
<span class="c">//        System.out.println(&quot;count: &quot; + res.size());</span>
<span class="c">//        System.out.println(&quot;time: &quot; + (end - start) + &quot;ms&quot;);</span>
<span class="c">//        for (Integer[] i : res) {</span>
<span class="c">//            System.out.println(</span>
<span class="c">//                words.get(i[0]) + &quot;,&quot; + words.get(i[1]) + &quot;,&quot;</span>
<span class="c">//                    + words.get(i[2]) + &quot;,&quot; + words.get(i[3]));</span>
<span class="c">//        }</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="n">BufferedReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="s">&quot;words.txt&quot;</span><span class="o">)));</span>
            <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">reader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">reader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">reader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">words</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">set</span><span class="o">);</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">words</span><span class="o">);</span>
        <span class="n">headMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">headChars</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;(</span><span class="n">words</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">word</span> <span class="o">:</span> <span class="n">words</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">head</span> <span class="o">=</span> <span class="n">word</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">headChars</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">headMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">head</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">headMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">index</span><span class="o">++;</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">findChars</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">pickIndex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">headMap</span><span class="o">.</span><span class="na">containsKey</span><span class="o">(</span><span class="n">s</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">Collections</span><span class="o">.</span><span class="na">emptyList</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="n">headMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="n">pickIndex</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">index</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">headChars</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">headChars</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)))</span> <span class="o">{</span>
                <span class="n">pickIndex</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">pickIndex</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3829/addtag/" class="addtag" id="addtag_3829">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3829/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3829/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3829"
  >-</span><span
  class="button yellow"
  id="rating_z_3829"
  >0</span><span 
  class="button green"
  id="rating_p_3829"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3829/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3839">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/514/" target="_top">ocaml-nagoya</a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3839/">#3839</a>(<script language="JavaScript">print_time(new Date("2007/11/11 07:05 GMT"));</script><noscript>2007/11/11 07:05 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>188秒@Pen4 2.6GHz 12118件でした。
頭のハッシュテーブル、尻のハッシュテーブルを作って、そこから頭尻のハッシュテーブルを作る。
結果から回転や反転などの重複を消すのにもハッシュテーブルを使う。
ハッシュテーブルとダンスでもしてな。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">combinations</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="nv">ht-head</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;eqv?</span><span class="p">))</span>
<span class="p">(</span><span class="k">define </span><span class="nv">ht-tail</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;eqv?</span><span class="p">))</span>
<span class="p">(</span><span class="k">define </span><span class="nv">ht-headtail</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;string=?</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">print-puzzle</span> <span class="nv">j0</span> <span class="nv">j1</span> <span class="nv">j2</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j0</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;　　&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot;　　&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">2</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">call-with-input-file </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">in</span><span class="p">)</span>
                                      <span class="p">(</span><span class="nf">port-for-each</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">x</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-tail</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">3</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">read-line</span> <span class="nv">in</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span> <span class="nv">ht-tail</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">key-tail</span> <span class="nv">value-tail</span><span class="p">)</span>
                                 <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                             <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-headtail</span> <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="nv">key-tail</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>
                                           <span class="p">(</span><span class="nf">filter</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)))</span> <span class="nv">value-tail</span><span class="p">))))</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">all-keys</span> <span class="p">(</span><span class="nf">hash-table-keys</span> <span class="nv">ht-headtail</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">ht-dup</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">)))</span>
    <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w0</span><span class="p">)</span>
                <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w3</span><span class="p">)</span>
                            <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">w1</span> <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">w0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w3</span> <span class="mi">1</span><span class="p">)))</span>
                                  <span class="p">(</span><span class="nf">w2</span> <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">w0</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w3</span> <span class="mi">0</span><span class="p">))))</span>
                              <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">char=? </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">w1</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w3</span> <span class="mi">0</span><span class="p">)))</span>
                                         <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w1</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w2</span><span class="p">))</span>
                                <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">ht-dup</span> <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">)))))</span>
                          <span class="nv">all-keys</span><span class="p">))</span>
              <span class="nv">all-keys</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">hash-table-for-each</span> <span class="nv">ht-dup</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">key</span> <span class="nv">value</span><span class="p">)</span>
                                  <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">print-puzzle</span> <span class="nv">x</span><span class="p">))</span>
                                            <span class="p">(</span><span class="nf">cartesian-product</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                                                      <span class="p">(</span><span class="nf">hash-table-get</span> <span class="nv">ht-headtail</span> <span class="nv">x</span><span class="p">))</span>
                                                                    <span class="nv">value</span><span class="p">)))))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3839/addtag/" class="addtag" id="addtag_3839">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3839/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3839/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3839"
  >-</span><span
  class="button yellow"
  id="rating_z_3839"
  >0</span><span 
  class="button green"
  id="rating_p_3839"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3839/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3867">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/514/" target="_top">ocaml-nagoya</a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3867/">#3867</a>(<script language="JavaScript">print_time(new Date("2007/11/11 16:31 GMT"));</script><noscript>2007/11/11 16:31 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>少し高速化しました。157秒@Pen4 2.6GHz</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">combinations</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">print-puzzle</span> <span class="nv">j0</span> <span class="nv">j1</span> <span class="nv">j2</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j0</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;　　&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot;　　&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">2</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-head</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;eqv?</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-headtail</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;string=?</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-dup</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">call-with-input-file </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">in</span><span class="p">)</span>
                                      <span class="p">(</span><span class="nf">port-for-each</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-headtail</span> <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">x</span><span class="p">))</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">read-line</span> <span class="nv">in</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span>
   <span class="nv">ht-headtail</span>
   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w0</span> <span class="nv">_</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w0</span> <span class="mi">1</span><span class="p">))</span>
       <span class="p">(</span><span class="nf">hash-table-for-each</span>
        <span class="nv">ht-headtail</span>
        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w3</span> <span class="nv">_</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">char=? </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">w0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w3</span> <span class="mi">0</span><span class="p">))</span>
            <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">w1</span> <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">w0</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w3</span> <span class="mi">1</span><span class="p">)))</span>
                  <span class="p">(</span><span class="nf">w2</span> <span class="p">(</span><span class="nb">string </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">w0</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">w3</span> <span class="mi">0</span><span class="p">))))</span>
              <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w1</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w2</span><span class="p">))</span>
                <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">ht-dup</span> <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">))</span> <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">))))))))))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span> <span class="nv">ht-dup</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">key</span> <span class="nv">value</span><span class="p">)</span>
                                <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">print-puzzle</span> <span class="nv">x</span><span class="p">))</span>
                                          <span class="p">(</span><span class="nf">cartesian-product</span> <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                                                    <span class="p">(</span><span class="nf">hash-table-get</span> <span class="nv">ht-headtail</span> <span class="nv">x</span><span class="p">))</span>
                                                                  <span class="nv">value</span><span class="p">))))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3867/addtag/" class="addtag" id="addtag_3867">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3867/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3867/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3867"
  >-</span><span
  class="button yellow"
  id="rating_z_3867"
  >0</span><span 
  class="button green"
  id="rating_p_3867"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090519001707/http://ja.doukaku.org/comment/3867/">
    1
    reply
  </a>

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3867/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3887">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3887/">#3887</a>(<script language="JavaScript">print_time(new Date("2007/11/12 01:54 GMT"));</script><noscript>2007/11/12 01:54 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>アルゴリズムは変えずにもう少し速くしてみました。
</p>
<ul>
 <li>
     string-refは最悪O(n)になるので内側のループで使うのは避けた方が良いでしょう。
 </li>

 <li>
     string=? hash tableは一般にはequal? hash tableより速いですが、#3867の場合、lookupのたびに文字列を作るので、今回はequal? hash tableにしてキーは文字をconsするだけの方が速いです。
 </li>

 <li>
     cartesian-productの結果をfor-eachに食わせるなら、cartesian-product-for-eachを使うと中間リストを作らずに済みます。
 </li>

 <li>
     ht-headは存在チェックだけやってるのでhash-table-push!する必要はないですね。
 </li>
</ul>
<p>手元では3.5倍くらい速くなりました。これ以上はアルゴリズムの工夫かな。
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">combinations</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">print-puzzle</span> <span class="nv">j0</span> <span class="nv">j1</span> <span class="nv">j2</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j0</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;\u3000\u3000&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot;\u3000\u3000&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">2</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-head</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;eqv?</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-headtail</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-dup</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">with-input-from-file </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">cut</span> <span class="nv">port-for-each</span>
         <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
           <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-headtail</span>
                             <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">3</span><span class="p">))</span>
                             <span class="nv">x</span><span class="p">))</span>
         <span class="nv">read-line</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span>
   <span class="nv">ht-headtail</span>
   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w0</span> <span class="nv">_</span><span class="p">)</span>
     <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">w0</span><span class="p">))</span>
       <span class="p">(</span><span class="nf">hash-table-for-each</span>
        <span class="nv">ht-headtail</span>
        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w3</span> <span class="nv">_</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">char=? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">w0</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">w3</span><span class="p">))</span>
            <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">w1</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">w0</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">w3</span><span class="p">)))</span>
                  <span class="p">(</span><span class="nf">w2</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">w0</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">w3</span><span class="p">))))</span>
              <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w1</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w2</span><span class="p">))</span>
                <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">ht-dup</span>
                                 <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">)</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span>
                                         <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">char&lt;? </span><span class="p">(</span><span class="nb">car </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">b</span><span class="p">))</span>
                                             <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">char=? </span><span class="p">(</span><span class="nb">car </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">b</span><span class="p">))</span>
                                                  <span class="p">(</span><span class="nb">char&lt;? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">b</span><span class="p">))))))</span>
                                 <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">))))))))))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span> <span class="nv">ht-dup</span>
                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">key</span> <span class="nv">value</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">cartesian-product-for-each</span>
                          <span class="p">(</span><span class="nf">cut</span> <span class="nv">apply</span> <span class="nv">print-puzzle</span> <span class="nv">&lt;&gt;</span><span class="p">)</span>
                          <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">cut</span> <span class="nv">hash-table-get</span> <span class="nv">ht-headtail</span> <span class="nv">&lt;&gt;</span><span class="p">)</span> <span class="nv">value</span><span class="p">)))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3887/addtag/" class="addtag" id="addtag_3887">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3887/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3887/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3887"
  >-</span><span
  class="button yellow"
  id="rating_z_3887"
  >0</span><span 
  class="button green"
  id="rating_p_3887"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3867/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090519001707/http://ja.doukaku.org/comment/3887/root/"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3887/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3892">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/514/" target="_top">ocaml-nagoya</a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3892/">#3892</a>(<script language="JavaScript">print_time(new Date("2007/11/12 07:28 GMT"));</script><noscript>2007/11/12 07:28 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>そして何よりもっ!速さがたりない!
ああ、また計算量を縮めてしまった。

アルゴリズムを見直したら1.6秒になりました。Gaucheはすごいです。
一発でこれを投稿できるようになりたいです。
shiro氏の助言(#3887)に感謝します。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">util</span><span class="o">.</span><span class="nv">combinations</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">print-puzzle</span> <span class="nv">j0</span> <span class="nv">j1</span> <span class="nv">j2</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j0</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">1</span><span class="p">)</span> <span class="s">&quot;\u3000\u3000&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">1</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j2</span> <span class="mi">2</span><span class="p">)</span> <span class="s">&quot;\u3000\u3000&quot;</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">j1</span> <span class="mi">2</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">print</span> <span class="nv">j3</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">newline</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-head</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;eqv?</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-headtail</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">))</span>
  <span class="p">(</span><span class="k">define </span><span class="nv">ht-dup</span> <span class="p">(</span><span class="nf">make-hash-table</span> <span class="ss">&#39;equal?</span><span class="p">))</span>
  <span class="p">(</span><span class="nb">call-with-input-file </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">in</span><span class="p">)</span>
                                      <span class="p">(</span><span class="nf">port-for-each</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
                                         <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-headtail</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">string-ref </span><span class="nv">x</span> <span class="mi">3</span><span class="p">))</span> <span class="nv">x</span><span class="p">))</span>
                                       <span class="p">(</span><span class="k">lambda </span><span class="p">()</span> <span class="p">(</span><span class="nf">read-line</span> <span class="nv">in</span><span class="p">)))))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span> <span class="nv">ht-headtail</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">key</span> <span class="nv">_</span><span class="p">)</span>
                                     <span class="p">(</span><span class="nf">hash-table-push!</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">car </span><span class="nv">key</span><span class="p">)</span> <span class="nv">key</span><span class="p">)))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span> 
   <span class="nv">ht-headtail</span>
   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w0</span> <span class="nv">_</span><span class="p">)</span>
     <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w1</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">for-each </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">w2</span><span class="p">)</span>
                             <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">char=? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">w0</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">w2</span><span class="p">))</span>
                               <span class="p">(</span><span class="nf">let1</span> <span class="nv">w3</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">w2</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">w1</span><span class="p">))</span>
                                 <span class="p">(</span><span class="nf">when</span> <span class="p">(</span><span class="nf">hash-table-exists?</span> <span class="nv">ht-headtail</span> <span class="nv">w3</span><span class="p">)</span>
                                   <span class="p">(</span><span class="nf">hash-table-put!</span> <span class="nv">ht-dup</span>
                                                    <span class="p">(</span><span class="nf">sort</span> <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">)</span>
                                                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span>
                                                            <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">char&lt;? </span><span class="p">(</span><span class="nb">car </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">b</span><span class="p">))</span>
                                                                <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">char=? </span><span class="p">(</span><span class="nb">car </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">b</span><span class="p">))</span>
                                                                     <span class="p">(</span><span class="nb">char&lt;? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">b</span><span class="p">))))))</span>
                                                    <span class="p">(</span><span class="nb">list </span><span class="nv">w0</span> <span class="nv">w1</span> <span class="nv">w2</span> <span class="nv">w3</span><span class="p">))))))</span>
                           <span class="p">(</span><span class="nf">hash-table-get</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">car </span><span class="nv">w0</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())))</span>
               <span class="p">(</span><span class="nf">hash-table-get</span> <span class="nv">ht-head</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">w0</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()))))</span>
  <span class="p">(</span><span class="nf">hash-table-for-each</span> <span class="nv">ht-dup</span>
                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">_</span> <span class="nv">value</span><span class="p">)</span>
                         <span class="p">(</span><span class="nf">cartesian-product-for-each</span>
                          <span class="p">(</span><span class="nf">cut</span> <span class="nv">apply</span> <span class="nv">print-puzzle</span> <span class="nv">&lt;&gt;</span><span class="p">)</span>
                          <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="nf">cut</span> <span class="nv">hash-table-get</span> <span class="nv">ht-headtail</span> <span class="nv">&lt;&gt;</span><span class="p">)</span> <span class="nv">value</span><span class="p">)))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/3892/addtag/" class="addtag" id="addtag_3892">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/Gauche/">Gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3892/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/3892/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3892"
  >-</span><span
  class="button yellow"
  id="rating_z_3892"
  >0</span><span 
  class="button green"
  id="rating_p_3892"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/3892/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment8248">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/560/" target="_top">ihag</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/8248/">#8248</a>(<script language="JavaScript">print_time(new Date("2008/12/22 16:49 GMT"));</script><noscript>2008/12/22 16:49 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Cで．結果は12107件でした．</p>
<p>実行時間は手元の環境(Athlon 64 3500+)だと2分43秒でした．うーん遅い．総当たりなのが問題かな．</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;unistd.h&gt;</span>
<span class="cp">#include &lt;wchar.h&gt;</span>
<span class="cp">#include &lt;locale.h&gt;</span>

<span class="cp">#define HASH_TABLE_MAX 257</span>
<span class="cp">#define HASH_KEY_MAX 256</span>
<span class="cp">#define LIST_VALUE_MAX 8</span>

<span class="cp">#define handle_error(str) do {\</span>
<span class="cp">    perror(str); exit(EXIT_FAILURE); } while (0)</span>
<span class="cp">#define error_nullfree(str) do { \</span>
<span class="cp">    fprintf(stderr, \</span>
<span class="cp">            &quot;ERROR: %s: Tried free for NULL pointer\n&quot;, str); \</span>
<span class="cp">    exit(EXIT_FAILURE); \</span>
<span class="cp">} while(0)</span>

<span class="cp">#define DEF_STRUCT_NEW(prefix, type) \</span>
<span class="cp">    type * prefix ## _new(void) { \</span>
<span class="cp">        type *r; \</span>
<span class="cp">        if ((r = calloc(1, sizeof(type))) == NULL) \</span>
<span class="cp">            handle_error(#prefix &quot;: calloc&quot;); \</span>
<span class="cp">        return r; \</span>
<span class="cp">    }</span>
<span class="cp">#define DEF_STRUCT_FREE(prefix, type) \</span>
<span class="cp">    void _ ## prefix ## _free(type *ptr) { \</span>
<span class="cp">        if (ptr == NULL) \</span>
<span class="cp">            error_nullfree(#prefix); \</span>
<span class="cp">        free(ptr); \</span>
<span class="cp">    }</span>
<span class="cp">#define DEF_SLIST_FREE(prefix, type) \</span>
<span class="cp">    void _ ## prefix ## _free(type *head) { \</span>
<span class="cp">        type *p, *next; \</span>
<span class="cp">        if (head == NULL) \</span>
<span class="cp">            error_nullfree(#prefix); \</span>
<span class="cp">        for (p = head; p != NULL; p = next) { \</span>
<span class="cp">            next = p-&gt;next; \</span>
<span class="cp">            free(p); \</span>
<span class="cp">        } \</span>
<span class="cp">    }</span>
<span class="cp">#define DEF_STRUCT_COMMON(prefix, type) \</span>
<span class="cp">    DEF_STRUCT_NEW(prefix, type) \</span>
<span class="cp">    DEF_STRUCT_FREE(prefix, type)</span>
<span class="cp">#define DEF_SLIST_COMMON(prefix, type) \</span>
<span class="cp">    DEF_STRUCT_NEW(prefix, type) \</span>
<span class="cp">    DEF_SLIST_FREE(prefix, type)</span>

<span class="k">struct</span> <span class="n">list_t</span> <span class="p">{</span>
    <span class="n">wchar_t</span> <span class="n">value</span><span class="p">[</span><span class="n">LIST_VALUE_MAX</span><span class="p">];</span>
    <span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">pair_t</span> <span class="p">{</span>
    <span class="n">wchar_t</span> <span class="n">key</span><span class="p">[</span><span class="n">HASH_KEY_MAX</span><span class="p">];</span>
    <span class="k">struct</span> <span class="n">list_t</span> <span class="n">list</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">next</span><span class="p">;</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">hash_t</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">table</span><span class="p">[</span><span class="n">HASH_TABLE_MAX</span><span class="p">];</span>
<span class="p">};</span>
<span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">dict_wordid</span><span class="p">,</span> <span class="o">*</span><span class="n">dict_head</span><span class="p">,</span> <span class="o">*</span><span class="n">dict_tail</span><span class="p">,</span> <span class="o">*</span><span class="n">dict_comb</span><span class="p">;</span>


<span class="n">DEF_SLIST_COMMON</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="k">struct</span> <span class="n">list_t</span><span class="p">);</span>
<span class="n">DEF_SLIST_COMMON</span><span class="p">(</span><span class="n">pair</span><span class="p">,</span> <span class="k">struct</span> <span class="n">pair_t</span><span class="p">);</span>
<span class="n">DEF_STRUCT_COMMON</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="k">struct</span> <span class="n">hash_t</span><span class="p">);</span>

<span class="kt">void</span>
<span class="nf">list_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">_list_free</span><span class="p">(</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">list_push</span><span class="p">(</span><span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">head</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;ERROR: list_push caught NULL pointer</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
        <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_FAILURE</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">);</span>

    <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">list_new</span><span class="p">();</span>
    <span class="n">wcsncpy</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">LIST_VALUE_MAX</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">list_dump</span><span class="p">(</span><span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">head</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span>
    <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;[&#39;</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">;</span> <span class="n">cur</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%ls&quot;</span><span class="p">,</span> <span class="p">(</span><span class="n">cur</span> <span class="o">==</span> <span class="n">head</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="o">?</span> <span class="s">&quot;&quot;</span> <span class="o">:</span> <span class="s">&quot;, &quot;</span><span class="p">,</span>
                        <span class="n">cur</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;]&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">pair_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">pair</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">pair</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">.</span><span class="n">next</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">list_free</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pair</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">);</span>
    <span class="n">_pair_free</span><span class="p">(</span><span class="n">pair</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">pair_store</span><span class="p">(</span><span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">key</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">wcsncpy</span><span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">HASH_KEY_MAX</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">list_push</span><span class="p">(</span><span class="o">&amp;</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">hash_free</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">hash</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">HASH_TABLE_MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">hash</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="n">pair_free</span><span class="p">(</span><span class="n">hash</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="n">_hash_free</span><span class="p">(</span><span class="n">hash</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">u_int</span>
<span class="nf">hash_key</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">u_int</span> <span class="n">hash</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">wchar_t</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
        <span class="n">hash</span> <span class="o">=</span> <span class="p">(</span><span class="n">hash</span> <span class="o">+</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="o">%</span> <span class="n">HASH_TABLE_MAX</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">hash</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span>
<span class="nf">hash_regist_key</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">u_int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">hash_key</span><span class="p">(</span><span class="n">key</span><span class="p">);</span>
    <span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">,</span> <span class="o">*</span><span class="n">prev</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">head</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">pos</span><span class="p">])</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">pair_store</span><span class="p">(</span><span class="n">head</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">=</span> <span class="n">pair_new</span><span class="p">(),</span> <span class="n">key</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
        <span class="k">return</span><span class="p">(</span><span class="o">&amp;</span><span class="n">head</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span> <span class="n">cur</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">wcsncmp</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">HASH_KEY_MAX</span><span class="p">))</span>
            <span class="k">return</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">);</span>
        <span class="n">prev</span> <span class="o">=</span> <span class="n">cur</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">pair_store</span><span class="p">(</span><span class="n">cur</span> <span class="o">=</span> <span class="n">prev</span><span class="o">-&gt;</span><span class="n">next</span> <span class="o">=</span> <span class="n">pair_new</span><span class="p">(),</span> <span class="n">key</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
    <span class="k">return</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">hash_value_push</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span><span class="p">(</span><span class="n">list_push</span><span class="p">(</span><span class="n">hash_regist_key</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">),</span> <span class="n">value</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span>
<span class="nf">hash_retrieve</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">head</span><span class="p">,</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">head</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">hash_key</span><span class="p">(</span><span class="n">key</span><span class="p">)])</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="p">;</span> <span class="n">cur</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">wcsncmp</span><span class="p">(</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">HASH_KEY_MAX</span><span class="p">))</span>
            <span class="k">return</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">hash_has_key</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span><span class="p">(</span><span class="n">hash_retrieve</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">hash_dump</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="kt">int</span> <span class="n">with_keys</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">cur</span><span class="p">;</span>
    <span class="n">u_int</span> <span class="n">i</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">HASH_TABLE_MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">cur</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">with_keys</span><span class="p">)</span>
                <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\&quot;</span><span class="s">%ls</span><span class="se">\&quot;</span><span class="s"> =&gt; &quot;</span><span class="p">,</span> <span class="n">cur</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span>
            <span class="n">list_dump</span><span class="p">(</span><span class="o">&amp;</span><span class="n">cur</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">);</span>
            <span class="n">putchar</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>


<span class="n">wchar_t</span> <span class="o">*</span>
<span class="nf">chomp</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">wchar_t</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">p</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">L&#39;\n&#39;</span><span class="p">)</span> <span class="p">{</span>
            <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">wchar_t</span>
<span class="nf">strhead</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
<span class="p">}</span>

<span class="n">wchar_t</span>
<span class="nf">strtail</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">size_t</span> <span class="n">len</span> <span class="o">=</span> <span class="n">wcslen</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
    <span class="k">return</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">len</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">is_exists</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">wcscmp</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">key</span><span class="p">))</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span>
<span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">former</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">latter</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span><span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">u_int</span> <span class="o">*</span><span class="p">)</span> <span class="n">former</span><span class="p">)</span> <span class="o">-</span>
           <span class="o">*</span><span class="p">((</span><span class="n">u_int</span> <span class="o">*</span><span class="p">)</span> <span class="n">latter</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">comb_set</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">wchar_t</span> <span class="o">*</span><span class="n">str</span><span class="p">,</span> <span class="n">combstr</span><span class="p">[</span><span class="n">HASH_KEY_MAX</span><span class="p">];</span>
    <span class="n">u_int</span> <span class="n">wordid</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span>
    <span class="n">size_t</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>

    <span class="c">/* reject if [1,0] == [0,1] */</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">strtail</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="n">strtail</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="mi">3</span><span class="p">]))</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">list</span><span class="p">;</span>
        <span class="n">list</span> <span class="o">=</span> <span class="n">hash_retrieve</span><span class="p">(</span><span class="n">dict_wordid</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="n">str</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">next</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
        <span class="n">swscanf</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="s">L&quot;%u&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">wordid</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="n">qsort</span><span class="p">(</span><span class="n">wordid</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">wordid</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">u_int</span><span class="p">),</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">u_int</span><span class="p">),</span> <span class="n">compare</span><span class="p">);</span>

    <span class="c">/* elements duplicate check */</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">wordid</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">wordid</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
                <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="c">/* duplicated */</span>

    <span class="c">/* create combination-id into combstr */</span>
    <span class="n">swprintf</span><span class="p">(</span><span class="n">combstr</span><span class="p">,</span> <span class="n">HASH_KEY_MAX</span><span class="p">,</span> <span class="s">L&quot;%u:%u:%u:%u&quot;</span><span class="p">,</span> 
             <span class="n">wordid</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">wordid</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">wordid</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">wordid</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span>  <span class="c">/* XXX */</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">hash_has_key</span><span class="p">(</span><span class="n">dict_comb</span><span class="p">,</span> <span class="n">combstr</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
            <span class="n">hash_value_push</span><span class="p">(</span><span class="n">dict_comb</span><span class="p">,</span> <span class="n">combstr</span><span class="p">,</span> <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">dict_load</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">FILE</span> <span class="o">*</span><span class="n">fd</span><span class="p">;</span>
    <span class="n">wchar_t</span> <span class="n">buf</span><span class="p">[</span><span class="n">LIST_VALUE_MAX</span><span class="p">],</span> <span class="n">key</span><span class="p">[</span><span class="n">HASH_KEY_MAX</span><span class="p">],</span> <span class="n">idstr</span><span class="p">[</span><span class="n">LIST_VALUE_MAX</span><span class="p">];</span>
    <span class="n">u_int</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;fopen&quot;</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">fgetws</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">wchar_t</span><span class="p">),</span> <span class="n">fd</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">chomp</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
        <span class="n">key</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span>
        <span class="n">key</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strhead</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
        <span class="n">hash_value_push</span><span class="p">(</span><span class="n">dict_head</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>
        <span class="n">key</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strtail</span><span class="p">(</span><span class="n">buf</span><span class="p">);</span>
        <span class="n">hash_value_push</span><span class="p">(</span><span class="n">dict_tail</span><span class="p">,</span> <span class="n">key</span><span class="p">,</span> <span class="n">buf</span><span class="p">);</span>

        <span class="n">swprintf</span><span class="p">(</span><span class="n">idstr</span><span class="p">,</span> <span class="n">LIST_VALUE_MAX</span><span class="p">,</span> <span class="s">L&quot;%u&quot;</span><span class="p">,</span> <span class="o">++</span><span class="n">id</span><span class="p">);</span>
        <span class="n">hash_value_push</span><span class="p">(</span><span class="n">dict_wordid</span><span class="p">,</span> <span class="n">buf</span><span class="p">,</span> <span class="n">idstr</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">fclose</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">hash_each_do</span><span class="p">(</span><span class="k">struct</span> <span class="n">hash_t</span> <span class="o">*</span><span class="n">self</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">cond</span><span class="p">,</span>
             <span class="kt">void</span> <span class="p">(</span><span class="o">*</span><span class="n">proc</span><span class="p">)(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">**</span><span class="p">,</span> <span class="kt">int</span><span class="p">),</span>
             <span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">words_index</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">struct</span> <span class="n">pair_t</span> <span class="o">*</span><span class="n">pair</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">list_t</span> <span class="o">*</span><span class="n">list</span><span class="p">;</span>
    <span class="n">u_int</span> <span class="n">i</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">HASH_TABLE_MAX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">pair</span> <span class="o">=</span> <span class="n">self</span><span class="o">-&gt;</span><span class="n">table</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">pair</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">pair</span> <span class="o">=</span> <span class="n">pair</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">((</span><span class="n">cond</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">wcscmp</span><span class="p">(</span><span class="n">pair</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">cond</span><span class="p">))</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="c">/* key maches exactry. now follow the list. */</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">list</span> <span class="o">=</span> <span class="n">pair</span><span class="o">-&gt;</span><span class="n">list</span><span class="p">.</span><span class="n">next</span><span class="p">;</span> <span class="n">list</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">is_exists</span><span class="p">(</span><span class="n">pair</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">words_index</span><span class="p">))</span>
                    <span class="k">continue</span><span class="p">;</span>
                <span class="p">(</span><span class="o">*</span><span class="n">proc</span><span class="p">)(</span><span class="n">pair</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">,</span> <span class="n">list</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">words_index</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">proc4</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>  <span class="c">/* [0,1] -&gt; [0,0] */</span>
    <span class="n">wchar_t</span> <span class="n">head</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">head_of_strings</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strhead</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="n">head_of_strings</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strhead</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="n">head</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">head_of_strings</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span>

    <span class="n">wcscpy</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">value</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">head_of_strings</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">comb_set</span><span class="p">(</span><span class="n">words</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">proc3</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>  <span class="c">/* [1,1] -&gt; [0,1] */</span>
    <span class="n">wchar_t</span> <span class="n">head</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="n">head</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strhead</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="n">head</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span>

    <span class="n">wcscpy</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">value</span><span class="p">);</span>
    <span class="n">hash_each_do</span><span class="p">(</span><span class="n">dict_tail</span><span class="p">,</span> <span class="n">head</span><span class="p">,</span> <span class="n">proc4</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">proc2</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>  <span class="c">/* [1,0] -&gt; [1,1] */</span>
    <span class="n">wchar_t</span> <span class="n">tail</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="n">tail</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strtail</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="n">tail</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span>

    <span class="n">wcscpy</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">value</span><span class="p">);</span>
    <span class="n">hash_each_do</span><span class="p">(</span><span class="n">dict_tail</span><span class="p">,</span> <span class="n">tail</span><span class="p">,</span> <span class="n">proc3</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">proc1</span><span class="p">(</span><span class="n">wchar_t</span> <span class="o">*</span><span class="n">key</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">value</span><span class="p">,</span> <span class="n">wchar_t</span> <span class="o">**</span><span class="n">words</span><span class="p">,</span> <span class="kt">int</span> <span class="n">c</span><span class="p">)</span>
<span class="p">{</span>  <span class="c">/* [0,0] -&gt; [1,0] */</span>
    <span class="n">wchar_t</span> <span class="n">tail</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
    <span class="n">tail</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">strtail</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
    <span class="n">tail</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">L&#39;\0&#39;</span><span class="p">;</span>

    <span class="n">wcscpy</span><span class="p">(</span><span class="n">words</span><span class="p">[</span><span class="n">c</span><span class="p">],</span> <span class="n">value</span><span class="p">);</span>
    <span class="n">hash_each_do</span><span class="p">(</span><span class="n">dict_head</span><span class="p">,</span> <span class="n">tail</span><span class="p">,</span> <span class="n">proc2</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span>
<span class="nf">solve</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">static</span> <span class="n">wchar_t</span> <span class="o">*</span><span class="n">words</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span> <span class="n">buf</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="n">HASH_KEY_MAX</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
        <span class="n">words</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="n">hash_each_do</span><span class="p">(</span><span class="n">dict_head</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">proc1</span><span class="p">,</span> <span class="n">words</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span>
<span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">dictfile</span> <span class="o">=</span> <span class="s">&quot;dic.txt&quot;</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">setlocale</span><span class="p">(</span><span class="n">LC_ALL</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">)</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
        <span class="n">handle_error</span><span class="p">(</span><span class="s">&quot;setlocale&quot;</span><span class="p">);</span>

    <span class="n">dict_wordid</span> <span class="o">=</span> <span class="n">hash_new</span><span class="p">();</span>
    <span class="n">dict_head</span> <span class="o">=</span> <span class="n">hash_new</span><span class="p">();</span>
    <span class="n">dict_tail</span> <span class="o">=</span> <span class="n">hash_new</span><span class="p">();</span>
    <span class="n">dict_comb</span> <span class="o">=</span> <span class="n">hash_new</span><span class="p">();</span>

    <span class="n">dict_load</span><span class="p">(</span><span class="n">dictfile</span><span class="p">);</span>

    <span class="n">solve</span><span class="p">();</span>
    <span class="n">hash_dump</span><span class="p">(</span><span class="n">dict_comb</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>

    <span class="n">hash_free</span><span class="p">(</span><span class="n">dict_wordid</span><span class="p">);</span>
    <span class="n">hash_free</span><span class="p">(</span><span class="n">dict_head</span><span class="p">);</span>
    <span class="n">hash_free</span><span class="p">(</span><span class="n">dict_tail</span><span class="p">);</span>
    <span class="n">hash_free</span><span class="p">(</span><span class="n">dict_comb</span><span class="p">);</span>

    <span class="n">exit</span><span class="p">(</span><span class="n">EXIT_SUCCESS</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/8248/addtag/" class="addtag" id="addtag_8248">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/8248/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/8248/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8248"
  >-</span><span
  class="button yellow"
  id="rating_z_8248"
  >0</span><span 
  class="button green"
  id="rating_p_8248"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/8248/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment8266">
  <p class="banner"><a href="/web/20090519001707/http://ja.doukaku.org/user/980/" target="_top">manzo</a><a href="/web/20090519001707/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/8266/">#8266</a>(<script language="JavaScript">print_time(new Date("2008/12/31 01:41 GMT"));</script><noscript>2008/12/31 01:41 GMT</noscript>)
	
	
	
	[<a href="/web/20090519001707/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>答えがまちまちで本当のところはどうなのでしょうか？

とりあえず
12116(1パターン=&gt;5, 2パターン=&gt;12109, 4パターン=&gt;2)
でした。

かなり遅いですが結果は

阿衡之才 阿附迎合
附　　弁 衡　　従
迎　　縦 之　　連
合従連横 才弁縦横

阿衡之才 阿諛迎合
諛　　弁 衡　　従
迎　　縦 之　　連
合従連横 才弁縦横

阿衡之才 阿諛苟合
諛　　弁 衡　　従
苟　　縦 之　　連
合従連横 才弁縦横
…
のように同じ四字熟語からなるパターンは横へ表示します。（普通２パターン）

12116と12118の差異はProlog#3778の匿名さんがおっしゃるとおり

一唱三嘆 一切即一 一切即一 一読三嘆
切　　息 読　　唱 唱　　読 切　　息
即　　嗟 三　　三 三　　三 即　　嗟
一読三嘆 嘆息嗟嘆 嘆息嗟嘆 一唱三嘆

一場春夢 一炊之夢 一切即一 一切即一
切　　中 切　　中 炊　　場 場　　炊
即　　説 即　　説 之　　春 春　　之
一炊之夢 一場春夢 夢中説夢 夢中説夢

となり解釈の違いで生じるようです。（１としてカウント）
（それぞれ２とカウントすると12116+2=12118）

また
&gt;右上隅の漢字と左下隅の漢字は異なるものでなければいけません。
ですから次の５つは１パターンしかありません。

４つの四字熟語を１回しか使わないと解釈するとこれらは重複使用しているので
12116-5=12109
となるのでしょうか？（問題にはありませんが）

一切即一
期　　期
四　　四
相門有相

一切即一
唱　　唱
三　　三
嘆息嗟嘆

一切即一
読　　読
三　　三
嘆息嗟嘆

一切即一
場　　場
春　　春
夢中説夢

一切即一
炊　　炊
之　　之
夢中説夢

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44</pre></td><td class="code"><div class="highlight"><pre><span class="n">dic</span> <span class="o">=</span> <span class="o">[]</span>
<span class="n">result</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]=[]</span><span class="p">}</span>
<span class="n">ht</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">{</span><span class="o">|</span><span class="n">h</span><span class="p">,</span><span class="n">k</span><span class="o">|</span><span class="n">h</span><span class="o">[</span><span class="n">k</span><span class="o">]=[]</span><span class="p">}</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;words.txt&quot;</span><span class="p">)</span><span class="c1">#四字熟語8312語（重複なし）</span>
<span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">gets</span>
  <span class="n">dic</span> <span class="o">&lt;&lt;</span> <span class="n">line</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">chars</span><span class="o">.</span><span class="n">to_a</span>
<span class="k">end</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">dic</span>
  <span class="n">ht</span><span class="o">[[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">3</span><span class="o">]]]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span>
<span class="k">end</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">dic</span><span class="o">.</span><span class="n">permutation</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">ht</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">3</span><span class="o">]]</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">ht</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]]</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">j</span> <span class="k">in</span> <span class="n">ht</span><span class="o">[[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">3</span><span class="o">]</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">3</span><span class="o">]]]</span>
      <span class="k">for</span> <span class="n">k</span> <span class="k">in</span> <span class="n">ht</span><span class="o">[[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">0</span><span class="o">]]]</span>
        <span class="n">result</span><span class="o">[[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="n">k</span><span class="o">].</span><span class="n">sort</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="n">k</span><span class="o">]</span> <span class="k">unless</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="mi">3</span><span class="o">]</span> <span class="o">==</span> <span class="n">k</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">#出力</span>
<span class="k">def</span> <span class="nf">put</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
  <span class="n">dsp</span> <span class="o">=</span> <span class="o">[[]</span><span class="p">,</span><span class="o">[]</span><span class="p">,</span><span class="o">[]</span><span class="p">,</span><span class="o">[]]</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">a</span>
    <span class="n">dsp</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">join</span>
    <span class="n">dsp</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span><span class="s2">&quot;　　&quot;</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">1</span><span class="o">]].</span><span class="n">join</span>
    <span class="n">dsp</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="n">i</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span><span class="s2">&quot;　　&quot;</span><span class="p">,</span><span class="n">i</span><span class="o">[</span><span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">]].</span><span class="n">join</span>
    <span class="n">dsp</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">join</span>
  <span class="k">end</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span>
    <span class="nb">puts</span> <span class="n">dsp</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
  <span class="k">end</span>
<span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
<span class="k">end</span>

<span class="c1">#結果表示</span>
<span class="nb">p</span> <span class="n">result</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">size</span> <span class="c1">#=&gt;12116</span>

<span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="n">result</span><span class="o">.</span><span class="n">values</span>
   <span class="n">put</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090519001707/http://ja.doukaku.org/comment/8266/addtag/" class="addtag" id="addtag_8266">タグ</a>:
	
    
    <a href="/web/20090519001707/http://ja.doukaku.org/tag/Ruby1.8.7/">Ruby1.8.7</a>
    
	&nbsp;

	
      [<a href="/web/20090519001707/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090519001707/http://ja.doukaku.org/comment/8266/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090519001707/http://ja.doukaku.org/comment/8266/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8266"
  >-</span><span
  class="button yellow"
  id="rating_z_8266"
  >0</span><span 
  class="button green"
  id="rating_p_8266"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090519001707/http://ja.doukaku.org/75/reply_to/8266/">
  返信
  </a>]
  </div>
</div>
</div>




  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20090519001707if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20090519001707/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20090519001707/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20090519001707/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20090519001707/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20090519001707/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20090519001707/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20090519001707/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20090519001707/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090519001707/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090519001707/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20090519001707im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20090519001707/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20090519001707/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20090519001707/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20090519001707/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20090519001707/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20090519001707/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20090519001707/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20090519001707/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20090519001707im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20090519001707/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20090519001707/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20090519001707/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20090519001707js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 0:17:07 May 19, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:09:40 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
