
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
METHINKS IT IS A WEASEL
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081203184030cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081203184030cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081203184030cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20081203184030/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081203184030/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081203184030js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081203184030js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081203184030js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081203184030js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app12.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/177\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "3";
var displayMonth = "Dec";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/177/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081203184030" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Nov
                       
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 18:40:30 Dec 3, 2008">DEC</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jan
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" />
                       
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 18:40:30 Dec 3, 2008">3</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 18:40:30 Dec 3, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081203184030*/http://ja.doukaku.org/177/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>1 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">3 Dec 08 - 3 Dec 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:11:000000000001_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081203184030/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20081203184030/http://ja.doukaku.org/177/">METHINKS IT IS A WEASEL</a>
</h2>

    





<div class="comment" id="comment6287">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6287/">#6287</a>(<script language="JavaScript">print_time(new Date("2008/05/17 14:13 GMT"));</script><noscript>2008/05/17 14:13 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #bfff7f;">4/8=0.50</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>ランダムな文字からMETHINKS IT IS A WEASELを作るプログラムを作れ。</p>
<p>簡単に流れを書いてみます。</p>
<p>１：ランダムな２０文字を持つ文字列をもった３００個作ります。</p>
<p>２：その文字列が&quot;METHINKSITISAWEASEL&quot;に近いものからソートします。</p>
<p>３：それぞれの文字列のなか1文字を別の文字に変化させたものを３つ用意します。</p>
<p>４：それを２：のソートをして上位３００個残す。（９００個あるうちで上位３００個残すということです。）</p>
<p>５：以後３：と４：を繰り返す。</p>
<p>ランダムな文字変化は大文字だけでいいです。簡単にするために空白文字を外してあります。</p>
<p>METHINKS IT IS WEASELができたら終了。３と4の間でソートしたもので一番上位のものを毎回表示させると変化が楽しめます。:-)</p>
<p>Rickard Dawkinsがブラインドウォッチメイカー(現題：盲目の時計職人）の３章で書いていた有名なものです。さらに一般化してもらってもいいです。</p>
<p>参考</p>
<ul class="simple">
<li><a class="reference" href="/web/20081203184030/http://home.pacbell.net/s-max/scott/weasel.html">http://home.pacbell.net/s-max/scott/weasel.html</a> (JAVA アプレット)</li>
<li><a class="reference" href="/web/20081203184030/http://en.wikipedia.org/wiki/Weasel_program">http://en.wikipedia.org/wiki/Weasel_program</a></li>
</ul>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6287/addtag/" class="addtag" id="addtag_6287">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #bfff7f;"
  >4/8=0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6287"
  >-</span><span
  class="button yellow"
  id="rating_z_6287"
  >0</span><span 
  class="button green"
  id="rating_p_6287"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6287/">
  reply
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20081203184030/http://ja.doukaku.org/177/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Nested</h2>
<a href="/web/20081203184030/http://ja.doukaku.org/177/flatten/">Flatten</a> 
<a href="/web/20081203184030/http://ja.doukaku.org/177/">Hidden</a> 


  

  
    





<div class="comment" id="comment6288">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6288/">#6288</a>(<script language="JavaScript">print_time(new Date("2008/05/18 06:14 GMT"));</script><noscript>2008/05/18 06:14 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>近さのうまい定義ってそんなに自明じゃないんですね。下のプログラムではアスキーコードの差を足していますが、もっといい方法がありそうです。</p>
<p>文字変化のやり方も焼きなまし法を使うとかいろいろ考えられそうです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre>(defun random-char (&amp;optional random-state)
  (code-char (+ 65 (random 26 random-state))))

(defun random-string (length &amp;optional random-state)
  (let ((s (make-string length)))
    (dotimes (i length)
      (setf (elt s i) (random-char random-state)))
    s))

(defun modify (s &amp;optional random-state)
  (let ((i (random (length s) random-state))
        (r (copy-seq s)))
    (setf (elt r i)
          (code-char (+ (random 3 random-state)
                        (char-code (elt s i))
                        -1)))
    r))

(defun weasel (target)
  (let ((state (make-random-state t)))
    (flet ((key (s)
             (loop for c1 across s and c2 across target
               sum (abs (- (char-code c1) (char-code c2))))))
      (do ((strings (loop repeat 300
                      as s = (random-string (length target) state)
                      collect (cons s (key s)))
                    (sort (mapcan (lambda (p)
                                    (loop repeat 3
                                      as s = (modify (car p) state)
                                      collect (cons s (key s))))
                                  strings)
                          #&#39;&lt; :key #&#39;cdr))
           (i 1 (1+ i)))
          ((string= target (caar strings))
           (format t &quot;~D: ~A (~D)~%&quot; i (caar strings) (cdar strings))
           (format t &quot;Finished after ~D steps.~%&quot; i))
        (setf (cdr (nthcdr 299 strings)) nil)
        (format t &quot;~D: ~A (~D)~%&quot; i (caar strings) (cdar strings))))))

(weasel &quot;METHINKSITISAWEASEL&quot;)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6288/addtag/" class="addtag" id="addtag_6288">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6288/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6288/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6288"
  >-</span><span
  class="button yellow"
  id="rating_z_6288"
  >0</span><span 
  class="button green"
  id="rating_p_6288"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081203184030/http://ja.doukaku.org/comment/6288/">
    1
    reply
  </a>

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6288/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6291">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6291/">#6291</a>(<script language="JavaScript">print_time(new Date("2008/05/18 10:03 GMT"));</script><noscript>2008/05/18 10:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>&gt;近さのうまい定義ってそんなに自明じゃないんですね。下のプログラムではアスキーコードの差を足しています</p>
<p>そうなんですよね。うまい定義はどうするか？ってありますね。僕も作成した時はアスキーコードの差を利用したように記憶しています。:-)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6291/addtag/" class="addtag" id="addtag_6291">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6291"
  >-</span><span
  class="button yellow"
  id="rating_z_6291"
  >0</span><span 
  class="button green"
  id="rating_p_6291"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6288/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6291/root/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6291/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment6289">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/588/" target="_top">sekia</a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6289/">#6289</a>(<script language="JavaScript">print_time(new Date("2008/05/18 06:40 GMT"));</script><noscript>2008/05/18 06:40 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>安直な実装。
派生文字列が3つだとうまく収束しなかったので、10個にしています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@alphabets</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">..</span> <span class="s">&quot;Z&quot;</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">@strings</span>   <span class="o">=</span> <span class="p">();</span>
<span class="k">my</span> <span class="nv">$goal</span>      <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">random_int</span><span class="p">($)</span> <span class="p">{</span> <span class="nb">int</span> <span class="nb">rand</span> <span class="nb">shift</span> <span class="p">}</span>

<span class="k">sub </span><span class="nf">similarity</span><span class="p">($)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$str</span>   <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span> <span class="mi">0</span> <span class="o">..</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
        <span class="nv">$score</span><span class="o">++</span> <span class="k">if</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$str</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="ow">eq</span> <span class="nb">substr</span><span class="p">(</span> <span class="nv">$goal</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="mi">1</span> <span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nv">$score</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">derive_string</span><span class="p">($)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$origin_string</span>   <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">@derived_strings</span> <span class="o">=</span> <span class="p">();</span>
    <span class="k">for</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">10</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$derived_string</span> <span class="o">=</span> <span class="nv">$origin_string</span><span class="p">;</span>
        <span class="nb">substr</span><span class="p">(</span> <span class="nv">$derived_string</span><span class="p">,</span> <span class="n">random_int</span> <span class="nb">length</span> <span class="nv">$origin_string</span><span class="p">,</span> <span class="mi">1</span> <span class="p">)</span> <span class="o">=</span>
          <span class="nv">$alphabets</span><span class="p">[</span> <span class="n">random_int</span> <span class="nv">@alphabets</span> <span class="p">];</span>
        <span class="nb">push</span> <span class="nv">@derived_strings</span><span class="p">,</span> <span class="nv">$derived_string</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nv">@derived_strings</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span> <span class="mi">1</span> <span class="o">..</span> <span class="mi">300</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$string</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
    <span class="nv">$string</span> <span class="o">.=</span> <span class="nv">$alphabets</span><span class="p">[</span> <span class="n">random_int</span> <span class="nv">@alphabets</span> <span class="p">]</span> <span class="k">for</span> <span class="mi">1</span> <span class="o">..</span> <span class="nb">length</span> <span class="nv">$goal</span><span class="p">;</span>
    <span class="nb">push</span> <span class="nv">@strings</span><span class="p">,</span> <span class="nv">$string</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">my</span> <span class="nv">$count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">until</span> <span class="p">(</span> <span class="nv">$strings</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">eq</span> <span class="nv">$goal</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">@next_gen</span> <span class="o">=</span> <span class="p">();</span>
    <span class="k">print</span> <span class="nv">$count</span><span class="o">++</span><span class="p">,</span> <span class="s">&quot;: &quot;</span><span class="p">,</span> <span class="nv">$strings</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
    <span class="nb">push</span> <span class="nv">@next_gen</span><span class="p">,</span> <span class="n">derive_string</span> <span class="nv">$_</span> <span class="k">for</span> <span class="nv">@strings</span><span class="p">;</span>
    <span class="nv">@strings</span> <span class="o">=</span>
      <span class="p">(</span> <span class="nb">map</span> <span class="p">{</span> <span class="nv">$_</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">}</span>
          <span class="nb">sort</span> <span class="p">{</span> <span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=&gt;</span> <span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">}</span> <span class="nb">map</span> <span class="p">{</span> <span class="p">[</span> <span class="n">similarity</span> <span class="nv">$_</span><span class="p">,</span> <span class="nv">$_</span> <span class="p">]</span> <span class="p">}</span> <span class="nv">@next_gen</span> <span class="p">)</span>
      <span class="p">[</span> <span class="mi">0</span> <span class="o">..</span> <span class="mi">299</span> <span class="p">];</span>
<span class="p">}</span>

<span class="k">print</span> <span class="nv">$count</span><span class="p">,</span> <span class="s">&quot;: &quot;</span><span class="p">,</span> <span class="nv">$strings</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6289/addtag/" class="addtag" id="addtag_6289">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6289/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6289/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6289"
  >-</span><span
  class="button yellow"
  id="rating_z_6289"
  >0</span><span 
  class="button green"
  id="rating_p_6289"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081203184030/http://ja.doukaku.org/comment/6289/">
    1
    reply
  </a>

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6289/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6293">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/780/" target="_top">gandalf</a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6293/">#6293</a>(<script language="JavaScript">print_time(new Date("2008/05/18 11:37 GMT"));</script><noscript>2008/05/18 11:37 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>お題の通りに実装すると収束しませんね。突然変異の確率が高すぎるのが良くないようです。変異する文字数を1にすれば収束しました。(変異がおこる確率をいじるとさらに早く、80世代ほどで終わります)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6293/addtag/" class="addtag" id="addtag_6293">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6293"
  >-</span><span
  class="button yellow"
  id="rating_z_6293"
  >0</span><span 
  class="button green"
  id="rating_p_6293"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6289/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6293/root/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20081203184030/http://ja.doukaku.org/comment/6293/">
    1
    reply
  </a>

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6293/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6294">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/35/" target="_top">ytakenaka</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6294/">#6294</a>(<script language="JavaScript">print_time(new Date("2008/05/18 12:51 GMT"));</script><noscript>2008/05/18 12:51 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>すいません。問題の設定が甘くて　お許しください。</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6294/addtag/" class="addtag" id="addtag_6294">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6294"
  >-</span><span
  class="button yellow"
  id="rating_z_6294"
  >0</span><span 
  class="button green"
  id="rating_p_6294"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6293/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6294/root/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6294/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment6290">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6290/">#6290</a>(<script language="JavaScript">print_time(new Date("2008/05/18 08:37 GMT"));</script><noscript>2008/05/18 08:37 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>距離関数の定義がなかったので、とりあえず一致しない文字数を距離の定義としてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>


<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample177</span> <span class="o">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">char</span><span class="o">[]</span> <span class="n">CHARACTERS</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="o">.</span><span class="na">toCharArray</span><span class="o">();</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">INITIAL_COUNT</span> <span class="o">=</span> <span class="mi">300</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">CREATE_COUNT</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>


    <span class="k">private</span> <span class="k">final</span> <span class="n">Random</span> <span class="n">random_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
    <span class="k">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cache_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>

    <span class="k">private</span> <span class="k">final</span> <span class="n">String</span> <span class="n">target_</span><span class="o">;</span>
    <span class="k">private</span> <span class="k">final</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">comparator_</span><span class="o">;</span>


    <span class="k">public</span> <span class="n">Sample177</span><span class="o">(</span><span class="n">String</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">target_</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="n">comparator_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringDistanceComparator</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>
        <span class="n">init</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="kt">void</span> <span class="n">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">count</span> <span class="o">&lt;</span> <span class="n">INITIAL_COUNT</span><span class="o">;</span> <span class="n">count</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">cache_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">createString</span><span class="o">(</span><span class="n">target_</span><span class="o">.</span><span class="na">length</span><span class="o">()));</span>
        <span class="o">}</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cache_</span><span class="o">,</span> <span class="n">comparator_</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">private</span> <span class="n">String</span> <span class="n">createString</span><span class="o">(</span><span class="kt">int</span> <span class="n">length</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">length</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">length</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">CHARACTERS</span><span class="o">[</span><span class="n">random_</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">CHARACTERS</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="n">String</span> <span class="n">getTop</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cache_</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="kt">void</span> <span class="n">nextStep</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="nl">str:</span> <span class="n">cache_</span><span class="o">.</span><span class="na">toArray</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[</span><span class="mi">0</span><span class="o">]))</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">CREATE_COUNT</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">cache_</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">changeCharacter</span><span class="o">(</span><span class="n">str</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cache_</span><span class="o">,</span> <span class="n">comparator_</span><span class="o">);</span>
        <span class="n">cache_</span> <span class="o">=</span> <span class="n">cache_</span><span class="o">.</span><span class="na">subList</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">INITIAL_COUNT</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">public</span> <span class="n">String</span> <span class="n">changeCharacter</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
        <span class="n">builder</span><span class="o">.</span><span class="na">setCharAt</span><span class="o">(</span><span class="n">random_</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">()),</span> <span class="n">CHARACTERS</span><span class="o">[</span><span class="n">random_</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="n">CHARACTERS</span><span class="o">.</span><span class="na">length</span><span class="o">)]);</span>
        <span class="k">return</span> <span class="n">builder</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="k">static</span> <span class="k">class</span> <span class="nc">StringDistanceComparator</span> <span class="k">implements</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="k">private</span> <span class="k">final</span> <span class="n">String</span> <span class="n">target_</span><span class="o">;</span>
        <span class="k">public</span> <span class="n">StringDistanceComparator</span><span class="o">(</span><span class="n">String</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">target_</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">compare</span><span class="o">(</span><span class="n">String</span> <span class="n">o1</span><span class="o">,</span> <span class="n">String</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">calcDistance</span><span class="o">(</span><span class="n">o1</span><span class="o">)</span> <span class="o">-</span> <span class="n">calcDistance</span><span class="o">(</span><span class="n">o2</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">private</span> <span class="kt">int</span> <span class="n">calcDistance</span><span class="o">(</span><span class="n">String</span> <span class="n">other</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">distance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">len</span> <span class="o">=</span> <span class="n">target_</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="n">index</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">distance</span> <span class="o">+=</span> <span class="o">(</span><span class="n">target_</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">)</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">index</span><span class="o">))?</span> <span class="mi">0</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">distance</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>


    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">target</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="o">;</span>
        <span class="n">Sample177</span> <span class="n">sample</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Sample177</span><span class="o">(</span><span class="n">target</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">top</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">index</span><span class="o">++</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">top</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">top</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">target</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">sample</span><span class="o">.</span><span class="na">nextStep</span><span class="o">();</span>
            <span class="n">top</span> <span class="o">=</span> <span class="n">sample</span><span class="o">.</span><span class="na">getTop</span><span class="o">();</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">index</span><span class="o">++</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">top</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6290/addtag/" class="addtag" id="addtag_6290">Tags</a>:
	
    
    <a href="/web/20081203184030/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6290/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6290/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6290"
  >-</span><span
  class="button yellow"
  id="rating_z_6290"
  >0</span><span 
  class="button green"
  id="rating_p_6290"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6290/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment6292">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6292/">#6292</a>(<script language="JavaScript">print_time(new Date("2008/05/18 10:51 GMT"));</script><noscript>2008/05/18 10:51 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>お題とは外れますが、せっかくなのでGAで書いてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;time.h&gt;</span>

<span class="k">const</span> <span class="kt">char</span> <span class="n">TargetString</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">TargetStringLength</span> <span class="o">=</span> <span class="mi">20</span><span class="p">;</span>

<span class="k">const</span> <span class="kt">char</span> <span class="n">AlphabetTable</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">AlphabetNum</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">AlphabetTable</span><span class="p">);</span>


<span class="kt">int</span> <span class="nf">getScore</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c">//完全マッチで0が帰る。</span>
    <span class="kt">int</span> <span class="n">score</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>    
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TargetStringLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="n">TargetString</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="c">//        score -= d &gt; 0 ? d : -d;    //差</span>
        <span class="n">score</span> <span class="o">-=</span> <span class="o">!!</span><span class="n">d</span><span class="p">;</span>                <span class="c">//ハミング距離</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">score</span><span class="p">;</span>    
<span class="p">}</span>


<span class="kt">void</span> <span class="nf">kousa</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s1</span><span class="p">,</span><span class="kt">char</span> <span class="o">*</span><span class="n">s2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">TargetStringLength</span><span class="p">;</span>
    <span class="c">//rの位置で交差させる</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">r</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">TargetStringLength</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="kt">char</span> <span class="n">t</span><span class="p">;</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">henni</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
<span class="p">{</span>
    <span class="c">//1文字を別の文字に変化させる</span>
    <span class="n">s</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">TargetStringLength</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">=</span> <span class="n">AlphabetTable</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">AlphabetNum</span><span class="p">];</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Gene</span><span class="p">{</span>
    <span class="kt">char</span> <span class="n">gene</span><span class="p">[</span><span class="n">TargetStringLength</span><span class="p">];</span>
    <span class="kt">int</span> <span class="n">result</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="nf">GeneToResult</span><span class="p">(</span><span class="n">Gene</span> <span class="o">*</span><span class="n">g</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">g</span><span class="o">-&gt;</span><span class="n">result</span> <span class="o">=</span> <span class="n">getScore</span><span class="p">(</span><span class="n">g</span><span class="o">-&gt;</span><span class="n">gene</span><span class="p">);</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">compare</span><span class="p">(</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_a</span><span class="p">,</span><span class="k">const</span> <span class="kt">void</span> <span class="o">*</span><span class="n">_b</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">const</span> <span class="n">Gene</span> <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">Gene</span><span class="o">*</span><span class="p">)</span><span class="n">_a</span><span class="p">;</span>
    <span class="k">const</span> <span class="n">Gene</span> <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="p">(</span><span class="n">Gene</span><span class="o">*</span><span class="p">)</span><span class="n">_b</span><span class="p">;</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">result</span> <span class="o">&gt;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">result</span><span class="p">){</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">a</span><span class="o">-&gt;</span><span class="n">result</span> <span class="o">&lt;</span> <span class="n">b</span><span class="o">-&gt;</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">srand</span><span class="p">((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">));</span>

    <span class="c">//初期化</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">GeneMax</span> <span class="o">=</span> <span class="mi">300</span><span class="p">;</span>
    <span class="n">Gene</span> <span class="n">genePool</span><span class="p">[</span><span class="n">GeneMax</span><span class="p">];</span>

    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">GeneMax</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="c">//ランダムな文字列で埋め尽くす</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">TargetStringLength</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">){</span>
            <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">AlphabetTable</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span> <span class="o">%</span> <span class="n">AlphabetNum</span><span class="p">];</span>
        <span class="p">}</span>
        <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span><span class="p">[</span><span class="n">TargetStringLength</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
        <span class="n">GeneToResult</span><span class="p">(</span><span class="o">&amp;</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>    <span class="c">//スコアの取得</span>
    <span class="p">}</span>


    <span class="c">//進化させる</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;</span> <span class="mi">1000</span><span class="p">;</span> <span class="n">t</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="c">//sort</span>
        <span class="n">qsort</span><span class="p">(</span><span class="n">genePool</span><span class="p">,</span><span class="n">GeneMax</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">Gene</span><span class="p">),</span><span class="o">&amp;</span><span class="n">compare</span><span class="p">);</span>

        <span class="c">//上位をprint</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;times = %d --------------------</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">t</span><span class="p">);</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Gene = %s, score = %d </span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span><span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">result</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">getchar</span><span class="p">();</span>

        <span class="c">//交叉、突然変異</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">GeneMax</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">GeneMax</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="p">){</span>    <span class="c">//スコアの下位半分を捨てる</span>
            <span class="kt">char</span> <span class="n">g1</span><span class="p">[</span><span class="n">TargetStringLength</span><span class="p">];</span>
            <span class="kt">char</span> <span class="n">g2</span><span class="p">[</span><span class="n">TargetStringLength</span><span class="p">];</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">g1</span> <span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="n">GeneMax</span><span class="o">/</span><span class="mi">2</span><span class="p">)].</span><span class="n">gene</span><span class="p">);</span>    <span class="c">//適当な上位を選択</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">g2</span> <span class="p">,</span> <span class="n">genePool</span><span class="p">[</span><span class="n">rand</span><span class="p">()</span><span class="o">%</span><span class="p">(</span><span class="n">GeneMax</span><span class="o">/</span><span class="mi">2</span><span class="p">)].</span><span class="n">gene</span><span class="p">);</span>
            <span class="n">kousa</span><span class="p">(</span><span class="n">g1</span><span class="p">,</span> <span class="n">g2</span><span class="p">);</span>    <span class="c">//交差</span>
            <span class="n">henni</span><span class="p">(</span><span class="n">g1</span><span class="p">);</span>        <span class="c">//変異</span>
            <span class="n">henni</span><span class="p">(</span><span class="n">g2</span><span class="p">);</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">gene</span> <span class="p">,</span> <span class="n">g1</span><span class="p">);</span>
            <span class="n">strcpy</span><span class="p">(</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="n">gene</span> <span class="p">,</span> <span class="n">g2</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="c">//評価</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">GeneMax</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
            <span class="n">GeneToResult</span><span class="p">(</span><span class="o">&amp;</span><span class="n">genePool</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6292/addtag/" class="addtag" id="addtag_6292">Tags</a>:
	
    
    <a href="/web/20081203184030/http://ja.doukaku.org/tag/GA/">GA</a>
    
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6292/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6292/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6292"
  >-</span><span
  class="button yellow"
  id="rating_z_6292"
  >0</span><span 
  class="button green"
  id="rating_p_6292"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6292/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  

  

  
    





<div class="comment" id="comment6295">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/335/" target="_top">yattom</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6295/">#6295</a>(<script language="JavaScript">print_time(new Date("2008/05/18 13:21 GMT"));</script><noscript>2008/05/18 13:21 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ごくごく素直にPythonで実装しました。増やす数(MULTIPLY)が3だと収束しなかったので、5にしてあります。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">random</span>

<span class="n">GOAL</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span>

<span class="n">DOMAIN</span> <span class="o">=</span> <span class="s">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>

<span class="n">SET_SIZE</span> <span class="o">=</span> <span class="mi">300</span>
<span class="n">MULTIPLY</span> <span class="o">=</span> <span class="mi">5</span>

<span class="k">def</span> <span class="nf">create_random</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">GOAL</span><span class="p">)):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">DOMAIN</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">initial_set</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">SET_SIZE</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="p">[</span><span class="n">create_random</span><span class="p">()]</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">i</span> <span class="o">=</span> <span class="n">random</span><span class="o">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">s</span><span class="p">))</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">DOMAIN</span><span class="p">)</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">:]</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">mutate_set</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">MULTIPLY</span><span class="p">):</span>
            <span class="n">result</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">mutate</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">def</span> <span class="nf">distance</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">c1</span><span class="p">,</span> <span class="n">c2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">GOAL</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">c1</span> <span class="o">!=</span> <span class="n">c2</span><span class="p">:</span>
            <span class="n">d</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">d</span>

<span class="k">def</span> <span class="nf">sorted_set</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
    <span class="n">work</span> <span class="o">=</span> <span class="p">[(</span><span class="n">distance</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="n">e</span><span class="p">)</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">s</span><span class="p">]</span>

    <span class="k">def</span> <span class="nf">mycmp</span><span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">cmp</span><span class="p">(</span><span class="n">e1</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">e2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">work</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">mycmp</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">work</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">initial_set</span><span class="p">()</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">new_s</span> <span class="o">=</span> <span class="n">mutate_set</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">e</span> <span class="k">for</span> <span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="n">e</span><span class="p">)</span> <span class="ow">in</span> <span class="n">sorted_set</span><span class="p">(</span><span class="n">new_s</span><span class="p">)[:</span><span class="n">SET_SIZE</span><span class="p">]]</span>
        <span class="k">print</span> <span class="s">&quot;</span><span class="si">%04d</span><span class="s">: </span><span class="si">%2d</span><span class="s"> </span><span class="si">%s</span><span class="s">&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">distance</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">GOAL</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6295/addtag/" class="addtag" id="addtag_6295">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6295/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6295/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6295"
  >-</span><span
  class="button yellow"
  id="rating_z_6295"
  >0</span><span 
  class="button green"
  id="rating_p_6295"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6295/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6296">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6296/">#6296</a>(<script language="JavaScript">print_time(new Date("2008/05/18 13:30 GMT"));</script><noscript>2008/05/18 13:30 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>ソートの際の比較は、文字とその位置の一致の数を調べる #howManyMatch: を使っています。三つでは収束しないので五つに変えました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre>| ゴール 全英字 文字数 上位群 世代数 |
ゴール := &#39;METHINKSITISWEASEL&#39;.
文字数 := ゴール size.
全英字 := Character alphabet asUppercase.
上位群 := OrderedCollection new.
300 timesRepeat: [
    | 元文字列 |
    元文字列 := ((1 to: 文字数) collect: [:idx | 全英字 atRandom]) as: String.
    上位群 add: {元文字列 howManyMatch: ゴール. 元文字列}].
世代数 := 0.

World findATranscript:  nil.
[上位群 first last = ゴール] whileFalse: [
    | 候補群 |
    候補群 := OrderedCollection new.
    上位群 do: [:each |
        5 timesRepeat: [
            | 変異文字列 |
            変異文字列 := each last copy.
            変異文字列 at: 文字数 atRandom put: 全英字 atRandom.
            候補群 add: {変異文字列 howManyMatch: ゴール. 変異文字列}]].
    候補群 := 候補群 asArray sort: [:a :b | a first &gt; b first].
    上位群 := 候補群 first: 300.
    Transcript cr; show: (世代数 := 世代数 + 1) -&gt; 上位群 first].
^世代数
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6296/addtag/" class="addtag" id="addtag_6296">Tags</a>:
	
    
    <a href="/web/20081203184030/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6296/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6296/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6296"
  >-</span><span
  class="button yellow"
  id="rating_z_6296"
  >0</span><span 
  class="button green"
  id="rating_p_6296"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6296/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6297">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/806/" target="_top">taguo</a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6297/">#6297</a>(<script language="JavaScript">print_time(new Date("2008/05/18 14:05 GMT"));</script><noscript>2008/05/18 14:05 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  3だとなかなか収束しないですね。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Linq</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">ConsoleApplication1</span>
<span class="k">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">MethinksItIsLikeAWeasel</span>
    <span class="k">{</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">CANDIDATE_COUNT</span> <span class="p">=</span> <span class="m">300</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">int</span> <span class="n">VALIDATION_COUNT</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
        <span class="k">const</span> <span class="kt">string</span> <span class="n">GOAL</span> <span class="p">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span><span class="p">;</span>
        <span class="k">static</span> <span class="n">Random</span> <span class="n">_rnd</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Random</span><span class="p">();</span>

        <span class="k">internal</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
        <span class="k">{</span>
            <span class="n">var</span> <span class="n">strs</span> <span class="p">=</span> <span class="n">CANDIDATE_COUNT</span>
                <span class="p">.</span><span class="n">Make</span><span class="p">(</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="k">new</span> <span class="kt">string</span><span class="p">(</span> <span class="n">GOAL</span><span class="p">.</span><span class="n">Length</span><span class="p">.</span><span class="n">Make</span><span class="p">(</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">GetChar</span><span class="p">()</span> <span class="p">).</span><span class="n">ToArray</span><span class="p">()</span> <span class="p">)</span> <span class="p">)</span>
                <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>

            <span class="kt">int</span> <span class="n">g</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
            <span class="k">while</span><span class="p">(</span> <span class="n">strs</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">!=</span> <span class="n">GOAL</span> <span class="p">)</span>
            <span class="k">{</span>
                <span class="n">strs</span> <span class="p">=</span> <span class="n">strs</span>
                    <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span> <span class="n">str</span> <span class="p">=&gt;</span> <span class="n">VALIDATION_COUNT</span><span class="p">.</span><span class="n">Make</span><span class="p">(</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Replace</span><span class="p">(</span> <span class="n">str</span> <span class="p">)</span> <span class="p">)</span> <span class="p">)</span>
                    <span class="p">.</span><span class="n">ToArray</span><span class="p">()</span>
                    <span class="p">.</span><span class="n">OrderByDescending</span><span class="p">(</span> <span class="n">s</span> <span class="p">=&gt;</span> <span class="n">CalcPoint</span><span class="p">(</span> <span class="n">s</span> <span class="p">)</span> <span class="p">)</span>
                    <span class="p">.</span><span class="n">Take</span><span class="p">(</span> <span class="n">CANDIDATE_COUNT</span> <span class="p">)</span>
                    <span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
                <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span> <span class="s">&quot;{0} {1} {2}&quot;</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">CalcPoint</span><span class="p">(</span> <span class="n">strs</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">),</span> <span class="n">strs</span><span class="p">.</span><span class="n">First</span><span class="p">()</span> <span class="p">);</span>
                <span class="n">g</span><span class="p">++;</span>
            <span class="k">}</span>
        <span class="k">}</span>

        <span class="k">static</span> <span class="kt">int</span> <span class="nf">CalcPoint</span><span class="p">(</span> <span class="kt">string</span> <span class="n">str</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">Select</span><span class="p">(</span> <span class="p">(</span> <span class="n">c</span><span class="p">,</span> <span class="n">i</span> <span class="p">)</span> <span class="p">=&gt;</span> <span class="n">c</span> <span class="p">==</span> <span class="n">GOAL</span><span class="p">[</span> <span class="n">i</span> <span class="p">]</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span> <span class="p">).</span><span class="n">Sum</span><span class="p">();</span>
        <span class="k">}</span>

        <span class="k">static</span> <span class="kt">string</span> <span class="nf">Replace</span><span class="p">(</span> <span class="kt">string</span> <span class="n">str</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="n">_rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span> <span class="n">str</span><span class="p">.</span><span class="n">Length</span> <span class="p">);</span>
            <span class="k">return</span> <span class="n">str</span><span class="p">.</span><span class="n">Remove</span><span class="p">(</span> <span class="n">index</span><span class="p">,</span> <span class="m">1</span> <span class="p">).</span><span class="n">Insert</span><span class="p">(</span> <span class="n">index</span><span class="p">,</span> <span class="n">GetChar</span><span class="p">().</span><span class="n">ToString</span><span class="p">()</span> <span class="p">);</span>
        <span class="k">}</span>

        <span class="k">static</span> <span class="kt">char</span> <span class="nf">GetChar</span><span class="p">()</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="p">(</span><span class="kt">char</span><span class="p">)(</span> <span class="n">_rnd</span><span class="p">.</span><span class="n">Next</span><span class="p">(</span> <span class="m">26</span> <span class="p">)</span> <span class="p">+</span> <span class="m">65</span> <span class="p">);</span>
        <span class="k">}</span>

        <span class="k">public</span> <span class="k">static</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Make</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span> <span class="k">this</span> <span class="kt">int</span> <span class="n">count</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">func</span> <span class="p">)</span>
        <span class="k">{</span>
            <span class="k">return</span> <span class="n">Enumerable</span><span class="p">.</span><span class="n">Range</span><span class="p">(</span> <span class="m">0</span><span class="p">,</span> <span class="n">count</span> <span class="p">).</span><span class="n">Select</span><span class="p">(</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">func</span><span class="p">()</span> <span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6297/addtag/" class="addtag" id="addtag_6297">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6297/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6297/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6297"
  >-</span><span
  class="button yellow"
  id="rating_z_6297"
  >0</span><span 
  class="button green"
  id="rating_p_6297"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6297/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6298">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6298/">#6298</a>(<script language="JavaScript">print_time(new Date("2008/05/18 15:07 GMT"));</script><noscript>2008/05/18 15:07 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>3だと収束しないので5で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>import scala.util.Sorting.stableSort
class Weasel(val target:String) {
  val rnd = new Random
  val len = target.size
  val chars = (65 to 90).map(_.asInstanceOf[char])
  def newchar = chars(rnd.nextInt(chars.size))

  def similarity(s:String) = (len /: (0 until len)){(r,i) =&gt; 
    r-(if(target(i) == s(i)){1}else{0})
  }

  def sort(lst:Seq[String]) = stableSort(lst, similarity _).toList

  def mutate(s:String) = (1 to 5).map{x=&gt; 
    var a = s.toArray
    a(rnd.nextInt(len)) = newchar
    a.mkString(&quot;&quot;)
  }
 

  def start = {
    val lst = sort((1 to 300).map(x=&gt;(1 to len).map(y=&gt;newchar).mkString(&quot;&quot;)))
    def iter(ss:List[String], generation:int):unit = {
      printf(&quot;Generation %d\n%s\n%s\n\n&quot;, generation, &quot;-&quot;*40, ss.take(5).mkString(&quot;\n&quot;))
      ss match {
        case head::rest if head == target =&gt; ()
        case x =&gt; 
          iter(sort(x.flatMap(mutate)).take(300), generation+1)
      }
    }
    iter(lst, 0)
  }
}

new Weasel(&quot;METHINKSITISAWEASEL&quot;).start
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6298/addtag/" class="addtag" id="addtag_6298">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6298/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6298/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6298"
  >-</span><span
  class="button yellow"
  id="rating_z_6298"
  >0</span><span 
  class="button green"
  id="rating_p_6298"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6298/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6299">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/483/" target="_top">nil</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6299/">#6299</a>(<script language="JavaScript">print_time(new Date("2008/05/18 15:20 GMT"));</script><noscript>2008/05/18 15:20 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  密かに20文字じゃなくて19文字じゃないかと。。。。

ちょっと無駄なところを省いて動いています。

perlが入っていれば第一引数の任意の文字列で同じことができます。(コマンドライン|ターミナル)からも動くので遊んでみてください。

正規表現で最初点数つけていたのですが
まったく速度的に異常なことに....

いろいろ考えさせてもらって楽しかったですytakenakaさんありがとう!!
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73</pre></td><td class="code"><div class="highlight"><pre><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$goal</span> <span class="o">=</span> <span class="nb">uc</span><span class="p">(</span><span class="nv">@ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">||</span> <span class="sx">q{METHINKSITISAWEASEL}</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">@table</span><span class="p">;</span>
     <span class="c1"># $table[$id]-&gt;[0] 文字列</span>
     <span class="c1"># $table[$id]-&gt;[1] 近似スコア</span>
<span class="k">my</span> <span class="nv">$total_calc</span><span class="p">;</span>
     <span class="c1">#キャッシュ数</span>
<span class="k">my</span> <span class="nv">$cash</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span> 


<span class="vg">$|</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span> <span class="c1"># 計算途中に結果を見たいのでバッファオフ</span>


<span class="n">INIT:</span> 
      <span class="c1">#@tableに300個ランダムな文字列を生成</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$id</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="mi">299</span><span class="p">){</span>
     <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
      <span class="k">for</span><span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)){</span>
        <span class="nv">$table</span><span class="p">[</span><span class="nv">$id</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">.=</span> <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
<span class="k">BEGIN</span><span class="p">:</span>
    <span class="o">++</span><span class="nv">$total_calc</span><span class="p">;</span>
    
        <span class="c1">#各項目を1文字何かに変えて$cash数分配</span>
    <span class="k">for</span> <span class="k">my</span> <span class="nv">$cnt</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$#table</span><span class="p">){</span>
     <span class="k">for</span><span class="p">(</span><span class="mi">1</span><span class="o">..</span><span class="nv">$cash</span><span class="p">)</span> <span class="p">{</span>
     <span class="nv">$table</span><span class="p">[</span><span class="nv">$cnt</span> <span class="o">+</span> <span class="nv">$_</span> <span class="o">*</span> <span class="mi">300</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">one_chr_enig</span><span class="p">(</span><span class="nv">$table</span><span class="p">[</span><span class="nv">$cnt</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nb">undef</span><span class="p">];</span>
     <span class="p">}</span>
    <span class="p">}</span>
        <span class="c1">#各項目を点数化 0 -&gt; undef</span>
    <span class="nv">@table</span> <span class="o">=</span> <span class="n">set_score</span><span class="p">(</span><span class="nv">@table</span><span class="p">);</span>
        <span class="c1"># 順列にソート</span>
    <span class="nv">@table</span> <span class="o">=</span> <span class="nb">sort</span><span class="p">{</span><span class="nv">$b</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;=&gt;</span><span class="nv">$a</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]}</span> <span class="nv">@table</span><span class="p">;</span>
        <span class="c1">#@tabel の299以下の要素を切り捨てる</span>
    <span class="nv">$#table</span> <span class="o">=</span> <span class="mi">299</span><span class="p">;</span>

        <span class="c1">#結果出力</span>
    <span class="k">print</span> <span class="p">(</span><span class="nv">$table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
              <span class="o">.</span>  <span class="sx">q{ (score) : }</span> <span class="o">.</span> <span class="nv">$table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
              <span class="o">.</span>  <span class="sx">q{ (steps) : }</span> <span class="o">.</span><span class="s">&quot; $total_calc  \n&quot;</span>
          <span class="p">);</span>
    
<span class="k">unless</span><span class="p">(</span><span class="nv">$table</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">))</span>
 <span class="p">{</span><span class="nb">goto</span> <span class="k">BEGIN</span><span class="p">};</span>

    <span class="c1">#計算結果を算出    </span>
<span class="k">sub </span><span class="nf">set_score</span> <span class="p">{</span>
   <span class="k">my</span> <span class="nv">@table</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
         <span class="k">for</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="nv">$#table</span><span class="p">){</span>
              <span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="nv">$table</span><span class="p">[</span><span class="nv">$_</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
              <span class="k">my</span> <span class="nv">@pre</span> <span class="o">=</span><span class="nb">split</span><span class="sr">//</span><span class="p">,</span><span class="nv">$goal</span><span class="p">;</span>
              <span class="k">my</span> <span class="nv">$score</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span>
                <span class="k">for</span> <span class="p">(</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)){</span>
                  <span class="k">if</span> <span class="p">(</span><span class="nb">substr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">eq</span> <span class="nv">$pre</span><span class="p">[</span><span class="nv">$_</span><span class="p">]){</span>
                   <span class="o">++</span><span class="nv">$score</span><span class="p">;</span>
                  <span class="p">}</span>
                <span class="p">}</span>
              <span class="nv">$table</span><span class="p">[</span><span class="nv">$_</span><span class="p">]</span><span class="o">-&gt;</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$score</span><span class="p">;</span>
         <span class="p">}</span>
  <span class="k">return</span> <span class="nv">@table</span><span class="p">;</span>
<span class="p">}</span>

    <span class="c1">#与えた文字列をランダムに一文字交換</span>
<span class="k">sub </span><span class="nf">one_chr_enig</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">@str</span> <span class="o">=</span> <span class="nb">split</span><span class="sr">//</span><span class="p">,</span><span class="nb">shift</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
  <span class="nv">$str</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">))]</span> <span class="o">=</span>  <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nb">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nv">@str</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6299/addtag/" class="addtag" id="addtag_6299">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6299/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6299/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6299"
  >-</span><span
  class="button yellow"
  id="rating_z_6299"
  >0</span><span 
  class="button green"
  id="rating_p_6299"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081203184030/http://ja.doukaku.org/comment/6299/">
    1
    reply
  </a>

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6299/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6300">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/483/" target="_top">nil</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6300/">#6300</a>(<script language="JavaScript">print_time(new Date("2008/05/18 16:03 GMT"));</script><noscript>2008/05/18 16:03 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  訂正
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>    <span class="c1">#与えた文字列をランダムに一文字交換</span>
<span class="k">sub </span><span class="nf">one_chr_enig</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">@str</span> <span class="o">=</span> <span class="nb">split</span><span class="sr">//</span><span class="p">,</span><span class="nb">shift</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
  <span class="nv">$str</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">))]</span> <span class="o">=</span>  <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nb">join</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span><span class="nv">@str</span><span class="p">);</span>
<span class="p">}</span>

<span class="err">よりも下記のほうが俄然早いです。</span>

    <span class="c1">#与えた文字列をランダムに一文字交換</span>
<span class="k">sub </span><span class="nf">one_chr_enig</span> <span class="p">{</span>
  <span class="k">my</span> <span class="nv">$str</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
  <span class="k">my</span> <span class="nv">@alpha</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;A&quot;</span><span class="o">..</span><span class="s">&quot;Z&quot;</span><span class="p">);</span>
  <span class="nb">substr</span><span class="p">(</span><span class="nv">$str</span><span class="p">,</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="nb">length</span><span class="p">(</span><span class="nv">$goal</span><span class="p">)),</span><span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="nv">$alpha</span><span class="p">[</span><span class="nb">int</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">26</span><span class="p">)];</span>
  <span class="k">return</span> <span class="nv">$str</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6300/addtag/" class="addtag" id="addtag_6300">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6300/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6300/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6300"
  >-</span><span
  class="button yellow"
  id="rating_z_6300"
  >0</span><span 
  class="button green"
  id="rating_p_6300"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6299/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081203184030/http://ja.doukaku.org/comment/6300/root/"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6300/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment6301">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/59/" target="_top">nori</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6301/">#6301</a>(<script language="JavaScript">print_time(new Date("2008/05/19 02:48 GMT"));</script><noscript>2008/05/19 02:48 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>収束しないのでmutationしないものも次世代に持ち越してしまうようしてしまいましたが・・・。
     ng = ng + list(g.spawn_mutant()) + [g]
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91</pre></td><td class="code"><div class="highlight"><pre><span class="c">#!/usr/bin/python</span>
<span class="c"># -*- encoding=us-ascii -*-</span>
<span class="c">#</span>
<span class="k">import</span> <span class="nn">random</span>


<span class="k">class</span> <span class="nc">Gene</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="n">seed</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="n">base_alpha</span> <span class="o">=</span> <span class="s">&#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#39;</span>
  <span class="n">goal</span> <span class="o">=</span> <span class="s">&quot;METHINKSITISAWEASEL&quot;</span>
  <span class="n">memoize</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
  <span class="k">def</span> <span class="nf">generate_rnd_code</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">base_alpha</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">goal</span><span class="p">))])</span>

  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">code</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">code</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">generate_rnd_code</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span>

  <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">score</span><span class="p">(</span><span class="n">goal</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">goal</span><span class="p">:</span>
        <span class="n">diff</span> <span class="o">=</span> <span class="nb">ord</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">-</span> <span class="nb">ord</span><span class="p">(</span><span class="n">target</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">diff</span> <span class="o">*</span> <span class="n">diff</span> <span class="o">+</span> <span class="n">score</span><span class="p">(</span><span class="n">goal</span><span class="p">[</span><span class="mi">1</span><span class="p">:],</span> <span class="n">target</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span>
        <span class="c">#return abs(diff) + score(goal[1:], target[1:])</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">score</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">goal</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">s</span>
  <span class="k">def</span> <span class="nf">which_base_to_mutate</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">goal</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">substitute_candidates</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">count</span><span class="p">):</span>
    <span class="c">#cand = self.base_alpha.replace(base, &#39;&#39;)</span>
    <span class="n">cand</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">base_alpha</span><span class="p">[:]</span>
    <span class="n">cand</span><span class="o">=</span><span class="nb">list</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
    <span class="n">cand</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="n">random</span><span class="o">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">cand</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cand</span><span class="p">[:</span><span class="n">count</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">spawn_mutant</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n_children</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">n_children</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
      <span class="n">n_children</span> <span class="o">=</span> <span class="mi">3</span>
    <span class="n">nth</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">which_base_to_mutate</span><span class="p">()</span>
    <span class="n">old_base</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[</span><span class="n">nth</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">new_base</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">substitute_candidates</span><span class="p">(</span><span class="n">old_base</span><span class="p">,</span> <span class="n">n_children</span><span class="p">):</span>
      <span class="k">yield</span> <span class="n">Gene</span><span class="p">(</span><span class="n">code</span><span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[:</span><span class="n">nth</span><span class="p">]</span> <span class="o">+</span> <span class="n">new_base</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">code</span><span class="p">[</span><span class="n">nth</span><span class="o">+</span><span class="mi">1</span><span class="p">:])</span>

<span class="k">class</span> <span class="nc">GeneVat</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mass</span><span class="p">,</span> <span class="n">n_children</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">genes</span> <span class="o">=</span> <span class="p">[</span><span class="n">Gene</span><span class="p">()</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">mass</span><span class="p">)]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">n_children</span> <span class="o">=</span> <span class="n">n_children</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">mass</span> <span class="o">=</span> <span class="n">mass</span>

  <span class="k">def</span> <span class="nf">create_ng</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="n">ng</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">genes</span><span class="p">:</span>
      <span class="n">ng</span> <span class="o">=</span> <span class="n">ng</span> <span class="o">+</span> <span class="nb">list</span><span class="p">(</span><span class="n">g</span><span class="o">.</span><span class="n">spawn_mutant</span><span class="p">())</span> <span class="o">+</span> <span class="p">[</span><span class="n">g</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">ng</span>

  <span class="k">def</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">xs</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">cmp_by_score</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
      <span class="n">xs</span> <span class="o">=</span> <span class="n">x</span><span class="o">.</span><span class="n">score</span><span class="p">()</span>
      <span class="n">ys</span> <span class="o">=</span> <span class="n">y</span><span class="o">.</span><span class="n">score</span><span class="p">()</span>
      <span class="k">if</span> <span class="n">xs</span> <span class="o">&lt;</span> <span class="n">ys</span><span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
      <span class="k">elif</span> <span class="n">xs</span> <span class="o">&gt;</span> <span class="n">ys</span><span class="p">:</span>
        <span class="k">return</span> <span class="mi">1</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="k">assert</span><span class="p">(</span><span class="n">xs</span> <span class="o">==</span> <span class="n">ys</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="n">xs</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">cmp_by_score</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">xs</span><span class="p">[:</span><span class="bp">self</span><span class="o">.</span><span class="n">mass</span><span class="p">]</span>

  <span class="k">def</span> <span class="nf">evolve</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">genes</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">create_ng</span><span class="p">())</span>

  <span class="k">def</span> <span class="nf">head</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">genes</span><span class="p">[:</span><span class="mi">5</span><span class="p">]:</span>
      <span class="k">print</span> <span class="n">g</span><span class="o">.</span><span class="n">score</span><span class="p">(),</span> <span class="n">g</span><span class="o">.</span><span class="n">code</span>


<span class="n">vat</span> <span class="o">=</span> <span class="n">GeneVat</span><span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">vat</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">vat</span><span class="o">.</span><span class="n">genes</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">score</span><span class="p">()</span><span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="n">vat</span><span class="o">.</span><span class="n">evolve</span><span class="p">()</span>
  <span class="k">print</span> <span class="s">&#39;generation </span><span class="si">%i</span><span class="s">&#39;</span><span class="o">%</span><span class="n">i</span>
  <span class="n">vat</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6301/addtag/" class="addtag" id="addtag_6301">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081203184030/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6301/download/">
		download code
      </a>]
	  [<a href="/web/20081203184030/http://ja.doukaku.org/comment/6301/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6301"
  >-</span><span
  class="button yellow"
  id="rating_z_6301"
  >0</span><span 
  class="button green"
  id="rating_p_6301"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081203184030/http://ja.doukaku.org/177/reply_to/6301/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6304">
  <p class="banner"><a href="/web/20081203184030/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081203184030/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081203184030im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081203184030/http://ja.doukaku.org/comment/6304/">#6304</a>(<script language="JavaScript">print_time(new Date("2008/05/19 13:12 GMT"));</script><noscript>2008/05/19 13:12 GMT</noscript>)
	
	
	
	[<a href="/web/20081203184030/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>他と同じく、3だと収束しないので5です。
また、ブラウザが固まらないようにsetTimeoutを使っています。Rhinoなどで実行する場合は、setTimerのところをwhileループにでもして下さい。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">test</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="s2">&quot;METHINKSITISAWEASEL&quot;</span><span class="o">;</span>
  <span class="k">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">initialData</span><span class="p">(</span><span class="mi">300</span><span class="o">,</span> <span class="nx">x</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">,</span> <span class="nx">x</span><span class="p">);</span>
  <span class="k">var</span> <span class="nx">mutate</span> <span class="o">=</span> <span class="mi">5</span><span class="o">;</span>
  <span class="nx">setTimer</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutate</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">function</span> <span class="nx">setTimer</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="o">,</span> <span class="nx">count</span><span class="o">,</span> <span class="nx">interval</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="k">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">print</span><span class="p">(</span><span class="nx">count</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="o">;</span>
    <span class="p">}</span>
    <span class="nx">data</span> <span class="o">=</span> <span class="nx">mutateAndSelect</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="p">);</span>
    <span class="nx">setTimer</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="o">,</span> <span class="nx">count</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="nx">interval</span><span class="p">);</span>
  <span class="p">}</span><span class="o">,</span> <span class="nx">interval</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">mutateAndSelect</span> <span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">data</span><span class="o">,</span> <span class="nx">mutateNum</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span> <span class="o">*</span> <span class="nx">mutateNum</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="nx">n</span><span class="o">=</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">n</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">j</span><span class="o">&lt;</span><span class="nx">mutateNum</span><span class="o">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">ar</span><span class="p">[</span><span class="nx">i</span><span class="o">*</span><span class="nx">mutateNum</span> <span class="o">+</span> <span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">mutate</span><span class="p">();</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">ar</span><span class="o">,</span> <span class="nx">x</span><span class="p">).</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="o">,</span> <span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">sort</span><span class="p">(</span><span class="nx">data</span><span class="o">,</span> <span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">cache</span> <span class="o">=</span> <span class="p">{};</span>
  <span class="nx">data</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="k">function</span> <span class="p">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">da</span> <span class="o">=</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">cache</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span> <span class="o">=</span> <span class="nx">a</span><span class="p">.</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
    <span class="k">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">cache</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">cache</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span> <span class="o">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">differenceFrom</span><span class="p">(</span><span class="nx">x</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">da</span> <span class="o">-</span> <span class="nx">db</span><span class="o">;</span>
  <span class="p">});</span>
  <span class="k">return</span> <span class="nx">data</span><span class="o">;</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">initialData</span><span class="p">(</span><span class="nx">num</span><span class="o">,</span> <span class="nx">len</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">num</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">num</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">ar</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">randomString</span><span class="p">(</span><span class="nx">len</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">ar</span><span class="o">;</span>
<span class="p">}</span>
<span class="k">function</span> <span class="nx">randomString</span><span class="p">(</span><span class="nx">len</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nx">chars</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Array</span><span class="p">(</span><span class="nx">len</span><span class="p">);</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">len</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <sp>




<!--
     FILE ARCHIVED ON 18:40:30 Dec 3, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:43:54 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
