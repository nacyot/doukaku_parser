
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
フォルダパス一覧のツリー構造への変換
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100102054009cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100102054009cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100102054009cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20100102054009/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100102054009/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100102054009js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100102054009js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100102054009js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100102054009js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app15.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/102\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "2";
var displayMonth = "Jan";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/102/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100102054009" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20091130022116/http://ja.doukaku.org/102/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="30 Nov 2009"><strong>NOV</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 5:40:09 Jan 2, 2010">JAN</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Feb
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20091130022116/http://ja.doukaku.org/102/nested/" title="2:21:16 Nov 30, 2009" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 5:40:09 Jan 2, 2010">2</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081204135403/http://ja.doukaku.org/102/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="4 Dec 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 5:40:09 Jan 2, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100102054009*/http://ja.doukaku.org/102/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>9 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 2 Jan 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000000_2008:-1:010000000001_2009:-1:000000002020_2010:0:200000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100102054009/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
[トピック]
<a href="/web/20100102054009/http://ja.doukaku.org/102/">フォルダパス一覧のツリー構造への変換</a>
</h2>

    





<div class="comment" id="comment4458">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/550/" target="_top">todogzm</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4458/">#4458</a>(<script language="JavaScript">print_time(new Date("2007/11/28 08:23 GMT"));</script><noscript>2007/11/28 08:23 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  (相対)フォルダのパスの一覧が与えられ、そのフォルダパスの一覧をツリー構造に変換してください。<br/>フォルダパスの区切り文字は'\'文字を使用しています。<br/><br/>以下のような1行1パスのフォルダのパスがあった場合、<br/>&nbsp;abc\def<br/>&nbsp;abc\def\gh<br/>&nbsp;abc\def\ij<br/>&nbsp;abc\jk\lm<br/>&nbsp;de<br/><br/>イメージとして、以下のようなツリー構造を構築できればOKです。<br/>&nbsp;ROOT<br/>&nbsp;┗abc<br/>&nbsp;　┗def<br/>&nbsp;　　┗gh<br/>&nbsp;　　┗ij<br/>&nbsp;　┗jk<br/>&nbsp;　　┗lm<br/>&nbsp;┗de<br/><br/>ツリーですのでルートがあります。上記のフォルダ一覧はルート以下にぶら下げてください。また、同じフォルダにぶら下がっているサブフォルダの名前は重複させてはいけません。<br/><br/>上記のような出力は結果の分かりやすさとしてあった方がいいですが、なければないで構いません。また、ASやJavaFXでグラフィカルな結果を表示するプログラムでも構いませんが、データ構造はちゃんと作ってください。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4458/addtag/" class="addtag" id="addtag_4458">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4458"
  >-</span><span
  class="button yellow"
  id="rating_z_4458"
  >0</span><span 
  class="button green"
  id="rating_p_4458"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4458/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100102054009/http://ja.doukaku.org/102/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20100102054009/http://ja.doukaku.org/102/flatten/">フラット表示</a> 
<a href="/web/20100102054009/http://ja.doukaku.org/102/">非表示</a> 


  

  
    





<div class="comment" id="comment4461">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/570/" target="_top">horiuchi</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4461/">#4461</a>(<script language="JavaScript">print_time(new Date("2007/11/28 10:35 GMT"));</script><noscript>2007/11/28 10:35 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>C#で素直に実装してみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Sample102</span>
<span class="k">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IDictionary</span> <span class="n">dirTree_</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">();</span>

    <span class="k">public</span> <span class="nf">Sample102</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">pathList</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">createTree</span><span class="p">(</span><span class="n">pathList</span><span class="p">);</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="k">void</span> <span class="nf">createTree</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">pathList</span><span class="p">)</span> <span class="k">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">path</span> <span class="k">in</span> <span class="n">pathList</span><span class="p">)</span> <span class="k">{</span>
            <span class="kt">string</span><span class="p">[]</span> <span class="n">dirs</span> <span class="p">=</span> <span class="n">path</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="sc">&#39;\\&#39;</span><span class="p">);</span>
            <span class="n">addTree</span><span class="p">(</span><span class="n">dirs</span><span class="p">);</span>
        <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="k">void</span> <span class="nf">addTree</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">dirs</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">IDictionary</span> <span class="n">prevDict</span> <span class="p">=</span> <span class="n">dirTree_</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">dirs</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">index</span><span class="p">++)</span> <span class="k">{</span>
            <span class="n">IDictionary</span> <span class="n">dict</span> <span class="p">=</span> <span class="n">prevDict</span><span class="p">[</span><span class="n">dirs</span><span class="p">[</span><span class="n">index</span><span class="p">]]</span> <span class="k">as</span> <span class="n">IDictionary</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">dict</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="k">{</span>
                <span class="n">dict</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">();</span>
                <span class="n">prevDict</span><span class="p">[</span><span class="n">dirs</span><span class="p">[</span><span class="n">index</span><span class="p">]]</span> <span class="p">=</span> <span class="n">dict</span><span class="p">;</span>
            <span class="k">}</span>
            <span class="n">prevDict</span> <span class="p">=</span> <span class="n">dict</span><span class="p">;</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">printTree</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">printTree</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">dirTree_</span><span class="p">));</span>
    <span class="k">}</span>
    <span class="k">private</span> <span class="kt">string</span> <span class="nf">printTree</span><span class="p">(</span><span class="kt">int</span> <span class="n">depth</span><span class="p">,</span> <span class="kt">string</span> <span class="n">name</span><span class="p">,</span> <span class="n">IDictionary</span> <span class="n">innerDir</span><span class="p">)</span> <span class="k">{</span>
        <span class="n">StringBuilder</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">index</span> <span class="p">&lt;</span> <span class="n">depth</span><span class="p">;</span> <span class="n">index</span><span class="p">++)</span> <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="s">&quot;  &quot;</span><span class="p">);</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="sc">&#39;/&#39;</span><span class="p">);</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">name</span><span class="p">);</span>
        <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">);</span>

        <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">dir</span> <span class="k">in</span> <span class="n">innerDir</span><span class="p">.</span><span class="n">Keys</span><span class="p">)</span> <span class="k">{</span>
            <span class="n">builder</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">printTree</span><span class="p">(</span><span class="n">depth</span> <span class="p">+</span> <span class="m">1</span><span class="p">,</span> <span class="n">dir</span><span class="p">,</span> <span class="n">innerDir</span><span class="p">[</span><span class="n">dir</span><span class="p">]</span> <span class="k">as</span> <span class="n">IDictionary</span><span class="p">));</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="n">builder</span><span class="p">.</span><span class="n">ToString</span><span class="p">();</span>
    <span class="k">}</span>


<span class="na">    [STAThread]</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
        <span class="kt">string</span><span class="p">[]</span> <span class="n">pathList</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="k">{</span>
                 <span class="s">@&quot;abc\def&quot;</span><span class="p">,</span>
                 <span class="s">@&quot;abc\def\gh&quot;</span><span class="p">,</span>
                 <span class="s">@&quot;abc\def\ij&quot;</span><span class="p">,</span>
                 <span class="s">@&quot;abc\jk\lm&quot;</span><span class="p">,</span>
                 <span class="s">@&quot;de&quot;</span><span class="p">,</span>
            <span class="k">}</span><span class="p">;</span>

        <span class="n">Sample102</span> <span class="n">pathTree</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample102</span><span class="p">(</span><span class="n">pathList</span><span class="p">);</span>
        <span class="n">pathTree</span><span class="p">.</span><span class="n">printTree</span><span class="p">();</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">ReadLine</span><span class="p">();</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4461/addtag/" class="addtag" id="addtag_4461">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4461/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4461/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4461"
  >-</span><span
  class="button yellow"
  id="rating_z_4461"
  >0</span><span 
  class="button green"
  id="rating_p_4461"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4461/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4464">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4464/">#4464</a>(<script language="JavaScript">print_time(new Date("2007/11/28 13:04 GMT"));</script><noscript>2007/11/28 13:04 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>擬似lsの実装は実はデータ構造の話を次にもってこようかなぁと思ってたりしていた。

一応10分くらいで実装してみた。
辞書型を使って処理してみる。

以下実行結果
-----------
 abc
  def
   gh
   ij
  jk
   lm
 azc
  def
 de</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre><span class="c">#-*- coding: utf-8 -*-</span>

<span class="n">pathList</span> <span class="o">=</span> <span class="p">[</span>
<span class="s">&quot;azc</span><span class="se">\\</span><span class="s">def&quot;</span><span class="p">,</span>
<span class="s">&quot;abc</span><span class="se">\\</span><span class="s">def&quot;</span><span class="p">,</span>
<span class="s">&quot;abc</span><span class="se">\\</span><span class="s">def</span><span class="se">\\</span><span class="s">gh&quot;</span><span class="p">,</span>
<span class="s">&quot;abc</span><span class="se">\\</span><span class="s">def</span><span class="se">\\</span><span class="s">ij&quot;</span><span class="p">,</span>
<span class="s">&quot;abc</span><span class="se">\\</span><span class="s">jk</span><span class="se">\\</span><span class="s">lm&quot;</span><span class="p">,</span>
<span class="s">&quot;de&quot;</span><span class="p">]</span>

<span class="n">tree</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">path</span> <span class="ow">in</span> <span class="n">pathList</span><span class="p">:</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="n">tree</span>
    <span class="k">for</span> <span class="nb">dir</span> <span class="ow">in</span> <span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\\</span><span class="s">&quot;</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">temp</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="nb">dir</span><span class="p">):</span>
            <span class="n">temp</span><span class="p">[</span><span class="nb">dir</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">temp</span> <span class="o">=</span> <span class="n">temp</span><span class="p">[</span><span class="nb">dir</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">printTree</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">nest</span><span class="p">):</span>
    <span class="n">keyList</span> <span class="o">=</span> <span class="n">tree</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>
    <span class="n">keyList</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="n">keyList</span><span class="p">:</span>
        <span class="k">print</span> <span class="s">&quot; &quot;</span><span class="o">*</span><span class="n">nest</span><span class="p">,</span><span class="n">key</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="n">key</span><span class="p">]</span><span class="o">.</span><span class="n">keys</span><span class="p">()):</span>
            <span class="n">printTree</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="n">key</span><span class="p">],</span> <span class="n">nest</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
            
<span class="n">printTree</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4464/addtag/" class="addtag" id="addtag_4464">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4464/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4464/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4464"
  >-</span><span
  class="button yellow"
  id="rating_z_4464"
  >0</span><span 
  class="button green"
  id="rating_p_4464"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100102054009/http://ja.doukaku.org/comment/4464/">
    1
    reply
  </a>

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4464/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4467">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4467/">#4467</a>(<script language="JavaScript">print_time(new Date("2007/11/28 13:57 GMT"));</script><noscript>2007/11/28 13:57 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>dirが色が付いてると思ったら、組み込み関数なのかこれ。
知らなかった・・・。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4467/addtag/" class="addtag" id="addtag_4467">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4467"
  >-</span><span
  class="button yellow"
  id="rating_z_4467"
  >0</span><span 
  class="button green"
  id="rating_p_4467"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100102054009/http://ja.doukaku.org/comment/4464/"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100102054009/http://ja.doukaku.org/comment/4467/root/"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4467/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment4466">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4466/">#4466</a>(<script language="JavaScript">print_time(new Date("2007/11/28 13:47 GMT"));</script><noscript>2007/11/28 13:47 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ファイルパスの分解には，System.FilePath.Windows モジュールの splitPath
を用いる．Unix系ファイルシステム流の'/'の場合は System.FilePath.Unixを
用いればよい．

ツリーの構築と表示には Data.Tree モジュール unfoldTree および drawTree
をそれぞれ用いる．

実行例：
*Main&gt; putStrLn $ drawTree $ buildFS pathList
ROOT
|
+- abc
|  |
|  +- def
|  |  |
|  |  +- gh
|  |  |
|  |  `- ij
|  |
|  `- jk
|     |
|     `- lm
|
`- de
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Tree</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">FilePath</span><span class="o">.</span><span class="n">Windows</span>

<span class="nv">binapp</span> <span class="nv">o</span> <span class="nv">f</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="nv">f</span> <span class="nv">x</span> <span class="p">`</span><span class="nv">o</span><span class="p">`</span> <span class="nv">f</span> <span class="nv">y</span>

<span class="kr">type</span> <span class="n">FS</span> <span class="o">=</span> <span class="n">Tree</span> <span class="n">FilePath</span>

<span class="nv">buildFS</span> <span class="o">::</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">FS</span>
<span class="nv">buildFS</span> <span class="o">=</span> <span class="n">Node</span> <span class="s">&quot;ROOT&quot;</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">buildDir</span> <span class="o">.</span> <span class="nv">groupPath</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">splitPath</span> <span class="o">.</span> <span class="nv">sort</span>

<span class="nv">buildDir</span> <span class="o">::</span> <span class="p">(</span><span class="n">FilePath</span><span class="p">,[[</span><span class="n">FilePath</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">FS</span>
<span class="nv">buildDir</span> <span class="o">=</span> <span class="nv">unfoldTree</span> <span class="nv">phi</span>
 <span class="kr">where</span> <span class="nv">phi</span> <span class="p">(</span><span class="nv">n</span><span class="p">,</span><span class="nv">ps</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">delete</span> <span class="nv">pathSeparator</span> <span class="nv">n</span><span class="p">,</span> <span class="nv">groupPath</span> <span class="o">$</span> <span class="nv">filter</span> <span class="p">(</span><span class="nv">not</span> <span class="o">.</span> <span class="nv">null</span><span class="p">)</span> <span class="nv">ps</span><span class="p">)</span>

<span class="nv">groupPath</span> <span class="o">::</span> <span class="p">[[</span><span class="n">FilePath</span><span class="p">]]</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">FilePath</span><span class="p">,[[</span><span class="n">FilePath</span><span class="p">]])]</span>
<span class="nv">groupPath</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">grouping</span> <span class="o">.</span> <span class="nv">groupBy</span> <span class="p">(</span><span class="nv">binapp</span> <span class="nv">eqpath</span> <span class="nv">head</span><span class="p">)</span>
  <span class="kr">where</span> <span class="nv">grouping</span> <span class="nv">ss</span> <span class="o">=</span> <span class="p">(</span><span class="nv">head</span> <span class="o">.</span> <span class="nv">head</span> <span class="o">$</span> <span class="nv">ss</span><span class="p">,</span> <span class="nv">map</span> <span class="nv">tail</span> <span class="nv">ss</span><span class="p">)</span>
        <span class="nv">eqpath</span>      <span class="o">=</span> <span class="nv">binapp</span> <span class="p">(</span><span class="o">==</span><span class="p">)</span> <span class="p">(</span><span class="nv">fst</span> <span class="o">.</span> <span class="nv">break</span> <span class="p">(</span><span class="nv">pathSeparator</span><span class="o">==</span><span class="p">))</span>

<span class="nv">pathList</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;abc\\def&quot;</span><span class="p">,</span><span class="s">&quot;abc\\def\\gh&quot;</span><span class="p">,</span><span class="s">&quot;abc\\def\\ij&quot;</span><span class="p">,</span><span class="s">&quot;abc\\jk\\lm&quot;</span><span class="p">,</span><span class="s">&quot;de&quot;</span><span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4466/addtag/" class="addtag" id="addtag_4466">タグ</a>:
	
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/ghc-6.8.1/">ghc-6.8.1</a>
    
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4466/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4466/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4466"
  >-</span><span
  class="button yellow"
  id="rating_z_4466"
  >0</span><span 
  class="button green"
  id="rating_p_4466"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4466/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment4473">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4473/">#4473</a>(<script language="JavaScript">print_time(new Date("2007/11/29 01:31 GMT"));</script><noscript>2007/11/29 01:31 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>作成はちょっと変則的なinjectと破壊的作用の組み合わせでハッシュでツリーを。</p>
<p>表示は素直な再帰で。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre><span class="n">path_list</span> <span class="o">=</span> <span class="sx">%w(</span>
<span class="sx">abc\\def</span>
<span class="sx">abc\\def\\gh</span>
<span class="sx">abc\\def\\ij</span>
<span class="sx">abc\\jk\\lm</span>
<span class="sx">de</span>
<span class="sx">)</span>

<span class="k">def</span> <span class="nf">dump_tree</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">pad</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
  <span class="n">h</span><span class="o">.</span><span class="n">sort_by</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span> <span class="n">k</span><span class="p">}</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="p">,</span><span class="n">v</span><span class="o">|</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">pad</span><span class="p">,</span> <span class="s2">&quot;┗&quot;</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">dump_tree</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">pad</span><span class="o">+</span><span class="s2">&quot;  &quot;</span><span class="p">)</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="n">h</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">path_list</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">path</span><span class="o">|</span>
  <span class="n">path</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">/\\/).inject(h){|k,v|</span>
<span class="sr">    k[v] ||= {}</span>
<span class="sr">  }</span>
<span class="sr">}</span>

<span class="sr">dump_tree(h)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4473/addtag/" class="addtag" id="addtag_4473">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4473/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4473/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4473"
  >-</span><span
  class="button yellow"
  id="rating_z_4473"
  >0</span><span 
  class="button green"
  id="rating_p_4473"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100102054009/http://ja.doukaku.org/comment/4473/">
    1
    reply
  </a>

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4473/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4475">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4475/">#4475</a>(<script language="JavaScript">print_time(new Date("2007/11/29 05:42 GMT"));</script><noscript>2007/11/29 05:42 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  これはすばらしい！<br/><br/>感動したので、Squeak&nbsp;Smalltalk&nbsp;に意訳させていただきました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre>| pathList tree dumpTree |
pathList := #(&#39;abc\def&#39; &#39;abc\def\gh&#39; &#39;abc\def\ij&#39; &#39;abc\jk\lm&#39; &#39;de&#39;).

tree := Dictionary new.
pathList do: [:path |
    (path subStrings: #($\)) inject: tree into: [:tr :dir |
        tr at: dir ifAbsentPut: [Dictionary new]]].

dumpTree := [:tr :lev |
    tr keys asSortedCollection do: [:key |
        Transcript crtab: lev; show: key.
        (tr at: key) ifNotEmptyDo: [:child |
            dumpTree copy fixTemps value: child value: lev + 1]]].

World findATranscript: nil.
dumpTree copy fixTemps value: tree value: 0

&quot;=&gt;
abc
    def
        gh
        ij
    jk
        lm
de
&quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4475/addtag/" class="addtag" id="addtag_4475">タグ</a>:
	
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4475/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4475/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4475"
  >-</span><span
  class="button yellow"
  id="rating_z_4475"
  >0</span><span 
  class="button green"
  id="rating_p_4475"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100102054009/http://ja.doukaku.org/comment/4473/"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100102054009/http://ja.doukaku.org/comment/4475/root/"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4475/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment4474">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4474/">#4474</a>(<script language="JavaScript">print_time(new Date("2007/11/29 05:40 GMT"));</script><noscript>2007/11/29 05:40 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。<br/><br/>mamamoto&nbsp;さんの&nbsp;#4473&nbsp;に感じ入ったあとでは、#groupBy:having:&nbsp;を便利に使っているつもりが使われてしまっているみたいでダメダメですね(^_^;)。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34</pre></td><td class="code"><div class="highlight"><pre>| genTree printTree pathList tree |
genTree := [:paths |
    | leaf |
    leaf := paths groupBy: [:path | path first] having: [:g | true].
    leaf associationsDo: [:assoc |
        | newValue |
        newValue := assoc value
            collect: [:val | val allButFirst] thenSelect: [:val | val notEmpty].
        assoc value: (newValue isEmpty
            ifTrue: [newValue]
            ifFalse: [genTree copy fixTemps value: newValue])]].

printTree := [:dic :lev |
    dic keys asSortedCollection do: [:key |
        Transcript crtab: lev; show: key.
        (dic at: key) ifNotEmptyDo: [:child |
            printTree copy fixTemps value: child value: lev + 1]]].

pathList := #(&#39;abc\def&#39; &#39;abc\def\gh&#39; &#39;abc\def\ij&#39; &#39;abc\jk\lm&#39; &#39;de&#39;).
pathList := pathList collect: [:each | each subStrings: {$\}].

World findATranscript: nil.
tree := genTree copy fixTemps value: pathList.
printTree copy fixTemps value: tree value: 0

&quot;=&gt;
abc
    def
        gh
        ij
    jk
        lm
de
&quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4474/addtag/" class="addtag" id="addtag_4474">タグ</a>:
	
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4474/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4474/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4474"
  >-</span><span
  class="button yellow"
  id="rating_z_4474"
  >0</span><span 
  class="button green"
  id="rating_p_4474"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4474/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment4478">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/573/" target="_top">greentea</a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4478/">#4478</a>(<script language="JavaScript">print_time(new Date("2007/11/29 09:37 GMT"));</script><noscript>2007/11/29 09:37 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>素直に再帰関数で実装しました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre><span class="c"># encoding: utf-8</span>
<span class="nb">list</span> <span class="o">=</span> <span class="p">[</span> <span class="s">&quot;abc</span><span class="se">\\</span><span class="s">def&quot;</span><span class="p">,</span> <span class="s">&quot;abc</span><span class="se">\\</span><span class="s">def</span><span class="se">\\</span><span class="s">gh&quot;</span><span class="p">,</span> <span class="s">&quot;abc</span><span class="se">\\</span><span class="s">def</span><span class="se">\\</span><span class="s">ij&quot;</span><span class="p">,</span> <span class="s">&quot;abc</span><span class="se">\\</span><span class="s">jk</span><span class="se">\\</span><span class="s">lm&quot;</span><span class="p">,</span> <span class="s">&quot;de&quot;</span> <span class="p">]</span>

<span class="k">def</span> <span class="nf">pathtree</span><span class="p">(</span><span class="n">lst</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">maketree</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">set</span><span class="p">([</span><span class="n">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">l</span><span class="p">])]</span>
    <span class="n">s</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>
    <span class="k">return</span> <span class="p">[[</span><span class="n">v</span><span class="p">,</span> <span class="n">maketree</span><span class="p">([</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">l</span> <span class="k">if</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">==</span><span class="n">v</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">])]</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">s</span><span class="p">]</span>
  <span class="k">return</span> <span class="p">[</span><span class="s">&quot;ROOT&quot;</span><span class="p">,</span> <span class="n">maketree</span><span class="p">([</span><span class="n">s</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\\</span><span class="s">&quot;</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">list</span><span class="p">])]</span>

<span class="k">def</span> <span class="nf">printtree</span><span class="p">(</span><span class="n">tree</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">printchild</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">nest</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">tree</span><span class="p">:</span>
      <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="p">[]:</span> <span class="k">continue</span>
      <span class="k">print</span> <span class="s">&quot; &quot;</span><span class="o">*</span><span class="n">nest</span><span class="o">*</span><span class="mi">2</span> <span class="o">+</span> <span class="s">&quot;┗&quot;</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
      <span class="n">printchild</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">nest</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
  <span class="k">print</span> <span class="n">tree</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
  <span class="n">printchild</span><span class="p">(</span><span class="n">tree</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">0</span><span class="p">)</span>

<span class="n">printtree</span><span class="p">(</span><span class="n">pathtree</span><span class="p">(</span><span class="nb">list</span><span class="p">))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4478/addtag/" class="addtag" id="addtag_4478">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4478/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4478/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4478"
  >-</span><span
  class="button yellow"
  id="rating_z_4478"
  >0</span><span 
  class="button green"
  id="rating_p_4478"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4478/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4482">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4482/">#4482</a>(<script language="JavaScript">print_time(new Date("2007/11/29 14:04 GMT"));</script><noscript>2007/11/29 14:04 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>System.Windows.FormsのTreeViewに表示させてみました。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100102054009/http://blogs.dion.ne.jp/anis7742/#6517703">貧脚レーサーのサボり日記</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre><span class="c">//http://ja.doukaku.org/</span>
<span class="c">//http://ja.doukaku.org/102/投稿用</span>
<span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Windows.Forms</span><span class="p">;</span>

<span class="k">namespace</span> <span class="err">どう書く</span><span class="nn">_org</span><span class="err">フォルダパス一覧のツリ</span><span class="n">ー</span><span class="err">構造への変換</span> <span class="k">{</span>
    <span class="k">class</span> <span class="nc">Program</span> <span class="k">{</span>
<span class="na">        [STAThread]</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="k">{</span>
            <span class="n">Application</span><span class="p">.</span><span class="n">Run</span><span class="p">(</span><span class="k">new</span> <span class="n">Form1</span><span class="p">());</span>
        <span class="k">}</span>
    <span class="k">}</span>

    <span class="k">class</span> <span class="nc">Form1</span><span class="p">:</span><span class="n">Form</span> <span class="k">{</span>
        <span class="c">//treeView1</span>
        <span class="n">TreeView</span> <span class="n">treeView1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TreeView</span><span class="p">();</span>

        <span class="c">//起動時引数でパス一覧のファイルを指定</span>
        <span class="kt">string</span> <span class="n">pathListFilePath</span> <span class="p">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="n">GetCommandLineArgs</span><span class="p">()[</span><span class="m">1</span><span class="p">];</span>

        <span class="k">public</span> <span class="nf">Form1</span><span class="p">()</span> <span class="k">{</span>
            <span class="c">//Form1</span>
            <span class="k">this</span><span class="p">.</span><span class="n">Load</span> <span class="p">+=</span> <span class="k">new</span> <span class="n">EventHandler</span><span class="p">(</span><span class="n">Form1_Load</span><span class="p">);</span>
            <span class="c">//treeView1</span>
            <span class="n">treeView1</span><span class="p">.</span><span class="n">Parent</span> <span class="p">=</span> <span class="k">this</span><span class="p">;</span>
            <span class="n">treeView1</span><span class="p">.</span><span class="n">Dock</span> <span class="p">=</span> <span class="n">DockStyle</span><span class="p">.</span><span class="n">Fill</span><span class="p">;</span>
        <span class="k">}</span>

        <span class="k">void</span> <span class="nf">Form1_Load</span><span class="p">(</span><span class="kt">object</span> <span class="n">sender</span><span class="p">,</span> <span class="n">EventArgs</span> <span class="n">e</span><span class="p">)</span> <span class="k">{</span>
            <span class="c">//ROOTNode</span>
            <span class="n">TreeNode</span> <span class="n">rootNode</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="s">&quot;ROOT&quot;</span><span class="p">);</span>
            <span class="n">treeView1</span><span class="p">.</span><span class="n">Nodes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">rootNode</span><span class="p">);</span>

            <span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">fullPath</span> <span class="k">in</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">ReadAllLines</span><span class="p">(</span><span class="n">pathListFilePath</span><span class="p">))</span> <span class="k">{</span>
                <span class="n">TreeNode</span> <span class="n">addNode</span> <span class="p">=</span> <span class="n">rootNode</span><span class="p">;</span>
                <span class="k">foreach</span><span class="p">(</span><span class="kt">string</span> <span class="n">path</span> <span class="k">in</span> <span class="n">fullPath</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">new</span> <span class="kt">char</span><span class="p">[]</span> <span class="k">{</span> <span class="sc">&#39;\\&#39;</span> <span class="k">}</span><span class="p">))</span> <span class="k">{</span>
                    <span class="kt">bool</span> <span class="n">flag</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
                    <span class="k">foreach</span><span class="p">(</span><span class="n">TreeNode</span> <span class="n">node</span> <span class="k">in</span> <span class="n">addNode</span><span class="p">.</span><span class="n">Nodes</span><span class="p">)</span> <span class="k">{</span>
                        <span class="k">if</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">Text</span> <span class="p">==</span> <span class="n">path</span><span class="p">)</span> <span class="k">{</span>
                            <span class="n">addNode</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span>
                            <span class="n">flag</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
                        <span class="k">}</span>
                        
                    <span class="k">}</span>
                    <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span> <span class="k">{</span>
                        <span class="n">TreeNode</span> <span class="n">newnode</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">path</span><span class="p">);</span>
                        <span class="n">addNode</span><span class="p">.</span><span class="n">Nodes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">newnode</span><span class="p">);</span>
                        <span class="n">addNode</span> <span class="p">=</span> <span class="n">newnode</span><span class="p">;</span>
                    <span class="k">}</span>
                <span class="k">}</span>
            <span class="k">}</span>
            <span class="n">rootNode</span><span class="p">.</span><span class="n">ExpandAll</span><span class="p">();</span>
        <span class="k">}</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4482/addtag/" class="addtag" id="addtag_4482">タグ</a>:
	
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/.NET2.0/">.NET2.0</a>
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/System.Windows.Forms/">System.Windows.Forms</a>
    
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4482/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4482/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4482"
  >-</span><span
  class="button yellow"
  id="rating_z_4482"
  >0</span><span 
  class="button green"
  id="rating_p_4482"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4482/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4483">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/504/" target="_top">あにす</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4483/">#4483</a>(<script language="JavaScript">print_time(new Date("2007/11/29 14:36 GMT"));</script><noscript>2007/11/29 14:36 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/vbnet/">
	  VB.net
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>VB.NETに書き換え。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100102054009/http://blogs.dion.ne.jp/anis7742/#6517967">貧脚レーサーのサボり日記</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="c">&#39;http://ja.doukaku.org/</span>
<span class="c">&#39;http://ja.doukaku.org/102/投稿用</span>
<span class="k">Imports</span> <span class="n">System</span>
<span class="k">Imports</span> <span class="n">System</span><span class="p">.</span><span class="n">Windows</span><span class="p">.</span><span class="n">Forms</span>

<span class="k">NameSpace</span> <span class="err">どう書く</span><span class="n">_org</span><span class="err">フォルダパス一覧のツリー構造への変換</span>
    <span class="k">Class</span> <span class="nc">Program</span>
        <span class="o">&lt;</span><span class="n">STAThread</span><span class="o">&gt;</span> <span class="n">_</span>
        <span class="k">Shared</span> <span class="k">Sub</span> <span class="n">Main</span><span class="p">(</span><span class="k">byval</span> <span class="n">args</span><span class="p">()</span> <span class="ow">As</span> <span class="kt">String</span><span class="p">)</span>
            <span class="n">Application</span><span class="p">.</span><span class="n">Run</span><span class="p">(</span><span class="k">new</span> <span class="n">Form1</span><span class="p">())</span>
        <span class="k">End</span> <span class="k">Sub</span>
    <span class="k">End</span> <span class="k">Class</span>

    <span class="nc">class</span> <span class="n">Form1</span><span class="p">:</span><span class="k">Inherits</span> <span class="n">Form</span>
        <span class="c">&#39;treeView1</span>
        <span class="k">Dim</span> <span class="n">treeView1</span> <span class="ow">As</span> <span class="n">TreeView</span> <span class="o">=</span> <span class="k">New</span> <span class="n">TreeView</span><span class="p">()</span>

        <span class="c">&#39;起動時引数でパス一覧のファイルを指定</span>
        <span class="k">Dim</span> <span class="n">pathListFilePath</span> <span class="ow">As</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">System</span><span class="p">.</span><span class="n">Environment</span><span class="p">.</span><span class="n">GetCommandLineArgs</span><span class="p">()(</span><span class="mi">1</span><span class="p">)</span>

        <span class="k">Public</span> <span class="k">Sub</span> <span class="k">New</span><span class="p">()</span>
            <span class="c">&#39;treeView1</span>
            <span class="n">treeView1</span><span class="p">.</span><span class="n">Parent</span> <span class="o">=</span> <span class="k">Me</span>
            <span class="n">treeView1</span><span class="p">.</span><span class="n">Dock</span> <span class="o">=</span> <span class="n">DockStyle</span><span class="p">.</span><span class="n">Fill</span>
        <span class="k">End</span> <span class="k">Sub</span>

        <span class="k">Private</span> <span class="k">Sub</span> <span class="n">Form1_Load</span><span class="p">(</span><span class="k">byval</span> <span class="n">sender</span> <span class="ow">As</span> <span class="kt">object</span><span class="p">,</span> <span class="k">byval</span> <span class="n">e</span> <span class="ow">As</span> <span class="n">EventArgs</span><span class="p">)</span><span class="k">handles</span> <span class="k">Me</span><span class="p">.</span><span class="n">Load</span>
            <span class="c">&#39;ROOTNode</span>
            <span class="k">Dim</span> <span class="n">rootNode</span> <span class="ow">As</span> <span class="n">TreeNode</span> <span class="o">=</span> <span class="k">New</span> <span class="n">TreeNode</span><span class="p">(</span><span class="s">&quot;ROOT&quot;</span><span class="p">)</span>
            <span class="n">treeView1</span><span class="p">.</span><span class="n">Nodes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">rootNode</span><span class="p">)</span>

            <span class="k">For</span> <span class="k">Each</span> <span class="n">fullPath</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">System</span><span class="p">.</span><span class="n">IO</span><span class="p">.</span><span class="n">File</span><span class="p">.</span><span class="n">ReadAllLines</span><span class="p">(</span><span class="n">pathListFilePath</span><span class="p">)</span>
                <span class="k">Dim</span> <span class="n">addNode</span> <span class="ow">As</span> <span class="n">TreeNode</span> <span class="o">=</span> <span class="n">rootNode</span>
                <span class="k">For</span> <span class="k">Each</span> <span class="n">path</span> <span class="ow">As</span> <span class="kt">String</span> <span class="ow">In</span> <span class="n">fullPath</span><span class="p">.</span><span class="n">Split</span><span class="p">(</span><span class="k">New</span> <span class="kt">char</span><span class="p">(){</span><span class="s">&quot;\&quot;c</span><span class="p">})</span>
                    <span class="k">Dim</span> <span class="n">flag</span> <span class="ow">As</span> <span class="kt">Boolean</span> <span class="o">=</span> <span class="k">True</span>
                    <span class="k">For</span> <span class="k">Each</span> <span class="n">node</span> <span class="ow">As</span> <span class="n">TreeNode</span> <span class="ow">in</span> <span class="n">addNode</span><span class="p">.</span><span class="n">Nodes</span>
                        <span class="k">If</span> <span class="n">node</span><span class="p">.</span><span class="n">Text</span> <span class="o">=</span> <span class="n">path</span> <span class="k">Then</span>
                            <span class="n">addNode</span> <span class="o">=</span> <span class="n">node</span>
                            <span class="n">flag</span> <span class="o">=</span> <span class="k">False</span>
                        <span class="k">End</span> <span class="k">If</span>
                    <span class="k">Next</span>
                    <span class="k">if</span> <span class="n">flag</span> <span class="k">Then</span>
                        <span class="k">Dim</span> <span class="n">newnode</span> <span class="ow">As</span> <span class="n">TreeNode</span> <span class="o">=</span> <span class="k">New</span> <span class="n">TreeNode</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
                        <span class="n">addNode</span><span class="p">.</span><span class="n">Nodes</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">newnode</span><span class="p">)</span>
                        <span class="n">addNode</span> <span class="o">=</span> <span class="n">newnode</span>
                    <span class="k">End</span> <span class="k">If</span>
                <span class="k">Next</span>
            <span class="k">Next</span>
            <span class="n">rootNode</span><span class="p">.</span><span class="n">ExpandAll</span><span class="p">()</span>
        <span class="k">End</span> <span class="k">Sub</span>
    <span class="k">End</span> <span class="k">Class</span>
<span class="nc">End</span> <span class="k">NameSpace</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4483/addtag/" class="addtag" id="addtag_4483">タグ</a>:
	
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/.NET2.0/">.NET2.0</a>
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/System.Windows.Forms/">System.Windows.Forms</a>
    
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/vbnet/">
		VB.net
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4483/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4483/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4483"
  >-</span><span
  class="button yellow"
  id="rating_z_4483"
  >0</span><span 
  class="button green"
  id="rating_p_4483"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4483/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4491">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/343/" target="_top">matyr</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4491/">#4491</a>(<script language="JavaScript">print_time(new Date("2007/11/29 18:07 GMT"));</script><noscript>2007/11/29 18:07 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11</pre></td><td class="code"><div class="highlight"><pre><span class="k">function</span> <span class="nx">doukaku102</span><span class="p">(</span><span class="nx">lst</span><span class="o">,</span> <span class="nx">sep</span><span class="p">){</span> <span class="nx">sep</span> <span class="o">||</span> <span class="p">(</span><span class="nx">sep</span> <span class="o">=</span> <span class="s1">&#39;/&#39;</span><span class="p">);</span>
  <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">out</span> <span class="o">=</span> <span class="p">[</span><span class="nx">sep</span><span class="p">]</span><span class="o">,</span> <span class="nx">root</span> <span class="o">=</span> <span class="p">{}</span><span class="o">,</span> <span class="nx">rgx</span> <span class="o">=</span> <span class="nb">RegExp</span><span class="p">(</span><span class="nx">sep</span><span class="p">)</span><span class="o">,</span> <span class="nx">mktree</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">tree</span><span class="o">,</span> <span class="nx">path</span><span class="p">){</span>
    <span class="nx">path</span> <span class="o">&amp;&amp;</span> <span class="nx">rgx</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
      <span class="o">?</span> <span class="nx">mktree</span><span class="p">(</span><span class="nx">tree</span><span class="p">[</span><span class="nb">RegExp</span><span class="p">.</span><span class="nx">leftContext</span><span class="p">]</span> <span class="o">||</span> <span class="p">(</span><span class="nx">tree</span><span class="p">[</span><span class="nb">RegExp</span><span class="p">.</span><span class="nx">leftContext</span><span class="p">]</span> <span class="o">=</span> <span class="p">{})</span><span class="o">,</span> <span class="nb">RegExp</span><span class="p">.</span><span class="nx">rightContext</span><span class="p">)</span>
      <span class="o">:</span> <span class="nx">tree</span><span class="p">[</span><span class="nx">path</span><span class="p">]</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
  <span class="p">}</span><span class="o">,</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">,</span> <span class="nx">l</span> <span class="o">=</span> <span class="nx">lst</span><span class="p">.</span><span class="nx">sort</span><span class="p">().</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">l</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">mktree</span><span class="p">(</span><span class="nx">root</span><span class="o">,</span> <span class="nx">lst</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
  <span class="p">(</span><span class="k">function</span> <span class="nx">ptree</span><span class="p">(</span><span class="nx">tree</span><span class="o">,</span> <span class="nx">tab</span><span class="p">){</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">dir</span> <span class="k">in</span> <span class="nx">tree</span><span class="p">)</span> <span class="nx">out</span><span class="p">[</span><span class="nx">out</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span> <span class="o">=</span> <span class="nx">tab</span> <span class="o">+</span><span class="s1">&#39;┗&#39;</span><span class="o">+</span> <span class="nx">dir</span><span class="o">,</span> <span class="nx">tree</span><span class="p">[</span><span class="nx">dir</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">ptree</span><span class="p">(</span><span class="nx">tree</span><span class="p">[</span><span class="nx">dir</span><span class="p">]</span><span class="o">,</span> <span class="nx">tab</span> <span class="o">+</span><span class="s1">&#39;　&#39;</span><span class="p">);</span>
  <span class="p">})(</span><span class="nx">root</span><span class="o">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
  <span class="k">return</span> <span class="nx">out</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/4491/addtag/" class="addtag" id="addtag_4491">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4491/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/4491/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4491"
  >-</span><span
  class="button yellow"
  id="rating_z_4491"
  >0</span><span 
  class="button green"
  id="rating_p_4491"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/4491/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5083">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5083/">#5083</a>(<script language="JavaScript">print_time(new Date("2008/01/01 08:38 GMT"));</script><noscript>2008/01/01 08:38 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>「データ構造を作成する」という条件に合うか微妙ですが、DefaultMutableTreeNodeを自分で操作してるので、いいよね。（なお、ノードはソートされません）</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">javax.swing.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">javax.swing.tree.*</span><span class="o">;</span>

<span class="k">class</span> <span class="nc">MeApp</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">DefaultMutableTreeNode</span> <span class="n">root</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultMutableTreeNode</span><span class="o">(</span><span class="s">&quot;ROOT&quot;</span><span class="o">);</span>
        <span class="k">final</span> <span class="n">BufferedReader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">path</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">((</span><span class="n">path</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">DefaultMutableTreeNode</span> <span class="n">node</span> <span class="o">=</span> <span class="n">root</span><span class="o">;</span>
                <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">name</span> <span class="o">:</span> <span class="n">path</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">&quot;\\\\&quot;</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">node</span> <span class="o">=</span> <span class="n">getChild</span><span class="o">(</span><span class="n">node</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">r</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">SwingUtilities</span><span class="o">.</span><span class="na">invokeLater</span><span class="o">(</span><span class="k">new</span> <span class="n">Runnable</span><span class="o">(){</span>
            <span class="k">public</span> <span class="kt">void</span> <span class="n">run</span><span class="o">()</span> <span class="o">{</span>
                <span class="k">final</span> <span class="n">MeFrame</span> <span class="n">frame</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MeFrame</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
                <span class="n">frame</span><span class="o">.</span><span class="na">setDefaultCloseOperation</span><span class="o">(</span><span class="n">MeFrame</span><span class="o">.</span><span class="na">EXIT_ON_CLOSE</span><span class="o">);</span>
                <span class="n">frame</span><span class="o">.</span><span class="na">pack</span><span class="o">();</span>
                <span class="n">frame</span><span class="o">.</span><span class="na">setVisible</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="k">private</span> <span class="k">static</span> <span class="n">DefaultMutableTreeNode</span> <span class="n">getChild</span><span class="o">(</span><span class="n">DefaultMutableTreeNode</span> <span class="n">parent</span><span class="o">,</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">Enumeration</span> <span class="n">e</span> <span class="o">=</span> <span class="n">parent</span><span class="o">.</span><span class="na">children</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">final</span> <span class="n">DefaultMutableTreeNode</span> <span class="n">child</span> <span class="o">=</span> <span class="o">(</span><span class="n">DefaultMutableTreeNode</span><span class="o">)</span><span class="n">e</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">child</span><span class="o">.</span><span class="na">getUserObject</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">child</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">final</span> <span class="n">DefaultMutableTreeNode</span> <span class="n">child</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultMutableTreeNode</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">parent</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">child</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">child</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="k">class</span> <span class="nc">MeFrame</span> <span class="k">extends</span> <span class="n">JFrame</span> <span class="o">{</span>
    <span class="k">public</span> <span class="n">MeFrame</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">final</span> <span class="n">JTree</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JTree</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">tree</span><span class="o">.</span><span class="na">getRowCount</span><span class="o">();</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span> <span class="c">// expand all</span>
            <span class="n">tree</span><span class="o">.</span><span class="na">expandRow</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">setContentPane</span><span class="o">(</span><span class="k">new</span> <span class="n">JScrollPane</span><span class="o">(</span><span class="n">tree</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5083/addtag/" class="addtag" id="addtag_5083">タグ</a>:
	
    
    <a href="/web/20100102054009/http://ja.doukaku.org/tag/Swing/">Swing</a>
    
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5083/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5083/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5083"
  >-</span><span
  class="button yellow"
  id="rating_z_5083"
  >0</span><span 
  class="button green"
  id="rating_p_5083"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/5083/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5087">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5087/">#5087</a>(<script language="JavaScript">print_time(new Date("2008/01/01 12:40 GMT"));</script><noscript>2008/01/01 12:40 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>とりあえずIE6とFirefox2(Win)で動作を確認。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
<span class="c">&lt;!--</span>

<span class="k">function</span> <span class="nx">traverse</span><span class="p">(</span><span class="nx">parentDict</span><span class="o">,</span> <span class="nx">parentNode</span><span class="o">,</span> <span class="nx">text</span><span class="p">)</span>
<span class="p">{</span>
    <span class="nx">parentNode</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createTextNode</span><span class="p">(</span><span class="nx">text</span><span class="p">));</span>

    <span class="k">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">parentNode</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;ul&quot;</span><span class="p">));</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">name</span> <span class="k">in</span> <span class="nx">parentDict</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">));</span>

        <span class="nx">traverse</span><span class="p">(</span><span class="nx">parentDict</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span><span class="o">,</span> <span class="nx">li</span><span class="o">,</span> <span class="nx">name</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">function</span> <span class="nx">create</span><span class="p">()</span>
<span class="p">{</span>
    <span class="k">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;textarea&quot;</span><span class="p">).</span><span class="nx">value</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s2">&quot;\r&quot;</span><span class="o">,</span> <span class="s2">&quot;&quot;</span><span class="p">);</span>

    <span class="k">var</span> <span class="nx">dict</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="k">var</span> <span class="nx">pathes</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">pathes</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="o">++</span><span class="nx">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">var</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">dict</span><span class="o">;</span>

        <span class="k">var</span> <span class="nx">names</span> <span class="o">=</span> <span class="nx">pathes</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\\&quot;</span><span class="p">);</span>

        <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">names</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="o">++</span><span class="nx">j</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="k">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">names</span><span class="p">[</span><span class="nx">j</span><span class="p">];</span>

            <span class="k">if</span> <span class="p">(</span><span class="nx">name</span> <span class="k">in</span> <span class="nx">node</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="p">[</span><span class="nx">name</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="nx">node</span> <span class="o">=</span> <span class="nx">node</span><span class="p">[</span><span class="nx">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="nx">div</span><span class="p">.</span><span class="nx">removeChild</span><span class="p">(</span><span class="nx">div</span><span class="p">.</span><span class="nx">firstChild</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nx">ul</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;ul&quot;</span><span class="p">));</span>

    <span class="k">var</span> <span class="nx">li</span> <span class="o">=</span> <span class="nx">ul</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;li&quot;</span><span class="p">));</span>

    <span class="nx">traverse</span><span class="p">(</span><span class="nx">dict</span><span class="o">,</span> <span class="nx">li</span><span class="o">,</span> <span class="s2">&quot;ROOT&quot;</span><span class="p">);</span>
<span class="p">}</span>

<span class="o">--&gt;</span>
<span class="o">&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">head</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="nx">textarea</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;textarea&quot;</span> <span class="nx">rows</span><span class="o">=</span><span class="s2">&quot;10&quot;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;50&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">textarea</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;button&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;Create tree&quot;</span> <span class="nx">onclick</span><span class="o">=</span><span class="s2">&quot;create()&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">input</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;div&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5087/addtag/" class="addtag" id="addtag_5087">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5087/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5087/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5087"
  >-</span><span
  class="button yellow"
  id="rating_z_5087"
  >0</span><span 
  class="button green"
  id="rating_p_5087"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/5087/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5557">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/507/" target="_top">fujidig</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5557/">#5557</a>(<script language="JavaScript">print_time(new Date("2008/01/29 14:23 GMT"));</script><noscript>2008/01/29 14:23 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/hsp/">
	  HSP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  モジュール変数をツリー構造に使用しています。
	</div>
	
	<p class="link">
	  参考: <a href="/web/20100102054009/http://www.fujidig.com/2007/12/modvar-tree.html">モジュール変数でツリー ( Fuji Diablog )</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre>#module m_tree children, content

#modinit str _content
#define global new_tree( %1, %2 = &quot;&quot; ) newmod %1, m_tree, %2
    content = _content
    dimtype children, 5, 1
    return

#defcfunc get_tree_content modvar m_tree@
    return content

#modfunc get_tree_child str _content, var result
    f = -1
    foreach children
        if get_tree_content( children.cnt ) != _content : continue
        f = cnt
        break
    loop
    if f &gt;= 0 : result = children.f : return
    new_tree children, _content
    result = children( length(children) - 1 )
    return

#modfunc _show_tree str indent
#define global show_tree( %1, %2 = &quot;&quot; ) _show_tree %1, %2
    if indent == &quot;&quot; {
        mes content
    } else {
        mes indent + &quot;┗&quot; + content
    }
    foreach children
        show_tree children.cnt, indent + &quot;  &quot;
    loop
    return

#global

paths = {&quot;
    abc\\def
    abc\\def\\gh
    abc\\def\\ij
    abc\\jk\\lm
    de&quot;}

new_tree tree, &quot;ROOT&quot;
paths_index = 0
repeat
    getstr path, paths, paths_index
    if strsize == 0 : break
    paths_index += strsize
    t = tree
    path_index = 0
    repeat
        getstr v, path, path_index, &#39;\\&#39;
        if strsize == 0 : break
        path_index += strsize
        get_tree_child t, v, t
    loop
loop

show_tree tree
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5557/addtag/" class="addtag" id="addtag_5557">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/hsp/">
		HSP
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5557/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5557/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5557"
  >-</span><span
  class="button yellow"
  id="rating_z_5557"
  >0</span><span 
  class="button green"
  id="rating_p_5557"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/5557/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment5562">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/507/" target="_top">fujidig</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5562/">#5562</a>(<script language="JavaScript">print_time(new Date("2008/01/30 10:55 GMT"));</script><noscript>2008/01/30 10:55 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>

<span class="k">struct</span> <span class="n">Node</span> <span class="p">{</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">content</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">content_size</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">**</span><span class="n">children</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">children_size</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">num_children</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">new_node</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="p">);</span>
<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">add_node_child</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="p">);</span>
<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">search_node_child</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="p">);</span>
<span class="kt">void</span> <span class="n">dump_node</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>
<span class="kt">void</span> <span class="n">delete_node</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span> <span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">32</span><span class="p">;</span>
    <span class="kt">char</span> <span class="o">*</span><span class="n">dirname</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">c</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">tree</span><span class="p">;</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">t</span><span class="p">;</span>
    <span class="n">tree</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span> <span class="s">&quot;ROOT&quot;</span> <span class="p">);</span>
    <span class="n">dirname</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span> <span class="n">size</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">tree</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">dirname</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">tree</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">c</span> <span class="o">=</span> <span class="n">getchar</span><span class="p">()</span> <span class="p">)</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">new_t</span><span class="p">;</span>
        <span class="k">switch</span><span class="p">(</span> <span class="n">c</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="sc">&#39;\\&#39;</span><span class="o">:</span>
        <span class="k">case</span> <span class="sc">&#39;\n&#39;</span><span class="o">:</span>
            <span class="n">dirname</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">new_t</span> <span class="o">=</span> <span class="n">search_node_child</span><span class="p">(</span> <span class="n">t</span><span class="p">,</span> <span class="n">dirname</span> <span class="p">);</span>
            <span class="k">if</span><span class="p">(</span> <span class="n">new_t</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
                <span class="n">new_t</span> <span class="o">=</span> <span class="n">add_node_child</span><span class="p">(</span> <span class="n">t</span><span class="p">,</span> <span class="n">dirname</span> <span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span> <span class="n">new_t</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
                <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">t</span> <span class="o">=</span> <span class="n">new_t</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span> <span class="n">c</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span> <span class="p">)</span> <span class="p">{</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">tree</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="k">if</span><span class="p">(</span> <span class="n">size</span> <span class="o">&lt;=</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">)</span> <span class="p">{</span>
                <span class="kt">int</span> <span class="n">new_size</span> <span class="o">=</span> <span class="n">size</span> <span class="o">+</span> <span class="mi">32</span><span class="p">;</span>
                <span class="kt">char</span> <span class="o">*</span><span class="n">new_dirname</span> <span class="o">=</span> <span class="n">realloc</span><span class="p">(</span> <span class="n">dirname</span><span class="p">,</span> <span class="n">size</span> <span class="p">);</span>
                <span class="k">if</span><span class="p">(</span> <span class="n">new_dirname</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
                    <span class="k">goto</span> <span class="n">error</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="n">size</span> <span class="o">=</span> <span class="n">new_size</span><span class="p">;</span>
                <span class="n">dirname</span> <span class="o">=</span> <span class="n">new_dirname</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">dirname</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span><span class="p">;</span>
            <span class="n">index</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">free</span><span class="p">(</span> <span class="n">dirname</span> <span class="p">);</span>
    <span class="n">dump_node</span><span class="p">(</span> <span class="n">tree</span> <span class="p">);</span>
    <span class="n">delete_node</span><span class="p">(</span> <span class="n">tree</span> <span class="p">);</span>
    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="nl">error:</span>
    <span class="n">fprintf</span><span class="p">(</span> <span class="n">stderr</span><span class="p">,</span> <span class="s">&quot;No Memory</span><span class="se">\n</span><span class="s">&quot;</span> <span class="p">);</span>
    <span class="n">exit</span><span class="p">(</span> <span class="n">EXIT_FAILURE</span> <span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="nf">new_node</span><span class="p">(</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="p">)</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">node</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">content_size</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span> <span class="n">content</span> <span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">content</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">content_size</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">content</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="n">free</span><span class="p">(</span> <span class="n">node</span> <span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">strcpy</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">,</span> <span class="n">content</span> <span class="p">);</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">children_size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children_size</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="p">)</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="n">free</span><span class="p">(</span> <span class="n">node</span> <span class="p">);</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">node</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="nf">add_node_child</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="p">)</span> <span class="p">{</span>
    <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">child_node</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">new_num_children</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children_size</span> <span class="o">&lt;</span> <span class="n">new_num_children</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">Node</span> <span class="o">**</span><span class="n">new_children</span><span class="p">;</span>
        <span class="n">new_children</span> <span class="o">=</span> <span class="n">realloc</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">,</span> <span class="n">new_num_children</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="p">)</span> <span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">new_children</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span> <span class="o">=</span> <span class="n">new_children</span><span class="p">;</span>
            <span class="n">node</span><span class="o">-&gt;</span><span class="n">children_size</span> <span class="o">=</span> <span class="n">new_num_children</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">child_node</span> <span class="o">=</span> <span class="n">new_node</span><span class="p">(</span> <span class="n">content</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">child_node</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span><span class="p">]</span> <span class="o">=</span> <span class="n">child_node</span><span class="p">;</span>
    <span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span> <span class="o">=</span> <span class="n">new_num_children</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">child_node</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="nf">search_node_child</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">content</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">child</span> <span class="o">=</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">strcmp</span><span class="p">(</span> <span class="n">child</span><span class="o">-&gt;</span><span class="n">content</span><span class="p">,</span> <span class="n">content</span> <span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">child</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">dump_node_iter</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span><span class="p">,</span> <span class="kt">int</span> <span class="n">level</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">level</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">level</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
            <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;  &quot;</span> <span class="p">);</span>
        <span class="p">}</span>
        <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;┗&quot;</span> <span class="p">);</span>
    <span class="p">}</span>
    <span class="n">printf</span><span class="p">(</span> <span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">content</span> <span class="p">);</span>
    <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
        <span class="n">dump_node_iter</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">level</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">dump_node</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span> <span class="p">{</span>
    <span class="n">dump_node_iter</span><span class="p">(</span> <span class="n">node</span><span class="p">,</span> <span class="mi">0</span> <span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">delete_node</span><span class="p">(</span> <span class="k">struct</span> <span class="n">Node</span> <span class="o">*</span><span class="n">node</span> <span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">num_children</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span> <span class="p">)</span> <span class="p">{</span>
        <span class="n">delete_node</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
    <span class="p">}</span>
    <span class="n">free</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">children</span> <span class="p">);</span>
    <span class="n">free</span><span class="p">(</span> <span class="n">node</span><span class="o">-&gt;</span><span class="n">content</span> <span class="p">);</span>
    <span class="n">free</span><span class="p">(</span> <span class="n">node</span> <span class="p">);</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5562/addtag/" class="addtag" id="addtag_5562">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5562/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5562/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5562"
  >-</span><span
  class="button yellow"
  id="rating_z_5562"
  >0</span><span 
  class="button green"
  id="rating_p_5562"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100102054009/http://ja.doukaku.org/comment/5562/">
    1
    reply
  </a>

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/5562/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment5563">
  <p class="banner"><a href="/web/20100102054009/http://ja.doukaku.org/user/507/" target="_top">fujidig</a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100102054009/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5563/">#5563</a>(<script language="JavaScript">print_time(new Date("2008/01/30 11:20 GMT"));</script><noscript>2008/01/30 11:20 GMT</noscript>)
	
	
	
	[<a href="/web/20100102054009/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>訂正。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre>54c54
&lt;                 char *new_dirname = realloc( dirname, size );
<span class="gd">---</span>
&gt;                 char *new_dirname = realloc( dirname, new_size );
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100102054009/http://ja.doukaku.org/comment/5563/addtag/" class="addtag" id="addtag_5563">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100102054009/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5563/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100102054009/http://ja.doukaku.org/comment/5563/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_5563"
  >-</span><span
  class="button yellow"
  id="rating_z_5563"
  >0</span><span 
  class="button green"
  id="rating_p_5563"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100102054009/http://ja.doukaku.org/comment/5562/"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100102054009/http://ja.doukaku.org/comment/5563/root/"><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100102054009/http://ja.doukaku.org/102/reply_to/5563/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100102054009if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100102054009/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100102054009/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100102054009/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100102054009/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100102054009/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100102054009/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100102054009/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100102054009/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100102054009/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100102054009/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100102054009im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100102054009/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100102054009/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100102054009/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100102054009/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100102054009/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100102054009/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100102054009/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100102054009/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100102054009im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100102054009/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100102054009/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100102054009/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100102054009js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 5:40:09 Jan 2, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:03:05 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
