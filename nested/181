
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
コード中の文字の頻度分析
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081121112200cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081121112200cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081121112200cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20081121112200/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081121112200/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081121112200js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081121112200js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081121112200js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081121112200js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app11.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/181\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "21";
var displayMonth = "Nov";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/181/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081121112200" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Oct
                       
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 11:22:00 Nov 21, 2008">NOV</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Dec
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_prv_off.png" alt="Previous capture" width="14" height="16" border="0" />
                       
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 11:22:00 Nov 21, 2008">21</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2007
                       
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 11:22:00 Nov 21, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081121112200*/http://ja.doukaku.org/181/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>1 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">21 Nov 08 - 21 Nov 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000000000000_2008:10:000000000010_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081121112200/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20081121112200/http://ja.doukaku.org/181/">コード中の文字の頻度分析</a>
</h2>

    





<div class="comment" id="comment6382">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/458/" target="_top">crane</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6382/">#6382</a>(<script language="JavaScript">print_time(new Date("2008/05/30 14:26 GMT"));</script><noscript>2008/05/30 14:26 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>プログラムコード中の文字の頻度は言語によって相当にばらつきがあると思います。ある言語はピリオドが頻出するとか、別の言語はカッコの頻出頻度が高い、とか。そこで、</p>
<ul>
<li>
 文字の頻度解析をするプログラムを作成し、
</li>
<li> 適当なプログラムに対して実行し、結果を出力して、そのような頻度になっている理由を教えてください。</li>
</ul>
<p>(その言語で書かれた「典型的な」プログラムコード、といえるようなものがあると良いのですが・・）</p>
<p>簡単すぎるという方は、複数文字にしてみたり単語の頻度にしてみてください。</p>
<p></p>
<p>参考；Wikipedia 頻度分析</p>
<p>http://ja.wikipedia.org/wiki/%E9%A0%BB%E5%BA%A6%E5%88%86%E6%9E%90</p>
</div>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6382/addtag/" class="addtag" id="addtag_6382">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6382"
  >-</span><span
  class="button yellow"
  id="rating_z_6382"
  >0</span><span 
  class="button green"
  id="rating_p_6382"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081121112200/http://ja.doukaku.org/comment/6382/">
    1
    reply
  </a>

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6382/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6490">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/458/" target="_top">crane</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6490/">#6490</a>(<script language="JavaScript">print_time(new Date("2008/06/13 23:10 GMT"));</script><noscript>2008/06/13 23:10 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>出題者です。
こちらで用意していた回答は awk を使ったものでした。一応解説すると、組み込み変数FSを空にし、１行単位の文字毎に連想配列に格納しています。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre># １文字版
BEGIN { FS=&quot;&quot; }
{ for (i=1; i&lt;=NF; i++) ht[$i]++}
END { for (c in ht) print ht[c],c }

# ３文字版
BEGIN { FS=&quot;&quot; }
{ for (i=1; i&lt;=NF-2; i++) { ht[$i$(i+1)$(i+2)]++}}
END { for (c in ht) print ht[c],c }
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6490/addtag/" class="addtag" id="addtag_6490">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6490/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6490/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6490"
  >-</span><span
  class="button yellow"
  id="rating_z_6490"
  >0</span><span 
  class="button green"
  id="rating_p_6490"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6382/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6490/root/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6490/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  



<div class="indent">
<a href="/web/20081121112200/http://ja.doukaku.org/181/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Nested</h2>
<a href="/web/20081121112200/http://ja.doukaku.org/181/flatten/">Flatten</a> 
<a href="/web/20081121112200/http://ja.doukaku.org/181/">Hidden</a> 


  

  
    





<div class="comment" id="comment6447">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6447/">#6447</a>(<script language="JavaScript">print_time(new Date("2008/06/07 10:12 GMT"));</script><noscript>2008/06/07 10:12 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk で。</p>
<p>とりあえず、自身のソースコード文字列を得て解析結果を返すもの。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre>| sourceString |
sourceString := thisContext method decompileString.

^sourceString asBag sortedCounts
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6447/addtag/" class="addtag" id="addtag_6447">Tags</a>:
	
    
    <a href="/web/20081121112200/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6447/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6447/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6447"
  >-</span><span
  class="button yellow"
  id="rating_z_6447"
  >0</span><span 
  class="button green"
  id="rating_p_6447"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081121112200/http://ja.doukaku.org/comment/6447/">
    1
    reply
  </a>

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6447/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6448">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6448/">#6448</a>(<script language="JavaScript">print_time(new Date("2008/06/07 11:00 GMT"));</script><noscript>2008/06/07 11:00 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Squeak Smalltalk は、組み込みクラスのみならず処理系自体も Smalltalk 自身で記述されていて、その全ソースコードを処理系内からアクセスできるようになっています。そこで、これを解析してみました。</p>
<p>使用したコード（全クラスの全メソッドのソースを得てその文字列中の文字を bag に蓄積し、最後に頻度順にソート）と、全 13638278 文字中、1000 文字以上使われている文字の頻度を示します。</p>
<p>原則、Smalltalk は読み下したときに英文っぽくなるような命名をするので、結果、英単語における使用頻度（E、T、A、O、I、N…）に準ずる結果になりますが、記号については、キーワードメッセージで引数の前に使われるコロン、式の区切りのピリオドのほかにリテラルに使用する記号が比較的多くなるはずで、じっさいそのようになっています。</p>
<p>余談ですが、改行文字の数から、Squeak Smalltalk システムは約 30 万行の Smalltalk コードで記述されていることも分かります。これと同じことを一桁少ない行数で記述できる言語処理系を作るチャレンジが、今、アラン・ケイたちが取り組んでいるプロジェクトです。</p>
<p><a class="reference" href="/web/20081121112200/http://vpri.org/html/work/ifnct.htm">http://vpri.org/html/work/ifnct.htm</a></p>
<p>1444427-&gt;Character space  1184081-&gt;$e  783875-&gt;$t  692975-&gt;$r  657882-&gt;$a  622461-&gt;$s  597060-&gt;$o  575035-&gt;$i  559122-&gt;$n  513017-&gt;Character tab  509706-&gt;$l  340916-&gt;Character cr  308729-&gt;$c  304427-&gt;$d  299400-&gt;$:  250870-&gt;$f  233671-&gt;$m  228063-&gt;$u  223102-&gt;$h  210051-&gt;$p  167306-&gt;$.  152494-&gt;$g  127057-&gt;$1  113908-&gt;$y  108249-&gt;$b  101596-&gt;$w  101168-&gt;$6  98043-&gt;$S  88101-&gt;$0  80005-&gt;$C  79576-&gt;$v  75559-&gt;$&quot;  74041-&gt;$2  69815-&gt;$T  66799-&gt;$F  63860-&gt;$'  63131-&gt;$x  61565-&gt;$[  61564-&gt;$]  59878-&gt;$A  57766-&gt;$3  57378-&gt;$)  57345-&gt;$(  55143-&gt;$4  52495-&gt;$7  51905-&gt;$k  49030-&gt;$5  48466-&gt;$P  48187-&gt;$N  46052-&gt;$B  45787-&gt;$=  44959-&gt;$M  40782-&gt;$8  40730-&gt;$I  38608-&gt;$^  37685-&gt;$|  37462-&gt;$D  35494-&gt;$9  33225-&gt;$-  31526-&gt;$O  30804-&gt;$R  30157-&gt;$_  29878-&gt;$E  25376-&gt;$z  24698-&gt;$L  23217-&gt;$#  20746-&gt;$,  19200-&gt;$W  18588-&gt;$V  14915-&gt;$j  13496-&gt;$U  12687-&gt;$;  11011-&gt;$H  10515-&gt;$/  10070-&gt;$+  9078-&gt;$q  7555-&gt;$&gt;  7128-&gt;$G  6569-&gt;$K  6320-&gt;$&#64;  5752-&gt;$&lt;  4510-&gt;$*  4043-&gt;$Y  3973-&gt;$X  3040-&gt;${  3019-&gt;$}  2887-&gt;$$  2624-&gt;Character lf  2586-&gt;$Q  2436-&gt;$J  2193-&gt;$Z  1361-&gt;$~  1104-&gt;$ 1097-&gt;$?  1004-&gt;$!</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12</pre></td><td class="code"><div class="highlight"><pre>| bag |
bag := Bag new.
&#39;Analyzing all source code...&#39;
    displayProgressAt: Sensor cursorPoint
    from: 0 to: Smalltalk classNames size
    during: [:bar |
        | count |
        count := 0.
        SystemNavigation default allBehaviorsDo: [:class |
            bar value: (count := count + 1).
            class selectorsDo: [:sel | bag addAll: (class sourceCodeAt: sel)]]].
^bag sortedCounts
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6448/addtag/" class="addtag" id="addtag_6448">Tags</a>:
	
    
    <a href="/web/20081121112200/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6448/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6448/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6448"
  >-</span><span
  class="button yellow"
  id="rating_z_6448"
  >0</span><span 
  class="button green"
  id="rating_p_6448"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6447/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6448/root/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6448/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment6449">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6449/">#6449</a>(<script language="JavaScript">print_time(new Date("2008/06/07 12:01 GMT"));</script><noscript>2008/06/07 12:01 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>ファイル内のアスキー文字の出現回数をまとめて表示させるようにしました。
仕様上は文字の内部表現がアスキーコードとは限らないので手抜きといえば手抜きかもしれません。</p>
<p>これを使って手元にあった xyzzy のソース src/*.cc と lisp/*.l を比較してみました。</p>
<p>C++ ではループなどでよく使いそうな + と等号、不等号 が多いです。
ブロックに使う {} もかなりの差がありました。
またネーミングの慣習から _ でも大きな差が出ました。</p>
<p>Lisp では予想通り () が多く、割合が C++ の二倍を超えています。
またマクロ文字として使われる # やクオート、バッククオートがたくさん出てきます。
それから \ や ^ の数が多かったのですが、これは正規表現で多用されているようなのでサンプルの性質によるところが大きそうです。
それ以外ではシンボル名に多用される - で大きな差が付いています。
同じくシンボル名に使われる * や format 指定子に使われる ~ も多めでした。</p>
<p>その他の記号類と大文字は C++ の方が多めになるようです。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15</pre></td><td class="code"><div class="highlight"><pre>(defun frequency (files)
  (let ((v (make-array 127 :initial-element 0)))
    (dolist (file files v)
      (with-open-file (s file :direction :input)
        (loop
          as c = (read-char s nil)
          while (characterp c)
          if (&lt; (char-code c) 127) do (incf (svref v (char-code c))))))))

(defun print-frequency (files)
  (let ((v (frequency files)))
    (format t &quot;~{~4@{~10S ~6D~^ ~}~%~}&quot;
            (loop for n across v and i from 0
              if (plusp n) nconc (list (code-char i) n)))
    (format t &quot;~&amp;Total: ~D characters~%&quot; (reduce #&#39;+ v))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6449/addtag/" class="addtag" id="addtag_6449">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6449/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6449/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6449"
  >-</span><span
  class="button yellow"
  id="rating_z_6449"
  >0</span><span 
  class="button green"
  id="rating_p_6449"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081121112200/http://ja.doukaku.org/comment/6449/">
    1
    reply
  </a>

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6449/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6450">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6450/">#6450</a>(<script language="JavaScript">print_time(new Date("2008/06/07 12:27 GMT"));</script><noscript>2008/06/07 12:27 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>&gt; Lisp では予想通り () が多く、割合が C++ の二倍を超えています。</p>
<p>へぇー。2倍程度なんだ。意外にC++ってかっこが多いんですね :)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6450/addtag/" class="addtag" id="addtag_6450">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6450"
  >-</span><span
  class="button yellow"
  id="rating_z_6450"
  >0</span><span 
  class="button green"
  id="rating_p_6450"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6449/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6450/root/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6450/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment6451">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/479/" target="_top">tsuwabuki</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6451/">#6451</a>(<script language="JavaScript">print_time(new Date("2008/06/07 13:39 GMT"));</script><noscript>2008/06/07 13:39 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>表示が手抜きです</p>
<p>$ runhaskell 6382.hs &lt; 6382.hs
[('n',5),(' ',17),('&amp;',3),('(',1),(')',1),('.',5),('=',3),('&gt;',2),('A',1),('C',2),('D',1),('L',1),('a',5),('d',1),('e',6),('f',2),('g',3),('h',2),('i',5),('l',2),('m',4),('n',6),('o',8),('p',5),('q',2),('r',10),('s',3),('t',11),('u',1),('w',1)]</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Arrow</span>

<span class="nv">main</span> <span class="o">=</span> <span class="nv">getContents</span> <span class="o">&gt;&gt;=</span> <span class="nv">print</span> <span class="o">.</span> <span class="nv">freq</span>

<span class="nv">freq</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">head</span> <span class="o">&amp;&amp;&amp;</span> <span class="nv">length</span><span class="p">)</span> <span class="o">.</span> <span class="nv">group</span> <span class="o">.</span> <span class="nv">sort</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6451/addtag/" class="addtag" id="addtag_6451">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6451/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6451/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6451"
  >-</span><span
  class="button yellow"
  id="rating_z_6451"
  >0</span><span 
  class="button green"
  id="rating_p_6451"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6451/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6460">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/59/" target="_top">nori</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6460/">#6460</a>(<script language="JavaScript">print_time(new Date("2008/06/10 02:34 GMT"));</script><noscript>2008/06/10 02:34 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <div class="section">
<p>httplib.pyを解析させました。</p>
<p>spaceが多いのはインデントのせいでしょう。</p>
<p></p>
<p>辞書いいです。</p>
<p></p>
<p></p>
<p>[nori@Asama]~/Desktop/study/python/code% python count.py /usr/lib64/python2.4/httplib.py</p>
<p>{'\n': 1370, ' ': 14394, '"': 262, '(': 385, '*': 15, ',': 317, '.': 707, '0': 131, '2': 46, '4': 36, '6': 16, '8': 6, ':': 337, '&lt;': 12, '&gt;': 23, 'B': 22, 'D': 55, 'F': 52, 'H': 93, 'L': 78, 'N': 210, 'P': 112, 'R': 148, 'T': 313, 'V': 13, 'X': 25, 'Z': 4, '\\': 22, '`': 5, 'b': 215, 'd': 859, 'f': 1013, 'h': 761, 'j': 24, 'l': 1444, 'n': 1682, 'p': 606, 'r': 1429, 't': 1968, 'v': 182, 'x': 68, 'z': 26, '|': 19, '~': 1, '!': 12, '#': 224, '%': 18, "'": 220, ')': 390, '+': 21, '-': 127, '/': 39, '1': 110, '3': 18, '5': 20, '7': 6, '9': 19, ';': 8, '=': 440, '?': 8, 'A': 84, 'C': 109, 'E': 195, 'G': 16, 'I': 106, 'K': 17, 'M': 31, 'O': 104, 'Q': 22, 'S': 163, 'U': 64, 'W': 23, 'Y': 12, '[': 53, ']': 54, '_': 615, 'a': 1247, 'c': 809, 'e': 3748, 'g': 253, 'i': 1345, 'k': 254, 'm': 324, 'o': 1443, 'q': 60, 's': 2200, 'u': 579, 'w': 206, 'y': 169, '{': 5, '}': 5}</p>
</div>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>

<span class="n">fn</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">fn</span><span class="p">:</span>
  <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">hist</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
<span class="n">f</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
<span class="n">buf</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="k">while</span> <span class="n">buf</span><span class="p">:</span>
  <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">buf</span><span class="p">:</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">hist</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">count</span> <span class="o">+=</span><span class="mi">1</span>
    <span class="n">hist</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">ch</span><span class="p">:</span><span class="n">count</span><span class="p">})</span>
  <span class="n">buf</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1000</span><span class="p">)</span>
<span class="k">print</span> <span class="n">hist</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6460/addtag/" class="addtag" id="addtag_6460">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6460/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6460/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6460"
  >-</span><span
  class="button yellow"
  id="rating_z_6460"
  >0</span><span 
  class="button green"
  id="rating_p_6460"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6460/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6461">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/685/" target="_top">Nemo</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6461/">#6461</a>(<script language="JavaScript">print_time(new Date("2008/06/10 13:25 GMT"));</script><noscript>2008/06/10 13:25 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/postscript/">
	  PostScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>PostScript で... 
自分自身を食わせると 
32 ( ) 293
10 [*] 61
101 (e) 51
114 (r) 48
116 (t) 47
111 (o) 42
112 (p) 34
くらいで、roll, copy, exch あたりのスタック操作命令が結構稼いでいるかと思います。
(t はコメントと変数名が...)
一般的な PostScript File の傾向は.... あまりに傾向が散らばりすぎてよくわかりません。
例えば PhotoShop で作成した巨大bitmap の eps file などでは、
コードよりも圧倒的に多量の embed されたデータが傾向を
決めることになってしまいます。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62</pre></td><td class="code"><div class="highlight"><pre>%!PS

/CompareVal { % [I1 V1] [I2 V2] CompareXY [I1 V1] [I2 V2] V2-V1
    2 copy 1 get exch 1 get sub 
} bind def

/Sort { % [[x y] [x1 y1] Array Data ] {CompareFunction}  Sort [ArrayData]
    cvx [ 3 -1 roll
    aload length
    % func -mark[- [] [] [] [] [] len
    -1 2 { % func -mark[- [] [] [] [] [] len2
        -1 2 {
            3 1 roll
            counttomark 1 add index exec  %% Compare
            0 lt { exch } if
            3 -1 roll
            1 roll
        } for
        counttomark 1 roll
    } for
    counttomark 1 roll
    ] exch pop
} bind def


/CountLetters {
    [ 0 1 255 { [ exch 0 ] } for ]
    {
        dup 2 index read
        {
            % array code
            get dup 1 get 1 add 1 exch put
        } {
            exit
        } ifelse
    } loop
    /CompareVal Sort
    exch pop exch pop
} bind def


/PrintResult {
    0 1 255 {
        2 copy get
        % [Array] i [I V]
        dup 0 get dup dup dup 3 string cvs print ( ) print
        32 ge exch 127 lt and {
            % [Array] i [I V] I 
            (( ) ) dup 1 4 -1 roll put print
        } {
            ([*] ) print
            pop
        } ifelse
        1 get =
        pop 
    } for
    pop
} bind def

%(countletter2.ps) (r) file CountLetters
(%stdin) (r) file CountLetters
PrintResult
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6461/addtag/" class="addtag" id="addtag_6461">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/postscript/">
		PostScript
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6461/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6461/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6461"
  >-</span><span
  class="button yellow"
  id="rating_z_6461"
  >0</span><span 
  class="button green"
  id="rating_p_6461"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6461/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6462">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6462/">#6462</a>(<script language="JavaScript">print_time(new Date("2008/06/10 08:39 GMT"));</script><noscript>2008/06/10 08:39 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  JavaScriptの代表例ということで、prototype.jsを対象としました。<br/>ついでにファイルの読み込みをAjaxで。<br/><br/>試すときは、以下をfreq.htmlなどの名前で保存し、prototype.jsを同じところに置いて、htmlを開くだけです。<br/>IEで見る場合は、11行目をコメントにし、代わりに16行目をコメント解除してください。<br/><br/>＜結果＞<br/>文字	Code	数	頻度<br/>'&nbsp;'	20	24616	0.19183441267466236<br/>e	65	10917	0.08507703457788791<br/>t	74	8301	0.06469034203820168<br/>n	6e	6215	0.048433980938130755<br/>r	72	4873	0.03797567000989721<br/>o	6f	4204	0.03276210070215634<br/>（省略）<br/><br/>結果は、・・・普通です。<br/>プログラム言語は全般的に「&nbsp;t&nbsp;」をよく使うのでしょうか。<br/>記号で多いのは、丸括弧が2616個、ドットが2534個、セミコロン1779個で、<br/>以下、「＝」1498、「，」1396、「-」1067、「’」1058、波括弧937と続きます。
	</div>
	
	<p class="link">
	  see: <a href="/web/20081121112200/http://www.prototypejs.org/download">prototype.js</a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58</pre></td><td class="code"><div class="highlight"><pre><span class="o">&lt;</span><span class="nx">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">head</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span> <span class="nx">src</span><span class="o">=</span><span class="s2">&quot;prototype.js&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
<span class="k">function</span> <span class="nx">log</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;resultArea&#39;</span><span class="p">).</span><span class="nx">innerHTML</span> <span class="o">+=</span> <span class="p">(</span><span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">toString</span><span class="p">()</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span> <span class="o">+</span> <span class="nx">s</span> <span class="o">+</span> <span class="s1">&#39;&lt;br&gt;\n&#39;</span><span class="p">);</span>
<span class="p">}</span>
<span class="c">/* 対象ファイルを要求する */</span>
<span class="k">function</span> <span class="nx">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nx">ajax</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Ajax</span><span class="p">.</span><span class="nx">Request</span><span class="p">(</span>
       <span class="s1">&#39;prototype.js&#39;</span><span class="o">,</span>   <span class="c">// 頻度分析対象ファイル</span>
       <span class="c">/* IEの場合、XMLHttpRequestでローカルファイルにアクセスできないため</span>
<span class="c">        * 自前のサーバに設置するか、</span>
<span class="c">        * 以下のコメントを外して本家からお借りして下さい。</span>
<span class="c">        *  （こっちはFirefoxでは動きません。。。） */</span>
       <span class="c">// &#39;http://www.prototypejs.org/assets/2007/11/6/prototype.js&#39;,</span>
       <span class="p">{</span>
           <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;get&#39;</span><span class="o">,</span>
           <span class="nx">onComplete</span><span class="o">:</span> <span class="k">function</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span> <span class="p">{</span>
               <span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Request completed&quot;</span><span class="p">);</span>
               <span class="nx">freq</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">responseText</span><span class="p">);</span>
           <span class="p">}</span>
       <span class="p">});</span>
    <span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Request sent&quot;</span><span class="p">);</span>
<span class="p">}</span>
<span class="c">/* 文字列中の文字頻度を測定し、結果を表示する */</span>
<span class="k">function</span> <span class="nx">freq</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="p">{</span>
    <span class="c">// 頻度の集計</span>
    <span class="k">var</span> <span class="nx">hist</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="k">for</span> <span class="p">(</span><span class="k">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">var</span> <span class="nx">ch</span> <span class="o">=</span> <span class="nx">s</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">hist</span><span class="p">[</span><span class="nx">ch</span><span class="p">]</span> <span class="o">==</span> <span class="kc">undefined</span><span class="p">)</span>
            <span class="nx">hist</span><span class="p">[</span><span class="nx">ch</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">moji</span><span class="o">:</span> <span class="nx">ch</span><span class="o">,</span> <span class="nx">count</span><span class="o">:</span><span class="mi">1</span> <span class="p">};</span>
        <span class="k">else</span>
            <span class="nx">hist</span><span class="p">[</span><span class="nx">ch</span><span class="p">].</span><span class="nx">count</span><span class="o">++;</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nx">report</span> <span class="o">=</span> <span class="s2">&quot;&lt;table border=\&quot;1\&quot;&gt;\n&lt;tr&gt;&quot;</span>
               <span class="o">+</span> <span class="s2">&quot;&lt;td&gt;文字&lt;/td&gt;&quot;</span>
               <span class="o">+</span> <span class="s2">&quot;&lt;td&gt;Code&lt;/td&gt;&quot;</span>
               <span class="o">+</span> <span class="s2">&quot;&lt;td&gt;数&lt;/td&gt;&quot;</span>
               <span class="o">+</span> <span class="s2">&quot;&lt;td&gt;頻度&lt;/td&gt;\n&quot;</span><span class="o">;</span>
    <span class="c">// 頻度を出現回数の昇順でならびかえ、表で表示</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">values</span><span class="p">(</span><span class="nx">hist</span><span class="p">)</span>
        <span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nx">a</span><span class="o">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">count</span> <span class="o">-</span> <span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="o">;</span> <span class="p">})</span>
        <span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="k">function</span><span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">report</span> <span class="o">+=</span> <span class="s2">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">moji</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&lt;/td&gt;&quot;</span><span class="o">;</span>
            <span class="nx">report</span> <span class="o">+=</span> <span class="s2">&quot;&lt;td&gt;&quot;</span> <span class="o">+</span> <span class="nx">o</span><span class="p">.</span><span class="nx">moji</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&lt;/td&gt;&quot;</span><span class="o">;</span>
            <span class="nx">report</span> <span class="o">+=</span> <span class="s2">&quot;&lt;td style=\&quot;text-align: right;\&quot;&gt;&quot;</span> <span class="o">+</span> <span class="nx">o</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="s2">&quot;&lt;/td&gt;&quot;</span><span class="o">;</span>
            <span class="nx">report</span> <span class="o">+=</span> <span class="s2">&quot;&lt;td&gt;&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">o</span><span class="p">.</span><span class="nx">count</span> <span class="sr">/ s.length)  + &quot;&lt;/</span><span class="nx">td</span><span class="o">&gt;&lt;/</span><span class="nx">tr</span><span class="o">&gt;\</span><span class="nx">n</span><span class="s2">&quot;;</span>
<span class="s2">        });</span>
<span class="s2">    report += &quot;</span><span class="o">&lt;/</span><span class="nx">table</span><span class="o">&gt;</span><span class="s2">&quot;;</span>
<span class="s2">    log(report);</span>
<span class="s2">}</span>
<span class="s2">&lt;/script&gt;&lt;/head&gt;</span>
<span class="s2">&lt;body onload=&quot;</span><span class="nx">init</span><span class="p">();</span><span class="s2">&quot;&gt;</span>
<span class="s2">&lt;div id=&quot;</span><span class="nx">resultArea</span><span class="err">&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6462/addtag/" class="addtag" id="addtag_6462">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6462/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6462/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6462"
  >-</span><span
  class="button yellow"
  id="rating_z_6462"
  >0</span><span 
  class="button green"
  id="rating_p_6462"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6462/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6463">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/760/" target="_top">turugina</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6463/">#6463</a>(<script language="JavaScript">print_time(new Date("2008/06/11 00:02 GMT"));</script><noscript>2008/06/11 00:02 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>アプリケーションのソースじゃなくて、
cygwin g++ の C++ ヘッダファイル群(全218個)を分析してみました。

  1:0x20  548301 (0.20355)
  2:   e  189982 (0.07053)
  3:   t  166220 (0.06171)
  4:   _  144935 (0.05380)
  5:   r  117461 (0.04361)
  6:   a  113395 (0.04210)
  7:   i  111175 (0.04127)
  8:   s  103785 (0.03853)
  9:   o   99888 (0.03708)
 10:   n   98172 (0.03644)
 11: 0xa   81784 (0.03036)
 12:   l   62672 (0.02327)
 13:   c   61995 (0.02301)
 14:   p   55391 (0.02056)
 15:   u   44881 (0.01666)
&lt;以下省略&gt;

スペースや改行は置いておくとして。
上位10位以内で、int や iterator が
(もうちょっと広げるとconst_iteratorも)
作れるのが興味深いところかと。

"_" が多いのはヘビ記法とローカル用識別子の影響かな。

括弧の類を見てみると、
"(", ")" はそれぞれ24,25位(0.9%),
templateにも使用する"&lt;", "&gt;" は それぞれ 38,33位 (0.4～0.5%),
"{", "}" に至っては 44,45位(0.26%) となっていました。

意外に括弧使ってないのね。。

ちなみに最下位は "$" (8件) でしたが、コメントの中かな...</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;iomanip&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>
<span class="cp">#include &lt;stdexcept&gt;</span>
<span class="cp">#include &lt;numeric&gt;</span>
<span class="cp">#include &lt;cctype&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;utility&gt;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">freq_t</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">freqv_t</span><span class="p">;</span>

<span class="k">struct</span> <span class="n">calc_freq</span>
<span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">unary_function</span><span class="o">&lt;</span> <span class="n">freq_t</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="o">&gt;</span>
<span class="p">{</span>
  <span class="n">freq_t</span> <span class="k">operator</span><span class="p">()(</span><span class="kt">char</span><span class="o">*</span> <span class="n">filename</span><span class="p">)</span> <span class="k">const</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">ifs</span> <span class="p">)</span>
      <span class="k">throw</span> <span class="n">std</span><span class="o">::</span><span class="n">runtime_error</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;failed to open : &quot;</span><span class="p">)</span><span class="o">+</span><span class="n">filename</span><span class="p">);</span>

    <span class="n">freq_t</span> <span class="n">f</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span> <span class="n">ifs</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="n">ifs</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="o">++</span><span class="n">f</span><span class="p">[</span><span class="n">c</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">f</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">merge_freq</span>
<span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">binary_function</span><span class="o">&lt;</span><span class="n">freq_t</span><span class="p">,</span> <span class="n">freq_t</span><span class="p">,</span> <span class="n">freq_t</span><span class="o">&gt;</span>
<span class="p">{</span>
  <span class="n">freq_t</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">()(</span><span class="n">freq_t</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">freq_t</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">const</span>
  <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span> <span class="n">freq_t</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">it</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
        <span class="n">it</span> <span class="o">!=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">it</span> <span class="p">)</span>
      <span class="n">lhs</span><span class="p">[</span><span class="n">it</span><span class="o">-&gt;</span><span class="n">first</span><span class="p">]</span> <span class="o">+=</span> <span class="n">it</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">;</span>

    <span class="k">return</span> <span class="n">lhs</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">struct</span> <span class="n">count_total</span>
<span class="o">:</span> <span class="k">public</span> <span class="n">std</span><span class="o">::</span><span class="n">binary_function</span><span class="o">&lt;</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="n">freq_t</span><span class="o">::</span><span class="n">value_type</span> <span class="o">&gt;</span>
<span class="p">{</span>
  <span class="kt">int</span><span class="o">&amp;</span> <span class="k">operator</span><span class="p">()(</span><span class="kt">int</span><span class="o">&amp;</span> <span class="n">total</span><span class="p">,</span> <span class="k">const</span> <span class="n">freq_t</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="k">const</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">total</span> <span class="o">+=</span> <span class="n">v</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">class</span> <span class="nc">C</span><span class="o">&gt;</span>
<span class="k">struct</span> <span class="n">freq_print_each</span>
<span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">unary_function</span><span class="o">&lt;</span> <span class="kt">void</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="o">::</span><span class="n">value_type</span> <span class="o">&gt;</span>
<span class="p">{</span>
  <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">total_</span><span class="p">;</span>
  <span class="k">mutable</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">i_</span><span class="p">;</span>
  <span class="n">freq_print_each</span><span class="o">&lt;</span><span class="n">C</span><span class="o">&gt;</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">total</span><span class="p">)</span> <span class="o">:</span> <span class="n">total_</span><span class="p">(</span><span class="n">total</span><span class="p">),</span> <span class="n">i_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{}</span>

  <span class="kt">void</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="k">typename</span> <span class="n">C</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span> <span class="n">v</span><span class="p">)</span> <span class="k">const</span>
  <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="o">++</span><span class="n">i_</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">isprint</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="o">||</span> <span class="n">isspace</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="p">)</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">showbase</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span>
                 <span class="o">&lt;&lt;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">dec</span><span class="p">;</span>
    <span class="k">else</span>
      <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
      <span class="o">&lt;&lt;</span> <span class="n">v</span><span class="p">.</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; (&quot;</span>
      <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setprecision</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">fixed</span>
      <span class="o">&lt;&lt;</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="n">second</span><span class="p">)</span><span class="o">/</span><span class="n">total_</span>
      <span class="o">&lt;&lt;</span> <span class="s">&quot;)</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">C</span><span class="o">&gt;</span>
<span class="k">struct</span> <span class="n">sorter</span>
<span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">binary_function</span><span class="o">&lt;</span><span class="kt">bool</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="o">::</span><span class="n">value_type</span><span class="p">,</span> <span class="k">typename</span> <span class="n">C</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;</span>
<span class="p">{</span>
  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">C</span><span class="o">::</span><span class="n">value_type</span> <span class="n">value_type</span><span class="p">;</span>
  <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">value_type</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span> <span class="k">const</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">lhs</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">v</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">freq_t</span> <span class="o">&gt;</span> <span class="n">freqs</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">transform</span><span class="p">(</span><span class="n">v</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">v</span><span class="o">+</span><span class="n">c</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">freqs</span><span class="p">),</span> <span class="n">calc_freq</span><span class="p">());</span>

    <span class="k">const</span> <span class="n">freq_t</span> <span class="n">all_freq</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">freqs</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">freqs</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">freq_t</span><span class="p">(),</span> <span class="n">merge_freq</span><span class="p">());</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">total</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">accumulate</span><span class="p">(</span><span class="n">all_freq</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">all_freq</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">count_total</span><span class="p">());</span>

    <span class="n">freqv_t</span> <span class="n">all_freq2</span><span class="p">;</span>
    <span class="n">all_freq2</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="n">all_freq</span><span class="p">.</span><span class="n">size</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">copy</span><span class="p">(</span><span class="n">all_freq</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">all_freq</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">back_inserter</span><span class="p">(</span><span class="n">all_freq2</span><span class="p">));</span>
    <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">all_freq2</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">all_freq2</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">sorter</span><span class="o">&lt;</span><span class="n">freqv_t</span><span class="o">&gt;</span><span class="p">());</span>

    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">all_freq2</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">all_freq2</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">freq_print_each</span><span class="o">&lt;</span><span class="n">freqv_t</span><span class="o">&gt;</span><span class="p">(</span><span class="n">total</span><span class="p">));</span>
  <span class="p">}</span>
  <span class="k">catch</span> <span class="p">(</span><span class="k">const</span> <span class="n">std</span><span class="o">::</span><span class="n">exception</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6463/addtag/" class="addtag" id="addtag_6463">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6463/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6463/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6463"
  >-</span><span
  class="button yellow"
  id="rating_z_6463"
  >0</span><span 
  class="button green"
  id="rating_p_6463"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6463/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6465">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6465/">#6465</a>(<script language="JavaScript">print_time(new Date("2008/06/11 07:25 GMT"));</script><noscript>2008/06/11 07:25 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>自分自身を解析した結果(上位10件)。
' ':305
/'e':104
/'t':93
/0ah:76
/'r':72
/'s':61
/'i':54
/':':52
/'a':51
/'o':50</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;iomanip&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>
<span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;list&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;iterator&gt;</span>
<span class="cp">#include &lt;cctype&gt;</span>

<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">freq_type</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Loader</span>
<span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">explicit</span> <span class="n">Loader</span><span class="p">(</span><span class="n">freq_type</span><span class="o">&amp;</span> <span class="n">freq</span><span class="p">)</span> <span class="o">:</span> <span class="n">freq_</span><span class="p">(</span><span class="n">freq</span><span class="p">)</span> <span class="p">{}</span>

    <span class="kt">void</span> <span class="k">operator</span> <span class="p">()</span> <span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">filename</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">src</span><span class="p">(</span><span class="n">filename</span><span class="p">);</span>
        <span class="kt">char</span> <span class="n">c</span><span class="p">;</span>
        <span class="k">while</span><span class="p">(</span><span class="n">src</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="o">++</span><span class="n">freq_</span><span class="p">[</span><span class="n">c</span><span class="p">];</span>
        <span class="p">}</span>
    <span class="p">}</span>

<span class="k">private</span><span class="o">:</span>
    <span class="n">freq_type</span><span class="o">&amp;</span> <span class="n">freq_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">bool</span> <span class="n">comp</span><span class="p">(</span><span class="k">const</span> <span class="n">freq_type</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">freq_type</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">second</span> <span class="o">!=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="o">?</span> <span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">second</span><span class="p">)</span> <span class="o">:</span> <span class="p">(</span><span class="n">lhs</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">rhs</span><span class="p">.</span><span class="n">first</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="k">operator</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">ostream</span><span class="o">&amp;</span> <span class="n">out</span><span class="p">,</span> <span class="k">const</span> <span class="n">freq_type</span><span class="o">::</span><span class="n">value_type</span><span class="o">&amp;</span> <span class="n">value</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">isprint</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">first</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&#39;&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;&#39;&quot;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="kt">int</span> <span class="n">fill</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
        <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">hex</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">setw</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">.</span><span class="n">first</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xff</span><span class="n">u</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;h&#39;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">dec</span><span class="p">;</span>
        <span class="n">out</span><span class="p">.</span><span class="n">fill</span><span class="p">(</span><span class="n">fill</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">out</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">value</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="c">// 読み込み</span>
    <span class="n">freq_type</span> <span class="n">freq</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">for_each</span><span class="p">(</span><span class="n">argv</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">argv</span> <span class="o">+</span> <span class="n">argc</span><span class="p">,</span> <span class="n">Loader</span><span class="p">(</span><span class="n">freq</span><span class="p">));</span>

    <span class="c">// 出現頻度で並べ替え</span>
    <span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">freq_type</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">(</span><span class="n">freq</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">freq</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>
    <span class="n">f</span><span class="p">.</span><span class="n">sort</span><span class="p">(</span><span class="n">comp</span><span class="p">);</span>

    <span class="c">// 出力</span>

<span class="c">//  エラーになる理由がわからず…(;_;)マダマダ、ミジュクモノ…</span>
<span class="c">//  std::copy(f.begin(), f.end(), std::ostream_iterator&lt;freq_type::value_type&gt;(std::cout, &quot;\n&quot;));</span>

    <span class="k">for</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">list</span><span class="o">&lt;</span><span class="n">freq_type</span><span class="o">::</span><span class="n">value_type</span><span class="o">&gt;::</span><span class="n">const_iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">f</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">i</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6465/addtag/" class="addtag" id="addtag_6465">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6465/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6465/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6465"
  >-</span><span
  class="button yellow"
  id="rating_z_6465"
  >0</span><span 
  class="button green"
  id="rating_p_6465"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6465/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6467">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/643/" target="_top">squld</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6467/">#6467</a>(<script language="JavaScript">print_time(new Date("2008/06/11 23:21 GMT"));</script><noscript>2008/06/11 23:21 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自身の文字頻度の上位10個は以下のようになりました。
ソース中に英単語が多く現れているため、英文の文字頻度と近い気がします。

e	75
t	59
SPACE	54
r	54
TAB	52
a	48
n	34
i	32
u	28
CR	27
p	24</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.BufferedInputStream</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.FileInputStream</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Frequency</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">aArguments</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">tFrequencies</span> <span class="o">=</span> <span class="k">new</span> <span class="n">TreeMap</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">InputStreamReader</span> <span class="n">tReader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="k">new</span> <span class="n">BufferedInputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">aArguments</span><span class="o">[</span><span class="mi">0</span><span class="o">])));</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">tChar</span><span class="o">;</span>
            <span class="k">while</span> <span class="o">((</span><span class="n">tChar</span> <span class="o">=</span> <span class="n">tReader</span><span class="o">.</span><span class="na">read</span><span class="o">())</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">Integer</span> <span class="n">tFrequency</span> <span class="o">=</span> <span class="n">tFrequencies</span><span class="o">.</span><span class="na">get</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">tChar</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tFrequency</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">tFrequencies</span><span class="o">.</span><span class="na">put</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">tChar</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">tFrequencies</span><span class="o">.</span><span class="na">put</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">tChar</span><span class="o">,</span> <span class="n">tFrequency</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">tReader</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">tFrequencies</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6467/addtag/" class="addtag" id="addtag_6467">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6467/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6467/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6467"
  >-</span><span
  class="button yellow"
  id="rating_z_6467"
  >0</span><span 
  class="button green"
  id="rating_p_6467"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6467/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6468">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/189/" target="_top">takatoh</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6468/">#6468</a>(<script language="JavaScript">print_time(new Date("2008/06/12 01:20 GMT"));</script><noscript>2008/06/12 01:20 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>どういう訳かまだRubyがないので。

net/http.rbを対象にしてみました。
空白を別にすれば，e が飛び抜けて多いのは end が多いのも影響
してるんでしょうか。


^o^ &gt;ruby hist_char.rb c:/usr/ruby/lib/ruby/1.8/net/http.rb
" ": 18072
"e": 4839
"t": 2982
"s": 2574
"r": 2525
"n": 2290
"\n": 2274
"o": 2245
"a": 1945
"d": 1757
"i": 1700
"T": 1216
"l": 1183
"p": 1125
"#": 1106
（以下略）</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre><span class="n">src</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span><span class="p">)</span>

<span class="n">hist</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">src</span><span class="o">.</span><span class="n">each_byte</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span>
  <span class="n">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">.</span><span class="n">chr</span>
  <span class="k">if</span> <span class="n">hist</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
    <span class="n">hist</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">else</span>
    <span class="n">hist</span><span class="o">[</span><span class="n">c</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">hist</span><span class="o">.</span><span class="n">to_a</span><span class="o">.</span><span class="n">sort</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span> <span class="n">b</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">&lt;=&gt;</span> <span class="n">a</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="p">}</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">pair</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">pair</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">inspect</span><span class="si">}</span><span class="s2">: </span><span class="si">#{</span><span class="n">pair</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6468/addtag/" class="addtag" id="addtag_6468">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6468/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6468/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6468"
  >-</span><span
  class="button yellow"
  id="rating_z_6468"
  >0</span><span 
  class="button green"
  id="rating_p_6468"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081121112200/http://ja.doukaku.org/comment/6468/">
    1
    reply
  </a>

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6468/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment6494">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6494/">#6494</a>(<script language="JavaScript">print_time(new Date("2008/06/14 17:00 GMT"));</script><noscript>2008/06/14 17:00 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>以下でもOKですね。

hist = Hash.new(0)
src.each_byte do |c|
  hist[c.chr] += 1
end

</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6494/addtag/" class="addtag" id="addtag_6494">Tags</a>:
	
    
    <a href="/web/20081121112200/http://ja.doukaku.org/tag/Ruby1.8.6/">Ruby1.8.6</a>
    
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6494"
  >-</span><span
  class="button yellow"
  id="rating_z_6494"
  >0</span><span 
  class="button green"
  id="rating_p_6494"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6468/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081121112200/http://ja.doukaku.org/comment/6494/root/"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6494/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment6469">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/30/" target="_top">tnk</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6469/">#6469</a>(<script language="JavaScript">print_time(new Date("2008/06/12 08:39 GMT"));</script><noscript>2008/06/12 08:39 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Javaはすでに出ていますが，以下のように改良してあります。<br/>・コメント内の文字は集計に含めるとおかしくなりそうなので含めない<br/>・JavaのソースコードはZIPファイルで提供されることが多いので，指定されたZIPファイル内のすべてのJavaソースファイルに対して集計を行う<br/><br/>JDK&nbsp;1.6に付属のsrc.zipを集計してみました。<br/>'&nbsp;'	9328666<br/>'e'	2074804<br/>'t'	1744299<br/>'n'	1284657<br/>'i'	1246055<br/>'r'	1217281<br/>'a'	1167409<br/>'o'	1041531<br/>'l'	873609<br/>'s'	851094<br/>'c'	728897<br/>'u'	631196<br/>'p'	571200<br/>'('	514249<br/>')'	514079<br/>'.'	493002<br/>'d'	466367<br/>'m'	422504<br/>';'	418324<br/>'g'	417286<br/>\u0009	403663<br/>'f'	339805<br/>'b'	311888<br/>'h'	272053<br/>'S'	271704<br/>'='	271260<br/>'E'	267436<br/>','	224844<br/>'C'	214651<br/>'I'	210502<br/>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.Reader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.StreamTokenizer</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Enumeration</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Hashtable</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.Vector</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.zip.ZipEntry</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.zip.ZipFile</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">CharCounter</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">Hashtable</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Count</span><span class="o">&gt;</span> <span class="n">counts</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Hashtable</span><span class="o">&lt;</span><span class="n">Character</span><span class="o">,</span> <span class="n">Count</span><span class="o">&gt;();</span>
        <span class="n">ZipFile</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ZipFile</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
        <span class="n">Enumeration</span><span class="o">&lt;?</span> <span class="k">extends</span> <span class="n">ZipEntry</span><span class="o">&gt;</span> <span class="n">entries</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">entries</span><span class="o">();</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">entries</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">ZipEntry</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">entries</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">entry</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;.java&quot;</span><span class="o">))</span> <span class="k">continue</span><span class="o">;</span>
            <span class="n">Reader</span> <span class="n">src</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputStreamReader</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(</span><span class="n">entry</span><span class="o">));</span>
            <span class="n">StreamTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StreamTokenizer</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
            <span class="n">tokenizer</span><span class="o">.</span><span class="na">resetSyntax</span><span class="o">();</span>
            <span class="n">tokenizer</span><span class="o">.</span><span class="na">slashSlashComments</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">tokenizer</span><span class="o">.</span><span class="na">slashStarComments</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()</span> <span class="o">!=</span> <span class="n">StreamTokenizer</span><span class="o">.</span><span class="na">TT_EOF</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">ttype</span> <span class="o">==</span> <span class="n">StreamTokenizer</span><span class="o">.</span><span class="na">TT_EOL</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">ttype</span><span class="o">;</span>
                <span class="n">Count</span> <span class="n">count</span> <span class="o">=</span> <span class="n">counts</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Count</span><span class="o">(</span><span class="n">c</span><span class="o">);</span>
                    <span class="n">counts</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">c</span><span class="o">,</span> <span class="n">count</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">count</span><span class="o">.</span><span class="na">n</span><span class="o">++;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Count</span><span class="o">&gt;</span> <span class="n">ranking</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Vector</span><span class="o">&lt;</span><span class="n">Count</span><span class="o">&gt;();</span>
        <span class="n">ranking</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">counts</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ranking</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ranking</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ranking</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">static</span> <span class="k">class</span> <span class="nc">Count</span> <span class="k">implements</span> <span class="n">Comparable</span><span class="o">&lt;</span><span class="n">Count</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="kt">char</span> <span class="n">c</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="n">Count</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="kt">int</span> <span class="n">compareTo</span><span class="o">(</span><span class="n">Count</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">n</span> <span class="o">==</span> <span class="k">this</span><span class="o">.</span><span class="na">n</span><span class="o">)?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">n</span> <span class="o">&lt;</span> <span class="k">this</span><span class="o">.</span><span class="na">n</span><span class="o">)?</span> <span class="o">-</span><span class="mi">1</span> <span class="o">:</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">c</span> <span class="o">&lt;</span> <span class="sc">&#39; &#39;</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;\\u%04x&quot;</span><span class="o">,</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="n">c</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span> <span class="o">+</span> <span class="n">n</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="s">&quot;&#39;&quot;</span> <span class="o">+</span> <span class="n">c</span> <span class="o">+</span> <span class="s">&quot;&#39;\t&quot;</span> <span class="o">+</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6469/addtag/" class="addtag" id="addtag_6469">Tags</a>:
	
    
    <a href="/web/20081121112200/http://ja.doukaku.org/tag/Java1.5/">Java1.5</a>
    
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6469/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6469/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6469"
  >-</span><span
  class="button yellow"
  id="rating_z_6469"
  >0</span><span 
  class="button green"
  id="rating_p_6469"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6469/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6485">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/793/" target="_top">genzou</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6485/">#6485</a>(<script language="JavaScript">print_time(new Date("2008/06/13 21:08 GMT"));</script><noscript>2008/06/13 21:08 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>jdk1.6に付属されていた
サンプルソース「Intro.java」を解析しました。</p>
<blockquote>
[a] =    1557
[e] =    2746
[i] =    2116
[l] =    1008
[n] =    1981
[r] =    1314
[s] =    1209
[t] =    2340</blockquote>
<p>e,s,tが多いのは、
setter、getterメソッドのためでしょうか。
int,String などもキーワードからも、
i,r,tは多いのでしょうか。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8
9</pre></td><td class="code"><div class="highlight"><pre>def text = new File(&quot;c:/Intro.java&quot;).text

(0..(text.size()-1)).collect{
    text[it]
}.unique().sort().each{
    def key = &quot;[${it}]&quot;.padLeft(5)
    def value = text.count(it).toString().padLeft(7)
    println &quot;${key} = ${value}&quot;
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6485/addtag/" class="addtag" id="addtag_6485">Tags</a>:
	
    
    <a href="/web/20081121112200/http://ja.doukaku.org/tag/groovy/">groovy</a>
    
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6485/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6485/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6485"
  >-</span><span
  class="button yellow"
  id="rating_z_6485"
  >0</span><span 
  class="button green"
  id="rating_p_6485"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6485/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  

  

  
    





<div class="comment" id="comment6497">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6497/">#6497</a>(<script language="JavaScript">print_time(new Date("2008/06/14 14:35 GMT"));</script><noscript>2008/06/14 14:35 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>文字数カウントは既に投稿されていたので、半角スペース・タブ・改行で区切って似非単語分割してみました。
typedefが少し汚いです・・・。
分割はboost::tokenizerを使ってますが、ここをmecab等に置き換えればもう少し遊べるかもしれません。

自分自身を分析：
} :: 8
#include :: 7
typedef :: 7
i :: 6
// :: 5
= :: 4
&lt;&lt; :: 4
!= :: 4
i++){ :: 3
&gt; :: 3
return :: 2
FreqmapCIter&amp; :: 2
count(std::string :: 2
Freqmap* :: 2
str, :: 2
{ :: 2
" :: 2
int :: 2
void :: 2
operator()(const :: 1
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78</pre></td><td class="code"><div class="highlight"><pre><span class="c">// frequency analysis</span>

<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;map&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>
<span class="cp">#include &lt;boost/tokenizer.hpp&gt;</span>


<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">map</span><span class="o">&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span> <span class="o">&gt;</span> <span class="n">Freqmap</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">Freqmap</span><span class="o">::</span><span class="n">value_type</span> <span class="n">FreqmapType</span><span class="p">;</span> 
<span class="k">typedef</span> <span class="n">Freqmap</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">FreqmapCIter</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span> <span class="n">FreqmapCIter</span> <span class="o">&gt;</span> <span class="n">FreqmapCIterVec</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">FreqmapCIterVec</span><span class="o">::</span><span class="n">const_iterator</span> <span class="n">FreqmapCIterVecCIter</span><span class="p">;</span>


<span class="k">struct</span> <span class="n">FreqmapCIterVecSort</span><span class="p">{</span>
    <span class="kt">bool</span> <span class="k">operator</span><span class="p">()(</span><span class="k">const</span> <span class="n">FreqmapCIter</span><span class="o">&amp;</span> <span class="n">lhs</span><span class="p">,</span> <span class="k">const</span> <span class="n">FreqmapCIter</span><span class="o">&amp;</span> <span class="n">rhs</span><span class="p">){</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">lhs</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&gt;</span> <span class="n">rhs</span><span class="o">-&gt;</span><span class="n">second</span><span class="p">);</span><span class="c">// ordered by desc</span>
    <span class="p">}</span>
<span class="p">};</span>


<span class="kt">void</span> <span class="n">count</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">,</span> <span class="n">Freqmap</span><span class="o">*</span> <span class="n">vec</span><span class="p">);</span>


<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
    <span class="c">// open</span>
    <span class="n">std</span><span class="o">::</span><span class="n">ifstream</span> <span class="n">ifs</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>

    <span class="c">// count</span>
    <span class="n">Freqmap</span> <span class="n">map</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">strbuf</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="n">ifs</span> <span class="o">&amp;&amp;</span> <span class="n">getline</span><span class="p">(</span><span class="n">ifs</span><span class="p">,</span> <span class="n">strbuf</span><span class="p">)){</span>
    <span class="n">count</span><span class="p">(</span><span class="n">strbuf</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">map</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">ifs</span><span class="p">.</span><span class="n">close</span><span class="p">();</span>


    <span class="c">// sort</span>
    <span class="n">FreqmapCIterVec</span> <span class="n">mapvec</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">FreqmapCIter</span> <span class="n">i</span> <span class="o">=</span> <span class="n">map</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">map</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">mapvec</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">mapvec</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">mapvec</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">FreqmapCIterVecSort</span><span class="p">());</span>

    <span class="c">// output</span>
    <span class="k">for</span><span class="p">(</span><span class="n">FreqmapCIterVecCIter</span> <span class="n">i</span> <span class="o">=</span> <span class="n">mapvec</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">mapvec</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">first</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; :: &quot;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">second</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>



<span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">char_separator</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span> <span class="n">Sep</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">boost</span><span class="o">::</span><span class="n">tokenizer</span><span class="o">&lt;</span><span class="n">Sep</span><span class="o">&gt;</span> <span class="n">Tok</span><span class="p">;</span>


<span class="kt">void</span> <span class="n">count</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">,</span> <span class="n">Freqmap</span><span class="o">*</span> <span class="n">map</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">Sep</span> <span class="n">sep</span><span class="p">(</span><span class="s">&quot; </span><span class="se">\t\n</span><span class="s">&quot;</span><span class="p">);</span>
    <span class="n">Tok</span> <span class="n">tok</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="n">sep</span><span class="p">);</span>
    <span class="n">Freqmap</span><span class="o">::</span><span class="n">iterator</span> <span class="n">mapiter</span><span class="p">;</span>

    <span class="k">for</span><span class="p">(</span><span class="n">Tok</span><span class="o">::</span><span class="n">iterator</span> <span class="n">i</span> <span class="o">=</span> <span class="n">tok</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">tok</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
    <span class="n">mapiter</span> <span class="o">=</span> <span class="n">map</span><span class="o">-&gt;</span><span class="n">find</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="n">mapiter</span> <span class="o">!=</span> <span class="n">map</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">()){</span>
        <span class="n">mapiter</span><span class="o">-&gt;</span><span class="n">second</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
        <span class="n">map</span><span class="o">-&gt;</span><span class="n">insert</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">pair</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6497/addtag/" class="addtag" id="addtag_6497">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6497/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6497/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6497"
  >-</span><span
  class="button yellow"
  id="rating_z_6497"
  >0</span><span 
  class="button green"
  id="rating_p_6497"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6497/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6502">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/766/" target="_top">syat</a><a href="/web/20081121112200/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081121112200im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6502/">#6502</a>(<script language="JavaScript">print_time(new Date("2008/06/14 22:46 GMT"));</script><noscript>2008/06/14 22:46 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/brainfuck/">
	  Brainf*ck
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Brainf*ckで。文字列を入力し、最後に「＄」を入力するとヒストグラムを表示します。<br/><br/>コメントなし版を入力した結果<br/>++++++++++++++++++++++++++++++++++++++<br/>,<br/>-------------------------<br/>..<br/>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<br/>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;<br/>[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[<br/>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]<br/><br/>記号が多いですね（笑）<br/>「＞」69、「＜」57、「＋」38、角括弧30、「－」25。<br/>入出力（．，）はごく少数。<br/><br/>ほとんどチューリングマシンなのでポインタの移動が多くなります。＋はデータの作成に多用します。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35</pre></td><td class="code"><div class="highlight"><pre>●コメント版
+[&gt;                        # while ({0})  do
  +&gt;,&lt;                     #   {1} = 1 ; {2} = getchar()
  &gt;                        # ** dollar check **
   &gt;&gt;++++++[-&lt;++++++&gt;]&lt;&lt;   #   {3} = 36 dollar
                           # ** compare {3} &amp; {4} **
   [-&gt;&gt;+&gt;+&lt;&lt;&lt;]             #   {@2:@3} = !{@0}
   &gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;        #   {@0} = !{@3}
   &gt;[-&gt;-&gt;+&lt;&lt;]&lt;             #   {@2} = {@2} minus {@1} ; {@3} = !{@1}
   &gt;&gt;&gt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;&lt;          #   {@1} = !{@3}
   &gt;&gt;
   &gt;+&lt;[[-]&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;     # ** invert result **
   [[-]&lt;&lt;[-]&lt;[-]&lt;[-]&gt;&gt;&gt;&gt;]  #   {2:1:0} = 0
   &lt;[-]&gt;                   #   {3} = 0
   &lt;&lt;
  &lt;
  [&gt;                       # ** count up if input char is not dollar **
   [-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]        #   {8} = !{2}
   &gt;&gt;&gt;&gt;[-]&gt;[-]&gt;            #   {6:7} = 0 ; move to {8}
   [- [-&gt;&gt;+&lt;&lt;]+&gt;&gt; ]        # ** extend arm to {8 plus (charcode times 2)} **
   &gt;+&lt;                     # ** count up **
   &lt;&lt;[[-]&lt;&lt;]               # ** reduce arm **
   &lt;&lt;&lt;&lt;
   [-]&lt;[-]&gt;                #   {2:1} = 0
  &lt;]
&lt;]                         # end   ** next char **
# show result
&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;+
[
  &gt;[[-&lt;.&gt;]++++++++++.[-]]&lt;
  [-&gt;&gt;+&lt;&lt;]&gt;&gt;+
]

●コメントなし版
+[&gt;+&gt;,&lt;&gt;&gt;&gt;++++++[-&lt;++++++&gt;]&lt;&lt;[-&gt;&gt;+&gt;+&lt;&lt;&lt;]&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;&gt;[-&gt;-&gt;+&lt;&lt;]&lt;&gt;&gt;&gt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;&lt;&gt;&gt;&gt;+&lt;[[-]&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;[[-]&lt;&lt;[-]&lt;[-]&lt;[-]&gt;&gt;&gt;&gt;]&lt;[-]&gt;&lt;&lt;&lt;[&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]&gt;[-]&gt;[-[-&gt;&gt;+&lt;&lt;]+&gt;&gt;]&gt;+&lt;&lt;&lt;[[-]&lt;&lt;]&lt;&lt;&lt;&lt;[-]&lt;[-]&gt;&lt;]&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+[&gt;[[-&lt;.&gt;]++++++++++.[-]]&lt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;+]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6502/addtag/" class="addtag" id="addtag_6502">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081121112200/http://ja.doukaku.org/lang/brainfuck/">
		Brainf*ck
      </a>]
	  
      [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6502/download/">
		download code
      </a>]
	  [<a href="/web/20081121112200/http://ja.doukaku.org/comment/6502/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6502"
  >-</span><span
  class="button yellow"
  id="rating_z_6502"
  >0</span><span 
  class="button green"
  id="rating_p_6502"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081121112200/http://ja.doukaku.org/181/reply_to/6502/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6511">
  <p class="banner"><a href="/web/20081121112200/http://ja.doukaku.org/user/588/" target="_top">sekia</a>

	
	&nbsp;
	<a href="/web/20081121112200/http://ja.doukaku.org/comment/6511/">#6511</a>(<script language="JavaScript">print_time(new Date("2008/06/15 15:05 GMT"));</script><noscript>2008/06/15 15:05 GMT</noscript>)
	
	
	
	[<a href="/web/20081121112200/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Perlで。思っていたよりは記号が少ないです。

自身を入力にした結果:
Total: 681 character(s)
Character Count Frequency[%]
' '       111    16.30      
'!'         2     0.29      
'"'         8     1.17      
'#'         1     0.15      
'$'        29     4.26      
'%'         4     0.59      
'''         2     0.29      
'('         6     0.88      
')'         6     0.88      
'*'         2     0.29      
...
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/bin/perl</span>

<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>

<span class="k">use</span> <span class="nn">Text::</span><span class="n">Table</span><span class="p">;</span>

<span class="k">my</span> <span class="nv">$src_file</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">@ARGV</span><span class="p">)</span> <span class="p">{</span> <span class="nb">open</span> <span class="nv">$src_file</span><span class="p">,</span> <span class="s">&quot;&lt;:utf8&quot;</span><span class="p">,</span> <span class="nb">shift</span> <span class="ow">or</span> <span class="nb">die</span> <span class="vg">$!</span><span class="p">;</span> <span class="p">}</span>
<span class="k">else</span> <span class="p">{</span> <span class="nv">$src_file</span> <span class="o">=</span> <span class="o">\*</span><span class="bp">STDIN</span><span class="p">;</span> <span class="p">}</span>

<span class="k">my</span> <span class="nv">$src</span> <span class="o">=</span> <span class="k">do</span> <span class="p">{</span> <span class="nb">local</span> <span class="vg">$/</span> <span class="o">=</span> <span class="nb">undef</span><span class="p">;</span> <span class="o">&lt;</span><span class="nv">$src_file</span><span class="o">&gt;</span> <span class="p">};</span>
<span class="k">my</span> <span class="nv">$total_chars</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">my</span> <span class="nv">%chars</span><span class="p">;</span>

<span class="k">for</span> <span class="k">my</span> <span class="nv">$char</span> <span class="p">(</span> <span class="nb">split</span> <span class="sr">//</span><span class="p">,</span> <span class="nv">$src</span> <span class="p">)</span> <span class="p">{</span>
  <span class="nv">$char</span> <span class="o">=~</span> <span class="sr">s/\n/\\n/</span><span class="p">;</span>
  <span class="nv">$char</span> <span class="o">=~</span> <span class="sr">s/\t/\\t/</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span> <span class="nb">exists</span> <span class="nv">$chars</span><span class="p">{</span><span class="nv">$char</span><span class="p">}</span> <span class="p">)</span> <span class="p">{</span> <span class="nv">$chars</span><span class="p">{</span><span class="nv">$char</span><span class="p">}</span><span class="o">++</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">else</span> <span class="p">{</span> <span class="nv">$chars</span><span class="p">{</span><span class="nv">$char</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
  <span class="nv">$total_chars</span><span class="o">++</span><s>




<!--
     FILE ARCHIVED ON 11:22:00 Nov 21, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 14:42:40 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
