
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
与えられた並べ替えを実現するあみだくじの生成
DouKaku? </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20081204140540cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20081204140540cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20081204140540cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20081204140540/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20081204140540/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20081204140540js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20081204140540js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20081204140540js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20081204140540js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app1.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/109\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "4";
var displayMonth = "Dec";
var displayYear = "2008";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/109/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20081204140540" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080224102704/http://ja.doukaku.org/109/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="24 Feb 2008"><strong>FEB</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 14:05:40 Dec 4, 2008">DEC</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Jan
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080224102704/http://ja.doukaku.org/109/nested/" title="10:27:04 Feb 24, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 14:05:40 Dec 4, 2008">4</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20070513180302/http://ja.doukaku.org/109/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 May 2007"><strong>2007</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 14:05:40 Dec 4, 2008">2008</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2009
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20081204140540*/http://ja.doukaku.org/109/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>4 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 4 Dec 08</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000001_2008:11:010000000001_2009:-1:000000000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20081204140540/http://ja.doukaku.org/">DouKaku?</a><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png' alt=challenge>
<a href="/web/20081204140540/http://ja.doukaku.org/109/">与えられた並べ替えを実現するあみだくじの生成</a>
</h2>

    





<div class="comment" id="comment4704">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4704/">#4704</a>(<script language="JavaScript">print_time(new Date("2007/12/09 13:00 GMT"));</script><noscript>2007/12/09 13:00 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #2fff2f;">13/13=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>お題#4476を見て思いつきました。
</p>
<p>0からn (n&gt;=1) までの数字を任意の順で並べたリストが与えられた時、0からnまでが順に並んだ状態から出発して、与えられたリストの順で結果が得られるようなあみだくじを作成して出力するプログラムを書いてください。
</p>
<p>与えられたリストが (3 5 2 4 0 1) の場合、出力の1例を示します：
</p>
<pre><code> 0 1 2 3 4 5
 | | |-| |-|
 | |-| |-| |
 |-| |-| | |
 | |-| |-| |
 | | |-| |-|
 | | | |-| |
 3 5 2 4 0 1
</code></pre><p>一応、制約条件を示しておきます。
</p>
<ul>
 <li>
     あみだの横棒は縦棒をまたぐことはできません。常に隣接する縦棒同士の交換となります
     。
 </li>

 <li>
     同じ行に複数の横棒があっても良いですが、ひとつの縦棒の同じ点からふたつ横棒が出ることはありません。
 </li>
</ul>
<p>一つのリストに対して複数の解があり得ます。ナイーブな解に飽き足らなければ出力行数をなるべく少なくする解を求める方法を考えてみてください。
</p>



	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4704/addtag/" class="addtag" id="addtag_4704">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #2fff2f;"
  >13/13=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4704"
  >-</span><span
  class="button yellow"
  id="rating_z_4704"
  >0</span><span 
  class="button green"
  id="rating_p_4704"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4704/">
  reply
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20081204140540/http://ja.doukaku.org/109/post_comment/">
post comment
</a>
</div>


<h2>Posted feedbacks - Nested</h2>
<a href="/web/20081204140540/http://ja.doukaku.org/109/flatten/">Flatten</a> 
<a href="/web/20081204140540/http://ja.doukaku.org/109/">Hidden</a> 


  

  
    





<div class="comment" id="comment4839">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/164/" target="_top">kozima</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4839/">#4839</a>(<script language="JavaScript">print_time(new Date("2007/12/16 03:49 GMT"));</script><noscript>2007/12/16 03:49 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>行数減らす工夫は何もしてないのに表示の方が長い……</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>(defun make-amida (list)
  (unless (equal list &#39;(0))
    (let ((n (1- (length list))))
      (nconc (make-amida (remove n list))
             (loop for x from (1- n) downto (position n list) collect x)))))

(defun print-amida (x result)
  (let ((n (1- (length result))))
    (format t &quot;~{~D~^ ~}~&amp;&quot; (loop for x from 0 to n collect x))
    (dolist (i x)
      (let ((str (format nil &quot;~V@{| ~}|&quot; n t)))
        (setf (aref str (+ i i 1)) #\-)
        (write-line str)))
    (format t &quot;~{~D~^ ~}~&amp;&quot; result)))

(let ((list &#39;(3 5 2 4 0 1)))
  (print-amida (make-amida list) list))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4839/addtag/" class="addtag" id="addtag_4839">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4839/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4839/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4839"
  >-</span><span
  class="button yellow"
  id="rating_z_4839"
  >0</span><span 
  class="button green"
  id="rating_p_4839"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4839/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4840">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/448/" target="_top">naranja</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4840/">#4840</a>(<script language="JavaScript">print_time(new Date("2007/12/16 04:52 GMT"));</script><noscript>2007/12/16 04:52 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/d/">
	  D
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>とりあえずこんな感じ。

0 1 2 3 4 5
| |-| | | |
|-| |-| |-|
| |-| |-| |
|-| |-| |-|
| |-| |-| |
3 5 2 4 0 1</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="n">std</span>.<span class="n">stdio</span>;
<span class="k">import</span> <span class="n">std</span>.<span class="n">string</span>;

<span class="kt">void</span> <span class="n">amidaSort</span>(<span class="kt">uint</span>[] <span class="n">origList</span>){
    <span class="k">auto</span> <span class="n">sortedList</span> = <span class="n">origList</span>.<span class="n">dup</span>.<span class="n">sort</span>;
    <span class="k">auto</span> <span class="n">tmpList</span> = <span class="n">origList</span>.<span class="n">dup</span>;
    <span class="k">auto</span> <span class="n">amidaRowProto</span> = <span class="k">cast</span>(<span class="kt">char</span>[])<span class="n">repeat</span>(<span class="s">&quot;| &quot;</span>, <span class="n">origList</span>.<span class="n">length</span>)[<span class="mf">0.</span>.($ - <span class="mi">1</span>)];
    <span class="n">string</span>[] <span class="n">amida</span>;
    <span class="k">while</span>(<span class="n">tmpList</span> != <span class="n">sortedList</span>){
        <span class="k">for</span>(<span class="kt">uint</span> <span class="n">start</span>; <span class="n">start</span> &lt;= <span class="mi">1</span>; <span class="n">start</span>++){
            <span class="kt">uint</span>[] <span class="n">swap</span>;
            <span class="k">for</span>(<span class="kt">uint</span> <span class="n">i</span> = <span class="n">start</span>; <span class="n">i</span> &lt; <span class="n">tmpList</span>.<span class="n">length</span> - <span class="mi">1</span>; <span class="n">i</span> += <span class="mi">2</span>){
                <span class="k">if</span>(<span class="n">tmpList</span>[<span class="n">i</span>] &gt; <span class="n">tmpList</span>[<span class="n">i</span> + <span class="mi">1</span>]){
                    <span class="n">swap</span> ~= <span class="n">i</span>;
                    <span class="k">auto</span> <span class="n">tmp</span> = <span class="n">tmpList</span>[<span class="n">i</span> + <span class="mi">1</span>];
                    <span class="n">tmpList</span>[<span class="n">i</span> + <span class="mi">1</span>] = <span class="n">tmpList</span>[<span class="n">i</span>];
                    <span class="n">tmpList</span>[<span class="n">i</span>] = <span class="n">tmp</span>;
                }
            }
            <span class="k">if</span>(<span class="n">swap</span>.<span class="n">length</span>){
                <span class="k">auto</span> <span class="n">amidaRow</span> = <span class="n">amidaRowProto</span>.<span class="n">dup</span>;
                <span class="k">foreach</span>(<span class="n">i</span>; <span class="n">swap</span>){
                    <span class="n">amidaRow</span>[(<span class="n">i</span> * <span class="mi">2</span>) + <span class="mi">1</span>] = <span class="sc">&#39;-&#39;</span>;
                }
                <span class="n">amida</span> ~= <span class="k">cast</span>(<span class="n">string</span>)<span class="n">amidaRow</span>;
            }
        }
    }
    <span class="n">string</span>[] <span class="n">s</span>;
    <span class="k">foreach</span>(<span class="n">n</span>; <span class="n">sortedList</span>){
        <span class="n">s</span> ~= <span class="n">toString</span>(<span class="n">n</span>);
    }
    <span class="n">string</span>[] <span class="n">o</span>;
    <span class="k">foreach</span>(<span class="n">n</span>; <span class="n">origList</span>){
        <span class="n">o</span> ~= <span class="n">toString</span>(<span class="n">n</span>);
    }
    <span class="k">if</span>(!<span class="n">amida</span>.<span class="n">length</span>){
        <span class="n">amida</span> ~= <span class="k">cast</span>(<span class="n">string</span>)<span class="n">amidaRowProto</span>.<span class="n">dup</span>;
    }
    <span class="n">writefln</span>((<span class="n">s</span>.<span class="n">join</span>(<span class="s">&quot; &quot;</span>) ~ <span class="n">amida</span>.<span class="n">reverse</span> ~ <span class="n">o</span>.<span class="n">join</span>(<span class="s">&quot; &quot;</span>)).<span class="n">join</span>(<span class="s">&quot;\n&quot;</span>));
}

<span class="kt">void</span> <span class="n">main</span>(){
    <span class="n">amidaSort</span>([<span class="mi">3</span>, <span class="mi">5</span>, <span class="mi">2</span>, <span class="mi">4</span>, <span class="mi">0</span>, <span class="mi">1</span>]);
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4840/addtag/" class="addtag" id="addtag_4840">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/d/">
		D
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4840/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4840/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4840"
  >-</span><span
  class="button yellow"
  id="rating_z_4840"
  >0</span><span 
  class="button green"
  id="rating_p_4840"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4840/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4845">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4845/">#4845</a>(<script language="JavaScript">print_time(new Date("2007/12/16 10:01 GMT"));</script><noscript>2007/12/16 10:01 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ごくナイーブにバブルソート。出力は長いです。バブルソートそのまんまの結果がでてきます。
3 5 2 4 0 1
| | | |-| |
| | |-| | |
| |-| | | |
|-| | | | |
| | | | |-|
| | | |-| |
| | |-| | |
| |-| | | |
| | | |-| |
| | |-| | |
| | | | |-|
0 1 2 3 4 5</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">static</span> <span class="k">class</span> <span class="nc">Program</span> <span class="k">{</span>
    <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="k">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">data</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">String</span><span class="p">&gt;(</span><span class="k">new</span> <span class="kt">string</span><span class="p">[]</span><span class="k">{</span><span class="s">&quot;3&quot;</span><span class="p">,</span> <span class="s">&quot;5&quot;</span><span class="p">,</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="s">&quot;4&quot;</span><span class="p">,</span> <span class="s">&quot;0&quot;</span><span class="p">,</span> <span class="s">&quot;1&quot;</span><span class="k">}</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;\n&quot;</span><span class="p">,</span> <span class="n">AmidaSort</span><span class="p">(</span><span class="n">data</span><span class="p">)));</span>
        <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot; &quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">.</span><span class="n">ToArray</span><span class="p">()));</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="kt">string</span><span class="p">[]</span> <span class="n">AmidaSort</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">)</span> <span class="n">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">IComparable</span> <span class="k">{</span>
        <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">result</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">data</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span><span class="k">{</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">j</span><span class="p">;</span> <span class="n">j</span><span class="p">--)</span><span class="k">{</span>
                <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">CompareTo</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">j</span> <span class="p">-</span> <span class="m">1</span><span class="p">])</span> <span class="p">&lt;</span> <span class="m">0</span><span class="p">)</span> <span class="k">{</span>
                    <span class="n">result</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">Swap</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">j</span> <span class="p">-</span> <span class="m">1</span><span class="p">));</span>
                <span class="k">}</span>
            <span class="k">}</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
    <span class="k">}</span>
    <span class="k">static</span> <span class="kt">string</span> <span class="n">Swap</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">List</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">index</span><span class="p">)</span> <span class="n">where</span> <span class="n">T</span><span class="p">:</span> <span class="n">IComparable</span> <span class="k">{</span>
        <span class="n">T</span> <span class="n">temp</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
        <span class="n">data</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="p">=</span> <span class="n">data</span><span class="p">[</span><span class="n">index</span> <span class="p">+</span> <span class="m">1</span><span class="p">];</span>
        <span class="n">data</span><span class="p">[</span><span class="n">index</span> <span class="p">+</span> <span class="m">1</span><span class="p">]</span> <span class="p">=</span> <span class="n">temp</span><span class="p">;</span>
        <span class="kt">string</span><span class="p">[]</span> <span class="n">amida</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[</span><span class="n">data</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="m">1</span><span class="p">];</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">amida</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span> <span class="k">{</span>
            <span class="n">amida</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">=</span> <span class="n">i</span> <span class="p">==</span> <span class="n">index</span> <span class="p">?</span> <span class="s">&quot;-&quot;</span> <span class="p">:</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="k">return</span> <span class="s">&quot;|&quot;</span> <span class="p">+</span> <span class="n">String</span><span class="p">.</span><span class="n">Join</span><span class="p">(</span><span class="s">&quot;|&quot;</span><span class="p">,</span> <span class="n">amida</span><span class="p">)</span> <span class="p">+</span> <span class="s">&quot;|&quot;</span><span class="p">;</span>
    <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4845/addtag/" class="addtag" id="addtag_4845">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4845/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4845/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4845"
  >-</span><span
  class="button yellow"
  id="rating_z_4845"
  >0</span><span 
  class="button green"
  id="rating_p_4845"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081204140540/http://ja.doukaku.org/comment/4845/">
    1
    reply
  </a>

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4845/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4851">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/540/" target="_top">SiroKuro</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4851/">#4851</a>(<script language="JavaScript">print_time(new Date("2007/12/17 02:01 GMT"));</script><noscript>2007/12/17 02:01 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  あ、しまった出力が逆だ。適当にひっくり返しておこう。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4851/addtag/" class="addtag" id="addtag_4851">Tags</a>:
	
	No tags
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4851"
  >-</span><span
  class="button yellow"
  id="rating_z_4851"
  >0</span><span 
  class="button green"
  id="rating_p_4851"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4845/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4851/root/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4851/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment4846">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/28/" target="_top">minke</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4846/">#4846</a>(<script language="JavaScript">print_time(new Date("2007/12/16 11:08 GMT"));</script><noscript>2007/12/16 11:08 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>お題の例と同じ出力になります。
高さは極小にはなりますが、最小とは限らない気がします。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">ins</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="n">amida</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
  <span class="n">idx</span> <span class="o">=</span> <span class="n">amida</span><span class="o">.</span><span class="n">size</span>
  <span class="n">amida</span><span class="o">.</span><span class="n">reverse_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
    <span class="k">break</span> <span class="k">if</span> <span class="n">row</span><span class="o">[</span><span class="n">pos</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span>
      <span class="n">pos</span><span class="o">-</span><span class="mi">2</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">row</span><span class="o">[</span><span class="n">pos</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span> <span class="o">||</span>
      <span class="n">pos</span><span class="o">+</span><span class="mi">2</span> <span class="o">&lt;</span> <span class="n">row</span><span class="o">.</span><span class="n">size</span> <span class="o">&amp;&amp;</span> <span class="n">row</span><span class="o">[</span><span class="n">pos</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="o">]</span> <span class="o">==</span> <span class="s1">&#39;-&#39;</span>
    <span class="n">idx</span> <span class="o">-=</span> <span class="mi">1</span>
  <span class="k">end</span>
  <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="n">amida</span><span class="o">.</span><span class="n">size</span>
    <span class="n">amida</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="s1">&#39;|&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">))</span>
  <span class="k">end</span>
  <span class="n">amida</span><span class="o">[</span><span class="n">idx</span><span class="o">][</span><span class="n">pos</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;-&#39;</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">make_amida</span><span class="p">(</span><span class="n">goal</span><span class="p">)</span>
  <span class="n">n</span> <span class="o">=</span> <span class="n">goal</span><span class="o">.</span><span class="n">size</span>
  <span class="n">amida</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="n">cur</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span> <span class="n">i</span><span class="p">}</span>
  <span class="nb">puts</span> <span class="n">cur</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
  <span class="k">for</span> <span class="n">i</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">n</span>
    <span class="n">j</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">goal</span><span class="o">[</span><span class="n">i</span><span class="o">]</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="n">i</span>
      <span class="n">cur</span><span class="o">[</span><span class="n">j</span><span class="o">]</span><span class="p">,</span> <span class="n">cur</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">cur</span><span class="o">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">cur</span><span class="o">[</span><span class="n">j</span><span class="o">]</span>
      <span class="n">ins</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">amida</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
      <span class="n">j</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="k">end</span>
  <span class="nb">puts</span> <span class="n">amida</span>
  <span class="nb">puts</span> <span class="n">goal</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">make_amida</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4846/addtag/" class="addtag" id="addtag_4846">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4846/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4846/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4846"
  >-</span><span
  class="button yellow"
  id="rating_z_4846"
  >0</span><span 
  class="button green"
  id="rating_p_4846"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4846/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment4848">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/154/" target="_top">xsd</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/">#4848</a>(<script language="JavaScript">print_time(new Date("2007/12/16 22:24 GMT"));</script><noscript>2007/12/16 22:24 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #dfffbf;">2/4=0.50</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>全探索を行って、最も行数が少なく、横線の本数が少ない解答を出力します。

[xsd@celldev dk109]$ ./dk109
0 1 2 3 4 5
| |-| | | |
|-| |-| |-|
| |-| |-| |
|-| |-| |-|
| |-| |-| |
3 5 2 4 0 1
Height=5, Lines=11</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63</pre></td><td class="code"><div class="highlight"><pre><span class="kr">let</span> <span class="n">comb</span> <span class="n">n</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">comb1</span> <span class="n">mask</span> <span class="n">cost</span> <span class="n">acc</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="kr">if</span> <span class="n">cost</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">acc</span> <span class="kr">else</span> <span class="k">(</span><span class="n">mask</span><span class="k">,</span> <span class="n">cost</span><span class="k">)</span> <span class="k">::</span> <span class="n">acc</span>
        <span class="k">|</span> <span class="n">x</span> <span class="k">-&gt;</span>
            <span class="kr">let</span> <span class="n">acc</span> <span class="k">=</span> <span class="n">comb2</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lor</span> <span class="n">x</span><span class="k">)</span> <span class="k">(</span><span class="n">cost</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span> <span class="n">acc</span> <span class="k">(</span><span class="n">x</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
                      <span class="n">comb1</span>  <span class="n">mask</span>         <span class="n">cost</span>    <span class="n">acc</span> <span class="k">(</span><span class="n">x</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span>
    <span class="kr">and</span> <span class="n">comb2</span> <span class="n">mask</span> <span class="n">cost</span> <span class="n">acc</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">mask</span><span class="k">,</span> <span class="n">cost</span><span class="k">)</span> <span class="k">::</span> <span class="n">acc</span>
        <span class="k">|</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="n">comb1</span> <span class="n">mask</span> <span class="n">cost</span> <span class="n">acc</span> <span class="k">(</span><span class="n">x</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
    <span class="n">comb1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="k">[]</span> <span class="k">(</span><span class="mi">1</span> <span class="kr">lsl</span> <span class="k">(</span><span class="n">n</span> <span class="k">-</span> <span class="mi">2</span><span class="k">))</span>

<span class="kr">let</span> <span class="n">apply</span> <span class="n">mask</span> <span class="n">cost</span> <span class="k">(</span><span class="n">state</span><span class="k">,</span> <span class="k">(</span><span class="n">c1</span><span class="k">,</span> <span class="n">c2</span><span class="k">))</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">apply&#39;</span> <span class="n">prev</span> <span class="n">mask</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="k">[]</span>    <span class="k">-&gt;</span> <span class="k">[</span> <span class="n">prev</span> <span class="k">]</span>
        <span class="k">|</span> <span class="n">head</span> <span class="k">::</span> <span class="n">tail</span> <span class="k">-&gt;</span>
            <span class="kr">if</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">land</span> <span class="mi">1</span><span class="k">)=</span><span class="mi">1</span> <span class="kr">then</span> <span class="n">head</span> <span class="k">::</span> <span class="n">apply&#39;</span> <span class="n">prev</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="n">tail</span>
                               <span class="kr">else</span> <span class="n">prev</span> <span class="k">::</span> <span class="n">apply&#39;</span> <span class="n">head</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="n">tail</span> <span class="kr">in</span>
    <span class="k">(</span><span class="kr">match</span> <span class="n">state</span> <span class="kr">with</span>
    <span class="k">|</span> <span class="k">[]</span>       <span class="k">-&gt;</span> <span class="k">[]</span>
    <span class="k">|</span> <span class="n">hd</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="n">apply&#39;</span> <span class="n">hd</span> <span class="n">mask</span> <span class="n">tl</span><span class="k">),</span> <span class="k">(</span><span class="n">c1</span> <span class="k">+</span> <span class="mi">1</span><span class="k">,</span> <span class="n">c2</span> <span class="k">+</span> <span class="n">cost</span><span class="k">)</span>

<span class="kr">let</span> <span class="n">drawamida</span> <span class="n">mask</span> <span class="n">n</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">amida</span> <span class="n">s</span> <span class="n">mask</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="n">s</span>
        <span class="k">|</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="kr">if</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">land</span> <span class="mi">1</span><span class="k">)</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">amida</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="s2">&quot; |&quot;</span><span class="k">)</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">x</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span>
                                    <span class="kr">else</span> <span class="n">amida</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="s2">&quot;-|&quot;</span><span class="k">)</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">x</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
    <span class="n">amida</span> <span class="s2">&quot;|&quot;</span> <span class="n">mask</span> <span class="k">(</span><span class="n">n</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">equal</span> <span class="n">arg1</span> <span class="n">arg2</span> <span class="k">=</span> <span class="kr">match</span> <span class="n">arg1</span><span class="k">,</span> <span class="n">arg2</span> <span class="kr">with</span>
    <span class="k">|</span> <span class="k">[],</span> <span class="k">[]</span>                <span class="k">-&gt;</span> <span class="kr">true</span>
    <span class="k">|</span> <span class="n">h1</span> <span class="k">::</span> <span class="n">t1</span><span class="k">,</span> <span class="n">h2</span> <span class="k">::</span> <span class="n">t2</span>    <span class="k">-&gt;</span> <span class="kr">if</span> <span class="n">h1</span> <span class="k">&lt;&gt;</span> <span class="n">h2</span> <span class="kr">then</span> <span class="kr">false</span> <span class="kr">else</span> <span class="n">equal</span> <span class="n">t1</span> <span class="n">t2</span>
    <span class="k">|</span> <span class="k">_,</span> <span class="k">_</span>                  <span class="k">-&gt;</span> <span class="kr">false</span>

<span class="kr">let</span> <span class="n">solve</span> <span class="n">targetstate</span> <span class="n">options</span> <span class="n">limitcost</span> <span class="n">initstate</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="n">target</span> <span class="n">options</span> <span class="n">best</span> <span class="n">current</span> <span class="k">=</span>
        <span class="kr">let</span> <span class="n">bestsoln</span><span class="k">,</span> <span class="n">bestcost</span>  <span class="k">=</span> <span class="n">best</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">curstate</span><span class="k">,</span> <span class="n">curoption</span><span class="k">,</span> <span class="n">cursoln</span><span class="k">,</span> <span class="n">curcost</span> <span class="k">=</span> <span class="n">current</span> <span class="kr">in</span>
        <span class="kr">let</span> <span class="n">costcomp</span> <span class="k">(</span><span class="n">c1</span><span class="k">,</span> <span class="n">c2</span><span class="k">)</span> <span class="k">(</span><span class="n">m1</span><span class="k">,</span> <span class="n">m2</span><span class="k">)</span> <span class="k">=</span> <span class="n">c1</span> <span class="k">&gt;=</span> <span class="n">m1</span> <span class="k">||</span>  <span class="n">c2</span> <span class="k">&gt;=</span> <span class="n">m2</span> <span class="kr">in</span>
        <span class="kr">if</span> <span class="k">(</span><span class="n">costcomp</span> <span class="n">curcost</span> <span class="n">bestcost</span><span class="k">)</span> <span class="kr">then</span> <span class="n">best</span> <span class="kr">else</span> <span class="k">(</span>
            <span class="kr">if</span> <span class="n">equal</span> <span class="n">target</span> <span class="n">curstate</span> <span class="kr">then</span> <span class="n">cursoln</span><span class="k">,</span> <span class="n">curcost</span> <span class="kr">else</span> <span class="k">(</span>
                <span class="kr">match</span> <span class="n">curoption</span> <span class="kr">with</span>
                    <span class="k">|</span> <span class="k">[]</span>       <span class="k">-&gt;</span> <span class="n">best</span>
                    <span class="k">|</span> <span class="k">(</span><span class="n">mask</span><span class="k">,</span> <span class="n">cost</span><span class="k">)</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span>
                        <span class="kr">let</span> <span class="n">newstate</span><span class="k">,</span> <span class="n">newcost</span> <span class="k">=</span> <span class="n">apply</span> <span class="n">mask</span> <span class="n">cost</span> <span class="k">(</span><span class="n">curstate</span><span class="k">,</span> <span class="n">curcost</span><span class="k">)</span> <span class="kr">in</span>
                        <span class="kr">let</span> <span class="n">best</span> <span class="k">=</span>  <span class="n">loop</span> <span class="n">target</span> <span class="n">options</span> <span class="n">best</span> <span class="k">(</span><span class="n">newstate</span><span class="k">,</span> <span class="n">options</span><span class="k">,</span> <span class="k">(</span><span class="n">mask</span> <span class="k">::</span> <span class="n">cursoln</span><span class="k">),</span> <span class="n">newcost</span><span class="k">)</span> <span class="kr">in</span>
                                    <span class="n">loop</span> <span class="n">target</span> <span class="n">options</span> <span class="n">best</span> <span class="k">(</span><span class="n">curstate</span><span class="k">,</span> <span class="n">tl</span><span class="k">,</span> <span class="n">cursoln</span><span class="k">,</span> <span class="n">curcost</span><span class="k">)</span>
            <span class="k">)</span>
        <span class="k">)</span> <span class="kr">in</span>
    <span class="n">loop</span> <span class="n">targetstate</span> <span class="n">options</span> <span class="k">([],</span> <span class="n">limitcost</span><span class="k">)</span> <span class="k">(</span><span class="n">initstate</span><span class="k">,</span> <span class="n">options</span><span class="k">,</span> <span class="k">[],</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="mi">0</span><span class="k">))</span>

<span class="kr">let</span> <span class="n">main</span> <span class="n">target</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">prt</span> <span class="k">=</span> <span class="kr">function</span> <span class="k">|</span> <span class="k">[]</span> <span class="k">-&gt;</span> <span class="n">print_endline</span> <span class="s2">&quot;&quot;</span> <span class="k">|</span> <span class="n">hd</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;%d &quot;</span> <span class="n">hd</span> <span class="kr">in</span> <span class="n">prt</span> <span class="n">tl</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">seq</span> <span class="n">n</span>   <span class="k">=</span> <span class="kr">function</span> <span class="k">[]</span> <span class="k">-&gt;</span> <span class="k">[]</span> <span class="k">|</span> <span class="k">_</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="n">n</span> <span class="k">::</span> <span class="k">(</span><span class="n">seq</span> <span class="k">(</span><span class="n">n</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span> <span class="n">tl</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">len</span>         <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">length</span> <span class="n">target</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">start</span>       <span class="k">=</span> <span class="n">seq</span> <span class="mi">0</span> <span class="n">target</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">_</span>           <span class="k">=</span> <span class="n">prt</span> <span class="n">start</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="n">best</span><span class="k">,</span> <span class="k">(</span><span class="n">c</span><span class="k">,</span><span class="n">d</span><span class="k">)</span> <span class="k">=</span> <span class="n">solve</span> <span class="n">target</span> <span class="k">(</span><span class="n">comb</span> <span class="n">len</span><span class="k">)</span> <span class="k">(</span><span class="n">len</span><span class="k">,</span> <span class="n">len</span> <span class="k">*</span> <span class="n">len</span><span class="k">)</span> <span class="n">start</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">prt2</span> <span class="n">n</span>  <span class="k">=</span> <span class="kr">function</span> <span class="k">[]</span> <span class="k">-&gt;</span> <span class="k">()</span> <span class="k">|</span> <span class="n">hd</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">print_endline</span> <span class="k">(</span><span class="n">drawamida</span> <span class="n">hd</span> <span class="n">n</span><span class="k">);</span> <span class="n">prt2</span> <span class="n">n</span> <span class="n">tl</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">_</span>           <span class="k">=</span> <span class="n">prt2</span> <span class="n">len</span> <span class="k">(</span><span class="n">List</span><span class="k">.</span><span class="n">rev</span> <span class="n">best</span><span class="k">)</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">_</span>           <span class="k">=</span> <span class="n">prt</span> <span class="n">target</span>  <span class="kr">in</span>
    <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;Height=%d, Lines=%d</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">c</span> <span class="n">d</span>

<span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">main</span> <span class="k">[</span> <span class="mi">3</span><span class="k">;</span> <span class="mi">5</span><span class="k">;</span> <span class="mi">2</span><span class="k">;</span> <span class="mi">4</span><span class="k">;</span> <span class="mi">0</span><span class="k">;</span> <span class="mi">1</span><span class="k">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/addtag/" class="addtag" id="addtag_4848">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #dfffbf;"
  >2/4=0.50</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4848"
  >-</span><span
  class="button yellow"
  id="rating_z_4848"
  >0</span><span 
  class="button green"
  id="rating_p_4848"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/">
    2
    replies
  </a>

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4848/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4849">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4849/">#4849</a>(<script language="JavaScript">print_time(new Date("2007/12/16 23:13 GMT"));</script><noscript>2007/12/16 23:13 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>おお、すごい。</p>
<p>ちなみに、横棒の数の最小値は、与えられたリストをpermutationと見た場合のinversionの数と同じであることが知られているそうです。(inversionとは、リストのi番目の要素をa_iと書く時、 i &lt; j かつ a_i &gt; a_j となっている箇所。(3 5 2 4 0 1) の場合は、(3,2) (3,0) (3,1) (5,2) (5,4) (5,0) (5,1) (2,0) (2,1) (4,0) (4,1) の11個。)</p>

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4849/addtag/" class="addtag" id="addtag_4849">Tags</a>:
	
    
    <a href="/web/20081204140540/http://ja.doukaku.org/tag/%E5%8F%82%E8%80%83%E3%81%AB%E3%81%AA%E3%82%8B/">参考になる</a>
    
	&nbsp;

	

  
  <span class="rating">
  Rating<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4849"
  >-</span><span
  class="button yellow"
  id="rating_z_4849"
  >0</span><span 
  class="button green"
  id="rating_p_4849"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4849/root/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20081204140540/http://ja.doukaku.org/comment/4849/">
    1
    reply
  </a>

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4849/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4893">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4893/">#4893</a>(<script language="JavaScript">print_time(new Date("2007/12/20 01:32 GMT"));</script><noscript>2007/12/20 01:32 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ああそうか．
inversion を求めて，隣接するものを採用，残りを採用したもので変換，
というのを繰り返せばいいのか．これで多分，横棒数，段数ともに最小になるはず？

印字系は手抜きです(縦棒10本まで対応)．置換を与えると，阿弥陀籤を印字します．

実行結果
*Main&gt; :main [3,5,2,4,0,1]
0 1 2 3 4 5
| |-| | |-|
|-| |-| | |
| |-| |-| |
|-| |-| |-|
| |-| |-| |
3 5 2 4 0 1
*Main&gt; :main [5,4,3,2,1,0]
0 1 2 3 4 5
|-| |-| |-|
| |-| |-| |
|-| |-| |-|
| |-| |-| |
|-| |-| |-|
| |-| |-| |
5 4 3 2 1 0
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="p">(</span><span class="nv">main</span><span class="p">)</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">Environment</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">a</span><span class="o">:</span><span class="kr">_</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="p">;</span> <span class="kr">let</span> <span class="p">{</span> <span class="nv">e</span> <span class="o">=</span> <span class="nv">read</span> <span class="nv">a</span> <span class="o">::</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span>
                <span class="p">;</span> <span class="nv">s</span> <span class="o">=</span> <span class="nv">sort</span> <span class="nv">e</span>
                <span class="p">;</span> <span class="nv">caption</span> <span class="o">=</span> <span class="nv">putStrLn</span> <span class="o">.</span> <span class="nv">concat</span> <span class="o">.</span> <span class="nv">intersperse</span> <span class="s">&quot; &quot;</span> <span class="o">.</span> <span class="nv">map</span> <span class="nv">show</span>
                <span class="p">}</span>
          <span class="p">;</span> <span class="nv">caption</span> <span class="nv">s</span> <span class="o">&gt;&gt;</span> <span class="nv">putStr</span> <span class="p">(</span><span class="nv">showAmida</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">e</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nv">amida</span> <span class="nv">e</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="nv">caption</span> <span class="nv">e</span>
          <span class="p">}</span>

<span class="nv">amida</span> <span class="o">::</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[[(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)]]</span>
<span class="nv">amida</span> <span class="nv">p</span> <span class="o">=</span> <span class="nv">reverse</span> <span class="o">$</span> <span class="nv">fst</span> <span class="o">$</span> <span class="nv">head</span> <span class="o">$</span> <span class="nv">dropWhile</span> <span class="p">(</span><span class="nv">not</span> <span class="o">.</span> <span class="nv">null</span> <span class="o">.</span> <span class="nv">snd</span><span class="p">)</span> <span class="o">$</span> <span class="nv">iterate</span> <span class="nv">f</span> <span class="p">([],</span><span class="nv">invs</span><span class="p">)</span>
  <span class="kr">where</span> <span class="nv">invs</span> <span class="o">=</span> <span class="nv">inversions</span> <span class="nv">p</span>
        <span class="nv">f</span> <span class="p">(</span><span class="nv">acc</span><span class="p">,</span><span class="nv">invs</span><span class="p">)</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">select</span> <span class="nv">invs</span> <span class="kr">of</span>
                         <span class="p">(</span><span class="nv">xs</span><span class="p">,</span><span class="nv">ys</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">xs</span><span class="o">:</span><span class="nv">acc</span><span class="p">,</span> <span class="nv">foldr</span> <span class="nv">map</span> <span class="nv">ys</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">exchange</span> <span class="nv">xs</span><span class="p">))</span>

<span class="nv">inversions</span> <span class="o">::</span> <span class="p">[</span><span class="n">Int</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)]</span>
<span class="nv">inversions</span> <span class="p">[]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="nv">inversions</span> <span class="p">(</span><span class="nv">y</span><span class="o">:</span><span class="nv">ys</span><span class="p">)</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">flip</span> <span class="p">(,)</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">filter</span> <span class="p">(</span><span class="nv">y</span> <span class="o">&gt;</span><span class="p">)</span> <span class="nv">ys</span><span class="p">)</span> <span class="o">++</span> <span class="nv">inversions</span> <span class="nv">ys</span>

<span class="nv">select</span> <span class="o">::</span> <span class="p">[(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)]</span> <span class="o">-&gt;</span> <span class="p">([(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)],[(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)])</span>
<span class="nv">select</span> <span class="nv">invs</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">partition</span> <span class="p">((</span><span class="mi">1</span><span class="o">==</span><span class="p">)</span> <span class="o">.</span> <span class="nv">uncurry</span> <span class="nv">subtract</span><span class="p">)</span> <span class="o">$</span> <span class="nv">sort</span> <span class="o">$</span> <span class="nv">invs</span> <span class="kr">of</span>
                <span class="p">([]</span>  <span class="p">,</span><span class="nv">ys</span><span class="p">)</span>       <span class="o">-&gt;</span> <span class="p">([],</span><span class="nv">ys</span><span class="p">)</span>
                <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">,</span><span class="nv">ys</span><span class="p">)</span> 
                  <span class="o">-&gt;</span> <span class="kr">case</span> <span class="nv">partition</span> <span class="p">(</span><span class="nv">share</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nv">xs</span><span class="o">++</span><span class="nv">ys</span><span class="p">)</span> <span class="kr">of</span>
                        <span class="p">(</span><span class="nv">zs</span><span class="p">,</span><span class="nv">ws</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kr">case</span> <span class="nv">select</span> <span class="nv">ws</span> <span class="kr">of</span>
                                     <span class="p">(</span><span class="nv">us</span><span class="p">,</span><span class="nv">vs</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">us</span><span class="p">,</span><span class="nv">zs</span><span class="o">++</span><span class="nv">vs</span><span class="p">)</span>

<span class="nv">share</span> <span class="o">::</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
<span class="nv">share</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span> <span class="o">=</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">p</span> <span class="o">||</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">q</span> <span class="o">||</span> <span class="nv">y</span> <span class="o">==</span> <span class="nv">p</span> <span class="o">||</span> <span class="nv">y</span> <span class="o">==</span> <span class="nv">q</span>

<span class="nv">exchange</span> <span class="o">::</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)</span>
<span class="nv">exchange</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="nv">pq</span><span class="o">@</span><span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span> <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">p</span>    <span class="o">=</span> <span class="p">(</span><span class="nv">y</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span>
                        <span class="o">|</span> <span class="nv">x</span> <span class="o">==</span> <span class="nv">q</span>    <span class="o">=</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span>
                        <span class="o">|</span> <span class="nv">y</span> <span class="o">==</span> <span class="nv">p</span>    <span class="o">=</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">q</span><span class="p">)</span>
                        <span class="o">|</span> <span class="nv">y</span> <span class="o">==</span> <span class="nv">q</span>    <span class="o">=</span> <span class="p">(</span><span class="nv">p</span><span class="p">,</span><span class="nv">x</span><span class="p">)</span>
                        <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="nv">pq</span>

<span class="nv">showAmida</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[[(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)]]</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">showAmida</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">unlines</span> <span class="o">.</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">showStep</span> <span class="nv">n</span><span class="p">)</span>

<span class="nv">showStep</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="p">[(</span><span class="n">Int</span><span class="p">,</span><span class="n">Int</span><span class="p">)]</span> <span class="o">-&gt;</span> <span class="n">String</span>
<span class="nv">showStep</span> <span class="nv">n</span> <span class="nv">xs</span> <span class="o">=</span> <span class="sc">&#39;|&#39;</span><span class="o">:</span><span class="nv">step</span> <span class="nv">n</span> <span class="mi">0</span> <span class="nv">xs</span>
  <span class="kr">where</span> <span class="nv">step</span> <span class="nv">n</span> <span class="nv">m</span> <span class="nv">xs</span> 
          <span class="o">|</span> <span class="nv">n</span> <span class="o">==</span> <span class="nv">m</span>    <span class="o">=</span> <span class="s">&quot;&quot;</span>
          <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">=</span> <span class="kr">case</span> <span class="nv">xs</span> <span class="kr">of</span>
                          <span class="p">[]</span> <span class="o">-&gt;</span> <span class="nv">nostep</span> <span class="o">$</span> <span class="nv">step</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">xs</span>
                          <span class="p">(</span><span class="nv">i</span><span class="p">,</span><span class="kr">_</span><span class="p">)</span><span class="o">:</span><span class="nv">rs</span> <span class="o">|</span> <span class="nv">m</span> <span class="o">==</span> <span class="nv">i</span>    <span class="o">-&gt;</span> <span class="nv">astep</span>  <span class="o">$</span> <span class="nv">step</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">rs</span>
                                   <span class="o">|</span> <span class="nv">otherwise</span> <span class="o">-&gt;</span> <span class="nv">nostep</span> <span class="o">$</span> <span class="nv">step</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">m</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">xs</span>
        <span class="nv">nostep</span> <span class="o">=</span> <span class="p">(</span><span class="sc">&#39; &#39;</span><span class="o">:</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="sc">&#39;|&#39;</span><span class="o">:</span><span class="p">)</span>
        <span class="nv">astep</span>  <span class="o">=</span> <span class="p">(</span><span class="sc">&#39;-&#39;</span><span class="o">:</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="sc">&#39;|&#39;</span><span class="o">:</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4893/addtag/" class="addtag" id="addtag_4893">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4893/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4893/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4893"
  >-</span><span
  class="button yellow"
  id="rating_z_4893"
  >0</span><span 
  class="button green"
  id="rating_p_4893"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4849/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4893/root/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4893/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4856">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/154/" target="_top">xsd</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4856/">#4856</a>(<script language="JavaScript">print_time(new Date("2007/12/17 14:40 GMT"));</script><noscript>2007/12/17 14:40 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>(5 4 3 2 1 0)でテストしたところ、正しく解を見つけないバグがあったので、修正します。</p>
<p>プラス評価いただいていたのに申し訳ないです。</p>
<p>コメント元の投稿は自分でマイナスしておきました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7
8</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- dk109.bug.ml        2007-12-17 23:28:16.000000000 +0900</span>
<span class="gi">+++ dk109.ml    2007-12-17 23:28:55.000000000 +0900</span>
<span class="gu">@@ -38 +38 @@</span>
<span class="gd">-        let costcomp (c1, c2) (m1, m2) = c1 &gt;= m1 ||  c2 &gt;= m2 in</span>
<span class="gi">+        let costcomp (c1, c2) (m1, m2) = c1 &gt; m1 ||  c2 &gt; m2 in</span>
<span class="gu">@@ -57 +57 @@</span>
<span class="gd">-    let best, (c,d) = solve target (comb len) (len, len * len) start in</span>
<span class="gi">+    let best, (c,d) = solve target (comb len) (len+1, len * len) start in</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4856/addtag/" class="addtag" id="addtag_4856">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4856/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4856/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4856"
  >-</span><span
  class="button yellow"
  id="rating_z_4856"
  >0</span><span 
  class="button green"
  id="rating_p_4856"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4848/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4856/root/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4856/">
  reply
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  
    





<div class="comment" id="comment4854">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/572/" target="_top">naoto</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4854/">#4854</a>(<script language="JavaScript">print_time(new Date("2007/12/17 08:51 GMT"));</script><noscript>2007/12/17 08:51 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>あんまり綺麗じゃないけど。

gosh&gt; (amida  '(3 5 2 4 0 1))
0 1 2 3 4 5
| |-| | | |
|-| |-| |-|
| |-| |-| |
|-| |-| |-|
| |-| |-| |
3 5 2 4 0 1
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">amida-sort1</span> <span class="nv">state</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">loop</span> <span class="nv">prev</span> <span class="nv">lis</span> <span class="nv">acc</span> <span class="nv">strs</span> <span class="nv">skip</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">lis</span><span class="p">)</span>
           <span class="p">(</span><span class="nb">values </span><span class="p">(</span><span class="nb">reverse </span><span class="p">(</span><span class="nb">cons </span><span class="nv">prev</span> <span class="nv">acc</span><span class="p">))</span>
                   <span class="p">(</span><span class="nb">reverse </span><span class="nv">strs</span><span class="p">)))</span>
          <span class="p">((</span><span class="k">or </span><span class="nv">skip</span> <span class="p">(</span><span class="nb">&lt; </span><span class="nv">prev</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lis</span><span class="p">)))</span>
           <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lis</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lis</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">prev</span> <span class="nv">acc</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">cons </span><span class="s">&quot; &quot;</span> <span class="nv">strs</span><span class="p">)</span> <span class="no">#f</span><span class="p">))</span>
          <span class="p">((</span><span class="nb">&gt; </span><span class="nv">prev</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lis</span><span class="p">))</span>
           <span class="p">(</span><span class="nf">loop</span> <span class="nv">prev</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lis</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lis</span><span class="p">)</span> <span class="nv">acc</span><span class="p">)</span>
                 <span class="p">(</span><span class="nb">cons </span><span class="s">&quot;-&quot;</span> <span class="nv">strs</span><span class="p">)</span> <span class="no">#t</span><span class="p">))</span>
          <span class="p">(</span><span class="nf">else</span>
           <span class="p">(</span><span class="nf">error</span> <span class="s">&quot;must not happen&quot;</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">loop</span> <span class="p">(</span><span class="nb">car </span><span class="nv">state</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">state</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">()</span> <span class="o">&#39;</span><span class="p">()</span> <span class="no">#f</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">amida-sort</span> <span class="nv">final-state</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">loop</span> <span class="nv">state</span> <span class="nv">strs</span><span class="p">)</span>
    <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">apply </span><span class="nv">&lt;</span> <span class="nv">state</span><span class="p">)</span> <span class="nv">strs</span><span class="p">)</span>
          <span class="p">(</span><span class="nf">else</span>
           <span class="p">(</span><span class="nf">receive</span> <span class="p">(</span><span class="nf">state1</span> <span class="nv">strs1</span><span class="p">)</span> <span class="p">(</span><span class="nf">amida-sort1</span> <span class="nv">state</span><span class="p">)</span>
             <span class="p">(</span><span class="nf">loop</span> <span class="nv">state1</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">strs1</span> <span class="nv">strs</span><span class="p">))))))</span>
  <span class="p">(</span><span class="nf">loop</span> <span class="nv">final-state</span> <span class="o">&#39;</span><span class="p">()))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">make-amidakuji</span> <span class="nv">strs-list</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">line</span> <span class="nv">strs</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">string-append </span><span class="s">&quot;|&quot;</span> <span class="p">(</span><span class="nf">string-join</span> <span class="nv">strs</span> <span class="s">&quot;|&quot;</span><span class="p">)</span> <span class="s">&quot;|&quot;</span><span class="p">))</span>
  <span class="p">(</span><span class="nf">string-join</span> <span class="p">(</span><span class="nb">map </span><span class="nv">line</span> <span class="nv">strs-list</span><span class="p">)</span> <span class="s">&quot;\n&quot;</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">amida</span> <span class="nv">final-state</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">numbers-&gt;line</span> <span class="nv">nums</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">string-join</span> <span class="p">(</span><span class="nb">map </span><span class="nv">number-&gt;string</span> <span class="nv">nums</span><span class="p">)</span> <span class="s">&quot; &quot;</span><span class="p">))</span>
  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">start</span> <span class="p">(</span><span class="nf">numbers-&gt;line</span> <span class="p">(</span><span class="nf">iota</span> <span class="p">(</span><span class="nb">length </span><span class="nv">final-state</span><span class="p">))))</span>
        <span class="p">(</span><span class="nf">end</span>   <span class="p">(</span><span class="nf">numbers-&gt;line</span> <span class="nv">final-state</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">print</span> <span class="nv">start</span><span class="p">)</span>
    <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nf">make-amidakuji</span> <span class="p">(</span><span class="nf">amida-sort</span> <span class="nv">final-state</span><span class="p">)))</span>
    <span class="p">(</span><span class="nf">print</span> <span class="nv">end</span><span class="p">)))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4854/addtag/" class="addtag" id="addtag_4854">Tags</a>:
	
    
    <a href="/web/20081204140540/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4854/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4854/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4854"
  >-</span><span
  class="button yellow"
  id="rating_z_4854"
  >0</span><span 
  class="button green"
  id="rating_p_4854"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4854/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment4859">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/154/" target="_top">xsd</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4859/">#4859</a>(<script language="JavaScript">print_time(new Date("2007/12/17 16:09 GMT"));</script><noscript>2007/12/17 16:09 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  問題を一般化して考えてみます。<br/>あみだくじは、ある状態から別の状態への遷移関数と考えることができます。<br/>すると、この問題は初期状態と目的の状態が与えられたときに遷移関数を求めよ、という問題と解釈することができます。<br/><br/>ただし遷移関数を0から作るのではなく、与えられた部分遷移関数群を組み合わせて目的の遷移関数を作り出すことを考えます。<br/>また、関数同士の同一性を比較するのは困難なので、同じ初期状態から同じ目的状態に達成する関数が最小コストで合成できたら完了とします。<br/>目的状態に達成できたかは与えられたユニットテストが通るかどうかで判断します。<br/><br/>簡単にいうと、初期状態と部分関数群とユニットテストを与えると、ユニットテストが通るような(最小コストの)関数を合成して返すような関数を作ってみました。<br/><br/>下のコードのsolve関数がその関数で、関数群(options)、ユニットテスト(unittest)、コスト比較関数(costfunc)、制限コスト(limitcost)、初期状態(initstate)、初期コスト(initcost)、初期解(initsoln)を渡すと、最小コストと最良解のタプルを返します。<br/><br/>実際にはどんな関数でも合成できるわけではなく、あみだくじのように取りうる状態が限られているものだから適用できるのだと思いますが、可能性として面白いと感じました。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68</pre></td><td class="code"><div class="highlight"><pre><span class="kr">let</span> <span class="n">solve</span> <span class="n">options</span> <span class="n">unittest</span> <span class="n">costfunc</span> <span class="n">limitcost</span> <span class="k">((</span><span class="n">initstate</span><span class="k">,</span> <span class="n">initcost</span><span class="k">,</span> <span class="n">initsoln</span><span class="k">)</span> <span class="kr">as</span> <span class="n">initcontext</span><span class="k">)</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">loop</span> <span class="k">((</span><span class="n">bestcost</span><span class="k">,</span> <span class="n">bestsoln</span><span class="k">)</span> <span class="kr">as</span> <span class="n">best</span><span class="k">)</span> <span class="k">((</span><span class="n">curstate</span><span class="k">,</span> <span class="n">curcost</span><span class="k">,</span> <span class="n">cursoln</span><span class="k">)</span> <span class="kr">as</span> <span class="n">current</span><span class="k">)</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="k">[]</span>            <span class="k">-&gt;</span> <span class="n">best</span>
        <span class="k">|</span> <span class="n">func</span> <span class="k">::</span> <span class="n">tail</span>  <span class="k">-&gt;</span> <span class="k">(</span><span class="kr">match</span> <span class="n">costfunc</span> <span class="n">curcost</span> <span class="n">bestcost</span><span class="k">,</span> <span class="n">unittest</span> <span class="n">curstate</span> <span class="kr">with</span>
            <span class="k">|</span> <span class="kr">true</span><span class="k">,</span> <span class="k">_</span>   <span class="k">-&gt;</span> <span class="n">best</span>
            <span class="k">|</span> <span class="k">_,</span>   <span class="kr">true</span> <span class="k">-&gt;</span> <span class="n">curcost</span><span class="k">,</span> <span class="n">cursoln</span>
            <span class="k">|</span> <span class="k">_,</span>   <span class="k">_</span>    <span class="k">-&gt;</span> <span class="kr">let</span> <span class="n">best</span> <span class="k">=</span> <span class="n">loop</span> <span class="n">best</span> <span class="n">current</span> <span class="n">tail</span> <span class="kr">in</span> <span class="n">loop</span> <span class="n">best</span> <span class="k">(</span><span class="n">func</span> <span class="n">current</span><span class="k">)</span> <span class="n">options</span>
        <span class="k">)</span> <span class="kr">in</span>
    <span class="n">loop</span> <span class="k">(</span><span class="n">limitcost</span><span class="k">,</span> <span class="n">initsoln</span><span class="k">)</span> <span class="n">initcontext</span> <span class="n">options</span>

<span class="kr">let</span> <span class="n">comb</span> <span class="n">n</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">apply</span> <span class="n">mask</span> <span class="n">cost</span> <span class="k">(</span><span class="n">state</span><span class="k">,</span> <span class="k">(</span><span class="n">c1</span><span class="k">,</span> <span class="n">c2</span><span class="k">),</span> <span class="n">soln</span><span class="k">)</span> <span class="k">=</span>
        <span class="kr">let</span> <span class="kr">rec</span> <span class="n">apply&#39;</span> <span class="n">prev</span> <span class="n">mask</span> <span class="k">=</span> <span class="kr">function</span>
            <span class="k">|</span> <span class="k">[]</span>    <span class="k">-&gt;</span> <span class="k">[</span> <span class="n">prev</span> <span class="k">]</span>
            <span class="k">|</span> <span class="n">head</span> <span class="k">::</span> <span class="n">tail</span> <span class="k">-&gt;</span>
                <span class="kr">if</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">land</span> <span class="mi">1</span><span class="k">)=</span><span class="mi">1</span> <span class="kr">then</span> <span class="n">head</span> <span class="k">::</span> <span class="n">apply&#39;</span> <span class="n">prev</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="n">tail</span>
                                   <span class="kr">else</span> <span class="n">prev</span> <span class="k">::</span> <span class="n">apply&#39;</span> <span class="n">head</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="n">tail</span> <span class="kr">in</span>
        <span class="k">(</span><span class="kr">match</span> <span class="n">state</span> <span class="kr">with</span>
        <span class="k">|</span> <span class="k">[]</span>       <span class="k">-&gt;</span> <span class="k">[]</span>
        <span class="k">|</span> <span class="n">hd</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="n">apply&#39;</span> <span class="n">hd</span> <span class="n">mask</span> <span class="n">tl</span><span class="k">),</span> <span class="k">(</span><span class="n">c1</span> <span class="k">+</span> <span class="mi">1</span><span class="k">,</span> <span class="n">c2</span> <span class="k">+</span> <span class="n">cost</span><span class="k">),</span> <span class="k">(</span><span class="n">mask</span> <span class="k">::</span> <span class="n">soln</span><span class="k">)</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">comb1</span> <span class="n">mask</span> <span class="n">cost</span> <span class="n">acc</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="kr">if</span> <span class="n">cost</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">acc</span> <span class="kr">else</span> <span class="k">(</span><span class="n">apply</span> <span class="n">mask</span> <span class="n">cost</span><span class="k">)</span> <span class="k">::</span> <span class="n">acc</span>
        <span class="k">|</span> <span class="n">x</span> <span class="k">-&gt;</span>
            <span class="kr">let</span> <span class="n">acc</span> <span class="k">=</span> <span class="n">comb2</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lor</span> <span class="n">x</span><span class="k">)</span> <span class="k">(</span><span class="n">cost</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span> <span class="n">acc</span> <span class="k">(</span><span class="n">x</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
                      <span class="n">comb1</span>  <span class="n">mask</span>         <span class="n">cost</span>    <span class="n">acc</span> <span class="k">(</span><span class="n">x</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span>
    <span class="kr">and</span> <span class="n">comb2</span> <span class="n">mask</span> <span class="n">cost</span> <span class="n">acc</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">apply</span> <span class="n">mask</span> <span class="n">cost</span><span class="k">)</span> <span class="k">::</span> <span class="n">acc</span>
        <span class="k">|</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="n">comb1</span> <span class="n">mask</span> <span class="n">cost</span> <span class="n">acc</span> <span class="k">(</span><span class="n">x</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
    <span class="n">comb1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="k">[]</span> <span class="k">(</span><span class="mi">1</span> <span class="kr">lsl</span> <span class="k">(</span><span class="n">n</span> <span class="k">-</span> <span class="mi">2</span><span class="k">))</span>

<span class="kr">let</span> <span class="n">main</span> <span class="n">target</span> <span class="k">=</span>
    <span class="kr">let</span> <span class="n">drawamida</span> <span class="n">mask</span> <span class="n">n</span> <span class="k">=</span>
        <span class="kr">let</span> <span class="kr">rec</span> <span class="n">amida</span> <span class="n">s</span> <span class="n">mask</span> <span class="k">=</span> <span class="kr">function</span>
            <span class="k">|</span> <span class="mi">0</span> <span class="k">-&gt;</span> <span class="n">s</span>
            <span class="k">|</span> <span class="n">x</span> <span class="k">-&gt;</span> <span class="kr">if</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">land</span> <span class="mi">1</span><span class="k">)</span> <span class="k">=</span> <span class="mi">0</span> <span class="kr">then</span> <span class="n">amida</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="s2">&quot; |&quot;</span><span class="k">)</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">x</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span>
                                        <span class="kr">else</span> <span class="n">amida</span> <span class="k">(</span><span class="n">s</span> <span class="o">^</span> <span class="s2">&quot;-|&quot;</span><span class="k">)</span> <span class="k">(</span><span class="n">mask</span> <span class="kr">lsr</span> <span class="mi">1</span><span class="k">)</span> <span class="k">(</span><span class="n">x</span><span class="k">-</span><span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>
        <span class="n">amida</span> <span class="s2">&quot;|&quot;</span> <span class="n">mask</span> <span class="k">(</span><span class="n">n</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">equal</span> <span class="n">arg1</span> <span class="n">arg2</span> <span class="k">=</span> <span class="kr">match</span> <span class="n">arg1</span><span class="k">,</span> <span class="n">arg2</span> <span class="kr">with</span>
        <span class="k">|</span> <span class="k">[],</span> <span class="k">[]</span>            <span class="k">-&gt;</span> <span class="kr">true</span>
        <span class="k">|</span> <span class="n">h1</span> <span class="k">::</span> <span class="n">t1</span><span class="k">,</span> <span class="n">h2</span> <span class="k">::</span> <span class="n">t2</span><span class="k">-&gt;</span> <span class="kr">if</span> <span class="n">h1</span> <span class="k">&lt;&gt;</span> <span class="n">h2</span> <span class="kr">then</span> <span class="kr">false</span> <span class="kr">else</span> <span class="n">equal</span> <span class="n">t1</span> <span class="n">t2</span>
        <span class="k">|</span> <span class="k">_,</span> <span class="k">_</span>              <span class="k">-&gt;</span> <span class="kr">false</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">prt</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="k">[]</span>        <span class="k">-&gt;</span> <span class="n">print_newline</span> <span class="k">()</span>
        <span class="k">|</span> <span class="n">hd</span> <span class="k">::</span> <span class="n">tl</span>  <span class="k">-&gt;</span> <span class="k">(</span><span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;%d &quot;</span> <span class="n">hd</span><span class="k">;</span> <span class="n">prt</span> <span class="n">tl</span><span class="k">)</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="kr">rec</span> <span class="n">prt2</span> <span class="n">n</span> <span class="k">=</span> <span class="kr">function</span>
        <span class="k">|</span> <span class="k">[]</span>       <span class="k">-&gt;</span> <span class="k">()</span>
        <span class="k">|</span> <span class="n">hd</span> <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">prt2</span> <span class="n">n</span> <span class="n">tl</span> <span class="kr">in</span> <span class="n">print_endline</span> <span class="k">(</span><span class="n">drawamida</span> <span class="n">hd</span> <span class="n">n</span><span class="k">)</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="n">start</span> <span class="k">=</span>
        <span class="kr">let</span> <span class="kr">rec</span> <span class="n">seq</span> <span class="n">n</span> <span class="k">=</span> <span class="kr">function</span>
            <span class="k">|</span> <span class="k">[]</span> <span class="k">-&gt;</span> <span class="k">[]</span>
            <span class="k">|</span> <span class="k">_</span>  <span class="k">::</span> <span class="n">tl</span> <span class="k">-&gt;</span> <span class="n">n</span> <span class="k">::</span> <span class="k">(</span><span class="n">seq</span> <span class="k">(</span><span class="n">n</span><span class="k">+</span><span class="mi">1</span><span class="k">)</span> <span class="n">tl</span><span class="k">)</span> <span class="kr">in</span>
        <span class="n">seq</span> <span class="mi">0</span> <span class="n">target</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="n">costfunc</span> <span class="k">(</span><span class="n">c1</span><span class="k">,</span> <span class="n">c2</span><span class="k">)</span> <span class="k">(</span><span class="n">m1</span><span class="k">,</span> <span class="n">m2</span><span class="k">)</span> <span class="k">=</span> <span class="n">c1</span> <span class="k">&gt;</span> <span class="n">m1</span> <span class="k">||</span> <span class="n">c2</span> <span class="k">&gt;</span> <span class="n">m2</span> <span class="kr">in</span>

    <span class="kr">let</span> <span class="n">len</span>         <span class="k">=</span> <span class="n">List</span><span class="k">.</span><span class="n">length</span> <span class="n">target</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">(</span><span class="n">c</span><span class="k">,</span><span class="n">d</span><span class="k">),</span> <span class="n">best</span> <span class="k">=</span> <span class="n">solve</span> <span class="k">(</span><span class="n">comb</span> <span class="n">len</span><span class="k">)</span> <span class="k">(</span><span class="n">equal</span> <span class="n">target</span><span class="k">)</span> <span class="n">costfunc</span> <span class="k">(</span><span class="n">len</span><span class="k">+</span><span class="mi">1</span><span class="k">,</span> <span class="n">len</span> <span class="k">*</span> <span class="n">len</span><span class="k">)</span> <span class="k">(</span><span class="n">start</span><span class="k">,</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="mi">0</span><span class="k">),</span> <span class="k">[])</span> <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">prt</span> <span class="n">start</span>       <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">prt2</span> <span class="n">len</span> <span class="n">best</span>   <span class="kr">in</span>
    <span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">prt</span> <span class="n">target</span>      <span class="kr">in</span>
    <span class="n">Printf</span><span class="k">.</span><span class="n">printf</span> <span class="s2">&quot;Height=%d, Lines=%d</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">c</span> <span class="n">d</span>

<span class="kr">let</span> <span class="k">_</span> <span class="k">=</span> <span class="n">main</span> <span class="k">[</span> <span class="mi">5</span><span class="k">;</span> <span class="mi">4</span><span class="k">;</span> <span class="mi">3</span><span class="k">;</span> <span class="mi">2</span><span class="k">;</span> <span class="mi">1</span><span class="k">;</span> <span class="mi">0</span><span class="k">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4859/addtag/" class="addtag" id="addtag_4859">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4859/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4859/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4859"
  >-</span><span
  class="button yellow"
  id="rating_z_4859"
  >0</span><span 
  class="button green"
  id="rating_p_4859"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4859/">
  reply
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment4923">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4923/">#4923</a>(<script language="JavaScript">print_time(new Date("2007/12/22 01:49 GMT"));</script><noscript>2007/12/22 01:49 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>置換を互換の積に変換する方法で悩んだのですが、バブルソートを応用すれば
できる事に気付きました（考え易くするため逆変換を求めて反転させています）。

バブルソートをアレンジして、隣接する互換が連続で起きないようにしています。
これによって例題では例示よりも１行短い解を出力します。

引数に得たいリストを与えて起動してください。

0 1 2 3 4 5 
| |-| | | | 
|-| |-| |-| 
| |-| |-| | 
|-| |-| |-| 
| |-| |-| | 
3 5 2 4 0 1 </pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">sequence</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">amida</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>
        <span class="n">String</span> <span class="n">seed</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="n">String</span> <span class="n">nums</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
            <span class="n">seed</span> <span class="o">=</span> <span class="n">seed</span> <span class="o">+</span> <span class="s">&quot;| &quot;</span><span class="o">;</span>
            <span class="n">nums</span> <span class="o">=</span> <span class="n">nums</span> <span class="o">+</span> <span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="n">amida</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>
        <span class="kt">boolean</span> <span class="n">change</span><span class="o">;</span>
        <span class="k">do</span> <span class="o">{</span>
            <span class="n">StringBuilder</span> <span class="n">am</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">seed</span><span class="o">);</span>
            <span class="n">change</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">sequence</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">])</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                    <span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sequence</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
                    <span class="n">sequence</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
                    <span class="n">change</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="n">am</span><span class="o">.</span><span class="na">setCharAt</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="sc">&#39;-&#39;</span><span class="o">);</span>
                    <span class="n">i</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">change</span><span class="o">)</span>
                <span class="n">amida</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">am</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">change</span><span class="o">);</span>
        <span class="n">nums</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">nums</span> <span class="o">=</span> <span class="n">nums</span> <span class="o">+</span> <span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">;</span>
        <span class="n">amida</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>
        <span class="n">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">amida</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="n">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">amida</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4923/addtag/" class="addtag" id="addtag_4923">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4923/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4923/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4923"
  >-</span><span
  class="button yellow"
  id="rating_z_4923"
  >0</span><span 
  class="button green"
  id="rating_p_4923"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20081204140540/http://ja.doukaku.org/comment/4923/">
    1
    reply
  </a>

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4923/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4924">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4924/">#4924</a>(<script language="JavaScript">print_time(new Date("2007/12/22 02:20 GMT"));</script><noscript>2007/12/22 02:20 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>逆変換を求めて反転させるのが本質的な操作でないのが気になって、
直接求めるプログラムも作ってみました。

ほとんど同じなのですが、余分な操作がなくなった分だけかえって
直感的になったような気もします。

当然ですが、出力する解は違います。

0 1 2 3 4 5 
| |-| | |-| 
|-| |-| | | 
| |-| |-| | 
|-| |-| |-| 
| |-| |-| | 
3 5 2 4 0 1 
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample2</span> <span class="o">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">sequence</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">String</span> <span class="n">seed</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">order</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">]),</span> <span class="n">i</span><span class="o">);</span>
            <span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="n">seed</span> <span class="o">=</span> <span class="n">seed</span> <span class="o">+</span> <span class="s">&quot;| &quot;</span><span class="o">;</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="kt">boolean</span> <span class="n">change</span><span class="o">;</span>
        <span class="k">do</span> <span class="o">{</span>
            <span class="n">StringBuilder</span> <span class="n">am</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">(</span><span class="n">seed</span><span class="o">);</span>
            <span class="n">change</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">&gt;</span> <span class="n">order</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sequence</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]))</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                    <span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">sequence</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
                    <span class="n">sequence</span><span class="o">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">a</span><span class="o">;</span>
                    <span class="n">change</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="n">am</span><span class="o">.</span><span class="na">setCharAt</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="sc">&#39;-&#39;</span><span class="o">);</span>
                    <span class="n">i</span><span class="o">++;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">change</span><span class="o">)</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">am</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">change</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sequence</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">Integer</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">sequence</span><span class="o">[</span><span class="n">i</span><span class="o">])</span> <span class="o">+</span> <span class="s">&quot; &quot;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4924/addtag/" class="addtag" id="addtag_4924">Tags</a>:
	
	No tags
	&nbsp;

	
      [<a href="/web/20081204140540/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4924/download/">
		download code
      </a>]
	  [<a href="/web/20081204140540/http://ja.doukaku.org/comment/4924/download_html/">
		get code as html
      </a>]<p>
	

  
  <span class="rating">
  Rating<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4924"
  >-</span><span
  class="button yellow"
  id="rating_z_4924"
  >0</span><span 
  class="button green"
  id="rating_p_4924"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4923/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20081204140540/http://ja.doukaku.org/comment/4924/root/"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20081204140540/http://ja.doukaku.org/comment/4924/">
    1
    reply
  </a>

  [<a href="/web/20081204140540/http://ja.doukaku.org/109/reply_to/4924/">
  reply
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4968">
  <p class="banner"><a href="/web/20081204140540/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20081204140540/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20081204140540im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20081204140540/http://ja.doukaku.org/comment/4968/">#4968</a>(<script language="JavaScript">print_time(new Date("2007/12/25 14:17 GMT"));</script><noscript>2007/12/25 14:17 GMT</noscript>)
	
	
	
	[<a href="/web/20081204140540/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">Rating<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自力では解けなかったので、カバレッジ100%目的で
pythonに移植させて頂きました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">args</span><span class="p">):</span>
  <span class="n">order</span> <span class="o">=</span> <span class="p">{}</span>
  <span class="n">sequence</span> <span class="o">=</span> <span class="p">[</span><span class="n">order</span><span class="o">.</span><span class="n">setdefault</span><span class="p">(</span><span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">args</span><span class="p">)]</>




<!--
     FILE ARCHIVED ON 14:05:40 Dec 4, 2008 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:01:19 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
