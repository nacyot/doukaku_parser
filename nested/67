
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
続・ファイル内の重複行削除
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20090429062155cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20090429062155cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20090429062155cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20090429062155/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20090429062155/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20090429062155js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20090429062155js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20090429062155js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20090429062155js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app3.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/67\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "29";
var displayMonth = "Apr";
var displayYear = "2009";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/67/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20090429062155" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20081202044718/http://ja.doukaku.org/67/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="2 Dec 2008"><strong>DEC</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 6:21:55 Apr 29, 2009">APR</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       May
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20090329080243/http://ja.doukaku.org/67/nested/" title="8:02:43 Mar 29, 2009" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 6:21:55 Apr 29, 2009">29</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080406171139/http://ja.doukaku.org/67/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="6 Apr 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 6:21:55 Apr 29, 2009">2009</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2010
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20090429062155*/http://ja.doukaku.org/67/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>7 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 29 Apr 09</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000000_2008:-1:010100000001_2009:3:002100000000_2010:-1:000000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20090429062155/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20090429062155/http://ja.doukaku.org/67/">続・ファイル内の重複行削除</a>
</h2>

    





<div class="comment" id="comment3424">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3424/">#3424</a>(<script language="JavaScript">print_time(new Date("2007/10/17 08:03 GMT"));</script><noscript>2007/10/17 08:03 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>「 <a class="reference" href="/web/20090429062155/http://ja.doukaku.org/66/">ファイル内の重複行削除(後優先)</a> 」の続編です。</p>
<p>1行あたり平均60文字のデータが書き込まれた、巨大なファイルがあるとします。どのくらい巨大かというと、積んでいるメモリの10倍程度の容量があります。このファイルから、同じ内容が書かれている行を取り除くプログラムを作ってください。ただし、同じ内容が書かれている行のうち、最後に出現したものを残すものとします。</p>
<p>このサイズのファイルを丸ごとメモリに読み込もうとしてしまうと、 <a class="reference" href="/web/20090429062155/http://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%A9%E3%83%83%E3%82%B7%E3%83%B3%E3%82%B0">スラッシング - Wikipedia</a> が発生することが予想されます。そこで行単位で読み込もう、というのが前回のお題の趣旨でした。</p>
<p>しかし、与えられたファイルが運悪く「一致する部分のないファイル」である可能性を考えてみましょう。たとえ1行ずつ読んで処理をしたとしても、「重複するかどうかの判定」のために前の行をまるごとメモリに取っておいたのでは、最終的にファイルを丸ごとメモリに乗せることになってしまいます。</p>
<p>こういうデータが入力されうる状況の場合にどう書くか、というお題です。前回のお題の条件3「ファイル全体を一度にメモリに読み込んで処理しないこと」を「たとえすべての行が異なるようなデータであっても、メモリの消費量をファイルサイズのおよそ10%程度に抑えること」と読み替えてください。</p>
<p>
追記：「メモリの10倍」はさすがに条件として厳しすぎました。「ファイルのサイズは4ギガバイト未満であり、メモリの消費量をファイルサイズの半分以下に抑えること」と読み替えてください。半分以下に抑えられているのならば題意は満たすものとします。もちろん、頑張ってもっと少ないメモリで動くようにするのもアリです。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3424/addtag/" class="addtag" id="addtag_3424">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3424"
  >-</span><span
  class="button yellow"
  id="rating_z_3424"
  >0</span><span 
  class="button green"
  id="rating_p_3424"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3424/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20090429062155/http://ja.doukaku.org/67/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20090429062155/http://ja.doukaku.org/67/flatten/">フラット表示</a> 
<a href="/web/20090429062155/http://ja.doukaku.org/67/">非表示</a> 


  

  
    





<div class="comment" id="comment3427">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/">#3427</a>(<script language="JavaScript">print_time(new Date("2007/10/17 14:57 GMT"));</script><noscript>2007/10/17 14:57 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffcfcf;">-3/3=-1.00</span></span><a href="/web/20090429062155/http://ja.doukaku.org/67/nested/#comment3427" onClick="$('#comment3427 .comment_content').show()">[open]</a>
  </p>
  <div class="comment_content" style="display: none">
	<div class="comment_body">
	  <pre class='compact'>python付属ののDBパッケージを使っています。
実際にどれだけのサイズが扱えるのか未確認なので
本当にこれでうまく行くかどうかは分かりません。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">dumbdbm</span><span class="o">,</span> <span class="nn">md5</span>

<span class="n">db</span> <span class="o">=</span> <span class="n">dumbdbm</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s">&#39;tmp&#39;</span><span class="p">)</span>
<span class="n">fp</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
  <span class="n">k</span> <span class="o">=</span> <span class="n">md5</span><span class="o">.</span><span class="n">md5</span><span class="p">(</span><span class="n">s</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
  <span class="k">if</span> <span class="n">db</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="n">k</span><span class="p">):</span>
    <span class="n">db</span><span class="p">[</span><span class="n">db</span><span class="p">[</span><span class="n">k</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;0&#39;</span>
  <span class="n">db</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="n">db</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span> <span class="o">=</span> <span class="s">&#39;1&#39;</span>
  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">fp</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
  <span class="k">if</span> <span class="n">db</span><span class="p">[</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)]</span> <span class="o">==</span> <span class="s">&#39;1&#39;</span><span class="p">:</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;tmp.dat&#39;</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;tmp.dir&#39;</span><span class="p">)</span>
<span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;tmp.bak&#39;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/addtag/" class="addtag" id="addtag_3427">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffcfcf;"
  >-3/3=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3427"
  >-</span><span
  class="button yellow"
  id="rating_z_3427"
  >0</span><span 
  class="button green"
  id="rating_p_3427"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/">
    3
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3427/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3429">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/">#3429</a>(<script language="JavaScript">print_time(new Date("2007/10/17 15:38 GMT"));</script><noscript>2007/10/17 15:38 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>よかった、ちゃんと投稿できたんだ

さすがに「メモリの10倍の量」は
条件として厳しすぎたかなと後悔しています。
まず4ギガを超えるファイルを扱えるのかとか…

というわけで、少し条件をゆるめたいと思います。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/addtag/" class="addtag" id="addtag_3429">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3429"
  >-</span><span
  class="button yellow"
  id="rating_z_3429"
  >0</span><span 
  class="button green"
  id="rating_p_3429"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/">
    3
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3429/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3430">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3430/">#3430</a>(<script language="JavaScript">print_time(new Date("2007/10/17 23:10 GMT"));</script><noscript>2007/10/17 23:10 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>題意から離れてしまう突っ込みですが…
大きいファイルを扱うのも大変ですが小さいファイルを扱うのも大変そうです
おそらく数バイトのファイルで追加条件をクリアするのは不可能でしょう</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3430/addtag/" class="addtag" id="addtag_3430">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3430"
  >-</span><span
  class="button yellow"
  id="rating_z_3430"
  >0</span><span 
  class="button green"
  id="rating_p_3430"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3430/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3430/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3430/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3431">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3431/">#3431</a>(<script language="JavaScript">print_time(new Date("2007/10/18 00:57 GMT"));</script><noscript>2007/10/18 00:57 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  なるほど。ファイルサイズが小さい場合には処理系が食うメモリだけで制限を超えてしまう場合があるわけですね…。題意は1行あたり何バイトあれば重複行の削除ができるかという点なのでそういう定数オーダーの項は無視してもいいことにしましょうか。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3431/addtag/" class="addtag" id="addtag_3431">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3431"
  >-</span><span
  class="button yellow"
  id="rating_z_3431"
  >0</span><span 
  class="button green"
  id="rating_p_3431"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3430/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3431/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3431/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3431/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3440">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3440/">#3440</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:27 GMT"));</script><noscript>2007/10/18 03:27 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>&gt; 題意は1行あたり何バイトあれば重複行の削除ができるか
ということは、ハッシュに任意の行へのオフセット(ファイルサイズが4GB超なので仮に6バイト)
だけを置いて一行60バイトなので必要なサイズが行あたり6/60で
使用メモリがファイルサイズの10分の1になるというあたりが、想定していた回答なのかな。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3440/addtag/" class="addtag" id="addtag_3440">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3440"
  >-</span><span
  class="button yellow"
  id="rating_z_3440"
  >0</span><span 
  class="button green"
  id="rating_p_3440"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3431/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3440/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3440/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3440/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3446">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3446/">#3446</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:58 GMT"));</script><noscript>2007/10/18 03:58 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>そういうことは、動くコードで語ってくれと言うのがここの主旨なんじゃないですかね。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3446/addtag/" class="addtag" id="addtag_3446">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3446"
  >-</span><span
  class="button yellow"
  id="rating_z_3446"
  >0</span><span 
  class="button green"
  id="rating_p_3446"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3440/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3446/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3446/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3449">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3449/">#3449</a>(<script language="JavaScript">print_time(new Date("2007/10/18 04:18 GMT"));</script><noscript>2007/10/18 04:18 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>まぁ、僕が出題時に考えていたのはまさにその通りの方法です。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3449/addtag/" class="addtag" id="addtag_3449">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3449"
  >-</span><span
  class="button yellow"
  id="rating_z_3449"
  >0</span><span 
  class="button green"
  id="rating_p_3449"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3440/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3449/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3449/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3432">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3432/">#3432</a>(<script language="JavaScript">print_time(new Date("2007/10/18 01:30 GMT"));</script><noscript>2007/10/18 01:30 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>これ、ファイルを何回でもスキャンしていいとすれば、だいぶ楽になると思うんですがどうでしょう？
ファイルを何回もスキャンするのはスラッシングとは違う気がするんだけど、どうなんだろうなぁ。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3432/addtag/" class="addtag" id="addtag_3432">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3432"
  >-</span><span
  class="button yellow"
  id="rating_z_3432"
  >0</span><span 
  class="button green"
  id="rating_p_3432"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3432/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3432/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3432/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3434">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3434/">#3434</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:00 GMT"));</script><noscript>2007/10/18 03:00 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>もちろんそれは禁止されていません。
というより、「ファイルを読むのは1回だけ」とか
「別のファイルに書き出したりしてはいけない」とか
条件をつけてしまうと解けなくなるのではないかと…
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3434/addtag/" class="addtag" id="addtag_3434">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3434"
  >-</span><span
  class="button yellow"
  id="rating_z_3434"
  >0</span><span 
  class="button green"
  id="rating_p_3434"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3432/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3434/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3434/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3455">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3455/">#3455</a>(<script language="JavaScript">print_time(new Date("2007/10/18 09:10 GMT"));</script><noscript>2007/10/18 09:10 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>この問題は「ファイルの書き換え」ではなく、「標準出力に表示」でもOKですか？</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3455/addtag/" class="addtag" id="addtag_3455">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3455"
  >-</span><span
  class="button yellow"
  id="rating_z_3455"
  >0</span><span 
  class="button green"
  id="rating_p_3455"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3429/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3455/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3455/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3442">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3442/">#3442</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:37 GMT"));</script><noscript>2007/10/18 03:37 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>6メガ10万行のファイルで実行してみましたが
メモリ使用量が最大時25メガほど、
100メガほどのテンポラリファイルが作成され、
時間は24秒ほどでした。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3442/addtag/" class="addtag" id="addtag_3442">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3442"
  >-</span><span
  class="button yellow"
  id="rating_z_3442"
  >0</span><span 
  class="button green"
  id="rating_p_3442"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3442/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3442/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3442/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3447">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3447/">#3447</a>(<script language="JavaScript">print_time(new Date("2007/10/18 04:09 GMT"));</script><noscript>2007/10/18 04:09 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>あとこのコードだとMD5が衝突したときのことが考慮されてないと思います。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3447/addtag/" class="addtag" id="addtag_3447">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3447"
  >-</span><span
  class="button yellow"
  id="rating_z_3447"
  >0</span><span 
  class="button green"
  id="rating_p_3447"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3442/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3447/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3447/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3447/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3459">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3459/">#3459</a>(<script language="JavaScript">print_time(new Date("2007/10/18 13:46 GMT"));</script><noscript>2007/10/18 13:46 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffafaf;">-5/5=-1.00</span></span><a href="/web/20090429062155/http://ja.doukaku.org/67/nested/#comment3459" onClick="$('#comment3459 .comment_content').show()">[open]</a>
  </p>
  <div class="comment_content" style="display: none">
	<div class="comment_body">
	  <pre class='compact'>#3427を投稿したものです。

今や同じmd5値を持つデータが生成可能らしいですが
逆に言えば敢えてそういうデータを処理するのでもない限り
特に問題ない、というわけには行きませんか。

もともとこの手のダイジェスト関数は一意とみなせる
と言うところに価値があるわけですから。

md5には原理的な脆弱性が見つかっていますので、
実用的なプログラムでは使わない方がいいでしょう、
とだけは言い添えておきます。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3459/addtag/" class="addtag" id="addtag_3459">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffafaf;"
  >-5/5=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3459"
  >-</span><span
  class="button yellow"
  id="rating_z_3459"
  >0</span><span 
  class="button green"
  id="rating_p_3459"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3447/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3459/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3459/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3459/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3463">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3463/">#3463</a>(<script language="JavaScript">print_time(new Date("2007/10/18 23:33 GMT"));</script><noscript>2007/10/18 23:33 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #8fff8f;">7/7=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>&gt; 今や同じmd5値を持つデータが生成可能らしいですが
&gt; 逆に言えば敢えてそういうデータを処理するのでもない限り
&gt; 特に問題ない、というわけには行きませんか。
&gt; もともとこの手のダイジェスト関数は一意とみなせる
&gt; と言うところに価値があるわけですから。

目的によります。そして、今回のお題に対して衝突を無視するのはどっちかというとまずいと思います。
false positiveがごく少数生じても良い場合と、ごくわずかでもその可能性があったら
(それ単独では)使えない場合とがあるわけですよ。

(まあ、お題の元ネタがヒストリファイルの整理ってことで、
打ったはずのコマンドが出現しない確率がわずかにあっても
それほど困らないだろう、という議論は出来ると思いますが。
一般的に「一意とみなせるから良いはずだ」という議論は乱暴だと思います)

&gt; md5には原理的な脆弱性が見つかっていますので、
&gt; 実用的なプログラムでは使わない方がいいでしょう、
&gt; とだけは言い添えておきます。

目的によります。そして、今回のお題のような問題にmd5を使うのは、
衝突へのフォローさえ入れれば、実用的なプログラムに使っても*全く*問題ありません。
(もっとも、今回の問題の場合もっとナイーブなハッシュ関数で良いと思いますが)

「脆弱性」とか「一意とみなせる」とかいう話は、それにくっついてる文脈があるんですよ。
文脈を無視して言葉だけ取り出して議論するのは無意味です。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3463/addtag/" class="addtag" id="addtag_3463">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #8fff8f;"
  >7/7=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3463"
  >-</span><span
  class="button yellow"
  id="rating_z_3463"
  >0</span><span 
  class="button green"
  id="rating_p_3463"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3459/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3463/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3463/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3463/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3470">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3470/">#3470</a>(<script language="JavaScript">print_time(new Date("2007/10/19 13:20 GMT"));</script><noscript>2007/10/19 13:20 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffcfcf;">-3/3=-1.00</span></span><a href="/web/20090429062155/http://ja.doukaku.org/67/nested/#comment3470" onClick="$('#comment3470 .comment_content').show()">[open]</a>
  </p>
  <div class="comment_content" style="display: none">
	<div class="comment_body">
	  <pre class='compact'>専門的な知識は持ち合わせていませんのこれ以上の議論はしませんが
私が知りたいのは、
「このコードにおいて既知の手法を使った人為的な衝突以外の衝突を考慮する必要があるのか」
ただそれだけです。

必要がないのなら、このコードにおいて自前のデータを処理する場合に限れば
衝突を考慮しなくて構わないはずだし、必要があるのならやっぱりmd5は捨てだな、と言うだけです。

他の人がコードを利用したいならその人がどうにかすればいいわけで私は関知しません。

これで何か問題ありますか？
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3470/addtag/" class="addtag" id="addtag_3470">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffcfcf;"
  >-3/3=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3470"
  >-</span><span
  class="button yellow"
  id="rating_z_3470"
  >0</span><span 
  class="button green"
  id="rating_p_3470"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3463/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3470/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3470/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3470/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3474">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3474/">#3474</a>(<script language="JavaScript">print_time(new Date("2007/10/19 14:47 GMT"));</script><noscript>2007/10/19 14:47 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>「衝突する可能性がある」という問題はmd5に起因するものではなく
一般的にハッシュ関数すべてにあるものなので
md5で意図的に衝突を起こさせる方法が見つかっているかどうかとは
まったく無関係じゃないですか？

今回の件に関してmd5に非はないですよね？

アルゴリズムがmd5であれSHA-1であれ、
今回のような使い方をすれば
「きわめて低い確率で期待と違う挙動をする」
とうバグを作り込むことになってしまいます。
「これはとても危険なコーディングスタイルだ」
というのがあなたにマイナス評価をつけている人たちの言いたいことなのでは。

</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3474/addtag/" class="addtag" id="addtag_3474">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3474"
  >-</span><span
  class="button yellow"
  id="rating_z_3474"
  >0</span><span 
  class="button green"
  id="rating_p_3474"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3470/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3474/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3474/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3475">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3475/">#3475</a>(<script language="JavaScript">print_time(new Date("2007/10/19 23:21 GMT"));</script><noscript>2007/10/19 23:21 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>にしおさんがフォローしてるけど。
</p>
<p>&gt;「このコードにおいて既知の手法を使った人為的な衝突以外の衝突を考慮する必要があるのか」
</p>
<p>だから目的によります。
   ちなみに、セキュリティ用途(一方向関数としてハッシュを使っている場合)でなければ、人為的な衝突か偶然な衝突かは関係ないことの方が
   多いと思います。今回の問題は情報圧縮のためにハッシュを使ってるので、原因が何であれ衝突は衝突ですね。
</p>
<p>今回のようなお題の場合、大抵のプログラマは経験的に衝突しちゃまずいと
   考えると思うんですが、その判断が間違ってる可能性もあります。
   ほんとうに衝突を考慮する必要があるのかどうか知りたければ、
   「今回の問題の要件において、衝突が生じる可能性はxx%であり、コマンドのヒストリファイルという前提で一日yy個のコマンドを叩いているとすれば、衝突が起きるのはzz年に一度の確率である。そんなことを気にするよりもディスクのクラッシュを心配した方がよい。よって今回のお題で衝突を考慮する必要はない。」
   というような定量的な議論をしてみると良いでしょう。
   みんなそれが面倒だから安全側に倒れてるだけで、実は意外な結論になるかもしれません。
   私も見てみたいです。そういう議論。
</p>
<p>&gt; これで何か問題ありますか？
</p>
<p>これも目的によります:-)
   あなたが趣味で自分で使うコードを書いているだけで、
   プログラミングの面白さについてもこれ以上踏み込む
   つもりがないのなら、何も問題ないと思います。
</p>
<p>そうでないなら、一度「ハッシュ」というものについて
   調べてみるといいですよ。
   深追いするとすごく面白いです。
</p>



	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3475/addtag/" class="addtag" id="addtag_3475">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3475"
  >-</span><span
  class="button yellow"
  id="rating_z_3475"
  >0</span><span 
  class="button green"
  id="rating_p_3475"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3470/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3475/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3475/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3475/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3476">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3476/">#3476</a>(<script language="JavaScript">print_time(new Date("2007/10/20 00:05 GMT"));</script><noscript>2007/10/20 00:05 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>などとぐだぐだ書いてる時間があればやってみればいいのか。
</p>
<p>md5のダイジェスト結果は128bit。4Gのヒストリファイルに一行64byteとして2^26行。全てがユニーク行だったとして、衝突が生じる確率は 1 - ((2^128 * (2^128-1) * (2^128-2) * ... * (2^128-2^26+1))/((2^128)^(2^26))、でいいのかな。
</p>
<p>これを 1 - ((2^128-2^25)/(2^128))^(2^26) で近似するのってまずいかな? あんまり深く考えてないけど。もし良ければさらにx&lt;&lt;1のとき(1-x)^n ≒ 1-nx だから 1 - (1 - 2^(-103))^(2^26) → 1 - (1 - 2^(-103)*(2^26)) → 2^-77 ≒ 7e-24。たぶんオーダーはそう外してないと思うけど…
</p>
<p>一日にどのくらいコマンドを打つかなあ。だいたい1000くらい＝2^10として2^26行のヒストリをためるのに2^16日ってことは180年くらいか。結構かかるな。仮にその5倍コマンドをタイプするスーパーハッカーだったとしても、キャリア36年の間に7e-24の確率で打ったはずのコマンドが出てこないという事例に合うことになると。7e24というとコップ一杯の水の中の水分子の数くらい?
</p>
<p>コマンドヒストリに使うという前提をおけば、md5で衝突の心配をする必要は全く無いと言えるでしょうね。というわけで匿名さん、安心してお使いください。
</p>



	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3476/addtag/" class="addtag" id="addtag_3476">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3476"
  >-</span><span
  class="button yellow"
  id="rating_z_3476"
  >0</span><span 
  class="button green"
  id="rating_p_3476"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3475/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3476/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3476/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3477">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3477/">#3477</a>(<script language="JavaScript">print_time(new Date("2007/10/20 01:45 GMT"));</script><noscript>2007/10/20 01:45 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>冷静なつもりでしたがやはり興奮していたようです。
一晩寝て落ち着きを取り戻しました。

結局のところ以前の私の発言は、素人的な見積りの大雑把さに
過ぎなかったことを認識しました。

コメントいただいた方々に余計な手間をかけさせたことをお詫びするとともに
有用な示唆を与えてくださったことに感謝いたします。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3477/addtag/" class="addtag" id="addtag_3477">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3477"
  >-</span><span
  class="button yellow"
  id="rating_z_3477"
  >0</span><span 
  class="button green"
  id="rating_p_3477"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3475/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3477/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3477/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3477/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment4529">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/4529/">#4529</a>(<script language="JavaScript">print_time(new Date("2007/12/01 01:34 GMT"));</script><noscript>2007/12/01 01:34 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  古い話への補足ですが、「MD5を使ってはいけない具体例」としておもしろい記事を見かけたので紹介しておきます。<br/><br/>この記事は、「来年の米大統領選の結果を正しく予測したPDFドキュメントを作成した。」と主張し、正当性を証明するためドキュメントのMD5ハッシュを公開しています。<br/><br/>もちろん種明かしもその下に書いてあって、全く同じMD5ハッシュ値を持ち、見かけ上候補者名だけが異なる12のpdfファイルを作ったということです。PlayStation&nbsp;3とクアッドコアPCで2日でできたそうで。<br/><br/>MD5&nbsp;collisionを起こすpdf文書のペアを構成することなどは数年前から示されていますが、ここではより進歩した方法を使ったってことらしいです。<br/>
	</div>
	
	<p class="link">
	  参考: <a href="/web/20090429062155/http://www.win.tue.nl/hashclash/Nostradamus/"> Predicting the winner of the 2008 US Presidential Elections using a Sony PlayStation 3</a>
	</p>  
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/4529/addtag/" class="addtag" id="addtag_4529">タグ</a>:
	
    
    <a href="/web/20090429062155/http://ja.doukaku.org/tag/%E5%8F%82%E8%80%83%E3%81%AB%E3%81%AA%E3%82%8B/">参考になる</a>
    
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4529"
  >-</span><span
  class="button yellow"
  id="rating_z_4529"
  >0</span><span 
  class="button green"
  id="rating_p_4529"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3477/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/4529/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/4529/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3482">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3482/">#3482</a>(<script language="JavaScript">print_time(new Date("2007/10/20 11:19 GMT"));</script><noscript>2007/10/20 11:19 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>と言うわけで、改訂版を投稿させていただきます。

使用メモリ量は非常に少なく、psコマンドでは9.2MBと出ます。

16MBのテストデータが問題なく完走したので、思い切って512MBのデータを
処理してみましたが、数時間たった今現在も終わる気配がありません。

残念ながらこのコードでは、大きなデータを許容できる時間内に処理することは
無理なようです。

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">os</span><span class="o">,</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">bsddb</span>

<span class="n">db</span> <span class="o">=</span> <span class="n">bsddb</span><span class="o">.</span><span class="n">hashopen</span><span class="p">(</span><span class="s">&#39;tmp.dat&#39;</span><span class="p">)</span>
<span class="n">fp</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="s">&#39;r&#39;</span><span class="p">)</span>
<span class="n">wfp</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="s">&#39;w&#39;</span><span class="p">)</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
  <span class="n">db</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="n">fp</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">fp</span><span class="p">:</span>
  <span class="k">if</span> <span class="n">db</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">==</span> <span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
    <span class="n">wfp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">fp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">wfp</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
<span class="n">db</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>

<span class="n">os</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s">&#39;tmp.dat&#39;</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3482/addtag/" class="addtag" id="addtag_3482">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3482/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3482/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3482"
  >-</span><span
  class="button yellow"
  id="rating_z_3482"
  >0</span><span 
  class="button green"
  id="rating_p_3482"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3427/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3482/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3482/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  

  

  
    





<div class="comment" id="comment3433">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3433/">#3433</a>(<script language="JavaScript">print_time(new Date("2007/10/18 02:47 GMT"));</script><noscript>2007/10/18 02:47 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>この問題では、「動くはず」と「動いた」は全然違う危険があります。
具体的な検証用のファイル（あるいはその作り方）を示して、
「実際に動作したものを投稿する」というルールが必要なのではないでしょうか。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3433/addtag/" class="addtag" id="addtag_3433">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3433"
  >-</span><span
  class="button yellow"
  id="rating_z_3433"
  >0</span><span 
  class="button green"
  id="rating_p_3433"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3433/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3433/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3435">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3435/">#3435</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:08 GMT"));</script><noscript>2007/10/18 03:08 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  「動くつもりで投稿したけど動かない」という事態は今までにも何度も起きましたが、「動かないコードを投稿してそれが発覚するとマイナス評価を受ける」「動かないことを指摘した人はプラス評価を受ける」という形でうまく回っているように思えます。<br/><br/>ルールを増やして縛るよりも、行動の結果に対する評価でフィードバックする方がいいのではないかと思っています。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3435/addtag/" class="addtag" id="addtag_3435">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3435"
  >-</span><span
  class="button yellow"
  id="rating_z_3435"
  >0</span><span 
  class="button green"
  id="rating_p_3435"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3433/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3435/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3435/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3435/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3464">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3464/">#3464</a>(<script language="JavaScript">print_time(new Date("2007/10/19 03:05 GMT"));</script><noscript>2007/10/19 03:05 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>参加者の総意で評価が形成されていく
というのはいいアイディアですね。

でも、今回は、4G程度が目標だったはずが、
参加者の総意で60M程度に落ち着きそうで、
ちょっと残念な気がします。

まあ、これからに期待ですね。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3464/addtag/" class="addtag" id="addtag_3464">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3464"
  >-</span><span
  class="button yellow"
  id="rating_z_3464"
  >0</span><span 
  class="button green"
  id="rating_p_3464"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3435/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3464/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3464/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3464/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3465">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3465/">#3465</a>(<script language="JavaScript">print_time(new Date("2007/10/19 09:16 GMT"));</script><noscript>2007/10/19 09:16 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>4Gでも問題なく動くコードを投稿いただければ
少なくとも僕はプラス評価をつけますよ。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3465/addtag/" class="addtag" id="addtag_3465">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3465"
  >-</span><span
  class="button yellow"
  id="rating_z_3465"
  >0</span><span 
  class="button green"
  id="rating_p_3465"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3464/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3465/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3465/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3471">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3471/">#3471</a>(<script language="JavaScript">print_time(new Date("2007/10/19 14:18 GMT"));</script><noscript>2007/10/19 14:18 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>個人的思うのは。
別に性能要件があるわけではないので、
結果を見て4G程度でも耐えられるという根拠になれば
十分ではないかなーなんて思います。

そういった点で言うとコメントで
どのくらいのペースで使用メモリが増えていくのとか
あると良かったのかもしれませんね。
# めんどくさいからきっと僕もしないのだろうけど(笑</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3471/addtag/" class="addtag" id="addtag_3471">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3471"
  >-</span><span
  class="button yellow"
  id="rating_z_3471"
  >0</span><span 
  class="button green"
  id="rating_p_3471"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3464/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3471/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3471/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


  

  

  

  
    





<div class="comment" id="comment3439">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/">#3439</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:17 GMT"));</script><noscript>2007/10/18 03:17 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>バッファは1行です。
頭から1行ずつ取り出して、
それ以降の行と比べ、同じ行が無ければ出力します。
注目する行の移動には、seekを使ってます。
計算量の事は聞かないで下さい。
; #3437の事は無かったことにして下さい。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nb">call-with-input-file </span><span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)</span>
    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">port</span><span class="p">)</span>
      <span class="p">(</span><span class="k">let </span><span class="nv">loop</span> <span class="p">((</span><span class="nf">next</span> <span class="mi">0</span><span class="p">))</span>
        <span class="p">(</span><span class="nf">port-seek</span> <span class="nv">port</span> <span class="nv">next</span><span class="p">)</span>
        <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">buf</span> <span class="p">(</span><span class="nf">read-line</span> <span class="nv">port</span><span class="p">))</span>
              <span class="p">(</span><span class="nf">next</span> <span class="p">(</span><span class="nf">port-tell</span> <span class="nv">port</span><span class="p">)))</span>
          <span class="p">(</span><span class="nf">unless</span> <span class="p">(</span><span class="nb">eof-object? </span><span class="nv">buf</span><span class="p">)</span>
            <span class="p">(</span><span class="k">let </span><span class="nv">loop1</span> <span class="p">()</span>
              <span class="p">(</span><span class="nf">let1</span> <span class="nv">bufn</span> <span class="p">(</span><span class="nf">read-line</span> <span class="nv">port</span><span class="p">)</span>
                <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">eof-object? </span><span class="nv">bufn</span><span class="p">)</span> <span class="p">(</span><span class="nf">print</span> <span class="nv">buf</span><span class="p">))</span>
                      <span class="p">((</span><span class="nb">not </span><span class="p">(</span><span class="nb">string=? </span><span class="nv">bufn</span> <span class="nv">buf</span><span class="p">))</span> <span class="p">(</span><span class="nf">loop1</span><span class="p">)))))</span>
            <span class="p">(</span><span class="nf">loop</span> <span class="nv">next</span><span class="p">)))))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/addtag/" class="addtag" id="addtag_3439">タグ</a>:
	
    
    <a href="/web/20090429062155/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3439"
  >-</span><span
  class="button yellow"
  id="rating_z_3439"
  >0</span><span 
  class="button green"
  id="rating_p_3439"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3439/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3495">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3495/">#3495</a>(<script language="JavaScript">print_time(new Date("2007/10/22 08:50 GMT"));</script><noscript>2007/10/22 08:50 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>60文字×10万行6Mバイトのファイルは149分
〃×1万行 610Kのファイルは、1.5分。
でした。

n行として、計算オーダーはn!なので、
10万!/1万!は100で丁度100倍ぐらいで、
つまらないぐらいの計算通りです。
ま、実用的ではないですな。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3495/addtag/" class="addtag" id="addtag_3495">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3495"
  >-</span><span
  class="button yellow"
  id="rating_z_3495"
  >0</span><span 
  class="button green"
  id="rating_p_3495"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3495/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3495/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3495/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3497">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3497/">#3497</a>(<script language="JavaScript">print_time(new Date("2007/10/22 08:53 GMT"));</script><noscript>2007/10/22 08:53 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>このエントリ間違いです。
消して下さい。すみません。orz</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3497/addtag/" class="addtag" id="addtag_3497">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3497"
  >-</span><span
  class="button yellow"
  id="rating_z_3497"
  >0</span><span 
  class="button green"
  id="rating_p_3497"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3495/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3497/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3497/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3496">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3496/">#3496</a>(<script language="JavaScript">print_time(new Date("2007/10/22 08:53 GMT"));</script><noscript>2007/10/22 08:53 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>60文字×10万行6Mバイトのファイルは149分
〃×1万行 610Kのファイルは、1.5分。
でした。

n行として、計算オーダーはSnなので、
S10万/S1万は100で丁度100倍ぐらいで、
つまらないぐらいの計算通りです。
ま、実用的ではないですな。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3496/addtag/" class="addtag" id="addtag_3496">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3496"
  >-</span><span
  class="button yellow"
  id="rating_z_3496"
  >0</span><span 
  class="button green"
  id="rating_p_3496"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3439/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3496/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3496/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment3441">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3441/">#3441</a>(<script language="JavaScript">print_time(new Date("2007/10/18 03:31 GMT"));</script><noscript>2007/10/18 03:31 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>全行一回なめて行頭n文字が同じだった行の位置を記録します。
んで巻き戻して読んでいって、さっき記録した疑わしい行がある場合、実際見に行って比較、表示か非表示を決めます。

60メガ100万行のファイルでメモリ30メガ、44秒くらいでした。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">fetch</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">head</span><span class="p">)</span>
  <span class="n">cur</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">pos</span>
  <span class="n">fin</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">head</span>
  <span class="n">s</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">gets</span>
  <span class="n">fin</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">cur</span>
  <span class="n">s</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">line_with_headpos</span><span class="p">(</span><span class="n">fin</span><span class="p">)</span>
  <span class="n">head</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">pos</span>
  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">gets</span>
    <span class="k">yield</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">head</span><span class="p">)</span>
    <span class="n">head</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">pos</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">zoku</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
  <span class="nb">open</span><span class="p">(</span><span class="n">fn</span><span class="p">){</span><span class="o">|</span><span class="n">fin</span><span class="o">|</span>
    <span class="n">h</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="n">line_with_headpos</span><span class="p">(</span><span class="n">fin</span><span class="p">){</span><span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">head</span><span class="o">|</span>
      <span class="p">(</span><span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="o">]]</span> <span class="o">||=</span> <span class="o">[]</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">head</span>
    <span class="p">}</span>

    <span class="n">fin</span><span class="o">.</span><span class="n">rewind</span>

    <span class="n">line_with_headpos</span><span class="p">(</span><span class="n">fin</span><span class="p">){</span><span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">head</span><span class="o">|</span>
      <span class="n">flag</span> <span class="o">=</span> <span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="n">n</span><span class="o">]].</span><span class="n">any?</span><span class="p">{</span><span class="o">|</span><span class="n">ps</span><span class="o">|</span>
        <span class="n">head</span> <span class="o">&lt;</span> <span class="n">ps</span> <span class="o">&amp;&amp;</span> <span class="n">line</span> <span class="o">==</span> <span class="n">fetch</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">ps</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="nb">print</span> <span class="n">line</span> <span class="k">unless</span> <span class="n">flag</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="n">zoku</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3441/addtag/" class="addtag" id="addtag_3441">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3441/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3441/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3441"
  >-</span><span
  class="button yellow"
  id="rating_z_3441"
  >0</span><span 
  class="button green"
  id="rating_p_3441"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3441/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3441/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3456">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/466/" target="_top">とーん</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3456/">#3456</a>(<script language="JavaScript">print_time(new Date("2007/10/18 09:13 GMT"));</script><noscript>2007/10/18 09:13 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>構想は同じですが、なんかすっきりしてないなぁ。
line_with_headposを拝借させていただきました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">line_with_headpos</span><span class="p">(</span><span class="n">fin</span><span class="p">)</span>
  <span class="n">head</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">pos</span>
  <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">gets</span>
    <span class="k">yield</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">head</span><span class="p">)</span>
    <span class="n">head</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">pos</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">deldup</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
  <span class="nb">require</span> <span class="s1">&#39;digest/md5&#39;</span>
  
  <span class="n">buf</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span>
  <span class="nb">open</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="s1">&#39;r&#39;</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">io</span><span class="o">|</span>
    
    <span class="n">line_with_headpos</span><span class="p">(</span><span class="n">io</span><span class="p">){</span><span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">head</span><span class="o">|</span>
      <span class="p">(</span><span class="n">buf</span><span class="o">[</span><span class="no">Digest</span><span class="o">::</span><span class="no">MD5</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="n">line</span><span class="p">)</span><span class="o">]</span> <span class="o">||=</span> <span class="o">[]</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">head</span>
    <span class="p">}</span>
    
    <span class="n">buf</span><span class="o">.</span><span class="n">each_value</span> <span class="p">{</span><span class="o">|</span><span class="n">val</span><span class="o">|</span>
      <span class="mi">0</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">val</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
        <span class="n">io</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">i</span>
        <span class="n">idat</span> <span class="o">=</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
        <span class="n">i</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="n">val</span><span class="o">.</span><span class="n">size</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">j</span><span class="o">|</span>
          <span class="n">io</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">j</span>
          <span class="k">if</span> <span class="n">idat</span> <span class="o">==</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
            <span class="n">val</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
            <span class="k">break</span>
          <span class="k">end</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">buf</span><span class="o">.</span><span class="n">values</span><span class="o">.</span><span class="n">flatten</span><span class="o">.</span><span class="n">select</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">i</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="p">}</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">io</span><span class="o">.</span><span class="n">pos</span> <span class="o">=</span> <span class="n">i</span>
      <span class="nb">print</span> <span class="n">io</span><span class="o">.</span><span class="n">gets</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="n">deldup</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3456/addtag/" class="addtag" id="addtag_3456">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3456/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3456/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3456"
  >-</span><span
  class="button yellow"
  id="rating_z_3456"
  >0</span><span 
  class="button green"
  id="rating_p_3456"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3441/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3456/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3456/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  

  

  
    





<div class="comment" id="comment3452">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/437/" target="_top">mamamoto</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3452/">#3452</a>(<script language="JavaScript">print_time(new Date("2007/10/18 07:26 GMT"));</script><noscript>2007/10/18 07:26 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>自分のRubyのもそうですが一行のみファイルには負ける、
ということでバッファ一文字で。
がんがんseekします。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;fcntl.h&gt;</span>
<span class="cp">#include &lt;sys/types.h&gt;</span>
<span class="cp">#include &lt;unistd.h&gt;</span>

<span class="kt">char</span> <span class="n">same</span><span class="p">(</span><span class="kt">int</span> <span class="n">fin</span><span class="p">,</span> <span class="n">off_t</span> <span class="n">a</span><span class="p">,</span> <span class="n">off_t</span> <span class="n">b</span><span class="p">){</span>
    <span class="kt">char</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">y</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">char</span> <span class="n">ret</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">){</span>
        <span class="n">lseek</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">a</span><span class="o">++</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

        <span class="n">lseek</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">b</span><span class="o">++</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
        <span class="n">ret</span> <span class="o">+=</span> <span class="n">read</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="n">y</span><span class="p">[</span><span class="mi">0</span><span class="p">]){</span>
            <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;\n&#39;</span><span class="p">){</span>
            <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">off_t</span> <span class="n">next_line</span><span class="p">(</span><span class="kt">int</span> <span class="n">fin</span><span class="p">,</span> <span class="n">off_t</span> <span class="n">a</span><span class="p">){</span>
    <span class="kt">char</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">char</span> <span class="n">ret</span><span class="p">;</span>

    <span class="n">lseek</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span> <span class="o">&amp;&amp;</span> <span class="n">ret</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">lseek</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">print</span><span class="p">(</span><span class="kt">int</span> <span class="n">fin</span><span class="p">,</span> <span class="n">off_t</span> <span class="n">a</span><span class="p">){</span>
    <span class="kt">char</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span>
    <span class="kt">char</span> <span class="n">ret</span><span class="p">;</span>

    <span class="n">lseek</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>

        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%c&quot;</span><span class="p">,</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="n">zoku</span><span class="p">(</span><span class="kt">int</span> <span class="n">fin</span><span class="p">){</span>
    <span class="n">off_t</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>

    <span class="k">do</span><span class="p">{</span>
        <span class="kt">char</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

        <span class="n">lseek</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">b</span> <span class="o">=</span> <span class="n">next_line</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">b</span><span class="p">))){</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">same</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)){</span>
                <span class="n">flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">flag</span><span class="p">)</span>
            <span class="n">print</span><span class="p">(</span><span class="n">fin</span> <span class="p">,</span><span class="n">a</span><span class="p">);</span>

    <span class="p">}</span><span class="k">while</span><span class="p">((</span><span class="n">a</span> <span class="o">=</span> <span class="n">next_line</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">a</span><span class="p">)));</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">**</span> <span class="n">argv</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">fin</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&lt;=</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="n">fin</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">O_RDONLY</span><span class="p">);</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">fin</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

    <span class="n">zoku</span><span class="p">(</span><span class="n">fin</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3452/addtag/" class="addtag" id="addtag_3452">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3452/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3452/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3452"
  >-</span><span
  class="button yellow"
  id="rating_z_3452"
  >0</span><span 
  class="button green"
  id="rating_p_3452"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3452/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3452/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3458">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3458/">#3458</a>(<script language="JavaScript">print_time(new Date("2007/10/18 11:55 GMT"));</script><noscript>2007/10/18 11:55 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>一文字バッファに萌えました。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3458/addtag/" class="addtag" id="addtag_3458">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3458"
  >-</span><span
  class="button yellow"
  id="rating_z_3458"
  >0</span><span 
  class="button green"
  id="rating_p_3458"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3452/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3458/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3458/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment3453">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/428/" target="_top">Y</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3453/">#3453</a>(<script language="JavaScript">print_time(new Date("2007/10/18 07:39 GMT"));</script><noscript>2007/10/18 07:39 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/sql/">
	  SQL
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>使い方：sh uniq.sh input.txt

http://unicode.org/にあるUnihan.txtを37個連結した、
約4000万行（約1GB）のファイルの処理に、
Core2 6700, メモリ2GB、MySQL 5.0.45（設定ファイルはmy-huge.cnf）で、
約23分かかりました（消費メモリは約400MB）

uniq.shは下に</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre><span class="n">mysql</span> <span class="o">-</span><span class="n">uroot</span> <span class="o">-</span><span class="n">N</span> <span class="o">-</span><span class="n">r</span> <span class="n">test</span> <span class="o">&lt;&lt;</span> <span class="n">EOF</span>

<span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">tmp</span><span class="p">;</span>
<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">tmp</span> <span class="p">(</span>
  <span class="n">id</span> <span class="nb">INT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
  <span class="n">line</span> <span class="n">LONGTEXT</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>
  <span class="k">INDEX</span> <span class="p">(</span><span class="n">line</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="p">)</span> <span class="nb">CHARACTER</span> <span class="k">SET</span> <span class="n">UTF8</span><span class="p">;</span>

<span class="k">LOAD</span> <span class="k">DATA</span> <span class="k">LOCAL</span> <span class="n">INFILE</span> <span class="ss">&quot;$1&quot;</span> <span class="k">INTO</span> <span class="k">TABLE</span> <span class="n">tmp</span> <span class="n">FIELDS</span> <span class="n">TERMINATED</span> <span class="k">BY</span> <span class="s1">&#39;\n&#39;</span> <span class="p">(</span><span class="n">line</span><span class="p">);</span>

<span class="k">SELECT</span> <span class="n">line</span> <span class="k">FROM</span> <span class="n">tmp</span> <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">line</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="k">max</span><span class="p">(</span><span class="n">id</span><span class="p">);</span>

<span class="n">EOF</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3453/addtag/" class="addtag" id="addtag_3453">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/sql/">
		SQL
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3453/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3453/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3453"
  >-</span><span
  class="button yellow"
  id="rating_z_3453"
  >0</span><span 
  class="button green"
  id="rating_p_3453"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3453/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  

  
    





<div class="comment" id="comment3460">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/456/" target="_top">kenaxt</a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3460/">#3460</a>(<script language="JavaScript">print_time(new Date("2007/10/18 18:32 GMT"));</script><noscript>2007/10/18 18:32 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>外部コマンドsortを使ってます。
・対象ファイルの各行のハッシュ値をテンポラリファイルに出力
・テンポラリファイルを順ソート後、読み込んで重複行数をカウント
・対象ファイルを再読込、重複行に出会うたびに重複行数カウントをデクリメント
100万行、60MBの数字のみファイルで、実行時間は50秒、メモリ35MB使用です。
マシンはCelleon2.8Ghz、メモリ1GB、Ubuntu7.04。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s1">&#39;tempfile&#39;</span>

<span class="k">def</span> <span class="nf">make_big_seq_file</span><span class="p">(</span><span class="n">cntmax</span><span class="p">,</span><span class="n">lthmin</span><span class="p">,</span><span class="n">eps</span><span class="p">)</span>
  <span class="n">cntmax</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
    <span class="n">s</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="p">(</span><span class="n">lthmin</span><span class="o">+</span><span class="nb">rand</span><span class="p">(</span><span class="n">eps</span><span class="p">))</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span>
      <span class="n">s</span> <span class="o">&lt;&lt;</span> <span class="nb">rand</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">to_s</span>
    <span class="p">}</span>
    <span class="nb">puts</span> <span class="n">s</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="c1">#make_big_seq_file(10**6,50,20)</span>

<span class="k">def</span> <span class="nf">double_line_reject</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
  <span class="n">h</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

  <span class="n">temp</span> <span class="o">=</span> <span class="no">Tempfile</span><span class="o">::</span><span class="kp">new</span><span class="p">(</span><span class="s2">&quot;foobar&quot;</span><span class="p">)</span>
  <span class="nb">open</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">{</span><span class="o">|</span><span class="n">fin</span><span class="o">|</span>
    <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">gets</span>
      <span class="n">temp</span><span class="o">.</span><span class="n">puts</span><span class="p">(</span><span class="n">line</span><span class="o">.</span><span class="n">hash</span><span class="p">)</span>
    <span class="k">end</span>
    <span class="n">temp</span><span class="o">.</span><span class="n">close</span>

    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">&quot;|sort </span><span class="si">#{</span><span class="n">temp</span><span class="o">.</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="n">iold</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
    <span class="n">f</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span>
      <span class="n">i</span> <span class="o">=</span> <span class="n">i</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">to_i</span>
      <span class="n">h</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">iold</span> <span class="o">==</span> <span class="n">i</span>
      <span class="n">iold</span> <span class="o">=</span> <span class="n">i</span>
    <span class="p">}</span>
    <span class="n">fin</span><span class="o">.</span><span class="n">rewind</span>
    <span class="k">while</span> <span class="n">line</span> <span class="o">=</span> <span class="n">fin</span><span class="o">.</span><span class="n">gets</span>
      <span class="nb">puts</span> <span class="n">line</span> <span class="k">if</span> <span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">.</span><span class="n">hash</span><span class="o">]</span> <span class="o">&lt;</span> <span class="mi">1</span>
      <span class="n">h</span><span class="o">[</span><span class="n">line</span><span class="o">.</span><span class="n">hash</span><span class="o">]</span> <span class="o">-=</span> <span class="mi">1</span>
    <span class="k">end</span>
  <span class="p">}</span>
<span class="k">end</span>

<span class="n">double_line_reject</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3460/addtag/" class="addtag" id="addtag_3460">タグ</a>:
	
    
    <a href="/web/20090429062155/http://ja.doukaku.org/tag/Ruby1.8.5/">Ruby1.8.5</a>
    
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3460/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3460/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3460"
  >-</span><span
  class="button yellow"
  id="rating_z_3460"
  >0</span><span 
  class="button green"
  id="rating_p_3460"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3460/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3461">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/415/" target="_top">yohei</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3461/">#3461</a>(<script language="JavaScript">print_time(new Date("2007/10/18 18:45 GMT"));</script><noscript>2007/10/18 18:45 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ハッシュテーブルを作成して。
60MB 100万行で メモリ30MB、40秒くらいでした。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;fstream&gt;</span>
<span class="cp">#include &lt;list&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;numeric&gt;</span>
<span class="cp">#include &lt;algorithm&gt;</span>
<span class="cp">#include &lt;functional&gt;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">template</span> <span class="o">&lt;</span><span class="kt">int</span> <span class="n">SIZE</span><span class="o">&gt;</span>
<span class="k">struct</span> <span class="n">StringHashFunc</span> <span class="o">:</span> <span class="k">public</span> <span class="n">binary_function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="k">operator</span><span class="p">()(</span><span class="kt">int</span> <span class="n">h</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">c</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">h</span> <span class="o">*</span> <span class="mi">137</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">SIZE</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="k">template</span> <span class="o">&lt;</span><span class="k">class</span> <span class="nc">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">SIZE</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">StringHashTable</span> <span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">table</span><span class="p">;</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">StringHashTable</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">SIZE</span><span class="o">&gt;</span><span class="p">()</span> <span class="o">:</span> <span class="n">table</span><span class="p">(</span><span class="n">SIZE</span><span class="p">)</span> <span class="p">{}</span>
    <span class="n">list</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="k">operator</span><span class="p">[](</span><span class="k">const</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">table</span><span class="p">[</span><span class="n">accumulate</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="mi">0</span><span class="p">,</span> <span class="n">StringHashFunc</span><span class="o">&lt;</span><span class="n">SIZE</span><span class="o">&gt;</span><span class="p">())];</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="kt">void</span> <span class="n">uniq</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname_in</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">fname_out</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">StringHashTable</span><span class="o">&lt;</span><span class="n">ifstream</span><span class="o">::</span><span class="n">off_type</span><span class="p">,</span> <span class="mi">399989</span><span class="o">&gt;</span> <span class="n">table</span><span class="p">;</span>

    <span class="n">ifstream</span> <span class="n">fin</span><span class="p">(</span><span class="n">fname_in</span><span class="p">);</span>   <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fin</span><span class="p">)</span>  <span class="k">return</span><span class="p">;</span>
    <span class="n">ofstream</span> <span class="n">fout</span><span class="p">(</span><span class="n">fname_out</span><span class="p">);</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">fout</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>

    <span class="n">string</span> <span class="n">s0</span><span class="p">,</span> <span class="n">s1</span><span class="p">;</span>
    <span class="n">ifstream</span><span class="o">::</span><span class="n">pos_type</span> <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">;</span>
    
    <span class="n">p0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">s0</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">list</span><span class="o">&lt;</span><span class="n">ifstream</span><span class="o">::</span><span class="n">off_type</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">q</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">s0</span><span class="p">];</span>
        <span class="n">p1</span> <span class="o">=</span> <span class="n">fin</span><span class="p">.</span><span class="n">tellg</span><span class="p">();</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">q</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p0</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">eof</span><span class="p">())</span> <span class="n">fin</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
            <span class="n">list</span><span class="o">&lt;</span><span class="n">ifstream</span><span class="o">::</span><span class="n">off_type</span><span class="o">&gt;::</span><span class="n">iterator</span> <span class="n">ite</span><span class="p">;</span>
            <span class="k">for</span> <span class="p">(</span><span class="n">ite</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span> <span class="n">ite</span> <span class="o">!=</span> <span class="n">q</span><span class="p">.</span><span class="n">end</span><span class="p">();</span> <span class="o">++</span><span class="n">ite</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">fin</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="o">*</span><span class="n">ite</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
                <span class="n">getline</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">s1</span><span class="p">);</span>
                <span class="k">if</span> <span class="p">(</span><span class="n">s0</span> <span class="o">==</span> <span class="n">s1</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">ite</span> <span class="o">==</span> <span class="n">q</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="n">q</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">p0</span><span class="p">);</span>
            <span class="k">else</span>                <span class="o">*</span><span class="n">ite</span> <span class="o">=</span> <span class="n">p0</span><span class="p">;</span>
            <span class="n">fin</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">p0</span> <span class="o">=</span> <span class="n">p1</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="n">fin</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="n">fin</span><span class="p">.</span><span class="n">seekg</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">ios</span><span class="o">::</span><span class="n">beg</span><span class="p">);</span>
    <span class="n">p0</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">fin</span><span class="p">,</span> <span class="n">s0</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">fin</span><span class="p">.</span><span class="n">eof</span><span class="p">())</span> <span class="p">{</span>
            <span class="n">fout</span> <span class="o">&lt;&lt;</span> <span class="n">s0</span> <span class="o">&lt;&lt;</span> <span class="n">flush</span><span class="p">;</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="n">list</span><span class="o">&lt;</span><span class="n">ifstream</span><span class="o">::</span><span class="n">off_type</span><span class="o">&gt;</span> <span class="o">&amp;</span><span class="n">q</span> <span class="o">=</span> <span class="n">table</span><span class="p">[</span><span class="n">s0</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">find</span><span class="p">(</span><span class="n">q</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">q</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">p0</span><span class="p">)</span> <span class="o">!=</span> <span class="n">q</span><span class="p">.</span><span class="n">end</span><span class="p">())</span> <span class="p">{</span>
                <span class="n">fout</span> <span class="o">&lt;&lt;</span> <span class="n">s0</span> <span class="o">&lt;&lt;</span> <span class="sc">&#39;\n&#39;</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">p0</span> <span class="o">=</span> <span class="n">fin</span><span class="p">.</span><span class="n">tellg</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">uniq</span><span class="p">(</span><span class="s">&quot;dup.txt&quot;</span><span class="p">,</span> <span class="s">&quot;uniq.txt&quot;</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3461/addtag/" class="addtag" id="addtag_3461">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3461/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3461/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3461"
  >-</span><span
  class="button yellow"
  id="rating_z_3461"
  >0</span><span 
  class="button green"
  id="rating_p_3461"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3461/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  
    





<div class="comment" id="comment3466">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3466/">#3466</a>(<script language="JavaScript">print_time(new Date("2007/10/19 09:44 GMT"));</script><noscript>2007/10/19 09:44 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ファイルを2回読み込み、1回目でハッシュを使って重複している行を洗い出して、2回目で出力をします。

45万行76M byteのファイルについて、最大ヒープサイズ20Mbyte（-Xmx20m）でOutOfMemory発生しませんでした。全体の使用メモリは30Mちょっと。
実行後のファイルは8万行19Mbyteでした。
使用するメモリ量は2回以上出現する文字列の種類に依存します。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Uniq</span> <span class="o">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
      <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>

      <span class="n">printUniq</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="n">findDuplications</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
   <span class="o">}</span>

   <span class="k">private</span> <span class="k">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">findDuplications</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">)</span>
            <span class="k">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
      <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
      <span class="k">try</span> <span class="o">{</span>
         <span class="n">Set</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">hash</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
         <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">dupStrings</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;();</span>
         <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">lineCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">hash</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">hashCode</span><span class="o">()))</span> <span class="o">{</span>
               <span class="n">dupStrings</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">line</span><span class="o">,</span> <span class="n">lineCount</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">lineCount</span><span class="o">++;</span>
         <span class="o">}</span>
         <span class="k">return</span> <span class="n">dupStrings</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
         <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
      <span class="o">}</span>
   <span class="o">}</span>
   <span class="k">private</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">printUniq</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">map</span><span class="o">)</span>
            <span class="k">throws</span> <span class="n">FileNotFoundException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
      <span class="n">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
      <span class="k">try</span> <span class="o">{</span>
         <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
         <span class="kt">int</span> <span class="n">lineCount</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
         <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">final</span> <span class="n">Integer</span> <span class="n">last</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">last</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">last</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">==</span> <span class="n">lineCount</span><span class="o">)</span> <span class="o">{</span>
               <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">line</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">lineCount</span><span class="o">++;</span>
         <span class="o">}</span>
      <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
         <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> 
      <span class="o">}</span>
   <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3466/addtag/" class="addtag" id="addtag_3466">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3466/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3466/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3466"
  >-</span><span
  class="button yellow"
  id="rating_z_3466"
  >0</span><span 
  class="button green"
  id="rating_p_3466"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3466/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3466/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3468">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3468/">#3468</a>(<script language="JavaScript">print_time(new Date("2007/10/19 10:52 GMT"));</script><noscript>2007/10/19 10:52 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  全部メモリ内で処理しているように見えるのはきのせいですか？
お題の真意的に、重複行あるなしにかかわらず処理できないといけないと思うので
この場合重複なしだったらまずい予感？
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3468/addtag/" class="addtag" id="addtag_3468">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3468"
  >-</span><span
  class="button yellow"
  id="rating_z_3468"
  >0</span><span 
  class="button green"
  id="rating_p_3468"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3466/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3468/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3468/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3468/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3469">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3469/">#3469</a>(<script language="JavaScript">print_time(new Date("2007/10/19 10:55 GMT"));</script><noscript>2007/10/19 10:55 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>早とちりしました。
メモリ使用量についてちゃんと注意書きがありましたね^^;
失礼しました。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3469/addtag/" class="addtag" id="addtag_3469">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3469"
  >-</span><span
  class="button yellow"
  id="rating_z_3469"
  >0</span><span 
  class="button green"
  id="rating_p_3469"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3468/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3469/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3469/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3492">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3492/">#3492</a>(<script language="JavaScript">print_time(new Date("2007/10/22 06:12 GMT"));</script><noscript>2007/10/22 06:12 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>逆でしょうか。重複行だらけだったら、全てメモリ上の為、OutOfMemoryですね。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3492/addtag/" class="addtag" id="addtag_3492">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3492"
  >-</span><span
  class="button yellow"
  id="rating_z_3492"
  >0</span><span 
  class="button green"
  id="rating_p_3492"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3468/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3492/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3492/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3492/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3493">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3493/">#3493</a>(<script language="JavaScript">print_time(new Date("2007/10/22 08:42 GMT"));</script><noscript>2007/10/22 08:42 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  最悪のケースは全ての行が2回ずつ現れる場合です。<br/>この場合だと、ファイルのまるまる半分がメモリに格納されてしまいます。<br/>ハッシュ値のSetの分もあるので、ファイルサイズの半分は超えてしまいます。<br/>ただし、いずれにせよ同じ行は1行しか持たないため、「全てメモリの上」ではありません。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3493/addtag/" class="addtag" id="addtag_3493">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3493"
  >-</span><span
  class="button yellow"
  id="rating_z_3493"
  >0</span><span 
  class="button green"
  id="rating_p_3493"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3492/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3493/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3493/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3493/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3494">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3494/">#3494</a>(<script language="JavaScript">print_time(new Date("2007/10/22 03:48 GMT"));</script><noscript>2007/10/22 03:48 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  訂正。<br/>もっと最悪のケースは、全ての行がユニークだけど、どの行もハッシュ値がユニークでない場合です。<br/>この場合、「全てメモリの上」になってしまいます。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3494/addtag/" class="addtag" id="addtag_3494">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3494"
  >-</span><span
  class="button yellow"
  id="rating_z_3494"
  >0</span><span 
  class="button green"
  id="rating_p_3494"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3493/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3494/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3494/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3494/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3498">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3498/">#3498</a>(<script language="JavaScript">print_time(new Date("2007/10/22 09:00 GMT"));</script><noscript>2007/10/22 09:00 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  厳密でないのでさらに訂正。<br/>最悪のケースは、「全ての行の内容がユニークであり、かつ全ての行のハッシュ値が同一の場合」で、この場合、最初の1行を除いて全てメモリ上に格納されます。<br/>あまり現実的な条件じゃないけど、StringクラスのhashCodeメソッドは推測可能なハッシュ値を返すので狙ってやることは可能でしょうね。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3498/addtag/" class="addtag" id="addtag_3498">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3498"
  >-</span><span
  class="button yellow"
  id="rating_z_3498"
  >0</span><span 
  class="button green"
  id="rating_p_3498"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3494/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3498/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3498/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3498/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3871">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/533/" target="_top">yappy</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3871/">#3871</a>(<script language="JavaScript">print_time(new Date("2007/11/11 17:17 GMT"));</script><noscript>2007/11/11 17:17 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #9fff9f;">6/6=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>HashMapやHashSetを使っていますが、大量の１行文字列やハッシュを格納するのに、ハッシュは良くないと思います。
ハッシュはメモリを実際に使う分よりも多めにとることでヒット率が上がり、速度が上がりますので。
TreeMap/Setが適切だと思います。
なによりこの課題は速度よりもメモリ効率を重視すべきです。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3871/addtag/" class="addtag" id="addtag_3871">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #9fff9f;"
  >6/6=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3871"
  >-</span><span
  class="button yellow"
  id="rating_z_3871"
  >0</span><span 
  class="button green"
  id="rating_p_3871"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3498/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3871/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3871/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3871/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3884">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3884/">#3884</a>(<script language="JavaScript">print_time(new Date("2007/11/12 00:29 GMT"));</script><noscript>2007/11/12 00:29 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  なるほど。確かにそのとおりです。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3884/addtag/" class="addtag" id="addtag_3884">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3884"
  >-</span><span
  class="button yellow"
  id="rating_z_3884"
  >0</span><span 
  class="button green"
  id="rating_p_3884"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3871/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3884/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3884/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


  

  

  

  

  

  
    





<div class="comment" id="comment3472">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3472/">#3472</a>(<script language="JavaScript">print_time(new Date("2007/10/19 14:20 GMT"));</script><noscript>2007/10/19 14:20 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Squeak&nbsp;Smalltalk&nbsp;で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13</pre></td><td class="code"><div class="highlight"><pre>| in memo currPos line out |
in := FileStream oldFileNamed: &#39;in.txt&#39;.
memo := Dictionary new.

[   currPos := in position.
    (line := in nextLine) notNil
] whileTrue: [memo at: line hash put: currPos].
in reset.

out := FileStream forceNewFileNamed: &#39;out.txt&#39;.
memo values sort do: [:pos |
    out nextPutAll: (in position: pos; nextLine); cr].
in close. out edit
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3472/addtag/" class="addtag" id="addtag_3472">タグ</a>:
	
    
    <a href="/web/20090429062155/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3472/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3472/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3472"
  >-</span><span
  class="button yellow"
  id="rating_z_3472"
  >0</span><span 
  class="button green"
  id="rating_p_3472"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3472/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3472/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3473">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3473/">#3473</a>(<script language="JavaScript">print_time(new Date("2007/10/19 14:29 GMT"));</script><noscript>2007/10/19 14:29 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  なぜか言語欄の選択が投稿に反映されなかったようです。お手数ですが、「Other」→「Smalltalk」への差し替えをお願いいたします。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3473/addtag/" class="addtag" id="addtag_3473">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3473"
  >-</span><span
  class="button yellow"
  id="rating_z_3473"
  >0</span><span 
  class="button green"
  id="rating_p_3473"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3472/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3473/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3473/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  

  

  

  
    





<div class="comment" id="comment3479">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/">#3479</a>(<script language="JavaScript">print_time(new Date("2007/10/20 08:35 GMT"));</script><noscript>2007/10/20 08:35 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ごめんさい。(謎
メモリじゃなくてファイルを使いました。
ハッシュパーティションってこんな感じですかね(笑
動くだけなので最適化は全然していません

メモリ的には 1MB あれば動くと思いますが
その分ディスクリソースとして
入力ファイル＋(データ件数*(100)バイト)必要です。

# ロジック的にはやっていることは前回のperlの時(#3350)と同じです。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdint.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;unistd.h&gt;</span>
<span class="cp">#include &lt;sys/stat.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;fcntl.h&gt;</span>

<span class="k">typedef</span> <span class="n">uint32_t</span> <span class="n">hashvalue_t</span><span class="p">;</span>   <span class="c">// ハッシュ値用の型</span>
<span class="cp">#define TEXT_LENGTH_MAX (63)    </span><span class="c">// テキストデータの1行の最大文字数(改行込み)</span>
<span class="cp">#define HASH_TABLES_MAX (512)   </span><span class="c">// 作成するハッシュテーブルの数</span>

<span class="k">static</span> <span class="kt">char</span> <span class="n">WORKDIR</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>

<span class="c">// ハッシュテーブルに格納する1レコード</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagHASH_RECORD</span>
<span class="p">{</span>
  <span class="kt">long</span>    <span class="n">rawid</span><span class="p">;</span>  <span class="c">// 行番号</span>
  <span class="n">size_t</span>  <span class="n">length</span><span class="p">;</span> <span class="c">// 文字数</span>
  <span class="kt">char</span>    <span class="n">text</span><span class="p">[</span> <span class="n">TEXT_LENGTH_MAX</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">];</span>  <span class="c">// データ</span>
<span class="p">}</span> <span class="n">HASH_RECORD</span><span class="p">;</span>

<span class="c">// アクセスパス</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagRAW_INDEX</span>
<span class="p">{</span>
  <span class="kt">long</span>        <span class="n">linenum</span><span class="p">;</span> <span class="c">// 行番号</span>
  <span class="n">hashvalue_t</span> <span class="n">hash_value</span><span class="p">;</span> <span class="c">// ハッシュ値</span>
  <span class="n">off_t</span>       <span class="n">seek</span><span class="p">;</span> <span class="c">// ハッシュテーブル内での位置</span>
<span class="p">}</span> <span class="n">RAW_INDEX</span><span class="p">;</span>

<span class="c">// 文字列からハッシュ値を計算して返す</span>
<span class="k">static</span> <span class="n">hashvalue_t</span> <span class="nf">calcHashValue</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">bufsize</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">const</span> <span class="n">hashvalue_t</span> <span class="o">*</span><span class="n">source</span>        <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">hashvalue_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
  <span class="k">const</span> <span class="n">size_t</span>      <span class="n">source_bufsize</span> <span class="o">=</span> <span class="n">bufsize</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">hashvalue_t</span><span class="p">);</span> <span class="c">// 細かいことは気にしない^^;</span>
  <span class="n">hashvalue_t</span>       <span class="n">hash_value</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span> <span class="n">size_t</span> <span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="n">source_bufsize</span><span class="p">;</span> <span class="n">N</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">hash_value</span> <span class="o">+=</span> <span class="o">*</span><span class="n">source</span> <span class="o">++</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">return</span> <span class="n">hash_value</span> <span class="o">%</span> <span class="n">HASH_TABLES_MAX</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// 索引(アクセスパス)を作成する</span>
<span class="kt">int</span> <span class="nf">index_insert</span><span class="p">(</span><span class="k">const</span> <span class="n">RAW_INDEX</span> <span class="n">item</span><span class="p">,</span> <span class="kt">long</span> <span class="n">replace</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">index_name</span> <span class="p">[</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">)</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">];</span>
  <span class="kt">int</span>  <span class="n">index_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">RAW_INDEX</span> <span class="n">dummy</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>

  <span class="n">snprintf</span><span class="p">(</span><span class="n">index_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">index_name</span><span class="p">),</span> <span class="s">&quot;%s/rawindex&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">index_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">index_name</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_SYNC</span><span class="p">,</span> <span class="mo">0600</span><span class="p">)</span> <span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">replace</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="c">// 重複データの無効化</span>
    <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="p">(</span><span class="n">replace</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
    <span class="n">write</span><span class="p">(</span> <span class="n">index_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dummy</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">);</span>
  <span class="p">}</span>
  <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_END</span><span class="p">);</span>
  <span class="n">write</span><span class="p">(</span> <span class="n">index_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">close</span><span class="p">(</span> <span class="n">index_fd</span> <span class="p">);</span> <span class="n">index_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// ハッシュテーブルへ一行追加</span>
<span class="kt">int</span> <span class="nf">hash_insert</span><span class="p">(</span><span class="kt">long</span> <span class="n">num</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">text</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">HASH_RECORD</span> <span class="n">ins_item</span>   <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="sc">&#39;\0&#39;</span><span class="p">}};</span>
  <span class="n">RAW_INDEX</span>   <span class="n">index</span>      <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
  <span class="n">hashvalue_t</span> <span class="n">hash_value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kt">char</span>        <span class="n">table_name</span><span class="p">[</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">)</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">];</span>
  <span class="kt">int</span>         <span class="n">table_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">off_t</span>       <span class="n">seek</span>       <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">HASH_RECORD</span> <span class="n">sel_item</span>   <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="sc">&#39;\0&#39;</span><span class="p">}};</span>
  <span class="kt">long</span>        <span class="n">repline</span>    <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="c">/* レコードの作成 */</span>
  <span class="n">ins_item</span><span class="p">.</span><span class="n">rawid</span>  <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
  <span class="n">ins_item</span><span class="p">.</span><span class="n">length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span> <span class="n">text</span> <span class="p">);</span>
  <span class="n">strncpy</span><span class="p">(</span><span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">)</span> <span class="p">);</span>

  <span class="c">/* ハッシュテーブルへ追加 */</span>
  <span class="n">hash_value</span> <span class="o">=</span> <span class="n">calcHashValue</span><span class="p">(</span><span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">));</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table_name</span><span class="p">),</span> <span class="s">&quot;%s/HASH_%lu&quot;</span><span class="p">,</span><span class="n">WORKDIR</span><span class="p">,</span> <span class="n">hash_value</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">table_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_SYNC</span><span class="p">,</span> <span class="mo">0600</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">seek</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">read</span><span class="p">(</span> <span class="n">table_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sel_item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="c">// 一致するデータがあれば追加しない</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">sel_item</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">length</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span> <span class="n">strncmp</span><span class="p">(</span> <span class="n">sel_item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">length</span> <span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;duplicate: %ld  %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sel_item</span><span class="p">.</span><span class="n">rawid</span><span class="p">,</span><span class="n">ins_item</span><span class="p">.</span><span class="n">rawid</span><span class="p">);</span>
        <span class="n">repline</span> <span class="o">=</span> <span class="n">sel_item</span><span class="p">.</span><span class="n">rawid</span><span class="p">;</span>
        <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="n">seek</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">seek</span> <span class="o">=</span> <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">write</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ins_item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">));</span>
  <span class="n">close</span><span class="p">(</span> <span class="n">table_fd</span> <span class="p">);</span> <span class="n">table_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="c">/* 索引の追加 */</span>
  <span class="n">index</span><span class="p">.</span><span class="n">linenum</span>    <span class="o">=</span> <span class="n">num</span><span class="p">;</span>
  <span class="n">index</span><span class="p">.</span><span class="n">hash_value</span> <span class="o">=</span> <span class="n">hash_value</span><span class="p">;</span>
  <span class="n">index</span><span class="p">.</span><span class="n">seek</span>       <span class="o">=</span> <span class="n">seek</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">index_insert</span><span class="p">(</span> <span class="n">index</span><span class="p">,</span> <span class="n">repline</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 入力ファイルからハッシュテーブルを作成 */</span>
<span class="kt">int</span> <span class="nf">analyze</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">FILE</span>  <span class="o">*</span><span class="n">in</span>   <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="kt">long</span>  <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kt">char</span>      <span class="n">line</span><span class="p">[</span> <span class="n">TEXT_LENGTH_MAX</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">];</span>

  <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">in</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">while</span><span class="p">(</span> <span class="o">!</span> <span class="n">feof</span><span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39;\0&#39;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">));</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">TEXT_LENGTH_MAX</span><span class="p">,</span> <span class="n">in</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span> <span class="n">hash_insert</span><span class="p">(</span><span class="o">++</span><span class="n">count</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="n">fclose</span><span class="p">(</span><span class="n">in</span><span class="p">);</span> <span class="n">in</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* ハッシュテーブルを結合して出力 */</span>
<span class="kt">int</span> <span class="nf">hash_join</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">HASH_RECORD</span> <span class="n">item</span>   <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="sc">&#39;\0&#39;</span><span class="p">}};</span>
  <span class="n">RAW_INDEX</span>   <span class="n">index</span>  <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
  <span class="kt">int</span> <span class="n">index_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">table_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="kt">char</span> <span class="n">table_name</span><span class="p">[</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">)</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">];</span>

  <span class="kt">int</span>   <span class="n">out_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">hashvalue_t</span> <span class="n">store_hash_value</span> <span class="o">=</span> <span class="p">(</span><span class="n">hashvalue_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="c">// 索引のオープン</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table_name</span><span class="p">),</span> <span class="s">&quot;%s/rawindex&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">index_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">)</span> <span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>

  <span class="c">// 出力ファイルのオープン</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">out_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">O_WRONLY</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_TRUNC</span> <span class="o">|</span> <span class="n">O_SYNC</span><span class="p">,</span> <span class="mo">0644</span><span class="p">)</span> <span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">close</span><span class="p">(</span> <span class="n">index_fd</span> <span class="p">);</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c">// ハッシュテーブルを参照してデータ結合</span>
  <span class="k">while</span><span class="p">(</span> <span class="p">(</span> <span class="n">read</span><span class="p">(</span> <span class="n">index_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">index</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">))</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">index</span><span class="p">.</span><span class="n">linenum</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c">// あとで上書きされてるので無視</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">index</span><span class="p">.</span><span class="n">hash_value</span> <span class="o">!=</span> <span class="n">store_hash_value</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="c">// 前回参照したハッシュテーブルと異なればオープン</span>
      <span class="k">if</span><span class="p">(</span> <span class="n">table_fd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="n">close</span><span class="p">(</span> <span class="n">table_fd</span> <span class="p">);</span> <span class="n">table_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
      <span class="n">snprintf</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table_name</span><span class="p">),</span> <span class="s">&quot;%s/HASH_%lu&quot;</span><span class="p">,</span><span class="n">WORKDIR</span><span class="p">,</span> <span class="n">index</span><span class="p">.</span><span class="n">hash_value</span><span class="p">);</span>
      <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">table_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">)</span> <span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">break</span><span class="p">;</span> <span class="p">}</span>
      <span class="n">store_hash_value</span> <span class="o">=</span> <span class="n">index</span><span class="p">.</span><span class="n">hash_value</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c">// ハッシュテーブルから出力ファイルへ1レコード出力</span>
    <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="n">index</span><span class="p">.</span><span class="n">seek</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">read</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="n">write</span><span class="p">(</span><span class="n">out_fd</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">length</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">close</span><span class="p">(</span> <span class="n">table_fd</span> <span class="p">);</span> <span class="n">table_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">close</span><span class="p">(</span> <span class="n">out_fd</span> <span class="p">);</span>   <span class="n">out_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">close</span><span class="p">(</span> <span class="n">index_fd</span> <span class="p">);</span> <span class="n">index_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">cmd</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">),</span> <span class="s">&quot;work.%d&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cmd</span><span class="p">),</span><span class="s">&quot;/usr/bin/mkdir -m 700 %s&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="n">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">teardown</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">cmd</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cmd</span><span class="p">),</span><span class="s">&quot;/usr/bin/rm -rf %s&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="n">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage: %s in_file out_file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">setup</span><span class="p">();</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">analyze</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">hash_join</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">teardown</span><span class="p">();</span>

<span class="n">printf</span><span class="p">(</span><span class="s">&quot;size of HASH_RECORD = %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&quot;size of RAW_INDEX   = %ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">);</span>

  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/addtag/" class="addtag" id="addtag_3479">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3479"
  >-</span><span
  class="button yellow"
  id="rating_z_3479"
  >0</span><span 
  class="button green"
  id="rating_p_3479"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/">
    2
    replies
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3479/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3480">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3480/">#3480</a>(<script language="JavaScript">print_time(new Date("2007/10/20 08:42 GMT"));</script><noscript>2007/10/20 08:42 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>あれ？言語が入ってない
プレビューの時にリセットされちゃったのかな？
普通のCですのであしからず。

//gcc -Wall -std=c99</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3480/addtag/" class="addtag" id="addtag_3480">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3480"
  >-</span><span
  class="button yellow"
  id="rating_z_3480"
  >0</span><span 
  class="button green"
  id="rating_p_3480"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3480/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3480/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3481">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3481/">#3481</a>(<script language="JavaScript">print_time(new Date("2007/10/20 10:23 GMT"));</script><noscript>2007/10/20 10:23 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>お題は「1行あたり平均60文字のデータが書き込まれた」なので、
一行の文字数が120文字とかいう行があってもおかしくないのですが、
バッファサイズ固定だとまずくないですか？</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3481/addtag/" class="addtag" id="addtag_3481">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3481"
  >-</span><span
  class="button yellow"
  id="rating_z_3481"
  >0</span><span 
  class="button green"
  id="rating_p_3481"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3479/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3481/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3481/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3481/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3485">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3485/">#3485</a>(<script language="JavaScript">print_time(new Date("2007/10/20 08:30 GMT"));</script><noscript>2007/10/20 08:30 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>バッファ固定なのはご愛敬で^^；；
基本的にDBファイルを作るためには
固定長で処理しないとならないので
平均＝最大とさせてもらいました。
頭の定義を変更すればのばすことは可能です
文字列比較は文字数が一致したときだけにしているので
性能的にはあまり変わらないはず。

ただまぁ。よく考えたらこのコードは2G超の入力ファイルは
処理できないわけですが(汗</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3485/addtag/" class="addtag" id="addtag_3485">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3485"
  >-</span><span
  class="button yellow"
  id="rating_z_3485"
  >0</span><span 
  class="button green"
  id="rating_p_3485"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3481/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3485/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3485/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3485/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3532">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/">#3532</a>(<script language="JavaScript">print_time(new Date("2007/10/27 02:34 GMT"));</script><noscript>2007/10/27 02:34 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>最初は巨大ファイルに対応して所々にあるバグを直すだけのつもりだったのです。
やってみて実感、使い物ならないほど遅かったorz
ボルトネックはファイルのオープン・クローズの回数と読み込みブロックの少なさだと思うので
その点を改良してスレッドを使用してまぁ
ファイルだけでやってるのだからあとは仕方ないかなというレベルまでできたかなと。
ごめんなさい。一応努力はしたんです。
でも差分取ったらソースコードよりも大きくなった(笑

1Mレコード(61MB)中身は処理的に割と最悪なケース( 重複無し すべて同じ文字数) で 13分強でした。
// gcc -Wall -xc -std=c99 doukaku67.c.usethread -o a -lpthread
// メモリは10MBくらい使うかも

2GBだと 35Mレコードなので455分(7.5時間)かかる計算ですね^^；
#どうせスレッド使うのならシェルソートっぽく作った方が良かったと修正していて思った^^；；</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#define _LARGEFILE_SOURCE</span>
<span class="cp">#define _FILE_OFFSET_BITS 64</span>

<span class="cp">#include &lt;stdint.h&gt;</span>
<span class="cp">#include &lt;stdio.h&gt;</span>
<span class="cp">#include &lt;stdlib.h&gt;</span>
<span class="cp">#include &lt;unistd.h&gt;</span>
<span class="cp">#include &lt;string.h&gt;</span>
<span class="cp">#include &lt;fcntl.h&gt;</span>
<span class="cp">#include &lt;pthread.h&gt;</span>
<span class="cp">#include &lt;assert.h&gt;</span>

<span class="k">typedef</span> <span class="n">uint32_t</span> <span class="n">hashvalue_t</span><span class="p">;</span>    <span class="c">// ハッシュ値用の型</span>
<span class="k">typedef</span> <span class="n">uint64_t</span> <span class="n">rowid_t</span><span class="p">;</span>        <span class="c">// 行番号の型</span>

<span class="cp">#define TEXT_LENGTH_MAX (119)    </span><span class="c">// テキストデータの1行の最大文字数(改行込み)</span>
<span class="cp">#define HASH_TABLES_MAX (8192)   </span><span class="c">// 作成するハッシュテーブルの数</span>
<span class="cp">#define INDEX_READ_CACHE (2048)  </span><span class="c">// 結合時一度に読み込む索引のレコード数</span>
<span class="cp">#define HASH_READ_CACHE (256)    </span><span class="c">// 重複行確認の時一度に読み込むハッシュテーブルのレコード数(スレッド単位)</span>

<span class="k">static</span> <span class="kt">char</span> <span class="n">WORKDIR</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>         <span class="c">// ハッシュテーブルの作成先</span>
<span class="k">static</span> <span class="kt">int</span>  <span class="n">index_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>       <span class="c">// 索引用fd</span>

<span class="c">/* スレッド関係 */</span>
<span class="cp">#define INSERT_THREADS_MAX (100) </span><span class="c">// 同時起動スレッド最大数</span>
<span class="k">static</span> <span class="n">pthread_mutex_t</span> <span class="n">hash_mutex</span><span class="p">[</span> <span class="n">HASH_TABLES_MAX</span> <span class="p">];</span> <span class="c">// flockの代わり</span>
<span class="k">static</span> <span class="k">struct</span> 
<span class="p">{</span>
  <span class="n">pthread_mutex_t</span> <span class="n">mutex</span><span class="p">;</span>        <span class="c">// メンバ書き換え時の排他制御</span>
  <span class="n">pthread_cond_t</span>  <span class="n">cond_end</span><span class="p">;</span>     <span class="c">// スレッド終了通知用</span>
  <span class="kt">int</span>             <span class="n">now_threads</span><span class="p">;</span>  <span class="c">// 現在起動中のスレッド数</span>
  <span class="n">rowid_t</span>         <span class="n">now_rowid</span><span class="p">;</span>    <span class="c">// 現在読み込み中の行番号(行数)</span>
<span class="p">}</span> <span class="n">tc</span> <span class="o">=</span> <span class="p">{</span><span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">,</span> <span class="n">PTHREAD_COND_INITIALIZER</span> <span class="p">};</span>

<span class="c">// ハッシュテーブルに格納する1レコード</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagHASH_RECORD</span>
<span class="p">{</span>
  <span class="n">rowid_t</span> <span class="n">rowid</span><span class="p">;</span>  <span class="c">// 行番号</span>
  <span class="n">size_t</span>  <span class="n">length</span><span class="p">;</span> <span class="c">// 文字数</span>
  <span class="kt">char</span>    <span class="n">text</span><span class="p">[</span> <span class="n">TEXT_LENGTH_MAX</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">];</span>  <span class="c">// データ</span>
<span class="p">}</span> <span class="n">HASH_RECORD</span><span class="p">;</span>

<span class="c">// アクセスパス</span>
<span class="k">typedef</span> <span class="k">struct</span> <span class="n">tagRAW_INDEX</span>
<span class="p">{</span>
  <span class="n">rowid_t</span>     <span class="n">linenum</span><span class="p">;</span>    <span class="c">// 行番号</span>
  <span class="n">hashvalue_t</span> <span class="n">hash_value</span><span class="p">;</span> <span class="c">// ハッシュ値</span>
  <span class="n">off_t</span>       <span class="n">seek</span><span class="p">;</span>       <span class="c">// ハッシュテーブル内での位置</span>
<span class="p">}</span> <span class="n">RAW_INDEX</span><span class="p">;</span>

<span class="c">// 文字列からハッシュ値を計算して返す</span>
<span class="k">static</span> <span class="n">hashvalue_t</span> <span class="nf">calcHashValue</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">size_t</span> <span class="n">bufsize</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">const</span> <span class="n">uint32_t</span>    <span class="o">*</span><span class="n">source</span>        <span class="o">=</span> <span class="p">(</span><span class="k">const</span> <span class="n">hashvalue_t</span> <span class="o">*</span><span class="p">)</span><span class="n">s</span><span class="p">;</span>
  <span class="k">const</span> <span class="n">size_t</span>      <span class="n">source_bufsize</span> <span class="o">=</span> <span class="n">bufsize</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">hashvalue_t</span><span class="p">);</span> <span class="c">// 細かいことは気にしない^^;</span>
  <span class="n">hashvalue_t</span>       <span class="n">hash_value</span>     <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span> <span class="n">size_t</span> <span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="n">source_bufsize</span><span class="p">;</span> <span class="n">N</span> <span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">hash_value</span> <span class="o">+=</span> <span class="o">*</span><span class="n">source</span> <span class="o">++</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">return</span> <span class="n">hash_value</span> <span class="o">%</span> <span class="n">HASH_TABLES_MAX</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="n">size_t</span> <span class="n">hist_cursor</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">static</span> <span class="k">struct</span> 
<span class="p">{</span>
  <span class="n">hashvalue_t</span> <span class="n">val</span><span class="p">;</span>
  <span class="kt">int</span>         <span class="n">fd</span><span class="p">;</span>
<span class="p">}</span> <span class="n">fd_history</span><span class="p">[</span> <span class="mh">0x80</span> <span class="p">];</span>

<span class="c">// ヒストリからハッシュテーブルを検索無ければオープン</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">history_fd_open</span><span class="p">(</span><span class="n">hashvalue_t</span> <span class="n">hash_value</span><span class="p">,</span> <span class="kt">int</span> <span class="n">use_write</span> <span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">table_name</span><span class="p">[</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">)</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">];</span>
  <span class="kt">int</span>    <span class="n">table_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">size_t</span> <span class="n">N</span>        <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">for</span><span class="p">(</span> <span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="mh">0x80</span><span class="p">;</span> <span class="n">N</span><span class="o">++</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">val</span> <span class="o">==</span> <span class="n">hash_value</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">table_fd</span> <span class="o">=</span> <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">fd</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">table_fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="c">// ヒストリ内になかったのでヒストリの置き換え</span>
    <span class="n">snprintf</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">table_name</span><span class="p">),</span> <span class="s">&quot;%s/HASH_%lu&quot;</span><span class="p">,</span><span class="n">WORKDIR</span><span class="p">,</span> <span class="n">hash_value</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">use_write</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">table_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">){</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">table_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">table_name</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">0600</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">){</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">fd_history</span><span class="p">[</span><span class="n">hist_cursor</span><span class="p">].</span><span class="n">fd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="n">close</span><span class="p">(</span> <span class="n">fd_history</span><span class="p">[</span><span class="n">hist_cursor</span><span class="p">].</span><span class="n">fd</span> <span class="p">);</span>
    <span class="n">fd_history</span><span class="p">[</span><span class="n">hist_cursor</span><span class="p">].</span><span class="n">val</span><span class="o">=</span> <span class="n">hash_value</span><span class="p">;</span>
    <span class="n">fd_history</span><span class="p">[</span><span class="n">hist_cursor</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="n">table_fd</span><span class="p">;</span>
    <span class="n">hist_cursor</span><span class="o">++</span><span class="p">;</span> <span class="n">hist_cursor</span> <span class="o">&amp;=</span> <span class="mh">0x7f</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">table_fd</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">int</span> <span class="nf">history_fd_close</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="mh">0x80</span><span class="p">;</span> <span class="n">N</span><span class="o">++</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">fd</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="n">close</span><span class="p">(</span> <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">fd</span> <span class="p">);</span>
    <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="n">hashvalue_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// 索引(アクセスパス)を作成する</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">index_insert</span><span class="p">(</span><span class="k">const</span> <span class="n">RAW_INDEX</span> <span class="n">item</span><span class="p">,</span> <span class="n">rowid_t</span> <span class="n">replace</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">static</span> <span class="n">pthread_mutex_t</span> <span class="n">fd_mutex</span>  <span class="o">=</span> <span class="n">PTHREAD_MUTEX_INITIALIZER</span><span class="p">;</span>
  <span class="k">static</span> <span class="k">const</span> <span class="n">RAW_INDEX</span> <span class="n">dummy</span><span class="p">[</span><span class="n">INSERT_THREADS_MAX</span><span class="p">]</span> <span class="o">=</span> <span class="p">{{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">}};</span>
  <span class="k">static</span> <span class="n">rowid_t</span>         <span class="n">rowid_max</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">if</span><span class="p">(</span> <span class="n">index_fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fd_mutex</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">rowid_max</span> <span class="o">&lt;</span> <span class="n">item</span><span class="p">.</span><span class="n">linenum</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="c">// 索引行(出力先)がないので追加</span>
      <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_END</span><span class="p">);</span>
      <span class="k">while</span><span class="p">(</span> <span class="n">rowid_max</span> <span class="o">&lt;</span> <span class="n">item</span><span class="p">.</span><span class="n">linenum</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="n">write</span><span class="p">(</span> <span class="n">index_fd</span><span class="p">,</span> <span class="n">dummy</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">dummy</span><span class="p">)</span> <span class="p">);</span>
        <span class="n">rowid_max</span> <span class="o">+=</span> <span class="n">INSERT_THREADS_MAX</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">fdatasync</span><span class="p">(</span> <span class="n">index_fd</span> <span class="p">);</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span> <span class="n">replace</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="c">// 重複データの無効化</span>
      <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="p">(</span><span class="n">replace</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
      <span class="n">write</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dummy</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="c">// 索引行の上書き</span>
    <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="p">(</span><span class="n">item</span><span class="p">.</span><span class="n">linenum</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">),</span> <span class="n">SEEK_SET</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span> <span class="n">write</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">))</span> <span class="o">==</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">fd_mutex</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">// ハッシュテーブルへ一行追加</span>
<span class="k">static</span> <span class="kt">int</span> <span class="nf">hash_insert</span><span class="p">(</span><span class="k">const</span> <span class="n">HASH_RECORD</span> <span class="n">ins_item</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">RAW_INDEX</span>   <span class="n">index</span>      <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">};</span>
  <span class="n">hashvalue_t</span> <span class="n">hash_value</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="kt">int</span>         <span class="n">table_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">off_t</span>       <span class="n">seek</span>       <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">HASH_RECORD</span> <span class="n">sel_buf</span><span class="p">[</span> <span class="n">HASH_READ_CACHE</span> <span class="p">],</span> <span class="o">*</span><span class="n">sel_item</span>  <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">ssize_t</span>     <span class="n">read_size</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">size_t</span>      <span class="n">N</span><span class="p">,</span><span class="n">nblock</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">rowid_t</span>     <span class="n">repline</span>   <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="c">/* ハッシュテーブルへ追加 */</span>
  <span class="n">hash_value</span> <span class="o">=</span> <span class="n">calcHashValue</span><span class="p">(</span><span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">));</span>

  <span class="n">pthread_mutex_lock</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">hash_mutex</span><span class="p">[</span><span class="n">hash_value</span><span class="p">]</span> <span class="p">);</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span> <span class="p">);</span>
      <span class="n">table_fd</span> <span class="o">=</span> <span class="n">history_fd_open</span><span class="p">(</span><span class="n">hash_value</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span> <span class="p">);</span>
    <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span> <span class="n">seek</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span> <span class="p">(</span><span class="n">read_size</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span> <span class="n">table_fd</span><span class="p">,</span> <span class="n">sel_buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">sel_buf</span><span class="p">)</span> <span class="p">)</span> <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">nblock</span>   <span class="o">=</span> <span class="n">read_size</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">);</span>
      <span class="n">sel_item</span> <span class="o">=</span> <span class="n">sel_buf</span><span class="p">;</span>
      <span class="k">for</span><span class="p">(</span><span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="n">nblock</span><span class="p">;</span> <span class="n">N</span><span class="o">++</span><span class="p">,</span> <span class="n">sel_item</span> <span class="o">++</span><span class="p">)</span>
      <span class="p">{</span>
        <span class="c">// 一致するデータがあれば追加しない</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">sel_item</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">==</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">length</span> <span class="p">)</span>
        <span class="p">{</span>
          <span class="k">if</span><span class="p">(</span> <span class="n">strncmp</span><span class="p">(</span> <span class="n">sel_item</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">length</span> <span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">)</span>
          <span class="p">{</span>
            <span class="n">repline</span> <span class="o">=</span> <span class="n">sel_item</span><span class="o">-&gt;</span><span class="n">rowid</span><span class="p">;</span>
            <span class="n">seek</span> <span class="o">=</span> <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="n">seek</span> <span class="o">+</span> <span class="n">N</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">),</span> <span class="n">SEEK_SET</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="n">seek</span> <span class="o">=</span> <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_CUR</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">assert</span><span class="p">(</span> <span class="p">(</span><span class="n">write</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ins_item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">)))</span> <span class="o">==</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">)</span> <span class="p">);</span>
  <span class="n">pthread_mutex_unlock</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">hash_mutex</span><span class="p">[</span><span class="n">hash_value</span><span class="p">]</span> <span class="p">);</span>

  <span class="c">/* 索引の追加 */</span>
  <span class="n">index</span><span class="p">.</span><span class="n">linenum</span>    <span class="o">=</span> <span class="n">ins_item</span><span class="p">.</span><span class="n">rowid</span><span class="p">;</span>
  <span class="n">index</span><span class="p">.</span><span class="n">hash_value</span> <span class="o">=</span> <span class="n">hash_value</span><span class="p">;</span>
  <span class="n">index</span><span class="p">.</span><span class="n">seek</span>       <span class="o">=</span> <span class="n">seek</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">index_insert</span><span class="p">(</span> <span class="n">index</span><span class="p">,</span> <span class="n">repline</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">};</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">hash_insert_async</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">HASH_RECORD</span>    <span class="n">item</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">HASH_RECORD</span> <span class="o">*</span><span class="p">)</span><span class="n">p</span><span class="p">;</span>

  <span class="n">free</span><span class="p">(</span><span class="n">p</span><span class="p">);</span> <span class="c">// 内容のコピーがすめば用済み</span>
  <span class="n">assert</span><span class="p">(</span> <span class="n">hash_insert</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">);</span>

  <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
  <span class="n">assert</span><span class="p">(</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">);</span>
  <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">--</span><span class="p">;</span>
  <span class="n">pthread_cond_signal</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">cond_end</span><span class="p">);</span>
  <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>

  <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 入力ファイルからハッシュテーブルを作成 */</span>
<span class="kt">int</span> <span class="nf">analyze</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">FILE</span>            <span class="o">*</span><span class="n">in</span>    <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">HASH_RECORD</span>     <span class="o">*</span><span class="n">item</span>  <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="kt">int</span>             <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="n">pthread_t</span>       <span class="kr">thread</span><span class="p">;</span>
  <span class="n">pthread_attr_t</span>  <span class="n">attr</span><span class="p">;</span>
  <span class="k">struct</span> <span class="n">timespec</span> <span class="n">ts</span><span class="p">;</span>

  <span class="k">if</span><span class="p">(</span> <span class="n">index_fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span><span class="n">in</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">))</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">){</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>

  <span class="n">pthread_attr_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">);</span>
  <span class="n">pthread_attr_setdetachstate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="n">PTHREAD_CREATE_DETACHED</span><span class="p">);</span>
  <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
  <span class="k">while</span><span class="p">(</span> <span class="o">!</span> <span class="n">feof</span><span class="p">(</span><span class="n">in</span><span class="p">)</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">item</span> <span class="o">=</span> <span class="p">(</span><span class="n">HASH_RECORD</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">)</span> <span class="p">);</span> <span class="c">/* 開放は hash_insert_async()内 */</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">item</span> <span class="o">==</span> <span class="nb">NULL</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">fgets</span><span class="p">(</span><span class="n">item</span><span class="o">-&gt;</span><span class="n">text</span><span class="p">,</span> <span class="n">TEXT_LENGTH_MAX</span><span class="p">,</span> <span class="n">in</span><span class="p">)</span> <span class="o">!=</span> <span class="nb">NULL</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
        <span class="n">item</span><span class="o">-&gt;</span><span class="n">rowid</span>  <span class="o">=</span> <span class="o">++</span><span class="n">tc</span><span class="p">.</span><span class="n">now_rowid</span><span class="p">;</span>
        <span class="n">item</span><span class="o">-&gt;</span><span class="n">length</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span> <span class="n">item</span><span class="o">-&gt;</span><span class="n">text</span> <span class="p">);</span>
        <span class="k">while</span><span class="p">(</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">&gt;=</span> <span class="n">INSERT_THREADS_MAX</span> <span class="p">)</span>
        <span class="p">{</span>
          <span class="c">/* スレッド枠のあきまち*/</span>
          <span class="n">ts</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
          <span class="n">ts</span><span class="p">.</span><span class="n">tv_nsec</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
          <span class="n">pthread_cond_timedwait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">cond_end</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ts</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="n">assert</span><span class="p">(</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">&lt;</span> <span class="n">INSERT_THREADS_MAX</span> <span class="p">);</span>
        <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">++</span><span class="p">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="kr">thread</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">attr</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="kt">void</span><span class="o">*</span><span class="p">))</span><span class="n">hash_insert_async</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">item</span><span class="p">);</span>
        <span class="n">assert</span><span class="p">(</span> <span class="n">result</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">);</span>
        <span class="k">if</span><span class="p">(</span> <span class="n">result</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">)</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">--</span><span class="p">;</span>
      <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="c">/* 放置したスレッドの回収 */</span>
  <span class="k">while</span><span class="p">(</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">ts</span><span class="p">.</span><span class="n">tv_sec</span> <span class="o">=</span> <span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
    <span class="n">ts</span><span class="p">.</span><span class="n">tv_nsec</span><span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">pthread_mutex_lock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
      <span class="n">pthread_cond_timedwait</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">cond_end</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ts</span><span class="p">);</span>
    <span class="n">pthread_mutex_unlock</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tc</span><span class="p">.</span><span class="n">mutex</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="n">fsync</span><span class="p">(</span><span class="n">index_fd</span><span class="p">);</span>
  <span class="n">history_fd_close</span><span class="p">();</span>

  <span class="n">fclose</span><span class="p">(</span><span class="n">in</span><span class="p">);</span> <span class="n">in</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* ハッシュテーブルを結合して出力 */</span>
<span class="kt">int</span> <span class="nf">hash_join</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span>  <span class="n">out_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span>  <span class="n">table_fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="n">HASH_RECORD</span> <span class="n">item</span>             <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="sc">&#39;\0&#39;</span><span class="p">}};</span>
  <span class="n">hashvalue_t</span> <span class="n">store_hash_value</span> <span class="o">=</span> <span class="p">(</span><span class="n">hashvalue_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>

  <span class="n">RAW_INDEX</span>   <span class="n">indexbuf</span><span class="p">[</span> <span class="n">INDEX_READ_CACHE</span> <span class="p">],</span> <span class="o">*</span><span class="n">index</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">rowid_t</span>     <span class="n">in_count</span>  <span class="o">=</span> <span class="mi">0</span><span class="p">,</span><span class="n">out_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">ssize_t</span>     <span class="n">read_size</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="kt">int</span>         <span class="n">nblock</span>    <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

  <span class="k">if</span><span class="p">(</span> <span class="n">index_fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>

  <span class="c">// 出力ファイルのオープン</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">out_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">O_WRONLY</span> <span class="o">|</span> <span class="n">O_CREAT</span> <span class="o">|</span> <span class="n">O_TRUNC</span><span class="p">,</span> <span class="mo">0644</span><span class="p">)</span> <span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c">// ハッシュテーブルを参照してデータ結合</span>
  <span class="n">lseek</span><span class="p">(</span><span class="n">index_fd</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
  <span class="k">while</span><span class="p">(</span> <span class="n">in_count</span> <span class="o">&lt;</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_rowid</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">read_size</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span> <span class="n">index_fd</span><span class="p">,</span> <span class="n">indexbuf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">indexbuf</span><span class="p">)</span> <span class="p">);</span>
    <span class="k">if</span><span class="p">(</span> <span class="n">read_size</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="n">nblock</span> <span class="o">=</span> <span class="n">read_size</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">);</span>
    <span class="n">index</span>  <span class="o">=</span> <span class="n">indexbuf</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span> <span class="p">;</span> <span class="n">nblock</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">nblock</span><span class="o">--</span><span class="p">,</span> <span class="n">index</span> <span class="o">++</span> <span class="p">)</span>
    <span class="p">{</span>
      <span class="n">in_count</span> <span class="o">++</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span> <span class="n">index</span><span class="o">-&gt;</span><span class="n">linenum</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="p">)</span> <span class="k">continue</span><span class="p">;</span> <span class="c">// あとで上書きされてるので無視</span>
      <span class="k">if</span><span class="p">(</span> <span class="n">index</span><span class="o">-&gt;</span><span class="n">hash_value</span> <span class="o">!=</span> <span class="n">store_hash_value</span> <span class="p">)</span>
      <span class="p">{</span>
        <span class="n">table_fd</span> <span class="o">=</span> <span class="n">history_fd_open</span><span class="p">(</span><span class="n">index</span><span class="o">-&gt;</span><span class="n">hash_value</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
        <span class="n">store_hash_value</span> <span class="o">=</span> <span class="n">index</span><span class="o">-&gt;</span><span class="n">hash_value</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="n">assert</span><span class="p">(</span> <span class="n">table_fd</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">);</span>
      <span class="c">// ハッシュテーブルから出力ファイルへ1レコード出力</span>
      <span class="n">lseek</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="n">index</span><span class="o">-&gt;</span><span class="n">seek</span><span class="p">,</span> <span class="n">SEEK_SET</span><span class="p">);</span>
      <span class="n">assert</span><span class="p">(</span> <span class="n">read</span><span class="p">(</span><span class="n">table_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">item</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">))</span> <span class="o">==</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">));</span>
      <span class="n">assert</span><span class="p">(</span> <span class="n">write</span><span class="p">(</span><span class="n">out_fd</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">item</span><span class="p">.</span><span class="n">length</span><span class="p">)</span> <span class="o">==</span> <span class="n">item</span><span class="p">.</span><span class="n">length</span> <span class="p">);</span>
      <span class="n">out_count</span> <span class="o">++</span><span class="p">;</span>
      <span class="k">if</span><span class="p">(</span> <span class="n">in_count</span> <span class="o">==</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_rowid</span> <span class="p">)</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">usleep</span><span class="p">(</span><span class="mi">1000</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">history_fd_close</span><span class="p">();</span>
  <span class="n">close</span><span class="p">(</span> <span class="n">out_fd</span> <span class="p">);</span>   <span class="n">out_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;input:%lld, output:%lld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">in_count</span><span class="p">,</span> <span class="n">out_count</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">setup</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">cmd</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
  <span class="kt">char</span> <span class="n">index_name</span> <span class="p">[</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">)</span> <span class="o">+</span> <span class="mi">32</span> <span class="p">];</span>

  <span class="n">snprintf</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">WORKDIR</span><span class="p">),</span> <span class="s">&quot;work.%d&quot;</span><span class="p">,</span> <span class="n">getpid</span><span class="p">());</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cmd</span><span class="p">),</span><span class="s">&quot;/usr/bin/mkdir -m 700 %s&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="n">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>

  <span class="n">snprintf</span><span class="p">(</span><span class="n">index_name</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">index_name</span><span class="p">),</span> <span class="s">&quot;%s/rawindex&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="k">if</span><span class="p">(</span> <span class="p">(</span> <span class="n">index_fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">(</span><span class="n">index_name</span><span class="p">,</span> <span class="n">O_RDWR</span> <span class="o">|</span> <span class="n">O_CREAT</span><span class="p">,</span> <span class="mo">0600</span><span class="p">)</span> <span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="n">HASH_TABLES_MAX</span><span class="p">;</span> <span class="n">N</span><span class="o">++</span><span class="p">){</span> <span class="n">pthread_mutex_init</span><span class="p">(</span> <span class="o">&amp;</span><span class="n">hash_mutex</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="nb">NULL</span> <span class="p">);</span> <span class="p">}</span>
  <span class="k">for</span><span class="p">(</span><span class="n">size_t</span> <span class="n">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">N</span><span class="o">&lt;</span><span class="mh">0x80</span><span class="p">;</span> <span class="n">N</span><span class="o">++</span> <span class="p">)</span>
  <span class="p">{</span>
    <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">val</span> <span class="o">=</span> <span class="p">(</span><span class="n">hashvalue_t</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">fd_history</span><span class="p">[</span><span class="n">N</span><span class="p">].</span><span class="n">fd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">teardown</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="kt">char</span> <span class="n">cmd</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>

  <span class="n">assert</span><span class="p">(</span> <span class="n">tc</span><span class="p">.</span><span class="n">now_threads</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">);</span>
 
  <span class="n">close</span><span class="p">(</span> <span class="n">index_fd</span> <span class="p">);</span> <span class="n">index_fd</span>   <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
  <span class="n">snprintf</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cmd</span><span class="p">),</span><span class="s">&quot;/usr/bin/rm -rf %s&quot;</span><span class="p">,</span> <span class="n">WORKDIR</span><span class="p">);</span>
  <span class="n">system</span><span class="p">(</span><span class="n">cmd</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span> <span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]</span> <span class="p">)</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">if</span><span class="p">(</span> <span class="n">argc</span> <span class="o">&lt;</span> <span class="mi">3</span> <span class="p">)</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;usage: %s in_file out_file</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">setup</span><span class="p">();</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">analyze</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">hash_join</span><span class="p">(</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="p">);</span>
  <span class="n">result</span> <span class="o">=</span> <span class="n">teardown</span><span class="p">();</span>

<span class="n">printf</span><span class="p">(</span><span class="s">&quot;size of HASH_RECORD = %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">HASH_RECORD</span><span class="p">)</span> <span class="p">);</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&quot;size of RAW_INDEX   = %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">RAW_INDEX</span><span class="p">)</span> <span class="p">);</span>

  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/addtag/" class="addtag" id="addtag_3532">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3532"
  >-</span><span
  class="button yellow"
  id="rating_z_3532"
  >0</span><span 
  class="button green"
  id="rating_p_3532"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3485/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3532/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3533">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/">#3533</a>(<script language="JavaScript">print_time(new Date("2007/10/27 02:59 GMT"));</script><noscript>2007/10/27 02:59 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>見直していて94行目がまずいことに気がつきました。
ハッシュテーブルのfdはクローズする前に
使用されていないことが確実でないといけませんね。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- doukaku67_2.c    2007-10-27 11:40:13.265625000 +0900</span>
<span class="gi">+++ doukaku67.c.usethread    2007-10-27 11:54:29.687500000 +0900</span>
<span class="gu">@@ -91,7 +91,12 @@</span>
     } else {
       if( (table_fd = open(table_name, O_RDWR | O_CREAT, 0600)) == -1 ){ return -1; }
     }
<span class="gd">-    if( fd_history[hist_cursor].fd != -1 ) close( fd_history[hist_cursor].fd );</span>
<span class="gi">+    if( fd_history[hist_cursor].fd != -1 )</span>
<span class="gi">+    {</span>
<span class="gi">+      pthread_mutex_lock( &amp;hash_mutex[ fd_history[hist_cursor].val ] );</span>
<span class="gi">+        close( fd_history[hist_cursor].fd );</span>
<span class="gi">+      pthread_mutex_unlock( &amp;hash_mutex[ fd_history[hist_cursor].val ] );</span>
<span class="gi">+    }</span>
     fd_history[hist_cursor].val= hash_value;
     fd_history[hist_cursor].fd = table_fd;
     hist_cursor++; hist_cursor &amp;= 0x7f;
<span class="gu">@@ -162,10 +167,8 @@</span>
   /* ハッシュテーブルへ追加 */
   hash_value = calcHashValue(ins_item.text, sizeof(ins_item.text));
 
<span class="gi">+  table_fd = history_fd_open(hash_value, 1);</span>
   pthread_mutex_lock( &amp;hash_mutex[hash_value] );
<span class="gd">-    pthread_mutex_lock( &amp;tc.mutex );</span>
<span class="gd">-      table_fd = history_fd_open(hash_value, 1);</span>
<span class="gd">-    pthread_mutex_unlock( &amp;tc.mutex );</span>
     lseek(table_fd, 0, SEEK_SET); seek = 0;
     while( (read_size = read( table_fd, sel_buf, sizeof(sel_buf) ) ) &gt; 0 )
     {
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/addtag/" class="addtag" id="addtag_3533">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3533"
  >-</span><span
  class="button yellow"
  id="rating_z_3533"
  >0</span><span 
  class="button green"
  id="rating_p_3533"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3532/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3533/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3534">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3534/">#3534</a>(<script language="JavaScript">print_time(new Date("2007/10/27 03:13 GMT"));</script><noscript>2007/10/27 03:13 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/diff/">
	  diff
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>L:17以降の差分は嘘です。 @@ -162,10 +167,8 @@
連続投稿申し訳ないです。

オープンはプロセス内で排他制御しないといけないので
クローズの時だけ排他制御を追加すれば
問題ないはずでした。
うーん、いろいろ歪みががが</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</pre></td><td class="code"><div class="highlight"><pre><span class="gd">--- doukaku67_2.c    2007-10-27 11:40:13.265625000 +0900</span>
<span class="gi">+++ doukaku67.c.usethread    2007-10-27 11:54:29.687500000 +0900</span>
<span class="gu">@@ -91,7 +91,12 @@</span>
     } else {
       if( (table_fd = open(table_name, O_RDWR | O_CREAT, 0600)) == -1 ){ return -1; }
     }
<span class="gd">-    if( fd_history[hist_cursor].fd != -1 ) close( fd_history[hist_cursor].fd );</span>
<span class="gi">+    if( fd_history[hist_cursor].fd != -1 )</span>
<span class="gi">+    {</span>
<span class="gi">+      pthread_mutex_lock( &amp;hash_mutex[ fd_history[hist_cursor].val ] );</span>
<span class="gi">+        close( fd_history[hist_cursor].fd );</span>
<span class="gi">+      pthread_mutex_unlock( &amp;hash_mutex[ fd_history[hist_cursor].val ] );</span>
<span class="gi">+    }</span>
     fd_history[hist_cursor].val= hash_value;
     fd_history[hist_cursor].fd = table_fd;
     hist_cursor++; hist_cursor &amp;= 0x7f;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3534/addtag/" class="addtag" id="addtag_3534">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/diff/">
		diff
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3534/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3534/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3534"
  >-</span><span
  class="button yellow"
  id="rating_z_3534"
  >0</span><span 
  class="button green"
  id="rating_p_3534"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3533/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3534/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3534/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


    </div>
  


  

  

  

  

  
    





<div class="comment" id="comment3484">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3484/">#3484</a>(<script language="JavaScript">print_time(new Date("2007/10/20 13:22 GMT"));</script><noscript>2007/10/20 13:22 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ファイルシステムってでっかい連想記憶装置ですよね。

というわけで、ファイルを行ごとにMD5のファイル名で分割しながら重複を調べて
それを統合してみました。
統合時にはファイル名を行番号に書き替えて、0から順に読んでいます。
MD5がかち合っていた場合は1行読んだら次に含まれている行の行番号にファイル名を
更に書き替えておきます。
あんまり一つのディレクトリにファイルが多くなりすぎてもまずいので
実際にはもう一段ハッシュして振り分けています。
メモリーの最大使用量は最も長い行の倍程度。
扱えるのは2G行までです。

調子に乗って331MByte190万行のログファイル(重複行なし)を突っ込んでみたら
3時間半経っても終わる気配がなくて止めてしまいました。
140万行くらいは読み込んでいたようです。
そこから後半だけ走らせているのですが、140万ファイルのリネームもやっぱり
3時間半近くかかるのかもしれません…(^_^;)

もう少しバランスの良さそうな方法も考えてたのですが、こういう場なので
行くとこまで行ってみるのもいいかなと…
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nv">$t</span><span class="o">=</span><span class="nf">time</span><span class="p">();</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$fp</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="s2">&quot;rt&quot;</span><span class="p">)))</span>
    <span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>

<span class="c">// 行ごとにファイル&quot;tmp1/(crc12)/(md5)&quot;に振り分け</span>
<span class="o">@</span><span class="nf">mkdir</span><span class="p">(</span><span class="s2">&quot;tmp1&quot;</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$line</span><span class="o">=</span><span class="m">0</span><span class="p">;(</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fgets</span><span class="p">(</span><span class="nv">$fp</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">;</span><span class="o">++</span><span class="nv">$line</span><span class="p">)</span>
<span class="p">{</span>    <span class="nv">$path</span><span class="o">=</span><span class="nf">sprintf</span><span class="p">(</span><span class="s2">&quot;tmp1/%x&quot;</span><span class="p">,</span><span class="nf">crc32</span><span class="p">(</span><span class="nv">$str</span><span class="p">)</span><span class="o">&amp;</span><span class="m">0</span><span class="nx">xfff</span><span class="p">);</span>
    <span class="o">@</span><span class="nf">mkdir</span><span class="p">(</span><span class="nv">$path</span><span class="p">);</span>
    <span class="nv">$path</span><span class="o">.=</span><span class="s2">&quot;/&quot;</span><span class="o">.</span><span class="nf">md5</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
    <span class="nv">$len</span><span class="o">=</span><span class="nf">strlen</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
    <span class="k">if</span><span class="p">((</span><span class="nv">$fp1</span><span class="o">=@</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span><span class="s2">&quot;r+b&quot;</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>    <span class="nv">$tail</span><span class="o">=</span><span class="m">0</span><span class="p">;</span> <span class="nv">$p</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
        <span class="k">while</span><span class="p">((</span><span class="nv">$str2</span><span class="o">=</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="m">8</span><span class="p">))</span><span class="o">!==</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
        <span class="p">{</span>    <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l2&quot;</span><span class="p">,</span><span class="nv">$str2</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">&gt;=</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="o">==</span><span class="nv">$len</span><span class="p">)</span>
            <span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$len</span><span class="p">)</span><span class="o">==</span><span class="nv">$str</span><span class="p">)</span>
                <span class="p">{</span>    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$p</span><span class="p">);</span>
                    <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="o">-</span><span class="m">1</span><span class="p">));</span>
                    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">]</span><span class="o">+</span><span class="m">4</span><span class="p">,</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
                    <span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">=-</span><span class="m">1</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">else</span>
                <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">],</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
            <span class="nv">$p</span><span class="o">=</span><span class="nf">ftell</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">&gt;=</span><span class="m">0</span><span class="p">)</span>
            <span class="p">{</span>    <span class="k">echo</span> <span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="s2">&quot;,&quot;</span><span class="p">;</span>
                <span class="nv">$tail</span><span class="o">=</span><span class="nv">$p</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$tail</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
            <span class="k">echo</span> <span class="s2">&quot;</span><span class="si">$line</span><span class="s2"> hash collision</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
        <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$tail</span><span class="p">);</span>
        <span class="nf">ftruncate</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$tail</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">((</span><span class="nv">$fp1</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span><span class="s2">&quot;wb&quot;</span><span class="p">))</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
        <span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
    <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l2&quot;</span><span class="p">,</span><span class="nv">$line</span><span class="p">,</span><span class="nv">$len</span><span class="p">));</span>
    <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
    <span class="nf">fclose</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>

<span class="c">// ハッシュファイルを &quot;tmp2/(行番号/1000)/(行番号)&quot; にリネーム</span>
<span class="o">@</span><span class="nf">mkdir</span><span class="p">(</span><span class="s2">&quot;tmp2&quot;</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="nv">$dh</span> <span class="o">=</span> <span class="nf">opendir</span><span class="p">(</span><span class="s2">&quot;tmp1&quot;</span><span class="p">))</span>
<span class="p">{</span>    <span class="k">while</span><span class="p">((</span><span class="nv">$dir</span> <span class="o">=</span> <span class="nf">readdir</span><span class="p">(</span><span class="nv">$dh</span><span class="p">))</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nf">substr</span><span class="p">(</span><span class="nv">$dir</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">1</span><span class="p">)</span><span class="o">!=</span><span class="s1">&#39;.&#39;</span><span class="o">&amp;&amp;</span><span class="nf">is_dir</span><span class="p">(</span><span class="s2">&quot;tmp1/</span><span class="si">$dir</span><span class="s2">&quot;</span><span class="p">))</span>
        <span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nv">$dh1</span> <span class="o">=</span> <span class="nf">opendir</span><span class="p">(</span><span class="s2">&quot;tmp1/</span><span class="si">$dir</span><span class="s2">&quot;</span><span class="p">))</span>
            <span class="p">{</span>    <span class="k">while</span><span class="p">((</span><span class="nv">$file</span> <span class="o">=</span> <span class="nf">readdir</span><span class="p">(</span><span class="nv">$dh1</span><span class="p">))</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span>
                <span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="nf">is_file</span><span class="p">(</span><span class="nv">$path</span><span class="o">=</span><span class="s2">&quot;tmp1/</span><span class="si">$dir</span><span class="s2">/</span><span class="si">$file</span><span class="s2">&quot;</span><span class="p">))</span>
                    <span class="p">{</span>    <span class="k">if</span><span class="p">((</span><span class="nv">$fp</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span><span class="s2">&quot;rb&quot;</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
                        <span class="p">{</span>    <span class="nv">$l</span><span class="o">=-</span><span class="m">1</span><span class="p">;</span>
                            <span class="k">while</span><span class="p">((</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">8</span><span class="p">))</span><span class="o">!==</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
                            <span class="p">{</span>    <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l2&quot;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
                                <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">&gt;=</span><span class="m">0</span><span class="p">)</span>
                                <span class="p">{</span>    <span class="nv">$l</span><span class="o">=</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
                                    <span class="k">break</span><span class="p">;</span>
                                <span class="p">}</span>
                                <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">],</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
                            <span class="p">}</span>
                            <span class="nf">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
                            <span class="k">if</span><span class="p">(</span><span class="nv">$l</span><span class="o">&gt;=</span><span class="m">0</span><span class="p">)</span>
                            <span class="p">{</span>    <span class="nv">$path2</span><span class="o">=</span><span class="s2">&quot;tmp2/&quot;</span><span class="o">.</span><span class="p">(</span><span class="nx">int</span><span class="p">)(</span><span class="nv">$l</span><span class="o">/</span><span class="m">1000</span><span class="p">);</span>
                                <span class="o">@</span><span class="nf">mkdir</span><span class="p">(</span><span class="nv">$path2</span><span class="p">);</span>
                                <span class="nf">rename</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span><span class="s2">&quot;</span><span class="si">$path2</span><span class="s2">/</span><span class="si">$l</span><span class="s2">&quot;</span><span class="p">);</span>
                            <span class="p">}</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c">// 行番号順にファイルを読んで出力</span>
<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$fp</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">2</span><span class="p">],</span><span class="s2">&quot;wt&quot;</span><span class="p">)))</span>
    <span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$l</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$l</span><span class="o">&lt;</span><span class="nv">$line</span><span class="p">;</span><span class="o">++</span><span class="nv">$l</span><span class="p">)</span>
<span class="p">{</span>    <span class="nv">$path</span><span class="o">=</span><span class="s2">&quot;tmp2/&quot;</span><span class="o">.</span><span class="p">(</span><span class="nx">int</span><span class="p">)(</span><span class="nv">$l</span><span class="o">/</span><span class="m">1000</span><span class="p">)</span><span class="o">.</span><span class="s2">&quot;/</span><span class="si">$l</span><span class="s2">&quot;</span><span class="p">;</span>
    <span class="k">if</span><span class="p">((</span><span class="nv">$fp1</span><span class="o">=@</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span><span class="s2">&quot;rb&quot;</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">)</span>
    <span class="p">{</span>    <span class="nv">$next</span><span class="o">=-</span><span class="m">1</span><span class="p">;</span>
        <span class="k">while</span><span class="p">((</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="m">8</span><span class="p">))</span><span class="o">!==</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
        <span class="p">{</span>    <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l2&quot;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">==</span><span class="nv">$l</span><span class="p">)</span>
            <span class="p">{</span>    <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">]));</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">&gt;</span><span class="nv">$l</span><span class="p">)</span>
            <span class="p">{</span>    <span class="nv">$next</span><span class="o">=</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">],</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="nf">fclose</span><span class="p">(</span><span class="nv">$fp1</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$next</span><span class="o">&lt;</span><span class="m">0</span><span class="p">)</span>
            <span class="nf">unlink</span><span class="p">(</span><span class="nv">$path</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="nf">rename</span><span class="p">(</span><span class="nv">$path</span><span class="p">,</span><span class="s2">&quot;tmp2/&quot;</span><span class="o">.</span><span class="p">(</span><span class="nx">int</span><span class="p">)(</span><span class="nv">$next</span><span class="o">/</span><span class="m">1000</span><span class="p">)</span><span class="o">.</span><span class="s2">&quot;/</span><span class="si">$next</span><span class="s2">&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="nf">fclose</span><span class="p">(</span><span class="nv">$fp</span><span class="p">);</span>
<span class="k">echo</span> <span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="nv">$t</span><span class="p">,</span><span class="s2">&quot;sec</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3484/addtag/" class="addtag" id="addtag_3484">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3484/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3484/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3484"
  >-</span><span
  class="button yellow"
  id="rating_z_3484"
  >0</span><span 
  class="button green"
  id="rating_p_3484"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3484/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3484/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3486">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/127/" target="_top">raynstard</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3486/">#3486</a>(<script language="JavaScript">print_time(new Date("2007/10/20 13:54 GMT"));</script><noscript>2007/10/20 13:54 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>基本は同じ発想なのだと思われ、でもそうすると
MD5等のメッセージダイジェストはつかっちゃだめだとおもいます。
衝突する確率がごくわずかなので
単純にファイル総なめにするよりも効率悪くなってします。
ある程度衝突させることで比較する行数を
へらすのが目的だと思うので。。。。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3486/addtag/" class="addtag" id="addtag_3486">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3486"
  >-</span><span
  class="button yellow"
  id="rating_z_3486"
  >0</span><span 
  class="button green"
  id="rating_p_3486"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3484/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3486/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20090429062155/http://ja.doukaku.org/comment/3486/">
    1
    reply
  </a>

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3486/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3487">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3487/">#3487</a>(<script language="JavaScript">print_time(new Date("2007/10/20 19:11 GMT"));</script><noscript>2007/10/20 19:11 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>ディレクトリエントリの更新にはえらくコストがかかるのですね。
ここまでとは…。
ファイルの数は開いたままに出来る範囲がいいんでしょうかね。
リネームどころか、140万個のファイルを消すのにまだあと何時間か
かかりそうです(^_^;)
という訳で、やり方を変えてみたのですが、まるっきり別物になったので
別スレッドに…。
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3487/addtag/" class="addtag" id="addtag_3487">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3487"
  >-</span><span
  class="button yellow"
  id="rating_z_3487"
  >0</span><span 
  class="button green"
  id="rating_p_3487"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3486/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20090429062155/http://ja.doukaku.org/comment/3487/root/"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3487/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  

  

  
    





<div class="comment" id="comment3488">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3488/">#3488</a>(<script language="JavaScript">print_time(new Date("2007/10/20 19:19 GMT"));</script><noscript>2007/10/20 19:19 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>各行のcrcをとり、その内の5bitで32のファイルに振り分け、
各ファイルの中では別の11bitで2048の一方向リストに振り分けることで
比較の回数を削減しつつディスクアクセスのオーバーヘッドを減らしました。
最後にマージソートしていますが、その際はリンクリストは無視して
ファイル上の並び順でそのまま合ってるので簡単です。

上限は2G行または32個のハッシュファイルのどれかが2G越えるまでなので
4Gくらいなら楽勝デス。

330MByte 190万行 を(デスクトップは140万個のファイルの削除中のため)
ノートPCの2.5インチ5400rpmのHDDで処理したところ 799秒でした。

webサーバのログだったのですが、分割ダウンロードしているヒトがいると
重複する行がけっこうあるんですね…。同じファイルが出来ると思っていたら
ファイルサイズが小さくなっていてびっくりしました。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nf">define</span><span class="p">(</span><span class="s2">&quot;HUSHBIT1&quot;</span><span class="p">,</span><span class="m">11</span><span class="p">);</span>
<span class="nf">define</span><span class="p">(</span><span class="s2">&quot;HUSHBIT2&quot;</span><span class="p">,</span><span class="m">5</span><span class="p">);</span>
<span class="nv">$t</span><span class="o">=</span><span class="nf">time</span><span class="p">();</span>

<span class="nv">$tmpdir</span> <span class="o">=</span> <span class="nf">tempnam</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">,</span> <span class="s2">&quot;tmp&quot;</span><span class="p">);</span>
<span class="o">@</span><span class="nf">unlink</span><span class="p">(</span><span class="nv">$tmpdir</span><span class="p">);</span>
<span class="o">@</span><span class="nf">mkdir</span><span class="p">(</span><span class="nv">$tmpdir</span><span class="p">);</span>
<span class="nv">$tmp</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>

<span class="nv">$b</span><span class="o">=</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="m">0</span><span class="p">);</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="p">(</span><span class="m">1</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT2</span><span class="p">);</span><span class="o">++</span><span class="nv">$i</span><span class="p">)</span>
<span class="p">{</span>    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nv">$fp</span> <span class="o">=</span> <span class="nf">fopen</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$tmpdir</span><span class="s2">/</span><span class="si">$i</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;w+b&quot;</span><span class="p">)))</span>
        <span class="k">exit</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="nv">$j</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$j</span><span class="o">&lt;</span><span class="p">(</span><span class="m">1</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT1</span><span class="p">);</span><span class="o">++</span><span class="nv">$j</span><span class="p">)</span>
        <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$b</span><span class="p">);</span>
    <span class="nv">$tmp</span><span class="p">[]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">4</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$line</span><span class="o">=</span><span class="m">0</span><span class="p">;(</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fgets</span><span class="p">(</span><span class="nx">STDIN</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">;</span><span class="o">++</span><span class="nv">$line</span><span class="p">)</span>
<span class="p">{</span>    <span class="nv">$crc</span><span class="o">=</span><span class="nf">crc32</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
    <span class="nv">$len</span><span class="o">=</span><span class="nf">strlen</span><span class="p">(</span><span class="nv">$str</span><span class="p">);</span>
    <span class="nv">$crc1</span><span class="o">=</span><span class="nv">$crc</span><span class="o">&amp;</span><span class="p">((</span><span class="m">1</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT1</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">);</span>
    <span class="nv">$crc2</span><span class="o">=</span><span class="p">(</span><span class="nv">$crc</span><span class="o">&gt;&gt;</span><span class="nx">HUSHBIT1</span><span class="p">)</span><span class="o">&amp;</span><span class="p">((</span><span class="m">1</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT2</span><span class="p">)</span><span class="o">-</span><span class="m">1</span><span class="p">);</span>
    <span class="nv">$fp</span><span class="o">=</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$crc2</span><span class="p">][</span><span class="m">0</span><span class="p">];</span>
    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$crc1</span><span class="o">&lt;&lt;</span><span class="m">2</span><span class="p">);</span>
    <span class="k">list</span><span class="p">(,</span><span class="nv">$p</span><span class="p">)</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">4</span><span class="p">));</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$p</span><span class="p">)</span>
    <span class="p">{</span>    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="o">-</span><span class="m">4</span><span class="p">,</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
        <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$crc2</span><span class="p">][</span><span class="m">1</span><span class="p">]));</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>    <span class="k">do</span><span class="p">{</span>
            <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$p</span><span class="p">);</span>
            <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l3&quot;</span><span class="p">,</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">12</span><span class="p">));</span>
            <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">&gt;=</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$a</span><span class="p">[</span><span class="m">3</span><span class="p">]</span><span class="o">==</span><span class="nv">$len</span><span class="p">)</span>
            <span class="p">{</span>    <span class="nv">$str2</span><span class="o">=</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$len</span><span class="p">);</span>
                <span class="k">if</span><span class="p">(</span><span class="nv">$str2</span><span class="o">==</span><span class="nv">$str</span><span class="p">)</span>
                <span class="p">{</span>    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$p</span><span class="p">);</span>
                    <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="o">-</span><span class="m">1</span><span class="p">));</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">])</span>
            <span class="p">{</span>    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$p</span><span class="o">+</span><span class="m">4</span><span class="p">);</span>
                <span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$crc2</span><span class="p">][</span><span class="m">1</span><span class="p">]));</span>
                <span class="k">break</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nv">$p</span><span class="o">=</span><span class="nv">$a</span><span class="p">[</span><span class="m">2</span><span class="p">];</span>
        <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$crc2</span><span class="p">][</span><span class="m">1</span><span class="p">]);</span>
    <span class="nv">$l</span><span class="o">=</span><span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nf">pack</span><span class="p">(</span><span class="s2">&quot;l3&quot;</span><span class="p">,</span><span class="nv">$line</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="nv">$len</span><span class="p">));</span>
    <span class="nv">$l</span><span class="o">+=</span><span class="nf">fwrite</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
    <span class="nv">$tmp</span><span class="p">[</span><span class="nv">$crc2</span><span class="p">][</span><span class="m">1</span><span class="p">]</span><span class="o">+=</span><span class="nv">$l</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$sortbuf</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="p">(</span><span class="m">1</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT2</span><span class="p">);</span><span class="o">++</span><span class="nv">$i</span><span class="p">)</span>
<span class="p">{</span>    <span class="nv">$fp</span><span class="o">=</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="m">0</span><span class="p">];</span>
    <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">4</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT1</span><span class="p">);</span>
    <span class="k">while</span><span class="p">((</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">8</span><span class="p">))</span><span class="o">!=</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
    <span class="p">{</span>    <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l2&quot;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">]</span><span class="o">&gt;=</span><span class="m">0</span><span class="p">)</span>
        <span class="p">{</span>    <span class="nv">$sortbuf</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">=</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">];</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">4</span><span class="p">));</span>
        <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">while</span><span class="p">(</span><span class="nf">count</span><span class="p">(</span><span class="nv">$sortbuf</span><span class="p">))</span>
<span class="p">{</span>    <span class="nf">asort</span><span class="p">(</span><span class="nv">$sortbuf</span><span class="p">);</span>
    <span class="nv">$i</span><span class="o">=</span><span class="nf">key</span><span class="p">(</span><span class="nv">$sortbuf</span><span class="p">);</span>
    <span class="nv">$fp</span><span class="o">=</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="m">0</span><span class="p">];</span>
    <span class="k">list</span><span class="p">(,</span><span class="nv">$len</span><span class="p">)</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">4</span><span class="p">));</span>
    <span class="k">echo</span> <span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$len</span><span class="p">);</span>
    <span class="k">do</span><span class="p">{</span>
        <span class="k">if</span><span class="p">((</span><span class="nv">$str</span><span class="o">=</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">8</span><span class="p">))</span><span class="o">==</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
        <span class="p">{</span>    <span class="nf">unset</span><span class="p">(</span><span class="nv">$sortbuf</span><span class="p">[</span><span class="nv">$i</span><span class="p">]);</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">list</span><span class="p">(,</span><span class="nv">$sortbuf</span><span class="p">[</span><span class="nv">$i</span><span class="p">])</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l2&quot;</span><span class="p">,</span><span class="nv">$str</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nv">$sortbuf</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="o">&gt;=</span><span class="m">0</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="nv">$a</span><span class="o">=</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">&quot;l&quot;</span><span class="p">,</span><span class="nf">fread</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="m">4</span><span class="p">));</span>
        <span class="nf">fseek</span><span class="p">(</span><span class="nv">$fp</span><span class="p">,</span><span class="nv">$a</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="nx">SEEK_CUR</span><span class="p">);</span>
    <span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="m">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$i</span><span class="o">&lt;</span><span class="p">(</span><span class="m">1</span><span class="o">&lt;&lt;</span><span class="nx">HUSHBIT2</span><span class="p">);</span><span class="o">++</span><span class="nv">$i</span><span class="p">)</span>
<span class="p">{</span>    <span class="nf">fclose</span><span class="p">(</span><span class="nv">$tmp</span><span class="p">[</span><span class="nv">$i</span><span class="p">][</span><span class="m">0</span><span class="p">]);</span>
    <span class="nf">unlink</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">$tmpdir</span><span class="s2">/</span><span class="si">$i</span><span class="s2">&quot;</span><span class="p">);</span>
<span class="p">}</span>
<span class="nf">rmdir</span><span class="p">(</span><span class="nv">$tmpdir</span><span class="p">);</span>

<span class="nf">fwrite</span><span class="p">(</span><span class="nx">STDERR</span><span class="p">,</span><span class="nf">sprintf</span><span class="p">(</span><span class="s2">&quot;%dsec</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">,</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="nv">$t</span><span class="p">));</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3488/addtag/" class="addtag" id="addtag_3488">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3488/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3488/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3488"
  >-</span><span
  class="button yellow"
  id="rating_z_3488"
  >0</span><span 
  class="button green"
  id="rating_p_3488"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3488/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment3490">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/98/" target="_top">nobsun</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3490/">#3490</a>(<script language="JavaScript">print_time(new Date("2007/10/22 01:11 GMT"));</script><noscript>2007/10/22 01:11 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>200K行ごとにチャンクファイルに出力しながら計算をするめるようにした．

このコードではチャンクファイルの行数を200kに固定してあるので，
入力ファイルの大きさによってメモリ使用量を調整できないプログラムになっている．

1行61バイト200K行で12.2MBになる．このプログラムでは1行61バイトのデータなら
200K行以上では常に一定のメモリ使用量になる．したがって，そのメモリ使用量の
2倍以上のファイルを入力しないと，お題の条件「メモリ使用量はファイルサイズの
半分以下」を満たせない．

実際にそのメモリ量はというとなんと880MB！！である．なんじゃこりゃーっ！！

だとすると880 * 2 = 1.76 GB以上のファイルを扱えば，お題を満たすことにはなる．
でも，現実的な時間で処理が終了が終わるとは思えないなぁ．

実際どのくらいの計算時間になるか，小さいサイズの入力データを以下のコードで
生成して実験計測してみた．以下のコードで生成されるデータは1行60カラム幅に
n * 1000000 から 1 までの数字を右寄せ'0'詰めで出力しただけのものである．
このデータでは最悪のケース(重複がないケース)の計測となる．

すべてオンメモリで処理できる場合には，O(n log n)の計算だが，一定量の
Chunkに分解したので，O(n^2)の計算になっていると予想される．

-- テストデータ生成プログラム --

module Main where
import System.Environment
import Text.Printf

m :: Integer
m = 1000000

main :: IO ()
main = do { args &lt;- getArgs
          ; case args of
              [] -&gt; loop m 
              a:_-&gt; loop (read a * m)
          }

loop :: Integer -&gt; IO ()
loop 0 = return ()
loop n = printf "%060d\n" n &gt;&gt; loop (n-1)

----
とりあえず， 1 M 行からは 5 M 行までのケースで計測すると

   行数      ファイルサイズ      処理時間
 1,000,000        61 MB             242 s
 2,000,000       122 MB             802 s
 3,000,000       183 MB            1735 s
 4,000,000       244 MB            2975 s
 5,000,000       305 MB            4381 s

どの場合にも，メモリ使用量は最大 880 MB程度．
でたとえば，30 M 行にすればファイルサイズ 1.83 G で
メモリ使用量の 2倍を超えることになる．プログラムとしては動作できる．
処理時間は最悪の見積りで 170,000 s ≒ 47 時間くらいかなぁ．
丸二日ということになるなぁ．ううむ．ちょっとこのままじゃ
実用にならない．orz
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="nv">qualified</span> <span class="n">Data</span><span class="o">.</span><span class="n">Set</span> <span class="nv">as</span> <span class="n">S</span>
<span class="kr">import</span> <span class="n">System</span><span class="o">.</span><span class="n">IO</span>

<span class="nv">nl</span> <span class="o">::</span> <span class="n">Int</span>
<span class="nv">nl</span> <span class="o">=</span> <span class="mi">200000</span>

<span class="kr">data</span> <span class="n">N</span> <span class="o">=</span> <span class="n">N</span> <span class="p">{</span> <span class="nv">pair</span> <span class="o">::</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span><span class="n">String</span><span class="p">)</span> <span class="p">}</span>
<span class="kr">instance</span> <span class="n">Eq</span>  <span class="n">N</span> <span class="kr">where</span> <span class="n">N</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="o">==</span> <span class="n">N</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">t</span><span class="p">)</span> <span class="o">=</span> <span class="nv">s</span> <span class="o">==</span> <span class="nv">t</span>
<span class="kr">instance</span> <span class="n">Ord</span> <span class="n">N</span> <span class="kr">where</span> <span class="n">N</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">s</span><span class="p">)</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="n">N</span> <span class="p">(</span><span class="kr">_</span><span class="p">,</span><span class="nv">t</span><span class="p">)</span> <span class="o">=</span> <span class="nv">s</span> <span class="p">`</span><span class="nv">compare</span><span class="p">`</span> <span class="nv">t</span>

<span class="nv">main</span> <span class="o">::</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">n</span> <span class="o">&lt;-</span> <span class="nv">uniqSplit</span> <span class="p">[]</span> <span class="mi">0</span> <span class="nv">nl</span>
          <span class="p">;</span> <span class="nv">differs</span> <span class="nv">n</span>
          <span class="p">;</span> <span class="nv">mapM_</span> <span class="nv">cat</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">n</span><span class="p">]</span>
          <span class="p">}</span>

<span class="nv">cat</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">cat</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">readFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">n</span><span class="p">)</span> <span class="o">&gt;&gt;=</span> <span class="nv">putStr</span>

<span class="nv">uniqSplit</span> <span class="o">::</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">Int</span>
<span class="nv">uniqSplit</span> <span class="nv">ls</span> <span class="nv">n</span> <span class="mi">0</span> <span class="o">=</span> <span class="nv">writeFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">unlines</span> <span class="p">(</span><span class="nv">nset2ls</span> <span class="o">.</span> <span class="nv">rls2nset</span> <span class="o">$</span> <span class="nv">ls</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="nv">uniqSplit</span> <span class="p">[]</span> <span class="p">(</span><span class="nv">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">nl</span>
<span class="nv">uniqSplit</span> <span class="nv">ls</span> <span class="nv">n</span> <span class="nv">m</span> 
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">eof</span> <span class="o">&lt;-</span> <span class="nv">isEOF</span>
      <span class="p">;</span> <span class="kr">if</span> <span class="nv">not</span> <span class="nv">eof</span> <span class="kr">then</span> <span class="nv">getLine</span> <span class="o">&gt;&gt;=</span> <span class="o">\</span> <span class="nv">l</span> <span class="o">-&gt;</span> <span class="nv">uniqSplit</span> <span class="p">(</span><span class="nv">l</span><span class="o">:</span><span class="nv">ls</span><span class="p">)</span> <span class="nv">n</span> <span class="p">(</span><span class="nv">m</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
        <span class="kr">else</span> <span class="kr">if</span> <span class="nv">m</span> <span class="o">==</span> <span class="nv">nl</span> <span class="kr">then</span> <span class="nv">return</span> <span class="p">(</span><span class="nv">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
             <span class="kr">else</span> <span class="nv">writeFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nv">unlines</span> <span class="p">(</span><span class="nv">nset2ls</span> <span class="o">.</span> <span class="nv">rls2nset</span> <span class="o">$</span> <span class="nv">ls</span><span class="p">))</span> <span class="o">&gt;&gt;</span> <span class="nv">return</span> <span class="nv">n</span>
      <span class="p">}</span>

<span class="nv">sf</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">FilePath</span>
<span class="nv">sf</span> <span class="nv">n</span> <span class="o">=</span> <span class="s">&quot;test/&quot;</span><span class="o">++</span><span class="nv">show</span> <span class="nv">n</span>

<span class="nv">nset2ls</span> <span class="o">::</span> <span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">N</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span>
<span class="nv">nset2ls</span> <span class="o">=</span> <span class="nv">map</span> <span class="nv">snd</span> <span class="o">.</span> <span class="n">S</span><span class="o">.</span><span class="nv">toAscList</span> <span class="o">.</span> <span class="n">S</span><span class="o">.</span><span class="nv">map</span> <span class="nv">pair</span>

<span class="nv">rls2nset</span> <span class="o">::</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">N</span>
<span class="nv">rls2nset</span> <span class="o">=</span> <span class="nv">foldr</span> <span class="n">S</span><span class="o">.</span><span class="nv">insert</span> <span class="n">S</span><span class="o">.</span><span class="nv">empty</span> <span class="o">.</span> <span class="nv">zipWith</span> <span class="p">((</span><span class="n">N</span> <span class="o">.</span><span class="p">)</span> <span class="o">.</span> <span class="p">(,))</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span>

<span class="nv">uls2nset</span> <span class="o">::</span> <span class="p">[</span><span class="n">String</span><span class="p">]</span> <span class="o">-&gt;</span> <span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">N</span>
<span class="nv">uls2nset</span> <span class="o">=</span> <span class="n">S</span><span class="o">.</span><span class="nv">fromList</span> <span class="o">.</span> <span class="nv">zipWith</span> <span class="p">((</span><span class="n">N</span> <span class="o">.</span><span class="p">)</span> <span class="o">.</span> <span class="p">(,))</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">]</span>

<span class="nv">differs</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">()</span>
<span class="nv">differs</span> <span class="mi">0</span> <span class="o">=</span> <span class="nv">return</span> <span class="p">()</span>
<span class="nv">differs</span> <span class="nv">m</span> <span class="o">=</span> <span class="nv">nset</span> <span class="nv">m</span> <span class="o">&gt;&gt;=</span> <span class="nv">diffs</span> <span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="nv">m</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="nv">differs</span> <span class="p">(</span><span class="nv">m</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="nv">nset</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="n">Set</span> <span class="n">N</span><span class="p">)</span>
<span class="nv">nset</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">return</span> <span class="o">.</span> <span class="nv">uls2nset</span> <span class="o">.</span> <span class="nv">lines</span> <span class="o">=&lt;&lt;</span> <span class="nv">readFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">n</span><span class="p">)</span>

<span class="nv">nline</span> <span class="o">::</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="p">[</span><span class="n">N</span><span class="p">]</span>
<span class="nv">nline</span> <span class="nv">n</span> <span class="o">=</span> <span class="nv">return</span> <span class="o">.</span> <span class="nv">zipWith</span> <span class="p">((</span><span class="n">N</span> <span class="o">.</span><span class="p">)</span> <span class="o">.</span> <span class="p">(,))</span> <span class="p">[</span><span class="mi">1</span><span class="o">..</span><span class="p">]</span> <span class="o">.</span> <span class="nv">lines</span> <span class="o">=&lt;&lt;</span> <span class="nv">readFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">n</span><span class="p">)</span>

<span class="nv">diffs</span> <span class="p">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="nv">return</span> <span class="p">()</span>
<span class="nv">diffs</span> <span class="p">(</span><span class="nv">m</span><span class="o">:</span><span class="nv">ms</span><span class="p">)</span> <span class="nv">nst</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">mst</span> <span class="o">&lt;-</span> <span class="nv">nset</span> <span class="nv">m</span>
      <span class="p">;</span> <span class="kr">let</span> <span class="nv">diff</span> <span class="o">=</span> <span class="nv">mst</span> <span class="n">S</span><span class="o">.\\</span> <span class="nv">nst</span>
      <span class="p">;</span> <span class="nv">seq</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="nv">size</span> <span class="nv">diff</span><span class="p">)</span> <span class="o">$</span> <span class="nv">writeFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nv">unlines</span> <span class="o">$</span> <span class="nv">nset2ls</span> <span class="nv">diff</span><span class="p">)</span>
      <span class="p">;</span> <span class="nv">diffs</span> <span class="nv">ms</span> <span class="nv">nst</span>
      <span class="p">}</span>

<span class="nv">diffs&#39;</span> <span class="p">[]</span> <span class="kr">_</span> <span class="o">=</span> <span class="nv">return</span> <span class="p">()</span>
<span class="nv">diffs&#39;</span> <span class="p">(</span><span class="nv">m</span><span class="o">:</span><span class="nv">ms</span><span class="p">)</span> <span class="nv">nst</span>
 <span class="o">=</span> <span class="kr">do</span> <span class="p">{</span> <span class="nv">mst</span> <span class="o">&lt;-</span> <span class="nv">nset</span> <span class="nv">m</span>
      <span class="p">;</span> <span class="kr">let</span> <span class="nv">diff</span> <span class="o">=</span> <span class="nv">foldr</span> <span class="n">S</span><span class="o">.</span><span class="nv">delete</span> <span class="nv">mst</span> <span class="nv">nst</span>
      <span class="p">;</span> <span class="nv">seq</span> <span class="p">(</span><span class="n">S</span><span class="o">.</span><span class="nv">size</span> <span class="nv">diff</span><span class="p">)</span> <span class="o">$</span> <span class="nv">writeFile</span> <span class="p">(</span><span class="nv">sf</span> <span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nv">unlines</span> <span class="o">$</span> <span class="nv">nset2ls</span> <span class="nv">diff</span><span class="p">)</span>
      <span class="p">;</span> <span class="nv">diffs&#39;</span> <span class="nv">ms</span> <span class="nv">nst</span>
      <span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3490/addtag/" class="addtag" id="addtag_3490">タグ</a>:
	
    
    <a href="/web/20090429062155/http://ja.doukaku.org/tag/Data.Set/">Data.Set</a>
    
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3490/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3490/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3490"
  >-</span><span
  class="button yellow"
  id="rating_z_3490"
  >0</span><span 
  class="button green"
  id="rating_p_3490"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3490/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  

  

  

  

  
    





<div class="comment" id="comment3530">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/136/" target="_top">matarillo</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3530/">#3530</a>(<script language="JavaScript">print_time(new Date("2007/10/26 10:32 GMT"));</script><noscript>2007/10/26 10:32 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>わりとまじめに書いたので長くなりました。
ファイルアクセスがすこしでも少なくなるようにSeekすることにしましたが、どんなもんでしょうか。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Collections.Generic</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Text</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.IO</span><span class="p">;</span>

<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
  <span class="k">static</span> <span class="n">Encoding</span> <span class="n">enc</span> <span class="p">=</span> <span class="n">Encoding</span><span class="p">.</span><span class="n">Default</span><span class="p">;</span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="n">IDictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;&gt;</span> <span class="n">hashtable</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;&gt;();</span>
    <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;&gt;</span> <span class="n">collision</span> <span class="p">=</span> <span class="k">new</span> <span class="n">SortedList</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">,</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;&gt;();</span>
    <span class="k">using</span> <span class="p">(</span><span class="n">FileStream</span> <span class="n">fs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">FileStream</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">FileMode</span><span class="p">.</span><span class="n">Open</span><span class="p">,</span> <span class="n">FileAccess</span><span class="p">.</span><span class="n">Read</span><span class="p">))</span>
    <span class="k">{</span>
      <span class="k">using</span> <span class="p">(</span><span class="n">BufferedStream</span> <span class="n">bs</span> <span class="p">=</span> <span class="k">new</span> <span class="n">BufferedStream</span><span class="p">(</span><span class="n">fs</span><span class="p">))</span>
      <span class="k">{</span>
        <span class="c">// 重複候補の位置をリストに保存</span>
        <span class="kt">long</span> <span class="n">currentPosition</span> <span class="p">=</span> <span class="m">0L</span><span class="p">;</span>
        <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">bytes</span> <span class="p">=</span> <span class="n">ReadLine</span><span class="p">(</span><span class="n">bs</span><span class="p">)).</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">{</span>
          <span class="kt">string</span> <span class="n">line</span> <span class="p">=</span> <span class="n">enc</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
          <span class="kt">int</span> <span class="n">hash</span> <span class="p">=</span> <span class="n">line</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">();</span>
          <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;</span> <span class="n">list</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
          <span class="k">if</span> <span class="p">(!</span><span class="n">hashtable</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">hash</span><span class="p">))</span>
          <span class="k">{</span>
            <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;();</span>
            <span class="n">hashtable</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="n">list</span><span class="p">);</span>
          <span class="k">}</span>
          <span class="k">else</span>
          <span class="k">{</span>
            <span class="n">list</span> <span class="p">=</span> <span class="n">hashtable</span><span class="p">[</span><span class="n">hash</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">1</span><span class="p">)</span>
              <span class="n">collision</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">],</span> <span class="n">list</span><span class="p">);</span>
            <span class="n">collision</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">currentPosition</span><span class="p">,</span> <span class="n">list</span><span class="p">);</span>
          <span class="k">}</span>
          <span class="n">list</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span><span class="n">currentPosition</span><span class="p">);</span>
          <span class="n">currentPosition</span> <span class="p">+=</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="c">// 重複候補の値を調べ、末尾側に重複があるか検証</span>
        <span class="n">currentPosition</span> <span class="p">=</span> <span class="m">0L</span><span class="p">;</span>
        <span class="n">bs</span><span class="p">.</span><span class="n">Position</span> <span class="p">=</span> <span class="n">currentPosition</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">baseIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">baseIndex</span> <span class="p">&lt;</span> <span class="n">collision</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">baseIndex</span><span class="p">++)</span>
        <span class="k">{</span>
          <span class="kt">long</span> <span class="n">basePosition</span> <span class="p">=</span> <span class="n">collision</span><span class="p">.</span><span class="n">Keys</span><span class="p">[</span><span class="n">baseIndex</span><span class="p">];</span>
          <span class="n">bs</span><span class="p">.</span><span class="n">Seek</span><span class="p">(</span><span class="n">basePosition</span> <span class="p">-</span> <span class="n">currentPosition</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Current</span><span class="p">);</span>
          <span class="n">currentPosition</span> <span class="p">=</span> <span class="n">basePosition</span><span class="p">;</span>
          <span class="kt">byte</span><span class="p">[]</span> <span class="n">baseBytes</span> <span class="p">=</span> <span class="n">ReadLine</span><span class="p">(</span><span class="n">bs</span><span class="p">);</span>
          <span class="n">currentPosition</span> <span class="p">+=</span> <span class="n">baseBytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
          <span class="kt">string</span> <span class="n">baseString</span> <span class="p">=</span> <span class="n">enc</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">baseBytes</span><span class="p">);</span>
          <span class="n">List</span><span class="p">&lt;</span><span class="kt">long</span><span class="p">&gt;</span> <span class="n">targetList</span> <span class="p">=</span> <span class="n">collision</span><span class="p">.</span><span class="n">Values</span><span class="p">[</span><span class="n">baseIndex</span><span class="p">];</span>
          <span class="kt">bool</span> <span class="n">found</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
          <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">targetIndex</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">targetIndex</span> <span class="p">&lt;</span> <span class="n">targetList</span><span class="p">.</span><span class="n">Count</span><span class="p">;</span> <span class="n">targetIndex</span><span class="p">++)</span>
          <span class="k">{</span>
            <span class="kt">long</span> <span class="n">targetPosition</span> <span class="p">=</span> <span class="n">targetList</span><span class="p">[</span><span class="n">targetIndex</span><span class="p">];</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">targetPosition</span> <span class="p">&lt;=</span> <span class="n">basePosition</span><span class="p">)</span>
              <span class="k">continue</span><span class="p">;</span>
            <span class="n">bs</span><span class="p">.</span><span class="n">Seek</span><span class="p">(</span><span class="n">targetPosition</span> <span class="p">-</span> <span class="n">currentPosition</span><span class="p">,</span> <span class="n">SeekOrigin</span><span class="p">.</span><span class="n">Current</span><span class="p">);</span>
            <span class="n">currentPosition</span> <span class="p">=</span> <span class="n">targetPosition</span><span class="p">;</span>
            <span class="kt">byte</span><span class="p">[]</span> <span class="n">targetBytes</span> <span class="p">=</span> <span class="n">ReadLine</span><span class="p">(</span><span class="n">bs</span><span class="p">);</span>
            <span class="n">currentPosition</span> <span class="p">+=</span> <span class="n">targetBytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
            <span class="kt">string</span> <span class="n">targetString</span> <span class="p">=</span> <span class="n">enc</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">targetBytes</span><span class="p">);</span>
            <span class="n">found</span> <span class="p">=</span> <span class="n">baseString</span><span class="p">.</span><span class="n">Equals</span><span class="p">(</span><span class="n">targetString</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">found</span><span class="p">)</span>
              <span class="k">break</span><span class="p">;</span>
          <span class="k">}</span>
          <span class="k">if</span> <span class="p">(!</span><span class="n">found</span><span class="p">)</span>
            <span class="n">collision</span><span class="p">.</span><span class="n">RemoveAt</span><span class="p">(</span><span class="n">baseIndex</span><span class="p">--);</span>
        <span class="k">}</span>
        <span class="c">// 出力</span>
        <span class="n">currentPosition</span> <span class="p">=</span> <span class="m">0L</span><span class="p">;</span>
        <span class="n">bs</span><span class="p">.</span><span class="n">Position</span> <span class="p">=</span> <span class="n">currentPosition</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">((</span><span class="n">bytes</span> <span class="p">=</span> <span class="n">ReadLine</span><span class="p">(</span><span class="n">bs</span><span class="p">)).</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
        <span class="k">{</span>
          <span class="k">if</span> <span class="p">(!</span><span class="n">collision</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="n">currentPosition</span><span class="p">))</span>
            <span class="n">Console</span><span class="p">.</span><span class="n">Write</span><span class="p">(</span><span class="n">enc</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span><span class="n">bytes</span><span class="p">));</span>
          <span class="n">currentPosition</span> <span class="p">+=</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span>
        <span class="k">}</span>
      <span class="k">}</span>
    <span class="k">}</span>
  <span class="k">}</span>

  <span class="k">static</span> <span class="kt">byte</span><span class="p">[]</span> <span class="n">ReadLine</span><span class="p">(</span><span class="n">Stream</span> <span class="n">s</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="kt">byte</span><span class="p">[]</span> <span class="n">bytes</span> <span class="p">=</span> <span class="n">enc</span><span class="p">.</span><span class="n">GetBytes</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">NewLine</span><span class="p">);</span>
    <span class="n">List</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;</span> <span class="n">line</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">&gt;();</span>
    <span class="kt">int</span> <span class="n">b</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">b</span> <span class="p">=</span> <span class="n">s</span><span class="p">.</span><span class="n">ReadByte</span><span class="p">())</span> <span class="p">&gt;=</span> <span class="m">0</span><span class="p">)</span>
    <span class="k">{</span>
      <span class="n">line</span><span class="p">.</span><span class="n">Add</span><span class="p">((</span><span class="kt">byte</span><span class="p">)</span><span class="n">b</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="n">Count</span> <span class="p">&gt;=</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">)</span>
      <span class="k">{</span>
        <span class="kt">bool</span> <span class="n">newline</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
        <span class="k">{</span>
          <span class="n">newline</span> <span class="p">=</span> <span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="n">line</span><span class="p">.</span><span class="n">Count</span> <span class="p">-</span> <span class="n">bytes</span><span class="p">.</span><span class="n">Length</span> <span class="p">+</span> <span class="n">i</span><span class="p">]</span> <span class="p">==</span> <span class="n">bytes</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
          <span class="k">if</span> <span class="p">(!</span><span class="n">newline</span><span class="p">)</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">newline</span><span class="p">)</span>
          <span class="k">return</span> <span class="n">line</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
      <span class="k">}</span>
    <span class="k">}</span>
    <span class="k">return</span> <span class="n">line</span><span class="p">.</span><span class="n">ToArray</span><span class="p">();</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3530/addtag/" class="addtag" id="addtag_3530">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3530/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3530/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3530"
  >-</span><span
  class="button yellow"
  id="rating_z_3530"
  >0</span><span 
  class="button green"
  id="rating_p_3530"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3530/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  
    





<div class="comment" id="comment3785">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20090429062155/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3785/">#3785</a>(<script language="JavaScript">print_time(new Date("2007/11/09 23:28 GMT"));</script><noscript>2007/11/09 23:28 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>これまたPerlカバレッジ向上委員会向け。
2pass; first passでmd5を使って重複箇所を検出し(よってfalse positiveの可能性はゼロではない)、
2nd passで重複箇所でなければprint.

Dan the Perl Monger</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
<span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
<span class="k">use</span> <span class="nn">Digest::</span><span class="n">MD5</span><span class="p">;</span>

<span class="k">sub </span><span class="nf">lines_to_skip</span> <span class="p">{</span>
    <span class="k">my</span> <span class="nv">$fh</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">%sum</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$where</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">&lt;</span><span class="nv">$fh</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">my</span> <span class="nv">$sum</span> <span class="o">=</span> <span class="nn">Digest::MD5::</span><span class="n">md5</span><span class="p">(</span><span class="nv">$_</span><span class="p">);</span>
        <span class="nv">$sum</span><span class="p">{</span><span class="nv">$sum</span><span class="p">}</span> <span class="o">=</span>
            <span class="nb">ref</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$sum</span><span class="p">}</span> <span class="p">?</span> <span class="p">[</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$sum</span><span class="p">}</span> <span class="p">},</span> <span class="nv">$where</span> <span class="p">]</span>
          <span class="p">:</span> <span class="nb">exists</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$sum</span><span class="p">}</span> <span class="p">?</span> <span class="p">[</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$sum</span><span class="p">},</span> <span class="nv">$where</span> <span class="p">]</span>
          <span class="p">:</span>                     <span class="nv">$where</span><span class="p">;</span>
        <span class="nv">$where</span> <span class="o">=</span> <span class="nb">tell</span> <span class="nv">$fh</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">my</span> <span class="nv">%skip</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">%sum</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">ref</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="ow">or</span> <span class="k">next</span><span class="p">;</span>
        <span class="nb">pop</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="p">};</span>
        <span class="nv">$skip</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span><span class="o">++</span> <span class="k">for</span> <span class="p">(</span> <span class="nv">@</span><span class="p">{</span> <span class="nv">$sum</span><span class="p">{</span><span class="nv">$_</span><span class="p">}</span> <span class="p">}</span> <span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">\</span><span class="nv">%skip</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">lastuniq</span><span class="p">{</span>
    <span class="k">my</span> <span class="nv">$filename</span> <span class="o">=</span> <span class="nb">shift</span><span class="p">;</span>
    <span class="nb">open</span> <span class="k">my</span> <span class="nv">$fh</span><span class="p">,</span> <span class="s">&#39;&lt;&#39;</span><span class="p">,</span> <span class="nv">$filename</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;$filename : $!&quot;</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$skip</span> <span class="o">=</span> <span class="n">lines_to_skip</span><span class="p">(</span><span class="nv">$fh</span><span class="p">);</span>
    <span class="nb">seek</span> <span class="nv">$fh</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">my</span> <span class="nv">$where</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="o">&lt;</span><span class="nv">$fh</span><span class="o">&gt;</span><span class="p">){</span>
        <span class="k">print</span> <span class="k">unless</span> <span class="nv">$skip</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$where</span><span class="p">};</span>
        <span class="nv">$where</span> <span class="o">=</span> <span class="nb">tell</span> <span class="nv">$fh</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">lastuniq</span><span class="p">(</span><span class="nb">shift</span> <span class="o">||</span> <span class="nb">die</span> <span class="s">&quot;$0 filename&quot;</span><span class="p">);</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/3785/addtag/" class="addtag" id="addtag_3785">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3785/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/3785/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3785"
  >-</span><span
  class="button yellow"
  id="rating_z_3785"
  >0</span><span 
  class="button green"
  id="rating_p_3785"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/3785/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  
    





<div class="comment" id="comment8827">
  <p class="banner"><a href="/web/20090429062155/http://ja.doukaku.org/user/813/" target="_top">lunlumo</a>

	
	&nbsp;
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/8827/">#8827</a>(<script language="JavaScript">print_time(new Date("2009/04/16 09:52 GMT"));</script><noscript>2009/04/16 09:52 GMT</noscript>)
	
	
	
	[<a href="/web/20090429062155/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>　Hash値で重複行候補を絞り込んで重複のチェックを行う様にしてみました。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61</pre></td><td class="code"><div class="highlight"><pre>import    java.io.{File,FileInputStream,FileOutputStream,InputStreamReader,OutputStreamWriter,BufferedReader,BufferedWriter}
import    scala.collection.mutable.{HashMap,HashSet}

class CRemoveOverlapping(var s:String, var d:String, var e:String) {
    var    r:HashMap[Int,List[Int]] = null
    var    o:HashSet[Int] = null
    def open(c:(Int,String)=&gt;Unit):Unit = {
        def loop(n:Int,i:BufferedReader):Unit = i.ready match {
                case false =&gt;
                case _ =&gt; {
                    c(n, i.readLine)
                    loop(n + 1, i)
                }
            }
        val    i:BufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(s), e))
        loop(1, i)
        i.close
    }
    def sift:CRemoveOverlapping = {
        val    t:HashMap[Int,List[Int]] = new HashMap[Int,List[Int]]
        open((n,l) =&gt; t.get(l.hashCode) match {
                case None =&gt; t.update(l.hashCode, List(n))
                case Some(c) =&gt; t.update(l.hashCode, n::c)
            }
        )
        r = t.foldLeft(new HashMap[Int,List[Int]])((f,p) =&gt; { if (p._2.size &gt; 1) f.update(p._1, p._2); f })
        this
    }
    def check:CRemoveOverlapping = {
        val    p:HashMap[Int,String] = new HashMap[Int,String]
        val    m:HashSet[Int] = r.values.foldLeft(new HashSet[Int])((f,e) =&gt; { f ++= e.elements; f })
        def loop(v:List[Int]):List[Int] = v match {
                case List() =&gt; List()
                case h::t =&gt; {
                    val    f:List[Int] = t.filter(n =&gt; p.get(h) != p.get(n))
                    (t -- f):::loop(f)
                }
            }
        open((n,l) =&gt; if (m.contains(n)) p.update(n, l))
        o = r.values.map(loop _).foldLeft(new HashSet[Int])((f,e) =&gt; { f ++= e.elements; f })
        this
    }
    def output:CRemoveOverlapping = {
        val    w:BufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(d), e))
        open((n,l) =&gt; if (!o.contains(n)) { w.write(l); w.newLine })
        w.close
        this
    }
}

object RemoveOverlapping {
    def main(args:Array[String]):Unit =
        if (args.size != 3)
            println(&quot;usage: RemoveOverlapping SOURCE DESTINATION ENCODING&quot;)
        else
            try {
                new CRemoveOverlapping(args(0), args(1), args(2)).sift.check.output
            } catch {
                case e =&gt; e.printStackTrace
            }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20090429062155/http://ja.doukaku.org/comment/8827/addtag/" class="addtag" id="addtag_8827">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20090429062155/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20090429062155/http://ja.doukaku.org/comment/8827/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20090429062155/http://ja.doukaku.org/comment/8827/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_8827"
  >-</span><span
  class="button yellow"
  id="rating_z_8827"
  >0</span><span 
  class="button green"
  id="rating_p_8827"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20090429062155/http://ja.doukaku.org/67/reply_to/8827/">
  返信
  </a>]
  </div>
</div>
</div>




  


  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20090429062155if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20090429062155/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20090429062155/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20090429062155/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20090429062155/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20090429062155/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20090429062155/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20090429062155/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20090429062155/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090429062155/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20090429062155/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20090429062155im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20090429062155/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20090429062155/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20090429062155/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20090429062155/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20090429062155/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20090429062155/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20090429062155/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20090429062155/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20090429062155im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20090429062155/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20090429062155/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20090429062155/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20090429062155js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 6:21:55 Apr 29, 2009 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:11:50 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
