
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> 
  <head>

<script type="text/javascript" src="/static/js/analytics.js" ></script>
<link type="text/css" rel="stylesheet" href="/static/css/banner-styles.css"/>




    <meta http-equiv="Content-type" content="text/html; charset=UTF-8" />
    <title>
マップの通り抜け
どう書く？org </title>

    <link rel="stylesheet" type="text/css"
	href="/web/20100116062258cs_/http://ja.doukaku.org/static/style/reset-fonts-grids.css" />
    <link rel="stylesheet" type="text/css"
	href="/web/20100116062258cs_/http://ja.doukaku.org/static/style/style.css?20071211?20071207" />
	
    <link rel="stylesheet" type="text/css"
	href="/web/20100116062258cs_/http://ja.doukaku.org/static/style/pygments.css" />


	
    <!--<script src="/web/20100116062258/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->


<!--<script src="/web/20100116062258/http://ja.doukaku.org/static/js/ieerbug/ieerbug.js" type="text/javascript"></script>-->
<script src="/web/20100116062258js_/http://ja.doukaku.org/static/js/jquery-1.1.3.1.js" type="text/javascript"></script>
<script src="/web/20100116062258js_/http://ja.doukaku.org/static/js/rating.js" type="text/javascript"></script>
<script src="/web/20100116062258js_/http://ja.doukaku.org/static/js/addtag.js?20071129" type="text/javascript"></script>

<script type="text/javascript">
is_key_navigation_enable = true;
</script>
<script src="/web/20100116062258js_/http://ja.doukaku.org/static/js/utils.js?~~~" type="text/javascript"></script>

</head>


<body id="doukaku_org">
<!-- BEGIN WAYBACK TOOLBAR INSERT -->
<script> if (window.archive_analytics) { window.archive_analytics.values['server_name']="wwwb-app1.us.archive.org";}; </script>

<script type="text/javascript" src="/static/js/disclaim-element.js" ></script>
<script type="text/javascript" src="/static/js/graph-calc.js" ></script>
<script type="text/javascript" src="/static/jflot/jquery.min.js" ></script>
<script type="text/javascript">
//<![CDATA[
var firstDate = 820454400000;
var lastDate = 1388534399999;
var wbPrefix = "/web/";
var wbCurrentUrl = "http:\/\/ja.doukaku.org\/30\/nested\/";

var curYear = -1;
var curMonth = -1;
var yearCount = 18;
var firstYear = 1996;
var imgWidth = 450;
var yearImgWidth = 25;
var monthImgWidth = 2;
var trackerVal = "none";
var displayDay = "16";
var displayMonth = "Jan";
var displayYear = "2010";
var prettyMonths = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];

function showTrackers(val) {
	if(val == trackerVal) {
		return;
	}
	if(val == "inline") {
		document.getElementById("displayYearEl").style.color = "#ec008c";
		document.getElementById("displayMonthEl").style.color = "#ec008c";
		document.getElementById("displayDayEl").style.color = "#ec008c";		
	} else {
		document.getElementById("displayYearEl").innerHTML = displayYear;
		document.getElementById("displayYearEl").style.color = "#ff0";
		document.getElementById("displayMonthEl").innerHTML = displayMonth;
		document.getElementById("displayMonthEl").style.color = "#ff0";
		document.getElementById("displayDayEl").innerHTML = displayDay;
		document.getElementById("displayDayEl").style.color = "#ff0";
	}
   document.getElementById("wbMouseTrackYearImg").style.display = val;
   document.getElementById("wbMouseTrackMonthImg").style.display = val;
   trackerVal = val;
}
function getElementX2(obj) {
	var thing = jQuery(obj);
	if((thing == undefined) 
			|| (typeof thing == "undefined") 
			|| (typeof thing.offset == "undefined")) {
		return getElementX(obj);
	}
	return Math.round(thing.offset().left);
}
function trackMouseMove(event,element) {

   var eventX = getEventX(event);
   var elementX = getElementX2(element);
   var xOff = eventX - elementX;
	if(xOff < 0) {
		xOff = 0;
	} else if(xOff > imgWidth) {
		xOff = imgWidth;
	}
   var monthOff = xOff % yearImgWidth;

   var year = Math.floor(xOff / yearImgWidth);
	var yearStart = year * yearImgWidth;
   var monthOfYear = Math.floor(monthOff / monthImgWidth);
   if(monthOfYear > 11) {
       monthOfYear = 11;
   }
   // 1 extra border pixel at the left edge of the year:
   var month = (year * 12) + monthOfYear;
   var day = 1;
	if(monthOff % 2 == 1) {
		day = 15;
	}
	var dateString = 
		zeroPad(year + firstYear) + 
		zeroPad(monthOfYear+1,2) +
		zeroPad(day,2) + "000000";

	var monthString = prettyMonths[monthOfYear];
	document.getElementById("displayYearEl").innerHTML = year + 1996;
	document.getElementById("displayMonthEl").innerHTML = monthString;
	// looks too jarring when it changes..
	//document.getElementById("displayDayEl").innerHTML = zeroPad(day,2);

	var url = wbPrefix + dateString + '/' +  wbCurrentUrl;
	document.getElementById('wm-graph-anchor').href = url;

   //document.getElementById("wmtbURL").value="evX("+eventX+") elX("+elementX+") xO("+xOff+") y("+year+") m("+month+") monthOff("+monthOff+") DS("+dateString+") Moy("+monthOfYear+") ms("+monthString+")";
   if(curYear != year) {
       var yrOff = year * yearImgWidth;
       document.getElementById("wbMouseTrackYearImg").style.left = yrOff + "px";
       curYear = year;
   }
   if(curMonth != month) {
       var mtOff = year + (month * monthImgWidth) + 1;
       document.getElementById("wbMouseTrackMonthImg").style.left = mtOff + "px";
       curMonth = month;
   }
}
//]]>
</script>

<style type="text/css">body{margin-top:0!important;padding-top:0!important;min-width:800px!important;}#wm-ipp a:hover{text-decoration:underline!important;}</style>
<div id="wm-ipp" lang="en" class="__wb_banner_div" style="display:none; position:relative;padding:0 5px;min-height:70px;min-width:800px">


<div id="wm-ipp-inside" class="__wb_banner_div" style="position:fixed;padding:0!important;margin:0!important;width:97%;min-width:780px;border:5px solid #000;border-top:none;background-image:url(/static/images/toolbar/wm_tb_bk_trns.png);text-align:center;-moz-box-shadow:1px 1px 3px #333;-webkit-box-shadow:1px 1px 3px #333;box-shadow:1px 1px 3px #333;font-size:11px!important;font-family:'Lucida Grande','Arial',sans-serif!important;">
   <table style="border-collapse:collapse;margin:0;padding:0;width:100%;"><tbody><tr>
   <td style="padding:10px;vertical-align:top;min-width:110px;">
   <a href="/web/" title="Wayback Machine home page" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wayback-toolbar-logo.png" alt="Wayback Machine" width="110" height="39" border="0"/></a>
   </td>
   <td style="padding:0!important;text-align:center;vertical-align:top;width:100%;">

       <table style="border-collapse:collapse;margin:0 auto;padding:0;width:570px;"><tbody><tr>
       <td style="padding:3px 0;" colspan="2">
       <form target="_top" method="get" action="/web/form-submit.jsp" name="wmtb" id="wmtb" style="margin:0!important;padding:0!important;"><input type="text" name="url" id="wmtbURL" value="http://ja.doukaku.org/30/nested/" style="width:400px;font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;" onfocus="javascript:this.focus();this.select();" /><input type="hidden" name="type" value="replay" /><input type="hidden" name="date" value="20100116062258" /><input type="submit" value="Go" style="font-size:11px;font-family:'Lucida Grande','Arial',sans-serif;margin-left:5px;width: inherit !important" /><span id="wm_tb_options" style="display:block;"></span></form>
       </td>
       <td style="vertical-align:bottom;padding:5px 0 0 0!important;" rowspan="2">
           <table style="border-collapse:collapse;width:110px;color:#99a;font-family:'Helvetica','Lucida Grande','Arial',sans-serif;"><tbody>
			
           <!-- NEXT/PREV MONTH NAV AND MONTH INDICATOR -->
           <tr style="width:110px;height:16px;font-size:10px!important;">
           	<td style="padding-right:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080513192543/http://ja.doukaku.org/30/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 May 2008"><strong>MAY</strong></a>
		                
               </td>
               <td id="displayMonthEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight:bold;text-transform:uppercase;width:34px;height:15px;padding-top:1px;text-align:center;" title="You are here: 6:22:58 Jan 16, 2010">JAN</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight:bold;text-transform:uppercase;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       Feb
                       
               </td>
           </tr>

           <!-- NEXT/PREV CAPTURE NAV AND DAY OF MONTH INDICATOR -->
           <tr>
               <td style="padding-right:9px;white-space:nowrap;overflow:visible;text-align:right!important;vertical-align:middle!important;" nowrap="nowrap">
               
		                <a href="/web/20080513192543/http://ja.doukaku.org/30/nested/" title="19:25:43 May 13, 2008" style="background-color:transparent;border:none;"><img src="/static/images/toolbar/wm_tb_prv_on.png" alt="Previous capture" width="14" height="16" border="0" /></a>
		                
               </td>
               <td id="displayDayEl" style="background:#000;color:#ff0;width:34px;height:24px;padding:2px 0 0 0;text-align:center;font-size:24px;font-weight: bold;" title="You are here: 6:22:58 Jan 16, 2010">16</td>
				<td style="padding-left:9px;white-space:nowrap;overflow:visible;text-align:left!important;vertical-align:middle!important;" nowrap="nowrap">
               
                       <img src="/static/images/toolbar/wm_tb_nxt_off.png" alt="Next capture" width="14" height="16" border="0"/>
                       
			    </td>
           </tr>

           <!-- NEXT/PREV YEAR NAV AND YEAR INDICATOR -->
           <tr style="width:110px;height:13px;font-size:9px!important;">
				<td style="padding-right:9px;font-size:11px!important;font-weight: bold;text-align:right;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
		                <a href="/web/20080513192543/http://ja.doukaku.org/30/nested/" style="text-decoration:none;color:#33f;font-weight:bold;background-color:transparent;border:none;" title="13 May 2008"><strong>2008</strong></a>
		                
               </td>
               <td id="displayYearEl" style="background:#000;color:#ff0;font-size:11px!important;font-weight: bold;padding-top:1px;width:34px;height:13px;text-align:center;" title="You are here: 6:22:58 Jan 16, 2010">2010</td>
				<td style="padding-left:9px;font-size:11px!important;font-weight: bold;white-space:nowrap;overflow:visible;" nowrap="nowrap">
               
                       2011
                       
				</td>
           </tr>
           </tbody></table>
       </td>

       </tr>
       <tr>
       <td style="vertical-align:middle;padding:0!important;">
           <a href="/web/20100116062258*/http://ja.doukaku.org/30/nested/" style="color:#33f;font-size:11px;font-weight:bold;background-color:transparent;border:none;" title="See a list of every capture for this URL"><strong>3 captures</strong></a>
           <div class="__wb_banner_div" style="margin:0!important;padding:0!important;color:#666;font-size:9px;padding-top:2px!important;white-space:nowrap;" title="Timespan for captures of this URL">13 May 07 - 16 Jan 10</div>
       </td>
       <td style="padding:0!important;">
       <a style="position:relative; white-space:nowrap; width:450px;height:27px;" href="" id="wm-graph-anchor">
       <div class="__wb_banner_div" id="wm-ipp-sparkline" style="position:relative; white-space:nowrap; width:450px;height:27px;background-color:#fff;cursor:pointer;border-right:1px solid #ccc;" title="Explore captures for this URL">
			<img id="sparklineImgId" style="position:absolute; z-index:9012; top:0px; left:0px;"
				onmouseover="showTrackers('inline');" 
				onmouseout="showTrackers('none');"
				onmousemove="trackMouseMove(event,this)"
				alt="sparklines"
				width="450"
				height="27"
				border="0"
				src="/web/jsp/graph.jsp?graphdata=450_27_1996:-1:000000000000_1997:-1:000000000000_1998:-1:000000000000_1999:-1:000000000000_2000:-1:000000000000_2001:-1:000000000000_2002:-1:000000000000_2003:-1:000000000000_2004:-1:000000000000_2005:-1:000000000000_2006:-1:000000000000_2007:-1:000010000000_2008:-1:000010000000_2009:-1:000000000000_2010:0:100000000000_2011:-1:000000000000_2012:-1:000000000000_2013:-1:000000000000"></img>
			<img id="wbMouseTrackYearImg" 
				style="display:none; position:absolute; z-index:9010;"
				width="25" 
				height="27"
				border="0"
				src="/static/images/toolbar/transp-yellow-pixel.png"></img>
			<img id="wbMouseTrackMonthImg"
				style="display:none; position:absolute; z-index:9011; " 
				width="2"
				height="27" 
				border="0"
				src="/static/images/toolbar/transp-red-pixel.png"></img>
       </div>
		</a>

       </td>
       </tr></tbody></table>
   </td>
   <td style="text-align:right;padding:5px;width:65px;font-size:11px!important;">
       <a href="javascript:;" onclick="document.getElementById('wm-ipp').style.display='none';" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_close.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;margin-bottom:23px;background-color:transparent;border:none;" title="Close the toolbar">Close</a>
       <a href="http://faq.web.archive.org/" style="display:block;padding-right:18px;background:url(/static/images/toolbar/wm_tb_help.png) no-repeat 100% 0;color:#33f;font-family:'Lucida Grande','Arial',sans-serif;background-color:transparent;border:none;" title="Get some help using the Wayback Machine">Help</a>
   </td>
   </tr></tbody></table>

</div>
</div>
<script type="text/javascript">
 var wmDisclaimBanner = document.getElementById("wm-ipp");
 if(wmDisclaimBanner != null) {
   disclaimElement(wmDisclaimBanner);
 }
</script>
<!-- END WAYBACK TOOLBAR INSERT -->


<div id="page_head" class="compact">
  <h1 class="compact">
    <a href="/web/20100116062258/http://ja.doukaku.org/">どう書く？org</a><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/beta.png" alt="beta">
  </h1>
</div>

<div id="page_body" class="compact">
<div id="content" class="compact">




<h2 class="compact">
<img src='/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png' alt=お題(出題済み)>
<a href="/web/20100116062258/http://ja.doukaku.org/30/">マップの通り抜け</a>
</h2>

    





<div class="comment" id="comment3386">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/3386/">#3386</a>(<script language="JavaScript">print_time(new Date("2007/07/24 06:50 GMT"));</script><noscript>2007/07/24 06:50 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ここにピリオド(.)とプラス(+)と改行で構成された入力ファイルがあります。
<p>
ピリオドは通れないマス、プラスは通れるマスを表現しています。
上から下へたどり着く道があるかどうかを判定するコードを書いてください。
<p>
通り抜けられる例
<pre>
.+.....
.+.+++.
.+.+.+.
.+++.+.
.....+.
</pre>
通り抜けられない例
<pre>
..+...+
++.+++.
.+...++
++++.+.
.+..+.+
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/3386/addtag/" class="addtag" id="addtag_3386">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3386"
  >-</span><span
  class="button yellow"
  id="rating_z_3386"
  >0</span><span 
  class="button green"
  id="rating_p_3386"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/3386/">
  返信
  </a>]
  </div>
</div>
</div>




  



<div class="indent">
<a href="/web/20100116062258/http://ja.doukaku.org/30/post_comment/">
投稿する
</a>
</div>


<h2>投稿されたコメント - ネスト表示</h2>
<a href="/web/20100116062258/http://ja.doukaku.org/30/flatten/">フラット表示</a> 
<a href="/web/20100116062258/http://ja.doukaku.org/30/">非表示</a> 


  
    





<div class="comment" id="comment1384">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1384/">#1384</a>(<script language="JavaScript">print_time(new Date("2007/07/24 07:31 GMT"));</script><noscript>2007/07/24 07:31 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/scheme/">
	  Scheme
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  経路を保存しとかないでいいので、通常の迷路探索よりも楽。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</pre></td><td class="code"><div class="highlight"><pre><span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-1</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">srfi-42</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">file</span><span class="o">.</span><span class="nv">util</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">sequence</span><span class="p">)</span>
<span class="p">(</span><span class="nf">use</span> <span class="nv">gauche</span><span class="o">.</span><span class="nv">array</span><span class="p">)</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">read-map</span> <span class="nv">file</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">let1</span> <span class="nv">rows</span> <span class="p">(</span><span class="nf">file-&gt;string-list</span> <span class="nv">file</span><span class="p">)</span>
    <span class="p">(</span><span class="nb">apply </span><span class="nv">array</span> <span class="p">(</span><span class="nf">shape</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">size-of</span> <span class="nv">rows</span><span class="p">)</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">size-of</span> <span class="p">(</span><span class="nb">car </span><span class="nv">rows</span><span class="p">)))</span>
           <span class="p">(</span><span class="nf">concatenate</span> <span class="p">(</span><span class="nb">map </span><span class="nv">string-&gt;list</span> <span class="nv">rows</span><span class="p">)))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-width</span> <span class="nv">m</span><span class="p">)</span>  <span class="p">(</span><span class="nf">array-length</span> <span class="nv">m</span> <span class="mi">1</span><span class="p">))</span>
<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">map-height</span> <span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nf">array-length</span> <span class="nv">m</span> <span class="mi">0</span><span class="p">))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
  <span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">try</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">)</span>
    <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">&lt; </span><span class="mi">-1</span> <span class="nv">x</span> <span class="p">(</span><span class="nf">map-width</span> <span class="nv">m</span><span class="p">))</span>
         <span class="p">(</span><span class="nb">&lt; </span><span class="mi">-1</span> <span class="nv">y</span> <span class="p">(</span><span class="nf">map-height</span> <span class="nv">m</span><span class="p">))</span>
         <span class="p">(</span><span class="nb">eqv? </span><span class="p">(</span><span class="nf">array-ref</span> <span class="nv">m</span> <span class="nv">y</span> <span class="nv">x</span><span class="p">)</span> <span class="sc">#\+</span><span class="p">)</span>
         <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">= </span><span class="nv">y</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nf">map-height</span> <span class="nv">m</span><span class="p">)</span> <span class="mi">1</span><span class="p">))</span>
             <span class="p">(</span><span class="nf">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="nv">y</span><span class="p">))))</span>
  <span class="p">(</span><span class="nf">array-set!</span> <span class="nv">m</span> <span class="nv">y</span> <span class="nv">x</span> <span class="o">#</span><span class="err">\</span><span class="nv">*</span><span class="p">)</span>
  <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nf">try</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">try</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">)</span> <span class="p">(</span><span class="nf">try</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))</span> <span class="p">(</span><span class="nf">try</span> <span class="nv">x</span> <span class="p">(</span><span class="nb">- </span><span class="nv">y</span> <span class="mi">1</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">connected?</span> <span class="nv">m</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">any?-ec</span> <span class="p">(</span><span class="nf">:</span> <span class="nv">x</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">map-width</span> <span class="nv">m</span><span class="p">))</span>
           <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">eqv? </span><span class="p">(</span><span class="nf">array-ref</span> <span class="nv">m</span> <span class="mi">0</span> <span class="nv">x</span><span class="p">)</span> <span class="sc">#\+</span><span class="p">)</span> <span class="p">(</span><span class="nf">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="mi">0</span><span class="p">))))</span>

<span class="p">(</span><span class="k">define </span><span class="p">(</span><span class="nf">main</span> <span class="nv">args</span><span class="p">)</span>
  <span class="p">(</span><span class="nf">print</span> <span class="p">(</span><span class="nf">connected?</span> <span class="p">(</span><span class="nf">read-map</span> <span class="p">(</span><span class="nb">cadr </span><span class="nv">args</span><span class="p">)))))</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1384/addtag/" class="addtag" id="addtag_1384">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/gauche/">gauche</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/scheme/">
		Scheme
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1384/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1384/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1384"
  >-</span><span
  class="button yellow"
  id="rating_z_1384"
  >0</span><span 
  class="button green"
  id="rating_p_1384"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1384/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1385">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/78/" target="_top">morchin</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1385/">#1385</a>(<script language="JavaScript">print_time(new Date("2007/07/24 07:35 GMT"));</script><noscript>2007/07/24 07:35 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>33行目のコメントを外せばパスを表示する。
k.inabaさんのコードを参考にした。
参考: http://www.kmonos.net/wlog/75.html#_0049070707
自分のオリジナルな解法も後で考えるつもり。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">search_path</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">is_goal</span><span class="p">,</span> <span class="n">next</span><span class="p">):</span>
	<span class="n">agenda</span> <span class="o">=</span> <span class="p">[</span><span class="n">start</span><span class="p">]</span>
	<span class="n">path_to</span> <span class="o">=</span> <span class="p">{</span><span class="n">start</span><span class="p">:</span> <span class="p">[</span><span class="n">start</span><span class="p">]}</span>
	<span class="k">while</span> <span class="n">agenda</span><span class="p">:</span>
		<span class="n">s</span> <span class="o">=</span> <span class="n">agenda</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">is_goal</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
			<span class="k">return</span> <span class="n">path_to</span><span class="p">[</span><span class="n">s</span><span class="p">]</span>
		<span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">next</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
			<span class="k">if</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">path_to</span><span class="p">:</span>
				<span class="n">path_to</span><span class="p">[</span><span class="n">p</span><span class="p">]</span> <span class="o">=</span> <span class="n">path_to</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">p</span><span class="p">]</span>
				<span class="n">agenda</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
	<span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">maze</span><span class="p">):</span>
	<span class="n">start_poss</span> <span class="o">=</span> <span class="p">[]</span>
	<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
		<span class="k">if</span> <span class="n">s</span> <span class="o">==</span> <span class="s">&#39;+&#39;</span><span class="p">:</span>
			<span class="n">start_poss</span> <span class="o">+=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">)]</span>

	<span class="k">def</span> <span class="nf">is_goal</span><span class="p">(</span><span class="n">yx</span><span class="p">):</span>
		<span class="k">return</span> <span class="n">yx</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">maze</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>

	<span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="n">yx</span><span class="p">):</span>
		<span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">j</span> <span class="ow">in</span> <span class="p">((</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)):</span>
			<span class="n">y</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">yx</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="n">yx</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="n">j</span>
			<span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">maze</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
				<span class="k">if</span> <span class="n">maze</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;+&#39;</span><span class="p">:</span>
					<span class="k">yield</span> <span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span>
	
	<span class="k">for</span> <span class="n">start</span> <span class="ow">in</span> <span class="n">start_poss</span><span class="p">:</span>
		<span class="n">p</span> <span class="o">=</span> <span class="n">search_path</span><span class="p">(</span><span class="n">start</span><span class="p">,</span> <span class="n">is_goal</span><span class="p">,</span> <span class="n">next</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">p</span><span class="p">:</span>
			<span class="c"># print p</span>
			<span class="k">return</span> <span class="bp">True</span>
	<span class="k">else</span><span class="p">:</span>
		<span class="k">return</span> <span class="bp">False</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
	<span class="k">import</span> <span class="nn">sys</span>
	<span class="n">maze0</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
	<span class="n">maze</span> <span class="o">=</span> <span class="p">[</span><span class="n">l</span> <span class="k">for</span> <span class="n">l</span> <span class="ow">in</span> <span class="n">maze0</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span> <span class="k">if</span> <span class="n">l</span> <span class="o">!=</span> <span class="s">&#39;&#39;</span><span class="p">]</span>
	<span class="k">print</span> <span class="n">solve</span><span class="p">(</span><span class="n">maze</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1385/addtag/" class="addtag" id="addtag_1385">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1385/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1385/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1385"
  >-</span><span
  class="button yellow"
  id="rating_z_1385"
  >0</span><span 
  class="button green"
  id="rating_p_1385"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1385/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1385/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1392">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/78/" target="_top">morchin</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/">#1392</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:09 GMT"));</script><noscript>2007/07/24 08:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>以下の m_print 関数の定義を追加して、print p を m_print(maze, p) で置き換えれば経路を可視化できる。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">m_print</span><span class="p">(</span><span class="n">maze</span><span class="p">,</span> <span class="n">paths</span><span class="p">):</span>
	<span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">paths</span><span class="p">:</span>
		<span class="n">L</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
		<span class="n">L</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;o&#39;</span>
		<span class="n">maze</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
	<span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">maze</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/addtag/" class="addtag" id="addtag_1392">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1392"
  >-</span><span
  class="button yellow"
  id="rating_z_1392"
  >0</span><span 
  class="button green"
  id="rating_p_1392"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1385/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1392/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1393">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/78/" target="_top">morchin</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1393/">#1393</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:19 GMT"));</script><noscript>2007/07/24 08:19 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>破壊的だったので、以下のように m_print() 側で安全対策を採るべきだった。orz
呼び出し側で m_print(maze[:], p) としても良いが、もちろん設計としては良くない。
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5
6
7</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">m_print</span><span class="p">(</span><span class="n">maze</span><span class="p">,</span> <span class="n">paths</span><span class="p">):</span>
    <span class="n">maze</span> <span class="o">=</span> <span class="n">maze</span><span class="p">[:]</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">paths</span><span class="p">:</span>
        <span class="n">L</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">maze</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>
        <span class="n">L</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;o&#39;</span>
        <span class="n">maze</span><span class="p">[</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
    <span class="k">print</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">maze</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1393/addtag/" class="addtag" id="addtag_1393">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1393/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1393/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1393"
  >-</span><span
  class="button yellow"
  id="rating_z_1393"
  >0</span><span 
  class="button green"
  id="rating_p_1393"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1392/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1393/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1393/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment1387">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1387/">#1387</a>(<script language="JavaScript">print_time(new Date("2007/07/24 07:51 GMT"));</script><noscript>2007/07/24 07:51 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>「通り抜けられない例」に
下のデータを追加した方がよかったかも。
「あんまりナイーブな実装では迷路が大きくなったときに
計算量が大変なことになる」という意味で。

++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
................
</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1387/addtag/" class="addtag" id="addtag_1387">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1387"
  >-</span><span
  class="button yellow"
  id="rating_z_1387"
  >0</span><span 
  class="button green"
  id="rating_p_1387"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1387/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1387/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1401">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1401/">#1401</a>(<script language="JavaScript">print_time(new Date("2007/07/24 09:16 GMT"));</script><noscript>2007/07/24 09:16 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>なるほど、「通り抜けられない」ことの判定が実用的な時間で終わる方が大事ですね。
#1398の実装ではちっとも計算が終わりません。
こういう例では、自分の足跡で輪を作ったら、
中に入らないようにするとか考えないと、厳しいなぁ。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1401/addtag/" class="addtag" id="addtag_1401">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1401"
  >-</span><span
  class="button yellow"
  id="rating_z_1401"
  >0</span><span 
  class="button green"
  id="rating_p_1401"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1387/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1401/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1401/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment1390">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/14/" target="_top">kawauchi</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1390/">#1390</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:06 GMT"));</script><noscript>2007/07/24 08:06 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  引数でファイルを指定します。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24</pre></td><td class="code"><div class="highlight"><pre><span class="k">def</span> <span class="nf">fill</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">x</span> <span class="p">,</span><span class="n">y</span><span class="p">)</span>
  <span class="k">return</span> <span class="k">unless</span> <span class="n">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">[</span><span class="n">y</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">map</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;+&quot;</span>
  <span class="n">map</span><span class="o">[</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span>
  <span class="n">fill</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
  <span class="n">fill</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
  <span class="n">fill</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
  <span class="n">fill</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="k">end</span>

<span class="n">map</span> <span class="o">=</span> <span class="o">[]</span>
<span class="k">while</span> <span class="no">ARGF</span><span class="o">.</span><span class="n">gets</span>
  <span class="n">map</span> <span class="o">&lt;&lt;</span> <span class="vg">$_</span><span class="o">.</span><span class="n">chop</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)</span>
<span class="k">end</span>
<span class="n">map</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">each_with_index</span><span class="p">{</span><span class="o">|</span><span class="n">cell</span><span class="p">,</span> <span class="n">x</span><span class="o">|</span>
  <span class="n">fill</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>
<span class="n">map</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">l</span><span class="o">.</span><span class="n">join</span>
<span class="p">}</span>
<span class="k">if</span> <span class="n">map</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;#&quot;</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">&quot;through.&quot;</span>
<span class="k">else</span>
  <span class="nb">puts</span> <span class="s2">&quot;No through.&quot;</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1390/addtag/" class="addtag" id="addtag_1390">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1390/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1390/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1390"
  >-</span><span
  class="button yellow"
  id="rating_z_1390"
  >0</span><span 
  class="button green"
  id="rating_p_1390"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1390/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  
    





<div class="comment" id="comment1394">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1394/">#1394</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:35 GMT"));</script><noscript>2007/07/24 08:35 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ファイルから読み込んでいない上に、ちょっとずるしてますが。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;stdio.h&gt;</span>

<span class="kt">char</span> <span class="n">problem1</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
	<span class="s">&quot;.+.....&quot;</span>
	<span class="s">&quot;.+.+++.&quot;</span>
	<span class="s">&quot;.+.+.+.&quot;</span>
	<span class="s">&quot;.+++.+.&quot;</span>
	<span class="s">&quot;.....+.&quot;</span>
<span class="p">};</span>

<span class="kt">char</span> <span class="n">problem2</span><span class="p">[]</span> <span class="o">=</span><span class="p">{</span>
	<span class="s">&quot;..+...+&quot;</span>
	<span class="s">&quot;++.+++.&quot;</span>
	<span class="s">&quot;.+...++&quot;</span>
	<span class="s">&quot;++++.+.&quot;</span>
	<span class="s">&quot;.+..+.+&quot;</span>
<span class="p">};</span>

<span class="kt">char</span> <span class="n">problem3</span><span class="p">[]</span> <span class="o">=</span><span class="p">{</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;++++++++++++++++&quot;</span>
	<span class="s">&quot;................&quot;</span>
<span class="p">};</span>


<span class="kt">int</span> <span class="n">solve</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="kt">int</span> <span class="n">w</span><span class="p">,</span> <span class="kt">int</span> <span class="n">h</span><span class="p">)</span>
<span class="p">{</span>
	<span class="c">//一行目を置換</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">w</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">data</span><span class="p">[</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>


	<span class="c">//+が置換できなくなるまでループをまわす</span>
	<span class="kt">bool</span> <span class="n">loopFlag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
	<span class="k">do</span><span class="p">{</span>
		<span class="n">loopFlag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
		<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">w</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
				<span class="kt">char</span><span class="o">*</span> <span class="n">d</span> <span class="o">=</span> <span class="n">data</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
				<span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">d</span> <span class="o">!=</span> <span class="sc">&#39;+&#39;</span><span class="p">){</span>
					<span class="k">continue</span><span class="p">;</span>
				<span class="p">}</span>

				<span class="kt">char</span><span class="o">*</span> <span class="n">ud</span> <span class="o">=</span> <span class="n">data</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
				<span class="kt">char</span><span class="o">*</span> <span class="n">dd</span> <span class="o">=</span> <span class="n">data</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
				<span class="kt">char</span><span class="o">*</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">data</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
				<span class="kt">char</span><span class="o">*</span> <span class="n">ld</span> <span class="o">=</span> <span class="n">data</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="n">y</span> <span class="o">+</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
			
				<span class="c">//上を調べる</span>
				<span class="k">if</span><span class="p">(</span><span class="n">y</span><span class="p">){</span>
					<span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">ud</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>
						<span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
						<span class="n">loopFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
					<span class="p">}</span>
				<span class="p">}</span>

				<span class="c">//下を調べる</span>
				<span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">&lt;</span>  <span class="n">h</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
					<span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">dd</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>
						<span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
						<span class="n">loopFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
					<span class="p">}</span>				
				<span class="p">}</span>

				<span class="c">//右</span>
				<span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span>  <span class="n">w</span> <span class="o">-</span><span class="mi">1</span><span class="p">){</span>
					<span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">rd</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>
						<span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
						<span class="n">loopFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
					<span class="p">}</span>				
				<span class="p">}</span>

				<span class="c">//左</span>
				<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="p">){</span>
					<span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">ld</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">){</span>
						<span class="o">*</span><span class="n">d</span> <span class="o">=</span> <span class="sc">&#39;-&#39;</span><span class="p">;</span>
						<span class="n">loopFlag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
					<span class="p">}</span>
				<span class="p">}</span>
			<span class="p">}</span>
		<span class="p">}</span>	
	<span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">loopFlag</span><span class="p">);</span>	<span class="c">//塗りつぶせなくなったらループ終了</span>

	<span class="c">//一番したの行を舐める</span>
	<span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">w</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="kt">char</span><span class="o">*</span> <span class="n">d</span> <span class="o">=</span> <span class="n">data</span> <span class="o">+</span> <span class="n">w</span> <span class="o">*</span> <span class="p">(</span><span class="n">h</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="o">*</span><span class="n">d</span> <span class="o">==</span> <span class="sc">&#39;-&#39;</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>


<span class="kt">int</span> <span class="n">main</span><span class="p">()</span>
<span class="p">{</span>	
	<span class="kt">int</span> <span class="n">r1</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">problem1</span><span class="p">,</span> <span class="mi">7</span> <span class="p">,</span><span class="mi">5</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">r2</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">problem2</span><span class="p">,</span> <span class="mi">7</span> <span class="p">,</span><span class="mi">5</span><span class="p">);</span>
	<span class="kt">int</span> <span class="n">r3</span> <span class="o">=</span> <span class="n">solve</span><span class="p">(</span><span class="n">problem3</span><span class="p">,</span> <span class="mi">16</span> <span class="p">,</span><span class="mi">9</span><span class="p">);</span>

	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d %d %d&quot;</span><span class="p">,</span><span class="n">r1</span><span class="p">,</span><span class="n">r2</span><span class="p">,</span><span class="n">r3</span><span class="p">);</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1394/addtag/" class="addtag" id="addtag_1394">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1394/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1394/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1394"
  >-</span><span
  class="button yellow"
  id="rating_z_1394"
  >0</span><span 
  class="button green"
  id="rating_p_1394"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1394/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1394/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1411">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/166/" target="_top">ところてん</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1411/">#1411</a>(<script language="JavaScript">print_time(new Date("2007/07/24 11:07 GMT"));</script><noscript>2007/07/24 11:07 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>一応オーダーはn^3に近いので、あまりにでかいデータを食わせると帰ってこないかもしれません。
蛇のように曲がりくねったデータだとn^3に、あんまり曲がってないとn^2に近くなります。

巨大なデータに対しては再帰でフラグ持ちながらやったほうが多分幸せ。

どうでもいいけど、C++な部分って、変数宣言のタイミングだけだなぁ。
あとはCで書ける。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1411/addtag/" class="addtag" id="addtag_1411">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1411"
  >-</span><span
  class="button yellow"
  id="rating_z_1411"
  >0</span><span 
  class="button green"
  id="rating_p_1411"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1394/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1411/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1411/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  
    





<div class="comment" id="comment1395">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/">#1395</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:42 GMT"));</script><noscript>2007/07/24 08:42 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>Haskell練習中。

最初は探索経路と同型のvisitedリストを持ってたんだけど、
#1387のようなケースで計算量が爆発。終わらない。
仕方ないので継続渡し形式にしてvisitedリストを失敗継続に渡して行くようにした。
これで一度通った場所は二度と通らないはず。

…のだけれど、searchのところ、もっと綺麗に書けるはずだよなあ。
StateモナドかContinuationモナドを使うんだろうけど…識者の良解答を待つ。

あと、readMapのところももっと簡単なイディオムがある気がする。
というか、hCloseのタイミングってここで良かったんだっけ? readLinesの
計算がlazyだと、全部読む前に閉じられちゃう可能性がある?

</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">System</span>
<span class="kr">import</span> <span class="n">IO</span>

<span class="nv">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="nv">y</span> <span class="nv">fail</span> <span class="nv">visited</span> <span class="o">=</span> <span class="kr">if</span> <span class="nv">check</span>
                            <span class="kr">then</span> <span class="p">(</span><span class="nv">y</span> <span class="o">==</span> <span class="p">(</span><span class="nv">length</span> <span class="nv">m</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span>
                                  <span class="o">||</span> <span class="nv">search</span> <span class="nv">m</span> <span class="p">(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">y</span>
                                              <span class="p">(</span><span class="nv">search</span> <span class="nv">m</span> <span class="p">(</span><span class="nv">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nv">y</span>
                                                      <span class="p">(</span><span class="nv">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">y</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                                                              <span class="p">(</span><span class="nv">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">fail</span><span class="p">)))</span>
                                              <span class="nv">visited&#39;</span><span class="p">)</span>
                            <span class="kr">else</span> <span class="nv">fail</span> <span class="nv">visited&#39;</span>
  <span class="kr">where</span> <span class="nv">check</span> <span class="o">=</span> <span class="nv">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">x</span> <span class="o">&lt;</span> <span class="nv">length</span> <span class="p">(</span><span class="nv">m</span><span class="o">!!</span><span class="mi">0</span><span class="p">)</span>
                <span class="o">&amp;&amp;</span> <span class="nv">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">y</span> <span class="o">&lt;</span> <span class="nv">length</span> <span class="nv">m</span>
                <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="nv">not</span> <span class="o">$</span> <span class="nv">elem</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span> <span class="nv">visited</span><span class="p">)</span>
                <span class="o">&amp;&amp;</span> <span class="nv">m</span><span class="o">!!</span><span class="nv">y</span><span class="o">!!</span><span class="nv">x</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span>
        <span class="nv">visited&#39;</span> <span class="o">=</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span><span class="nv">y</span><span class="p">)</span><span class="o">:</span><span class="nv">visited</span>

<span class="nv">isConnected</span> <span class="nv">m</span> <span class="o">=</span> <span class="kr">let</span> <span class="nv">startLine</span> <span class="o">=</span> <span class="nv">take</span> <span class="p">(</span><span class="nv">length</span> <span class="p">(</span><span class="nv">m</span><span class="o">!!</span><span class="mi">0</span><span class="p">))</span> <span class="o">$</span> <span class="nv">repeat</span> <span class="sc">&#39;+&#39;</span>
                <span class="kr">in</span> <span class="nv">search</span> <span class="p">(</span><span class="nv">startLine</span><span class="o">:</span><span class="nv">m</span><span class="p">)</span> <span class="mi">0</span> <span class="mi">0</span> <span class="p">(</span><span class="o">\</span><span class="kr">_</span> <span class="o">-&gt;</span> <span class="n">False</span><span class="p">)</span> <span class="p">[]</span>

<span class="nv">readMap</span> <span class="nv">file</span> <span class="o">=</span> <span class="kr">do</span> <span class="nv">h</span> <span class="o">&lt;-</span> <span class="nv">openFile</span> <span class="nv">file</span> <span class="n">ReadMode</span>
                  <span class="nv">m</span> <span class="o">&lt;-</span> <span class="nv">readLines</span> <span class="nv">h</span>
                  <span class="nv">hClose</span> <span class="nv">h</span>
                  <span class="nv">return</span> <span class="nv">m</span>
  <span class="kr">where</span> <span class="nv">readLines</span> <span class="nv">h</span> <span class="o">=</span> <span class="nv">catch</span> <span class="p">(</span><span class="kr">do</span> <span class="nv">l</span> <span class="o">&lt;-</span> <span class="nv">hGetLine</span> <span class="nv">h</span>
                                <span class="nv">ls</span> <span class="o">&lt;-</span> <span class="nv">readLines</span> <span class="nv">h</span>
                                <span class="nv">return</span> <span class="p">(</span><span class="nv">l</span><span class="o">:</span><span class="nv">ls</span><span class="p">))</span>
                            <span class="p">(</span><span class="o">\</span><span class="nv">e</span> <span class="o">-&gt;</span> <span class="kr">if</span> <span class="nv">isEOFError</span> <span class="nv">e</span> <span class="kr">then</span> <span class="nv">return</span> <span class="p">[]</span> <span class="kr">else</span> <span class="nv">ioError</span> <span class="nv">e</span><span class="p">)</span>
          
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">(</span><span class="nv">f</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="nv">m</span>     <span class="o">&lt;-</span> <span class="nv">readMap</span> <span class="nv">f</span>
          <span class="nv">print</span> <span class="o">$</span> <span class="nv">isConnected</span> <span class="nv">m</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/addtag/" class="addtag" id="addtag_1395">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1395"
  >-</span><span
  class="button yellow"
  id="rating_z_1395"
  >0</span><span 
  class="button green"
  id="rating_p_1395"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/">
    3
    replies
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1395/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1441">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/">#1441</a>(<script language="JavaScript">print_time(new Date("2007/07/24 18:22 GMT"));</script><noscript>2007/07/24 18:22 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>linesというのを発見。readMapはこれでいいのかな。
hCloseをどこで呼べばいいのかまだわからない。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1</pre></td><td class="code"><div class="highlight"><pre><span class="nv">readMap</span> <span class="nv">file</span> <span class="o">=</span> <span class="nv">openFile</span> <span class="nv">file</span> <span class="n">ReadMode</span> <span class="o">&gt;&gt;=</span> <span class="nv">hGetContents</span> <span class="o">&gt;&gt;=</span> <span class="nv">return</span> <span class="o">.</span> <span class="nv">lines</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/addtag/" class="addtag" id="addtag_1441">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1441"
  >-</span><span
  class="button yellow"
  id="rating_z_1441"
  >0</span><span 
  class="button green"
  id="rating_p_1441"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1441/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1442">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/256/" target="_top">rihi</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1442/">#1442</a>(<script language="JavaScript">print_time(new Date("2007/07/24 22:38 GMT"));</script><noscript>2007/07/24 22:38 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>IO動作は原則として書いた順(doなら上から下、&gt;&gt;なら左から右)に実行されます。
#1395では、hCloseが実行される時点でreadLinesの
実行は完了しているので、タイミングの問題はありません。

一方、hGetContentsはこの原則に反して遅延読みを行うので、
hCloseを呼ぶとその時点で読み込みが打ち切られます。
この問題のため、hGetContentsを呼び出すとハンドルは即座にセミクローズ状態になり、
自分でhCloseする必要はない、ということになっています。

なお、readFileというもっと楽な関数もあります。</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1442/addtag/" class="addtag" id="addtag_1442">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1442"
  >-</span><span
  class="button yellow"
  id="rating_z_1442"
  >0</span><span 
  class="button green"
  id="rating_p_1442"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1441/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1442/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1442/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1442/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1443">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1443/">#1443</a>(<script language="JavaScript">print_time(new Date("2007/07/24 23:50 GMT"));</script><noscript>2007/07/24 23:50 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  おお、ありがとうございます。よくわかりました。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1443/addtag/" class="addtag" id="addtag_1443">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1443"
  >-</span><span
  class="button yellow"
  id="rating_z_1443"
  >0</span><span 
  class="button green"
  id="rating_p_1443"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1442/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1443/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1443/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1450">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/256/" target="_top">rihi</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1450/">#1450</a>(<script language="JavaScript">print_time(new Date("2007/07/25 11:27 GMT"));</script><noscript>2007/07/25 11:27 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>失敗したらバックトラックする計算はMaybeモナド、
状態を書き換える計算はStateモナドで表現できるので、
この二つを合成したMaybeT Stateというモナドを使って、書き直してみました。
実際にはMaybeTは用意されていないので、ErrorT ()で代用しています。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">System</span>
<span class="kr">import</span> <span class="n">IO</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span><span class="o">.</span><span class="n">State</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span><span class="o">.</span><span class="n">Error</span>

<span class="kr">instance</span> <span class="n">Error</span> <span class="p">()</span> <span class="kr">where</span>
  <span class="nv">noMsg</span> <span class="o">=</span> <span class="p">()</span>

<span class="kr">type</span> <span class="n">Point</span> <span class="o">=</span> <span class="p">(</span><span class="n">Int</span><span class="p">,</span> <span class="n">Int</span><span class="p">)</span>
<span class="kr">type</span> <span class="n">Proc</span> <span class="nv">a</span> <span class="o">=</span> <span class="n">ErrorT</span> <span class="p">()</span> <span class="p">(</span><span class="n">State</span> <span class="p">[</span><span class="n">Point</span><span class="p">])</span> <span class="nv">a</span>
<span class="kr">type</span> <span class="n">Map</span> <span class="o">=</span> <span class="p">[[</span><span class="n">Char</span><span class="p">]]</span>

<span class="nv">runProc</span> <span class="o">::</span> <span class="n">Proc</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
<span class="nv">runProc</span> <span class="nv">proc</span> <span class="o">=</span> <span class="nv">result</span> <span class="o">==</span> <span class="n">Right</span> <span class="p">()</span>
  <span class="kr">where</span>
    <span class="nv">result</span> <span class="o">=</span> <span class="nv">evalState</span> <span class="p">(</span><span class="nv">runErrorT</span> <span class="nv">proc</span><span class="p">)</span> <span class="p">[]</span>

<span class="nv">hasVisited</span> <span class="o">::</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Proc</span> <span class="n">Bool</span>
<span class="nv">hasVisited</span> <span class="nv">pt</span> <span class="o">=</span> <span class="nv">liftM</span> <span class="p">(</span><span class="nv">elem</span> <span class="nv">pt</span><span class="p">)</span> <span class="nv">get</span>

<span class="nv">markVisited</span> <span class="o">::</span> <span class="n">Point</span> <span class="o">-&gt;</span> <span class="n">Proc</span> <span class="p">()</span>
<span class="nv">markVisited</span> <span class="nv">pt</span> <span class="o">=</span> <span class="nv">modify</span> <span class="p">(</span><span class="nv">pt</span><span class="o">:</span><span class="p">)</span>

<span class="nv">search</span> <span class="o">::</span> <span class="n">Map</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="o">-&gt;</span> <span class="n">Proc</span> <span class="p">()</span>
<span class="nv">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="nv">y</span> <span class="o">=</span> <span class="kr">do</span>
  <span class="nv">guard</span> <span class="o">$</span> <span class="nv">x</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">x</span> <span class="o">&lt;</span> <span class="nv">length</span> <span class="p">(</span><span class="nv">m</span><span class="o">!!</span><span class="mi">0</span><span class="p">)</span>
  <span class="nv">guard</span> <span class="o">$</span> <span class="nv">y</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nv">y</span> <span class="o">&lt;</span> <span class="nv">length</span> <span class="nv">m</span>
  <span class="nv">guard</span> <span class="o">$</span> <span class="nv">m</span> <span class="o">!!</span> <span class="nv">y</span> <span class="o">!!</span> <span class="nv">x</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span>
  <span class="nv">guard</span> <span class="o">.</span> <span class="nv">not</span> <span class="o">=&lt;&lt;</span> <span class="nv">hasVisited</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span>
  <span class="kr">if</span> <span class="nv">y</span> <span class="o">==</span> <span class="nv">length</span> <span class="nv">m</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="kr">then</span> <span class="nv">return</span> <span class="p">()</span>
    <span class="kr">else</span> <span class="kr">do</span>
      <span class="nv">markVisited</span> <span class="p">(</span><span class="nv">x</span><span class="p">,</span> <span class="nv">y</span><span class="p">)</span>
      <span class="nv">msum</span> <span class="p">[</span><span class="nv">search</span> <span class="nv">m</span> <span class="p">(</span><span class="nv">x</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">,</span> <span class="nv">search</span> <span class="nv">m</span> <span class="p">(</span><span class="nv">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nv">y</span><span class="p">,</span> <span class="nv">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">y</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span> <span class="nv">search</span> <span class="nv">m</span> <span class="nv">x</span> <span class="p">(</span><span class="nv">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

<span class="nv">isConnected</span> <span class="o">::</span> <span class="n">Map</span> <span class="o">-&gt;</span> <span class="n">Bool</span>
<span class="nv">isConnected</span> <span class="nv">m</span> <span class="o">=</span> <span class="nv">runProc</span> <span class="o">$</span> <span class="nv">search</span> <span class="p">(</span><span class="nv">startLine</span><span class="o">:</span><span class="nv">m</span><span class="p">)</span> <span class="mi">0</span> <span class="mi">0</span>
  <span class="kr">where</span>
    <span class="nv">startLine</span> <span class="o">=</span> <span class="nv">replicate</span> <span class="p">(</span><span class="nv">length</span> <span class="p">(</span><span class="nv">m</span><span class="o">!!</span><span class="mi">0</span><span class="p">))</span> <span class="sc">&#39;+&#39;</span>

<span class="nv">readMap</span> <span class="o">::</span> <span class="n">FilePath</span> <span class="o">-&gt;</span> <span class="n">IO</span> <span class="n">Map</span>
<span class="nv">readMap</span> <span class="nv">file</span> <span class="o">=</span> <span class="nv">liftM</span> <span class="nv">lines</span> <span class="o">$</span> <span class="nv">readFile</span> <span class="nv">file</span>
          
<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">(</span><span class="nv">f</span><span class="o">:</span><span class="kr">_</span><span class="p">)</span> <span class="o">&lt;-</span> <span class="nv">getArgs</span>
          <span class="nv">m</span>     <span class="o">&lt;-</span> <span class="nv">readMap</span> <span class="nv">f</span>
          <span class="nv">print</span> <span class="o">$</span> <span class="nv">isConnected</span> <span class="nv">m</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1450/addtag/" class="addtag" id="addtag_1450">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1450/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1450/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1450"
  >-</span><span
  class="button yellow"
  id="rating_z_1450"
  >0</span><span 
  class="button green"
  id="rating_p_1450"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1450/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1450/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1454">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/304/" target="_top">[1..100]&gt;&gt;=pen</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/">#1454</a>(<script language="JavaScript">print_time(new Date("2007/07/25 14:51 GMT"));</script><noscript>2007/07/25 14:51 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #cfffcf;">3/3=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>番兵とゴールラインの配置と一次元化と Stateモナドを使ってみました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14</pre></td><td class="code"><div class="highlight"><pre><span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span><span class="o">.</span><span class="n">State</span>

<span class="nv">isConnected</span> <span class="nv">m</span> <span class="o">=</span> <span class="p">(`</span><span class="nv">evalState</span><span class="p">`</span> <span class="p">[])</span> <span class="o">$</span> <span class="nv">search</span> <span class="p">(</span><span class="nv">xlen&#39;</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="kr">where</span>
  <span class="nv">xlen</span> <span class="o">=</span> <span class="nv">length</span> <span class="o">$</span> <span class="nv">head</span> <span class="nv">m</span>
  <span class="nv">xlen&#39;</span> <span class="o">=</span> <span class="nv">xlen</span> <span class="o">+</span> <span class="mi">1</span>
  <span class="p">[</span><span class="nv">sentinelLine</span><span class="p">,</span> <span class="nv">startLine</span><span class="p">,</span> <span class="nv">goalLine</span><span class="p">]</span> <span class="o">=</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">replicate</span> <span class="nv">xlen</span><span class="p">)</span> <span class="s">&quot;.+G&quot;</span>
  <span class="nv">m&#39;</span> <span class="o">=</span> <span class="nv">concatMap</span> <span class="p">(</span><span class="s">&quot;.&quot;</span><span class="o">++</span><span class="p">)</span> <span class="o">$</span> <span class="p">[</span><span class="nv">sentinelLine</span><span class="p">]</span> <span class="o">++</span> <span class="p">[</span><span class="nv">startLine</span><span class="p">]</span> <span class="o">++</span> <span class="nv">m</span> <span class="o">++</span> <span class="p">[</span><span class="nv">goalLine</span><span class="p">]</span>
  <span class="nv">search</span> <span class="nv">p</span> <span class="o">=</span> <span class="kr">do</span>
    <span class="kr">let</span> <span class="nv">c</span> <span class="o">=</span> <span class="nv">m&#39;</span><span class="o">!!</span><span class="nv">p</span>
    <span class="kr">if</span> <span class="p">(</span><span class="nv">c</span> <span class="o">==</span> <span class="sc">&#39;G&#39;</span><span class="p">)</span> <span class="kr">then</span> <span class="nv">return</span> <span class="n">True</span>
     <span class="kr">else</span> <span class="kr">do</span>
      <span class="nv">visited</span> <span class="o">&lt;-</span> <span class="nv">get</span><span class="p">;</span> <span class="nv">put</span> <span class="o">$</span> <span class="nv">p</span><span class="o">:</span><span class="nv">visited</span>
      <span class="kr">if</span> <span class="p">(</span><span class="nv">c</span> <span class="o">==</span> <span class="sc">&#39;.&#39;</span> <span class="o">||</span> <span class="nv">elem</span> <span class="nv">p</span> <span class="nv">visited</span><span class="p">)</span> <span class="kr">then</span> <span class="nv">return</span> <span class="n">False</span>
        <span class="kr">else</span> <span class="nv">liftM</span> <span class="nv">or</span> <span class="o">$</span> <span class="nv">mapM</span> <span class="nv">search</span> <span class="o">$</span> <span class="nv">map</span> <span class="p">(</span><span class="nv">p</span><span class="o">+</span><span class="p">)</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="nv">xlen&#39;</span><span class="p">,</span> <span class="nv">xlen&#39;</span><span class="p">]</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/addtag/" class="addtag" id="addtag_1454">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #cfffcf;"
  >3/3=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1454"
  >-</span><span
  class="button yellow"
  id="rating_z_1454"
  >0</span><span 
  class="button green"
  id="rating_p_1454"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1395/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/">
    2
    replies
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1454/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1455">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/41/" target="_top">shiro</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1455/">#1455</a>(<script language="JavaScript">print_time(new Date("2007/07/25 19:51 GMT"));</script><noscript>2007/07/25 19:51 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  なるほど。Stateモナドでvisitedを持ち回りながらどうorを実現するかでわからなくなってたんですが、こういう時にliftMを使うのですね。
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1455/addtag/" class="addtag" id="addtag_1455">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1455"
  >-</span><span
  class="button yellow"
  id="rating_z_1455"
  >0</span><span 
  class="button green"
  id="rating_p_1455"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1455/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1455/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1456">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/304/" target="_top">[1..100]&gt;&gt;=pen</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1456/">#1456</a>(<script language="JavaScript">print_time(new Date("2007/07/26 04:12 GMT"));</script><noscript>2007/07/26 04:12 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>map が続くのが気になってたので。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4</pre></td><td class="code"><div class="highlight"><pre><span class="c1">-- else liftM or $ mapM search $ map (p+) [1, -1, -xlen&#39;, xlen&#39;]</span>
<span class="c1">-- じゃなくて</span>
   <span class="kr">else</span> <span class="nv">liftM</span> <span class="nv">or</span> <span class="o">$</span> <span class="nv">mapM</span> <span class="p">(</span><span class="nv">search</span> <span class="o">.</span> <span class="p">(</span><span class="nv">p</span><span class="o">+</span><span class="p">))</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="nv">xlen&#39;</span><span class="p">,</span> <span class="nv">xlen&#39;</span><span class="p">]</span>
<span class="c1">-- でよかったんだ</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1456/addtag/" class="addtag" id="addtag_1456">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1456/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1456/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1456"
  >-</span><span
  class="button yellow"
  id="rating_z_1456"
  >0</span><span 
  class="button green"
  id="rating_p_1456"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1454/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1456/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1456/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment1396">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/134/" target="_top">こう。</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1396/">#1396</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:52 GMT"));</script><noscript>2007/07/24 08:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/c/">
	  C
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  余り綺麗ではないですが、とりあえず。
256x256以下限定。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include&lt;stdio.h&gt;</span>

<span class="kt">int</span> <span class="n">hight</span><span class="p">;</span>
<span class="kt">int</span> <span class="n">width</span><span class="p">;</span>

<span class="kt">char</span> <span class="n">map</span><span class="p">[</span><span class="mi">256</span><span class="p">][</span><span class="mi">256</span><span class="p">];</span>

<span class="kt">int</span> <span class="n">walk</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="n">y</span><span class="o">==</span><span class="n">hight</span><span class="p">)</span>
		<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>						<span class="c">//下側に出たらゴール</span>
	<span class="k">if</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>			<span class="c">//道じゃないならアウト</span>
	<span class="k">if</span><span class="p">(</span><span class="n">x</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="n">y</span><span class="o">&lt;</span><span class="mi">0</span><span class="o">||</span><span class="n">x</span><span class="o">&gt;</span><span class="n">width</span><span class="o">||</span><span class="n">y</span><span class="o">&gt;</span><span class="n">hight</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>	<span class="c">//外壁にめり込んだらアウト</span>
	<span class="n">map</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;x&#39;</span><span class="p">;</span>						<span class="c">//探索済みマーク</span>
	<span class="k">return</span> <span class="n">walk</span><span class="p">(</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">|</span><span class="n">walk</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">|</span><span class="n">walk</span><span class="p">(</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">)</span><span class="o">|</span><span class="n">walk</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
	<span class="n">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">;</span>
	<span class="kt">char</span> <span class="o">*</span><span class="n">buf</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
	
	<span class="n">fp</span><span class="o">=</span><span class="n">fopen</span><span class="p">(</span><span class="s">&quot;map.map&quot;</span><span class="p">,</span><span class="s">&quot;r&quot;</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">fp</span><span class="o">==</span><span class="nb">NULL</span><span class="p">){</span>
		<span class="n">printf</span><span class="p">(</span><span class="s">&quot;マップが開けません</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
		<span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
	<span class="p">}</span>
	
	<span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">do</span><span class="p">{</span>
		<span class="n">buf</span><span class="o">=</span><span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
		<span class="k">if</span><span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span><span class="mi">256</span><span class="p">,</span><span class="n">fp</span><span class="p">)</span><span class="o">==</span><span class="nb">NULL</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>
		<span class="k">if</span><span class="p">(</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;.&#39;</span><span class="o">&amp;&amp;</span><span class="n">buf</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">!=</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
		<span class="n">i</span><span class="o">++</span><span class="p">;</span>
	<span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="n">i</span><span class="o">&lt;</span><span class="mi">256</span><span class="p">);</span>
	<span class="n">hight</span><span class="o">=</span><span class="n">i</span><span class="p">;</span>
	
	<span class="n">width</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">width</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;+&#39;</span><span class="o">||</span><span class="n">map</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">width</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;.&#39;</span><span class="p">)</span> <span class="n">width</span><span class="o">++</span><span class="p">;</span>
	
	<span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">width</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="n">walk</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="mi">0</span><span class="p">)){</span>
			<span class="n">printf</span><span class="p">(</span><span class="s">&quot;到達可能</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
			<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&quot;到達不能</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1396/addtag/" class="addtag" id="addtag_1396">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/c/">
		C
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1396/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1396/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1396"
  >-</span><span
  class="button yellow"
  id="rating_z_1396"
  >0</span><span 
  class="button green"
  id="rating_p_1396"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1396/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1397">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/177/" target="_top">ocean</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1397/">#1397</a>(<script language="JavaScript">print_time(new Date("2007/07/24 08:54 GMT"));</script><noscript>2007/07/24 08:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  番兵を使い、二次元マップを一次元配列で表現。オーソドックスに幅優先探索で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">sys</span>
<span class="k">import</span> <span class="nn">collections</span>

<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">matrix</span><span class="p">):</span>
    <span class="n">col_count</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span> <span class="c"># +1 for banpei</span>
    <span class="nb">map</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">matrix</span><span class="p">:</span>
        <span class="nb">map</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">a</span> <span class="o">+</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">col_count</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span>
    <span class="nb">map</span><span class="o">.</span><span class="n">extend</span><span class="p">([</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="n">col_count</span><span class="p">)</span> <span class="c"># banpei</span>

    <span class="n">goal</span> <span class="o">=</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">col_count</span> <span class="c"># if index &gt;= goal, reached goal!</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">deque</span><span class="p">([])</span>
    <span class="k">def</span> <span class="nf">append_to_queue</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
        <span class="n">queue</span><span class="o">.</span><span class="n">appendleft</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
        <span class="nb">map</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">col_count</span><span class="p">):</span> <span class="c"># start</span>
        <span class="k">if</span> <span class="nb">map</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span>
            <span class="n">append_to_queue</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">diff</span> <span class="ow">in</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="n">col_count</span><span class="p">,</span> <span class="o">+</span><span class="n">col_count</span><span class="p">):</span>
            <span class="n">next_i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">diff</span>
            <span class="k">if</span> <span class="nb">map</span><span class="p">[</span><span class="n">next_i</span><span class="p">]:</span>
                <span class="k">if</span> <span class="n">next_i</span> <span class="o">&gt;=</span> <span class="n">goal</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">True</span>
                <span class="n">append_to_queue</span><span class="p">(</span><span class="n">next_i</span><span class="p">)</span>
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">:</span>
        <span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;specity text file path.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="n">matrix</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">open</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="n">matrix</span><span class="o">.</span><span class="n">append</span><span class="p">([{</span><span class="s">&#39;+&#39;</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">:</span> <span class="bp">False</span><span class="p">}[</span><span class="n">c</span><span class="p">]</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">line</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()])</span>
    <span class="k">print</span> <span class="n">solve</span><span class="p">(</span><span class="n">matrix</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1397/addtag/" class="addtag" id="addtag_1397">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1397/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1397/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1397"
  >-</span><span
  class="button yellow"
  id="rating_z_1397"
  >0</span><span 
  class="button green"
  id="rating_p_1397"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1397/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1398">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1398/">#1398</a>(<script language="JavaScript">print_time(new Date("2007/07/24 09:08 GMT"));</script><noscript>2007/07/24 09:08 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/prolog/">
	  Prolog
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>選んだルートを#でなぞります。
通れないと図と&lt;&lt;fail&gt;&gt;を表示します。
この調子で、nethack-borgを作れそうな気がしてきました。
実行例。
 $ gprolog --entry-goal '[map],maze(map1),maze(map2),maze(map3),halt'
.#.....
.#.###.
.#.#.#.
.###.#.
.....#.
&lt;&lt;success&gt;&gt;

..+...+
++.+++.
.+...++
++++.+.
.+..+.+
&lt;&lt;fail&gt;&gt;

.#....+..
.###..+..
.+.####..
.+....#..
.+++++#++
...+..#..
......#..
&lt;&lt;success&gt;&gt;

 $
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43</pre></td><td class="code"><div class="highlight"><pre>maze(F):-open(F,read,S),phrase(char_file(S),M),mapsize(M,W,H),start(M,W,C0),
                (mouse(C0,M,W,H,[C0],Hist),
                 mark(M,Hist,M1),print_map(M1),write(&#39;&lt;&lt;success&gt;&gt;&#39;),nl,nl
                ;print_map(M),write(&#39;&lt;&lt;fail&gt;&gt;&#39;),nl,nl).

print_map([]).
print_map([M|Ms]):-atom_chars(L,M),write(L),nl,print_map(Ms).

mark(Map,Hist,Map1):-mark(1,Map,Hist,Map1).

mark(_,[],_,[]).
mark(Y,[M|Ms],Hist,[M1|Ms1]):-Y1 is Y + 1,mark_line(Y,1,M,Hist,M1),mark(Y1, Ms, Hist, Ms1).

mark_line(_,_,[],_,[]).
mark_line(Y,X,[I|Is],Hist,[I1|Is1]):-(member((X,Y),Hist) -&gt; I1=&#39;#&#39;;I1=I),
                                     X1 is X + 1,
                                     mark_line(Y,X1,Is,Hist,Is1).

mapsize(Map,W,H):-length(Map,H),Map=[Line|_],length(Line,W).

start([Map1|_],W,(I,1)):-for(I,1,W),nth(I,Map1,+).

next((X0,Y0),(X,Y)):-pm(Xs,Ys),X is X0 + Xs,Y is Y0 + Ys.

stay(W,H,(X,Y)):-for(X,1,W),for(Y,1,H).

road(Map,(X,Y)):-nth(Y,Map,L),nth(X,L,+).

goal(H,(_,H)):-!.

pm(1,0).  pm(-1,0).  pm(0,1).  pm(0,-1).

not(P):-P,!,fail.
not(_):-!.

mouse(C0,_,_,H,Hist,Hist):-goal(H,C0).
mouse(C0,Map,W,H,Hist,Hr):-next(C0,C1),stay(W,H,C1),road(Map,C1),not(member(C1,Hist)),mouse(C1,Map,W,H,[C1|Hist],Hr).

char_file(S)--&gt;{peek_char(S,end_of_file)},!,[].
char_file(S)--&gt;{phrase(char_line(S),L)},[L],char_file(S).

char_line(S)--&gt;{peek_char(S,end_of_file);char_code(NL,10),peek_char(S,NL),get_char(S,_)},[],!.
char_line(S)--&gt;{get_char(S,C)},[C],char_line(S).
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1398/addtag/" class="addtag" id="addtag_1398">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/GNU-Prolog/">GNU-Prolog</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/prolog/">
		Prolog
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1398/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1398/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1398"
  >-</span><span
  class="button yellow"
  id="rating_z_1398"
  >0</span><span 
  class="button green"
  id="rating_p_1398"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1398/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1398/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1402">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/1/" target="_top">にしお</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1402/">#1402</a>(<script language="JavaScript">print_time(new Date("2007/07/24 09:44 GMT"));</script><noscript>2007/07/24 09:44 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>いままでPrologをあなどりすぎていたということが
だんだんわかってきました。
Prologすごい…</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1402/addtag/" class="addtag" id="addtag_1402">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1402"
  >-</span><span
  class="button yellow"
  id="rating_z_1402"
  >0</span><span 
  class="button green"
  id="rating_p_1402"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1398/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1402/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1402/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1402/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1404">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/">#1404</a>(<script language="JavaScript">print_time(new Date("2007/07/24 09:53 GMT"));</script><noscript>2007/07/24 09:53 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/prolog/">
	  Prolog
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>お褒めいただいて、prolog共々大変光栄に存じ奉りますが、一行目の(の付け所を間違えたので、通れるのに、&lt;&lt;fail&gt;&gt;と言い張ることがあります。

maze/1は以下のように訂正します。
（テストが甘かった…）</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3
4
5</pre></td><td class="code"><div class="highlight"><pre>maze(F):-open(F,read,S),phrase(char_file(S),M),mapsize(M,W,H),
                (start(M,W,C0),
                 mouse(C0,M,W,H,[C0],Hist),
                 mark(M,Hist,M1),print_map(M1),write(&#39;&lt;&lt;success&gt;&gt;&#39;),nl,nl
                ;print_map(M),write(&#39;&lt;&lt;fail&gt;&gt;&#39;),nl,nl).
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/addtag/" class="addtag" id="addtag_1404">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/GNU-Prolog/">GNU-Prolog</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/prolog/">
		Prolog
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1404"
  >-</span><span
  class="button yellow"
  id="rating_z_1404"
  >0</span><span 
  class="button green"
  id="rating_p_1404"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1402/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1404/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1449">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/117/" target="_top">katsu</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1449/">#1449</a>(<script language="JavaScript">print_time(new Date("2007/07/25 09:33 GMT"));</script><noscript>2007/07/25 09:33 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/prolog/">
	  Prolog
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #dfffdf;">2/2=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>リベンジに、Prolog改良版行きます。今度はちゃんと計算終わります。
アルゴリズムとしては、
「迷路の壁を右手で触りながら移動」
→「スタートに戻ったら失敗」
or 「最終行に届いたら成功」です。
副作用無しで美しい！とか思っていたら、
失敗時のジャンプにcatch/throwを使っちゃったのが残念至極。
始めの迷路読み込みには、DCGを使っています。
%余談ですが、GNU-prologだとL=[1|L]みたいな循環リストを処理させると、止まったりします。残念。実行例…
 $ cat map1
.+.....
.+.+++.
.+.+.+.
.+++.+.
.....+.
 $ cat map2
..+...+
++.+++.
.+...++
++++.+.
.+..+.+
 $ cat map3
.+....+..
.+++..+..
.+.++++..
.+....+..
.++++++++
...+..+..
......+..
 $ cat map4
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
................
 $ cat map5
.+...........+..
.++.++++++++++..
.+...........+..
.+.+++++++++++..
.+.+.........+..
.+.+++++++++++..
++.+.+.......+..
+..+++++++++++..
++++............
++++++++++++++++
................
 $ pl -sq map2.pl
map1-&gt;success
map2-&gt;fail
map3-&gt;success
map4-&gt;fail
map5-&gt;fail
 $</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre>maze(F):-
        load_map(F,Map,W,H),
        (start(Map,W,Start),
         catch(mouse(Map,Start,(0,1),W,H,Start), returning, fail),
         R=success
        ;R=fail),
        writeln(F-&gt;R).

load_map(F,M,W,H):-open(F,read,S),phrase(char_file(S),M),mapsize(M,W,H).

map_symbol(M,(X,Y),C):-nth1(Y,M,L),nth1(X,L,C).

start([Map1|_],W,(I,1)):-between(1,W,I),nth1(I,Map1,+).

dirlist(L):-L=[(0,1),(1,0),(0,-1),(-1,0)|L].

dir_try(CDir,L):-dirlist(Ls),dir_try(CDir,Ls,L).

dir_try(CDir,L,L):-L=[_,CDir|_],!.
dir_try(CDir,[_|Ls],L):-dir_try(CDir,Ls,L).

lim_member(0,_,_):-!,fail.
lim_member(_,X,[X|_]).
lim_member(L,X,[X0|Xs]):-(var(X);X\=X0),L1 is L - 1,lim_member(L1,X,Xs).

mouse(_,(_,H),_,_,H,_).
mouse(Map,Pos,Dir,W,H,Orig):-
        dir_try(Dir,DirL),
        lim_member(4,Dir1,DirL),
        move(Pos,Dir1,Pos1),
        (Orig = Pos1 -&gt; throw(returning);true),
        stay(W,H,Pos1),
        map_symbol(Map,Pos1,+),
        mouse(Map,Pos1,Dir1,W,H,Orig).

move((X,Y),(Xs,Ys),(X1,Y1)):-X1 is X + Xs, Y1 is Y + Ys.

stay(W,H,(X,Y)):-between(1,W,X),between(1,H,Y).

mapsize(Map,W,H):-length(Map,H),Map=[L|_],length(L,W).

char_file(S)--&gt;{peek_char(S,end_of_file)},!,[].
char_file(S)--&gt;{phrase(char_line(S),L)},[L],char_file(S).

char_line(S)--&gt;{peek_char(S,end_of_file);char_code(NL,10),peek_char(S,NL),get_char(S,_)},[],!.
char_line(S)--&gt;{get_char(S,C)},[C],char_line(S).

:-maplist(maze,[map1,map2,map3,map4,map5]),halt.
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1449/addtag/" class="addtag" id="addtag_1449">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/SWI-prolog/">SWI-prolog</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/prolog/">
		Prolog
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1449/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1449/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #dfffdf;"
  >2/2=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1449"
  >-</span><span
  class="button yellow"
  id="rating_z_1449"
  >0</span><span 
  class="button green"
  id="rating_p_1449"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1404/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1449/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1449/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


    </div>
  


  

  
    





<div class="comment" id="comment1399">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1399/">#1399</a>(<script language="JavaScript">print_time(new Date("2007/07/24 09:10 GMT"));</script><noscript>2007/07/24 09:10 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  Squeak Smalltalk で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre>| map width height mapString connecteds newOneFound mapFilename |
mapFilename := &#39;map.txt&#39;.
mapString := (FileStream fileNamed: mapFilename) contents.
width := (mapString indexOf: Character cr) - 1.
height := mapString size + 1 // (width + 1).
map := Matrix rows: height columns: width contents: (mapString copyWithout: Character cr).
connecteds := OrderedCollection new.
1 to: width do: [:cIdx |
   (map at: 1 at: cIdx) = $+ ifTrue: [map at: 1 at: cIdx put: $*. connecteds add: 1@cIdx]].
[  newOneFound := false.
   map indicesDo: [:rIdx :cIdx |
      ((map at: rIdx at: cIdx) = $+ and: [
            (connecteds includes: rIdx@cIdx) not and: [
               {-1@0. 0@-1. 1@0. 0@1} anySatisfy: [:delta |
                  connecteds includes: rIdx@cIdx + delta]]]) ifTrue: [
         connecteds add: rIdx@cIdx.
         newOneFound := true]].
   newOneFound] whileTrue.
^connecteds anySatisfy: [:pt | pt x = height]
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1399/addtag/" class="addtag" id="addtag_1399">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1399/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1399/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1399"
  >-</span><span
  class="button yellow"
  id="rating_z_1399"
  >0</span><span 
  class="button green"
  id="rating_p_1399"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1399/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1399/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1407">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/88/" target="_top">sumim</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1407/">#1407</a>(<script language="JavaScript">print_time(new Date("2007/07/24 10:03 GMT"));</script><noscript>2007/07/24 10:03 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/smalltalk/">
	  Smalltalk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>#1399 で、

map at: 1 at: cIdx put: $*.

は、不要でした(^_^;)。

改めまして、$* でなぞる版も。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19</pre></td><td class="code"><div class="highlight"><pre>| map width height mapString mapFilename queue |
mapFilename := &#39;map.txt&#39;.
mapString := (FileStream fileNamed: mapFilename) contents.
width := (mapString indexOf: Character cr) - 1.
height := mapString size + 1 // (width + 1).
map := Matrix rows: height columns: width contents: (mapString copyWithout: Character cr).
queue := OrderedCollection new.
1 to: width do: [:y | (map at: 1 at: y) = $+ ifTrue: [queue add: 1@y]].
[queue notEmpty] whileTrue: [
   | position |
   position := queue removeFirst.
   map at: position x at: position y put: $*.
   {-1@0. 0@-1. 1@0. 0@1} do: [:delta |
      | next |
      next := position + delta.
      (map at: next x at: next y ifInvalid: [nil]) = $+ ifTrue: [
         map at: next x at: next y put: $*.
         queue add: next]]].
^(map atRow: height) includes: $*
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1407/addtag/" class="addtag" id="addtag_1407">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/Squeak_Smalltalk/">Squeak_Smalltalk</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/smalltalk/">
		Smalltalk
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1407/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1407/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1407"
  >-</span><span
  class="button yellow"
  id="rating_z_1407"
  >0</span><span 
  class="button green"
  id="rating_p_1407"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1399/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1407/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1407/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  

  

  
    





<div class="comment" id="comment1408">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/59/" target="_top">nori</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1408/">#1408</a>(<script language="JavaScript">print_time(new Date("2007/07/24 10:09 GMT"));</script><noscript>2007/07/24 10:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
	  Python
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  番兵の枠をくっつけて、「色」を塗ります。
探索のような高級なことはまったくしていません。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51</pre></td><td class="code"><div class="highlight"><pre><span class="n">f</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="s">&#39;nukemichi_test1.txt&#39;</span><span class="p">)</span>
<span class="nb">map</span> <span class="o">=</span> <span class="p">[</span><span class="nb">list</span><span class="p">(</span><span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="o">.</span><span class="n">readlines</span><span class="p">()]</span>
<span class="n">f</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>


<span class="n">size_v</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">map</span><span class="p">)</span>
<span class="n">size_h</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">map</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sentinel_t</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;O&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">size_h</span><span class="p">)</span>
<span class="n">sentinel_b</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;+&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">size_h</span><span class="p">)</span>
<span class="n">sentinel_x</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;.&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">size_h</span><span class="p">)</span>
<span class="n">sentinel_y</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;.&#39;</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="n">size_h</span><span class="p">)</span>

<span class="nb">map</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sentinel_t</span><span class="p">)</span>
<span class="nb">map</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">sentinel_x</span><span class="p">)</span>
<span class="nb">map</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sentinel_b</span><span class="p">)</span>
<span class="nb">map</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">sentinel_y</span><span class="p">)</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">:</span>
  <span class="n">row</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="s">&quot;.&quot;</span><span class="p">)</span>
  <span class="n">row</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;.&quot;</span><span class="p">)</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">:</span>
  <span class="k">print</span> <span class="n">row</span>


<span class="n">checked</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">workset</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">size_h</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

<span class="k">print</span> <span class="n">workset</span>

<span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="nb">map</span><span class="p">,</span> <span class="n">workset</span><span class="p">,</span> <span class="n">checked</span><span class="p">):</span>
  <span class="k">if</span> <span class="nb">map</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;+&#39;</span><span class="p">:</span>
    <span class="n">workset</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
    <span class="nb">map</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;O&#39;</span>

<span class="k">while</span> <span class="n">workset</span><span class="p">:</span>
  <span class="n">w</span> <span class="o">=</span> <span class="n">workset</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>
  <span class="k">print</span> <span class="n">w</span>
  <span class="n">check</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">map</span><span class="p">,</span> <span class="n">workset</span><span class="p">,</span> <span class="n">checked</span><span class="p">)</span>
  <span class="n">check</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">map</span><span class="p">,</span> <span class="n">workset</span><span class="p">,</span> <span class="n">checked</span><span class="p">)</span>
  <span class="n">check</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nb">map</span><span class="p">,</span> <span class="n">workset</span><span class="p">,</span> <span class="n">checked</span><span class="p">)</span>
  <span class="n">check</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">map</span><span class="p">,</span> <span class="n">workset</span><span class="p">,</span> <span class="n">checked</span><span class="p">)</span>
  <span class="n">checked</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="n">w</span><span class="p">:</span><span class="bp">None</span><span class="p">})</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">map</span><span class="p">:</span>
  <span class="k">print</span> <span class="n">row</span>

<span class="k">if</span> <span class="nb">map</span><span class="p">[</span><span class="n">size_h</span><span class="p">][</span><span class="n">size_v</span><span class="p">]</span> <span class="o">==</span> <span class="s">&#39;O&#39;</span><span class="p">:</span>
  <span class="k">print</span> <span class="s">&#39;There is&#39;</span>
<span class="k">else</span><span class="p">:</span>
  <span class="k">print</span> <span class="s">&#39;No way&#39;</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1408/addtag/" class="addtag" id="addtag_1408">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/python/">
		Python
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1408/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1408/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1408"
  >-</span><span
  class="button yellow"
  id="rating_z_1408"
  >0</span><span 
  class="button green"
  id="rating_p_1408"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1408/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1408/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1409">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/59/" target="_top">nori</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1409/">#1409</a>(<script language="JavaScript">print_time(new Date("2007/07/24 10:17 GMT"));</script><noscript>2007/07/24 10:17 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  そういえば、迷路をGIMPやPhotoshopの「投げ縄ツール」で解く方法がありますねぇ。
http://www.google.co.jp/search?hl=ja&amp;q=%E8%BF%B7%E8%B7%AF%E3%80%80photoshop&amp;btnG=%E6%A4%9C%E7%B4%A2&amp;lr=

これは「バケツツール」による解法の存在検証ですね（道順はわからない！）。

	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1409/addtag/" class="addtag" id="addtag_1409">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1409"
  >-</span><span
  class="button yellow"
  id="rating_z_1409"
  >0</span><span 
  class="button green"
  id="rating_p_1409"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1408/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1409/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1409/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  
    





<div class="comment" id="comment1410">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/172/" target="_top">cats</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1410/">#1410</a>(<script language="JavaScript">print_time(new Date("2007/07/24 10:25 GMT"));</script><noscript>2007/07/24 10:25 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/csharp/">
	  C#
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47</pre></td><td class="code"><div class="highlight"><pre><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">Program</span>
<span class="k">{</span>
  <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
  <span class="k">{</span>
    <span class="kt">string</span> <span class="n">data1</span> <span class="p">=</span> <span class="s">@&quot;.+.....</span>
<span class="s">.+.+++.</span>
<span class="s">.+.+.+.</span>
<span class="s">.+++.+.</span>
<span class="s">.....+.&quot;</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">data2</span> <span class="p">=</span> <span class="s">@&quot;..+..+.</span>
<span class="s">++.+++.</span>
<span class="s">.+...++</span>
<span class="s">++++.+.</span>
<span class="s">.+..+.+&quot;</span><span class="p">;</span>
    <span class="kt">string</span> <span class="n">data3</span> <span class="p">=</span> <span class="s">@&quot;++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">++++++++++++++++</span>
<span class="s">................&quot;</span><span class="p">;</span>
    <span class="k">foreach</span> <span class="p">(</span><span class="kt">string</span> <span class="n">data</span> <span class="k">in</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="k">{</span> <span class="n">data1</span><span class="p">,</span> <span class="n">data2</span><span class="p">,</span> <span class="n">data3</span> <span class="k">}</span><span class="p">)</span>
      <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;{0}\n{1}&quot;</span><span class="p">,</span> <span class="n">data</span><span class="p">,</span> <span class="n">CanGo</span><span class="p">(</span><span class="n">data</span><span class="p">));</span>
  <span class="k">}</span>
  <span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">CanGo</span><span class="p">(</span><span class="kt">string</span> <span class="n">data</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="kt">string</span><span class="p">[]</span> <span class="n">lines</span> <span class="p">=</span> <span class="n">data</span><span class="p">.</span><span class="n">Replace</span><span class="p">(</span><span class="s">&quot;\r&quot;</span><span class="p">,</span><span class="s">&quot;&quot;</span><span class="p">).</span><span class="n">Split</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">n</span> <span class="p">=</span> <span class="n">lines</span><span class="p">.</span><span class="n">Length</span><span class="p">,</span> <span class="n">m</span> <span class="p">=</span> <span class="n">lines</span><span class="p">[</span><span class="m">0</span><span class="p">].</span><span class="n">Length</span><span class="p">;</span>
    <span class="kt">int</span><span class="p">[,]</span> <span class="n">map</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="p">++</span><span class="n">j</span><span class="p">)</span> <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="n">lines</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="p">==</span> <span class="sc">&#39;.&#39;</span> <span class="p">?</span> <span class="m">0</span> <span class="p">:</span> <span class="m">1</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="p">++</span><span class="n">i</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">map</span><span class="p">[</span><span class="m">0</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="p">==</span> <span class="m">1</span> <span class="p">&amp;&amp;</span> <span class="n">CanGo</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">i</span><span class="p">))</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
  <span class="k">}</span>
  <span class="k">private</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">CanGo</span><span class="p">(</span><span class="kt">int</span><span class="p">[,]</span> <span class="n">map</span><span class="p">,</span> <span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">)</span>
  <span class="k">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">i</span> <span class="p">&gt;=</span> <span class="n">n</span> <span class="p">||</span> <span class="n">j</span> <span class="p">&lt;</span> <span class="m">0</span> <span class="p">||</span> <span class="n">j</span> <span class="p">&gt;=</span> <span class="n">m</span> <span class="p">||</span> <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">!=</span> <span class="m">1</span><span class="p">)</span> <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="p">==</span> <span class="n">n</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="n">map</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">k</span> <span class="p">&lt;</span> <span class="m">4</span><span class="p">;</span> <span class="p">++</span><span class="n">k</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="n">CanGo</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">i</span> <span class="p">+</span> <span class="p">(</span><span class="n">k</span> <span class="p">*</span> <span class="n">k</span> <span class="p">-</span> <span class="m">2</span><span class="p">)</span> <span class="p">%</span> <span class="m">2</span><span class="p">,</span> <span class="n">j</span> <span class="p">+</span> <span class="p">(</span><span class="n">k</span> <span class="p">*</span> <span class="n">k</span> <span class="p">-</span> <span class="m">3</span><span class="p">)</span> <span class="p">%</span> <span class="m">2</span><span class="p">))</span> <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
  <span class="k">}</span>
<span class="k">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1410/addtag/" class="addtag" id="addtag_1410">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/csharp/">
		C#
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1410/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1410/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1410"
  >-</span><span
  class="button yellow"
  id="rating_z_1410"
  >0</span><span 
  class="button green"
  id="rating_p_1410"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1410/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment1415">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1415/">#1415</a>(<script language="JavaScript">print_time(new Date("2007/07/24 11:53 GMT"));</script><noscript>2007/07/24 11:53 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>FillPaintのアルゴリズムで最上段から塗り始めて
最下段に塗られたマスがあれば経路あり。
最下段に到達した時点で終わってもいいけど
とりあえず全部塗ってみた。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nv">$map</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="nv">$w</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
<span class="nv">$h</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>

<span class="k">if</span><span class="p">((</span><span class="nv">$file</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="s2">&quot;r&quot;</span><span class="p">))</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
	<span class="k">exit</span><span class="p">();</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="nv">$y</span><span class="o">=</span><span class="m">0</span><span class="p">;(</span><span class="nv">$c</span><span class="o">=</span><span class="nf">fgetc</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">;)</span>
<span class="p">{</span>	<span class="k">switch</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span>
	<span class="p">{</span>
	<span class="k">case</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s2">&quot;</span><span class="o">:</span>
	<span class="k">case</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">:</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$x</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>	<span class="o">++</span><span class="nv">$y</span><span class="p">;</span>
			<span class="nv">$w</span><span class="o">=</span><span class="nf">max</span><span class="p">(</span><span class="nv">$w</span><span class="p">,</span><span class="nv">$x</span><span class="p">);</span>
			<span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="k">default</span><span class="o">:</span>
		<span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nv">$c</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nv">$h</span><span class="o">=</span><span class="nv">$y</span><span class="p">;</span>
<span class="nf">fclose</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>

<span class="nv">$fifo</span><span class="o">=</span><span class="k">array</span><span class="p">();</span> <span class="c">// 座標FIFO</span>

<span class="nv">$fd</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">$w</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="m">0</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
	<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$fd</span><span class="p">)</span>
		<span class="p">{</span>	<span class="nv">$fifo</span><span class="p">[]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="m">0</span><span class="p">);</span> <span class="c">// FIFOに最上段の&#39;+&#39;の位置をセット</span>
			<span class="nv">$fd</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">else</span>
		<span class="nv">$fd</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span><span class="o">=</span><span class="nf">array_shift</span><span class="p">(</span><span class="nv">$fifo</span><span class="p">))</span>
<span class="p">{</span>	<span class="nv">$fu</span><span class="o">=</span><span class="nv">$fd</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="nv">$x</span><span class="o">&gt;</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
		<span class="o">--</span><span class="nv">$x</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(;</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
	<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$y</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="o">-</span><span class="m">1</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
			<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$fu</span><span class="p">)</span>
				<span class="p">{</span>	<span class="nv">$fifo</span><span class="p">[]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="o">-</span><span class="m">1</span><span class="p">);</span> <span class="c">// 上に繋がってる</span>
					<span class="nv">$fu</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">else</span>
				<span class="nv">$fu</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$y</span><span class="o">&lt;</span><span class="nv">$h</span><span class="o">-</span><span class="m">1</span><span class="p">)</span>
		<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="o">+</span><span class="m">1</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
			<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$fd</span><span class="p">)</span>
				<span class="p">{</span>	<span class="nv">$fifo</span><span class="p">[]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="o">+</span><span class="m">1</span><span class="p">);</span> <span class="c">// 下に繋がってる</span>
					<span class="nv">$fd</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="k">else</span>
				<span class="nv">$fd</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">=</span><span class="s1">&#39;*&#39;</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="nf">reset</span><span class="p">(</span><span class="nv">$map</span><span class="p">);</span>
<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(,</span><span class="nv">$v</span><span class="p">)</span><span class="o">=</span><span class="nf">each</span><span class="p">(</span><span class="nv">$map</span><span class="p">))</span>
	<span class="k">echo</span> <span class="nf">implode</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nv">$v</span><span class="p">),</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">$w</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$h</span><span class="o">-</span><span class="m">1</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="c">// 最下段に&#39;*&#39;があったら経路あり</span>
	<span class="p">{</span>	<span class="k">echo</span> <span class="s2">&quot;path(s) exists.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>

<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1415/addtag/" class="addtag" id="addtag_1415">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1415/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1415/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1415"
  >-</span><span
  class="button yellow"
  id="rating_z_1415"
  >0</span><span 
  class="button green"
  id="rating_p_1415"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1415/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1415/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1417">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/">#1417</a>(<script language="JavaScript">print_time(new Date("2007/07/24 12:36 GMT"));</script><noscript>2007/07/24 12:36 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>同じコードが3回も出て来てかっこ悪かったので修正。
ここまでやってから出せよと…。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nv">$map</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="nv">$w</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
<span class="nv">$h</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>

<span class="k">if</span><span class="p">((</span><span class="nv">$file</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="s2">&quot;r&quot;</span><span class="p">))</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
	<span class="k">exit</span><span class="p">();</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="nv">$y</span><span class="o">=</span><span class="m">0</span><span class="p">;(</span><span class="nv">$c</span><span class="o">=</span><span class="nf">fgetc</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span><span class="o">!==</span><span class="k">false</span><span class="p">;)</span>
<span class="p">{</span>	<span class="k">switch</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span>
	<span class="p">{</span>
	<span class="k">case</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s2">&quot;</span><span class="o">:</span>
	<span class="k">case</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">:</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$x</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>	<span class="o">++</span><span class="nv">$y</span><span class="p">;</span>
			<span class="nv">$w</span><span class="o">=</span><span class="nf">max</span><span class="p">(</span><span class="nv">$w</span><span class="p">,</span><span class="nv">$x</span><span class="p">);</span>
			<span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="k">default</span><span class="o">:</span>
		<span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nv">$c</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nv">$h</span><span class="o">=</span><span class="nv">$y</span><span class="p">;</span>
<span class="nf">fclose</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>

<span class="k">function</span> <span class="nf">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="nv">$f</span><span class="p">)</span>
<span class="p">{</span>	<span class="k">global</span> <span class="nv">$map</span><span class="p">,</span><span class="nv">$fifo</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
	<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nv">$f</span><span class="p">)</span>
		<span class="p">{</span>	<span class="nv">$fifo</span><span class="p">[]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">);</span>
			<span class="nv">$f</span><span class="o">=</span><span class="k">true</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">else</span>
		<span class="nv">$f</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
	<span class="k">return</span> <span class="nv">$f</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$fifo</span><span class="o">=</span><span class="k">array</span><span class="p">();</span> <span class="c">// 座標FIFO</span>

<span class="nv">$fd</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">$w</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
	<span class="nv">$fd</span><span class="o">=</span><span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="nv">$fd</span><span class="p">);</span>

<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span><span class="o">=</span><span class="nf">array_shift</span><span class="p">(</span><span class="nv">$fifo</span><span class="p">))</span>
<span class="p">{</span>	<span class="nv">$fu</span><span class="o">=</span><span class="nv">$fd</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>
	<span class="k">while</span><span class="p">(</span><span class="nv">$x</span><span class="o">&gt;</span><span class="m">0</span> <span class="o">&amp;&amp;</span> <span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="o">-</span><span class="m">1</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
		<span class="o">--</span><span class="nv">$x</span><span class="p">;</span>
	<span class="k">for</span><span class="p">(;</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
	<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nv">$y</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
			<span class="nv">$fu</span><span class="o">=</span><span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="o">-</span><span class="m">1</span><span class="p">,</span><span class="nv">$fu</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$y</span><span class="o">&lt;</span><span class="nv">$h</span><span class="o">-</span><span class="m">1</span><span class="p">)</span>
			<span class="nv">$fd</span><span class="o">=</span><span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="o">+</span><span class="m">1</span><span class="p">,</span><span class="nv">$fd</span><span class="p">);</span>
		<span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">=</span><span class="s1">&#39;*&#39;</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="nf">reset</span><span class="p">(</span><span class="nv">$map</span><span class="p">);</span>
<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(,</span><span class="nv">$v</span><span class="p">)</span><span class="o">=</span><span class="nf">each</span><span class="p">(</span><span class="nv">$map</span><span class="p">))</span>
	<span class="k">echo</span> <span class="nf">implode</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nv">$v</span><span class="p">),</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">$w</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$h</span><span class="o">-</span><span class="m">1</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">==</span><span class="s1">&#39;*&#39;</span><span class="p">)</span> <span class="c">// 最下段に&#39;*&#39;があったら経路あり</span>
	<span class="p">{</span>	<span class="k">echo</span> <span class="s2">&quot;path(s) exists.</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="p">}</span>

<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/addtag/" class="addtag" id="addtag_1417">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1417"
  >-</span><span
  class="button yellow"
  id="rating_z_1417"
  >0</span><span 
  class="button green"
  id="rating_p_1417"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1415/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1417/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1570">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/130/" target="_top">rucker</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1570/">#1570</a>(<script language="JavaScript">print_time(new Date("2007/07/29 21:19 GMT"));</script><noscript>2007/07/29 21:19 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/php/">
	  PHP
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>最短経路(のうちの一つ)を探索するバージョン。
探索ポイントをFIFOで扱うと最初に見つかった経路が最短になるというだけ…</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66</pre></td><td class="code"><div class="highlight"><pre><span class="cp">&lt;?php</span>
<span class="nv">$map</span><span class="o">=</span><span class="k">array</span><span class="p">();</span>
<span class="nv">$w</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
<span class="nv">$h</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>

<span class="k">if</span><span class="p">((</span><span class="nv">$file</span><span class="o">=</span><span class="nf">fopen</span><span class="p">(</span><span class="nv">$argv</span><span class="p">[</span><span class="m">1</span><span class="p">],</span><span class="s2">&quot;r&quot;</span><span class="p">))</span><span class="o">===</span><span class="k">false</span><span class="p">)</span>
	<span class="k">exit</span><span class="p">();</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="nv">$y</span><span class="o">=</span><span class="m">0</span><span class="p">;;)</span>
<span class="p">{</span>	<span class="k">if</span><span class="p">((</span><span class="nv">$c</span><span class="o">=</span><span class="nf">fgetc</span><span class="p">(</span><span class="nv">$file</span><span class="p">))</span><span class="o">===</span><span class="k">false</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nv">$x</span><span class="p">)</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="k">switch</span><span class="p">(</span><span class="nv">$c</span><span class="p">)</span>
	<span class="p">{</span>
	<span class="k">case</span> <span class="s2">&quot;</span><span class="se">\r</span><span class="s2">&quot;</span><span class="o">:</span>
	<span class="k">case</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">:</span>
	<span class="k">case</span> <span class="k">false</span><span class="o">:</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$x</span><span class="o">&gt;</span><span class="m">0</span><span class="p">)</span>
		<span class="p">{</span>	<span class="o">++</span><span class="nv">$y</span><span class="p">;</span>
			<span class="nv">$w</span><span class="o">=</span><span class="nf">max</span><span class="p">(</span><span class="nv">$w</span><span class="p">,</span><span class="nv">$x</span><span class="p">);</span>
			<span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="k">break</span><span class="p">;</span>
	<span class="k">default</span><span class="o">:</span>
		<span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="nv">$c</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="nv">$h</span><span class="o">=</span><span class="nv">$y</span><span class="p">;</span>
<span class="nf">fclose</span><span class="p">(</span><span class="nv">$file</span><span class="p">);</span>

<span class="k">function</span> <span class="nf">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="o">&amp;</span><span class="nv">$prev</span><span class="p">)</span>
<span class="p">{</span>	<span class="k">global</span> <span class="nv">$map</span><span class="p">,</span><span class="nv">$fifo</span><span class="p">;</span>
	<span class="k">if</span><span class="p">(</span><span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">!=</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
		<span class="k">return</span> <span class="k">false</span><span class="p">;</span>
	<span class="nv">$fifo</span><span class="p">[]</span><span class="o">=</span><span class="k">array</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="o">&amp;</span><span class="nv">$prev</span><span class="p">);</span>
	<span class="nv">$map</span><span class="p">[</span><span class="nv">$y</span><span class="p">][</span><span class="nv">$x</span><span class="p">]</span><span class="o">=</span><span class="s1">&#39;*&#39;</span><span class="p">;</span>
	<span class="k">return</span> <span class="k">true</span><span class="p">;</span>
<span class="p">}</span>

<span class="nv">$fifo</span><span class="o">=</span><span class="k">array</span><span class="p">();</span> <span class="c">// 経路探索FIFO</span>
<span class="nv">$term</span><span class="o">=</span><span class="k">false</span><span class="p">;</span>

<span class="k">for</span><span class="p">(</span><span class="nv">$x</span><span class="o">=</span><span class="m">0</span><span class="p">;</span><span class="nv">$x</span><span class="o">&lt;</span><span class="nv">$w</span><span class="p">;</span><span class="o">++</span><span class="nv">$x</span><span class="p">)</span>
	<span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="nv">$term</span><span class="p">);</span>

<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="p">)</span><span class="o">=</span><span class="nv">$curr</span><span class="o">=</span><span class="nf">array_shift</span><span class="p">(</span><span class="nv">$fifo</span><span class="p">))</span>
<span class="p">{</span>	<span class="k">if</span><span class="p">(</span><span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="o">+</span><span class="m">1</span><span class="p">,</span><span class="nv">$curr</span><span class="p">))</span>
		<span class="k">if</span><span class="p">(</span><span class="nv">$y</span><span class="o">+</span><span class="m">1</span><span class="o">==</span><span class="nv">$h</span><span class="o">-</span><span class="m">1</span><span class="p">)</span>
		<span class="p">{</span>	<span class="c">// Goal</span>
			<span class="nv">$p</span><span class="o">=</span><span class="nf">array_pop</span><span class="p">(</span><span class="nv">$fifo</span><span class="p">);</span>
			<span class="k">do</span><span class="p">{</span>
				<span class="nv">$map</span><span class="p">[</span><span class="nv">$p</span><span class="p">[</span><span class="m">1</span><span class="p">]][</span><span class="nv">$p</span><span class="p">[</span><span class="m">0</span><span class="p">]]</span><span class="o">=</span><span class="s1">&#39;#&#39;</span><span class="p">;</span>
			<span class="p">}</span><span class="k">while</span><span class="p">(</span><span class="nv">$p</span><span class="o">=&amp;</span><span class="nv">$p</span><span class="p">[</span><span class="m">2</span><span class="p">]);</span>
			<span class="k">break</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="o">-</span><span class="m">1</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="nv">$curr</span><span class="p">);</span>
	<span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="o">+</span><span class="m">1</span><span class="p">,</span><span class="nv">$y</span><span class="p">,</span><span class="nv">$curr</span><span class="p">);</span>
	<span class="nx">checkneighbor</span><span class="p">(</span><span class="nv">$x</span><span class="p">,</span><span class="nv">$y</span><span class="o">-</span><span class="m">1</span><span class="p">,</span><span class="nv">$curr</span><span class="p">);</span>
	<span class="c">// FIFOに参照で保存された値を上書きしないようにunset</span>
	<span class="c">// 袋小路に入った経路情報はここで捨てられる</span>
	<span class="nf">unset</span><span class="p">(</span><span class="nv">$curr</span><span class="p">);</span>
<span class="p">}</span>

<span class="nf">reset</span><span class="p">(</span><span class="nv">$map</span><span class="p">);</span>
<span class="k">while</span><span class="p">(</span><span class="k">list</span><span class="p">(,</span><span class="nv">$v</span><span class="p">)</span><span class="o">=</span><span class="nf">each</span><span class="p">(</span><span class="nv">$map</span><span class="p">))</span>
	<span class="k">echo</span> <span class="nf">implode</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nv">$v</span><span class="p">),</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
<span class="cp">?&gt;</span><span class="x"></span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1570/addtag/" class="addtag" id="addtag_1570">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/php/">
		PHP
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1570/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1570/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1570"
  >-</span><span
  class="button yellow"
  id="rating_z_1570"
  >0</span><span 
  class="button green"
  id="rating_p_1570"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1417/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1570/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1570/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  
    





<div class="comment" id="comment1418">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/105/" target="_top">rubikitch</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1418/">#1418</a>(<script language="JavaScript">print_time(new Date("2007/07/24 13:19 GMT"));</script><noscript>2007/07/24 13:19 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  roguelikeだと逆でピリオドが通れるマス、プラスが通れないマスなんだけど。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50</pre></td><td class="code"><div class="highlight"><pre>(require :iterate)
(in-package :iter)

(defun can-go-p (mazestrs)
  (let ((depth (length mazestrs))
        (width (length (elt mazestrs 0))))
    (%can-go-p (%mazestrs-&gt;nums mazestrs) depth width)))

(defun %can-go-p (mazenums depth width)
  (let (went)
    (labels ((wentp (x y) (member (cons x y) went :test #&#39;equal))
             (goto (x y)
               (unless (wentp x y)
                 (if (= y depth)
                     (return-from %can-go-p t)
                     (and (&lt;= 0 x (1- width))
                          (&lt;= 0 y (1- depth))
                          (member x (elt mazenums y))
                          (push (cons x y) went)
                          (srch x y)))))
             (srch (x y)
               (goto x (1+ y))
               (goto (1+ x) y)
               (goto (1- x) y)
               (goto x (1- y))
               nil))
      (iter (for x in (elt mazenums 0)) (srch x 0)) nil)))

(defun %mazestrs-&gt;nums (mazestrs)
  (iter (for str in-vector mazestrs)
        (collect 
            (iter (for x in-string str)
                  (for i from 0)
                  (when (eql x #\+)
                    (collect i)))
          result-type vector)))

(defun can-go-p-from-file (filename)
  (with-open-file (f filename)
    (can-go-p (iter (for line in-stream f using #&#39;read-line)
                    (collect line result-type vector)))))

(defparameter *ok1* #(&quot;.+.....&quot; &quot;.+.+++.&quot; &quot;.+.+.+.&quot; &quot;.+++.+.&quot; &quot;.....+.&quot;))
(%mazestrs-&gt;nums *ok1*)    ; =&gt; #((1) (1 3 4 5) (1 3 5) (1 2 3 5) (5))
(can-go-p *ok1*)                                                ; =&gt; T
(can-go-p #(&quot;..+...+&quot; &quot;++.+++.&quot; &quot;.+...++&quot; &quot;++++.+.&quot; &quot;.+..+.+&quot;)) ; =&gt; NIL
(can-go-p #(&quot;++++++++++++++&quot; &quot;++++++++++++++&quot; &quot;++++++++++++++&quot; &quot;++++++++++++++&quot; &quot;++++++++++++++&quot; &quot;++++++++++++++&quot; &quot;++++++++++++++&quot; &quot;..............&quot;)) ; =&gt; NIL
(can-go-p #(&quot;.+....+..&quot; &quot;.+++..+..&quot; &quot;.+.++++..&quot; &quot;.+....+..&quot; &quot;.++++++++&quot; &quot;...+..+..&quot; &quot;......+..&quot; )) ; =&gt; T
(can-go-p-from-file &quot;30.ok.dat&quot;)                                ; =&gt; T
(can-go-p-from-file &quot;30.ng.dat&quot;)        ; =&gt; NIL
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1418/addtag/" class="addtag" id="addtag_1418">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1418/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1418/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1418"
  >-</span><span
  class="button yellow"
  id="rating_z_1418"
  >0</span><span 
  class="button green"
  id="rating_p_1418"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1418/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1419">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/82/" target="_top">yuin</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_bronze.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1419/">#1419</a>(<script language="JavaScript">print_time(new Date("2007/07/24 13:52 GMT"));</script><noscript>2007/07/24 13:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/scala/">
	  Scala
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>とりあえず。
case e:Solvedのあとに

maze.map(x=&gt;x.mkString("")).foreach(println)

を入れると経路が表示できます。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53</pre></td><td class="code"><div class="highlight"><pre>def can_run_through(map:String):boolean = {
  val lines @ (head::tail) = map.trim().split(&quot;\n&quot;).toList
  val maze = lines.map(x =&gt; x.map(y=&gt;y).toArray).toArray

  class Solved extends Throwable{}
  def get(x:int, y:int) = try {maze(y)(x)}catch{case e:Throwable =&gt; &#39;.&#39;}
  def walk(x:int, y:int):unit = {
      maze(y)(x) = &#39;#&#39;
      if(y == maze.length - 1){ throw new Solved }
      if(get(x, y+1)==&#39;+&#39;){walk(x,y+1)}
      if(get(x+1, y)==&#39;+&#39;){walk(x+1,y)}
      if(get(x-1, y)==&#39;+&#39;){walk(x-1,y)}
      if(get(x, y-1)==&#39;+&#39;){walk(x,y-1)}
  }
  
  try{
    (0 to head.length-1).foreach(x =&gt; if(head(x)==&#39;+&#39;) walk(x,0))
    false
  }catch{ 
    case e:Solved =&gt; true
  }
} 
val map = &quot;&quot;&quot;
.+.....
.+.+++.
.+.+.+.
.+++.+.
.....+.
&quot;&quot;&quot;

val map2 = &quot;&quot;&quot;
..+...+
++.+++.
.+...++
++++.+.
.+..+.+
&quot;&quot;&quot;

val map3 = &quot;&quot;&quot;
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
++++++++++++++++
................
&quot;&quot;&quot;

println(can_run_through(map))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1419/addtag/" class="addtag" id="addtag_1419">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/scala/">
		Scala
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1419/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1419/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1419"
  >-</span><span
  class="button yellow"
  id="rating_z_1419"
  >0</span><span 
  class="button green"
  id="rating_p_1419"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1419/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1422">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1422/">#1422</a>(<script language="JavaScript">print_time(new Date("2007/07/24 14:53 GMT"));</script><noscript>2007/07/24 14:53 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/java/">
	  Java
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  マップの大きさを 78 x 78 以内と仮定しています。再起的にひたすら経路をたどっていく戦略です。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45</pre></td><td class="code"><div class="highlight"><pre><span class="k">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.FileReader</span><span class="o">;</span>
<span class="k">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span> <span class="o">{</span>
    <span class="k">static</span> <span class="k">final</span> <span class="kt">int</span> <span class="n">MAPSIZE</span> <span class="o">=</span> <span class="mi">80</span><span class="o">;</span>
    <span class="k">static</span> <span class="k">final</span> <span class="kt">byte</span> <span class="n">WAY</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
    <span class="k">static</span> <span class="k">final</span> <span class="kt">byte</span> <span class="n">WALL</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">static</span> <span class="k">final</span> <span class="kt">byte</span> <span class="n">ARRIVAL</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

    <span class="k">static</span> <span class="kt">byte</span><span class="o">[][]</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="n">MAPSIZE</span><span class="o">][</span><span class="n">MAPSIZE</span><span class="o">];</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="k">throws</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">BufferedReader</span> <span class="n">r</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="n">FileReader</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">0</span><span class="o">]));</span>
        <span class="n">String</span> <span class="n">line</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">n</span><span class="o">++;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">line</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="o">(</span><span class="n">line</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">==</span> <span class="sc">&#39;+&#39;</span><span class="o">)?</span> <span class="n">WAY</span> <span class="o">:</span> <span class="n">WALL</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">map</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">walk</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">map</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="o">(</span><span class="n">WAY</span> <span class="o">|</span> <span class="n">ARRIVAL</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Passed&quot;</span><span class="o">);</span>
                <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Dead end&quot;</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="k">public</span> <span class="k">static</span> <span class="kt">void</span> <span class="n">walk</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">==</span> <span class="n">WAY</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">map</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">|=</span> <span class="n">ARRIVAL</span><span class="o">;</span>
            <span class="n">walk</span><span class="o">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
            <span class="n">walk</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
            <span class="n">walk</span><span class="o">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">y</span><span class="o">);</span>
            <span class="n">walk</span><span class="o">(</span><span class="n">x</span><span class="o">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1422/addtag/" class="addtag" id="addtag_1422">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/java/">
		Java
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1422/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1422/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1422"
  >-</span><span
  class="button yellow"
  id="rating_z_1422"
  >0</span><span 
  class="button green"
  id="rating_p_1422"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1422/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1430">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/232/" target="_top">kkobayashi</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1430/">#1430</a>(<script language="JavaScript">print_time(new Date("2007/07/24 15:31 GMT"));</script><noscript>2007/07/24 15:31 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/r/">
	  R
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #bfffbf;">4/4=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>R的にはグラフ理論かな、ということでigraphというライブラリーを使ってみました。
隣接する+をエッジで接続して、先頭行のノードから最終行のノードまでのパスが存在するか
どうかで判別しています。

&gt; is.solved("maze.txt")
[1] TRUE
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23</pre></td><td class="code"><div class="highlight"><pre>require(&quot;igraph&quot;)
is.solved &lt;- function(file){
   m     &lt;- readLines(file)
   map   &lt;- matrix(unlist(sapply(m, function(a){strsplit(a, &quot;&quot;)})), length(m), byrow=TRUE) == &quot;+&quot;
   map   &lt;- rbind(FALSE, cbind(FALSE, map, FALSE), FALSE)
   nodes &lt;- ncol(map) - 3 # nodes number of start/end line
   g     &lt;- graph.empty((nrow(map)-2)*(ncol(map)-2))
   p     &lt;- point(map)
   for(i in 2:(nrow(map)-1)){
       for(j in 2:(ncol(map)-1)){
           if(!map[i, j]) next
           if(map[i, j-1]) g &lt;- add.edges(g, c(p(i, j), p(i, j-1))) # left
           if(map[i, j+1]) g &lt;- add.edges(g, c(p(i, j), p(i, j+1))) # right
           if(map[i-1, j]) g &lt;- add.edges(g, c(p(i, j), p(i-1, j))) # down
           if(map[i+1, j]) g &lt;- add.edges(g, c(p(i, j), p(i+1, j))) # up
       }
   }
   return(any(shortest.paths(g, v=0:nodes)[,(vcount(g)-nodes):vcount(g)] != vcount(g)))
}

point &lt;- function(map){
   return(function(i, j){return(j-2 + (i-2)*(ncol(map)-2))})
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1430/addtag/" class="addtag" id="addtag_1430">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/r/">
		R
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1430/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1430/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #bfffbf;"
  >4/4=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1430"
  >-</span><span
  class="button yellow"
  id="rating_z_1430"
  >0</span><span 
  class="button green"
  id="rating_p_1430"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1430/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  
    





<div class="comment" id="comment1446">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/155/" target="_top">nkmrtks</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1446/">#1446</a>(<script language="JavaScript">print_time(new Date("2007/07/25 02:54 GMT"));</script><noscript>2007/07/25 02:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  エラー処理は見逃して＞＜
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</pre></td><td class="code"><div class="highlight"><pre>(defun mazep (path)
  (let (maze)
    (with-open-file (fp path)
      (do ((c (read-char fp nil) (read-char fp nil))
           (m nil))
          ((not c))
        (case c
          (#\. (setf m (cons nil m)))
          (#\+ (setf m (cons t m)))
          (#\newline (and m (push m maze)) (setf m nil))
          (t (quit)))))
    (let ((xmax (1- (length (car maze))))
          (ymax (1- (length maze))))
      (labels
          ((movep (x y)
             (and (prog1 (nth x (nth y maze))
                    (setf (nth x (nth y maze)) nil))
                  (if (= ymax y)
                      t
                    (or (and (&gt; xmax x)
                             (movep (1+ x) y))
                        (and (&gt; x 0)
                             (movep (1- x) y))
                        (and (&gt; ymax y)
                             (movep x (1+ y)))
                        (and (&gt; y 0)
                             (movep x (1- y))))))))
        (do ((x 0 (1+ x))
             (p nil))
            ((or p (&gt; x xmax)) p)
          (setf p (movep x 0)))))))
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1446/addtag/" class="addtag" id="addtag_1446">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1446/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1446/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1446"
  >-</span><span
  class="button yellow"
  id="rating_z_1446"
  >0</span><span 
  class="button green"
  id="rating_p_1446"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1446/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1447">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1447/">#1447</a>(<script language="JavaScript">print_time(new Date("2007/07/25 03:09 GMT"));</script><noscript>2007/07/25 03:09 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/javascript/">
	  JavaScript
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>2次元配列が扱いにくかったです。
判定のみで、通り抜けの道順表示機能は省きました。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68</pre></td><td class="code"><div class="highlight"><pre><span class="k">var</span> <span class="nx">isConnected</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="k">var</span> <span class="nx">lines</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
    <span class="k">var</span> <span class="nx">len</span><span class="o">=</span><span class="nx">lines</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">config</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">y</span><span class="o">&lt;</span><span class="nx">len</span><span class="o">;</span> <span class="nx">y</span><span class="o">++</span><span class="p">){</span>
        <span class="k">var</span> <span class="nx">line</span> <span class="o">=</span> <span class="nx">lines</span><span class="p">[</span><span class="nx">y</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!/^\</span><span class="p">.</span><span class="o">*\+</span><span class="p">[</span><span class="o">\</span><span class="p">.</span><span class="o">\+</span><span class="p">]</span><span class="o">*</span><span class="nx">$</span><span class="o">/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">line</span><span class="p">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span> <span class="nx">col</span><span class="o">=</span><span class="nx">line</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span> <span class="nx">x</span><span class="o">&lt;</span><span class="nx">col</span><span class="o">;</span> <span class="nx">x</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">])</span> <span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span> <span class="o">=</span> <span class="p">[];</span>
            <span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">]</span> <span class="o">=</span> <span class="nx">line</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span><span class="mi">1</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">var</span> <span class="nx">search</span> <span class="o">=</span> <span class="k">function</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span><span class="nx">y</span><span class="o">,</span><span class="nx">path</span><span class="p">){</span>
        <span class="k">for</span><span class="p">(</span><span class="k">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">path</span><span class="p">.</span><span class="nx">length</span><span class="o">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">l</span><span class="o">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span>
            <span class="k">var</span> <span class="nx">xy</span> <span class="o">=</span> <span class="nx">path</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;:&#39;</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">x</span> <span class="o">==</span> <span class="nx">xy</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="nx">y</span> <span class="o">==</span> <span class="nx">xy</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="p">}</span>
        <span class="k">if</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">])</span>    <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span> 
        <span class="o">||</span> <span class="k">typeof</span><span class="p">(</span><span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">])</span> <span class="o">==</span> <span class="s1">&#39;undefined&#39;</span>
        <span class="o">||</span> <span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="nx">y</span><span class="p">]</span>         <span class="o">!=</span> <span class="s1">&#39;+&#39;</span><span class="p">)</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="nx">path</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="s1">&#39;:&#39;</span> <span class="o">+</span> <span class="nx">y</span><span class="p">);</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">y</span> <span class="o">==</span> <span class="p">(</span><span class="nx">len</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">return</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="nx">path</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span> <span class="nx">y</span><span class="o">,</span> <span class="nx">path</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nx">y</span><span class="o">,</span> <span class="nx">path</span><span class="p">)</span>
            <span class="o">||</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span> <span class="nx">y</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="nx">path</span><span class="p">);</span>
    <span class="p">};</span>
    <span class="k">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="k">var</span> <span class="nx">result</span><span class="o">;</span>
    <span class="k">while</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">])</span> <span class="o">!=</span> <span class="s1">&#39;undefined&#39;</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">config</span><span class="p">[</span><span class="nx">x</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;+&#39;</span><span class="p">){</span>
            <span class="nx">result</span> <span class="o">=</span> <span class="nx">search</span><span class="p">(</span><span class="nx">x</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="p">[]);</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="p">}</span>
        <span class="nx">x</span><span class="o">++;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
<span class="p">}</span>

<span class="k">var</span> <span class="nx">test1</span> <span class="o">=</span> <span class="s1">&#39;.+.....\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;.+.+++.\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;.+.+.+.\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;.+++.+.\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;.....+.&#39;</span><span class="o">;</span>

<span class="k">var</span> <span class="nx">test2</span> <span class="o">=</span> <span class="s1">&#39;..+...+\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++.+++.\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;.+...++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++.+.\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;.+..+.+&#39;</span><span class="o">;</span>

<span class="k">var</span> <span class="nx">test3</span> <span class="o">=</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;++++++++++++++++\n&#39;</span>
          <span class="o">+</span> <span class="s1">&#39;................&#39;</span><span class="o">;</span>


<span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;test1 is connected : &#39;</span> <span class="o">+</span> <span class="nx">isConnected</span><span class="p">(</span><span class="nx">test1</span><span class="p">));</span> <span class="c">// true</span>
<span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;test2 is connected : &#39;</span> <span class="o">+</span> <span class="nx">isConnected</span><span class="p">(</span><span class="nx">test2</span><span class="p">));</span> <span class="c">// false</span>
<span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;test3 is connected : &#39;</span> <span class="o">+</span> <span class="nx">isConnected</span><span class="p">(</span><span class="nx">test3</span><span class="p">));</span> <span class="c">// false</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1447/addtag/" class="addtag" id="addtag_1447">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/javascript/">
		JavaScript
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1447/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1447/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1447"
  >-</span><span
  class="button yellow"
  id="rating_z_1447"
  >0</span><span 
  class="button green"
  id="rating_p_1447"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1447/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  

  

  

  

  
    





<div class="comment" id="comment1475">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/31/" target="_top">smeghead</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1475/">#1475</a>(<script language="JavaScript">print_time(new Date("2007/07/26 14:13 GMT"));</script><noscript>2007/07/26 14:13 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/commonlisp/">
	  Common Lisp
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>標準入力から地図を読むようにしました。
総当りです。

$ cat | clisp maze.cl
.+.....
.+.+++.
.+.+.+.
.+++.+.
.....+.
&lt;C-D&gt;
通り抜けられる
$ cat | clisp maze.cl
..+...+
++.+++.
.+...++
++++.+.
.+..+.+
&lt;C-D&gt;
通り抜けられない
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46</pre></td><td class="code"><div class="highlight"><pre>(defun K (x) x)
(defun start-points (map)
  (loop for i from 0 to (1- (array-dimension map 1))
        when (eql (aref map 0 i) #\+)
        collect (cons 0 i)))

(defun movablep (map path &amp;key (x-fn #&#39;K) (y-fn #&#39;K))
  (destructuring-bind (x . y) (car path)
    (let ((next-x (funcall x-fn x))
          (next-y (funcall y-fn y)))
      (and (&lt; -1 next-x (array-dimension map 0))
           (&lt; -1 next-y (array-dimension map 1))
           (eql (aref map next-x next-y) #\+)
           (not (member (cons next-x next-y) path :test #&#39;equal))
           (cons next-x next-y)))))

(defun next-points (map path)
  (remove-if-not
    #&#39;K
    (mapcar #&#39;(lambda (key fn)
                (movablep map path key fn))
            (list :x-fn :y-fn :y-fn :x-fn )
            (list #&#39;1+ #&#39;1+ #&#39;1- #&#39;1-))))

(defun throughp (map)
  (labels ((rec (map path)
                (if (eql (1- (array-dimension map 0)) (car (first path)))
                  t
                  (loop for point in (next-points map path)
                        do (let ((ret (rec map (cons point path))))
                             (if ret (return ret)))))))
    (loop for p in (start-points map)
          do (let ((ret (rec map (list p))))
               (if ret (return ret))))))

(defun main ()
  (if (throughp 
           (loop as in = (read-line *standard-input* nil nil)
                 while in 
                 collect in into data
                 finally (return 
                           (make-array (list (list-length data) (length (car data)))
                                       :initial-contents data))))
    (princ &quot;通り抜けられる&quot;)
    (princ &quot;通り抜けられない&quot;)))
(main)
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1475/addtag/" class="addtag" id="addtag_1475">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/clisp/">clisp</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/commonlisp/">
		Common Lisp
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1475/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1475/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1475"
  >-</span><span
  class="button yellow"
  id="rating_z_1475"
  >0</span><span 
  class="button green"
  id="rating_p_1475"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1475/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1569">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/96/" target="_top">ether</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1569/">#1569</a>(<script language="JavaScript">print_time(new Date("2007/07/29 14:08 GMT"));</script><noscript>2007/07/29 14:08 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/ocaml/">
	  OCaml
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  OCaml まだのようなので一応。「壁を右手で触りながら」戦略をそのままコードに書き下したつもりです。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="kr">type</span> <span class="n">direction</span> <span class="k">=</span> <span class="n">Left</span> <span class="k">|</span> <span class="n">Down</span> <span class="k">|</span> <span class="n">Right</span> <span class="k">|</span> <span class="n">Up</span>

<span class="kr">let</span> <span class="n">move</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="k">=</span> <span class="kr">function</span>
<span class="k">|</span> <span class="n">Left</span>  <span class="k">-&gt;</span> <span class="k">(</span><span class="n">x</span> <span class="k">-</span> <span class="mi">1</span><span class="k">),</span> <span class="n">y</span>
<span class="k">|</span> <span class="n">Down</span>  <span class="k">-&gt;</span> <span class="n">x</span><span class="k">,</span> <span class="k">(</span><span class="n">y</span> <span class="k">+</span> <span class="mi">1</span><span class="k">)</span>
<span class="k">|</span> <span class="n">Right</span> <span class="k">-&gt;</span> <span class="k">(</span><span class="n">x</span> <span class="k">+</span> <span class="mi">1</span><span class="k">),</span> <span class="n">y</span>
<span class="k">|</span> <span class="n">Up</span>    <span class="k">-&gt;</span> <span class="n">x</span><span class="k">,</span> <span class="k">(</span><span class="n">y</span> <span class="k">-</span> <span class="mi">1</span><span class="k">)</span>

<span class="kr">let</span> <span class="n">turn_left</span> <span class="k">=</span> <span class="kr">function</span>
<span class="k">|</span> <span class="n">Left</span>  <span class="k">-&gt;</span> <span class="n">Down</span>
<span class="k">|</span> <span class="n">Down</span>  <span class="k">-&gt;</span> <span class="n">Right</span>
<span class="k">|</span> <span class="n">Right</span> <span class="k">-&gt;</span> <span class="n">Up</span>
<span class="k">|</span> <span class="n">Up</span>    <span class="k">-&gt;</span> <span class="n">Left</span>

<span class="kr">let</span> <span class="n">turn_right</span> <span class="k">=</span> <span class="kr">function</span>
<span class="k">|</span> <span class="n">Left</span>  <span class="k">-&gt;</span> <span class="n">Up</span>
<span class="k">|</span> <span class="n">Down</span>  <span class="k">-&gt;</span> <span class="n">Left</span>
<span class="k">|</span> <span class="n">Right</span> <span class="k">-&gt;</span> <span class="n">Down</span>
<span class="k">|</span> <span class="n">Up</span>    <span class="k">-&gt;</span> <span class="n">Right</span>

<span class="kr">let</span> <span class="n">map</span> <span class="k">=</span> <span class="n">Array</span><span class="k">.</span><span class="n">of_list</span> <span class="k">(</span><span class="n">Std</span><span class="k">.</span><span class="n">input_list</span> <span class="n">stdin</span><span class="k">);;</span>

<span class="kr">let</span> <span class="n">reachable</span> <span class="k">(</span><span class="n">x</span><span class="k">,</span> <span class="n">y</span><span class="k">)</span> <span class="k">=</span>
  <span class="kr">try</span>
    <span class="n">map</span><span class="k">.(</span><span class="n">y</span><span class="k">).[</span><span class="n">x</span><span class="k">]</span> <span class="k">=</span> <span class="sc">&#39;+&#39;</span>
  <span class="kr">with</span> <span class="k">_</span> <span class="k">-&gt;</span>
    <span class="n">y</span> <span class="k">=</span> <span class="k">-</span><span class="mi">1</span> <span class="k">&amp;&amp;</span> <span class="mi">0</span> <span class="k">&lt;=</span> <span class="n">x</span> <span class="k">&amp;&amp;</span> <span class="n">x</span> <span class="k">&lt;</span> <span class="n">String</span><span class="k">.</span><span class="n">length</span> <span class="n">map</span><span class="k">.(</span><span class="mi">0</span><span class="k">)</span>

<span class="kr">let</span> <span class="kr">rec</span> <span class="n">next_pos</span> <span class="n">pos</span> <span class="n">dir</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">next</span> <span class="k">=</span> <span class="n">move</span> <span class="n">pos</span> <span class="n">dir</span> <span class="kr">in</span>
  <span class="kr">if</span> <span class="n">reachable</span> <span class="n">next</span> <span class="kr">then</span>
    <span class="n">next</span><span class="k">,</span> <span class="n">dir</span>
  <span class="kr">else</span>
    <span class="n">next_pos</span> <span class="n">pos</span> <span class="k">(</span><span class="n">turn_left</span> <span class="n">dir</span><span class="k">)</span>

<span class="kr">let</span> <span class="n">start</span> <span class="n">start_pos</span> <span class="k">=</span>
  <span class="kr">let</span> <span class="n">goal_p</span> <span class="k">(_,</span> <span class="n">y</span><span class="k">)</span> <span class="k">=</span> <span class="n">succ</span> <span class="n">y</span> <span class="k">==</span> <span class="n">Array</span><span class="k">.</span><span class="n">length</span> <span class="n">map</span> <span class="kr">in</span>
  <span class="kr">let</span> <span class="n">loop_p</span> <span class="n">pos</span> <span class="k">=</span> <span class="n">pos</span> <span class="k">=</span> <span class="n">start_pos</span> <span class="kr">in</span>
  <span class="kr">let</span> <span class="kr">rec</span> <span class="n">move_on</span> <span class="n">pos</span> <span class="n">dir</span> <span class="k">=</span>
    <span class="kr">if</span> <span class="n">goal_p</span> <span class="n">pos</span> <span class="kr">then</span>
      <span class="n">print_endline</span> <span class="s2">&quot;OK&quot;</span>
    <span class="kr">else</span>
      <span class="kr">let</span> <span class="k">(</span><span class="n">next</span><span class="k">,</span> <span class="n">dir</span><span class="k">)</span> <span class="k">=</span> <span class="n">next_pos</span> <span class="n">pos</span> <span class="k">(</span><span class="n">turn_right</span> <span class="n">dir</span><span class="k">)</span> <span class="kr">in</span>
      <span class="kr">if</span> <span class="n">loop_p</span> <span class="n">next</span> <span class="kr">then</span>
        <span class="n">print_endline</span> <span class="s2">&quot;NG&quot;</span>
      <span class="kr">else</span>
        <span class="n">move_on</span> <span class="n">next</span> <span class="n">dir</span>
  <span class="kr">in</span>
  <span class="n">move_on</span> <span class="n">start_pos</span> <span class="n">Left</span>
<span class="k">;;</span>

<span class="n">start</span> <span class="k">(</span><span class="mi">0</span><span class="k">,</span> <span class="k">-</span><span class="mi">1</span><span class="k">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1569/addtag/" class="addtag" id="addtag_1569">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/ExtLib/">ExtLib</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/ocaml/">
		OCaml
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1569/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1569/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1569"
  >-</span><span
  class="button yellow"
  id="rating_z_1569"
  >0</span><span 
  class="button green"
  id="rating_p_1569"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1569/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment1692">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/322/" target="_top">sawat</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1692/">#1692</a>(<script language="JavaScript">print_time(new Date("2007/08/02 09:06 GMT"));</script><noscript>2007/08/02 09:06 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  ダイクストラ法で。
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65</pre></td><td class="code"><div class="highlight"><pre><span class="no">Node</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Node&quot;</span><span class="p">,</span> <span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">,</span> <span class="ss">:depth</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">dijkstra</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">node</span><span class="p">,</span> <span class="n">depth</span><span class="p">)</span>
  <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="kp">nil</span> <span class="o">||</span> <span class="n">node</span><span class="o">.</span><span class="n">depth</span> <span class="o">&lt;=</span> <span class="n">depth</span>
    <span class="k">return</span>
  <span class="k">end</span>
  <span class="n">node</span><span class="o">.</span><span class="n">depth</span> <span class="o">=</span> <span class="n">depth</span>
  <span class="n">dijkstra</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="n">y</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">dijkstra</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="n">y</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">dijkstra</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="n">y</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="n">x</span><span class="o">]</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
  <span class="n">dijkstra</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">map</span><span class="o">[</span><span class="n">node</span><span class="o">.</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="o">][</span><span class="n">node</span><span class="o">.</span><span class="n">x</span><span class="o">]</span><span class="p">,</span> <span class="n">depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="k">end</span>


<span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
  <span class="k">return</span> <span class="k">if</span><span class="p">(</span><span class="n">data</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>

  <span class="n">map</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="n">min</span> <span class="o">=</span> <span class="n">max</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="n">size</span> <span class="o">*</span> <span class="n">data</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">size</span>
  
  <span class="n">data</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="p">,</span> <span class="n">y</span><span class="o">|</span>
    <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">map</span> <span class="o">&lt;&lt;</span> <span class="n">line</span><span class="o">.</span><span class="n">map</span> <span class="k">do</span> <span class="o">|</span><span class="n">char</span><span class="o">|</span>
      <span class="n">x</span> <span class="o">+=</span> <span class="mi">1</span>
      <span class="k">if</span> <span class="n">char</span> <span class="o">==</span> <span class="s1">&#39;.&#39;</span>
        <span class="kp">nil</span>
      <span class="k">else</span>
        <span class="no">Node</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">max</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="n">map</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">start_node</span><span class="o">|</span>
    <span class="n">dijkstra</span><span class="p">(</span><span class="n">map</span><span class="p">,</span> <span class="n">start_node</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">start_node</span>
  <span class="k">end</span>
  
  
  <span class="n">map</span><span class="o">[-</span><span class="mi">2</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">goal_node</span><span class="o">|</span>
    <span class="k">if</span><span class="p">(</span><span class="n">goal_node</span> <span class="o">&amp;&amp;</span> <span class="n">goal_node</span><span class="o">.</span><span class="n">depth</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span>
      <span class="n">min</span> <span class="o">=</span> <span class="n">goal_node</span><span class="o">.</span><span class="n">depth</span>
    <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="k">if</span><span class="p">(</span><span class="n">min</span> <span class="o">==</span> <span class="n">max</span><span class="p">)</span>
    <span class="nb">puts</span> <span class="s2">&quot;No through.&quot;</span>
  <span class="k">else</span>
    <span class="nb">puts</span> <span class="s2">&quot;through.(</span><span class="si">#{</span><span class="n">min</span><span class="si">}</span><span class="s2">)&quot;</span> 
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">data</span> <span class="o">=</span> <span class="o">[]</span>
<span class="k">while</span><span class="p">(</span><span class="no">ARGF</span><span class="o">.</span><span class="n">gets</span><span class="p">)</span>
  <span class="vg">$_</span><span class="o">.</span><span class="n">chomp!</span>
  <span class="nb">puts</span> <span class="vg">$_</span>
  <span class="k">if</span> <span class="vg">$_</span><span class="o">.</span><span class="n">empty?</span>
    <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="o">[]</span>
    <span class="n">solve</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="o">[]</span>
  <span class="k">else</span>
    <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="vg">$_</span> <span class="o">+</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="sr">//</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="o">[]</span>
<span class="n">solve</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1692/addtag/" class="addtag" id="addtag_1692">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1692/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1692/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1692"
  >-</span><span
  class="button yellow"
  id="rating_z_1692"
  >0</span><span 
  class="button green"
  id="rating_p_1692"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1692/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1722">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/323/" target="_top">tomatsu</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1722/">#1722</a>(<script language="JavaScript">print_time(new Date("2007/08/02 12:46 GMT"));</script><noscript>2007/08/02 12:46 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/pnuts/">
	  Pnuts
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>使用例：

println(solve(stringReader(
".+....
.+.+++
.+.+.+
.+++.+
+....+")))
</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26</pre></td><td class="code"><div class="highlight"><pre>function solve(f){
  m = list()
  for (line : scanLines(f))  m.add(list(project(line, {c-&gt;c==&#39;+&#39; ? 1 : 0})))
  rows = size(m)
  columns = size(m[0])
  active = list()
  for (j:0..columns - 1) if (m[0][j] == 1) { m[0][j] = 2 ; active.add([0,j]) }

  function step(i, j, activeList){
    if (i + 1 == rows - 1 &amp;&amp; m[i+1][j] == 1) return true
    for (x,y : {[i,j+1], [i,j-1], [i-1,j],[i+1,j]}){
       if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; y &lt;= columns-1 &amp;&amp; m[x][y] == 1) {m[x][y]++;  activeList.add([x,y])}
    }
    m[i][j] = 3  // no longer active
    false
  }
  for (k: 0..(rows - 2) * columns + 1){
     newActiveList = list()
     for (i,j : active){
       if (step(i, j, newActiveList)) return true
     }
     if (size(newActiveList) &lt; 1) return false
     active = newActiveList
  }
  false
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1722/addtag/" class="addtag" id="addtag_1722">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/pnuts/">
		Pnuts
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1722/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1722/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1722"
  >-</span><span
  class="button yellow"
  id="rating_z_1722"
  >0</span><span 
  class="button green"
  id="rating_p_1722"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1722/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment1805">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/228/" target="_top">tell</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1805/">#1805</a>(<script language="JavaScript">print_time(new Date("2007/08/04 04:25 GMT"));</script><noscript>2007/08/04 04:25 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>鬼のように効率の悪い方法，珍解答を狙って投稿．
個人的にTrueClassとFalseClassを弄ってみようと思いついたので，ついでに弄ってみた．
ダブルバッファ+比較をすると繰り返し回数の上限はいらないだろうなぁ…</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109</pre></td><td class="code"><div class="highlight"><pre><span class="nb">require</span> <span class="s2">&quot;pp&quot;</span>

<span class="c1">## 代数</span>

<span class="k">class</span> <span class="nc">PassedClass</span>
  <span class="k">def</span> <span class="nf">inspect</span>
    <span class="s2">&quot;*&quot;</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span> <span class="n">obj</span> <span class="p">)</span>
    <span class="nb">self</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">*</span><span class="p">(</span> <span class="n">obj</span> <span class="p">)</span>
    <span class="k">if</span> <span class="n">obj</span> <span class="k">then</span> <span class="nb">self</span>
    <span class="k">else</span> <span class="kp">false</span> <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">TrueClass</span>
  <span class="k">def</span> <span class="nf">inspect</span>
    <span class="s2">&quot;+&quot;</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span> <span class="n">obj</span> <span class="p">)</span>
    <span class="k">if</span> <span class="n">obj</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span> <span class="no">PassedClass</span> <span class="p">)</span> <span class="k">then</span> <span class="n">obj</span>
    <span class="k">else</span> <span class="kp">true</span> <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">*</span><span class="p">(</span> <span class="n">obj</span> <span class="p">)</span>
    <span class="k">if</span> <span class="n">obj</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span> <span class="no">PassedClass</span> <span class="p">)</span> <span class="k">then</span> <span class="n">obj</span>
    <span class="k">else</span> <span class="nb">self</span> <span class="ow">and</span> <span class="n">obj</span> <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">class</span> <span class="nc">FalseClass</span>
  <span class="k">def</span> <span class="nf">inspect</span>
    <span class="s2">&quot;.&quot;</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">+</span><span class="p">(</span> <span class="n">obj</span> <span class="p">)</span>
    <span class="k">if</span> <span class="n">obj</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span> <span class="no">PassedClass</span> <span class="p">)</span> <span class="k">then</span> <span class="n">obj</span>
    <span class="k">else</span> <span class="n">obj</span> <span class="k">end</span>
  <span class="k">end</span>
  
  <span class="k">def</span> <span class="nf">*</span><span class="p">(</span> <span class="n">obj</span> <span class="p">)</span>
    <span class="nb">self</span><span class="p">;</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1">## パーサ</span>

<span class="k">def</span> <span class="nf">parse_maze</span>
  <span class="n">maze</span> <span class="o">=</span> <span class="o">[]</span>
  
  <span class="vg">$stdin</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span> <span class="n">str_line</span> <span class="o">|</span>
    <span class="n">maze_line</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="n">str_line</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">each_byte</span> <span class="p">{</span><span class="o">|</span> <span class="n">ch</span> <span class="o">|</span>
      <span class="n">maze_line</span><span class="o">.</span><span class="n">push</span><span class="p">(</span> <span class="p">(</span> <span class="n">ch</span><span class="o">.</span><span class="n">chr</span> <span class="o">==</span> <span class="s2">&quot;+&quot;</span> <span class="p">?</span> <span class="kp">true</span> <span class="p">:</span> <span class="kp">false</span> <span class="p">)</span> <span class="p">)</span>
    <span class="p">}</span>
    <span class="n">maze</span><span class="o">.</span><span class="n">push</span><span class="p">(</span> <span class="n">maze_line</span> <span class="p">)</span>
  <span class="p">}</span>
  
  <span class="n">maze</span>
<span class="k">end</span>

<span class="c1">## 更新</span>

<span class="k">def</span> <span class="nf">update</span><span class="p">(</span> <span class="n">maze</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
  <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span> <span class="n">v</span> <span class="o">|</span>
    <span class="n">t</span> <span class="o">=</span> <span class="o">[[</span><span class="n">i</span> <span class="o">+</span> <span class="n">v</span><span class="p">,</span> <span class="mi">0</span><span class="o">].</span><span class="n">max</span><span class="p">,</span> <span class="n">maze</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">min</span>
    <span class="n">maze</span><span class="o">[</span><span class="n">t</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">*=</span> <span class="no">PassedClass</span><span class="o">.</span><span class="n">new</span>
  <span class="p">}</span>
  <span class="o">[-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span> <span class="n">h</span> <span class="o">|</span>
    <span class="n">t</span> <span class="o">=</span> <span class="o">[[</span><span class="n">j</span> <span class="o">+</span> <span class="n">h</span><span class="p">,</span><span class="mi">0</span><span class="o">].</span><span class="n">max</span><span class="p">,</span> <span class="n">maze</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">].</span><span class="n">min</span>
    <span class="n">maze</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">t</span><span class="o">]</span> <span class="o">*=</span> <span class="no">PassedClass</span><span class="o">.</span><span class="n">new</span>
  <span class="p">}</span>
  <span class="c1"># pp maze ## 更新されていく様子を見る</span>
<span class="k">end</span>

<span class="c1">## 判定</span>

<span class="k">def</span> <span class="nf">be_eble_to_pass?</span><span class="p">(</span> <span class="n">maze</span> <span class="p">)</span>
  <span class="n">max_iter</span> <span class="o">=</span> <span class="n">maze</span><span class="o">.</span><span class="n">length</span> <span class="o">*</span> <span class="n">maze</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">length</span>
  
  <span class="n">maze</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">each_index</span> <span class="p">{</span><span class="o">|</span> <span class="n">j</span> <span class="o">|</span>
    <span class="n">update</span><span class="p">(</span> <span class="n">maze</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">j</span> <span class="p">)</span> <span class="k">if</span> <span class="n">maze</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="n">j</span><span class="o">]</span>
  <span class="p">}</span>
  
  <span class="n">max_iter</span><span class="o">.</span><span class="n">times</span> <span class="p">{</span><span class="o">|</span> <span class="n">iter</span> <span class="o">|</span>
    <span class="n">maze</span><span class="o">.</span><span class="n">each_index</span> <span class="p">{</span><span class="o">|</span> <span class="n">i</span> <span class="o">|</span>
      <span class="n">maze</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">each_index</span> <span class="p">{</span><span class="o">|</span> <span class="n">j</span> <span class="o">|</span>
        <span class="k">if</span> <span class="n">maze</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">].</span><span class="n">kind_of?</span><span class="p">(</span> <span class="no">PassedClass</span> <span class="p">)</span>
          <span class="n">update</span><span class="p">(</span> <span class="n">maze</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span> <span class="p">)</span>
        <span class="k">end</span>
      <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="n">eble_to_pass</span> <span class="o">=</span> <span class="n">maze</span><span class="o">[-</span><span class="mi">1</span><span class="o">].</span><span class="n">inject</span><span class="p">(</span> <span class="kp">false</span> <span class="p">)</span> <span class="p">{</span><span class="o">|</span> <span class="n">e</span><span class="p">,</span> <span class="n">t</span> <span class="o">|</span>
      <span class="n">e</span> <span class="o">+</span> <span class="n">t</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">eble_to_pass</span> <span class="k">if</span> <span class="n">eble_to_pass</span><span class="o">.</span><span class="n">kind_of?</span><span class="p">(</span> <span class="no">PassedClass</span> <span class="p">)</span>
  <span class="p">}</span>
  
  <span class="kp">false</span>
<span class="k">end</span>

<span class="n">pp</span> <span class="n">maze</span> <span class="o">=</span> <span class="n">parse_maze</span><span class="p">()</span>
<span class="n">pp</span> <span class="n">be_eble_to_pass?</span><span class="p">(</span> <span class="n">maze</span> <span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1805/addtag/" class="addtag" id="addtag_1805">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1805/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1805/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1805"
  >-</span><span
  class="button yellow"
  id="rating_z_1805"
  >0</span><span 
  class="button green"
  id="rating_p_1805"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1805/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1805/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1806">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/228/" target="_top">tell</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1806/">#1806</a>(<script language="JavaScript">print_time(new Date("2007/08/04 04:33 GMT"));</script><noscript>2007/08/04 04:33 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>わざわざtrueやfalseを書き換えることのありがたさは，演算子が使えるぐらいか…

我ながらネタにしか見えない．

スタック使ってバックトラック(って言うんだたっけ？)した方が普通によかったな．</pre>
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1806/addtag/" class="addtag" id="addtag_1806">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1806"
  >-</span><span
  class="button yellow"
  id="rating_z_1806"
  >0</span><span 
  class="button green"
  id="rating_p_1806"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1805/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1806/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1806/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1806/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment1810">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/228/" target="_top">tell</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_silver.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1810/">#1810</a>(<script language="JavaScript">print_time(new Date("2007/08/04 08:25 GMT"));</script><noscript>2007/08/04 08:25 GMT</noscript>)
	
	
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  しかも代数のところ，よくわからないコードになっているところがある．true and objとかわけわかめになってる…まぁいいか…
	</div>
	
	
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1810/addtag/" class="addtag" id="addtag_1810">タグ</a>:
	
	タグなし
	&nbsp;

	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1810"
  >-</span><span
  class="button yellow"
  id="rating_z_1810"
  >0</span><span 
  class="button green"
  id="rating_p_1810"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1806/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1810/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1810/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


    </div>
  


  

  

  
    





<div class="comment" id="comment1807">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/43/" target="_top">kzk</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1807/">#1807</a>(<script language="JavaScript">print_time(new Date("2007/08/04 06:07 GMT"));</script><noscript>2007/08/04 06:07 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/cpp/">
	  C++
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>左右番兵 + BFS。上下は面倒だったんで、ny &gt;= 0で判定。invalidな入力がきた場合は知りません。C++だと再帰で書くと迷路サイズがでかい時にstack overflowするのでこんな感じになっております。

探索系は言語の特色が出て楽しいです。</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52</pre></td><td class="code"><div class="highlight"><pre><span class="cp">#include &lt;iostream&gt;</span>
<span class="cp">#include &lt;string&gt;</span>
<span class="cp">#include &lt;vector&gt;</span>
<span class="cp">#include &lt;deque&gt;</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">dirs</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="p">};</span>

<span class="kt">int</span>
<span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">string</span> <span class="n">line</span><span class="p">;</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">field</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">line</span><span class="p">))</span>
    <span class="n">field</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="sc">&#39;+&#39;</span> <span class="o">+</span> <span class="n">line</span> <span class="o">+</span> <span class="sc">&#39;+&#39;</span><span class="p">);</span>

  <span class="kt">int</span> <span class="n">h</span> <span class="o">=</span> <span class="n">field</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
  <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="n">field</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">size</span><span class="p">();</span>
  <span class="n">vector</span><span class="o">&lt;</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">visited</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">vector</span><span class="o">&lt;</span><span class="kt">bool</span><span class="o">&gt;</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="kc">false</span><span class="p">));</span>

  <span class="n">deque</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span> <span class="n">q</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">w</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">field</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">q</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">P</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
      <span class="n">visited</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kt">bool</span> <span class="n">ret</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">q</span><span class="p">.</span><span class="n">empty</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">P</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
    <span class="n">q</span><span class="p">.</span><span class="n">pop_front</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">cur_x</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">cur_y</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="n">second</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">cur_y</span> <span class="o">==</span> <span class="p">(</span><span class="n">h</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
      <span class="n">ret</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">iDir</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">iDir</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">iDir</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">cur_x</span> <span class="o">+</span> <span class="n">dirs</span><span class="p">[</span><span class="n">iDir</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
      <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">cur_y</span> <span class="o">+</span> <span class="n">dirs</span><span class="p">[</span><span class="n">iDir</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">ny</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">field</span><span class="p">[</span><span class="n">ny</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">!=</span> <span class="sc">&#39;+&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">visited</span><span class="p">[</span><span class="n">ny</span><span class="p">][</span><span class="n">nx</span><span class="p">])</span> <span class="p">{</span>
        <span class="n">q</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">P</span><span class="p">(</span><span class="n">nx</span><span class="p">,</span> <span class="n">ny</span><span class="p">));</span>
        <span class="n">visited</span><span class="p">[</span><span class="n">ny</span><span class="p">][</span><span class="n">nx</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">ret</span> <span class="o">?</span> <span class="s">&quot;pass&quot;</span> <span class="o">:</span> <span class="s">&quot;cannot pass&quot;</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1807/addtag/" class="addtag" id="addtag_1807">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/cpp/">
		C++
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1807/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1807/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1807"
  >-</span><span
  class="button yellow"
  id="rating_z_1807"
  >0</span><span 
  class="button green"
  id="rating_p_1807"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1807/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  

  
    





<div class="comment" id="comment1863">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/242/" target="_top">lufia</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/">#1863</a>(<script language="JavaScript">print_time(new Date("2007/08/05 07:05 GMT"));</script><noscript>2007/08/05 07:05 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/awk/">
	  awk
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #efffef;">1/1=1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <pre class='compact'>迷路の読み込みは楽でいいね。
awk -f map.awk map1</pre>
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40</pre></td><td class="code"><div class="highlight"><pre>BEGIN {
	FS = &quot;&quot;
	OK = &quot;+&quot;
	ERR = &quot;.&quot;
}
{	for(i = 1; i &lt;= NF; i++)
		map[NR,i] = $i
}
END {
	for(i = 1; map[1,i] &amp;&amp; !canwalk(1, i); i++)
		;
	dump()
	if(map[1,i])
		print &quot;route &quot; i
	else
		print &quot;fail&quot;
}
function canwalk(row, col) {
	if(map[row,col] == ERR || walked[row,col])
		return 0
	walked[row,col] = 1

	if(!map[row+1,col])
		return 1

	return map[row+1,col] &amp;&amp; canwalk(row+1, col) ||
		map[row,col+1] &amp;&amp; canwalk(row, col+1) ||
		map[row,col-1] &amp;&amp; canwalk(row, col-1) ||
		map[row-1,col] &amp;&amp; canwalk(row-1, col)
}
function dump(	i,j) {
	for(i = 1; map[i,1]; i++){
		for(j = 1; map[i,j]; j++)
			if(walked[i,j])
				printf &quot;#&quot;
			else
				printf map[i,j]
		printf &quot;\n&quot;
	}
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/addtag/" class="addtag" id="addtag_1863">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/awk/">
		awk
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #efffef;"
  >1/1=1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_1863"
  >-</span><span
  class="button yellow"
  id="rating_z_1863"
  >0</span><span 
  class="button green"
  id="rating_p_1863"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/1863/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment3830">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/26/" target="_top">dankogai</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/3830/">#3830</a>(<script language="JavaScript">print_time(new Date("2007/11/11 00:54 GMT"));</script><noscript>2007/11/11 00:54 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/perl/">
	  Perl
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffefef;">-1/1=-1.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
<p>究極の怠慢。<code>a2p</code>で<a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/">#1863</a>を変換。26行目のreturnだけ返り値を()でくくる必要があったけど、それ以外は何も手を加えていない。なによりPerl scriptそのものは<code>a2p</code>の吐いたものに一切手を加えていない。
</p>
<p>Dan the Indirect awk user
</p>



	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67</pre></td><td class="code"><div class="highlight"><pre><span class="c1">#!/usr/local/bin/perl</span>
<span class="nb">eval</span> <span class="s">&#39;exec /usr/local/bin/perl -S $0 ${1+&quot;$@&quot;}&#39;</span>
    <span class="k">if</span> <span class="nv">$running_under_some_shell</span><span class="p">;</span>
                        <span class="c1"># this emulates #! processing on NIH machines.</span>
                        <span class="c1"># (remove #! line above if indigestible)</span>

<span class="nb">eval</span> <span class="s">&#39;$&#39;</span><span class="o">.</span><span class="nv">$1</span><span class="o">.</span><span class="s">&#39;$2;&#39;</span> <span class="k">while</span> <span class="nv">$ARGV</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=~</span><span class="sr"> /^([A-Za-z_0-9]+=)(.*)/</span> <span class="o">&amp;&amp;</span> <span class="nb">shift</span><span class="p">;</span>
                        <span class="c1"># process any FOO=bar switches</span>

<span class="vg">$[</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>                 <span class="c1"># set array base to 1</span>
<span class="nv">$FS</span> <span class="o">=</span> <span class="s">&#39; &#39;</span><span class="p">;</span>              <span class="c1"># set field separator</span>
<span class="vg">$,</span> <span class="o">=</span> <span class="s">&#39; &#39;</span><span class="p">;</span>               <span class="c1"># set output field separator</span>
<span class="vg">$\</span> <span class="o">=</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>              <span class="c1"># set output record separator</span>

<span class="nv">$FS</span> <span class="o">=</span> <span class="s">&#39;&#39;</span><span class="p">;</span>
<span class="nv">$OK</span> <span class="o">=</span> <span class="s">&#39;+&#39;</span><span class="p">;</span>
<span class="nv">$ERR</span> <span class="o">=</span> <span class="s">&#39;.&#39;</span><span class="p">;</span>

<span class="k">while</span> <span class="p">(</span><span class="o">&lt;&gt;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nb">chomp</span><span class="p">;</span>      <span class="c1"># strip record separator</span>
    <span class="nv">@Fld</span> <span class="o">=</span> <span class="nb">split</span><span class="p">(</span><span class="nv">$FS</span><span class="p">,</span> <span class="nv">$_</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;=</span> <span class="nv">$#Fld</span><span class="p">;</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nv">$map</span><span class="p">{</span><span class="vg">$.</span><span class="p">,</span> <span class="nv">$i</span><span class="p">}</span> <span class="o">=</span> <span class="nv">$Fld</span><span class="p">[</span><span class="nv">$i</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$map</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$i</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="o">!&amp;</span><span class="n">canwalk</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$i</span><span class="p">);</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">;</span>
<span class="p">}</span>
<span class="o">&amp;</span><span class="nb">dump</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="nv">$map</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="nv">$i</span><span class="p">})</span> <span class="p">{</span>
    <span class="k">print</span> <span class="s">&#39;route &#39;</span> <span class="o">.</span> <span class="nv">$i</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="k">print</span> <span class="s">&#39;fail&#39;</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">canwalk</span> <span class="p">{</span>
    <span class="nb">local</span><span class="p">(</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nv">$map</span><span class="p">{</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span><span class="p">}</span> <span class="ow">eq</span> <span class="nv">$ERR</span> <span class="o">||</span> <span class="nv">$walked</span><span class="p">{</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span><span class="p">})</span> <span class="p">{</span>      <span class="c1">#???</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nv">$walked</span><span class="p">{</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span><span class="p">}</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$map</span><span class="p">{</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$col</span><span class="p">})</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">(</span><span class="nv">$map</span><span class="p">{</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$col</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="o">&amp;</span><span class="n">canwalk</span><span class="p">(</span><span class="nv">$row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$col</span><span class="p">)</span> <span class="o">||</span> 
    <span class="nv">$map</span><span class="p">{</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="o">&amp;</span><span class="n">canwalk</span><span class="p">(</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> 
    <span class="nv">$map</span><span class="p">{</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="o">&amp;</span><span class="n">canwalk</span><span class="p">(</span><span class="nv">$row</span><span class="p">,</span> <span class="nv">$col</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> 
    <span class="nv">$map</span><span class="p">{</span><span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$col</span><span class="p">}</span> <span class="o">&amp;&amp;</span> <span class="o">&amp;</span><span class="n">canwalk</span><span class="p">(</span><span class="nv">$row</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="nv">$col</span><span class="p">));</span>
<span class="p">}</span>

<span class="k">sub </span><span class="nf">dump</span> <span class="p">{</span>
    <span class="nb">local</span><span class="p">(</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$map</span><span class="p">{</span><span class="nv">$i</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span> <span class="nv">$i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="nv">$j</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$map</span><span class="p">{</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">};</span> <span class="nv">$j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nv">$walked</span><span class="p">{</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">})</span> <span class="p">{</span>
                <span class="nb">printf</span> <span class="s">&#39;#&#39;</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="nb">printf</span> <span class="nv">$map</span><span class="p">{</span><span class="nv">$i</span><span class="p">,</span> <span class="nv">$j</span><span class="p">};</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="nb">printf</span> <span class="s">&quot;\n&quot;</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/3830/addtag/" class="addtag" id="addtag_3830">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/a2p/">a2p</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/perl/">
		Perl
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/3830/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/3830/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffefef;"
  >-1/1=-1.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_3830"
  >-</span><span
  class="button yellow"
  id="rating_z_3830"
  >0</span><span 
  class="button green"
  id="rating_p_3830"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/1863/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/3830/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/3830/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  

  

  
    





<div class="comment" id="comment4550">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/4550/">#4550</a>(<script language="JavaScript">print_time(new Date("2007/12/02 07:52 GMT"));</script><noscript>2007/12/02 07:52 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/nadesico/">
	  なでしこ
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>画像を作って色を流し込んで判定しているあたりかなり反則ですが、普通にするとなでしこでは現実的な速度が出せません・・・</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17</pre></td><td class="code"><div class="highlight"><pre>地図=&quot;txt&quot;の&quot;&quot;でファイル選択,_を開く
地図イメージとはイメージ
これについて
    H=行数(地図)+2
    W=文字数(地図[0])
    // 可視はオフ
i1で0から(行数(地図)-1)まで繰り返す
    i2で0から(文字数(地図[0])-1)まで繰り返す
        (MID(地図[i1],i2+1,1)=&quot;.&quot;)ならば
            地図イメージのi2,i1+1へ緑色を点描画
地図イメージの0,0を青色で塗る
地図イメージの0,((地図イメージのH)-1)を画像色取得
もし(それ=青色)なら
    「OK!」を言う
違えば
    「NG.」を言う
// 地図イメージをデスクトップ&amp;&quot;test.bmp&quot;に画像保存
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/4550/addtag/" class="addtag" id="addtag_4550">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/nadesico/">
		なでしこ
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/4550/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/4550/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_4550"
  >-</span><span
  class="button yellow"
  id="rating_z_4550"
  >0</span><span 
  class="button green"
  id="rating_p_4550"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/4550/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment6893">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/458/" target="_top">crane</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/6893/">#6893</a>(<script language="JavaScript">print_time(new Date("2008/07/31 11:17 GMT"));</script><noscript>2008/07/31 11:17 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/other/">
	  Other
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Processing で。
お題「ランダムウォーク」で思いついたのですが、適当な数の粒子をばらまきます。粒子はランダムに移動します。充分な時間が経って一つでも通り抜けられればゴールです（運が良ければ、ですが・・）。</p>
<p>乱択アルゴリズムの一種と言っていいのでしょうか。</p>

	</div>
	
	<p class="link">
	  参考: <a href="/web/20100116062258/http://www.processing.org/"></a>
	</p>  
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146</pre></td><td class="code"><div class="highlight"><pre>int hsb = 16;
int d = 5;
Maze maze;

void setup() {
  colorMode(HSB, hsb);
  int [][] data = { { 1, 1, 1, 1, 1, 1, 1, 1 },
                    { 0, 1, 0, 0, 0, 0, 0, 0 },
                    { 0, 1, 0, 1, 1, 1, 0, 0 },
                    { 0, 1, 0, 1, 0, 1, 0, 0 },
                    { 0, 1, 1, 1, 0, 1, 1, 1 },
                    { 0, 0, 0, 0, 0, 1, 0, 1 },
                    { 0, 0, 0, 0, 1, 1, 0, 1 },
                    { 0, 1, 1, 1, 1, 0, 0, 1 },
                    { 0, 0, 0, 1, 0, 0, 0, 0 },
                    { 0, 0, 1, 1, 0, 1, 0, 0 },
                    { 0, 0, 1, 0, 0, 1, 0, 0 },
                    { 0, 0, 1, 1, 1, 1, 0, 0 },
                    { 0, 0, 1, 0, 0, 0, 0, 0 },
                    { 0, 1, 1, 1, 1, 1, 0, 0 },
                    { 0, 0, 0, 0, 0, 1, 1, 1 },
                    { 0, 1, 1, 0, 0, 0, 0, 1 },
                    { 1, 1, 1, 1, 1, 1, 1, 1 }
              };
  size(data[0].length * d, data.length * d);
  maze = new Maze(data, d, 20);
  maze.render();
}

void draw() {
  if (!maze.solved) {
    maze.render();

    rectMode(CORNER);
    fill(hsb, hsb * 0.25);
    rect(0, 0, width, height);
  }
}

class Maze {
  int [][] data;
  int block_size;
  int nparticles;
  Particle[] particles;
  boolean solved = false;
  
  Maze(int[][] data_, int block_size_, int nparticles_) {
    data = data_;
    block_size = block_size_;
    nparticles = nparticles_;
    particles = new Particle[nparticles];
    for (int i=0; i &lt; nparticles; i++) {
      particles[i] = new Particle(0, 0, block_size, this);
    }
  }
  
  void render() {
    rectMode(CORNER);
    fill(0);
    for (int i=0; i &lt; data.length; i++) {
      for (int j=0; j &lt; data[i].length; j++) {
        if (data[i][j] != 1) {
          rect(j * block_size, i * block_size, block_size, block_size);
        }
      }
    }
    
    for (int i=0; i &lt; nparticles; i++) {
      Particle p = particles[i];
      p.move();
      p.render();
      if (isGoal(p)) {
        solved = true;
        break;
      }
    }
  }
  
  boolean isBlock(int x, int y) {
    int xx = x / block_size;
    int yy = y / block_size;
    
    if (xx &gt;= data[0].length || yy &gt;= data.length) {
      return true;
    }

    return (data[yy][xx] != 1);
  }

  boolean isGoal(Particle p) {
    return p.y + block_size &gt;= height;
  }
}

class Particle {
  int x;
  int y;
  int d;
  Maze m;

  Particle(int x_, int y_, int d_, Maze m_) {
    x = x_;
    y = y_;
    d = d_;
    m = m_;
  }
  
  void move() {
    
    float r = random(1);
    int x0 = x;
    int y0 = y;
    
    if (r &lt; 0.25) {
       x += d;
       if (x &gt; width) {
         x = width;
       }
    } else if (r &lt; 0.5) {
      x -= d;
      if (x &lt; 0) {
        x = 0;
      }
    } else if (r &lt; 0.75) {
      y += d;
      if (y &gt; height) {
        y = height;
      }
    } else {
      y -= d;
      if (y &lt; 0) {
        y = 0;
      }
    }
 
    if (m.isBlock(x,y)) {
      x = x0;
      y = y0;
    }    
  }
  
  void render() {
    rectMode(CORNER);
    rect(x, y, d, d);    
  }
}
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/6893/addtag/" class="addtag" id="addtag_6893">タグ</a>:
	
    
    <a href="/web/20100116062258/http://ja.doukaku.org/tag/Processing/">Processing</a>
    
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/other/">
		Other
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/6893/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/6893/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_6893"
  >-</span><span
  class="button yellow"
  id="rating_z_6893"
  >0</span><span 
  class="button green"
  id="rating_p_6893"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/6893/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9023">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/4/" target="_top">匿名</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#medal" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/star_gold.png" border=0/></a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9023/">#9023</a>(<script language="JavaScript">print_time(new Date("2009/05/30 15:48 GMT"));</script><noscript>2009/05/30 15:48 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
	  Ruby
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  
	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54</pre></td><td class="code"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Seeker</span>
  <span class="no">Pos</span> <span class="o">=</span> <span class="no">Struct</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:x</span><span class="p">,</span> <span class="ss">:y</span><span class="p">)</span>

  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="vi">@routes</span> <span class="o">=</span> <span class="o">[]</span>
    <span class="vi">@map</span> <span class="o">=</span> <span class="o">[]</span>

    <span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
    <span class="vi">@map</span> <span class="o">=</span> <span class="n">lines</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">line</span><span class="o">|</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">display_routes</span>
    <span class="vi">@map</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">c</span><span class="p">,</span> <span class="n">x</span><span class="o">|</span>
      <span class="n">seek</span><span class="p">(</span><span class="o">[]</span><span class="p">,</span> <span class="no">Pos</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>
    <span class="k">end</span>

    <span class="k">if</span> <span class="vi">@routes</span><span class="o">.</span><span class="n">empty?</span> <span class="k">then</span>
      <span class="nb">puts</span> <span class="s2">&quot;no routes&quot;</span>
    <span class="k">else</span>
      <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="vi">@routes</span><span class="o">.</span><span class="n">size</span><span class="si">}</span><span class="s2"> routes found.&quot;</span>
      <span class="vi">@routes</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">route</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
        <span class="nb">puts</span>
        <span class="nb">puts</span> <span class="s2">&quot;route : </span><span class="si">#{</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s2">&quot;</span>
        <span class="n">_map</span> <span class="o">=</span> <span class="vi">@map</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span><span class="o">.</span><span class="n">clone</span><span class="p">}</span>
        <span class="n">route</span><span class="o">.</span><span class="n">each</span><span class="p">{</span><span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">_map</span><span class="o">[</span><span class="n">r</span><span class="o">.</span><span class="n">y</span><span class="o">][</span><span class="n">r</span><span class="o">.</span><span class="n">x</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;#&quot;</span><span class="p">}</span>
        <span class="nb">puts</span> <span class="n">_map</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">l</span><span class="o">|</span> <span class="n">l</span><span class="o">.</span><span class="n">join</span><span class="p">}</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
      <span class="k">end</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">seek</span><span class="p">(</span><span class="n">trail</span><span class="p">,</span> <span class="n">pos</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">if</span> <span class="p">(</span><span class="vi">@map</span><span class="o">[</span><span class="n">pos</span><span class="o">.</span><span class="n">y</span><span class="o">][</span><span class="n">pos</span><span class="o">.</span><span class="n">x</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;.&quot;</span><span class="p">)</span>
    <span class="k">return</span> <span class="k">if</span> <span class="n">trail</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>

    <span class="n">trail</span> <span class="o">&lt;&lt;</span> <span class="n">pos</span>
    <span class="k">if</span> <span class="vi">@map</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">==</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span> <span class="k">then</span> <span class="c1"># exited</span>
      <span class="vi">@routes</span> <span class="o">&lt;&lt;</span> <span class="n">trail</span>
      <span class="k">return</span>
    <span class="k">end</span>

    <span class="n">seek</span><span class="p">(</span><span class="n">trail</span><span class="o">.</span><span class="n">clone</span><span class="p">,</span> <span class="no">Pos</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pos</span><span class="o">.</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span><span class="p">))</span> <span class="k">if</span> <span class="n">pos</span><span class="o">.</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="n">seek</span><span class="p">(</span><span class="n">trail</span><span class="o">.</span><span class="n">clone</span><span class="p">,</span> <span class="no">Pos</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pos</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span><span class="p">))</span> <span class="k">if</span> <span class="n">pos</span><span class="o">.</span><span class="n">x</span> <span class="o">&lt;</span> <span class="vi">@map</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="n">seek</span><span class="p">(</span><span class="n">trail</span><span class="o">.</span><span class="n">clone</span><span class="p">,</span> <span class="no">Pos</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pos</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span> <span class="o">&gt;</span> <span class="mi">0</span>
    <span class="n">seek</span><span class="p">(</span><span class="n">trail</span><span class="o">.</span><span class="n">clone</span><span class="p">,</span> <span class="no">Pos</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">pos</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">pos</span><span class="o">.</span><span class="n">y</span> <span class="o">&lt;</span> <span class="vi">@map</span><span class="o">.</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">if</span> <span class="bp">__FILE__</span> <span class="o">==</span> <span class="vg">$0</span> <span class="k">then</span>
  <span class="n">text</span> <span class="o">=</span> <span class="no">IO</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span><span class="p">)</span>
  <span class="n">mize</span> <span class="o">=</span> <span class="no">Seeker</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
  <span class="n">mize</span><span class="o">.</span><span class="n">display_routes</span>
<span class="k">end</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9023/addtag/" class="addtag" id="addtag_9023">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/ruby/">
		Ruby
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9023/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9023/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9023"
  >-</span><span
  class="button yellow"
  id="rating_z_9023"
  >0</span><span 
  class="button green"
  id="rating_p_9023"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/9023/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9592">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/608/" target="_top">nobeans</a><a href="/web/20100116062258/http://ja.doukaku.org/qa/#anomark" target="_top"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/anomark.png" border=0/></a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9592/">#9592</a>(<script language="JavaScript">print_time(new Date("2009/09/20 12:53 GMT"));</script><noscript>2009/09/20 12:53 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/groovy/">
	  Groovy
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>全ルートを歩かせてみた。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48</pre></td><td class="code"><div class="highlight"><pre>class Walker {

    String[][] map
    int x, y

    Walker(params) {
        this.map = params.map
        assert map.length &gt; 0
        this.x = params.x
        this.y = params.y
        map[y][x] = &quot;*&quot; // footprint at current position
    }

    def maxX = { map[0].length -1 }
    def maxY = { map.length -1 }

    def canUp =    { y &gt; 0      &amp;&amp; map[y-1][x] == &quot;+&quot; }
    def canDown =  { y &lt; maxY() &amp;&amp; map[y+1][x] == &quot;+&quot; }
    def canRight = { x &lt; maxX() &amp;&amp; map[y][x+1] == &quot;+&quot; }
    def canLeft =  { x &gt; 0      &amp;&amp; map[y][x-1] == &quot;+&quot; }

    def goUp =    { return new Walker(map:map, x:x,   y:y-1) }
    def goDown =  { return new Walker(map:map, x:x,   y:y+1) }
    def goRight = { return new Walker(map:map, x:x+1, y:y) }
    def goLeft =  { return new Walker(map:map, x:x-1, y:y) }

    def canGoThrough = { walk().flatten().any{it} }
    def walk = {
        if (isGoal()) return true

        def directions = [&quot;Down&quot;, &quot;Right&quot;, &quot;Left&quot;, &quot;Up&quot;].grep { &quot;can$it&quot;() }
        if (!directions) return false // 行き止まり

        return directions.collect {
            def nextMap = &quot;go$it&quot;()
            println &quot;$it: \n$nextMap&quot; // for DEBUG
            nextMap.walk()
        }
    }
    def isGoal = { y &gt;= maxY() }
    public String toString() { map.collect{ it.join() }.join(&quot;\n&quot;) }
}

def fileName = args[0]
def lines = new File(fileName).readLines()
lines.add(0, &quot;+&quot; * lines[0].length()) // 便宜的なスタート行を追加する  
def walker = new Walker(map:lines as String[][], x:0, y:0)
println walker.canGoThrough() ? &quot;you can go through&quot; : &quot;you cannot go through&quot;
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9592/addtag/" class="addtag" id="addtag_9592">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/groovy/">
		Groovy
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9592/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9592/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9592"
  >-</span><span
  class="button yellow"
  id="rating_z_9592"
  >0</span><span 
  class="button green"
  id="rating_p_9592"
  >+</span></span></span>
  

<p>

  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/9592/">
  返信
  </a>]
  </div>
</div>
</div>




  


  

  
    





<div class="comment" id="comment9744">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/1129/" target="_top">Lost_dog</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9744/">#9744</a>(<script language="JavaScript">print_time(new Date("2009/12/27 17:00 GMT"));</script><noscript>2009/12/27 17:00 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>Lost_dogです。</p>
<p>アイディアは、Data.Graphのpath関数を使うことです。島のカウント問題(#9742)のコードを少し改変して再利用しました。(#9742)のcalEdge関数をbiconnectに変更したくらいです。</p>
<p><strong>Sample Input 1</strong></p>
<hr class="docutils" />
<pre class="literal-block">
20 6
..++................
...+...+++++........
...+++++...++++++...
........+++.....+...
.++++++++.+++++++...
.+..................
</pre>
<hr class="docutils" />
<p><strong>Sample Output 1</strong></p>
<hr class="docutils" />
<pre class="literal-block">
True
</pre>
<hr class="docutils" />
<p><strong>Sample Input 2</strong></p>
<hr class="docutils" />
<pre class="literal-block">
20 6
..++....+.......+...
...+...+++++....+...
...+++++...++++++...
++++....+++.........
.+..++++..++++++....
...+........++++++..
</pre>
<hr class="docutils" />
<p><strong>Sample Output 2</strong></p>
<hr class="docutils" />
<pre class="literal-block">
False
</pre>
<hr class="docutils" />
<p>.</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20</pre></td><td class="code"><div class="highlight"><pre><span class="kr">module</span> <span class="n">Main</span> <span class="kr">where</span>

<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Graph</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">Maybe</span>
<span class="kr">import</span> <span class="n">Data</span><span class="o">.</span><span class="n">List</span>
<span class="kr">import</span> <span class="n">Control</span><span class="o">.</span><span class="n">Monad</span>

<span class="nv">main</span> <span class="o">=</span> <span class="kr">do</span> <span class="p">[</span><span class="nv">w</span><span class="p">,</span><span class="nv">h</span><span class="p">]</span> <span class="o">&lt;-</span> <span class="nv">fmap</span> <span class="p">(</span><span class="nv">map</span> <span class="nv">read</span><span class="o">.</span><span class="nv">words</span><span class="p">)</span> <span class="nv">getLine</span>
          <span class="nv">xss</span>   <span class="o">&lt;-</span> <span class="nv">fmap</span> <span class="p">(</span><span class="nv">numbering</span> <span class="nv">w</span><span class="o">.</span><span class="nv">sandwich</span> <span class="p">([</span><span class="mi">1</span><span class="o">..</span><span class="nv">w</span><span class="p">]</span><span class="o">&gt;&gt;</span><span class="s">&quot;+&quot;</span><span class="p">))</span> <span class="o">$</span> <span class="nv">replicateM</span> <span class="nv">h</span> <span class="nv">getLine</span>
          <span class="nv">print</span> <span class="o">$</span> <span class="p">(</span><span class="o">\</span><span class="nv">g</span> <span class="o">-&gt;</span> <span class="nv">path</span> <span class="nv">g</span> <span class="mi">0</span> <span class="p">(</span><span class="nv">w</span><span class="o">*</span><span class="p">(</span><span class="nv">h</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">$</span> <span class="nv">buildG</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nv">w</span><span class="o">*</span><span class="p">(</span><span class="nv">h</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">$</span> <span class="nv">calEdge</span> <span class="nv">w</span> <span class="nv">xss</span>

<span class="nv">sandwich</span> <span class="nv">k</span> <span class="nv">xs</span> <span class="o">=</span> <span class="p">[</span><span class="nv">k</span><span class="p">]</span> <span class="o">++</span> <span class="nv">xs</span> <span class="o">++</span> <span class="p">[</span><span class="nv">k</span><span class="p">]</span>

<span class="nv">numbering</span> <span class="nv">w</span> <span class="nv">xss</span> <span class="o">=</span> <span class="nv">snd</span> <span class="o">$</span> <span class="nv">mapAccumL</span> <span class="nv">f</span> <span class="mi">0</span> <span class="nv">xss</span>
                  <span class="kr">where</span> <span class="nv">f</span> <span class="nv">i</span> <span class="nv">xs</span> <span class="o">=</span> <span class="p">(</span><span class="nv">i</span><span class="o">+</span><span class="nv">w</span><span class="p">,</span> <span class="nv">zip</span> <span class="p">[</span><span class="nv">i</span><span class="o">..</span><span class="p">]</span> <span class="nv">xs</span><span class="p">)</span>

<span class="nv">calEdge</span> <span class="nv">w</span> <span class="nv">xss</span> <span class="o">=</span> <span class="p">(</span><span class="nv">concatMap</span> <span class="nv">f</span> <span class="nv">xss</span><span class="p">)</span> <span class="o">++</span> <span class="p">(</span><span class="nv">concatMap</span> <span class="nv">f</span> <span class="o">$</span> <span class="nv">transpose</span> <span class="nv">xss</span><span class="p">)</span>
                <span class="kr">where</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">catMaybes</span> <span class="o">$</span> <span class="nv">concat</span> <span class="o">$</span> <span class="nv">snd</span> <span class="o">$</span> <span class="nv">mapAccumL</span> <span class="nv">g</span> <span class="nv">x</span> <span class="nv">xs</span>
                      <span class="nv">g</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="nv">r</span><span class="o">@</span><span class="p">(</span><span class="nv">j</span><span class="p">,</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">r</span><span class="p">,[</span><span class="n">Just</span><span class="p">(</span><span class="nv">i</span><span class="p">,</span><span class="nv">j</span><span class="p">),</span><span class="n">Just</span><span class="p">(</span><span class="nv">j</span><span class="p">,</span><span class="nv">i</span><span class="p">)])</span>
                      <span class="nv">g</span> <span class="kr">_</span> <span class="nv">r</span>               <span class="o">=</span> <span class="p">(</span><span class="nv">r</span><span class="p">,[</span><span class="n">Nothing</span><span class="p">])</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9744/addtag/" class="addtag" id="addtag_9744">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9744/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9744/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9744"
  >-</span><span
  class="button yellow"
  id="rating_z_9744"
  >0</span><span 
  class="button green"
  id="rating_p_9744"
  >+</span></span></span>
  

<p>

  

  <a href="/web/20100116062258/http://ja.doukaku.org/comment/9744/">
    1
    reply
  </a>

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/9744/">
  返信
  </a>]
  </div>
</div>
</div>




  
    <div class="indent compact" style="position: relative;">
      <img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/1x1dark_green.png" width=10 style="position: absolute;top:-10px;margin-left:8px;">
      





<div class="comment" id="comment9745">
  <p class="banner"><a href="/web/20100116062258/http://ja.doukaku.org/user/1129/" target="_top">Lost_dog</a>

	
	&nbsp;
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9745/">#9745</a>(<script language="JavaScript">print_time(new Date("2009/12/27 17:16 GMT"));</script><noscript>2009/12/27 17:16 GMT</noscript>)
	
	
	
	[<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
	  Haskell
	</a>]
	
	
	
	&nbsp;

<span class="rating">評価<span style="background-color: #ffffff;">0/0=0.00</span></span>
  </p>
  <div class="comment_content" >
	<div class="comment_body">
	  <p>下のほうがよかった。。</p>

	</div>
	
	
	
    <div class="compact">
      <table><tr><td class="linenos"><pre>1
2
3</pre></td><td class="code"><div class="highlight"><pre><span class="kr">where</span> <span class="nv">f</span> <span class="p">(</span><span class="nv">x</span><span class="o">:</span><span class="nv">xs</span><span class="p">)</span> <span class="o">=</span> <span class="nv">concat</span> <span class="o">$</span> <span class="nv">catMaybes</span> <span class="o">$</span> <span class="nv">snd</span> <span class="o">$</span> <span class="nv">mapAccumL</span> <span class="nv">g</span> <span class="nv">x</span> <span class="nv">xs</span>
                      <span class="nv">g</span> <span class="p">(</span><span class="nv">i</span><span class="p">,</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="nv">r</span><span class="o">@</span><span class="p">(</span><span class="nv">j</span><span class="p">,</span><span class="sc">&#39;+&#39;</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="nv">r</span><span class="p">,</span><span class="n">Just</span> <span class="p">[(</span><span class="nv">i</span><span class="p">,</span><span class="nv">j</span><span class="p">),(</span><span class="nv">i</span><span class="p">,</span><span class="nv">j</span><span class="p">)])</span>
                      <span class="nv">g</span> <span class="kr">_</span> <span class="nv">r</span>               <span class="o">=</span> <span class="p">(</span><span class="nv">r</span><span class="p">,</span><span class="n">Nothing</span><span class="p">)</span>
</pre></div>
</td></tr></table>
    </div>
	

  
  <div align = "right" class="banner">
	
	<a href="/web/20100116062258/http://ja.doukaku.org/comment/9745/addtag/" class="addtag" id="addtag_9745">タグ</a>:
	
	タグなし
	&nbsp;

	
      [<a href="/web/20100116062258/http://ja.doukaku.org/lang/haskell/">
		Haskell
      </a>]
	  
      [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9745/download/">
		ダウンロード
      </a>]
	  [<a href="/web/20100116062258/http://ja.doukaku.org/comment/9745/download_html/">
		HTML
      </a>]<p>
	

  
  <span class="rating">
  評価<span style="background-color: #ffffff;"
  >0/0=0.00</span
  ><span class="buttons"><span 
  class="button red"
  id="rating_n_9745"
  >-</span><span
  class="button yellow"
  id="rating_z_9745"
  >0</span><span 
  class="button green"
  id="rating_p_9745"
  >+</span></span></span>
  

<p>

  
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/9744/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoparent.png" alt="parent"></a>
    <a href="/web/20100116062258/http://ja.doukaku.org/comment/9745/root/"><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/gotoroot.png" alt="thread root"></a>
  

  

  [<a href="/web/20100116062258/http://ja.doukaku.org/30/reply_to/9745/">
  返信
  </a>]
  </div>
</div>
</div>




  


    </div>
  


  

  







</div>

<div id="side_menu" class="compact">

<iframe src="/web/20100116062258if_/http://ja.doukaku.org/login_info/" frameborder=0 width=100% id="login_info">
iframe required
</iframe>

<h4 class="semi_compact">一覧</h4>

<ul>
<!--<li><a href="/web/20100116062258/http://ja.doukaku.org/user/">ユーザ</a>-->
<li><a href="/web/20100116062258/http://ja.doukaku.org/lang/">言語</a>
<li><a href="/web/20100116062258/http://ja.doukaku.org/challenge/">お題</a>
<li><a href="/web/20100116062258/http://ja.doukaku.org/topic/">トピック</a>
<li><a href="/web/20100116062258/http://ja.doukaku.org/comment/">投稿</a>
<li><a href="/web/20100116062258/http://ja.doukaku.org/good_comments/">評価の高い投稿</a>
<li><a href="/web/20100116062258/http://ja.doukaku.org/tag/">タグ</a>
</ul>

<h4 class="compact">フィード</h4>
<ul>
<li><a href="/web/20100116062258/http://ja.doukaku.org/feeds/challenges/">最新のお題</a><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100116062258/http://ja.doukaku.org/feeds/topics/">最新のトピック</a><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/feed_icon.png">
<li><a href="/web/20100116062258/http://ja.doukaku.org/feeds/comments/">新着投稿</a><img src="/web/20100116062258im_/http://ja.doukaku.org/static/image/feed_icon.png">
</ul>







<h4 class="compact">その他</h4>
<ul>
<li><a href="/web/20100116062258/http://ja.doukaku.org/qa/">Q&A</a>
<li><a href="/web/20100116062258/http://ja.doukaku.org/feedback/">フィードバック</a>
<!--<li><a href="/web/20100116062258/http://ja.doukaku.org/terms">用語集</a>-->
</ul>


<h4 class="compact">リンク</h4>
<ul>
<li><a href="/web/20100116062258/http://www.lingr.com/room/doukaku_ja">チャットルーム(Lingr)</a>
<li><a href="/web/20100116062258/http://labs.cybozu.co.jp/">サイボウズ・ラボ</a>
<li><a href="/web/20100116062258/http://www.djangoproject.com/">Django</a>
</ul>

<h4 id="pathtraq" class="compact"><a href="/web/20100116062258/http://pathtraq.com/analytics?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&m=popular">Pathtraq</a></h4>
<div class="indent">
<span id="pathtraq_sentinel">loading...</span>
</div>


</div>
</div>


<div id="page_foot" class="bordered">

<a rel="license" href="/web/20100116062258/http://creativecommons.org/licenses/by/2.1/jp/">
<img alt="Creative Commons License" style="border-width:0" src="/web/20100116062258im_/http://i.creativecommons.org/l/by/2.1/jp/88x31.png" /></a>
このサイトの内容は、
<a rel="license" href="/web/20100116062258/http://creativecommons.org/licenses/by/2.1/jp/">クリエイティブ・コモンズ・ライセンス</a>の下でライセンスされています。
<a href="/web/20100116062258/http://ja.doukaku.org/qa/#licence">[詳細]</a>

</div>

</body>




<script type="text/javascript">
$(document).ready(function(){$("#doukaku_org").after("<script src='/web/20100116062258/http://api.pathtraq.com/pages?url=http%3A%2F%2Fja.doukaku.org%2Fcomment%2F*%2F%20desc%3A%E3%81%A9%E3%81%86%E6%9B%B8%E3%81%8Forg&api=json&callback=addPathtraq'><" + "/script>")});
</script>

<script src="/web/20100116062258js_/http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-2136157-1";
urchinTracker();
</script>




</html>





<!--
     FILE ARCHIVED ON 6:22:58 Jan 16, 2010 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 15:22:26 Nov 16, 2013.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
-->
