---
:id: '8'
:title: ピラミッドを作る
:comments:
- :id: '3364'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3364
  :user_name: にしお
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/04 04:22 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  正の整数nが与えられたときに、高さnのピラミッドを出力するプログラムを作ってください。\r\n<p>\r\nn=4の時の出力は下のようになります。\r\n</p>\n<pre>\r\n
    \  *\r\n  ***\r\n *****\r\n******* \r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '90'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/90
  :user_name: PHO
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/69/
  :language: Haskell
  :time: 2007/07/04 04:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    pyramid :: Int -&gt; IO ()
    pyramid height = mapM_ pyramid' [1 .. height]
        where
          pyramid' :: Int -&gt; IO ()
          pyramid' row
              = do putStr (replicate (height - row) ' ')
                   putStr (replicate (row * 2 - 1)  '*')
                   putStrLn ""

    main = pyramid 4
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '91'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/91
  :user_name: kazuho
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/66/
  :language: JavaScript
  :time: 2007/07/04 04:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  1ゲト\n\t"
  :code: |
    function pyramid(n) {
      alert(
        (function f(n, p) {
          if (n &lt; 2) return [p + '*'];
          var o = f(n - 1, p + ' ');
          o.push(o[o.length - 1].replace(/ \*/, '***'));
          return o;
        })(n, '').join('\n'));
    }
    pyramid(4);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '92'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/92
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/07/04 04:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  渡る世間はjavaばかり\n\t"
  :code: "public class PyramidPrint {\n\t\n\tpublic static void main(String[] args)
    {\n\t\tprint(4);\n\t}\n\n\tpublic static void print(int n) {\n\t\tfor (int i =
    0, ii = n - 1; i &lt; n; i++, ii--) {\n\t\t\tSystem.out.println(\n\t\t\t    loop(ii,
    ' ')\n\t\t\t    +\n\t\t\t    loop((i * 2) + 1, '*')\n\t\t\t);\n\t\t}\n\t}\n\tpublic
    static String loop(int n, char ch) {\n\t\tStringBuffer buffer = new StringBuffer();\n\t\tfor
    (int i = 0; i &lt; n; i++) {\n\t\t\tbuffer.append(ch);\n\t\t}\n\t\treturn buffer.toString();\n\t}\n\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '93'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/93
  :user_name: zigorou
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/64/
  :language: Perl
  :time: 2007/07/04 04:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  はぁはx\n\t"
  :code: |
    #!/usr/bin/perl

    sub p {
        my $n = shift;
        my $w = 2 * $n - 1;
        for (my $m = 1; $m &lt;= $n; $m++) {
            my $sw = ($w - (2 * $m - 1)) / 2;
            printf("%s%s%s\n", " " x  $sw, "*" x (2 * $m - 1), " " x $sw);
        }
    }

    p($ARGV[0]);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '94'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/94
  :user_name: kazuho
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/66/
  :language: Perl
  :time: 2007/07/04 04:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  map厨ですがなにか\n\t"
  :code: |
    sub pyramid {
      my $n = shift;
      print map { ' 'x($n-$_) . '*'x($_*2-1) . "\n" } 1..$n;
    }
    pyramid(4);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '97'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/97
  :user_name: sumim
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/04 04:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    | n |
    n := 4.
    Transcript open.
    0 to: n - 1 do: [:idx |
       Transcript cr;
          show: (String new: n - idx - 1 withAll: $ );
          show: (String new: idx * 2 + 1 withAll: $*)]
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '102'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/102
  :user_name: takesako
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/65/
  :language: Perl
  :time: 2007/07/04 05:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Perlワンライナーで\n\t"
  :code: |
    print" "x($ARGV[0]-$_),"*"x($_*2-1),"\n"for(1..$ARGV[0]);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '103'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/103
  :user_name: kazuho
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/66/
  :language: C
  :time: 2007/07/04 05:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    string pyramid(int n, const string&amp; sp = "") {
      string stars = n &lt; 2 ? "*" : pyramid(n - 1, sp + " ") + "**";
      cout &lt;&lt; sp &lt;&lt; stars &lt;&lt; endl;
      return stars;
    }

    int main(int, char**) {
      pyramid(4);
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '104'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/104
  :user_name: noeta
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/60/
  :language: Python
  :time: 2007/07/04 05:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">普通に。</pre>\n\t"
  :code: |
    def pyramid(n):
        for line in range(1, n+1):
            print ' ' * (n - line) + '*' * (line * 2 - 1)
  :tags:
  - Python
  - オーソドックス
  :references:
    :url: 
    :title: 
- :id: '105'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/105
  :user_name: bonlife
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/83/
  :language: Python
  :time: 2007/07/04 05:23 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  普通に書きました。\n\t"
  :code: |
    def make_pyramid(n):
        for i in xrange(n):
            i += 1
            print "%s%s" % (" " * ( n - i + 1 ), "*" * ( i * 2 - 1 ))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '108'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/108
  :user_name: morchin
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/78/
  :language: Python
  :time: 2007/07/04 05:54 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  普通に。\n\t"
  :code: |
    n=input();i=1;exec"print' '*(n-i)+'*'*(i*2-1);i+=1;"*n
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '109'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/109
  :user_name: kaorun
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/61/
  :language: C
  :time: 2007/07/04 06:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C#だとstringのコンストラクタで作るのが一番シンプルかなぁ...。\n\t"
  :code: "static void Pyramid(int n)\n{\n\tfor (int i = 1; i &lt;= n; i++)\n\t\tConsole.WriteLine(new
    string(' ', n - i) + new string('*', i * 2 - 1));\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '110'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/110
  :user_name: smeghead
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/07/04 06:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">clispで確認しました。\r\n(pyramid 4)\r\n</pre>\n\t"
  :code: |
    (defun pyramid (h)
      (labels ((p-line (n)
                       (loop for i from 1 to (- h n) do (princ " "))
                       (loop for i from 1 to (1- (* n 2)) do (princ "*"))
                       (terpri))
               (rec (n)
                    (unless (&gt; n h) (p-line n) (rec (1+ n)))))
        (rec 1)))
  :tags:
  - clisp
  :references:
    :url: 
    :title: 
- :id: '113'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/113
  :user_name: kazuho
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/66/
  :language: C
  :time: 2007/07/04 06:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  バッファオーバーフローとか言わないw\n\t"
  :code: "void pyramid(int n) {\n  char buf[256];\n  int i;\n  \n  memset(buf, ' ',
    n - 1);\n  for (i = 0; i &lt; n; i++) {\n    buf[n - i - 1] = '*';\n    strcpy(buf
    + n + i - 1, \"*\\n\");\n    fputs(buf, stdout);\n  }\n}\n\nint main(int argc,
    char** argv) {\n  pyramid(4);\n  return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '114'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/114
  :user_name: minke
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/28/
  :language: Haskell
  :time: 2007/07/04 06:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    pyramid n = putStr $ unlines $ map pyr $ take n [0..]
        where
          pyr x = concatMap (uncurry replicate) [(n-x-1, ' '), (2*x+1, '*')]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '120'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/120
  :user_name: morchin
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/78/
  :language: Python
  :time: 2007/07/04 08:00 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  以下でも同じく54B。\r\n\n\t"
  :code: |
    n=input();i=1;exec"print('*'*i).center(n*2-1);i+=2;"*n
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '122'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/122
  :user_name: morchin
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/78/
  :language: Python
  :time: 2007/07/04 08:15 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  53B。ショートコードはとりあえずここまでとするつもり。\n\t"
  :code: |
    n=input();i=1;exec"print('*'*i).rjust(n+i/2);i+=2;"*n
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '125'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/125
  :user_name: ether
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/96/
  :language: awk
  :time: 2007/07/04 12:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  awk で変な方向に頑張ってみました。\n\t"
  :code: |
    awk 'BEGIN{n=ARGV[1];while(n){print --n}}' 4 | \
    awk '{printf "%"$1+NR*2"s\n",sprintf("%0"NR*2-1"d",0)}'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '126'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/126
  :user_name: mjy
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/94/
  :language: Bash
  :time: 2007/07/04 13:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #! /bin/bash

    n=${1:-4}    # default=4
    block='*'
    space=$(printf "%${n}s")

    for((; n; n--)); do
        space=${space:0:n-1}
        echo "$space$block"
        block="${block}**"
    done
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '127'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/127
  :user_name: にしお
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/07/04 13:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">出題者なので黙っていたけど我慢できなくなったのでｗ\r\n48Bです。</pre>\n\t"
  :code: |
    for i in range(n):print('*'*(i*2+1)).center(n*2)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '128'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/128
  :user_name: にしお
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/04 13:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  あ、nの入力を受け取るコードが入ってないからフェアじゃない…orz\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '130'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/130
  :user_name: ahinore
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/99/
  :language: Ruby
  :time: 2007/07/04 14:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  コマンド付で\n\t"
  :code: |
    ruby -e 'n=4;b=1;n.times{n=n-1;p" "*n+"*"*b+" "*n;b=b+2}'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '131'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/131
  :user_name: nobsun
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/07/04 14:56 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  明示的算術演算なし版、Lazyならではのコード片\n\t"
  :code: |
    module Main (main) where
    import System.Environment (getArgs)
    main :: IO ()
    main    = getArgs &gt;&gt;= putStr . pyramid . read . head
    pyramid :: Int -&gt; String
    pyramid = unlines . reverse . zipWith (++) (iterate (" "++) "") . reverse . flip take (iterate ("**"++) "*")

    {-
    *Main&gt; :main 7
          *
         ***
        *****
       *******
      *********
     ***********
    *************
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '133'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/133
  :user_name: 沢渡 みかげ
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/101/
  :language: Erlang
  :time: 2007/07/04 15:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">erl -noshell -eval 'pyramid:pyramid(4), halt().'\r\nのように実行．\r\n</pre>\n\t"
  :code: |
    -module(pyramid).
    -export([pyramid/1]).

    pyramid(N) -&gt;
            pyramid(N, 1).

    pyramid(Max, Row) when Max &lt; Row -&gt;
            ok;
    pyramid(Max, Row) -&gt;
            write(" ", Max - Row),
            write("*", Row * 2 - 1),
            io:put_chars("\n"),
            pyramid(Max, Row + 1).

    write(_String, 0) -&gt;
            ok;
    write(String, Repeat) -&gt;
            io:put_chars(String),
            write(String, Repeat - 1).
  :tags:
  - Erlang
  :references:
    :url: 
    :title: 
- :id: '136'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/136
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/07/04 15:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  ざっくり。\n\t"
  :code: "&gt;&gt;&gt; def pyramid(n=4):\n...     for i in range(n):\n...             print
    (\"*\" * (i * 2 + 1)).center(n * 2 + 1)\n... \n&gt;&gt;&gt; pyramid()\n    *    \n
    \  ***   \n  *****  \n ******* \n&gt;&gt;&gt; pyramid(6)\n      *      \n     ***
    \    \n    *****    \n   *******   \n  *********  \n *********** \n&gt;&gt;&gt;
    \n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '141'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/141
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: 
  :time: 2007/07/04 17:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '142'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/142
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/07/04 17:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">さくっと書き上げてみた。</pre>\n\t"
  :code: |
    def stars(n)
      2*n-1
    end

    def pyramid(n)
      1.upto(n) do |i|
        puts(("*"*stars(i)).center(stars(n)))
      end
    end
    pyramid(10)
  :tags:
  - ruby
  :references:
    :url: 
    :title: 
- :id: '145'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/145
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: 
  :time: 2007/07/04 17:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '146'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/146
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: 
  :time: 2007/07/04 17:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '147'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/147
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: 
  :time: 2007/07/04 17:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '148'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/148
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/04 17:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  んー、String#centerがCommon Lispにはないから書かないといけなかったorz\r\n\n\t"
  :code: "(defun center (str len &amp;optional (padchar #\\ ))\n  \"If LEN is greater
    than the length of STR, returns a new String \n   of length LEN with STR centered
    and padded with PADCHAR; \n   otherwise, returns STR.\"\n  (let ((pad (make-string
    (/ (- len (length str)) 2) :initial-element padchar)))\n    (format nil \"~a~a~a\"
    pad str pad)))\n\n(defun stars (n)\n  (- (* 2 n) 1))\n\n(defun pyramid (n)\n  (loop
    for i from 1 to n do\n       (format t \"~a~%\" (center (make-string (stars i)
    :initial-element #\\*)\n                                (stars n)))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '153'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/153
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/07/04 22:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import sys

    mark = '*'
    if len(sys.argv) == 2:
        n = int(sys.argv[1])
    if len(sys.argv) == 3:
        n, mark = int(sys.argv[1]), sys.argv[2]

    for i in xrange(1,n * 2,2):
        print(mark * i).center(n * 2)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '157'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/157
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Scheme
  :time: 2007/07/05 04:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  R5RS に収まる範囲でシンプルに。\n\t"
  :code: |
    (define (print-tree n)
      (let loop ((i 0))
        (if (&lt; i n)
            (begin (display
                    (make-string (- n i 1) #\ )
                    (make-string (+ 1 (* 2 i)) #\*))
                   (newline)
                   (loop (+ 1 i))))))

    (print-tree (read))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '159'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/159
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2007/07/05 04:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    n=4;1.upto(n){|i|puts" "*(n-i)+"*"*(i*2-1)}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '160'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/160
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/07/05 04:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "#include &lt;stdio.h&gt;\n\nvoid main(int argc, char **argv) {\n\tint i,
    j, n;\n\n\tn = argc &gt; 1 ? atoi(argv[1]) : 4;\n\n\tfor(i=0; i&lt;n; i++) {\n\t\tprintf(\"%*c\",
    n-i, '*');\n\t\tfor(j=0; j&lt;i*2; j++) putchar('*');\n\t\tprintf(\"\\r\\n\");\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '161'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/161
  :user_name: tnk
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/30/
  :language: Java
  :time: 2007/07/05 04:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    public class Pyramid {
        public static void main(String[] args) {
            print(4);
        }
        private static void print(int n) {
            int i;
            StringBuffer sb = new StringBuffer();
            for (i = n; i &gt; 1; i--) sb.append(" ");
            for (i = n*2-1; i &gt; 0; i--) sb.append("*");
            for (i = n; i &gt; 0; i--) System.out.println(sb.substring(n-i, 3*n-2*i));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '163'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/163
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Scheme
  :time: 2007/07/05 04:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">pyramidooooooo!</pre>\n\t"
  :code: |
    (define (pyramid h)
      (for-each (lambda (pyram) (display pyram) (newline))
                (do ((space (- h 1) (- space 1))
                     (star 1 (+ star 2))
                     (pyram '() (cons (string-append (make-string space #\space)
                                                     (make-string star #\*))
                                      pyram)))
                    ((&gt; 0 space) (reverse pyram)))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '168'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/168
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Scheme
  :time: 2007/07/05 05:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Gaucheで。</pre>\n\t"
  :code: |
    (define (pyramid h)
      (let loop ((space (- h 1)) (star 1))
        (if (&lt;= 0 space)
            (begin
              (print #`",(make-string space #\\space),(make-string star #\\*)")
              (loop (- space 1) (+ star 2))))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '169'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/169
  :user_name: id:nekoruri
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/111/
  :language: Perl
  :time: 2007/07/05 05:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  素直に書いてみた。\n\t"
  :code: |
    my $n = shift;
    for my $i ( 1 .. $n ) {
        print ' ' x ( $n - $i ) . '*' x ( $i * 2 - 1 ) . "\n";
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '174'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/174
  :user_name: otetsu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/112/
  :language: Other
  :time: 2007/07/05 06:18 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  興味本位で「ひまわり」にて。\r\nプログラムはアルファベットが良いなぁ。\r\n\r\n英語圏の人は、プログラムを書いていて頭が混乱しないのか気になります。\n\t"
  :code: |
    「階層は何階？」と、尋ねて、階層に、入れる。
    ワークは、「」。
    表示文字は、「」。
    センタリング。
    階層回(
    　ワークは、ワーク &amp;「*」
    　表示文字は、表示文字 &amp; ワーク &amp; 「\n」
    )。
    表示文字と、表示する。
    センタリング解除。
  :tags:
  - ひまわり
  :references:
    :url: 
    :title: 
- :id: '178'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/178
  :user_name: shiro
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/07/05 07:54 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  まだ文字列置換を使うのは出てないようなんで。\r\n文字列を副作用で加工してった方が短くなると思うけど、とりあえずGaucheで。\n\t"
  :code: |
    (define (pyramid n)
      (define (p s n) (q (regexp-replace* s #/ \*/ "***" #/ $/ "*") n))
      (define (q s n) (when (&gt; n 0) (print s) (p s (- n 1))))
      (p (make-string n) n))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '180'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/180
  :user_name: shiro
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/41/
  :language: sed
  :time: 2007/07/05 08:06 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">同じアイディアをsedで。\r\nピラミッドの段数分のスペースからなる行を標準入力から与えます。\r\n\r\n$
    echo \"     \" | sed -n -f t.sed\r\n    *\r\n   ***\r\n  *****\r\n *******\r\n*********\r\n</pre>\n\t"
  :code: |
    s/ $/*/p
    :x
    s/ \*/***/p
    tx
  :tags:
  - sed
  :references:
    :url: 
    :title: 
- :id: '190'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/190
  :user_name: mattn
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/52/
  :language: Vim
  :time: 2007/07/05 10:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  vim7で...\n\t"
  :code: |
    fun! Pyramid(n)
      exe "normal! ".(a:n-1)."o\&lt;esc&gt;:%s/^/\\=repeat('*',line('.')*2-1)\&lt;cr&gt;:%ce\&lt;cr&gt;"
    endfun
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '192'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/192
  :user_name: satyri
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/76/
  :language: PHP
  :time: 2007/07/05 12:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ごく普通に。</pre>\n\t"
  :code: "&lt;?php\nfunction pyramid($n){\n\tfor($i = 0; $i &lt; $n; $i++){\n\t\tprintf(\"%s%s\\n\",
    str_repeat(' ', $n - $i), str_repeat('*', 2 * $i + 1));\n\t}\n}\npyramid(4);\n?&gt;\n"
  :tags:
  - PHP
  :references:
    :url: 
    :title: 
- :id: '195'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/195
  :user_name: naruse
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/120/
  :language: Ruby
  :time: 2007/07/05 13:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  正規表現を使ってみました。思ったより短くならない・・・。\n\t"
  :code: |
    ruby -e';s="*";2.upto(ARGV[0].to_i){s.gsub!(/\A(\s*)|$/){$1?" #$1*\n#$1":"**"}};puts s' 4
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '222'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/222
  :user_name: urapccc
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/140/
  :language: Java
  :time: 2007/07/06 06:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ロジックを考えるのが物凄く楽しかったです。。。\r\n\n\t"
  :code: "public class B {\n\tpublic static void main(String[] args) {\n\t\tint n=4;\n\t\tfor
    (int y=0; y&lt;n; y++){\n\t\t\tfor ( int x=2*n-1; x&gt;0; x--)\n\t\t\t\tSystem.out.print(
    x&gt;=n-y &amp;&amp; x-y&lt;=n ? \"*\" : \" \" );\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '259'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/259
  :user_name: rhodium
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/144/
  :language: Brainf
  :time: 2007/07/06 12:40 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  nが一桁のみの対応です。\n\t"
  :code: |
    &gt;++[-&lt;+++++&gt;]&gt;++++++[-&lt;+++++++&gt;]&gt;++++++++[-&lt;++++&gt;],&gt;++++++++[-&lt;------&gt;]&lt;[-&gt;+&gt;+&lt;&lt;]&gt;&gt;-&gt;&gt;+&lt;&lt;&lt;[-&gt;[-&gt;+&lt;&lt;&lt;&lt;.&gt;&gt;&gt;]&gt;[-&lt;+&gt;]&lt;-&gt;&gt;-[-&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;..&gt;&gt;&gt;&gt;&gt;&gt;]&lt;&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;&gt;&gt;&gt;[-&lt;+&gt;]&lt;++&lt;&lt;&lt;&lt;&lt;&lt;&lt;.&gt;&gt;&gt;&gt;]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '303'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/303
  :user_name: daisuke
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/157/
  :language: Ruby
  :time: 2007/07/07 09:09 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  冗長だ…\n\t"
  :code: |
    def delta(n)
      n.times do |i|
        str = ' ' * (n - (i + 1))
        str += '*' * (i * 2 + 1)
        str += ' ' * (n - (i + 1))
        p str
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '308'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/308
  :user_name: takano32
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/148/
  :language: Ruby
  :time: 2007/07/07 10:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Hashを使って書いてみました．\n\t"
  :code: "max = 4\np = Hash.new('*')\n\n(1..max).each do |i|\n\t(1...max).each do
    |j|\n\t\tif i &lt;= j then\n\t\t\tp[i] = \" #{p[i]} \"\n\t\telse\n\t\t\tp[i] =
    \"*#{p[i]}*\"\n\t\tend\n\tend\nend\n\n(1..max).each do |i|\n\tputs p[i]\nend\n"
  :tags:
  - Hash
  - Ruby
  :references:
    :url: 
    :title: 
- :id: '319'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/319
  :user_name: kacchi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/07/07 15:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Emacs Lispです。Schemeのiota関数を使って、あとはmap*でイテレート。\r\nmapは(require
    'cl)すれば利用できたと思います。\r\n</pre>\n\t"
  :code: |
    (defun iota (count &amp;optional from step)
      (let ((from (or from 0))
            (step (or step 1))
            (result nil))
        (while (&gt; count 0)
          (setq result (cons from result)
                from (+ from step)
                count (- count 1)))
        (nreverse result)))

    (defun pyramid (h)
      (mapc (lambda (s) (insert s ?\n))
            (mapcar (lambda (c)
                      (concat (make-string (car c) ?\ )
                              (make-string (cdr c) ?\*)))
                    (map 'list 'cons (nreverse (iota h)) (iota h 1 2)))))

    (pyramid 4)
  :tags:
  - EmacsLisp
  :references:
    :url: 
    :title: 
- :id: '321'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/321
  :user_name: nkmrtks
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/155/
  :language: Common
  :time: 2007/07/07 18:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  コードに面白みが無いにも程があるorz\n\t"
  :code: |
    (defun pyramid (height)
      (dotimes (l height)
        (princ
         (format nil "~{~A~}~{~A~}~{~A~}~%"
                 (make-list (- height (1+ l)) :initial-element " ")
                 (make-list (1- (* 2 (1+ l))) :initial-element "*")
                 (make-list (- height (1+ l)) :initial-element " ")))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '322'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/322
  :user_name: nkmrtks
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/155/
  :language: Common
  :time: 2007/07/07 19:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  とりあえず再帰化:p\n\t"
  :code: |
    (defun pyramid (height)
      (labels
          ((pyramid1 (height acc)
             (and (&gt; height acc)
                  (princ
                   (format nil "~{~A~}~{~A~}~{~A~}~%"
                           (make-list (- height (1+ acc)) :initial-element " ")
                           (make-list (1- (* 2 (1+ acc))) :initial-element "*")
                           (make-list (- height (1+ acc)) :initial-element " ")))
                  (pyramid1 height (1+ acc)))))
        (pyramid1 height 0)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '325'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/325
  :user_name: ultraist
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/17/
  :language: Other
  :time: 2007/07/07 23:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">$ echo \"pyramid(4)\" &gt; text\r\n$ m4 pyramid.m4
    text \r\n   *\r\n  ***\r\n *****\r\n*******</pre>\n\t"
  :code: "dnl pyramid.m4\ndnl \ndefine(`forloop',\n`pushdef(`$1', `$2')dnl\n_forloop(`$1',
    `$2', `$3', `$4')popdef(`$1')')dnl\ndefine(`_forloop',dnl\n`$4`'ifelse($1, `$3',
    ,dnl\n`define(`$1', incr($1))_forloop(`$1', `$2', `$3', `$4')')')dnl\ndefine(`pyramid',
    dnl\n`ifelse($1, 0, , $#, 0, ,dnl\n`forloop(`i', 1, `$1',`forloop(`sp', 0, eval(`$1'
    - i),dnl\n`ifelse(`sp', 0, ,` ')')forloop(`as', 1, eval(i * 2 - 1), `*')\n')')')dnl\n"
  :tags:
  - m4
  :references:
    :url: 
    :title: 
- :id: '337'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/337
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/07/08 06:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  普通に。\n\t"
  :code: |
    import sys

    def show(n):
        for i in xrange(n):
            print ("*" * (2 * i + 1)).rjust(n + i)

    if __name__ == '__main__':
        show(int(sys.argv[1]))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '338'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/338
  :user_name: kacchi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/145/
  :language: Ruby
  :time: 2007/07/08 06:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">再帰で</pre>\n\t"
  :code: |
    race = lambda do |fast, slow|
      unless fast &gt; slow
        puts ' ' * (slow - fast) + '*' * fast
        race.call(fast + 2, slow + 1)
      end
    end

    race.call(1, 4)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '355'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/355
  :user_name: kozima
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/07/08 14:25 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  format で頑張ったらこうなりました\n\t"
  :code: |
    (defun pyramid (n)
      (dotimes (m n)
        (format t "~V:@&lt;~V@{*~}~&gt;~&amp;" (1- (* 2 n)) (1+ (* 2 m)) t)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '363'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/363
  :user_name: ところてん
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/07/08 23:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  愚直に\n\t"
  :code: |
    # -*- coding: utf-8 -*-

    def pyramid(x):
        for i in xrange(x):
            c  = " " * (x - i - 1)
            c += "*" * (i * 2 + 1)
            print c

    pyramid(10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '427'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/427
  :user_name: cats
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/07/10 04:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    using System.Text;

    class Program
    {
      static void Main()
      {
        int n = 4;
        StringBuilder sb = new StringBuilder("*");
        for (int i = 0; i &lt; n; ++i, sb.Append("**"))
          Console.WriteLine("{0," + (i + n) + "}", sb.ToString());
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '498'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/498
  :user_name: iwk
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/07/10 15:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  F#のタグをつけつつF#関係ない。\n\t"
  :code: |
    open System;;
    open String;;
    open List;;

    let pyramid n =
        let mkLine mxLn ln =
            (make (mxLn-ln) ' ') ^ (make (2*ln-1) '*') ^ (make (mxLn-ln) ' ') in
        String.concat "\n" (map (mkLine n) (init n (fun x -&gt; x+1)));;
    Printf.printf "%s\n" (pyramid 4)
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '504'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/504
  :user_name: ocean
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/07/10 16:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C++の&lt;algorithm&gt;を使ってみました。\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;iterator&gt;
    #include &lt;algorithm&gt;

    int main()
    {
        int n;

        while ((std::cin &gt;&gt; n) &amp;&amp; (n &gt; 0))
        {
            std::ostream_iterator&lt;char&gt; it(std::cout);

            for (int i = 0; i &lt; n; ++i)
            {
                std::fill_n(it, n - 1 - i, ' ');
                std::fill_n(it, i * 2 + 1, '*');
                std::fill_n(it, 1, '\n');
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '522'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/522
  :user_name: yuin
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/11 02:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Scalaのカバレッジあげ</pre>\n\t"
  :code: "def rep(s:String,n:Int) = List.make(n,s).mkString(\"\")\ndef print_pyramid(n:Int):Unit
    = \n  (for(i &lt;- List.range(1,n+1)) yield rep(\" \",n-i) + rep(\"*\",i*2-1)).map(println)\nprint_pyramid(4)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '559'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/559
  :user_name: tetsuro6502
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/213/
  :language: JavaScript
  :time: 2007/07/11 11:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "function pyramid(n) {\n\tvar p = '', c = { 'true': '*', 'false': ' ' };\n\tfor
    (var i = 0; i &lt; n; i++) {\n\t\tfor (var j = 1, b = ''; j &lt; n; j++)\n\t\t\tb
    += c[j + i &gt;= n];\n\t\tp += b + c[true] + b.split('').reverse().join('') +
    '\\n';\n\t}\n\treturn p;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '562'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/562
  :user_name: susu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/218/
  :language: Python
  :time: 2007/07/11 11:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: "def pyramid(n):\n\tfor i in range(n):\t\n\t\tif i == 0:\n\t\t\tspace = n-1\n\t\t\tblock
    =1\t\n\t\telse:\n\t\t\tspace = space-1\n\t\t\tblock = block+2\n\t\t\t\n\t\tprint
    \"%s%s\" %(\" \"*space , \"*\"*(block) )\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '573'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/573
  :user_name: sybian
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/217/
  :language: PHP
  :time: 2007/07/11 13:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">無駄に再帰で。\r\n*の右側は空白出さなくていいんですよね。</pre>\n\t"
  :code: "&lt;?php\n\nfunction py($n,$m=\"\",$result=array()){\n\tif($m===0) return
    implode(\"\\n\",array_reverse($result));\n\tif(!$m)$m=$n;\n\t$result[]=str_repeat(\"
    \",($n-$m)).str_repeat(\"*\",(2*$m)-1);\n\t$self=__FUNCTION__;\n\treturn $self($n,$m-1,$result);\n}\n\necho
    py(4);\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '574'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/574
  :user_name: sybian
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/217/
  :language: 
  :time: 2007/07/11 13:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  あー$mを1から始めて+1してけば初期化とarray_reverse不要だ。しまった。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '578'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/578
  :user_name: inamorix
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/220/
  :language: JavaScript
  :time: 2007/07/11 14:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "function pyramid (n) {\n\tfor (var i = 1, r = []; i &lt;= n; i++) {\n\t\tr.push(Array(n
    - i + 1).join(' ') + Array(i * 2).join('*'));\n\t}\n\treturn r.join('\\n');\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '623'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/623
  :user_name: tell
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/228/
  :language: Ruby
  :time: 2007/07/12 09:20 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  たぶんかぶってる\n\t"
  :code: |
    def piramido(n)
      1.upto(n){|i|puts" "*(n-i)+"*"*(2*i-1)}
    end
    piramido(4)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '632'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/632
  :user_name: tell
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/228/
  :language: Ruby
  :time: 2007/07/12 10:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  timesでも同じ流さでした．\r\n\n\t"
  :code: |
    def piramido(n)
      n.times{|i|puts" "*(n-i-1)+"*"*(2*i+1)}
    # 1.upto(n){|i|puts" "*(n-i)+"*"*(2*i-1)}
    end
    piramido(4)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '633'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/633
  :user_name: tell
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/228/
  :language: Ruby
  :time: 2007/07/12 10:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  せっかくだから別バージョン作ってみた．\r\n\r\ntimesとかuptoとか...とか，どれ使うかよく迷うよなぁ…\n\t"
  :code: |
    def piramido_other(n)
      n.times {|i|
        puts( " "*( n-i-1 ) + \
              ( i == 0 ? "^" : "/" + \
                ( i == n-1 ? "_" : " " )*( 2*i-1 ) + \
                "\\" ) )
      }
    end
    piramido_other(10)
  :tags:
  - AnotherVersion
  :references:
    :url: 
    :title: 
- :id: '673'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/673
  :user_name: kolshica
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/226/
  :language: JavaScript
  :time: 2007/07/12 15:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  JavaScript らしく書いてみた？\n\t"
  :code: |
    function pyramid(n) {
        var a = new Array(n*2+1).join('*') + "\n";
        return (function(n) {
            if (n &lt; 1) return "";
            return a.replace(new RegExp('\\*{'+(n*2-1)+'}'),new Array(n).join(' ')) + arguments.callee(n-1);
        })(n);
    }
    alert(pyramid(4));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '689'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/689
  :user_name: kkobayashi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/12 18:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ループなし版</pre>\n\t"
  :code: |
    n &lt;- 4
    cat(unlist(mapply(function(a, b){cat(rep(" ", a), rep("*", b), "\n", sep="")}, (n-1):0, (1:n)*2-1)))
  :tags:
  - R
  :references:
    :url: 
    :title: 
- :id: '823'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/823
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: Lua
  :time: 2007/07/14 06:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    function center(str, n)
      padchar = ' '
      pad = string.rep(padchar, (n - string.len(str))/2)
      return pad .. str .. pad
    end

    function stars(n)
      return 2*n-1
    end

    function pyramid(n)
      for i = 1, n, 1 do
        print(center(string.rep("*", stars(i)), stars(n)))
      end
    end

    pyramid(10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '824'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/824
  :user_name: rubikitch
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/105/
  :language: D
  :time: 2007/07/14 06:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "module doukaku;\nprivate import std.c.string;\nprivate import std.string;\nprivate
    import std.stdio;\n\nchar[] center(char[] str, int n) {\n    char[] padchar =
    \" \";\n    char[] pad = repeat(padchar, (n - str.length)/2);\n    return pad
    ~ str ~ pad;\n}\n\nint stars(int n) {\n    return 2*n-1;\n}\n\nvoid pyramid(int
    n) {\n    for (int i = 1; i&lt;=n; i++) \n        writefln(center(repeat(\"*\",
    stars(i)), stars(n)));\n}\n\nvoid main() {\n    pyramid(10);\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '845'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/845
  :user_name: ether
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/96/
  :language: XSLT
  :time: 2007/07/14 13:57 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  EXSLT テンプレートの padding と align を使いました。EXSLT の function syntax をサポートしている処理系を前提とすればもっと短く書けるのですが、ポータビリティ重視ということで。\n\t"
  :code: |
    &lt;xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:str="http://exslt.org/strings"
      extension-element-prefixes="str"&gt;
    &lt;xsl:import href="str.align.template.xsl" /&gt;
    &lt;xsl:import href="str.padding.template.xsl" /&gt;
    &lt;xsl:output method="text" /&gt;
    &lt;xsl:param name="n" /&gt;

    &lt;xsl:template match="/"&gt;
      &lt;xsl:call-template name="pyr"&gt;
        &lt;xsl:with-param name="stars" select="'*'" /&gt;
       &lt;/xsl:call-template&gt;
    &lt;/xsl:template&gt;

    &lt;xsl:template name="pyr"&gt;
      &lt;xsl:param name="stars" /&gt;
      &lt;xsl:param name="padding"&gt;
        &lt;xsl:call-template name="str:padding"&gt;
          &lt;xsl:with-param name="length" select="$n * 2 -1" /&gt;
          &lt;xsl:with-param name="chars" select="' '" /&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:param&gt;
      &lt;xsl:param name="n" select="$n" /&gt;
      &lt;xsl:call-template name="str:align"&gt;
         &lt;xsl:with-param name="string" select="$stars" /&gt;
         &lt;xsl:with-param name="padding" select="$padding" /&gt;
         &lt;xsl:with-param name="alignment" select="'center'" /&gt;
      &lt;/xsl:call-template&gt;
      &lt;xsl:text&gt;&amp;#xa;&lt;/xsl:text&gt;
      &lt;xsl:if test="$n &amp;gt; 1"&gt;
        &lt;xsl:call-template name="pyr"&gt;
          &lt;xsl:with-param name="stars"&gt;
            &lt;xsl:value-of select="$stars" /&gt;
            &lt;xsl:text&gt;**&lt;/xsl:text&gt;
          &lt;/xsl:with-param&gt;
          &lt;xsl:with-param name="padding" select="$padding" /&gt;
          &lt;xsl:with-param name="n" select="$n - 1" /&gt;
         &lt;/xsl:call-template&gt;
      &lt;/xsl:if&gt;
    &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags:
  - EXSLT
  :references:
    :url: 
    :title: 
- :id: '904'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/904
  :user_name: すがまさお
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/248/
  :language: Ruby
  :time: 2007/07/15 08:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ワンライナーで。\r\n*が一杯でみにくい！＞＜</pre>\n\t"
  :code: |
    ruby -e"n=5; n.times {|num| num+=1;puts \"#{' '*(n-num)}#{'*'*(num*2-1)}\";}"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '905'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/905
  :user_name: すがまさお
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/248/
  :language: Ruby
  :time: 2007/07/15 08:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">整形しました</pre>\n\t"
  :code: |
    def show(n = 0)
      n.times {|num|
        num+=1
        puts "#{' '*(n-num)}#{'*'*(num*2-1)}"
      }
    end

    show 4
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1095'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1095
  :user_name: aplo
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/267/
  :language: Ruby
  :time: 2007/07/19 10:48 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">なんとなくcursesライブラリを使ってみました。引数指定です</pre>\n\t"
  :code: |
    require 'curses'
    include Curses

    n = ARGV[0].to_i

    init_screen
    begin
    　n.times do |i|
    　　setpos(i, n -= 1)
    　　addstr("*" * (2 * i + 1))
    　end

    　refresh
    　getch
    ensure
    　close_screen
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1354'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1354
  :user_name: katsu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/23 01:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  repeat使って.\r\n\n\t"
  :code: |
    py(N):-
        repeat,
            between(1,N,I),
            I0 is N - I,
            I1 is I * 2 - 1,
            ntimes(I0,' '),ntimes(I1,*),ntimes(I0,' '),nl,
            N =&lt; I.

    ntimes(N,P):-
        repeat,
            between(1,N,I),
            write(P),
            N =&lt; I.

    :-py(2).
  :tags:
  - SWI-prolog
  :references:
    :url: 
    :title: 
- :id: '1503'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1503
  :user_name: lany
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/314/
  :language: Delphi
  :time: 2007/07/27 11:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "program Hoge;\n\n{$APPTYPE CONSOLE}\n\nprocedure Pyramid(n: Integer);\nvar\n
    \   i: Integer;\nbegin\n\tfor i := 1 to n do\n\t\tWriteln(StringOfChar(' ', n-i),
    StringOfChar('*', i*2-1));\nend;\n\nbegin\n\tPyramid(5);\nend.\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1532'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1532
  :user_name: 沢渡 みかげ
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/101/
  :language: Mathematica
  :time: 2007/07/28 03:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">実行例：\r\n\r\nIn[2]:= pyramid[4]\r\n   *\r\n
    \ ***\r\n *****\r\n*******\r\n</pre>\n\t"
  :code: "pyramid[n_] := \n  Module[{}, \n   Print[StringJoin[Table[\" \", {n - #}],
    Table[\"*\", {2 # - 1}]]] &amp; /@ \n     Range[n];\n   ];\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1587'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1587
  :user_name: morchin
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/78/
  :language: C
  :time: 2007/07/30 10:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">素人コード。C++は思い通りに書けず辛いなあ…。</pre>\n\t"
  :code: "#include &lt;iostream&gt;\n\nusing namespace std;\n\nint main()\n{\n\tint
    n;\n\tstring s;\n\n\tcin &gt;&gt; n;\n\tfor (int i = 0; i &lt; n; i++)\n\t{\n\t\tfor
    (int j = 0; j &lt; n-1-i; j++) s += ' ';\n\t\tfor (int j = 0; j &lt; i*2+1; j++)
    s += '*';\n\t\ts += '\\n';\n\t}\n\tcout &lt;&lt; s;\n\n\treturn 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1650'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1650
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/08/01 09:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">なるべく中括弧を使わないように頑張ってみました☆</pre>\n\t"
  :code: |
    #include&lt;stdio.h&gt;
    int main(void){
      int n;
      printf("n=");
      scanf("%d",&amp;n);
      for(int i=0;i&lt;n;printf("\n"),i++)
        for(int j=0;j&lt;n+i;j++)
          printf("%c",j&lt;n-i-1?' ':'*');
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1661'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1661
  :user_name: ether
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/96/
  :language: PowerShell
  :time: 2007/08/01 15:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    $level = $args[0]
    1..$level | foreach { " " * ($level - $_) + "*" * ($_ * 2 - 1) }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1682'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1682
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/08/02 05:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  再帰&amp;3項演算子なのにださい\n\t"
  :code: "function pyramid (n){\n\treturn (n==1\n\t\t?\"*\"\n\t\t:' '+pyramid(n-1).replace(/\\n/g,\"\\n
    \")+\"\\n\"+Array(n*2).join(\"*\"))\n}\nalert(pyramid(4))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1704'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1704
  :user_name: tomatsu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/02 12:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    function p(n){
     function k(m,c) if (m &gt; 0) for (i:1..m) print(c)
     for (i:1..n) { k(n-i,' '); k(2*i-1,'*');  println()}
    }
    p(10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1767'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1767
  :user_name: PHO
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/69/
  :language: Haskell
  :time: 2007/08/03 04:48 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  nobsun さんの point-free なコードをもっと読めなくしてみた。\n\t"
  :code: |
    module Main where{import System;(&gt;&lt;)=zipWith;(|-|)=unlines;(%%)=take;main=(@@@);(
    (##))=putStr;(??)=getArgs;($$)=(.);(@@@)=(??)&gt;&gt;=(##)$$(|-|)$$(@@)$$(&gt;&lt;)(?)((&lt;&gt;)((
    " ")?)"")$$(@@)$$(!-)(%%)((&lt;&gt;)("**"?)"*")$$read$$(#);(&lt;&gt;)=iterate;(!-)=flip;(#)=(
    head);(@@)=reverse;(?)=(++)}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1834'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1834
  :user_name: hirose31
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/334/
  :language: PostScript
  :time: 2007/08/04 16:41 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    %!
    /triangle {
      gsave
        currentpoint translate
        newpath
          0 0 moveto
          dup 0
          lineto
          dup 2 div exch
          lineto
        closepath
        stroke
      grestore
    } def

    1 setlinewidth
    0 0 moveto
    200 triangle
    showpage
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1880'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1880
  :user_name: naoya_t
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/08/05 15:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  月並みですが\n\t"
  :code: "BEGIN {\n\tn = ARGV[1]\n\tfor (i=1; i&lt;=n; i++) {\n\t\tfor (j=i; j&lt;n;
    j++) printf \" \";\n\t\tfor (j=1; j&lt;i+i; j++) printf \"*\";\n\t\tprintf \"\\n\";\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1976'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1976
  :user_name: miau
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/363/
  :language: Ruby
  :time: 2007/08/07 08:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  イテレータや数値リテラルを使わない感じで。\n\t"
  :code: |
    n = 4
    s = ' ' * n
    n.times {
      s.sub!(/ /, '*')
      puts s.reverse.chop + s
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1977'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1977
  :user_name: miau
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/363/
  :language: Other
  :time: 2007/08/07 08:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  どうせならこっちのほうが面白かったかな。\n\t"
  :code: |
    n = 4
    s = ' ' * n
    while s.sub!(/ /, '*')
      puts s.reverse.chop + s
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1986'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/1986
  :user_name: jz5
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/07 12:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    Public Sub PrintPyramid(ByVal count As Integer)
        For i As Integer = 0 To count - 1
            Console.WriteLine(Space(count - i - 1) &amp; New String("*", i * 2 + 1))
        Next
    End Sub
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2003'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2003
  :user_name: maeda.na
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/368/
  :language: Ruby
  :time: 2007/08/08 04:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  初投稿。書いてから他の投稿見てみたら冗長なのが恥ずかしくなったけどあえてそのまま投げます\n\t"
  :code: |
    n=1
    max=ARGV[0].to_i
    max.downto(0) { |i|
      i.times { print " " };(n*2-1).times { print "*" };print "\n"
      n = n+1
    }
  :tags:
  - pyramid
  :references:
    :url: 
    :title: 
- :id: '2059'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2059
  :user_name: カノエ
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/376/
  :language: SQL
  :time: 2007/08/10 14:46 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    drop table if exists num_chars;
    create table num_chars(id int not null);
    insert into num_chars values (0), (1), (2), (3), (4), (5), (6), (7), (8), (9);

    drop table if exists nums;
    create table nums as (
      select n1.id + (n2.id * 10) + (n3.id * 100) as id
      from num_chars n1, num_chars n2, num_chars n3);

    set @n = 4;
    select
      concat(s, a, s) as pyramid
    from (
      select
        rpad(' ', (m - n) / 2, ' ') as s
      , rpad('*', n, '*') as a
      from (
        select
          @n * 2 - 1 as m
        , id * 2 - 1 as n
        from nums
        where id &gt;= 1
          and id &lt;= @n
      ) as n
    ) as p
    ;
  :tags:
  - MySQL5.0
  :references:
    :url: 
    :title: 
- :id: '2082'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2082
  :user_name: miyamuko
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/382/
  :language: xtal
  :time: 2007/08/12 16:25 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  to_a が2回でるのがダサいです。\n\t"
  :code: |
    space: [" "].cycle;
    star:  ["*"].cycle;

    n: 4;
    n.times.map(|i| i + 1){
        (space.take(n - it).to_a ~ star.take(it * 2 - 1).to_a).join("").p;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2100'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2100
  :user_name: higeorange
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/194/
  :language: Io
  :time: 2007/08/13 06:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "pyramid := method(n,\n    n repeat(i,\n        writeln(\"*\" repeated(2
    * i + 1) alignCenter(2 * n + 1, \" \")) \n    )   \n)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2111'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2111
  :user_name: susu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/218/
  :language: C
  :time: 2007/08/13 13:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  逆さまでも途中からでも。……負数は微妙。\n\t"
  :code: "#include &lt;stdio.h&gt;\nvoid pyramid(int x,int y)//x開始段　y終了段\n{   int
    i,j,n;\n    int z,space,req,block;\n    \n    if (x&lt;0 || y&lt;0)\n    {   if(x&lt;0
    &amp;&amp; y&lt;0)  x=abs(x),y=abs(y) ;    \n        else if(x&lt;0)    y-=x,x=1
    ;\n        else            x-=y,y=1 ;\n    }\n        \n    if(x&lt;y) i=y-x+1,z=-1,req=1;\n
    \   else    i=x-y+1,z=+1,req=i;\n    space=i,block=x;\n    \n    for(i;  0&lt;i;
    \ i--)\n    {   for(n=space; req&lt;n; n--)    {putchar(' ');}\n        for(j=block*2-1;
    0&lt;j; j--)  {putchar('*');}\n        req-=z ;\n        block-=z ;\n        putchar('\\n');\n
    \   }\n}\n\nint main(void)\n{   pyramid(1,5);                    putchar('\\n');\n
    \   pyramid(5,2);pyramid(1,5);        putchar('\\n');\n    pyramid(-7,-3);pyramid(-3,-7);
    \   putchar('\\n');\n    pyramid(-3,3);pyramid(3,-3); \n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2366'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2366
  :user_name: Felio
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/354/
  :language: Groovy
  :time: 2007/08/21 15:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    def print_pyramid(n) {
      1.upto(n) { x -&gt;
        print ' ' * (n-x)
        println '*' * (2*x-1)
      }
    }

    print_pyramid(10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2423'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2423
  :user_name: makapin
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/86/
  :language: Perl
  :time: 2007/08/22 19:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">素直に実装</pre>\n\t"
  :code: |
    sub make_pyramid{
      my $n = shift;
      print ' ' x ( $n - $_ ), '*' x (2 * $_ - 1), "\n" for 1..$n;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2662'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2662
  :user_name: mad
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/418/
  :language: Haskell
  :time: 2007/08/30 02:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">手続き言語っぽくforループで。</pre>\n\t"
  :code: |
    import Data.Traversable

    pyramid :: Int -&gt; IO ()
    pyramid n =
        for (reverse [0..(n-1)]) (\y -&gt;
            for [0..(n-1)*2] (\x -&gt;
                if y &lt;= x &amp;&amp; x &lt;= (n-1)*2  - y
                   then putChar '*'
                   else putChar ' '
            )
         &gt;&gt; putChar '\n'
        )
     &gt;&gt; return ()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2701'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2701
  :user_name: ari
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/421/
  :language: Batchfile
  :time: 2007/08/30 18:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">バッチでも作ってみました。\r\n適当なバッチ名(pyramid.cmd)で保存して、コマンドプロンプトでこのように実行してみてください。\r\npyramid.cmd
    * 10\r\n＃別途 90度回転したバージョンもあります。</pre>\n\t"
  :code: |
    @setlocal ENABLEDELAYEDEXPANSION
    @if %2 leq 0 exit /b
    @set sp=
    @for /L %%i in (1,1,%2) do @(set sp=!sp! )
    @echo %sp%%1
    @set /A count=%2-1
    @call "%~dpnx0" %1** %count%
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2946'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/2946
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/09/08 21:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;string&gt;

    using namespace std;

    void pyramid(int n)
    {
        const string s(string(n - 1, ' ') + string(n * 2 - 1, '*'));
        for(int i = 0; i &lt; n; ++i)
        {
            cout &lt;&lt; s.substr(i, n + i) &lt;&lt; endl;
        }
    }

    int main(int, char* [])
    {
        pyramid(4);

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3131'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3131
  :user_name: BigFatCat
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/444/
  :language: Ruby
  :time: 2007/09/20 14:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">なんか被ってるけど気にしない。\r\n右側のスペースは入れたほうがいいのかな？\r\nどうせ見えないから無視したけど。</pre>\n\t"
  :code: |
    def pyramid(n)
      n.times do |i|
        str = " " * (n - (i + 1))
        str &lt;&lt; "*" * (i * 2 + 1)
        puts str
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3298'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3298
  :user_name: matyr
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/343/
  :language: 
  :time: 2007/10/08 23:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t   * の代わりに半径１ピクセルの円を描きます。\n\t"
  :code: |
    タートル：ピラミッド描く＝
    「｜n　歩幅｜「歩幅＝＝未定義」！なら「歩幅＝20」実行。
    　！ペンなし　0 200 位置。
    　「｜i｜「！1 円；ペンなし　(歩幅)歩く」！(i*2-1)繰り返す　0(歩幅*-1)移動する　180 右回り」！(n)繰り返す」。
    タートル！作る　19 ピラミッド描く。
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3306'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3306
  :user_name: susu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/218/
  :language: C
  :time: 2007/10/10 12:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    void pyramid(int x)
    { int space,block,i,n;

      for(space=x-1, block=1, i=x;
          0&lt;i;
          space--, block+=2, i--)
      {
          for(n=space; 0&lt;n; n--) putchar(' ');
          for(n=block; 0&lt;n; n--) putchar('*');
          putchar('\n');
      }
    }

    int main()
    { pyramid(4);}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3539'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3539
  :user_name: Yusuke.M
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/13/
  :language: FORTRAN
  :time: 2007/10/27 09:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">もっとシンプルな書き方があったら教えてください。</pre>\n\t"
  :code: |
    program main
          call pyramid(1)
          write(*,*)
          call pyramid(2)
          write(*,*)
          call pyramid(3)
          write(*,*)
          call pyramid(4)
          write(*,*)
          call pyramid(5)
          end

          subroutine pyramid(height)
          integer width, height, w
          w = (height - 1)
          width = w * 2 + 1
          do i = 1, height
             call draw(' ', w - i + 1)
             call draw('*', i - 1)
             write(*, '(a$)') '*'
             call draw('*', i - 1)
             call draw(' ', w - i + 1)
             write(*,*)
          end do
          end

          subroutine draw(c, count)
          character c
          integer count
          do i=1, count
             write(*, '(a$)') c
          end do
          end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3544'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3544
  :user_name: yasu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/480/
  :language: Perl
  :time: 2007/10/28 17:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">printfの機能を使って。</pre>\n\t"
  :code: |
    #! /usr/bin/perl

    use strict;
    use warnings;

    sub makePyramid
    {
      my $height = shift || 4;
      foreach my $i (1..$height) {
        printf "%*s\n", $height + $i - 1, "*"x($i*2 - 1);
      }
    }

    makePyramid(shift);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3741'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3741
  :user_name: fujidig
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/07 04:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
        call PrintPyramid val( input( "ピラミッドの段数を入力してください", "4" ) );
        endmacro;

    PrintPyramid:
        ##i = 0;
        while( ##1 &gt; ##i ) {
            ##j = ##1 - 1 - ##i;
            while ( ##j &gt; 0 ) {
                insert " ";
                ##j = ##j - 1;
            }
            ##j = ##i * 2 + 1;
            while ( ##j &gt; 0 ) {
                insert "*";
                ##j = ##j - 1;
            }
            insert "\n";
            ##i = ##i + 1;
        }
        return;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3834'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3834
  :user_name: susu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2007/11/11 01:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    let pyramid n =
      for i=1 to n do
        Printf.printf "%*s\n" (n+i-1) (String.make (i*2-1) '*')
      done;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3903'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3903
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/12 09:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">なでしこでなるべく短く。\r\n同じ文字を並べる関数がないのと、GUI版では表示すると必ず改行が入ってしまうので、\r\nこうなってしまいます。</pre>\n\t"
  :code: |
    10のピラミッドを表示
    ●ピラミッド(nの)
    　　mとは文字列="*";cとは整数=(2*n-1);tとは配列
    　　(n)回;配列追加(t,文字列センタリング(m,c));m=m&amp;"**"
    　　戻る(t)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3909'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3909
  :user_name: nantan
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/535/
  :language: Java
  :time: 2007/11/12 09:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Javaで書いてみました。</pre>\n\t"
  :code: |
    public class Pyramid {
        public static void main(String[] args) {
            int j, n = 100;
            for (int i = 1; i &lt;= n; i++) {
                j = 0;
                while (j++ &lt; (n - i)) System.out.print(" ");
                j = 0;
                while (j++ &lt; i * 2 -1) System.out.print("*");
                j = 0;
                while (j++ &lt; (n - i)) System.out.print(" ");
                System.out.println("");
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3944'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/3944
  :user_name: Psychs
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/554/
  :language: Objective
  :time: 2007/11/13 12:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">完全に C ですが。</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    void print_pyramid(int n)
    {
      int i, j;
      for (i=0; i&lt;n; i++) {
        for (j=n-i-2; j&gt;=0; j--) putchar(' ');
        for (j=i*2; j&gt;=0; j--) putchar('*');
        puts("");
      }
    }

    int main(int argc, char** argv)
    {
      print_pyramid(4);
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4370'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/4370
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/23 11:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ver.1.50047でリフレインが追加されたのでそれで。</p>\n\n\t"
  :code: |
    10のピラミッドを表示
    ●ピラミッド(nの)
    　　cとは整数=(2*n-1);tとは配列
    　　(n)回;配列追加(t,文字列センタリング(リフレイン("*",2*回数-1),c));
    　　戻る(t)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4746'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/4746
  :user_name: pooq
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/11 05:34 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">   pyramid 4\r\n   *   \r\n  ***  \r\n *****
    \r\n*******\r\n</pre>\n\t"
  :code: |
    pyramid=.3 :'(|:(i.-y),:&gt;:+:i.y)#'' *'''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4766'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/4766
  :user_name: omoikani
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/11 19:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    fun pyramid n =
    let
      open StringCvt

      fun f x = (padLeft #" " (n + x - 1) o padRight #"*" (x * 2 - 1)) ""
    in
      (app println o map f o List.tabulate) (n, fn x =&gt; x + 1)
    end

    val _ = pyramid 4
  :tags:
  - SML#
  :references:
    :url: 
    :title: 
- :id: '5078'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5078
  :user_name: saws
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/642/
  :language: Ruby
  :time: 2007/12/31 19:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  目的の配列を生成したあと文字列で出力. そこは冗長だったかも. 一応なone-lineで. \n\t"
  :code: |
    def gen_pyramid(n)
      Array.new(n){|i|
        [2*i+1, n-i-1]
      }.map{|i, j|
        SPC*j + SYMBOL*i + SPC*j
      }.join("\n")
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5157'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5157
  :user_name: szktty
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/648/
  :language: Other
  :time: 2008/01/04 06:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Mac OS X (PowerPC 32bit) アセンブリで普通に。</p>\n\n\t"
  :code: "    ;; Mac OS X (PowerPC 32bit)\n    ;; % as -o pyramid.o pyramid.s &amp;&amp;
    gcc pyramid.o -o pyramid\n    .machine    ppc\n    .globl      _main\n\n_main:\n
    \   li      r6, 8               ; 高さ n\n    li      r7, 0               ; 出力中の行数
    i (0-)\n\n_print_line:\n    ;; 空白の数 = n-i-1\n    sub     r8, r6, r7\n    subi
    \   r8, r8, 1\n    cmpli   cr7, r8, 0\n    bgtl    cr7, _print_spaces  ; サブルーチン\n\n
    \   ;; 星の数 = 辺の長さ - 空白の数 * 2\n    ;;     = 2n-1 - 2(n-i-1) = 2i+1\n    mulli   r8,
    r7, 2\n    addi    r8, r8, 1\n    cmpli   cr7, r8, 0\n    bgtl    cr7, _print_stars
    \  ; サブルーチン\n\n    ;; 改行の出力\n    li      r4, hi16(lf)\n    addi    r4, r4, lo16(lf)\n
    \   bl      _print_char         ; サブルーチン\n\n    ;; 繰り返し\n    addi    r7, r7, 1\n
    \   cmpl    cr7, r6, r7\n    bne     cr7, _print_line\n    \n    ;; sys_exit()\n
    \   li      r3, 0\n    li      r0, 1\n    sc\n\n_print_spaces:\n    ;; 出力する文字列（スペース）の準備\n
    \   li      r4, hi16(space)\n    addi    r4, r4, lo16(space)\n\n    ;; リンクレジスタをスタックに退避\n
    \   mflr    r9              ; リンクレジスタを r9 にコピー\n    stwu    r9, -4(r1)\n    bl
    \    _print_char      ; サブルーチン\n    lwzu    r9, 0(r1)\n    mtlr    r9              ;
    r9 をリンクレジスタにコピー\n    addi    r1, r1, 4\n\n    subi    r8, r8, 1\n    cmpli   cr7,
    r8, 0\n    bgt     cr7, _print_spaces\n\n    ;; サブルーチンから戻る\n    blr\n\n_print_stars:\n
    \   ;; 出力する文字列（アスタリスク）の準備\n    li      r4, hi16(star)\n    addi    r4, r4, lo16(star)\n\n
    \   ;; リンクレジスタをスタックに退避\n    mflr    r9              ; リンクレジスタを r9 にコピー\n    stwu
    \   r9, -4(r1)\n    bl      _print_char     ; サブルーチン\n    lwzu    r9, 0(r1)\n
    \   mtlr    r9              ; r9 をリンクレジスタにコピー\n    addi    r1, r1, 4\n\n    subi
    \   r8, r8, 1\n    cmpli   cr7, r8, 0\n    bgt cr7, _print_stars\n\n    ;; サブルーチンから戻る\n
    \   blr\n\n;; 一文字を出力する\n;; r4 に文字列のアドレスをセットしておく\n_print_char:\n    ;; スタックに退避\n
    \   subi    r1, r1, 4\n    stw     r6, 0(r1)\n    subi    r1, r1, 4\n    stw     r7,
    0(r1)\n    subi    r1, r1, 4\n    stw     r8, 0(r1)\n\n    ;; sys_write()\n    li
    \     r3, 1           ; 標準出力\n    li      r5, 1           ; 出力する文字列の長さ\n    li
    \     r0, 4           ; sys_write\n    sc                      ; 呼び出し\n\n    ;;
    スタックから復帰\n    lwz     r8, 0(r1)\n    addi    r1, r1, 4\n    lwz     r7, 0(r1)\n
    \   addi    r1, r1, 4\n    lwz     r6, 0(r1)\n    addi    r1, r1, 4\n\n    ;;
    サブルーチンから戻る\n    blr\n\n    \n    .data\n    .align 2\n\nspace:\n    .asciz      \"
    \"\n\nstar:\n    .asciz      \"*\"\n\nlf:\n    .asciz      \"\\n\"\n"
  :tags:
  - Assembly
  - MacOSX
  - PowerPC
  :references:
    :url: /web/20100606060645/http://www.nk.rim.or.jp/~jun/ppcasm/ppcasm00.html
    :title: 玄箱でアセンブリ
- :id: '5716'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5716
  :user_name: susu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/218/
  :language: Scheme
  :time: 2008/02/09 16:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>短く出来たのになんだか分からない</p>\n\n\t"
  :code: |
    (define (pyramid n)
      (do ((i 1 (+ i 1))) ((= i (+ n 1)) (if #f #t))
        (format #t "~v,,,' a~v,,,'*@a" (- n i) "" (* i 2) "\n")))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '5760'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5760
  :user_name: まさぽん
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/711/
  :language: C
  :time: 2008/02/15 06:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あまり工夫してません。\r\n\r\n実行例:\r\n$ ./a.out 4\r\n
    \  *\r\n  ***\r\n *****\r\n*******\r\n</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    main(int argc, char **argv){
        long lines = strtol(argv[1], NULL, 10), i;
        char *stars = malloc(lines * 2), format[15], *p = stars;

        for(i = 0; i &lt; lines; i++, *p++ = '*'){
            *p++ = '*';
            *p = '\0';
            sprintf(format, "%%%ds\n", lines + i);
            printf(format, stars);
        }
        free(stars);
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5764'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5764
  :user_name: silverwire
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/16 10:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ループで描画するよう書き換えてみました。再帰を利用した #2701よりも記述が長くなり\r\nましたが、擬似関数
    pyramidの第 2引数を変えることで、いろいろな文字列でピラミッド\r\nを描くことできます。\r\n\r\n  e.g.\r\n    C:\\&gt;pyramid
    4\r\n       *\r\n      ***\r\n     *****\r\n    *******\r\n\r\n遅延環境変数展開を利用しているので、Windows
    NTでは動作しません。Windows XPで動作\r\nを確認。</pre>\n\t"
  :code: "@echo off\n  setlocal\n    echo %1|findstr /r \"[^0-9]\" &gt;NUL 2&gt;&amp;1\n
    \   if %ERRORLEVEL% equ 0 (call :usage &amp; goto :EOF)\n\n    call :pyramid %1
    *\n  endlocal\ngoto :EOF\n\n:usage\n  setlocal\n    echo %~n0 [NUMBER]\n  endlocal\ngoto
    :EOF\n\n:pyramid\n  setlocal enabledelayedexpansion\n    set s=\n    set t=%2\n\n
    \   for /l %%i in (%1,-1,1) do (\n      for /l %%j in (2,1,%%i) do set s=!s! \n
    \     echo !s!!t!\n      set s=\n      set t=%2!t!%2\n    )\n  endlocal\ngoto
    :EOF\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5775'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5775
  :user_name: よしだあつし
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/720/
  :language: Ruby
  :time: 2008/02/18 14:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>奇数っていうことに気づくまで意外と時間がかかった。</p>\n\n\t"
  :code: |
    def delta(n)
      (1..n).to_a.map{|i| ("*" * ((2*i)-1)).center(n*2) }.join("\n")
    end

    puts delta(4)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5776'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5776
  :user_name: horiuchi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/570/
  :language: Other
  :time: 2008/02/19 01:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Forthで書いてみました。\r<br><br>実行結果\r<br>4 PIRAMID\r<br>   *\r<br>  ***\r<br> *****\r<br>*******\r<br>   ok\n\t"
  :code: |
    : BAR ( n -- )
    2 * 1 +
    0 DO ." *" LOOP ;

    : ROW ( n r -- )
    DUP ROT ROT
    - 1 -
    DUP 0 = IF
        DROP
    ELSE
        0 DO SPACE LOOP
    THEN
    BAR ;

    : PIRAMID ( n -- )
    DUP 0 DO DUP I ROW CR LOOP DROP ;
  :tags:
  - Forth
  :references:
    :url: 
    :title: 
- :id: '5820'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5820
  :user_name: queck
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/02/21 03:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Factor です。</p>\n\n\t"
  :code: |
    USING: kernel io math ;

    : piramid-line ( star-num space-num -- )
      [ " " write ] times
      [ "*" write ] times
      nl ;

    : (piramid) ( star-num space-num -- )
      dup -1 =
      [ 2drop ]
      [ 2dup piramid-line
        1- swap 2 + swap (piramid) ]
      if ;

    : piramid ( n -- )
      1- 1 swap (piramid) ;

    ! example
    5 piramid
  :tags:
  - Factor
  :references:
    :url: 
    :title: 
- :id: '5822'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5822
  :user_name: takuya_1st
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/725/
  :language: PHP
  :time: 2008/02/21 06:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  STR_PAD_BOTH 便利ですね。\r\n再帰はArray_Mapもいいかも\n\t"
  :code: |
    function pyramid($n,$i=1){
        print( str_pad( str_repeat("*",$i),$n*2, " ", STR_PAD_BOTH ).PHP_EOL );
        return ( ($i+2)/2&gt;$n ) ? null: pyramid( $n,2+$i );
    }
    pyramid(5);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5930'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/5930
  :user_name: zubenalt
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/747/
  :language: Other
  :time: 2008/03/04 11:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Adaで適当に\n\t"
  :code: |
    with Ada.Text_Io;
    procedure Pyramid is
       procedure Pyramid(Size:Natural) is
       begin
          for I in 1..Size loop
             Ada.Text_Io.Put_Line((1..Size-I=&gt;' ')&amp;(1..I*2-1=&gt;'*'));
          end loop;
       end Pyramid;
    begin
       Pyramid(4);
    end Pyramid;
  :tags:
  - Ada
  :references:
    :url: 
    :title: 
- :id: '6121'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6121
  :user_name: reeya2007
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/774/
  :language: Perl
  :time: 2008/03/31 07:04 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  \n\t"
  :code: "#!/usr/local/bin/perl\nuse strict;\n\nfor(my $i=1;$i&lt;=$ARGV[0];$i++){\n
    \       my $loop = 2*$i-1;\n\n        for (1 .. $ARGV[0]-$i){\n                print
    \" \";\n        }\n\n        for (1 .. $loop){\n                print \"*\";\n
    \       }\n \n        print \"\\n\";\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6198'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6198
  :user_name: pooq
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/606/
  :language: R
  :time: 2008/04/22 08:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">substringの引数がベクトルでもいいことがわかったので\r\nこれでピラミッドの問題をやってみた。</pre>\n\t"
  :code: |
    pyramid &lt;- function(n,s="*"){
      a &lt;- paste(rep(c(" ",s),c(n-1,n*2-1)),collapse="")
      writeLines(substring(a,1:n,1:n*2+n-2))
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6200'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6200
  :user_name: pooq
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/04/22 12:05 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">「/.」は行列の要素を斜めに切り出す。\r\n   ]a=.4 4$&gt;:i.16\r\n
    1  2  3  4\r\n 5  6  7  8\r\n 9 10 11 12\r\n13 14 15 16\r\n   &lt;/.a\r\n+-+---+-----+---------+-------+-----+--+\r\n|1|2
    5|3 6 9|4 7 10 13|8 11 14|12 15|16|\r\n+-+---+-----+---------+-------+-----+--+\r\n\r\n
    \  (2#4)$'*' 　　　　 n x nの行列をつくり\r\n****\r\n****\r\n****\r\n****\r\n\r\n   [/.(2#4)$'*'　　　斜めに切り出し\r\n*
    \  \r\n**  \r\n*** \r\n****\r\n*** \r\n**  \r\n*   \r\n\r\n   |:[/.(2#4)$'*'　　転置して\r\n*******\r\n
    ***** \r\n  ***  \r\n   *   \r\n\r\n   |.|:[/.(2#4)$'*'　反転する\r\n   *   \r\n  ***
    \ \r\n ***** \r\n*******\r\n</pre>\n\t"
  :code: |
    pyramid=:3 :'|.|:[/.(2#y)$''*'''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6210'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6210
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: Groovy
  :time: 2008/04/24 00:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Felioさんのを参考に。</p>\n\n\t"
  :code: |
    def print_pyramid(n){
        (1..n).each{  x -&gt;
            def text = '*' * (2*x - 1)
            println text.center(2*n + 1)
        }
    }

    print_pyramid(10)
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '6458'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6458
  :user_name: shinonome
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/822/
  :language: C
  :time: 2008/06/10 01:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>再帰で。</p>\n\n\t"
  :code: "#include &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nvoid
    pyramid(int i, int j)\n{\n    char asta[j];\n    \n    if(!i) return;\n    \n
    \   memset(asta, '*', sizeof(asta));\n    printf(\"%*.*s\\n\", i+j-1, j, asta);\n
    \   \n    pyramid(i-1, j+2);\n}\n\nint main(int argc, char **argv)\n{\n    pyramid(atoi(argv[1]),
    1);\n    \n    return EXIT_SUCCESS;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6507'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6507
  :user_name: genzou
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/15 00:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Felioさんの回答を参考にしました。</p>\n\n\t"
  :code: |
    def print_pyramid( n ){
        (1..n).each{
            def text = "*"*(2*it - 1)
            println text.center(2*n + 1)
        }
    }

    print_pyramid(10)
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '6561'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6561
  :user_name: syat
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/766/
  :language: BASIC
  :time: 2008/06/23 17:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>BASICで短さに挑戦。66B</p>\n\n\t"
  :code: |
    1 input n:for i=1 to n:?string$(n-i," ");string$(i*2-1,"*"):next
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6834'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/6834
  :user_name: 匿名
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/07/25 16:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">#!/bin/sh\r\nn=${1:-4}\r\nb='*'\r\nfor i in
    $(seq 0 $n); do\r\n\techo \"$(printf \"%$(($i - $n - 1))s\")$b\"\r\n\tb=\"${b}**\"\r\ndone</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7476'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/7476
  :user_name: Songmu
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/763/
  :language: Perl
  :time: 2008/08/29 00:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ワンライン。48バイト</pre>\n\t"
  :code: |
    print" "x($n-$_)."*"x($_*2-1)."\n"for 1..($n=&lt;&gt;)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7581'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/7581
  :user_name: lunlumo
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/813/
  :language: Pascal
  :time: 2008/09/06 09:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n</div>\n\t"
  :code: |
    program Pyramid;
    var
        i        :Integer;
        height    :Integer;
        error    :Word;

    procedure WriteStep(step:Integer);
    var
        j    :Integer;
    begin
        for j := -height + 1 to height - 1 do
            if Abs(j) &lt;= height - step then
                Write('*')
            else
                Write(' ');
        WriteLn
    end;

    begin
        Val(ParamStr(1),height,error);
        if error &lt;&gt; 0 then
            WriteLn('invalid arguments')
        else
            for i := height downto 1 do
                WriteStep(i)
    end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8167'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8167
  :user_name: taninsw
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/14 12:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>シンプルイズなんちゃら</p>\n\n\t"
  :code: |
    import System.Environment
    pylamid n = unlines $ map (\x-&gt;spc n x ++ ast x ++ spc n x) [1..n]
      where ast lv = replicate (lv*2 -1) '*'
            spc n lv = replicate (n-lv)' '

    main = getArgs &gt;&gt;= putStr.pylamid.read.head
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8168'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8168
  :user_name: taninsw
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/14 06:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>右の空白いりませんでしたね。</p>\n\n\t"
  :code: |
    import System.Environment
    pylamid n = unlines $ map (\lv-&gt; replicate (n-lv) ' ' ++ replicate (lv*2 -1) '*') [1..n]
    main = getArgs &gt;&gt;= putStr.pylamid.read.head
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8287'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8287
  :user_name: 割と普通
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/581/
  :language: C
  :time: 2009/01/06 05:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>LINQ的な何か。\r</p>\n<p>一応、ワンライナー的に</p>\n</div>\n\t"
  :code: |2
        class Program
        {
            static void Main(string[] args)
            {
                int n = 5;
                foreach( var str in Enumerable.Range(1, n).Select( (i) =&gt;  new string('　', n-i) + new string('＊', 2*i-1 )) ) Console.WriteLine(str);
                Console.ReadLine();
            }
        }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8463'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8463
  :user_name: fumokmm
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/856/
  :language: Groovy
  :time: 2009/02/05 11:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">いまさら投稿。\r\nwithの使い方ってこれでいいのかな？</pre>\n\t"
  :code: |
    def pyramidVertical(num) {
       (1..num).collect{ '*' * (it * 2 -1) }.with{
          delegate*.center(delegate*.size().max())
       }.join('\n')
    }

    println pyramidVertical(10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8555'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8555
  :user_name: doda
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/705/
  :language: Other
  :time: 2009/02/26 09:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>whitespaceで。</p>\n\n\t"
  :code: "                   \n    \n                           \n \n     \n                     \n
    \   \n                           \n \n     \n   \n                          \n
    \   \n              \n \n     \n   \n        \n   \n        \n                           \n
    \   \n                     \n    \n                        \n    \n                        \n
    \   \n                       \n    \n      \n      \n    \n            \n            \n
    \         \n \n \n           \n\n      \n       \n          \n \n        \n\n
    \       \n\n\n\n\n   \n \n  \n        \n                      \n \n    \n         \n
    \   \n             \n                      \n      \n                  \n \n    \n
    \        \n                  \n    \n               \n    \n  \n    \n\n      \n
    \n \n          \n \n     \n     \n   \n           \n          \n \n    \n\n       \n
    \n\n \n\n\n    \n.\n"
  :tags:
  - whitespace
  :references:
    :url: 
    :title: 
- :id: '8624'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8624
  :user_name: doda
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/705/
  :language: Other
  :time: 2009/03/10 11:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Befungeで。これくらいなら何とか書けます。</p>\n<p>Whitespaceもですが、スタック言語なのにrotate命令が無いのが悲しいです。\nこれがあればput/get命令(Whitespaceの場合はヒープアクセス)を使わずに書けるのですが。</p>\n<p>動作確認は以下のページでしました。</p>\n\n\t"
  :code: |
    v                v,&lt;
    &gt;" :rebmuN tupnI"&gt;:|
         vg0&lt;  &gt;   v  &lt;&amp;
    &gt;7*,v&gt;-v1&gt;4 *v :&gt;p^:
    6 v-1*2&lt;:8   ,  ^01&lt;
    |:&lt;+&lt; &gt;$^|:-1&lt;:_@
    &gt;19+,#^ #&lt;!^
  :tags:
  - Befunge
  :references:
    :url: /web/20100606060645/http://www.usamimi.info/~ide/programe/befunge93/index.html
    :title: Befungeインタープリタ
- :id: '8888'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/8888
  :user_name: vivisuke
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1039/
  :language: Other
  :time: 2009/05/04 07:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">言語：ViViScript</pre>\n\t"
  :code: |
    $N = 4;
    for($i = 0; $i &lt; $N; ++$i)
        cout &lt;&lt; " ".repeat($N - $i - 1) &lt;&lt; "*".repeat($i*2 + 1) &lt;&lt; "\n";
  :tags:
  - ViViScript
  :references:
    :url: 
    :title: 
- :id: '9248'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9248
  :user_name: nk.
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1075/
  :language: Perl
  :time: 2009/06/26 16:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ゴルフ場と勘違いしてるのか、ワンライナーしてるやつはなんなの。\n\t"
  :code: |
    #!/usr/local/bin/perl
    use strict;

    sub pyramid($$){
        my @q = @_;
        return $q[0]--?$"x$q[0].'*'x(2*++$q[1]-1).$/.pyramid(@q):'';
    }

    while(&lt;&gt;){
        last if 'q' eq lc substr$_,0,1;
        print pyramid int$_, 0;
    }
  :tags:
  - 再帰
  :references:
    :url: 
    :title: 
- :id: '9289'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9289
  :user_name: ところてん
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/166/
  :language: PHP
  :time: 2009/07/05 20:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PHP勉強中。　centerタグで横着をする。</pre>\n\t"
  :code: |
    &lt;?php
    print &lt;&lt;&lt; END_DOC
    &lt;HTML&gt;
    &lt;HEAD&gt;&lt;title&gt;doukaku05&lt;/title&gt;
    &lt;/HEAD&gt;&lt;BODY&gt;
    END_DOC;

    function doukaku05($n)
    {
        print "&lt;center&gt;";
        for($i = 1; $i &lt;= $n; $i++){
            print str_repeat("*", $i*2 - 1)."&lt;br&gt;";
        }
        print "&lt;/center&gt;";
    };

    doukaku05(4);

    print &lt;&lt;&lt; END_DOC
    &lt;/BODY&gt;
    &lt;/HTML&gt;
    END_DOC;
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9494'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9494
  :user_name: horiuchi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/570/
  :language: ActionScript
  :time: 2009/08/20 02:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>ActionScript のカバレッジ上げ</p>\n</div>\n\t"
  :code: |
    class Pyramid
    {
        public static function print(n:int):void {
            var duplicate:Function = function(s:String, count:int):String {
                var res:String = "";
                for (var i:int = 0; i &lt; count; i++) res += s;
                return res;
            };
            for (var i:int = 1; i &lt;= n; i++) {
                var line:String = duplicate(" ", n - i) + duplicate("*", 2 * i - 1);
                trace(line);
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9521'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9521
  :user_name: Wiles
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1094/
  :language: C
  :time: 2009/08/26 22:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>単純に……\nついでに逆さ・横向きも。</p>\n\n\t"
  :code: "#include&lt;stdio.h&gt;\n\nvoid pyramid1(int n)\n{\n    int i, j;\n    \n
    \   for(i = 0; i &lt; n; i++)\n    {\n        for(j = n - i - 1; j &gt; 0; j--)\n
    \       {\n            putchar(' ');\n        }\n        for(j = 0; j &lt; i *
    2 + 1; j++)\n        {\n            putchar('*');\n        }\n        putchar('\\n');\n
    \   }\n}\n\nvoid pyramid2(int n)\n{\n    int i, j;\n    \n    for(i = n - 1; i
    &gt;= 0; i--)\n    {\n        for(j = n - i - 1; j &gt; 0; j--)\n        {\n            putchar('
    ');\n        }\n        \n        for(j = 0; j &lt; i * 2 + 1; j++)\n        {\n
    \           putchar('*');\n        }\n        putchar('\\n');\n    }\n}\n\nvoid
    pyramid3(int n)\n{\n    int i, j;\n    \n    for(i = 0; i &lt; n; i++)\n    {\n
    \       for(j = 0; j &lt; n - i - 1; j++)\n        {\n            putchar(' ');\n
    \       }\n        for(j = 0; j &lt; i + 1; j++)\n        {\n            putchar('*');\n
    \       }\n        putchar('\\n');\n    }\n    for(i = n - 1; i &gt; 0; i--)\n
    \   {\n        \n        for(j = 0; j &lt; n - i; j++)\n        {\n            putchar('
    ');\n        }\n        for(j = 0; j &lt; i; j++)\n        {\n            putchar('*');\n
    \       }\n        putchar('\\n');\n    }\n}\n\nvoid pyramid4(int n)\n{\n    int
    i, j;\n    \n    for(i = 0; i &lt; n; i++)\n    {\n        for(j = 0; j &lt; i
    + 1; j++)\n        {\n            putchar('*');\n        }\n        putchar('\\n');\n
    \   }\n    for(i = n - 1; i &gt; 0; i--)\n    {\n        for(j = i; j &gt; 0;
    j--)\n        {\n            putchar('*');\n        }\n        putchar('\\n');\n
    \   }\n}\n\nint main(void)\n{\n    int n, ch;\n    void (*pyramid_func[4])(int)
    = {pyramid1, pyramid2, pyramid3, pyramid4};\n    printf(\"ピラミッドの段数を入力してください: \");\n
    \   scanf(\"%d\", &amp;n);\n    printf(\"[0]普通のピラミッド [1]逆さまのピラミッド\\n[2]左向きのピラミッド
    [3]右向きのピラミッド: \");\n    do\n    {\n        scanf(\"%d\", &amp;ch);\n    }while((0
    &gt; ch) || (3 &lt; ch));\n    \n    (*pyramid_func[ch])(n);\n    \n    return
    0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9736'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9736
  :user_name: ポケット
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/828/
  :language: Perl
  :time: 2009/12/24 10:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "use strict;\nuse warnings;\n\nsub piramid {\n        my $n = shift;\n        for
    (my $i = 1; $i &lt;= $n; $i++) {\n                printf(\"%s%s\\n\", \" \" x
    ($n - $i), \"*\" x ($i * 2 -1));\n        }   \n}\n\n&amp;piramid($ARGV[0])\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9807'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9807
  :user_name: horiuchi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/570/
  :language: Other
  :time: 2010/01/12 06:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Google Go で書いてみました。</p>\n<p>単純に、for文で出力するだけですが。</p>\n\n\t"
  :code: |
    package main

    import "fmt"

    func pyramid(n int) {
            for r := 0; r &lt; n; r++ {
                    for i := 1; i &lt; n - r; i++ {
                            fmt.Print(" ")
                    }
                    for i := 0; i &lt; 2 * r + 1; i++ {
                            fmt.Print("*")
                    }
                    fmt.Print("\n")
            }
    }

    func main() {
            pyramid(4);
    }
  :tags:
  - Go
  :references:
    :url: 
    :title: 
- :id: '9808'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9808
  :user_name: horiuchi
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/570/
  :language: Other
  :time: 2010/01/12 09:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Google Go で第2弾</p>\n<p>channelや、goroutineなどを使って書き直してみました。</p>\n\n\t"
  :code: |
    package main

    import "strings"

    func line_generate(n int, ch chan&lt;- string) {
            for i := 0; i&lt; n; i++ {
                    ch &lt;- (strings.Repeat(" ", n - i - 1) +
                            strings.Repeat("*", 2 * i + 1))
            }
            close(ch)
    }

    func pyramid(n int) {
            ch := make(chan string)
            go line_generate(n, ch)
            for line := range ch {
                    println(line)
            }
    }

    func main() {
            pyramid(4);
    }
  :tags:
  - Go
  :references:
    :url: 
    :title: 
- :id: '9854'
  :parent_id: '8'
  :url: http://ja.doukaku.org/comment/9854
  :user_name: gushwell
  :user_url: /web/20100606060645/http://ja.doukaku.org/user/1046/
  :language: C
  :time: 2010/01/24 02:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>String.PadLeftメソッドを利用しました。</p>\n\n\t"
  :code: |
    static void Pyramid(int n) {
        for (int i = 0; i &lt; n; i++) {
            string s = new string('*', i * 2 + 1);
            Console.WriteLine(s.PadLeft(n+i));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
