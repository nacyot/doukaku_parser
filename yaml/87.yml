---
:id: '87'
:title: 文字列のセンタリング
:comments:
- :id: '4089'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4089
  :user_name: nobsun
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/11/16 00:03 GMT
  :vote_count: '3'
  :vote_score: '1'
  :body: "\r\n\t  <div class=\"section\">\n<p>文字列を指定のカラム幅にセンタリング配置する関数を示してください。文字列の長さが指定した幅より長い場合には文字列の両端をできるだけ均等に切り落して指定幅に収めてください。1文字は1カラムに収まるものと仮定してかまいません。</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4120'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4120
  :user_name: dankogai
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/11/16 19:37 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>一番乗りかな？きわめてけれんみのない実装。\n</p>\n<p>Dan the Perl Monger\n</p>\n\n\n\n\t"
  :code: |
    #!/usr/local/bin/perl
    use strict;
    use warnings;

    sub center{
        my $str = shift;
        my $width = shift || 80;
        my $margin = int(($width - length($str))/2);
        return $str if $margin == 0;
        return " " x int($margin) . $str if $margin &gt; 0;
        substr($str, 0, -$margin, '');
        return substr($str, 0, $width);
    }

    chomp and print center($_, 72), "\n" for(&lt;&gt;)
    __END__
    0         1         2         3         4         5         6         7
    012345678901234567890123456789012345678901234567890123456789012345678901
    This line is intentionally longer than 72 chars to test center() works fine.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4121'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4121
  :user_name: dankogai
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/26/
  :language: Ruby
  :time: 2007/11/16 20:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>これまたけれんみのない、<a href=\"/web/20090317033045/http://ja.doukaku.org/comment/4120/\">#4120</a>と同様の実装。rubyらしくStringを拡張して格調高く。\n</p>\n<p>Dan
    the Occasional Rubyist\n</p>\n\n\n\n\t"
  :code: |
    class String
      def centered(width)
        width ||= 80
        margin = (width - self.length)/2;
        return self if margin == 0
        return " " * margin + self if margin &gt; 0
        self[-margin..margin-1]
      end
    end

    ARGF.readlines.each{|l| puts l.centered(72) }
    __END__
    0         1         2         3         4         5         6         7
    012345678901234567890123456789012345678901234567890123456789012345678901
    This line is intentionally longer than 72 chars to test String#centered works fine.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4122'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4122
  :user_name: dankogai
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/26/
  :language: diff
  :time: 2007/11/16 20:19 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>substr()二度もやるのは無駄じゃん。</p>\n<p>Dan the Lazier</p>\n\n\t"
  :code: |
    --- center.pl.orig      2007-11-17 04:35:53.000000000 +0900
    +++ center.pl   2007-11-17 05:17:39.000000000 +0900
    @@ -8,8 +8,7 @@
         my $margin = int(($width - length($str))/2);
         return $str if $margin == 0;
         return " " x int($margin) . $str if $margin &gt; 0;
    -    substr($str, 0, -$margin, '');
    -    return substr($str, 0, $width);
    +    return substr($str, -$margin, $width);
     }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4123'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4123
  :user_name: dankogai
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/26/
  :language: Python
  :time: 2007/11/16 21:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Pythonは組み込みで<code>str#center()</code>を持ってたりするので一番楽かも。\n</p>\n<p>Dan
    the Occasional Pythonista\n</p>\n<p>P.S. perl の while(&lt;&gt;)、RubyのARGV.readlinesの代わりってpythonでどう書くのかにゃ？\n</p>\n\n\n\n\t"
  :code: |
    #!/usr/bin/python

    def center_and_crop(str, width = 80):
        margin = (width - len(str))/2
        if margin &gt;= 0: return str.center(width)
        else:           return str[-margin:width-margin]

    if __name__ == '__main__':
      import sys
      for line in sys.stdin:
        print center_and_crop(line[:-1], 72)

    #         1         2         3         4         5         6         7
    #12345678901234567890123456789012345678901234567890123456789012345678901
    #This line is intentionally longer than 72 chars to test center_and_crop works \
    fine.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4124'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4124
  :user_name: naoto
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/572/
  :language: Scheme
  :time: 2007/11/17 00:02 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>初投稿です。\r\nアカウントを作ってログインしようとしたら This account is inactive.  と言われてしまいました。\r\n何でだろう。</p>\r\n\n\t"
  :code: "(use srfi-13)\r\n\r\n(define (string-pad-both string width)\r\n  (let* ((slen
    (string-length string))\r\n         (left (string-take string (quotient slen 2)))\r\n
    \        (right (string-drop string (quotient slen 2)))\r\n         (llen (quotient
    width 2))\r\n         (rlen (- width llen)))\r\n    (string-append\r\n     (string-pad
    left llen)\r\n     (string-pad-right right rlen))))\r\n\r\n(define (center string
    . args)\r\n  (string-pad-both string (get-optional args 80)))\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4126'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4126
  :user_name: naoto
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/572/
  :language: 
  :time: 2007/11/17 00:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ごめんなさい。ログインできました。\nメールが届いてるのに気づきませんでした。\n英語のメッセージを真面目に読んでいなかったせい？</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4127'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4127
  :user_name: naranja
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/11/17 01:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    import std.stdio;
    import std.string;
    import std.utf;

    string cropCenter(string str, uint width){
        auto wstr = toUTF16(str);
        int leftMargin = cast(int)(width - wstr.length) / 2;
        int rightMargin = cast(int)(width - wstr.length) - leftMargin;
        return (rightMargin &lt; 0) ?
               toUTF8(wstr[-leftMargin..($ + rightMargin)]) :
               (repeat(" ", leftMargin) ~ str ~ repeat(" ", rightMargin));
    }

    void main(){
        writefln(cropCenter("ほげら", 2));  //=&gt; "ほげ"
        writefln(cropCenter("ほげら", 1));  //=&gt; "げ"
        writefln(cropCenter("ほげ",   2));  //=&gt; "ほげ"
        writefln(cropCenter("ほげ",   1));  //=&gt; "ほ"
        writefln(cropCenter("ほげら", 5));  //=&gt; " ほげら "
        writefln(cropCenter("ほげら", 4));  //=&gt; "ほげら "
        writefln(cropCenter("ほげ",   5));  //=&gt; " ほげ  "
        writefln(cropCenter("ほげ",   4));  //=&gt; " ほげ "
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4128'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4128
  :user_name: SiroKuro
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/11/17 01:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C# だと PadReft っていう指定文字数になるまで空白文字を埋め込むメソッドがあります。\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            string[] texts = {
                "0123456789",
                "abc",
                "abcdefg",
                "abcdefghijklmn",
            };
            foreach(string text in texts) {
                Console.WriteLine(Centering(text, 10));
            }
        }
        static string Centering(string text, int width) {
            int margin = (int)((width - text.Length) / 2);
            if (margin == 0)
                return text;
            if (0 &lt; margin)
                return text.PadLeft(margin + text.Length);
            return text.Substring(-margin, width);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4129'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4129
  :user_name: 匿名
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2007/11/17 02:00 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    def centering(lst,n)
      return lst if (n &lt;= 0 || lst == "")
      c = (lst = " "*n + lst + " "*n).size/2
      lst[c-n/2..-1][0..n-1]
    end

    if __FILE__ == $0
      p (s = centering("end",4))  != " end" ? s : :ok
      p (s = centering("end",3))  != "end"  ? s : :ok
      p (s = centering("end",2))  != "en"   ? s : :ok
      p (s = centering("end",1))  != "n"    ? s : :ok
      p (s = centering("end",0))  != "end"  ? s : :ok
      p (s = centering("end",-1)) != "end"  ? s : :ok
      p (s = centering("",0))     != ""     ? s : :ok
      p (s = centering("",1))     != ""     ? s : :ok
    end
  :tags:
  - Ruby1.8.6
  :references:
    :url: 
    :title: 
- :id: '4130'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4130
  :user_name: crane
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/458/
  :language: Common
  :time: 2007/11/17 02:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">CL の format で。もっときれいに書けそうですが。</pre>\n\t"
  :code: |
    (defun center (str &amp;optional (width 80))
      (let ((margin (- (length str) width)))
        (if (&gt; margin 0)
            (format t "~a" (subseq str (floor (/ margin 2)) (+ width (floor (/ margin 2)))))
          (format t (format nil "~~~a:@&lt;~~a~~&gt;" width) str))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4131'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4131
  :user_name: sumim
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/17 02:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\n\t"
  :code: |
    | centeredOf |
    centeredOf := [:line :width |
        | size offset centered start end delta |
        size := line size.
        delta := (width - size + 1) // 2.
        offset := (delta min: 0) negated + 1.
        start := (delta max: 0) + 1.
        end := delta + size min: width.
        centered := String new: width withAll: Character space.
        centered replaceFrom: start to: end with: line startingAt: offset].

    centeredOf value: '123456789' value: 15.  "=&gt; '   123456789   ' "
    centeredOf value: '123456789' value: 5.   "=&gt; '34567' "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4132'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4132
  :user_name: mtsuyugu
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/17 02:49 GMT
  :vote_count: '3'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">特にひねりはありません。さらに簡単にできそうな気がします。</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;

    char *center( char *str, int width, char *out ){
       int len,margin,i=0;
       char *p = out;
       if( !out ){
          return NULL;
       }
       len = strlen(str);
       margin = (abs(width-len)+1)/2;
       if( margin == 0 || len &gt; width ){
          strncpy( p, &amp;str[margin], width );
       }
       else{
          while( i++ &lt; margin ) *p++ = ' ';
          strcpy( p, str );
          p += len;
          while( i++ &lt; width - len + 1 ) *p++ = ' ';
       }
       return out;
    }

    int main ( int argc, char *argv[] ){
       int n;
       char *out;
       if( argc &lt; 3 ){
          fprintf(stderr, "usage: %s str num\n", argv[0]);
          return EXIT_FAILURE;
       }

       n = atoi( argv[2] );
       if( n &lt;= 0 || (out = malloc( sizeof(char)*n )) == NULL ){
          return EXIT_FAILURE;
       }
       printf("%s#\n", center( argv[1], n, out ) );
       free(out);
       return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4133'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4133
  :user_name: katsu
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/117/
  :language: Scheme
  :time: 2007/11/17 02:52 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">PC-E500のベーシックで書いたなこんなの。\r\n今は、schemeで。\r\n実行結果\r\n------\r\n$
    gosh 87.scm\r\n1234567890\r\n    abc\r\n  abcdef\r\n  abcdefg\r\nbcdefghijk\r\n-------\r\n奇数文字の時は、右に寄ります。</pre>\n\t"
  :code: |
    (define (centering s w)
      (let* ((p (make-string (quotient w 2) #\ ))
             (ss (string-append p s p))
             (sw (string-length ss))
             (mg (quotient (- sw w) 2)))
        (substring ss mg (- sw mg))))

    (print "1234567890")
    (print (centering "abc" 10))
    (print (centering "abcdef" 10))
    (print (centering "abcdefg" 10))
    (print (centering "abcdefghijkl" 10))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4134'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4134
  :user_name: 匿名
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/11/17 02:53 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>if文もcenterメソッドも使わずに。</p>\n\n\t"
  :code: |
    def center(s, n):
      return (' ' * n + a + ' ' * n)[(len(a)+n)/2:][:n]

    print center('abc', 9)
    print center('abc', 1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4136'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4136
  :user_name: nantan
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/535/
  :language: JavaScript
  :time: 2007/11/17 03:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    function center(s, w) {
        var r=[], d=w-s.length;
        if (d &lt; 0) { s=s.substring(d/2*-1, s.length+d/2); }
        for (var i=0; i&lt;=d/2-1; i++) { r.push(" "); }
        r.push(s);
        for (var i=0; i&lt;=d/2-1+d%2; i++) { r.push(" "); }
        return r.join("");
    }
    console.log("[" + center("test", 0) + "]");    // =&gt; []
    console.log("[" + center("test", 5) + "]");    // =&gt; [test ]
    console.log("[" + center("test", 6) + "]");    // =&gt; [ test ]
    console.log("[" + center("test", 10) + "]");    // =&gt; [   test   ]
    console.log("[" + center("testtest", 10) + "]");    // =&gt; [ testtest ]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4138'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4138
  :user_name: kkobayashi
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/11/17 04:22 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">&gt; for(s in c(\"1234567890\", \"abc\", \"abcdef\",
    \"abcdefg\", \"abcdefghijkl\")){\r\n+     print(center(s, 10))\r\n+ }\r\n[1] \"1234567890\"\r\n[1]
    \"   abc    \"\r\n[1] \"  abcdef  \"\r\n[1] \" abcdefg  \"\r\n[1] \"bcdefghijk\"</pre>\n\t"
  :code: |
    center &lt;- function(s, n){
        format(substring(s, (i&lt;-(nchar(s)-n)/2+1), i+n-1), width=n, justify="centre")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4139'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4139
  :user_name: horiuchi
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2007/11/17 04:34 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Javaがなかったので初投稿です。</p>\n\n\t"
  :code: |
    public class Answer87 {
        public static String formatCenter(String str, int length) {
            if (length &lt;= 0) return str;
            StringBuilder builder = new StringBuilder(str);
            for (int index = 0; index &lt; length; index++) {
                builder.insert(0, ' ');
                builder.append(' ');
            }
            int start = (builder.length() - length) / 2;
            return builder.substring(start, start + length);
        }

        public static void main(String[] args) {
            System.out.println(formatCenter("abcde", 5));    // "abcde"
            System.out.println(formatCenter("abcde", 7));    // " abcde "
            System.out.println(formatCenter("abcde", 8));    // "  abcde "
            System.out.println(formatCenter("abcde", 1));    // "c"
            System.out.println(formatCenter("abcde", 2));    // "bc"
            System.out.println(formatCenter("abcde", 0));    // "abcde"
        }
    }
  :tags:
  - Java1.5
  :references:
    :url: 
    :title: 
- :id: '4141'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4141
  :user_name: kozima
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2007/11/17 05:18 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">最後の行みたいなときは V を使うと短くなりますよ\r\n(format t \"~V:@&lt;~A~&gt;\"
    width str)</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4142'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4142
  :user_name: 匿名
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/11/17 05:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>sayはprint lnだと思ってください。\n仕様と有ってるのか・・・どうか</p>\n\n\t"
  :code: |
    var src = '123456789'
    say( '[' + centering(src,100)  + ']' );
    say( '[' + centering(src,5)    + ']' );
    function centering( s , w ){
      if( s.length &lt; w ) return space( ( w / 2 - s.length / 2 ) ) + s + space( ( w / 2 - s.length / 2 ) );
      else               return s.substring( ( s.length - w ) / 2, s.length - ( ( s.length - w ) / 2 ) );
      function space (l){ var r = ''; while( r.length &lt; l ) r += ' '; return r; }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4143'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4143
  :user_name: ihag
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/560/
  :language: Ruby
  :time: 2007/11/17 05:55 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  String#centerを使って少し修正しました．\r<br>また，入力行がちょうどwidth文字 + \\nのときに，頭の一文字と\\nを切り落としてしまっていたので，centeredに渡す前にchompするようにしました．\n\t"
  :code: |
    class String
      def centered(width = 80)
        margin = (width - self.length)/2;
        return center(width) if margin &gt;= 0
        self[-margin..margin-1]
      end
    end

    ARGF.readlines.each{|l| puts l.chomp.centered(72) }
    __END__
    0         1         2         3         4         5         6         7
    012345678901234567890123456789012345678901234567890123456789012345678901
    This line is intentionally longer than 72 chars to test String#centered works fine.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4144'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4144
  :user_name: mtsuyugu
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/17 06:52 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  C++ では boost::format でセンタリングができるようです。\n\t"
  :code: |
    #include &lt;cstdlib&gt;
    #include &lt;iostream&gt;
    #include &lt;sstream&gt;
    #include "boost/format.hpp"

    using namespace std;
    using namespace boost;

    string &amp;center( string &amp;str, int width ){
       int len = str.length();
       if( len &gt; width ){
          str = str.substr( (len-width+1)/2, width );
       }
       ostringstream oss;
       oss &lt;&lt; "%1$=" &lt;&lt; width &lt;&lt; "s";
       str = ( format(oss.str()) % str ).str();
       return str;
    }

    int main ( int argc, char *argv[] ){
       int width( atoi(argv[2]) );
       string str( argv[1] );
       cout &lt;&lt; center( str, width ) &lt;&lt; endl;
       return EXIT_SUCCESS;
    }
  :tags:
  - boost
  :references:
    :url: /web/20090317033045/http://www.boost.org/libs/format/doc/format.html
    :title: The Boost Format library
- :id: '4149'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4149
  :user_name: takatoh
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/189/
  :language: Haskell
  :time: 2007/11/17 09:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    center :: Int -&gt; [Char] -&gt; [Char]
    center n str | slen &lt; n  = center'
                 | slen &gt; n  = clop
                 | otherwise = str
      where
        slen = length str
        center' = lmargin ++ str ++ rmargin
        (lmargin, rmargin) = splitAt ((n-slen) `div` 2) $ replicate (n-slen) ' '
        clop = take n $ drop ((slen-n) `div` 2) str
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4150'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4150
  :user_name: crane
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/458/
  :language: Common
  :time: 2007/11/17 09:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">kozima さん、ご指摘感謝です。\r\nformat での~v ってよく調べたら基本的機能なのですね。参考になりました。\r\n</pre>\n\t"
  :code: "(defun center (str &amp;optional (width 80))\n  (let ((margin (- (length
    str) width)))\n    (format t \"~v:@&lt;~a~&gt;\" width \n        (if (&gt; margin
    0)\n        (subseq str (floor (/ margin 2)) (+ width (floor (/ margin 2))))\n
    \         str))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4151'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4151
  :user_name: matyr
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/11/17 11:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ビット演算(必ず整数が返る)で曖昧さを除く。\n\t"
  :code: |
    String.prototype.center = function(width){ var d, s;
      return (d = (width |= 0) - this.length) &gt; 0
        ? (s = Array((d &gt;&gt; 1) + 1).join(' ')) + this + (d &amp; 1 ? s + ' ' : s)
        : this.substr(-d &gt;&gt; 1, width);
    };

    (typeof alert != 'undefined' ? alert :
     typeof print != 'undefined' ? print :
     function($){ typeof WSH == 'object' &amp;&amp; WSH.echo($) })((function(s, f, t){
       for(var r = []; f &lt;= t;) r.push(s.center(f++));
       return '['+ r.join(']\n[') +']' })('hoge', -1, 8));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4152'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4152
  :user_name: fujidig
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/17 12:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  文字列として取得して整形。\n\t"
  :code: "    begingroupundo;\n    if ( getconfig( \"AutoAdjustOrikaeshi\" ) == 2
    ) {\n        #width = windowwidth;\n    } else {\n        #width = getconfig(
    \"Orikaeshi\" );\n    }\n    if ( !selecting ) {\n        selectall;\n    } else
    {\n        #l1 = seltoplineno;\n        #l2 = selendlineno;\n        movetolineno
    1, #l1;\n        beginsel;\n        movetolineno 1, #l2;\n        movetolineno
    linelen2 + 1, #l2;\n        endsel;\n    }\n    $text = gettext( seltopx, seltopy,
    selendx, selendy, 1 );\n    delete;\n    call center $text, #width;\n    insert
    $$return;\n    endgroupundo;\n    endmacro;\n\ncenter:\n    $$result = \"\";\n
    \   while( $$1 != \"\" ) {\n        ##lineLen = strstr( $$1, \"\\x0d\\x0a\" );\n
    \       ##isLastLine = ##lineLen == -1;\n        if ( ##isLastLine ) {\n            ##lineLen
    = strlen( $$1 );\n        }\n        $$line = leftstr( $$1, ##lineLen );\n        call
    center_line $$line, ##2;\n        $$result = $$result + $$return;\n        $$1
    = rightstr( $$1, strlen( $$1 ) - ##lineLen );\n        if ( !##isLastLine ) {\n
    \           $$1 = rightstr( $$1, strlen( $$1 ) - strlen( \"\\x0d\\x0a\" ) );\n
    \           $$result = $$result + \"\\n\";\n        }\n    }\n    return $$result;\n\ncenter_line:\n
    \   ##margin = ##2 - strlen( $$1 );\n    if ( ##margin &gt;= 0 ) {\n        $$result
    = \"\";\n        ##i = ##margin / 2;\n        while( ##i &gt; 0 ) {\n            $$result
    = $$result + \" \";\n            ##i = ##i - 1;\n        }\n        $$result =
    $$result + $$1;\n    } else {\n        ##idx = -##margin / 2;\n        call midstr2,
    $$1, ##idx, ##2;\n        $$result = $$return;\n        // ±1バイトとる範囲をずらして、その中から一番長いテキストをとる\n
    \       if ( strlen( $$result ) &lt; ##2 ) {\n            call midstr2, $$1, ##idx
    + 1, ##2;\n            if ( strlen( $$return ) &gt; strlen( $$result ) ) {\n                $$result
    = $$return;\n            }\n            if ( strlen( $$result ) &lt; ##2 ) {\n
    \               call midstr2, $$1, ##idx - 1, ##2;\n                if ( strlen(
    $$return ) &gt; strlen( $$result ) ) {\n                    $$result = $$return;\n
    \               }\n            }\n        }\n    }\n    return $$result;\n\nmidstr2:
    // マルチバイトを考慮した midstr\n    $$src = $$1;\n    ##idx = ##2;\n    ##len = ##3;\n
    \   if ( ##idx &lt; 0 ) {\n        ##idx = 0;\n    }\n    if ( ##idx &gt; strlen(
    $$src ) ) {\n        ##idx = strlen( $$src );\n    }\n    if ( ##len &lt; 0 )
    {\n        ##len = 0;\n    }\n    if ( ##len &gt; strlen( $$src ) - ##idx ) {\n
    \       ##len = strlen( $$src ) - ##idx ;\n    }\n    \n    ##end = ##idx + ##len;\n
    \   ##i = 0;\n    $$dest = \"\";\n    while( ##i &lt; ##end ) {\n        ##char
    = ascii( rightstr( $$src, strlen( $$src ) - ##i ) );\n        ##byte = strlen(
    char( ##char ) );\n        if ( ( ##i &gt;= ##idx ) &amp;&amp; ( ##i + ##byte
    &lt;= ##end ) ) {\n            $$dest = $$dest + char( ##char );\n        }\n
    \       ##i = ##i + ##byte;\n    }\n    return $$dest;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4160'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4160
  :user_name: kacchi
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/11/17 15:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Emacs Lisp\r\n実行結果:\r\n(string-centering \"abc\"
    0)\r\n\"\"\r\n(string-centering \"abc\" 1)\r\n\"b\"\r\n(string-centering \"abc\"
    2)\r\n\"ab\"\r\n(string-centering \"abc\" 3)\r\n\"abc\"\r\n(string-centering \"abc\"
    4)\r\n\"abc \"\r\n(string-centering \"abc\" 5)\r\n\" abc \"\r\n(string-centering
    \"abc\" 6)\r\n\" abc  \"\r\n(string-centering \"abc\" 7)\r\n\"  abc  \"</pre>\n\t"
  :code: |
    (defun string-centering (s c)
      (let ((p (lambda (k) (make-string k ? )))
            (d (- c (length s))))
        (let ((n (/ d 2))
              (m (% d 2)))
          (if (&gt;= d 0)
              (concat (funcall p n) s (funcall p (+ n m)))
            (substring s (abs n) (- (length s) (abs (+ n m))))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4161'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4161
  :user_name: yappy
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/533/
  :language: 
  :time: 2007/11/17 15:50 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  バグの報告です。\r<br>ヌル文字が足りず、変なオマケが後に付きます。\r<br>mallocの実装によって気づかないことがあるかもしれません。\r<br>私の場合は#が出力されました。丁寧に範囲外の1byteめに'#'をセットしてくれているようです。\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4162'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4162
  :user_name: kacchi
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/145/
  :language: Scheme
  :time: 2007/11/17 15:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  #4160は、はじめにgaucheで書いてみて、そのままEmacs Lispに直したものです。gaucheで書いたのも投稿しちゃいます。\n\t"
  :code: |
    (define (string-centering s c)
      (define (p k) (make-string k #\ ))
      (let ((d (- c (string-length s))))
        (receive (n m) (quotient&amp;remainder d 2)
          (if (&gt;= d 0)
              (string-append (p n) s (p (+ n m)))
              (substring s (abs n) (- (string-length s) (abs (+ n m))))))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4163'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4163
  :user_name: yappy
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/533/
  :language: C
  :time: 2007/11/17 16:32 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  　まず指定されたカラム幅分をスペースで埋め、さらにヌル文字をつけて作業エリアを初期化します。\r<br>　次に幅から文字列長を引いて2で割り、初めの文字のオフセットを求めます。このとき幅より大きな文字列が渡されるとマイナスになりますが、そのままにしておきます。\r<br>　最後にオフセットの位置から順番にコピーしますが、作業エリア範囲外の場合は無視します。すると文字列長に関係なく欲しい結果が得られます。\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    #define SPACE ' '
    //#define SPACE '*'

    char *centering(char *out, const char *str, int width){
        int i, len, offset;
        len = strlen(str);
        memset(out, SPACE, width);
        out[width] = '\0';
        offset = (width - len) / 2;
        for(i=0; i&lt;len; i++){
            int ind = offset + i;
            if(ind &gt;= 0 &amp;&amp; ind &lt;width)
                out[ind] = str[i];
        }
        return out;
    }

    int main(){
        char buf[256];
        int i;
        for(i=1; i&lt;20; i++)
            puts(centering(buf, "abcde", i));
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4164'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4164
  :user_name: yohei
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/11/17 16:35 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>空白埋めしてから、部分コピー</p>\n\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\n// dest のサイズは w +
    1 以上とする事\nchar *centering(char *dest, const char *s, size_t w) {\n    size_t len;\n\n
    \   len = strlen(s);\n    sprintf(dest, \"%*s\", w, \"\");\n    \n    if (len
    &gt;= w) strncpy(dest, s + (len - w) / 2, w);\n    else          strncpy(dest
    + (w - len) / 2, s, len);\n\n    return dest;\n}\n\nint main(void) {\n    char
    buff[256];\n    printf(\"|%s|\\n\", centering(buff, \"123456789\", 15));\n    printf(\"|%s|\\n\",
    centering(buff, \"123456789\",  5));\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4171'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4171
  :user_name: anekos
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/170/
  :language: Ruby
  :time: 2007/11/18 01:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Stringを拡張。\n削るときは後ろを優先。</p>\n\n\t"
  :code: |
    class String
        def neko_center (w)
            if (d = self.size - w) &gt; 0
                #self.gsub(/\A.{#{d/2}}|.{#{(d+1)/2}}\Z/, '')
                self[d/2..-d/2-1]
            else
                self.center(w)
            end
        end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4173'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4173
  :user_name: anekos
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/170/
  :language: Other
  :time: 2007/11/18 01:45 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>(width.odd? xor self.odd?) のときに、余計に1文字削ってしまうと思います。</p>\n\n\t"
  :code: |
    p "0123456789".centered(3)  =&gt; "45"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4174'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4174
  :user_name: federkasten
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/556/
  :language: C
  :time: 2007/11/18 02:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>#4164を見てたら、sprintfを1回呼ぶだけでも出来そうだと思ったので、やってみました。</p>\n\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nchar *centering(char
    *dest, char *s, int w) {\n  int d = w - strlen(s);\n  \n  sprintf(dest, \"%*s%.*s%*s\",
    ( d &gt;0 ? d/2 : 0 ), \"\", ( d &gt;0 ? strlen(s) : w ), s + ( d &gt;0 ? 0 :
    -d/2 ), ( d &gt;0 ? d/2 : 0 ), \"\" );\n  \n  return dest;\n}\n\nint main(void)
    {\n  char buff[256];\n\n  printf(\"|%s|\\n\", centering(buff, \"123456789\", 20));\n
    \ printf(\"|%s|\\n\", centering(buff, \"123456789\", 5));\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4180'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4180
  :user_name: にしお
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/11/18 02:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>投稿者を修正しておきました。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4183'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4183
  :user_name: susu
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2007/11/18 03:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    let center str width =
      let len = String.length str in
      if width&gt;len then
        let res = String.make width ' ' in
        (String.blit str 0 res ((width-len)/2) len; res)
      else
        String.sub str ((len-width)/2) width ;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4186'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4186
  :user_name: susu
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/218/
  :language: 
  :time: 2007/11/18 03:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>短くて素敵ー。\nsがaになってますよ。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4193'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4193
  :user_name: 匿名
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/18 06:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>あ、ほんとだ。ご指摘感謝です。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4199'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4199
  :user_name: yohei
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/11/18 08:30 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>\"%.*s\" で幅制限出来たのか...\nただ、d &gt; 0 で d が奇数のときに、１桁足りないようです。\nそれを踏まえて、自分ならこう書きます。</p>\n\n\t"
  :code: "char *centering(char *dest, char *s, int w) {\n  int d = w - strlen(s);\n
    \ \n  if (d &gt; 0) sprintf(dest, \"%*s%*s\", w - d/2, s, d/2, \"\");\n  else
    \      sprintf(dest, \"%.*s\", w, s - d/2);\n  \n  return dest;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4202'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4202
  :user_name: federkasten
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/556/
  :language: C
  :time: 2007/11/18 13:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  あ、確かに。\r\nご指摘ありがとうございます。\r\nsprintfの所を下記のように修正します。\r\n\r\nですが、youheiさんのような書き方の方が、自分も好みです。\n\t"
  :code: "  sprintf(dest, \"%*s%.*s%*s\", \n      ( d&gt;0 ? d - d/2 : 0 ), \"\",
    \n      ( d &gt;0 ? strlen(s) : w ), s + ( d &gt;0 ? 0 : -d/2 ), \n      ( d &gt;0
    ? d/2 : 0 ), \"\" );\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4206'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4206
  :user_name: ihag
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/560/
  :language: Ruby
  :time: 2007/11/18 15:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>さらに修正しました．\n   <a href=\"/web/20090317033045/http://ja.doukaku.org/comment/4173/\">#4173</a>\n
    \  で，ご指摘を受けた不具合も直っています．\n</p>\n<pre><code>p \"0123456789\".centered(3)  # \"345\"\np
    \"012\".centered(5)  # \" 012 \"\np \"012\".centered(4)  # \"012 \"\np \"012\".centered(3)
    \ # \"012\"\np \"012\".centered(2)  # \"01\"\np \"012\".centered(1)  # \"1\"\np
    \"012\".centered(0)  # \"\"\n</code></pre>\n\n\n\t"
  :code: |
    class String
      def centered(width = 80)
        return center(width) if width &gt; size
        self[(size - width) / 2, width]
      end
    end

    ARGF.readlines.each{|l| puts l.chomp.centered(72) }
    __END__
    0         1         2         3         4         5         6         7
    012345678901234567890123456789012345678901234567890123456789012345678901
    This line is intentionally longer than 72 chars to test String#centered works fine.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4210'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4210
  :user_name: mad
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/418/
  :language: Haskell
  :time: 2007/11/18 20:37 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">Haskellらしく無限リストと高階関数で。\r\n\r\n1. 文字列の右に無限個の空白を連結\r\n2.
    左側を揃える\r\n3. 幅の分だけ切り取る</pre>\n\t"
  :code: "center width str = take width . adjust lmargin $ str ++ repeat ' '\n    where
    \n    lmargin = (width - length str) `div` 2\n    adjust n | n &gt; 0      = (replicate
    n ' ' ++)\n             | otherwise  = drop (-n)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4242'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4242
  :user_name: ihag
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/560/
  :language: diff
  :time: 2007/11/19 09:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>String#centerは右側からパディングを入れるようですので，それにあわせて，widthをはみ出す場合は「左側から削る」ようにしました．</p>\n<p>Rubyでは，(CやPerlと異なり)負の整数の除算の場合，剰余の符号が除数(divisor)の符号と一致するような商が得られますが，4行目で文字列を削る際にその性質を利用しています．\n(<a
    class=\"reference\" href=\"/web/20090317033045/http://ja.doukaku.org/comment/4171/\">4171</a>
    を見てぱくりました．勉強になります:-)</p>\n<pre class=\"literal-block\">\np \"0123456789\".centered(3)
    \ # \"456\"\np \"012\".centered(5)   # \" 012 \"\np \"012\".centered(4)   # \"012
    \"\np \"012\".centered(3)   # \"012\"\np \"012\".centered(2)   # \"12\"\np \"012\".centered(1)
    \  # \"1\"\np \"012\".centered(0)   # \"\"\np \"012\".centered(-1)  # \"012\"\np
    \"012\".center(4) == \" 012 \".centered(4)  # true\n</pre>\n\n\t"
  :code: |
    --- center.rb.orig      2007-11-19 17:17:47.000000000 +0900
    +++ center.rb   2007-11-19 17:17:39.000000000 +0900
    @@ -1,7 +1,7 @@
     class String
       def centered(width = 80)
    -    return center(width) if width &gt; size
    -    self[(size - width) / 2, width]
    +    return center(width) if width &gt; size or 0 &gt; width
    +    self[-((width - size) / 2), width]
       end
     end
  :tags:
  - Ruby
  :references:
    :url: 
    :title: 
- :id: '4248'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4248
  :user_name: fujidig
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/19 10:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
        begingroupundo;
        if ( getconfig( "AutoAdjustOrikaeshi" ) == 2 ) {
            #width = windowwidth;
        } else {
            #width = getconfig( "Orikaeshi" );
        }
        if ( !selecting ) {
            #top = 1;
            #end = linecount2;
        } else {
            #top = seltoplineno;
            #end = selendlineno;
            escape;
        }
        #i = #top;
        while( #i &lt;= #end ) {
            movetolineno 1, #i;
            #margin = #width - linelen2;
            if ( #margin &gt;= 0 ) {
                #j = #margin / 2;
                $margin = "";
                while( #j &gt; 0 ) {
                    $margin = $margin + " ";
                    #j = #j - 1;
                }
                insert $margin;
            } else {
                beginsel;
                movetolineno linelen2 + 1, #i;
                $text = gettext( seltopx, seltopy, selendx, selendy, 1 );
                delete;
                call cutstr, $text, #width;
                insert $$return;
            }
            #i = #i + 1;
        }
        endgroupundo;
        endmacro;

    cutstr:
        $$src = $$1;
        ##width = ##2;
        if ( ##width &lt; 0 ) {
            ##width = 0;
        }
        if ( ##width &gt; strlen( $$src ) ) {
            ##width = strlen( $$src );
        }
        ##start = strlen( $$src ) - ##width;
        ##end = strlen( $$src ) + ##width;
        ##i = 0;
        $$dest = "";
        $$left = "";
        $$right = "";
        while( ##i * 2 &lt; ##end ) {
            ##char = ascii( $$src );
            ##bytes = strlen( char( ##char ) );
            if ( ##i * 2 &lt; ##start ) {
                $$left = char( ##char );
            }
            if ( ( ( ##i + ##bytes ) * 2 &gt; ##end ) &amp;&amp; ( $$right == "" ) ) {
                $$right = char( ##char );
            }
            if ( ( ##i * 2 &gt;= ##start ) &amp;&amp; ( ( ##i + ##bytes ) * 2 &lt;= ##end ) ) {
                $$dest = $$dest + char( ##char );
            }
            $$src = rightstr( $$src, strlen( $$src ) - ##bytes );
            ##i = ##i + ##bytes;
        }
        if ( $$right == "" ) {
            $$right = char( ascii( $$src ) );
        }
        if ( strlen( $$dest ) &gt;= ##width ) {
            return $$dest;
        }
        if ( ( strlen( $$left + $$dest ) &lt;= ##width ) &amp;&amp; ( $$left != "" ) ) {
            return $$left + $$dest;
        }
        if ( ( strlen( $$dest + $$right ) &lt;= ##width ) &amp;&amp; ( $$right != "" ) ) {
            return $$dest + $$right;
        }
        return $$dest;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4256'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4256
  :user_name: nskj77
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/375/
  :language: Haskell
  :time: 2007/11/19 14:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>覚えたてのControl.Monad.Fixを使って。</p>\n\n\t"
  :code: |
    import Control.Monad.Fix

    center :: Int -&gt; String -&gt; String
    center n = fix (\f x -&gt; g f x)
      where g f x | length x1 == n = x1
                  | length x2 == n = x2
                  | length x2 &gt; n = f x2
                  | otherwise = f $ head $ zipWith3 (\x y z -&gt; x ++ y ++ z) [" "] [x] [" "]
              where x1 = tail x
                    x2 = init x1
  :tags:
  - Control.Monad.Fix
  :references:
    :url: 
    :title: 
- :id: '4273'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4273
  :user_name: fujidig
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/20 11:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
        if ( getconfig( "AutoAdjustOrikaeshi" ) == 2 ) {
            #width = windowwidth;
        } else {
            #width = getconfig( "Orikaeshi" );
        }
        disabledraw;
        begingroupundo;
        if ( !selecting ) {
            selectall;
        }
        #i = seltoplineno;
        #end = selendlineno;
        escape;
        while( #i &lt;= #end ) {
            movetolineno 1, #i;
            #margin = #width - linelen2;
            if ( #margin &gt;= 0 ) {
                #j = #margin / 2;
                while( #j &gt; 0 ) {
                    insert " ";
                    #j = #j - 1;
                }
            } else {
                while( linelen2 &gt; #width ) {
                    golineend2;
                    backspace;
                    if ( !linelen2 &gt; #width ) {
                        break;
                    }
                    golinetop2
                    delete;
                }
            }
            #i = #i + 1;
        }
        endgroupundo;
        enabledraw;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4277'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4277
  :user_name: nobsun
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/11/20 13:20 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">明示的算術演算なし、lengthで文字列の長さも測っていない、「そこまでしたからってどうよ」版
    ^^;\r\nあ。それから、このセンタリングでは空白は前より入り、切り落としは後ろよりになります。\r\n\r\ncenter 2 \"a\" → \"_a\"\r\ncenter
    3 \"a\" → \"_a_\"\r\ncenter 3 \"ab\" → \"_ab\"\r\ncenter 4 \"ab\" → \"_ab_\"\r\ncenter
    3 \"abcde\" → \"bcd\"\r\ncenter 4 \"abcde\" → \"bcde\"\r\ncenter 3 \"abcdef\"
    → \"bcd\"\r\ncenter 4 \"abcdef\" → \"bcde\"\r\n</pre>\n\t"
  :code: |
    center n s = uncurry (c n []) $ halve s
      where c 0 a p q = take n (a ++ q)
            c i a p q = d (pred i) (head p:a) (tail p) q
            d 0 a p q = take n (a ++ q)
            d i a p q = c (pred i) a p q

    halve s = e (repeat ' ') (s++repeat ' ') s
      where e a b [] = (a,b)
            e a b c  = o (head b:a) (tail b) (tail c)
            o a b [] = (a,b)
            o a b c  = e a b (tail c)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4280'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4280
  :user_name: yuin
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/11/20 16:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    def center(s:String, n:int) = {
      val pad = List.make(n," ").mkString("")
      (pad + s + pad).toList.drop((s.size+n)/2).take(n).mkString("")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4284'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4284
  :user_name: cho45
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/579/
  :language: Io
  :time: 2007/11/21 05:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>Io で普通に書いてみました。alignCenter があるのできりつめるところだけです。</p>\n</div>\n\t"
  :code: |
    Sequence centered := method(width,
        margin := (width - self size) / 2
        if (margin &lt; 0,
            self slice(-margin, self size + margin)
        ,
            self alignCenter(width)
        )
    )


    # なんか手元のだと定義されていないので
    Number to := method(i,
        Range clone setRange(self, i)
    )

    0 to(7) foreach(i,
        "proto" asMutable centered(i) justSerialized
        "" println
    )

    /* output

    ""
    "o"
    "ro"
    "rot"
    "prot"
    "proto"
    "proto "
    " proto "

    */
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4336'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4336
  :user_name: 匿名
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/22 10:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なでしこで素直に</p>\n\n\t"
  :code: |
    "abcdefg"を3でセンタリングして表示
    ●センタリング(SをNで)
        もし(文字数(S)&lt;=N)ならば
            文字列センタリング(S,N)で戻る
        1の間
            Sから1文字右端削除
            もし(文字数(S)&lt;=N)ならば,Sで戻る
            Sの1から1文字削除
            もし(文字数(S)&lt;=N)ならば,Sで戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4448'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4448
  :user_name: naoto
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/572/
  :language: 
  :time: 2007/11/27 15:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>気づくのが遅れてしまいましたが、修正ありがとうございました。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4484'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4484
  :user_name: 匿名
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/11/29 14:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>馬鹿正直に作ってみました。\nあらかじめ条件を洗い出して、最後に処理をまとめて行う、というのが個人的なスタイルです。</p>\n\n\t"
  :code: "#include&lt;stdio.h&gt;\n#include&lt;string.h&gt;\n\nvoid centering( char
    *buffer, int col_num, char* string );\n\nint main( int argc, char *argv[] )\n{\n
    \   char buf[256];\n    \n    memset( buf, 0, sizeof(buf) );\n    \n    centering(
    buf, 10, \"abcdefg\" );\n    printf( \"%s\\n\", buf );\n    \n    centering( buf,
    8, \"0123456789\" );\n    printf( \"%s\\n\", buf );\n    \n    centering( buf,
    7, \"0123456789\" );\n    printf( \"%s\\n\", buf );\n    return 0;\n}\n\nvoid
    centering( char *buffer, int col_num, char* string )\n{\n    int copy_len = 0;\n
    \   int source_index = 0;\n    int target_index = 0;\n    \n    /* output initialize
    (using '@' instead of SPACE for check) */\n    memset( buffer, '@', col_num );\n
    \   buffer[col_num] = '\\0';\n    \n    /* length of string for output */\n    copy_len
    = strlen( string );\n    \n    /* check which is longer */\n    if( copy_len &lt;
    col_num )\n    {\n        int diff = col_num - copy_len;\n        target_index
    = diff / 2;\n    }\n    else\n    {\n        int diff = copy_len - col_num;\n
    \       source_index = diff / 2;\n        copy_len = col_num;\n    }\n    \n    memcpy(
    &amp;buffer[target_index], &amp;string[source_index], copy_len );\n    return;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4756'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4756
  :user_name: vtwntmtn
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2007/12/11 13:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">身も蓋もなくstring:centreを使いました。\r\n\r\n1&gt; c(center).\r\n{ok,center}\r\n2&gt;
    center:center(\"center\", 20).\r\n\"       center       \"\r\n3&gt; center:center(\"center\",
    3).\r\n\"ent\"\r\n</pre>\n\t"
  :code: |
    -module(center).
    -export([center/2]).

    center(Str, Len) -&gt; string:centre(Str, Len).
  :tags:
  - Erlang/OTP_R10B-10
  :references:
    :url: 
    :title: 
- :id: '4838'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/4838
  :user_name: pooq
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/16 02:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">文字列の前に指定幅分の空白を足して、文字列長から指定幅を引いて、\r\nその半分を切り下げて、正なら右へ負なら左へローテイトして、\r\n先頭から指定幅を取り出だしています。\r\n\r\n
    \  ('\"'&amp;,@,&amp;'\"')  1 center '123456789'\r\n\"5\"\r\n   ('\"'&amp;,@,&amp;'\"')
    \ 2 center '123456789'\r\n\"45\"\r\n   ('\"'&amp;,@,&amp;'\"')  3 center '123456789'\r\n\"456\"\r\n
    \  ('\"'&amp;,@,&amp;'\"')  4 center '123456789'\r\n\"3456\"\r\n   ('\"'&amp;,@,&amp;'\"')
    \ 5 center '123456789'\r\n\"34567\"\r\n   ('\"'&amp;,@,&amp;'\"')  9 center '123456789'\r\n\"123456789\"\r\n
    \  ('\"'&amp;,@,&amp;'\"')  10 center '123456789'\r\n\" 123456789\"\r\n   ('\"'&amp;,@,&amp;'\"')
    \ 11 center '123456789'\r\n\" 123456789 \"\r\n   ('\"'&amp;,@,&amp;'\"')  12 center
    '123456789'\r\n\"  123456789 \"\r\n</pre>\n\t"
  :code: |
    center=.4 :'x{.((&lt;.@-:@#)|.])(x#'' ''),y'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5201'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/5201
  :user_name: szktty
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/648/
  :language: Other
  :time: 2008/01/05 17:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Mac OS X (PowerPC 32bit) アセンブリで。strcenter.o をリンクして使います。</p>\n\n\t"
  :code: ";; ------------------------------------------------\n;; strcenter.s for
    Mac OS X (PowerPC 32bit)\n;; % as -o strcenter.o strcenter.s\n;; ------------------------------------------------\n\n
    \       .machine ppc\n        .globl  _strcenter\n\n;; char *strcenter(char *dest,
    const char *s, size_t width)\n;;\n;; r3: char *dest\n;; r4: const char *s\n;;
    r5: size_t width\n;;\n;; r7:  文字列 s のサイズ\n;; r8:  文字列の前のスペースのサイズ\n;; r9:  文字列の後のスペースのサイズ\n;;
    r10: スペースのASCIIコード\n;; r11: r3 のコピー\n;; r12: r4 のコピー\n;; \n_strcenter:\n        ;;
    初期化\n        li      r7, 0\n        li      r10, 32         ; ' '\n        mr
    \     r11, r3\n        mr      r12, r4\n        b       _strlen\n\n_init_sizes:\n
    \       ;; 基準となるスペースのサイズ\n        sub     r2, r5, r7      ; r2 = width - strlen(s)\n
    \       li      r0, 2\n        divw    r2, r2, r0      ; r2 = r2 / 2\n\n        ;;
    余り\n        sub     r0, r5, r7      ; r0 = width - strlen(s)\n        andi.   r0,
    r0, 1\n\n        ;; 前後のスペースのサイズを決定、コピー\n        add     r8, r2, r0      ; 余りがあれば前のスペースに追加\n
    \       addi    r9, r2, 0\n\n        ;; 基準のスペースのサイズが負の場合\n        cmpi    cr7,
    r2, 0\n        blt     cr7, _shorten_strcenter\n\n;; 前のスペースをコピー\n_copy_former_spaces:\n
    \       stb     r10, 0(r11)\n        addi    r11, r11, 1\n        subi    r8,
    r8, 1\n        cmpli   cr7, r8, 0\n        bgt     cr7, _copy_former_spaces\n\n;;
    文字列をコピー\n_copy_str:\n        lbz     r0, 0(r12)\n        stb     r0, 0(r11)\n
    \       addi    r11, r11, 1\n        addi    r12, r12, 1\n        subi    r7,
    r7, 1\n        cmpli   cr7, r7, 0\n        bgt     cr7, _copy_str\n\n;; 後のスペースをコピー\n_copy_latter_spaces:\n
    \       stb     r10, 0(r11)\n        addi    r11, r11, 1\n        subi    r9,
    r9, 1\n        cmpli   cr7, r9, 0\n        bgt     cr7, _copy_latter_spaces\n\n;;
    終端をコピーして終了\n_end_strcenter:\n        li      r0, 0\n        stb     r0, 0(r11)\n
    \       blr                     ; 関数を終了\n\n;; 文字列の前後をカットしてコピー\n_shorten_strcenter:\n
    \       sub     r12, r12, r8    ; 文字列の前半をカット\n        add     r7, r7, r8\n        add
    \    r7, r7, r9      ; 文字列の後半をカット\n\n_copy_shorten_str:\n        lbz     r0, 0(r12)\n
    \       stb     r0, 0(r11)\n        addi    r11, r11, 1\n        addi    r12,
    r12, 1\n        subi    r7, r7, 1\n        cmpli   cr7, r7, 0\n        bgt     cr7,
    _copy_shorten_str\n        b       _end_strcenter\n\n_strlen:\n        mr      r2,
    r4\n        li      r7, 0\n        \n__strlen:\n        lbz     r0, 0(r2)       ;
    1文字レジスタに移す\n        cmpli   cr7, r0, 0\n        beq     cr7, _init_sizes\n        addi
    \   r2, r2, 1\n        addi    r7, r7, 1\n        b       __strlen\n"
  :tags:
  - Assembly
  - MacOSX
  - PowerPC
  :references:
    :url: 
    :title: 
- :id: '5211'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/5211
  :user_name: omoikani
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2008/01/06 18:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    fun center s width =
      let
        open StringCvt

        val len = size s
        val m = abs (width - len)
        val (left, right) = (m div 2, m div 2 + m mod 2)
      in
        if width &lt; len then substring (s, left, len - left - right)
        else (padLeft #" " (left + right + len) o padRight #" " (right + len)) s
      end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5258'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/5258
  :user_name: ivoryworks
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/647/
  :language: PHP
  :time: 2008/01/09 14:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  マルチバイト非対応。\r<br><br>ex)\r<br>echo sprintf('&lt;pre&gt;[%s]&lt;/pre&gt;', Centering('test', 4));\r<br><br>('test', 4) =&gt; [test]\r<br>('test', 8) =&gt; [  test  ]\r<br>('test', 5) =&gt; [test ]\r<br>('test', 2) =&gt; [es]\n\t"
  :code: |
    &lt;?php
    function Centering($str, $width)
    {
        $slen = strlen($str);
        if ($slen &lt; $width) {
            $str = str_pad($str, $width, ' ', STR_PAD_BOTH);
        } else {
            $str = substr($str, (int)(($slen - $width)/2), $width);
        }
        return $str;
    }
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5681'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/5681
  :user_name: silverwire
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/05 02:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">バッチで書いてみました。文字列が半角空白を含まない場合は、引数をダブルクォーテー\r\nションで括る必要はありません。なお、18行目と20行目の行末に半角空白が
    1つあるので\r\n注意してください。\r\n\r\n  e.g.\r\n    C:\\&gt;@echo off &amp; (for /l %i in
    (0,1,7) do center \"abcde\" %i) &amp; @echo on\r\n    []\r\n    [c]\r\n    [bc]\r\n
    \   [bcd]\r\n    [abcd]\r\n    [abcde]\r\n    [abcde ]\r\n    [ abcde ]\r\n\r\n遅延環境変数展開を利用しているので、Windows
    NTでは動作しません。Windows 2000, XP, \r\n2003で動作を確認。</pre>\n\t"
  :code: ":: center.bat\n\n@echo off\n  setlocal enabledelayedexpansion\n    set l=0\n
    \   set m=0\n    set n=0\n    set t=%1\n    set t=%t:\"=%\n\n    call :length
    \"%t%\" l\n\n    if %2 gtr %l% (\n      set /a m=%2-%l%\n      set /a n=!m!/2\n
    \     :: パディング\n      for /l %%i in (1,1,!n!) do set t= !t!\n      for /l %%i
    in (1,1,!n!) do set t=!t! \n      set /a n=!m!%%2\n      if !n! equ 1 set t=!t!
    \n    )\n\n    if %l% gtr %2 (\n      set /a m=%l%-%2\n      set /a n=!m!/2\n
    \     :: トリミング\n      for /l %%i in (1,1,!n!) do set t=!t:~1!\n      for /l %%i
    in (1,1,!n!) do set t=!t:~0,-1!\n      set /a n=!m!%%2\n      if !n! equ 1 set
    t=!t:~0,-1!\n    )\n\n  endlocal &amp; echo [%t%]\ngoto :EOF\n\n:length\n  setlocal\n
    \   set i=0\n    set t=%1\n    set t=%t:\"=%\n\n    :loop\n      set t=%t:~1%\n
    \     set /a i+=1\n    if not \"%t%\" == \"\" goto loop\n  endlocal &amp; set
    %2=%i%\ngoto :EOF\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6102'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/6102
  :user_name: eller
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/499/
  :language: HSP
  :time: 2008/03/29 14:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>対象文字列の長さによって分岐しています。\n露骨すぎてスマートとは言えないでしょう。</p>\n\n\t"
  :code: |
    #runtime "hsp3cl"
    #module
    #defcfunc spaces int len
        if len &lt;= 0 : return ""

        sdim s, len + 1
        repeat len
            poke s, cnt, ' '
        loop
        return s

    #defcfunc centered_text str target, int len
        if len &lt;= 0 : return ""

        target_length = strlen(target)
        result = target
        if target_length &lt; len {
            result = spaces((len - target_length)/2) + target + spaces((len - target_length + 1)/2)
        } else : if target_length &gt; len {
            result = strmid(result, (target_length - len)/2, len)
        }
        return result
    #global

        s = "*"
        repeat 10
            mes centered_text(s, 15)
            s += " *"
        loop
        stop
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6117'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/6117
  :user_name: eller
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/499/
  :language: HSP
  :time: 2008/03/30 22:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>より単純なスクリプトです。\nまず指定された長さの半角スペース列を用意し、次に文字列をpokeで書きこんでいます。</p>\n\n\t"
  :code: |
    #module
    #defcfunc centered_text str _source, int len
        if len &lt;= 0 : return ""
        source = _source

        source_strlen = strlen(source)
        sdim result, len + 1
        memset result, ' ', len
        poke result, limit((len - source_strlen)/2, 0, len/2), strmid(source, limit((source_strlen - len)/2, 0, source_strlen), len)
        return result
    #global
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6154'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/6154
  :user_name: まさぽん
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/711/
  :language: Arc
  :time: 2008/04/08 00:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  実行例:\r<br>arc&gt; (centering \"hoge\" 10)\r<br>\"   hoge   \"\r<br>arc&gt; (centering \"hogefuga\" 5)\r<br>\"ogefu\"\n\t"
  :code: |
    (def mklist (n (o fill nil)) (map (fn (x) fill) (range 1 n)))

    (def centering (str length)
      (withs (plen (- length (len str)) tlen (abs plen) l (trunc (/ tlen 2)) r (- tlen l))
        (if (positive plen)
            (string (mklist l #\space) str (mklist r #\space))
            (cut str l (- (len str) r)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6400'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/6400
  :user_name: Nemo
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/05/31 21:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>PostScript で。\nPostScript で文字数単位でやる実用性はほとんど無いでしょうね。\n通常はフォント指定して文字列幅を計算、幅にあわせて切り捨てるなり圧縮するなり、でしょうから。</p>\n\n\t"
  :code: "%!PS\n\n/FillSpace { % (String) FillSpace (String')\n    dup length 1 sub
    0 1 3 -1 roll {\n        1 index exch 32 put\n    } for\n} bind def\n\n/Centering
    { % (String) length Centering (NewString)\n    dup string FillSpace dup\n    3
    index length 4 -1 roll\n    2 copy le {\n        sub neg 2 idiv 4 -1 roll putinterval\n
    \   } {\n        2 copy sub 2 idiv \n        exch 6 -1 roll 3 1 roll getinterval\n
    \       exch pop 0 exch putinterval\n    } ifelse\n} bind def\n\n% --------------------
    Test Code ------------------\n(ABC) 10 Centering ==\n(ABCDEF) 10 Centering ==\n(ABCDEF)
    3 Centering ==\n(ABCDEF) 6 Centering ==\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6475'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/6475
  :user_name: genzou
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/12 17:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>組み込まれている関数で</p>\n\n\t"
  :code: |
    // 例（Stringクラスのメソッド）
    "Japanese".center(20)
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '8174'
  :parent_id: '87'
  :url: http://ja.doukaku.org/comment/8174
  :user_name: taninsw
  :user_url: /web/20090317033045/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/14 16:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なかなか面白い問題でした。</p>\n<p>最初は文字列が指定より長い場合、短かい場合の処理を別々に書いてたのですが、\n(空白を)「くわえる」と「削る」以外の部分は共通にできる事に気がつきました。</p>\n\n\t"
  :code: "center n str = let s = (n - length str)\n                   s1 = div s 2\n
    \                  s2 = s - s1\n               in reverse.format s2.reverse.format
    s1 $ str\n  where format n \n          | n &gt;= 0   =(replicate n ' '++)\n          |otherwise
    = drop (-n)\n"
  :tags: []
  :references:
    :url: 
    :title: 
