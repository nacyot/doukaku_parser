---
:id: '92'
:title: URL特殊文字のエスケープ
:comments:
- :id: '4156'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4156
  :user_name: にしお
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/11/17 15:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>URL用に特殊な文字をエスケープする。</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4165'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4165
  :user_name: SiroKuro
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/11/17 16:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  C# には Uri.EscapeUriString と Uri.EscapeDataString があります。\r\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            Console.WriteLine(Uri.EscapeUriString("~url quote/ほげ"));
                // ~url%20quote/%E3%81%BB%E3%81%92
            Console.WriteLine(Uri.EscapeDataString("~url quote/ほげ"));
                // ~url%20quote%2F%E3%81%BB%E3%81%92
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4468'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4468
  :user_name: odz
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/212/
  :language: JavaScript
  :time: 2007/11/28 15:57 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>escape は「+」をパーセントエンコードしてくれなかったりするので受け取る側が悲しいことになります。\nなので、encodeURIComponent
    のほうが良いかと。</p>\n\r\n\t"
  :code: |
    escape("+ =&amp;"); // =&gt; "+%20%3D%26"
    encodeURI("+ =&amp;"); // =&gt; "+%20=&amp;"
    encodeURIComponent("+ =&amp;"); // =&gt; "%2B%20%3D%26"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4166'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4166
  :user_name: nantan
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/535/
  :language: Java
  :time: 2007/11/17 17:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Javaだとこんな感じ</p>\n\r\n\t"
  :code: |
    import java.io.UnsupportedEncodingException;
    import java.net.URLEncoder;
    public class UrlEscape {
        public static void main(String[] args)
                throws UnsupportedEncodingException {
            String encoded = URLEncoder.encode("~url quote/ほげ", "UTF-8");
            System.out.println(encoded); // =&gt; %7Eurl+quote%2F%E3%81%BB%E3%81%92
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5699'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/5699
  :user_name: susu
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/02/07 14:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Ocamlnetのほうは空白をどちらに変換するか選択できます。</p>\n\r\n\t"
  :code: "(*Ocamlnetのnetstring\n  ocaml -I +pcre -I +netsys -I +netstring  \\\n    unix.cma
    pcre.cma netsys.cma netstring.cma*)\n    \n  open Netencoding;;\n(* ' ' &lt;-&gt;
    '+' *)\n  Url.encode \"~url quote\";;\n  Url.decode \"%7Eurl+quote\";;\n(* ' '
    &lt;-&gt; '%20' *)\n  Url.encode ~plus:false \"~url quote\" ;;\n  Url.decode ~plus:false
    \"%7Eurl%20quote\";;\n\n\n(*libcurl-ocaml(ocurl?)\n  ocaml -I +curl curl.cma*)\n
    \ Curl.escape \"~url quote\";; \n  Curl.unescape \"%7Eurl%20quote\";;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4158'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4158
  :user_name: にしお
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/11/17 15:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Pythonではurllibを使う。スペースは%20に置換される。</p>\n\r\n\t"
  :code: |
    import urllib
    urllib.quote("~url quote") #=&gt; '%7Eurl%20quote'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4170'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4170
  :user_name: shiro
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/11/17 21:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>Gaucheではrfc.uriモジュールを使います。</p>\n\r\n\t"
  :code: |
    gosh&gt; (use rfc.uri)
    #&lt;undef&gt;
    gosh&gt; (uri-encode-string "~url quote/ほげ")
    "~url%20quote%2f%c2%a4%db%a4%c2%b2"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4182'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4182
  :user_name: sumim
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/18 03:28 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  Squeak Smalltalk では、文字列に encodeForHTTP を送信します。\r\n\t"
  :code: |
    '~url quote' encodeForHTTP   "=&gt; '%7Eurl%20quote' "
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4211'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4211
  :user_name: nobsun
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/11/18 22:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Network.URIモジュールの escapeURIString を使います．このモジュールは，\r\nRFC3986に準拠しています．\r\newcapeURIString
    の型は (Char -&gt; Bool) -&gt; String -&gt; String で，\r\n第一引数にEscapeしなくてよい文字を判定する述語を渡します．\r\n\r\n\r\n*Main&gt;
    mapM_ putStrLn $ [ escape p x | p &lt;- [isUnreserved,isAllowedInURI,isUnescapedInURI],
    x &lt;- [sample0, sample1]]\r\n~url%20quote%2F%E3%81%BB%E3%81%92\r\n%21%28foo%2A%29\r\n~url%20quote/%E3%81%BB%E3%81%92\r\n!(foo*)\r\n~url%20quote/%E3%81%BB%E3%81%92\r\n!(foo*)\r\n\r\n</pre>\r\n\t"
  :code: |
    import Network.URI
    import Codec.Binary.UTF8.String
    import qualified System.IO.UTF8 as U

    escape p = escapeURIString p . encodeString

    unescape = decodeString . unEscapeString

    sample0 = "~url quote/ほげ"
    sample1 = "!(foo*)"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4759'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4759
  :user_name: mtsuyugu
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/12/11 16:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  cURLpp を使えば escape, unescape が用意されています。 curl が元になっているので [a-zA-Z0-9] 以外がエスケープされるようです。\r\n\t"
  :code: "#include &lt;cstdlib&gt;\r\n#include &lt;iostream&gt;\r\n#include &lt;curlpp/cURLpp.hpp&gt;\r\n\r\nusing
    namespace std;\r\nusing namespace cURLpp;\r\n\r\nint main ( int argc, char *argv[]
    ){\r\n   if( argc &lt; 2 ){\r\n      return EXIT_FAILURE;\r\n   }\r\n   string
    escaped = cURLpp::escape( argv[1] );\r\n   cout &lt;&lt; escaped &lt;&lt; endl;\r\n
    \  string unescaped = cURLpp::unescape( escaped );\r\n   cout &lt;&lt; unescaped
    &lt;&lt; endl;\r\n   return EXIT_SUCCESS;\r\n}\r\n"
  :tags: []
  :references:
    :url: /web/20100923074139/http://rrette.com/textpattern/index.php?s=cURLpp
    :title: cURLpp
- :id: '4157'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4157
  :user_name: にしお
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/1/
  :language: Ruby
  :time: 2007/11/17 15:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Rubyではcgiモジュールを使う。スペースは「+」に置換される。</p>\n\r\n\t"
  :code: |
    require "cgi"
    CGI.escape("~url quote") #=&gt; "%7Eurl+quote"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4203'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4203
  :user_name: mtsuyugu
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/18 13:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>libcurl を使う場合は curl_easy_escape を使ってエスケープできます。 [a-zA-Z0-9] 以外がエスケープされるようです。</p>\n\r\n\t"
  :code: |
    #include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include "curl/curl.h"

    int main( int argc, char *argv[] ){
       CURL *curl;
       char *escaped;

       if( argc &lt; 2 ){
          fprintf(stderr, "usage: %s url\n", argv[0] );
          return EXIT_FAILURE;
       }
       if( !(curl = curl_easy_init()) ){
          fprintf(stderr, "failed to init curl\n");
          return EXIT_FAILURE;
       }
       escaped = curl_easy_escape( curl, argv[1], 0 );
       curl_free( curl );

       if( !escaped ){
          fprintf(stderr, "failed to escape\n");
          return EXIT_FAILURE;
       }
       printf("%s\n", escaped );
       free( escaped );
       return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: /web/20100923074139/http://curl.haxx.se/libcurl/c/curl_easy_escape.html
    :title: curl_easy_escape
- :id: '4168'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4168
  :user_name: kkobayashi
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/11/17 19:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">CGIwithRというライブラリーにアンエスケープの関数はあったのですが、\r\nエスケープする関数はないようです。\r\n\r\n&gt;
    escape(\"~url quote/ほげ\")\r\n[1] \"%7eurl%20quote%2f%82%d9%82%b0\"\r\n</pre>\r\n\t"
  :code: |
    escape &lt;- function(str){
        paste(sapply(unlist(strsplit(str, "")),
                     function(s){ifelse((regexpr("\\W", s, perl=TRUE)[1] &gt; 0),
                                        paste("%", charToRaw(s), collapse="", sep=""), s)}), collapse="")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4167'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4167
  :user_name: nantan
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/535/
  :language: PHP
  :time: 2007/11/17 18:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>PHPです</p>\n\r\n\t"
  :code: |
    &lt;?= urlencode("^?~url quote/ほげ"); // =&gt; %7F%7Eurl+quote%2F%E3%81%BB%E3%81%92 ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4159'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4159
  :user_name: にしお
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/1/
  :language: JavaScript
  :time: 2007/11/17 15:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>JavaScriptではescapeが使える。JavaScriptも半角スペースは%20に置き換える。</p>\n\r\n\t"
  :code: |
    escape("~url quote") //=&gt; '%7Eurl%20quote'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4172'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4172
  :user_name: shiro
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/11/18 01:32 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <p>ちなみに、URI中でエスケープしなくて良い文字はRFC2396とRFC3986で若干異なっています。rfc.uriモジュールはRFC3986に従っていますが、キーワード引数を与えることで変えることが可能です。</p>\n\r\n\t"
  :code: |
    gosh&gt; (uri-encode-string "!(foo*)")
    "%21%28foo%2a%29"
    gosh&gt; (uri-encode-string "!(foo*)" :noescape *rfc2396-unreserved-char-set*)
    "!(foo*)"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4760'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4760
  :user_name: mtsuyugu
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/12/11 16:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>ログイン忘れてました…。だけではなんなので、\r\n少しだけ書き方を変えて短くしたものを。</p>\r\n\r\n\t"
  :code: "#include &lt;cstdlib&gt;\r\n#include &lt;iostream&gt;\r\n#include &lt;curlpp/cURLpp.hpp&gt;\r\n\r\nusing
    namespace std;\r\n\r\nint main ( int argc, char *argv[] ){\r\n   if( argc &lt;
    2 ){\r\n      return EXIT_FAILURE;\r\n   }\r\n   string escaped, unescaped;\r\n
    \  cout &lt;&lt; (escaped = cURLpp::escape( argv[1] )) &lt;&lt; endl;\r\n   cout
    &lt;&lt; (unescaped = cURLpp::unescape( escaped )) &lt;&lt; endl;\r\n   return
    EXIT_SUCCESS;\r\n}\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4276'
  :parent_id: '92'
  :url: http://ja.doukaku.org/comment/4276
  :user_name: cho45
  :user_url: /web/20100923074139/http://ja.doukaku.org/user/579/
  :language: Ruby
  :time: 2007/11/20 12:57 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <div class=\"section\">\n<p>uri でもでき、こちらのほうが柔軟です。\r</p>\n<p>\r</p>\n<p>第二引数にマッチする文字がエンコードされます。デフォルトは
    \ URI::UNSAFE で確認できます。</p>\n</div>\r\n\t"
  :code: |
    require "uri"

    p URI.escape("~url quote")
    #=&gt; "~url%20quote"
    p URI.escape("~url quote", /./)
    #=&gt; "%7E%75%72%6C%20%71%75%6F%74%65"

    p URI::UNSAFE
    #=&gt; /[^-_.!~*'()a-zA-Z¥d;\/?:@&amp;=+$,\[\]]/n
  :tags: []
  :references:
    :url: 
    :title: 
