---
:id: '212'
:title: 漢数字で九九の表
:comments:
- :id: '7820'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7820
  :user_name: syat
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/766/
  :language: Other
  :time: 2008/10/23 07:42 GMT
  :vote_count: '9'
  :vote_score: '7'
  :body: "\r\n\t  漢数字で九九の表を作ってください。\r<br>ただし以下の条件をつけます。\r<br><br>条件\r<br>一．アラビア数字（0～9）禁止。\r<br>　　プログラムにも出力結果にもアラビア数字を含んではいけない。（全角・半角とも）\r<br>二．結果の数字は、「七」とか「一○」(=10)とか「六四」(=64)のような形式とする。\r<br>三．九九の結果をそのままプログラム中に書き込んではいけない。\r<br><br>"
  :code: |
    出力例

    　一　　二　　三　　・・・・
    　二　　四　　六　　・・・・
    　三　　六　　九　　・・・・
    　四　　八　一二
    　・
    　・
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7821'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7821
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2008/10/23 17:08 GMT
  :vote_count: '4'
  :vote_score: '-4'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    var kanjinum = ["○", "一", "二", "三", "四", "五", "六", "七", "八", "九"];

    for(var x=1;x&lt;10;x++){
        var out_line="";
        for(var y=1;y&lt;10;y++){
            var wk = x*y;
            out_line += wk.toString().replace(/(\d)/g, function($1){ return kanjinum[$1] }) + "\t";
        }
        print(out_line);
    }
  :tags:
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '7822'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7822
  :user_name: sumim
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/10/23 17:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    | 漢数字 数字 スペーサ |
    漢数字 := {'' size asHexDigit -&gt; $○} as: Dictionary.
    '一二三四五六七八九' doWithIndex: [:各々 :値 | 漢数字 at: 値 asHexDigit put: 各々].
    World findATranscript: nil.
    数字 := 漢数字 keysSortedSafely allButFirst.
    スペーサ := '　　'.
    数字 do: [:左値 |
        Transcript cr.
        数字 do: [:右値 |
            | 積 |
            積 := 左値 asString * 右値 asString collect: [:各々 | 漢数字 at: 各々].
            Transcript nextPutAll: '　', (スペーサ, 積 last: スペーサ size)]].
    Transcript endEntry
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '7823'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7823
  :user_name: mc
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/10/23 14:14 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  あまり面白味のない解答ですが…。\r<br><br>　　一　　二　　三　　四　　五　　六　　七　　八　　九\r<br>　　二　　四　　六　　八　一○　一二　一四　一六　一八\r<br>　　三　　六　　九　一二　一五　一八　二一　二四　二七\r<br>　　四　　八　一二　一六　二○　二四　二八　三二　三六\r<br>　　五　一○　一五　二○　二五　三○　三五　四○　四五\r<br>　　六　一二　一八　二四　三○　三六　四二　四八　五四\r<br>　　七　一四　二一　二八　三五　四二　四九　五六　六三\r<br>　　八　一六　二四　三二　四○　四八　五六　六四　七二\r<br>　　九　一八　二七　三六　四五　五四　六三　七二　八一\n\t"
  :code: "(defconstant +漢数字+ \"○一二三四五六七八九\")\n\n(defun 亜剌比亜数字至漢数字 (n)\n  (map 'string
    (lambda (x) (aref +漢数字+ (parse-integer (string x))))\n       (princ-to-string
    n)))\n\n(let ((一 (position #\\一 +漢数字+))\n      (九 (position #\\九 +漢数字+)))\n  (loop
    :for x :from 一 :to 九 \n        :do (loop :for y :from 一 :to 九 \n                  :do
    (format t \"~@3,,,'　A\" (亜剌比亜数字至漢数字 (* x y))))\n            (terpri)))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7824'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7824
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2008/10/23 20:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>やっぱ、<strong>use utf8</strong> の <strong>8</strong> もダメだよね…。\n</p>\n\n\n\n\t"
  :code: |
    use strict; use warnings;

    my $utf_hachi;
    BEGIN{
        $utf_hachi = 'utf'.length('........');
        require "$utf_hachi.pm";
        $utf_hachi-&gt;import
    }
    $^O =~ /Win\d\d/ ? binmode STDOUT, 'encoding(Shift_JIS)'
                     : binmode STDOUT, $utf_hachi
                     ;

    my @字 = (qw/〇 一 ニ 三 四 五 六 七 八 九/);
    my @数 = @字;
    shift @数;
    my @順 = @数;

    while( shift @順 ){
        my $段 = scalar(@数) - scalar( @順 );
        my @奄 = @数;
        my $積 = scalar( () );
        while( shift @奄 ){
            $積 += $段;
            $積 =~ /(?&lt;十の位&gt;.)?(?&lt;一の位&gt;.)$/ ;
            my $答 = $+{十の位}? $字[$+{十の位}] : '  ' ;
            $答 .= $字[$+{一の位}] ;
            print "  $答";
        }
        print "\n";
    }

    __END__
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7825'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7825
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/23 20:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>あ、そうか3かw　余計なことをしましたw</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7826'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7826
  :user_name: mc
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/10/23 20:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  出力の整形の為にいらないことをしてアラビア数字を紛れ込ませていたので修正しました(^^;\n\t"
  :code: "(defconstant +漢数字+ \"○一二三四五六七八九\")\n\n(defun 亜剌比亜数字至漢数字 (n)\n  (map 'string
    (lambda (x) (aref +漢数字+ (parse-integer (string x))))\n       (princ-to-string
    n)))\n\n(let ((一 (position #\\一 +漢数字+))\n      (九 (position #\\九 +漢数字+)))\n  (loop
    :for x :from 一 :to 九 \n        :do (loop :for y :from 一 :to 九 \n                  :do
    (format t \"~A \" (亜剌比亜数字至漢数字 (* x y))))\n            (terpri)))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7827'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7827
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/10/23 18:06 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">tenをnumberの外に出すかどうかは悩みどころ。\r\n#define succ(n)
    ((n) + one)\r\n#define ten succ(nine)\r\n</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    enum number { zero, one, two, three, four, five, six, seven, eight, nine, ten };

    char *suuji[] = { "○", "一", "二", "三", "四", "五", "六", "七", "八", "九", };

    int
    main()
    {
            int r, c, k, l;

            for (r = one; r &lt; ten; r++) {
                    for (c = one; c &lt; ten; c++) {
                            k = (r * c) / ten;
                            l = (r * c) % ten;
                            printf("%s%s ", k ? suuji[k] : "  ", suuji[l]);
                    }
                    printf("\n");
            }
            return zero;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7828'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7828
  :user_name: sawat
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/322/
  :language: Java
  :time: 2008/10/24 01:23 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>特にひねりもないけど。</p>\n\n\t"
  :code: |
    public class Kuku {
        static final char[] KANJI = "〇一二三四五六七八九".toCharArray();
        static final int ONE = "一".length(), TEN = KANJI.length;

        public static void main(String[] args) {
            for (int i = ONE; i &lt; TEN; i++) {
                for (int j = ONE; j &lt; TEN; j++) {
                    int n = i * j;
                    System.out.printf(" %c%c", n &lt; TEN ? '　' : KANJI[(n / TEN)],
                            KANJI[(n % TEN)]);
                }
                System.out.println();
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7829'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7829
  :user_name: wtnabe
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/843/
  :language: Ruby
  :time: 2008/10/24 01:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  全然面白みはないですが Ruby 1.8 で書いてみました。いちばん苦労したのは表示の際の桁数合わせです。このご時世になぁと思いながら
    jcode を利用してしまいました。\r\n\n\t"
  :code: |
    #! /usr/bin/env ruby

    $KCODE='u'
    require 'jcode'

    def num_chars
      return %w(〇 一 二 三 四 五 六 七 八 九)
    end

    def main
      ichi_kara_kyuu.each { |i|
        dan = ''
        ichi_kara_kyuu.each { |j|
          kotae = kanji( i * j )
          dan += " " + (( kotae.jsize &lt; int( '二' ) ) ? "　" + kotae : kotae)
        }
        puts dan
      }
    end

    def ichi_kara_kyuu
      return (int( '一' )..int( '九' ))
    end

    def int( kanji )
      return num_chars.index( kanji )
    end

    def kanji( num )
      kanji = ''

      num.to_s.split('').each { |digit|
        kanji += num_chars[digit.to_i]
      }

      return kanji
    end

    main()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7830'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7830
  :user_name: leftovercrack
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/942/
  :language: Groovy
  :time: 2008/10/23 21:14 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  ざつですが・・。\n\t"
  :code: |
    def kanji = ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
    def nums = (1..9) as List
    println nums.collect{i-&gt;
      nums.collect{
        new String(it*i+"").collect{n-&gt; kanji[(n+"").toInteger()]}.join().padLeft(2,"　")+" "
      }.join(" ")
    }.join("\n")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7831'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7831
  :user_name: leftovercrack
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/942/
  :language: 
  :time: 2008/10/23 21:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ぁ・・・・(1..9) orz\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7832'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7832
  :user_name: leftovercrack
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/942/
  :language: 
  :time: 2008/10/23 21:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ぉ・・・・2....orz\nでなおします・・。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7833'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7833
  :user_name: turugina
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/760/
  :language: VB
  :time: 2008/10/23 21:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">英語はみんなやってるのでローマ数字で</pre>\n\t"
  :code: |
    Module Doukaku
        Enum Roman As Integer
            NONE
            I
            II
            III
            IV
            V
            VI
            VII
            VIII
            IX
            X
        End Enum
        Dim Japanize As String() = {"〇", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"}
        Sub Main()
            For row As Roman = Roman.I To Roman.IX
                For col As Roman = Roman.I To Roman.IX
                    Dim ans As Integer = row * col

                    If ans &lt; Roman.X Then
                        Console.Write("  ")
                        Console.Write(Japanize(ans))
                    Else
                        Console.Write(Japanize(ans / Roman.X))
                        Console.Write(Japanize(ans Mod Roman.X))
                    End If
                    Console.Write(" ")
                Next
                Console.WriteLine("")
            Next
            Console.ReadLine()
        End Sub
    End Module
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7834'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7834
  :user_name: turugina
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/760/
  :language: 
  :time: 2008/10/24 02:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">見直してみたら\r\n「みんな」じゃなかった(現時点で英単語識別子を使ってるのはCとJavaだけ)\r\nごめんなさい
    m(_ _)m</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7835'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7835
  :user_name: baal
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/827/
  :language: Scheme
  :time: 2008/10/24 02:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  SRFI-13 使えないのは厳しい。\r<br>digit-&gt;integer を使わないように書いてみた。\r<br>"
  :code: |
    (define 漢数字 "○一二三四五六七八九")

    (define (文字列内位置 文字列 文字)
        (let 繰 ((栗鼠 (string-&gt;list 文字列)) (結果 '()))
            (if (and (pair? 栗鼠) (not (char=? 文字 (car 栗鼠))))
                (繰 (cdr 栗鼠) (cons (car 栗鼠) 結果))
                (length 結果))))

    (define (九九 甲 乙)
        (define 零 (+))
        (define 基数 (string-length 漢数字))
        (let 繰 ((数 (* (文字列内位置 漢数字 甲) (文字列内位置 漢数字 乙))) (結果 '()))
            (let ((商 (quotient 数 基数)) (余 (remainder 数 基数)))
                (if (= 零 商 余)
                    (list-&gt;string (map (lambda (数) (string-ref 漢数字 数)) 結果))
                    (繰 商 (cons 余 結果))))))

    (define (九九一覧)
        (for-each
            (lambda (甲)
                (for-each
                    (lambda (乙)
                        (display (string #\space))
                        (display (九九 甲 乙)))
                    (cdr (string-&gt;list 漢数字)))
                (newline))
            (cdr (string-&gt;list 漢数字))))

    (九九一覧)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7836'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7836
  :user_name: caitsith
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/602/
  :language: PHP
  :time: 2008/10/24 03:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>php5。\n出題は九九なので余計ですが、出力時の桁あわせを9以上の数字にも対応しています。</p>\n\n\t"
  :code: |
    $nums = array("〇", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一");
    $start = array_search("一", $nums);
    end($nums);
    $digit = strlen(key($nums) * key($nums));
    for ($i = $start; $i &lt; count($nums); $i++) {
        for ($j = $start; $j &lt; count($nums); $j++) {
            $res = str_split(str_pad($i * $j, $digit, " ", STR_PAD_LEFT));
            foreach ($res as $row) {
                if ($row == " ") {
                    print("　");
                } else {
                    print($nums[$row]);
                }
            }
            print("　");
        }
        print("\n");
    }
  :tags:
  - php5
  :references:
    :url: 
    :title: 
- :id: '7837'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7837
  :user_name: caitsith
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/602/
  :language: PHP
  :time: 2008/10/23 22:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ついでに。php4でも動作するはず。</p>\n\n\t"
  :code: |
    $nums = array("〇", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十", "十一");
    $start = array_search("一", $nums);
    end($nums);
    $digit = strlen(key($nums) * key($nums));
    for ($i = $start; $i &lt; count($nums); $i++) {
        for ($j = $start; $j &lt; count($nums); $j++) {
            $res = str_pad($i * $j, $digit, " ", STR_PAD_LEFT);
            for ($k = $digit - $digit; $k &lt; $digit; $k++) {
                $num = substr($res, $k, $start);
                if ($num == " ") {
                    print("　");
                } else {
                    print($nums[$num]);
                }
            }
            print("　");
        }
        print("\n");
    }
  :tags:
  - php4
  :references:
    :url: 
    :title: 
- :id: '7838'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7838
  :user_name: あにす
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2008/10/23 22:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  こんな感じで出力されました。\r<br><br>　一　　二　　三　　四　　五　　六　　七　　八　　九\r<br>　二　　四　　六　　八　一〇　一二　一四　一六　一八\r<br>　三　　六　　九　一二　一五　一八　二一　二四　二七\r<br>　四　　八　一二　一六　二〇　二四　二八　三二　三六\r<br>　五　一〇　一五　二〇　二五　三〇　三五　四〇　四五\r<br>　六　一二　一八　二四　三〇　三六　四二　四八　五四\r<br>　七　一四　二一　二八　三五　四二　四九　五六　六三\r<br>　八　一六　二四　三二　四〇　四八　五六　六四　七二\r<br>　九　一八　二七　三六　四五　五四　六三　七二　八一\n\t"
  :code: "using System;\nusing System.Collections.Generic;\n\nclass Program {\n    static
    List&lt;char&gt; 漢数字List = new List&lt;char&gt;(new char[] { '〇', '一', '二', '三',
    '四', '五', '六', '七', '八', '九' });\n    \n    static void Main(string[] args) {\n
    \       char[] 一To九 = new char[] { '一', '二', '三', '四', '五', '六', '七', '八', '九'
    };\n        foreach(char i in 一To九) {\n            foreach(char j in 一To九) {\n
    \               int answer = 漢数字ToInt(i) * 漢数字ToInt(j);\n                string
    answerStr = intTo漢数字(answer);\n                Console.Write(answerStr.PadLeft(\"##\".Length,
    '　') + '　');\n            }\n            Console.WriteLine();\n        }\n    }\n\n
    \   static int 漢数字ToInt(char 漢数字) {\n        return 漢数字List.IndexOf(漢数字);\n    }\n\n
    \   static string intTo漢数字(int int_) {\n        string r = int_.ToString();\n
    \       foreach(char i in int_.ToString()) {\n            r = r.Replace(i, 漢数字List[int.Parse(i.ToString())]);\n
    \       }\n        return r;\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7839'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7839
  :user_name: leftovercrack
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/942/
  :language: Other
  :time: 2008/10/24 03:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  修正・・・orz\n\t"
  :code: |
    def 数字 = "〇一二三四五六七八九十"
    def 計算数字 = 数字[数字.indexOf("一")..数字.indexOf("九")] as List
    def 範囲 = 計算数字.collect{漢数字-&gt; 数字.indexOf(漢数字) }
    println 範囲.collect{段-&gt;
      範囲.collect{掛-&gt;
        new String(段*掛+"").collect{数-&gt; 数字[(数+"").toInteger()]}.join().padLeft(数字.indexOf("二"),"　")+" "
      }.join(" ")
    }.join("\n")
  :tags:
  - Groovy
  :references:
    :url: 
    :title: 
- :id: '7840'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7840
  :user_name: leftovercrack
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/942/
  :language: Groovy
  :time: 2008/10/24 06:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  ごめんなさい。。\r\n言語指定わすれたので・・・・。\n\t"
  :code: |
    def 数字 = "〇一二三四五六七八九十"
    def 計算数字 = 数字[数字.indexOf("一")..数字.indexOf("九")] as List
    def 範囲 = 計算数字.collect{漢数字-&gt; 数字.indexOf(漢数字) }
    println 範囲.collect{段-&gt;
      範囲.collect{掛-&gt;
        new String(段*掛+"").collect{数-&gt; 数字[(数+"").toInteger()]}.join().padLeft(数字.indexOf("二"),"　")+" "
      }.join(" ")
    }.join("\n")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7841'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7841
  :user_name: nido
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/589/
  :language: Scala
  :time: 2008/10/24 03:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>Scalaの勉強始めたので習作です。</p>\n</div>\n\t"
  :code: |
    object Kuku {
      def main(args: Array[String]) = {
        val kansuji = "〇一二三四五六七八九".toCharArray.map{_.toString}
        for (y &lt;- kansuji if (y != kansuji.first)) {
          for (x &lt;- kansuji if (x != kansuji.first)) {
            val mul = kansuji.indexOf(x) * kansuji.indexOf(y)
            if (mul &gt;= kansuji.size) {
              print (kansuji(mul / kansuji.size) + kansuji(mul % kansuji.size) + "\t")
            } else {
              print (kansuji(mul) + "\t")
            }
          }
          println
        }
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7842'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7842
  :user_name: M.Suzuki
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/771/
  :language: Haskell
  :time: 2008/10/24 05:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">基本的な数字を作ってから・・・なので、目新しさはありません。</pre>\n\t"
  :code: |
    k = ["一","二","三","四","五","六","七","八","九"]
    ku = "  ":k
    kl = "〇":k

    main = putStrLn $ concat [str (x*y) | x &lt;- [one..nine] ,y &lt;- [one-one..nine]]
        where
            one = ten - nine
            nine = length k
            ten = length ku
            str n
                | n &lt; one   = "\n"
                | otherwise = "  " ++ ku!!u ++ kl!!l
                where
                    (u,l) = divMod n ten
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7843'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7843
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2008/10/24 06:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すみません、大ボケしてました。\r\n訂正します。</pre>\n\t"
  :code: |
    var kn = ["○", "一", "二", "三", "四", "五", "六", "七", "八", "九"];

    kn.forEach(function(x, xi, a){
        if(!xi)return;
        var out_line="";
        kn.forEach(function(y, yi){
            if(!yi)return;
            var v = xi*yi;
            out_line += v.toString().replace(/\d/g, function(m){return a[m]}) + "\t";
        });
        print(out_line);
    });
  :tags:
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '7844'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7844
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2008/10/24 06:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">同じですけど、kn を消したバージョン</pre>\n\t"
  :code: |
    ["○", "一", "二", "三", "四", "五", "六", "七", "八", "九"].forEach(function(x, xi, a){
        if(!xi)return;
        var out_line="";
        a.forEach(function(y, yi){
            if(!yi)return;
            var v = xi*yi;
            out_line += v.toString().replace(/\d/g, function(m){return a[m]}) + "\t";
        });
        print(out_line);
    });
  :tags:
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '7846'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7846
  :user_name: kozima
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/164/
  :language: OCaml
  :time: 2008/10/24 12:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>組み込みの数値を一切使わないで書いてみました。わりと教科書的。</p>\n\n\t"
  :code: |
    type digit = | Zero | One | Two | Three | Four | Five
                 | Six | Seven | Eight | Nine

    let next_digit = function
        Zero -&gt; One | One -&gt; Two | Two -&gt; Three | Three -&gt; Four
      | Four -&gt; Five | Five -&gt; Six | Six -&gt; Seven | Seven -&gt; Eight
      | Eight -&gt; Nine | Nine -&gt; raise (Invalid_argument "next_digit, nine")
    let prev_digit = function
        One -&gt; Zero | Two -&gt; One | Three -&gt; Two | Four -&gt; Three
      | Five -&gt; Four | Six -&gt; Five | Seven -&gt; Six | Eight -&gt; Seven
      | Nine -&gt; Eight | Zero -&gt; raise (Invalid_argument "prev_digit, zero")

    let succ = function
      | (Nine, Nine) -&gt; raise (Invalid_argument "succ, ninety-nine")
      | (x, Nine)    -&gt; (next_digit x, Zero)
      | (x, y)       -&gt; (x, next_digit y)
    let pred = function
      | (Zero, Zero) -&gt; raise (Invalid_argument "pred, zero")
      | (x, Zero)    -&gt; (prev_digit x, Nine)
      | (x, y)       -&gt; (x, prev_digit y)
    let rec (@+) m n =
      match m with
        | (Zero, Zero) -&gt; n
        | _ -&gt; succ (pred m @+ n)
    let rec (@*) m n =
      if m = (Zero, Zero) then (Zero, Zero)
      else n @+ (pred m @* n)

    let string_of_digit = function
      | Zero  -&gt; "〇" | One   -&gt; "一" | Two   -&gt; "二" | Three -&gt; "三"
      | Four  -&gt; "四" | Five  -&gt; "五" | Six   -&gt; "六" | Seven -&gt; "七"
      | Eight -&gt; "八" | Nine  -&gt; "九"
    let string_of_number = function
      | (Zero, y) -&gt; "  " ^ string_of_digit y
      | (x, y)    -&gt; string_of_digit x ^ string_of_digit y

    let digit_list = [One; Two; Three; Four; Five; Six; Seven; Eight; Nine]
    let _ =
      let nums = List.map (fun x -&gt; (Zero, x)) digit_list in
      let products = List.map (fun m -&gt; List.map (fun n -&gt; m @* n) nums) nums in
      let prod_strings = List.map (List.map string_of_number) products in
      let rows = List.map (String.concat "  ") prod_strings in
        List.iter print_endline rows
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7848'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7848
  :user_name: mc
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/10/24 13:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  そもそもformat指示子が間違ったやつを貼ってました(^^;\r<br>みんな良くみてるなー。\n\t"
  :code: "(defconstant +漢数字+ \"○一二三四五六七八九\")\n\n(defun 亜剌比亜数字至漢数字 (n)\n  (map 'string
    (lambda (x) (aref +漢数字+ (parse-integer (string x))))\n       (princ-to-string
    n)))\n\n(let ((一 (position #\\一 +漢数字+))\n      (三 (position #\\三 +漢数字+))\n      (九
    (position #\\九 +漢数字+)))\n  (loop :for x :from 一 :to 九 \n        :do (loop :for
    y :from 一 :to 九 \n                  :do (format t \"~V,,,'　@A\" 三 (亜剌比亜数字至漢数字
    (* x y))))\n            (terpri)))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7849'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7849
  :user_name: 99yen
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/10/24 13:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>日本語プログラミング言語ですが、特段漢字に強いわけではないので、普通に・・・(^ ^;</p>\n\n\t"
  :code: |
    ●数値化(sを)～kのsを配列検索
    k="〇,一,二,三,四,五,六,七,八,九"を","で区切る
    一="一"を数値化。九="九"を数値化。六="六"を数値化
    aで一から九まで繰り返す
        bで一から九まで繰り返す
            c=""
            (a*b)を文字列分解して反復
                c=c&amp;k[対象]
            cを六で文字列右寄せして継続表示
        改行を継続表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7850'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7850
  :user_name: genzou
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/10/24 13:31 GMT
  :vote_count: '3'
  :vote_score: '-3'
  :body: "\n\t  <p>二番煎じ！！！</p>\n\n\t"
  :code: |
    l = ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"]
    1.upto(9){ x -&gt;
        1.upto(9){ y -&gt;
            print((x*y).toString().collect{ l[it as int] }.join("").padLeft(3, "　"))
        }
        println()
    }
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '7851'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7851
  :user_name: emasaka
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/10/24 15:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>やりはじめてから、位置パラメータを指定できない罠に気づきました。</p>\n\n\t"
  :code: |
    #!/bin/bash
    digit=(○ 一 二 三 四 五 六 七 八 九)

    漢数字出力() {
        local n=$*
        local -i i
        ((n &lt; ${#digit[@]})) &amp;&amp; echo -n '　'
        for ((;i &lt; ${#n}; i++)) {
            echo -n ${digit[${n:$i:$#}]}
        }
    }

    九九一段() {
        local -i m=$*
        local -i n
        for ((;++n &lt; ${#digit[@]};)) {
            漢数字出力 $((m * n))
            echo -n ' '
        }
    }

    九九() {
        local -i m
        for ((;++m &lt; ${#digit[@]};)) {
            九九一段 $m
            echo
        }
    }

    九九
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7852'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7852
  :user_name: leque
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/10/24 16:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>どうせだから dotimes も自前で実装して vanilla R5RS で。</p>\n\n\t"
  :code: |
    (define-syntax dotimes
      (syntax-rules ()
        ((_ (?v ?l) body ...)
         (do ((lim ?l)
              (?v (+) (+ ?v (*))))
             ((&gt;= ?v lim))
           body ...))))

    (let* ((n-str "○一二三四五六七八九")
           (ten (string-length n-str))
           (nine (- ten (*))))
      (define (kan-suzi n)
        (let loop ((n n)
                   (rs '()))
          (if (&lt; n ten)
              (apply string
                     (reverse (map (lambda (i) (string-ref n-str i)) (cons n rs))))
              (let ((q (quotient n ten))
                    (r (remainder n ten)))
                (loop r (cons q rs))))))
      (dotimes (i nine)
        (dotimes (j nine)
          (display " ")
          (display (kan-suzi (* (+ i (*)) (+ j (*))))))
        (newline)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7853'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7853
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/10/24 16:47 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  \n\t"
  :code: |
    #coding: utf-8
    knums = list(u"〇一二三四五六七八九")
    one, ten = int(True), len(knums)
    for i in range(one, ten):
        for j in range(one, ten):
            hi = i * j / ten
            print u"%s%s" % (hi and knums[hi] or u'　', knums[i * j % ten]),
        print
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7854'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7854
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/24 17:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>あ。\nutf-8のエンコード指定はまずいのか。\n思いっきり罠にはまってしまいました。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7855'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7855
  :user_name: leque
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/10/24 19:31 GMT
  :vote_count: '4'
  :vote_score: '0'
  :body: "\n\t  <p>Lisp らしく（？）</p>\n\n\t"
  :code: |
    (use gauche.collection)

    (define-syntax &lt;&gt;
      (syntax-rules ()
        ((_()) (+))
        ((_(x)) (+ (&lt;&gt; x) (*)))))

    (define (main args)
      (do ((i (&lt;&gt;(())) (+ i (&lt;&gt;(())))))
          ((&gt; i (&lt;&gt;(((((((((()))))))))))))
        (do ((j (&lt;&gt;(())) (+ j (&lt;&gt;(())))))
            ((&gt; j (&lt;&gt;(((((((((()))))))))))))
          (format #t "¥t‾A"
                  (map-to &lt;string&gt; (cut string-ref "〇一二三四五六七八九" &lt;&gt;)
                          (map digit-&gt;integer (number-&gt;string (* i j))))))
        (newline))
      0)
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '7857'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7857
  :user_name: syat
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/766/
  :language: 
  :time: 2008/10/24 22:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Mozilla系でしか使えないようだけど forEachは便利ですね。\r<br>手持ちのFirebug/ff3でも動きました。\r<br>（もちろん print → console.log で。printだと印刷を試みやがる）\r<br>漢数字の変換に正規表現を使ってるところで+1\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20090413231533/https://developer.mozilla.org/Ja/Core_JavaScript_1.5_Reference/Global_Objects/Array/ForEach
    :title: Mozilla Developer Center
- :id: '7858'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7858
  :user_name: sna
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/819/
  :language: Scala
  :time: 2008/10/25 02:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">表示用の漢数字は無限リストで。\r\n乗算は数値を使わずリストで表現。</pre>\n\t"
  :code: "object MultiplicationTable {\n  \n  def main(args: Array[String]) {\n    \n
    \   val kns = \"〇一二三四五六七八九\".map(_.toString).toList\n    lazy val knns: Stream[String]
    =\n      kns.toStream append knns.tail.flatMap{ knn =&gt; kns.map(knn + _) }\n
    \   val fknns = knns.map{ knnn =&gt;\n      knnn.replaceAll(\"^.$\", \"　\").replaceAll(\"[^　]+\",
    \"\") + knnn }\n    \n    lazy val ds: Stream[List[Unit]] =\n      Stream.cons(List(()),
    ds.map(() :: _)) take kns.tail.length\n    val dds = ds.toList.map{ d =&gt; ds.toList.map(_.flatMap{
    v =&gt; d }) }\n    \n    dds foreach { dd =&gt;\n      dd foreach { d =&gt;\n
    \       print(\" \" + fknns(d.length))\n      }\n      println\n    }\n    \n
    \ }\n  \n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7859'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7859
  :user_name: matyr
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/343/
  :language: Other
  :time: 2008/10/25 15:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>覚え立てのNemerleで</p>\n\n\t"
  :code: |
    def Digits = "○一二三四五六七八九";
    def Ten = Digits.Length;
    def OneToNine = $[Ten/Ten .. Ten-Ten/Ten];

    foreach(i in OneToNine)
      System.Console.WriteLine(OneToNine.FoldLeft("", (j, s) =&gt; {
        def n = i * j;
        $"$s $(if(n &lt; Ten) '　' else Digits[n / Ten])$(Digits[n % Ten])" }));
  :tags: []
  :references:
    :url: /web/20090413231533/http://nemerle.org/
    :title: Nemerle
- :id: '7860'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7860
  :user_name: pooq
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/10/25 19:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">J言語での日本語の扱いがまだよくわかっていません。\r\nこれは、windows用GUI版の場合です。\r\n最初に九九のテーブルをつくり、文字に変換してから\r\n'0123456789'を'〇一二三四五六七八九'に置換しています。</pre>\n\t"
  :code: "load 'strings'\na=.(s=.verb+dyad)u:'〇一二三四五六七八九'\nb=.;/adverb\":i.#a  \nc=.,(\":*/~&gt;:i.&lt;:#a),.LF\nc
    rplc (b,.;/a),' ';s u:'　'\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7861'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7861
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2008/10/26 04:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">forEash を使わないバージョン</pre>\n\t"
  :code: |
    var k=["○", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
    var size=k.length;
    var step=null;
    var l;

    while(++step&lt;(l=size)){
        var out_line = "";
        var over = null;
        for(var pos=step;--l;pos+=step){
            if(pos&gt;=size){
                over++;
                pos -= size;
            }
            out_line += (over ? k[over] : "") + k[pos] + "\t";
        }
        print(out_line);
    }
  :tags:
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '7863'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7863
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/26 04:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  forEash → forEach\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7865'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7865
  :user_name: susu
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/218/
  :language: 
  :time: 2008/10/26 08:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  こうすればenumごと消えちゃいます^^。\r<br>#define arrlen(a) (sizeof(a)/sizeof(*a))\r<br>int ten = arrlen(suuji);\r<br>int one = ten/ten;\r<br>int zero = (int)(long)NULL;\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7867'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7867
  :user_name: pooq
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/10/27 01:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">置換の部分を変えてみました。\r\n\r\n＠＠一＠＠二＠＠三＠＠四＠＠五＠＠六＠＠七＠＠八＠＠九\r\n＠＠二＠＠四＠＠六＠＠八＠一〇＠一二＠一四＠一六＠一八\r\n＠＠三＠＠六＠＠九＠一二＠一五＠一八＠二一＠二四＠二七\r\n＠＠四＠＠八＠一二＠一六＠二〇＠二四＠二八＠三二＠三六\r\n＠＠五＠一〇＠一五＠二〇＠二五＠三〇＠三五＠四〇＠四五\r\n＠＠六＠一二＠一八＠二四＠三〇＠三六＠四二＠四八＠五四\r\n＠＠七＠一四＠二一＠二八＠三五＠四二＠四九＠五六＠六三\r\n＠＠八＠一六＠二四＠三二＠四〇＠四八＠五六＠六四＠七二\r\n＠＠九＠一八＠二七＠三六＠四五＠五四＠六三＠七二＠八一\r\n</pre>\n\t"
  :code: |
    t=:ucp'〇一二三四五六七八九'
    ;rows((-verb){.(ucp'＠＠'),[:{&amp;t(#t)&amp;#.inv)&amp;.&gt;&lt;"noun*/~&gt;:i.&lt;:#t
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7868'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7868
  :user_name: ckbx
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/893/
  :language: Python
  :time: 2008/10/27 02:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">一行Pythonで343 bytes.\r\n\r\ncoding指定を使わずに一行で書くのに苦労した…。\r\nSJISのbinaryで無理やり吐かせています。\r\n</pre>\n\t"
  :code: |
    S,I,R,Z='  ',True,range,ord;A=Z('A');D=Z('K')-A;P,Q,T=R(D),R(I,D),[''.join(map(lambda x,y:chr((Z(x)-
    A)*(Z('Q')-A)+Z(y)-A),h,l))for(h,l)in zip(['IF','IO','JP','IE','IG','IN','JF','IL','JK','IO'],['BK',
    'IK','DB','OP','OM','MM','IK','OF','EK','LD'])];print'\n'.join([S.join([[([S]+T[I:])[m]+T[n]for m in
    P for n in P][i*j]for i in Q])for j in Q])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7869'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7869
  :user_name: tenka
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/664/
  :language: C
  :time: 2008/10/27 03:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">intの代わりにcharでforループさせてみただけです。\r\n出力結果はこんな風になります。\r\n　　一　　二　　三　　四　　五　　六　　七　　八　　九\r\n　　二　　四　　六　　八　一○　一二　一四　一六　一八\r\n　　三　　六　　九　一二　一五　一八　二一　二四　二七\r\n　　四　　八　一二　一六　二○　二四　二八　三二　三六\r\n　　五　一○　一五　二○　二五　三○　三五　四○　四五\r\n　　六　一二　一八　二四　三○　三六　四二　四八　五四\r\n　　七　一四　二一　二八　三五　四二　四九　五六　六三\r\n　　八　一六　二四　三二　四○　四八　五六　六四　七二\r\n　　九　一八　二七　三六　四五　五四　六三　七二　八一</pre>\n\t"
  :code: "using System;\n\nclass Kankuku\n{\n    static void Main(string[] args)\n
    \   {\n        char[] kanji = new char[] { '○', '一', '二', '三', '四', '五', '六',
    '七', '八', '九' };\n        char zero = 'a';\n        for (char ca = 'b'; ca &lt;=
    'j'; ca++)\n        {\n            int value;\n            for (char cb = 'b';
    cb &lt;= 'j'; cb++)\n            {\n                if ((value = (int)((ca - zero)
    * (cb - zero))) &lt; kanji.Length)\n                    Console.Write(\"　　\" +
    kanji[value]);\n                else \n                    Console.Write(\"　\"
    + kanji[value / kanji.Length] + kanji[value % kanji.Length]);\n            }\n
    \           Console.WriteLine();\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7870'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7870
  :user_name: Nemo
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/10/27 07:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>PostScript で。</p>\n<p>なでしこ に憧れつつ書いてみました。</p>\n\n\t"
  :code: |
    %!PS
    % 文字コードt : euc-jp

    % マクロ定義
    /漢数字 [(０) (一) (二) (三) (四) (五) (六) (七) (八) (九)] def
    /空命令 {{}} bind def
    /定義する {def} bind def
    /として 空命令 定義する
    /は 空命令 として 定義する
    /の は 空命令 として 定義する
    /に は 空命令 として 定義する
    /を は 空命令 として 定義する
    /と は 空命令 として 定義する
    /て は 空命令 として 定義する
    /で は 空命令 として 定義する
    /長さ は {length} として 定義する
    /コピーし は {dup} として 定義する
    /入れ替え は {exch} として 定義する
    /足し は {add} として 定義する
    /掛け は {mul} として 定義する
    /引き は {sub} として 定義する
    /引い は {sub} として 定義する
    /で割った余り は {mod} として 定義する
    /割り は {idiv} として 定義する
    /捨てる は {pop} として 定義する
    /指定回数繰り返す は {for} として 定義する
    /一 は [()] の 長さ として 定義する
    /番目をコピー は {一 を 引い て index} として 定義する

    /たもの は 空命令 として 定義する
    /から は 空命令 として 定義する
    /まで は 空命令 として 定義する
    /する は 空命令 として 定義する
    /づつ は 空命令 として 定義する
    /もし は 空命令 として 定義する
    /して は 空命令 として 定義する
    /であったら は 空命令 として 定義する
    /を実行する は {if} として 定義する
    /を実行し、さもなくば は 空命令 として 定義する
    /をかわりに実行する は {ifelse} として 定義する
    /以上 は {ge} として 定義する
    /番目を取り出す {get} として 定義する


    % ここからメイン
    /二 は 一 を コピーし 足し たもの として 定義する
    /三 は 一 と 二 を 足し たもの として 定義する
    /四 は 二 と 二 を 足し たもの として 定義する
    /九 は 三 を コピーし 掛け たもの として 定義する
    /十 は 四 に 二 と 三 を 掛け て 足し たもの として 定義する
    /改行する は {() =} として 定義する
    /出力する は {print} として 定義する
    /漢数字変換 は {
      コピーし て 十 で割った余り を 漢数字 と 入れ替え て 番目を取り出す
      入れ替え て
      もし コピーし て 十 以上 であったら
      {
          十 で 割り 漢数字 と 入れ替え て 番目を取り出す
      } を実行し、さもなくば
      {
          捨てる
          (　) % 全角空白
      } をかわりに実行する
    } として 定義する


    一 から 一 づつ 九 まで {
        一 から 一 づつ 九 まで {
        二 番目をコピー して 掛け
            漢数字変換 して 出力する 出力する ( ) を 出力する
        } を 指定回数繰り返す
        捨てる
        改行する
    } を 指定回数繰り返す
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7878'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7878
  :user_name: emasaka
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/852/
  :language: sed
  :time: 2008/10/28 11:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">sedでの罠は、正規表現の後方参照でした。\r\n実行例。\r\n\r\n$ echo
    | sed -nf kuku.sed\r\n 　一 　二 　三 　四 　五 　六 　七 　八 　九\r\n 　二 　四 　六 　八 一○ 一二 一四 一六
    一八\r\n 　三 　六 　九 一二 一五 一八 二一 二四 二七\r\n 　四 　八 一二 一六 二○ 二四 二八 三二 三六\r\n 　五 一○ 一五
    二○ 二五 三○ 三五 四○ 四五\r\n 　六 一二 一八 二四 三○ 三六 四二 四八 五四\r\n 　七 一四 二一 二八 三五 四二 四九 五六 六三\r\n
    　八 一六 二四 三二 四○ 四八 五六 六四 七二\r\n 　九 一八 二七 三六 四五 五四 六三 七二 八一\r\n</pre>\n\t"
  :code: |
    #!/bin/sed -nf
    s/.*/i@o: i/
    :row
      h
      s/@/:/
      :num
        s/:o/:oo/
        s/ i*$/&amp;&amp;/
        G
        s/\n//
        s/@.*//
      /ooooooooo/!b num
      # print
      s/^.*://
      s/iiiiiiiiii/x/g
      s/ i/ 　i/g
      s/x /x○ /g
      s/xxxxxxxxx\|iiiiiiiii/九/g
      s/xxxxxxxx\|iiiiiiii/八/g
      s/xxxxxxx\|iiiiiii/七/g
      s/xxxxxx\|iiiiii/六/g
      s/xxxxx\|iiiii/五/g
      s/xxxx\|iiii/四/g
      s/xxx\|iii/三/g
      s/xx\|ii/二/g
      s/x\|i/一/g
      p
      # next
      g
      s/.*/i&amp;i/
    /^iiiiiiiiii/!b row
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7880'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7880
  :user_name: nori
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/10/29 02:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>条件四：\n表をファイルから読み込まない。\nKYです。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7881'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7881
  :user_name: nori
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2008/10/28 22:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  alabic_to_jpをalabic2jpと書いていた自分を発見して吹きそうになった。\r<br><br>succとentity referenceを利用したコードも着想はしたが面倒なのでやめた。\r<br><br>def succ(n):\r<br> return n + len(((),))\r<br>を作って、%sで数字の文字列を作り、結果はブラウザでみるということです。\r<br>「〇一二三四五六七八九」を埋め込まなくてすみますが、code generatorでも作らないとbfすぎ。\n\t"
  :code: |
    #!/usr/bin/python
    # -*- coding=sjis -*-

    JP_NUMERIC_LETTERS = u'〇一二三四五六七八九'
    BASE = len(JP_NUMERIC_LETTERS)

    def alabic_to_jp(alabic):
      d, m = divmod(alabic, BASE)
      if d:
        return alabic_to_jp(d) + JP_NUMERIC_LETTERS[m]
      else:
        return JP_NUMERIC_LETTERS[m]

    for i, m in enumerate(JP_NUMERIC_LETTERS):
      for j, n in enumerate(JP_NUMERIC_LETTERS):
        if i and j:
          print alabic_to_jp(i*j),
      print
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7882'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7882
  :user_name: nori
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2008/10/28 23:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>結果はブラウザで閲覧します。</p>\n\n\t"
  :code: "#!/usr/bin/python\n# -*- coding=us-ascii-*-\n\ndef zero():\n    return len(())\ndef
    succ(n):\n    return n+len(((),))\n\nZERO = zero()\nONE = succ(ZERO)\nTWO = succ(ONE)\nTHREE
    = succ(TWO)\nFOUR = succ(THREE)\nFIVE = succ(FOUR)\nSIX = succ(FIVE)\nSEVEN =
    succ(SIX)\nEIGHT = succ(SEVEN)\nNINE = succ(EIGHT)\n\nK_ZEOR = (ONE,TWO,TWO,NINE,FIVE)\nK_ONE
    = (ONE,NINE,NINE,SIX,EIGHT)\nK_TWO = (TWO,ZERO,ONE,ZERO,EIGHT)\nK_THREE = (ONE,NINE,NINE,SEVEN,SEVEN)\nK_FOUR
    = (TWO,TWO,TWO,THREE,FIVE)\nK_FIVE = (TWO,ZERO,ONE,ONE,SIX)\nK_SIX = (TWO,ZERO,EIGHT,FOUR,FIVE)\nK_SEVEN
    = (ONE,NINE,NINE,SEVEN,ONE)\nK_EIGHT = (TWO,ZERO,EIGHT,FOUR,THREE)\nK_NINE = (TWO,ZERO,ZERO,SIX,ONE)\n\nKANJI_NUMS
    = (K_ZEOR, K_ONE, K_TWO, K_THREE, K_FOUR, \n              K_FIVE, K_SIX, K_SEVEN,
    K_EIGHT, K_NINE)\n\nBASE = len(KANJI_NUMS)\n\ndef tuple_to_code(t):\n  return
    '&amp;#' + ''.join(['%i'%s for s in t]) + ';'\n\ndef alabic_to_jp(alabic):\n  d,
    m = divmod(alabic, BASE)\n  if d:\n    return alabic_to_jp(d) + tuple_to_code(KANJI_NUMS[m])\n
    \ else:\n    return tuple_to_code(KANJI_NUMS[m])\n\nprint \"&lt;html&gt;&lt;table&gt;\"\nfor
    i in range(BASE):\n  print \"&lt;tr&gt;\",\n  for j in range(BASE):\n    if i
    and j:\n      print \"&lt;td&gt;\", alabic_to_jp(i*j), \"&lt;/td&gt;\",\n  print
    \"&lt;/tr&gt;\"\nprint \"&lt;/table&gt;&lt;/html&gt;\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7893'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7893
  :user_name: yattom
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/335/
  :language: awk
  :time: 2008/10/29 18:52 GMT
  :vote_count: '3'
  :vote_score: '-3'
  :body: "\n\t  <p>ごくごくベタに書きました。</p>\n\n\t"
  :code: |
    BEGIN {
      kanjis[" "] = "　"
      kanjis["0"] = "〇"
      kanjis["1"] = "一"
      kanjis["2"] = "二"
      kanjis["3"] = "三"
      kanjis["4"] = "四"
      kanjis["5"] = "五"
      kanjis["6"] = "六"
      kanjis["7"] = "七"
      kanjis["8"] = "八"
      kanjis["9"] = "九"

      for(i = 1; i &lt;= 9; i++) {
        line = ""
        for(j = 1; j &lt;= 9; j++) {
          line = line kanji(sprintf("%3d", i*j))
        }
        print line
      }
    }

    function kanji(s,   i) {
      result = ""
      for(i = 0; i &lt; length(s); i++) {
        result = result kanjis[substr(s, i + 1, 1)]
      }
      return result
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7894'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7894
  :user_name: yattom
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/335/
  :language: 
  :time: 2008/10/29 18:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>すみません、問題文をよく読んでませんでした。プログラム中でも数字禁止なんですね。</p>\n<p>出直します。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7896'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7896
  :user_name: yattom
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/335/
  :language: awk
  :time: 2008/10/30 00:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ベタなうえにダメな感じです。。。文字列の長さを数字代わりに使っています。</p>\n\n\t"
  :code: "BEGIN {\n  kanjis = \"〇一二三四五六七八九\"\n\n  for(i = \"*\"; i != \"**********\";
    i = i \"*\") {\n    line = \"\"\n    for(j = \"*\"; j != \"**********\"; j = j
    \"*\") {\n      num = sprintf(\"%d\", length(i \"\")*length(j \"\"))\n      while(length(num)
    &lt; length(\"***\")) {\n        num = \" \" num\n      }\n      line = line kanji(num)\n
    \   }\n    print line\n  }\n}\n\n\nfunction kanji(s,   result, i) {\n  result
    = \"\"\n  for(i = length(result \"*\"); i &lt;= length(s); i++) {\n    c = substr(s,
    i, length(\"*\"))\n    if(c == \" \") { \n      result = result \"　\"\n      continue\n
    \   }\n    c++\n    result = result substr(kanjis, c, length(\"〇\"))\n  }\n  return
    result\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7898'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7898
  :user_name: greentea
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/573/
  :language: Python
  :time: 2008/10/29 22:50 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">UTF-8なPython使いへの嫌がらせか！と思ったら、\r\n# coding: UTF\r\nでUTF-8認識してくれるらしいですね。\r\nhttp://www.python.jp/doc/2.4/lib/standard-encodings.html\r\nの「別名」欄にあったのでやってみたらできました。\r\n\r\nindex使うのはズルいですかねぇ。</pre>\n\t"
  :code: |
    #!/usr/bin/python
    # encoding: UTF

    num_ten = u"　一二三四五六七八九"
    num_one = u"〇一二三四五六七八九"

    nums = [i+j for i in num_ten for j in num_one]

    for i in num_ten[num_ten.find(u"一"):]:
            for j in num_one[num_one.find(u"一"):]:
                    print nums[num_ten.index(i)*num_one.index(j)],
            print ""
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7901'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7901
  :user_name: ckbx
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/893/
  :language: Python
  :time: 2008/10/30 01:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">さらに縮めて282bytes.\r\n埋め込みSJIS文字列の持たせ方を変えました。</pre>\n\t"
  :code: |
    S,I,Z='  ',True,ord;A=Z(' ');P,F=range(Z('*')-A),lambda h,l:chr((Z(h)-A)*(A&gt;&gt;I)+Z(l)-A);
    Q,T=P[I:],[F(a,b)+F(c,d)for(a,b,c,d)in'(!%* ((.* )#/! (.$/ (.&amp;, (,-, )(%* (.+% )$** (+.#'.split()];
    print'\n'.join([S.join([[([S]+T[I:])[m]+T[n]for m in P for n in P][i*j]for i in Q])for j in Q])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7904'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7904
  :user_name: edirol
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/945/
  :language: Java
  :time: 2008/10/30 09:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>日付の押せるはんこをイメージして書きました。(realが回転してるイメージ)</p>\n<p>+とか-も使いたくなかったのですが、、、</p>\n\n\t"
  :code: "ublic class kuku {\n\n    static String[] kuku={ \"一\", \"二\", \"三\", \"四\",
    \"五\", \"六\", \"七\", \"八\", \"九\", };\n    static String[] Wten={ \"○\", \"一\",
    \"二\", \"三\", \"四\", \"五\", \"六\", \"七\", \"八\", \"九\", };\n    static final String
    num=\"〇一二三四五六七八九\";\n    static String real=num;\n    static String ans;\n    public
    static void main(String[] args) {\n\n        for(String s:kuku){\n            char
    ch;\n            int interval=num.indexOf(s);\n            int ten=Wten.length-Wten.length;\n
    \           \n            real=num;\n            for(int i=interval;i&lt;kuku.length+interval;i++){\n
    \               \n                if(real.length()&lt;=interval){\n                    real+=num;\n
    \                   ten++;\n                }ch=real.charAt(interval);\n                real=real.substring(interval);\n
    \               ans=Wten[ten]+ch;\n                if(ans.startsWith(\"○\")){\n
    \                   ans=ans.replace(\"○\", \"\");\n                }\n                System.out.print(ans+\"
    \");\n            }\n            System.out.println();\n        }\n    \n    }\n\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7908'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7908
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/31 17:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">#define arrlen(a) (sizeof(a)/sizeof(*a)) \r\nは、\r\n#define
    arrlen(a) (sizeof(a)/sizeof*(a))\r\nのほうが良い書き方。もっと問題はその2行後の\r\nint zero = (int)(long)NULL;
    \r\nで、これではzeroが0になる保証がありません。\r\nint zero = one - one;\r\nですかね。もっとC言語を勉強してください。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7913'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7913
  :user_name: syat
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/766/
  :language: 
  :time: 2008/11/01 00:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  えらくシンプルだなぁと思ったら、７行目の一文だけで、「　一」～「九九」の漢数字を生成してるんですね。Pythonカコイイとおもいました。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7914'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7914
  :user_name: pooq
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/11/01 04:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">#7898を真似して桁ごとに置き換えるのではなく、数字をまるごと\r\n置き換えるようにした。\r\n</pre>\n\t"
  :code: |
    a=.ucp'一二三四五六七八九'
    b=.ucp'＠'
    c=.ucp'〇'
    ;rows(*/~&gt;:i.#a){,{b;(b,a);c,a
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7916'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7916
  :user_name: susu
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/218/
  :language: 
  :time: 2008/11/01 11:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>はい。出直してきます。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7917'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7917
  :user_name: kkobayashi
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/11/01 10:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>outerかわいいです</p>\n\n\t"
  :code: |
    number.lhs &lt;- unlist(strsplit("　一二三四五六七八九", ''))
    number.rhs &lt;- unlist(strsplit("〇一二三四五六七八九", ''))
    s &lt;- length(NA)
    e &lt;- length(number.lhs) - s
    number.tbl &lt;- t(outer(number.lhs, number.rhs, paste, sep=""))
    outer(s:e, s:e, function(x,y) number.tbl[x*y+s])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7955'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/7955
  :user_name: taguo
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/806/
  :language: C
  :time: 2008/11/05 08:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    using System.Linq;

    namespace Doukaku
    {
        static class 漢数字で九九の表
        {
            public static void Run()
            {
                var k = "〇一二三四五六七八九";
                var ki = k.Select( ( n, i ) =&gt; new { n, i } ).Skip( k.Length / k.Length );
                var r = from q in ki
                        from w in ki
                        let ca = ( q.i * w.i ).ToString().Select( c =&gt; k[ int.Parse( c.ToString() ) ] ).ToArray()
                        select new string( ca ).PadLeft( "   ".Length, '　' ) + ( w.n == k.Last() ? Environment.NewLine : "" );
                r.ToList().ForEach( Console.Write );
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8007'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8007
  :user_name: ika
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/654/
  :language: D
  :time: 2008/11/09 21:34 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  <p>defineEnumは列挙型と、列挙型&lt;=&gt;文字列を相互変換する関数を定義するテンプレートです。</p>\n\n\t"
  :code: |
    private import std.stdio : write, writeln;
    private import std.string : repeat;
    private import std.typecons : defineEnum;
    private import std.utf : toUTF32;

    mixin(defineEnum!("数", uint, "〇", "一", "二", "三", "四", "五",
                                  "六", "七", "八", "九", "十"));
    enum 空白 = "　";

    dstring 文字列化(数 かず) {
        string もじれつ;
        while(かず) {
            もじれつ = enumToString(かず % 数.十) ~ もじれつ;
            かず /= 数.十;
        }
        return もじれつ.toUTF32;
    }

    void main() {
        foreach(い; 数.一 .. 数.十) {
            foreach(ろ; 数.一 .. 数.十) {
                auto もじれつ = 文字列化(い * ろ);
                write(空白.repeat(3 - もじれつ.length), もじれつ);
            }
            writeln();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8009'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8009
  :user_name: pa
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/943/
  :language: Other
  :time: 2008/11/09 23:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">日本語のテスト。\r\n数値の定数を作るのにlenを利用。\r\n(匿名さんのPerlのコードを見てしまったのでそのまま借用)\r\nもっと美しくかけないものかな？\r\n\r\n出力は省略。</pre>\n\t"
  :code: |
    implement dZIZ;

    include "sys.m";
    include "draw.m";

    dZIZ: module{
        sys: Sys;
        init: fn(ctx: ref Draw-&gt;Context, argv: list of string);
        main: fn();
    };

    main()
    {
        num:= array[] of {
            "〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"
        };
        spc := "　";

        zero, one, ten: int;
        i, j: int;
        u, l: int;

        zero = len "";
        one = zero; one++;
        ten = len num;

        for(i = one; i &lt; ten; i++){
            for(j = one; j &lt; ten; j++){
                l = (i * j) % ten;
                u = (i * j) / ten;
                sys-&gt;print("%s", spc);
                if(u == zero){
                    sys-&gt;print("%s", spc);
                }else{
                    sys-&gt;print("%s", num[u]);
                }
                sys-&gt;print("%s", num[l]);
            }
            sys-&gt;print("\n");
        }
    }

    init(ctx: ref Draw-&gt;Context, argv: list of string)
    {
        sys = load Sys Sys-&gt;PATH;

        main ();
    }
  :tags:
  - Limbo
  :references:
    :url: 
    :title: 
- :id: '8017'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8017
  :user_name: ika
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/654/
  :language: D
  :time: 2008/11/10 08:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>修正.</p>\n\n\t"
  :code: |
    private import std.stdio : write, writeln;
    private import std.string : repeat;
    private import std.typecons : defineEnum;

    mixin(defineEnum!("数", uint, "〇", "一", "二", "三", "四", "五",
                                  "六", "七", "八", "九", "十"));
    enum 空白 = "　";

    dstring toDString(string s) {
        dstring ds;
        foreach(dchar dc; s) ds ~= dc;
        return ds;
    }

    dstring 文字列化(数 かず) {
        string もじれつ;
        while(かず) {
            もじれつ = enumToString(かず % 数.十) ~ もじれつ;
            かず /= 数.十;
        }
        return もじれつ.toDString;
    }

    void main() {
        foreach(い; 数.一 .. 数.十) {
            foreach(ろ; 数.一 .. 数.十) {
                auto もじれつ = 文字列化(い * ろ);
                write(空白.repeat(数.三 - もじれつ.length), もじれつ);
            }
            writeln();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8050'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8050
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2008/11/19 15:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #!/usr/bin/perl
    use strict;
    use warnings;

    my @kansuji = qw/〇 一 二 三 四 五 六 七 八 九/;

    for my $i (@kansuji){
        next unless get_int($i);
        for my $j(@kansuji){
            next unless get_int($j);
            my $product = "";
            $product .= $kansuji[$_] for(split(//,get_int($i)*get_int($j)));
            until(length($product) == length("　　　")){
                $product = "　".$product;
            }
            print $product;
        }
        print "\n";
    }
    sub get_int{
        my $kanji = shift;
        my $i;
        for(@kansuji){
            last if($kanji eq $_);
            $i++;
        }
        return $i;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8051'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8051
  :user_name: Songmu
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/763/
  :language: Perl
  :time: 2008/11/19 09:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #!/usr/bin/perl
    use strict;
    use warnings;

    my @kansuji = qw/〇 一 二 三 四 五 六 七 八 九/;

    for my $i (@kansuji){
        next unless get_int($i);
        for my $j(@kansuji){
            next unless get_int($j);
            my $product = "";
            $product .= $kansuji[$_] for(split(//,get_int($i)*get_int($j)));
            until(length($product) == length("　　　")){
                $product = "　".$product;
            }
            print $product;
        }
        print "\n";
    }
    sub get_int{
        my $kanji = shift;
        my $i;
        for(@kansuji){
            last if($kanji eq $_);
            $i++;
        }
        return $i;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8058'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8058
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2008/11/20 00:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Rubyっぽいかしらん？\nshiftjisでやりました。</p>\n\n\t"
  :code: |
    $KCODE='s'
    require 'jcode'

    #漢数字の配列
    kan = "○一二三四五六七八九".split(//)

    #九九を左見だし（縦見だし？）付で入れる配列の配列を用意
    result = []
    for i in kan
      result &lt;&lt; [i,[]]
    end

    #漢数字をArray#indexで九九して漢数字に戻して配列の配列に入れる。
    for i in kan
      for j in kan
        result.assoc(i).last &lt;&lt; (kan.index(i) * kan.index(j)).to_s.split(//).map{|x|kan[x.to_i]}.join("")
      end
    end


    #resultのはじめは"○"なのでshift
    result.shift

    #配列のはじめは"○"なのでshift
    for i in result
      i.last.shift
    end

    #フォーマット（最後の全角スペースはsubで削除）
    format = ("%#{kan.first.size + kan.first.size}s　" * kan.size).sub(/　$/,"")

    #見出しの出力。はじめの"○"は"　"に変換。
    puts (format % kan).sub("○","　")

    #九九の出力
    for i in result
      puts format % i.flatten
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8106'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8106
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: Prolog
  :time: 2008/12/02 19:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  不細工なことになりました。\r\nnot(_)のあたり何とかならんかな.\n\t"
  :code: |
    漢数字(〇,[]).
    漢数字(一,[_]).
    漢数字(二,[_,_]).
    漢数字(三,[_,_,_]).
    漢数字(四,[_,_,_,_]).
    漢数字(五,[_,_,_,_,_]).
    漢数字(六,[_,_,_,_,_,_]).
    漢数字(七,[_,_,_,_,_,_,_]).
    漢数字(八,[_,_,_,_,_,_,_,_]).
    漢数字(九,[_,_,_,_,_,_,_,_,_]).
    九九 :-
       漢数字(A,L1),
       漢数字(B,L2),
       not(A=〇),
       not(B=〇),
       九九(L1,L2,[],[],X,Y),
       九九解表示(L2,X,Y),
       fail.
    九九.

    九九([],_,[],Y1,'　',Y) :- 漢数字(Y,Y1),!.
    九九([],_,X1,Y1,X,Y) :- 漢数字(X,X1),漢数字(Y,Y1),!.
    九九(L1,L2,L3,[_,_,_,_,_,_,_,_,_,_|R],X,Y) :-
        九九(L1,L2,[_|L3],R,X,Y),!.
    九九([_|R1],L2,L3,L4,X,Y) :-
        append(L2,L4,L5),
        九九(R1,L2,L3,L5,X,Y).

    九九解表示([_,_,_,_,_,_,_,_,_],X,Y) :-
       format('%t%t\n',[X,Y]),!.
    九九解表示(_,X,Y) :-
       format('%t%t ',[X,Y]).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8107'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8107
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/12/02 19:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  リストよりf(f(0))の表現の方が\r\nスッキリ書けるかな。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8108'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8108
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2008/12/03 00:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  前に投稿したものにアラビア数字が\r\n含まれていると友人から指摘がありました。\r\n私の仕様の読み違えでした。\r\nformat/2を\r\nIF/Prologの組込述語
    write_formatted/2に\r\n変更しました。\n\t"
  :code: |
    漢数字(〇,[]).
    漢数字(一,[_]).
    漢数字(二,[_,_]).
    漢数字(三,[_,_,_]).
    漢数字(四,[_,_,_,_]).
    漢数字(五,[_,_,_,_,_]).
    漢数字(六,[_,_,_,_,_,_]).
    漢数字(七,[_,_,_,_,_,_,_]).
    漢数字(八,[_,_,_,_,_,_,_,_]).
    漢数字(九,[_,_,_,_,_,_,_,_,_]).

    九九 :-
       漢数字(U,A),
       漢数字(W,B),
       not(U=〇),
       not(W=〇),
       九九(A,B,[],[],X,Y),
       九九解表示(B,X,Y),
       fail.
    九九.

    九九([],_,[],A,'　',Y) :-
        漢数字(Y,A),!.
    九九([],_,U,W,X,Y) :-
        漢数字(X,U),漢数字(Y,W),!.
    九九(A,B,C,[_,_,_,_,_,_,_,_,_,_|R],X,Y) :-
        九九(A,B,[_|C],R,X,Y),!.
    九九([_|R],B,C,D,X,Y) :-
        append(B,D,E),
        九九(R,B,C,E,X,Y).

    九九解表示([_,_,_,_,_,_,_,_,_],X,Y) :-
       write_formatted('%t%t\n',[X,Y]),!.
    九九解表示(_,X,Y) :-
       write_formatted('%t%t ',[X,Y]).

    :- 九九.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8109'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8109
  :user_name: 匿名
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/12/03 11:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>言語指定を誤り、PrologでなくOtherに\nアラビア数字を削った訂正版を載せました。\n仕様を読み違えてました。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8691'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8691
  :user_name: silverwire
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2009/03/18 06:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">バッチで。\r\n\r\n環境変数ERRORLEVELに無理矢理値を代入すると、終了ステータスが\r\n
    1になる性質を利用しています。\r\n\r\n  e.g.\r\n    C:\\&gt;212.bat\r\n        一    二    三    四
    \   五    六    七    八    九\r\n        二    四    六    八  一〇  一二  一四  一六  一八\r\n
    \       三    六    九  一二  一五  一八  二一  二四  二七\r\n        四    八  一二  一六  二〇  二四
    \ 二八  三二  三六\r\n        五  一〇  一五  二〇  二五  三〇  三五  四〇  四五\r\n        六  一二  一八
    \ 二四  三〇  三六  四二  四八  五四\r\n        七  一四  二一  二八  三五  四二  四九  五六  六三\r\n        八
    \ 一六  二四  三二  四〇  四八  五六  六四  七二\r\n        九  一八  二七  三六  四五  五四  六三  七二  八一\r\n\r\nなお、19行目のcall
    set ...の部分は以下を参考にしました。</pre>\n\t"
  :code: "@echo off\nsetlocal enabledelayedexpansion\n  set 〇=%ERRORLEVEL%\n  set
    ERRORLEVEL=\n  set 一=%ERRORLEVEL%\n  \n  set i=%〇%\n  for %%i in (一 二 三 四 五 六
    七 八 九) do (\n    set /a i+=%一%\n    set %%i=!i!\n  )\n  \n  for /l %%i in (%一%,%一%,%九%)
    do (\n    set t=\n    for /l %%j in (%一%,%一%,%九%) do (\n      set /a v=%%i*%%j\n
    \     set /a q=!v!/%一%%〇%\n      \n      for %%i in (〇 一 二 三 四 五 六 七 八 九) do call
    set v=%%v:!%%i!=%%i%%\n      \n      if !q! equ %〇% set v=  !v!\n      set t=!t!
    \ !v!\n    )\n    echo !t!\n  )\nendlocal\n"
  :tags: []
  :references:
    :url: /web/20090413231533/http://d.hatena.ne.jp/jak-san/20090108/1231368522
    :title: 漢数字で九九の表を出力するバッチファイル
- :id: '8728'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8728
  :user_name: pooq
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/606/
  :language: BASIC
  :time: 2009/03/26 09:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">十進BASICで。</pre>\n\t"
  :code: |
    LET k$ = "〇一二三四五六七八九"
    LET j = LEN(k$)
    LET i = j / j
    LET q = j - i
    FOR y = i TO q
       FOR x = i TO q
          LET t$ = STR$(y * x)
          LET s$ = ""
          FOR m = i TO LEN(t$)
             LET s$ = s$ &amp; mid$(k$,VAL(t$(m : m)) + i , i)
          NEXT M
          PRINT USING "&gt;####" : s$ ;
       NEXT X
       PRINT
    NEXT Y
    END
  :tags:
  - 十進BASIC
  :references:
    :url: 
    :title: 
- :id: '8788'
  :parent_id: '212'
  :url: http://ja.doukaku.org/comment/8788
  :user_name: rennos
  :user_url: /web/20090413231533/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/04/05 10:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>せこい気がする。</p>\n\n\t"
  :code: "#define ZERO $\n#define ONE     length(a)\n#define NINE (length(kanji) -
    ONE)\n#define TEN   length(kanji)\n\n    kanji = \"○\", \"一\", \"二\", \"三\", \"四\",
    \"五\", \"六\", \"七\", \"八\", \"九\"\n    sdim buf\n    \n    buf = \"　　\"\n    repeat
    NINE, ONE\n        buf += \" | 　\"+ kanji(cnt)\n    loop\n    buf += \"\\n ―――――――――――――――――――――――――――――――――\\n\"\n
    \   \n    repeat NINE, ONE\n        x     = cnt\n        sline = kanji(cnt)\n
    \       \n        repeat NINE, ONE\n            y   = cnt\n            num = x
    * y\n            r   = kanji(num \\ TEN)\n            l   = kanji(num / TEN)    //
    十の位\n            if ( l == kanji(ZERO) ) {\n                l = \"　\"\n            }\n
    \           sline += \" | \"+ l + r\n        loop\n        buf += \"　\"+ sline
    +\"\\n\"\n    loop\n    mes buf\n    stop\n"
  :tags: []
  :references:
    :url: 
    :title: 
