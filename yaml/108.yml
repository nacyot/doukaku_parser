---
:id: '108'
:title: 魔方分割数
:comments:
- :id: '4702'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4702
  :user_name: xsd
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/154/
  :language: 
  :time: 2007/12/09 10:26 GMT
  :vote_count: '8'
  :vote_score: '8'
  :body: "\r\n\t  1 .. N^2までの数をN個の数字の和が等しいN個のグループに分けたいと思います。\r<br><br>たとえば、N=3のときは、\r<br>(1) { 1, 5, 9 }, { 2, 6, 7 }, { 3, 4, 8 } \r<br>(2) { 1, 6, 8 }, { 2, 4, 9 }, { 3, 5, 7 }\r<br>の2通りの方法があります。\r<br><br>ここで指定されたNに対して、何通りのグループ分けの方法があるかを数えるプログラムを作ってください。\r<br>(何通りかという値だけが出力されればよいのですが、予め計算してある結果を返すのはダメですよ。)\r<br>また、N=5を指定したときの実行時間もあわせて教えてください。\r<br><br>なお、数え上げるときの注意として、\r<br><br>・{ 1, 5, 9 } と { 1, 9, 5 }は同じもの\r<br><br>・{ 1, 5, 9 }, { 2, 6, 7 }, { 3, 4, 8 }と\r<br>　{ 1, 5, 9 }, { 3, 4, 8 }, { 2, 6, 7 }は同じもの\r<br>とすることに注意してください。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4814'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4814
  :user_name: ところてん
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/12/14 20:44 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">実装がナイーブ過ぎてN=4が実行できませんでした。\r\n\r\n平均値計算の式が↓のようになっていて、これに気づくのに三十分かかった。\r\nave
    = N*(N*2+1) / 2\r\n\r\n枝狩りをもうちょっとがんばるかなぁ。\r\nアルゴリズムはこんな感じ。\r\n１．総当りでペアを出す\r\n２．ペアをソートする\r\n３．文字列にキャストしてsetにぶち込んでユニーク化\r\n４．何個残ってるか？\r\n\r\nコード書き終わってから、魔方陣の書き方って確かあったよなぁ。\r\nと思って、Wikipedia先生に聞いてみたら二次元用であった。\r\nこれを応用すれば、うまいこと出てこないかなぁ。</pre>\n\t"
  :code: "import copy\nimport time\ndef mahobunkatsu(N):\n    m = set()\n    for i
    in xrange(1,N**2+1):\n        m.add(i)\n    ave = N*(N**2+1) / 2\n    \n    def
    createPair(restNumber,numberSum, pair, count, pairList):\n        for i in restNumber:\n
    \           if count and (count+1)%N == 0:\n                if numberSum + i ==
    ave:\n                    if count+1 == N**2:\n                        pair.append(i)\n
    \                       pairList.append(copy.copy(pair))\n                        pair.pop()\n
    \                       continue\n                else:\n                    continue\n
    \           if numberSum + i &gt; ave:\n                continue\n            restNumber.remove(i)\n
    \           pair.append(i)\n            createPair(restNumber, (numberSum + i)
    % ave, pair, count + 1, pairList)\n            restNumber.add(i)\n            pair.pop()\n
    \       return\n\n    pairList = []\n    createPair(m, 0, [], 0, pairList)\n\n
    \   def listToSortedPairs(pairList):\n        temp = []\n        for l in pairList:\n
    \           temp.append([])\n            for i in range(N):\n                temp[-1].append(l[i*N:(i+1)*N])\n
    \               temp[-1][-1].sort()\n                temp[-1].sort()\n        return
    temp\n\n    sortedList = listToSortedPairs(pairList)\n\n    uniqueList = set()\n
    \   for x in sortedList:\n        uniqueList.add(str(x))\n\n    print uniqueList\n
    \   return uniqueList\n\n\nt = time.time()\nfor x in range(2,6):\n    n = len(mahobunkatsu(x))\n
    \   print \"Size=\",x,\"Mahozin_num=\",n,\"time=\",time.time()-t\n    t = time.time()\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4815'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4815
  :user_name: ところてん
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/12/14 20:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">投稿してから、プログラムにあまり影響しないバグを見つけた。\r\n39行目、タブが一個多いです。\r\n要素を一個追加するごとにソートしているので、不毛。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4816'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4816
  :user_name: Y
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/428/
  :language: Mathematica
  :time: 2007/12/14 21:21 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">グループ未定の数字の最初のものpは、まだ決まってないグループ(X)に。\r\nXの残りの(n-1)個は、残っている数字から、和が(s/n-p)になるものとする。\r\n最後まで行ったらカウンタに1加算。\r\n初めに戻る。\r\n\r\n（ComplementやSubsetsは常にソートされている）\r\n\r\nIn[3]:=
    f[3]\r\nOut[3]= 2\r\n\r\nIn[4]:= f[4]\r\nOut[4]= 392（Core2 6700で0.06秒）\r\n\r\nIn[5]:=
    f[5]\r\nOut[5]= 3245664（Core2 6700で690秒）</pre>\n\t"
  :code: |
    f[n_] := f[Range[n^2], n, Total@Range[n^2]/n]

    f[in_, n_, s_] :=
      If[Length@in == n, 1,
        Total[f[Complement[Rest@in, #], n, s] &amp; /@ (
        Select[Subsets[Rest@in, {n - 1}], First@in + Total@# == s &amp;])]]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4817'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4817
  :user_name: jijixi
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/582/
  :language: OCaml
  :time: 2007/12/14 23:42 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  それなりの工夫はしたつもりだけど、それでも超遅い...orz\r<br>答が合ってるのかすら心配。\r<br><br>Mac OS X 10.5 / PPC G5/1.6GHz mem 1GB な環境で、\r<br><br>% time ./numbers.native 4\r<br>n = 4 =&gt; 151 patterns\r<br>./numbers.native 4  0.03s user 0.01s system 27% cpu 0.141 total\r<br><br>n = 5 は 5 分くらい待っても終わらなかったのであきらめた。\r<br>方針としては、\r<br><br>* 各セットの合計は 1 ~ n までの合計を n で割ったものになるので、そうなる組み合わせを生成\r<br>* 先頭が 1 ~ n のものが並ぶはずなので、そこまでしか計算しない\r<br>* OCaml の Set モジュールは整列済みなので、それを利用して多少枝刈りしているつもり\r<br><br>といった感じ。\r<br>n = 5 が終わらないのは、メモリ使用量の問題もありそうなので、完全なセットを作ってしまわずに逐次表示するようなアプローチにすれば、もう少し何とかなるかも。\r<br><br>でももう頭がパンクしそうなので、とりあえずこれで。\n\t"
  :code: |
    module NS = Set.Make(
    struct
       type t = int
       let compare = Pervasives.compare
    end)

    module SS = Set.Make(
    struct
       type t = NS.t
       let compare = NS.compare
    end)

    module LS = Set.Make(
    struct
       type t = SS.t
       let compare = SS.compare
    end)

    let make_set_with_sum n =
       let rec loop set sum = function
          | 0  -&gt; (set, sum)
          | n' -&gt; loop (NS.add n' set) (sum + n') (n' - 1)
       in
       loop NS.empty 0 n

    let ns_map f ns = NS.fold (fun s acc -&gt; NS.add (f s) acc) ns NS.empty
    let ss_map f ss = SS.fold (fun s acc -&gt; SS.add (f s) acc) ss SS.empty
    let ls_map f ls = LS.fold (fun s acc -&gt; LS.add (f s) acc) ls LS.empty

    let rec take_subsets set num limit =
       if NS.is_empty set || NS.cardinal set &lt; num || NS.choose set &gt; limit
       then SS.empty
       else begin
          match num with
          | 1 -&gt;
               if NS.mem limit set
               then SS.singleton (NS.singleton limit)
               else SS.empty
          | n when n &gt; 1 -&gt;
               let result = ref SS.empty in
               NS.iter begin fun i -&gt;
                  let set' = NS.remove i set in
                  let num' = num - 1 in
                  let limit' = limit - i in
                  begin match take_subsets set' num' limit' with
                  | s when SS.is_empty s -&gt; ()
                  | ss -&gt; result := SS.union !result (ss_map (NS.add i) ss)
                  end
               end set;
               !result
          | _ -&gt; invalid_arg "num is required positive number."
       end

    let make_sets n =
       if n &lt; 2 then invalid_arg "required greater than or equal to 2.";
       let full, max = make_set_with_sum (n * n) in
       let heads, _  = make_set_with_sum n in
       let diff  = NS.diff full heads in
       let limit = max / n in
       let subsets =
          NS.fold begin fun i acc -&gt;
             LS.add
                (ss_map (NS.add i) (take_subsets diff (n - 1) (limit - i)))
                acc
          end heads LS.empty
       in
       let inters =
          let hd = LS.choose subsets in
          let tl = LS.remove hd subsets in
          LS.fold begin fun ss acc -&gt;
             let result = ref LS.empty in
             LS.iter begin fun ss' -&gt;
                SS.iter begin fun ns -&gt;
                   if SS.for_all (fun s -&gt; NS.is_empty (NS.inter s ns)) ss'
                   then result := LS.add (SS.add ns ss') !result
                end ss
             end acc;
             !result
          end tl (SS.fold (fun e acc -&gt; LS.add (SS.singleton e) acc) hd LS.empty)
       in
       inters

    let ns_print ns =
       print_string "{ ";
       NS.iter (Printf.printf "%d, ") ns;
       print_string "}"
    let ss_print ss =
       SS.iter begin fun s -&gt;
          ns_print s;
          print_string ", "
       end ss;
       print_newline ()
    let ls_print ls = LS.iter ss_print ls

    let exam n = LS.cardinal (make_sets n)

    let main () =
       let num =
          match Sys.argv with
          | [|_; n |] -&gt; int_of_string n
          | _ -&gt; 3
       in
       Printf.printf "n = %d =&gt; %d patterns\n" num (exam num)
    let () = if not !Sys.interactive then main ()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4819'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4819
  :user_name: nido
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/589/
  :language: Ruby
  :time: 2007/12/15 03:21 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  とりあえず単純に\r<br>(1)合計が平均値になる組み合わせを生成\r<br>(2)(1)から要素が重ならない組み合わせを生成\r<br><br>N=4で62秒（PenM 1.7GHz）、解は392\r<br>N=5はこのやり方では無理ですね。\r<br>"
  :code: |
    def gen_comb(list,n)
      if n==0
        yield([])
      else
        (list.size-n+1).times do |i|
          gen_comb(list[i+1..-1],n-1) do|ls|
            yield([list[i]]+ls)
          end
        end
      end
    end

    def comb_num(list,n,sum)
      ret=[]
      gen_comb(list,n) do |a|
        ret&lt;&lt;=a if (a.inject(0){|r,e| r+=e})==sum
      end
      ret
    end

    def comb_array(list,n)
      ret=[]
      gen_comb(list,n) do |a|
        ret&lt;&lt;=a if a.inject{|r,e| break unless (r&amp;e).empty?;r+=e}
      end
      ret
    end

    def maho(n)
      m=n**2
      sum=m*(m+1)/2/n
      comb_array(comb_num((1..m).to_a,n,sum),n)
    end

    start_time = Time.now
    puts maho(4).size
    puts Time.now-start_time
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4820'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4820
  :user_name: kozima
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2007/12/15 04:26 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">&gt;先頭が 1 ~ n のものが並ぶはず\r\n確かに、そうなるかな？と思いたくなるんですが、違うみたいです:\r\n{1,
    2, 15, 16}, {3, 4, 13, 14}, {5, 6, 11, 12}, {7, 8, 9, 10}</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4821'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4821
  :user_name: kozima
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/164/
  :language: OCaml
  :time: 2007/12/15 04:43 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>和が N*(N^2+1)/2 になる組み合わせを昇順に列挙して交わらないものを探す。nido さんの #4819 と同じ方針かな？</p>\n<p>5
    のときは 20 分かかって答えが出ました。\n3245664 だそうです。</p>\n\n\t"
  :code: |
    (* list solutions of
         x1+...+xn=m
         1&lt;=x1&lt;...&lt;xn&lt;=l *)
    let list_solutions m n k =
      let rec loop m n lbd tail =
        if m &lt; n || m &lt; lbd then []
        else if n = 1 then
          if lbd &lt;= m &amp;&amp; m &lt;= k then [m::tail] else []
        else
          let acc = ref [] in
            for i = lbd to (min (m-n+1) k) do
              acc :=
                List.map (fun sols -&gt; i::sols)
                  (loop (m-i) (n-1) (i+1) tail) :: !acc
            done;
            List.concat !acc
      in loop m n 1

    let rec disjoint xs ys =
      match xs, ys with
        | [], _ | _, [] -&gt; true
        | x::xs', y::ys' -&gt;
            if x &gt; y then disjoint xs ys'
            else if x &lt; y then disjoint xs' ys
            else false

    let (@&lt;) = List.merge compare

    let rec count_choices n lists ex =
      if n = 1 then
        List.fold_left (fun i x -&gt; if disjoint x ex then i+1 else i) 0 lists
      else
        match lists with
          | [] -&gt; 0
          | x::rest -&gt;
              let b = count_choices n rest ex in
                if disjoint x ex then
                  b + count_choices (n-1) rest (x@&lt;ex)
                else
                  b

    let count_partitions n =
      count_choices n (list_solutions (n * (n*n + 1) / 2) n (n*n) []) []

    let _ = print_int (count_partitions 5); exit 0
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4824'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4824
  :user_name: '186'
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/352/
  :language: Scheme
  :time: 2007/12/15 07:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  filterとcombinationsを覚えた\r<br><br>;Pen4 3GHzで\r<br>;(time (maho 4)) =&gt; 392\r<br>;real 0.109/user 0.109/sys 0.000\r<br>;(time (maho 5)) =&gt; 3245664\r<br>;real 1528.250/user 1423.391/sys 104.187\r<br>;(time (maho-by-enm 4)) =&gt; 392\r<br>;real 254.094/user 249.000/sys 1.531\r<br><br>maho-by-enmは#4819や#4821と同じ方法です\n\t"
  :code: |
    (use srfi-1)
    (use util.combinations)
    (define (maho n)
      (define (maho-in m l)
        (if (= m 0) 1
          (letrec
           ((cn (/ (* n (+ (* n n) 1)) 2))
            (mylist
             (map (lambda (li) (cons (car l) li))
                  (filter
                   (lambda (li) (= (apply + li) (- cn (car l))))
                   (combinations (cdr l) (- n 1))))))
           (apply + (map (lambda (a) (maho-in (- m n) (lset-difference equal? l a))) mylist)))))
      (maho-in (* n n) (iota (* n n) 1)))

    (define (maho-by-enm n)
      (define (center n) (/ (* n (+ (* n n) 1)) 2))
      (define (flatten2 l c)
        (define (flatten1 l c)
          (if (null? l) c
            (cons (car l) (flatten1 (cdr l) c))))
        (if (null? l) c
          (flatten2 (cdr l) (flatten1 (car l) c))))
      (define (my-equal? l1 l2)
        (null? (lset-xor eq? (flatten2 l1 '()) l2)))
      (define (enm-n n)
        (filter (lambda (l) (= (apply + l) (center n)))
                (combinations (iota (* n n) 1) n)))
      (filter (lambda (l) (my-equal? l (iota (* n n) 1)))
              (combinations (enm-n n) n)))
  :tags:
  - Gauche
  :references:
    :url: 
    :title: 
- :id: '4826'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4826
  :user_name: jijixi
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/582/
  :language: 
  :time: 2007/12/15 07:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>がーん……ダメすぎる...orz</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4827'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4827
  :user_name: '186'
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/15 08:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  タグ付け忘れた. Gaucheです.\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4829'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4829
  :user_name: '186'
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/352/
  :language: Scheme
  :time: 2007/12/15 09:22 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  同じ計算を何回もしているので#1671を参考にメモ化しました.\r<br>n=5で2分と少々です. メモリ使用量は11MB (多分).\r<br>Pen4 3GHzです.\r<br><br>gosh&gt; ;(time (maho-memo 4))\r<br>; real   0.078\r<br>; user   0.078\r<br>; sys    0.000\r<br>392\r<br>gosh&gt; ;(time (maho-memo 5))\r<br>; real 130.656\r<br>; user 124.562\r<br>; sys    4.828\r<br>3245664\r<br>"
  :code: |
    (define (maho-memo n)
      (define cn (/ (* n (+ (* n n) 1)) 2))
      (define maho-in-memo
        (let1
         tab (make-hash-table 'equal?)
         (define (memo m l v) (hash-table-put! tab (cons m l) v) v)
         (lambda (m l)
           (cond ((= m 0) 1)
                 ((hash-table-get tab (cons m l) #f))
                 (else
                  (memo m l
                        (apply
                         +
                         (map
                          (lambda (a) (maho-in-memo (- m n) (lset-difference equal? l a)))
                          (map
                           (lambda (li) (cons (car l) li))
                           (filter
                            (lambda (li) (= (apply + li) (- cn (car l))))
                            (combinations (cdr l) (- n 1))))))))))))
      (maho-in-memo (* n n) (iota (* n n) 1)))
  :tags:
  - gauche
  :references:
    :url: /web/20081204140314/http://ja.doukaku.org/comment/1671/
    :title: 'どう書く？org #1671 shiro: メモ化をちょっと試してみた。 単純にn...(「組合せ型の最小完全ハッシュ関数」の逆関数)'
- :id: '4830'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4830
  :user_name: '186'
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/15 09:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>二重投稿orz\n申し訳ないんですが, #4828の方を消してもらえませんでしょうか?</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4831'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4831
  :user_name: katsu
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/117/
  :language: 
  :time: 2007/12/15 10:07 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>タブが多いとバグになるというのが、python使わない人からすると新鮮です。</p>\n\n\t"
  :code: ''
  :tags:
  - おもしろおかしい
  :references:
    :url: 
    :title: 
- :id: '4832'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4832
  :user_name: horiuchi
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2007/12/15 11:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Pen4 2.4Gで実行して、</p>\n<dl class=\"docutils\">\n<dt>4の場合</dt>\n<dd>392
    : 31(ms)</dd>\n<dt>5の場合</dt>\n<dd>3245664 : 224157(ms)</dd>\n</dl>\n<p>と、なりました。\n簡単に枝狩りをしただけの、総当りです。</p>\n\n\t"
  :code: |
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    public class Answer108 {
        private final int size_;
        private final int maxNumber_;
        private final int average_;

        private int count_ = 0;

        public Answer108(int size) {
            size_ = size;
            maxNumber_ = size * size;
            average_ = size * (maxNumber_ + 1) / 2;

            countPair();
        }

        private void countPair() {
            if (size_ &lt;= 1) return;
            List&lt;List&lt;Integer&gt;&gt; array = new ArrayList&lt;List&lt;Integer&gt;&gt;();
            for (int index = 0; index &lt; size_; index++) {
                array.add(new ArrayList&lt;Integer&gt;());
            }
            array.get(0).add(1);
            countPair(array, 2);
        }
        private void countPair(List&lt;List&lt;Integer&gt;&gt; array, int nextNumber) {
            if (nextNumber &lt;= maxNumber_) {
                for (int index = 0; index &lt; size_; index++) {
                    List&lt;Integer&gt; list = array.get(index);
                    int size = list.size();
                    if (size == size_) continue;
                    if (size == size_ - 1) {
                        if (sum(list) + nextNumber != average_) continue;
                    } else {
                        int rest = 0;
                        for (int lastIndex = 0; lastIndex &lt; size_ - size - 1; lastIndex++) {
                            rest += maxNumber_ - lastIndex;
                        }
                        if (sum(list) + nextNumber + rest &lt; average_) continue;
                    }

                    if (index &gt;= nextNumber) continue;
                    list.add(nextNumber);
                    countPair(array, nextNumber + 1);
                    list.remove(Integer.valueOf(nextNumber));
                    if (list.size() == 0) break;
                }
            } else {
                //System.out.println(toString(array));
                count_++;
            }
        }
        private int sum(List&lt;Integer&gt; array) {
            int sum = 0;
            for (int num: array) {
                sum += num;
            }
            return sum;
        }

        public int getCount() {
            return count_;
        }


        public static String toString(List&lt;List&lt;Integer&gt;&gt; array) {
            String[] strs = new String[array.size()];
            for (int index = 0; index &lt; strs.length; index++) {
                strs[index] = array.get(index).toString();
            }
            return Arrays.toString(strs);
        }

        public static void main(String[] args) {
            long start = System.currentTimeMillis();
            Answer108 ans = new Answer108(5);
            System.out.println(ans.getCount());
            long end = System.currentTimeMillis();
            System.out.println("elapse: " + (end - start) + "(ms)");
        }
    }
  :tags:
  - Java1.5
  :references:
    :url: 
    :title: 
- :id: '4833'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4833
  :user_name: kozima
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/15 12:39 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>枝刈りしようとしたらわけがわからなくなったので Common Lisp で書き直し。</p>\n<p>最初に組み合わせを求めた後で「1を含む組」「1を含まなくて2を含む組」「1,
    2を含まなくて3を含む組」……と分類します。こうすると、グループごとに探索の対象とするかしないかを決めることができてかなり範囲が狭まるようです。</p>\n<p>disjoint
    がボトルネックになるようなのでここだけ最適化をかけています。実行時間は SBCL で 28 秒でした。</p>\n\n\t"
  :code: |
    (defun list-solutions (m n lbd ubd)
      (cond ((not (&lt;= (* lbd n) m (* ubd n))) ())
            ((= n 1) `((,m)))
            (t
             (loop for i from lbd to ubd nconc
               (mapl (lambda (l) (push i (car l)))
                     (list-solutions (- m i) (1- n) (1+ i) ubd))))))

    (defun group-solutions (m n lbd ubd)
      (loop with sols = (list-solutions m n lbd ubd)
        for i from 1
        for s1 = sols then s2
        for s2 = (member i s1 :key #'car :test #'/=)
        while s1 collect (cons i (ldiff s1 s2))))

    (defun disjoint (l1 l2) ; l1, l2 must be sorted
      (declare (optimize (speed 3) (safety 0)))
      (or (null l1)
          (null l2)
          (let ((a (car l1)) (b (car l2)))
            (declare (fixnum a b))
            (cond ((&gt; a b) (disjoint l1 (cdr l2)))
                  ((&lt; a b) (disjoint (cdr l1) l2))
                  (t nil)))))

    (defun merge-list (l1 l2) ; l1, l2 must be sorted
      (do* ((head (cons () ()))
            (tail head (cdr tail)))
          (())
        (cond ((endp l1) (setf (cdr tail) l2) (return (cdr head)))
              ((endp l2) (setf (cdr tail) l1) (return (cdr head)))
              (t
               (let ((a (car l1)) (b (car l2)))
                 (cond ((&gt; a b)
                        (setf (cdr tail) (list b)
                              l2 (cdr l2)))
                       ((&lt; a b)
                        (setf (cdr tail) (list a)
                              l1 (cdr l1)))
                       (t
                        (setf (cdr tail) (list a)
                              l1 (cdr l1)
                              l2 (cdr l2)))))))))

    (defun count-choices (n lists ex)
      (if (= n 1)
          (loop for x in (cdar lists) count (disjoint x ex))
        (loop for x in (cdar lists) if (disjoint x ex) sum
          (count-choices (1- n)
                         (remove-if (lambda (a) (member (car a) x)) (cdr lists))
                         (merge-list x ex)))))

    (defun count-partitions (n)
      (count-choices n (group-solutions (/ (* n (1+ (* n n))) 2) n 1 (* n n)) ()))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4834'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4834
  :user_name: kozima
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/15 13:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>無駄に読みにくい書き方をしてました。こっちのほうが普通でしょう。</p>\n\n\t"
  :code: |
    (defun merge-list (l1 l2)
      (let (acc)
        (loop
          (if (endp l1) (return (nreconc acc l2)))
          (if (endp l2) (return (nreconc acc l1)))
          (let ((a (car l1)) (b (car l2)))
            (cond ((&gt; a b)
                   (push b acc)
                   (setf l2 (cdr l2)))
                  ((&lt; a b)
                   (push a acc)
                   (setf l1 (cdr l1)))
                  (t
                   (push a acc)
                   (setf l1 (cdr l1) l2 (cdr l2))))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4835'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4835
  :user_name: minke
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/28/
  :language: C
  :time: 2007/12/15 18:12 GMT
  :vote_count: '5'
  :vote_score: '5'
  :body: "\n\t  <pre class=\"compact\">$ g++ -O3 maho.cpp &amp;&amp; time ./a.out\r\n3245664\r\n\r\nreal
    \   0m26.930s\r\nuser    0m22.310s\r\nsys     0m4.560s\r\n\r\n最初に和が (総和/n) となるn個の値の組を\r\nビット列として全パターン生成してしまいます。\r\nそうしておいて、ビットパターンの中から排他的なものを選んでいくアルゴリズム。\r\n\r\nそれなりに速いかと。</pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;
    typedef unsigned int bit_t;

    std::vector&lt;bit_t&gt; bits;
    int n, n2, cnt = 0;

    void comb(int a, int k, int s, bit_t b) {
      if (k &lt; n-1)
        for (int i = a; i &lt; n2; ++i)
          comb(i+1, k+1, s-i, b | 1 &lt;&lt; (i-1));
      else
        if (a &lt;= s &amp;&amp; s &lt;= n2)
          bits.push_back(b | 1 &lt;&lt; (s-1));
    }

    void calc(int s, int k, bit_t b) {
      if (k == n) { ++cnt; return; }

      for (int i = s; i &lt; (int)bits.size(); ++i)
        if (!(b &amp; bits[i]))
          calc(i+1, k+1, b | bits[i]);
    }

    int main() {
      n = 5;
      n2 = n * n;
      int m = n * (n2+1) / 2;

      comb(1, 0, m, 0);
      calc(0, 0, 0);

      std::cout &lt;&lt; cnt &lt;&lt; std::endl;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4836'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4836
  :user_name: minke
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/28/
  :language: 
  :time: 2007/12/15 18:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ビットの集合を生成後、ソートするようにしたら17秒ぐらいになりました:p</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4842'
  :parent_id: '108'
  :url: http://ja.doukaku.org/comment/4842
  :user_name: minke
  :user_url: /web/20081204140314/http://ja.doukaku.org/user/28/
  :language: C
  :time: 2007/12/16 08:31 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">n-1個の組を見つけた後、最後の一つを二分探索するようにしたら n=5 で5秒ぐらいになりました。\r\nreal
    \   0m4.920s\r\nuser    0m2.920s\r\nsys     0m1.980s\r\n\r\nn=6 もやろうとしてみたのですが、32ビットでは全然足りなくて、\r\n64ビットに収まるかどうかも怪しい感じですので、\r\n解を1つずつカウントする方針では根本的に駄目そうです。\r\n</pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;
    #include &lt;algorithm&gt;
    using namespace std;
    typedef unsigned int bit_t;

    vector&lt;bit_t&gt; bits;
    bit_t mask;
    int n, n2;
    long long cnt = 0LL;

    void comb(int a, int k, bit_t b, int rest) {
      if (k == n-1) {
        if (rest &lt;= n2)
          bits.push_back(b | 1 &lt;&lt; (rest-1));
        return;
      }
      for (int i = a; i &lt; n2; ++i)
        if (rest-i &gt; i)
          comb(i+1, k+1, (b | 1 &lt;&lt; (i-1)), rest-i);
    }

    void calc(int a, int k, bit_t b) {
      if (k == n-1) {
        if (binary_search(bits.begin()+a, bits.end(), mask &amp; ~b))
          ++cnt;
        return;
      }
      for (int i = a; i &lt; (int)bits.size(); ++i)
        if (!(b &amp; bits[i]))
          calc(i+1, k+1, b | bits[i]);
    }

    int main(int argc, char **argv) {
      n = argc &gt; 1 ? atoi(argv[1]) : 5;
      n2 = n * n;
      mask = (1 &lt;&lt; n2) - 1;
      int m = n * (n2+1) / 2;

      comb(1, 0, 0, m);
      sort(bits.begin(), bits.end());
      calc(0, 0, 0);

      cout &lt;&lt; cnt &lt;&lt; endl;
    }
  :tags: []
  :references:
    :url: 
    :title: 
