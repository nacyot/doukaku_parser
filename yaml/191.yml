---
:id: '191'
:title: 環境変数の取得
:comments:
- :id: '6736'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6736
  :user_name: mattsan
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/833/
  :language: 
  :time: 2008/07/15 02:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>コマンドライン引数の取得がありましたが、今回は環境変数の取得をお願いします。</p>\n<p>取得した内容を表示できればよいですが、可能でしたらキーから値を得る手段の実装もお願いします。</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6772'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6772
  :user_name: shinonome
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/822/
  :language: Perl
  :time: 2008/07/21 06:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>つまらない回答ですが。</p>\n\n\t"
  :code: |
    #! /usr/bin/perl

    foreach(sort keys %ENV){
            print "$_: $ENV{$_}\n";
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6773'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6773
  :user_name: ココサブ
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2008/07/21 06:46 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <p>環境を選ぶかもしれません。</p>\n<p>環境変数名=値</p>\n<p>という文字列の配列なので、strtokで分割。</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    int main(int argc, char *argv[], char *envp[])
    {
        char **p;
        char *name;
        char *value;

        for(p = envp; p != NULL; p++) {
            name  = strtok(*p, "=");
            value = strtok(NULL, "=");
            printf("%s = %s\n", name, value);
        }

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6774'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6774
  :user_name: kkobayashi
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/07/21 12:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Sys.getenv() で名前つきvectorの形式で環境変数の一覧を取得できます。</p>\n<p>引数にキーを指定すると、特定の値のみを取得することもできます。</p>\n\n\t"
  :code: |
    # 1. get all environment variables
    Sys.getenv()
    # 2. get all keys of environment variables
    names(Sys.getenv())
    # 3. get a specific environment variable
    Sys.getenv("PATH")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6775'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6775
  :user_name: 匿名
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/4/
  :language: Haskell
  :time: 2008/07/21 08:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>もっともシンプルな例だと思います。</p>\n<p>getEnvironmentは(環境変数名, 値)というペアのリストを返します。</p>\n<p>printはリストをそのままプリントアウトすることができます。</p>\n\n\t"
  :code: |
    import System.Environment

    main = getEnvironment &gt;&gt;= print
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6776'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6776
  :user_name: shinonome
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/822/
  :language: C
  :time: 2008/07/21 08:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ついでにC++とQtで。\nQMapを返すものがあるのかとおもい、探してみましたけど、検索能力が低く、見つけることができませんでした。</p>\n\n\t"
  :code: |
    #include &lt;QtCore&gt;
    #include &lt;QtDebug&gt;

    #include &lt;cstdlib&gt;

    int main(void)
    {
            QStringList env = QProcess::systemEnvironment();
            QStringListIterator itr(env);
            QMap&lt;QString, QString&gt; envMap;
            while(itr.hasNext()) {
                    QString str = itr.next();
                    envMap[str.section('=', 0, 0)] = str.section('=', 1, 1);
            }

            qDebug() &lt;&lt; envMap["PATH"];

            return EXIT_SUCCESS;
    }
  :tags:
  - Qt4.4
  :references:
    :url: 
    :title: 
- :id: '6777'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6777
  :user_name: 匿名
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/4/
  :language: Groovy
  :time: 2008/07/21 08:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  特にコメントなし、\r\n誰が書いてもこんな感じでしょう。\r\n\n\t"
  :code: |
    System.getenv().each {
        println it
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6779'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6779
  :user_name: leque
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/07/21 08:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>単純に。</p>\n\n\t"
  :code: |
    (for-each print (sys-environ))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '6780'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6780
  :user_name: g000001
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/07/21 09:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  分かる範囲で対応してみました。\r<br>環境変数の取得に関しては、処理系依存ですが、大概の処理系には存在していて、統一的に扱えるようなラッパーのパッケージも存在しています。\r<br>環境変数一覧は、SBCL、CMUCL、Clozure CL、CLISP、Allegro CLに対応しています。\r<br>変数名からの値の取得は、SBCL、CMUCL、Clozure CL、CLISP、Allegro CL、ECL、LispWorksに対応しています。\n\t"
  :code: |
    (asdf:oos 'asdf:load-op :arnesi)
    (asdf:oos 'asdf:load-op :osicat)

    (defpackage :doukaku-191 (:use :cl))
    (in-package :doukaku-191)

    ;; 一覧
    (defun env ()
      #+(or sbcl cmu openmcl) (osicat:environment)
      #+clisp (getenv)
      #+allegro (excl.osi:environment))

    ;; 変数名から値を取り出し
    (defun getenv (name)
      #+ecl (sys:getenv name)
      #-ecl (arnesi:getenv name))
  :tags: []
  :references:
    :url: /web/20091028131039/http://cl-cookbook.sourceforge.net/os.html#env
    :title: Accessing Environment Variables
- :id: '6781'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6781
  :user_name: syat
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/766/
  :language: Batchfile
  :time: 2008/07/21 09:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    rem 環境変数の一覧を表示
    set
    rem 値の取得
    echo USERNAME=[%USERNAME%]
    rem ついでに設定
    set FOO=bar
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6782'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6782
  :user_name: 匿名
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/07/21 10:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>System.getenv メソッドで環境変数が取得できます。引数にキーを渡した場合は対応する文字列が、キーを指定しない場合は
    Map 型で全ての環境変数が返されます。</p>\n\n\t"
  :code: |
    public class Sample {

        public static void main(String[] args) {
            System.out.println(System.getenv());
            System.out.println(System.getenv("USER"));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6783'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6783
  :user_name: lunlumo
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/813/
  :language: Ruby
  :time: 2008/07/21 13:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　RubyではENVオブジェクトを使用して参照します。</p>\n\n\t"
  :code: |
    #! /usr/bin/ruby

    ENV.keys.sort.each do |key|
        puts "#{key}:\t#{ENV[key]}"
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6784'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6784
  :user_name: nobsun
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2008/07/21 19:34 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ghcを使ってコマンドラインからワンライナーで。</p>\n\n\t"
  :code: |
    % ghc -e "System.Environment.getEnvironment"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6786'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6786
  :user_name: Kiske
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/202/
  :language: PHP
  :time: 2008/07/21 20:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>PHPは$_ENVで環境変数を扱います。</p>\n\n\t"
  :code: |
    &lt;?php

    foreach( $_ENV as $key =&gt; $val ) {
        echo $key.': '.$_ENV[$key].PHP_EOL;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6787'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6787
  :user_name: Dubhead
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/785/
  :language: Python
  :time: 2008/07/21 20:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Pythonでは、環境変数はos.environという辞書 (連想配列) でアクセスできます。</p>\n\n\t"
  :code: |
    import os

    # 辞書の全要素を順番に読み出し。
    # kには変数名、vにはその値が入る。
    for k, v in os.environ.iteritems():
        print k, v

    # キーを指定して読み出し。
    print os.environ["PATH"]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6788'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6788
  :user_name: genzou
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/07/21 22:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p><a class=\"reference\" href=\"/web/20091028131039/http://ja.doukaku.org/comment/6777/\">http://ja.doukaku.org/comment/6777/</a>\nをもとに、もうちょっと突っ込んで調べてみました。</p>\n<p>getも不要のようですね。</p>\n\n\t"
  :code: |
    //　一覧
    System.env.each {
        println it
    }

    // １件
    System.env["USERNAME"]
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '6789'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6789
  :user_name: Dubhead
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/785/
  :language: D
  :time: 2008/07/21 22:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">D 2.0 + 標準ライブラリ (Phobos)、Linuxで動作確認。連想配列を作ってしまう方針で。\r\nPhobosには環境変数APIが無いので、Cの
    environ(7) を直接呼び出します。\r\nC文字列をDのstringに変換する処理が面倒ですね。もっとうまいやり方があるような気がする...</pre>\n\t"
  :code: |
    import std.stdio;
    import std.string;
    import std.c.linux.linux: environ;
    import std.c.string: strlen;

    void main()
    {
        char** p;
        string[string] envAA;
        for (p = environ; *p != null; p++) {
            char[] key_and_value = (*p)[0 .. strlen(*p)];    // "FOO=BAR"
            int iEqual = key_and_value.find('=');    // index to '='
            string key = cast(string)(key_and_value[0 .. iEqual]);
            string value = cast(string)(key_and_value[iEqual + 1 .. $]);
            envAA[key] = value;
        }
        envAA.rehash;

        foreach(key, value; envAA) {
            writefln("%s: %s", key, value);
        }
        writefln("PATH = %s", envAA["PATH"]);
    }
  :tags:
  - linux
  :references:
    :url: 
    :title: 
- :id: '6790'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6790
  :user_name: あにす
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2008/07/21 23:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  System.Environment.GetEnvironmentVariableメソッドで指定したキーの環境変数の値を取得出来ます。\r<br>System.Environment.GetEnvironmentVariablesメソッドで環境変数のキーと値がペアになったSystem.Collections.IDictionaryを取得出来ます。\n\t"
  :code: |
    using System;

    class Program {
        static void Main(string[] args) {
            //キーから取得
            Console.Write("環境変数を取得します。キーを入力して下さい。:");
            string key = Console.ReadLine();
            Console.WriteLine(Environment.GetEnvironmentVariable(key));

            //一覧を表示
            Console.Write("環境変数の一覧を表示します。");
            Console.ReadLine();
            foreach(string key_ in Environment.GetEnvironmentVariables().Keys) {
                Console.WriteLine("{0} = {1}", key_, Environment.GetEnvironmentVariables()[key_]);
            }
            Console.ReadLine();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6791'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6791
  :user_name: pooq
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/07/22 01:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">windows 用のコンソール版の場合です。\r\n個々の環境変数は getenv で取得できるようですが、環境変数全体を\r\n取得する方法が、わかりませんでした。存在しない変数名を指定すると\r\n0
    が返ります。</pre>\n\t"
  :code: |
    exit echo getenv 'tmp'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6795'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6795
  :user_name: kgbu
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/847/
  :language: Erlang
  :time: 2008/07/22 02:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">環境変数はosモジュールで提供されています。\r\nKeyは引用符でくくった文字列を指定します。</pre>\n\t"
  :code: |
    %%全環境変数の表示
    os:getenv().

    %% キーを指定した場合
    os:getenv(Key).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6796'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6796
  :user_name: kh
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/654/
  :language: D
  :time: 2008/07/22 04:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>変数名から値を得るだけなら、getenv 関数があります。</p>\n\n\t"
  :code: |
    private import std.stdio, std.process;

    void main() {
        writeln(getenv("PATH"));
    }
  :tags:
  - D2.0
  :references:
    :url: /web/20091028131039/http://www.digitalmars.com/d/2.0/phobos/std_process.html#getenv
    :title: std.process - D Programming Language - Digital Mars
- :id: '6797'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6797
  :user_name: 99yen
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/07/22 10:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  なでしこには「環境変数取得」「環境変数展開」の二つが標準命令にあります。\n\t"
  :code: |
    "PATH"の環境変数取得して表示
    "%TMP%"の環境変数展開して表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6798'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6798
  :user_name: 匿名
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/4/
  :language: PostScript
  :time: 2008/07/22 08:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>親OS上の環境変数の取得ということで、GhostScript 依存の getenv operator を使用しました。\nPostScript
    の本来の環境変数（デバイス解像度等）は普通に currentdict 中に入っているわけで、普通に変数名だけで参照できるわけですが、マクロ等も一緒に入っているのでいわゆる変数一覧、というのは\n膨大になると思います。後半のようにうっかり
    forall を使ってアクセスするとスタックがあふれたりとか....</p>\n\n\t"
  :code: |
    %!PS

    (PATH) getenv { = } if

    % ========= Cut Here ===========
    %!PS
    currentdict { === } forall
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6799'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6799
  :user_name: しょーた
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/305/
  :language: PowerShell
  :time: 2008/07/22 09:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>env: ドライブを ls します。\nls は Get-ChildItem のエイリアスですので Get-ChildItem
    と書くほうがよいですね。\nキーを指定する場合には env: ドライブのキーの項目を Get-Item します。</p>\n\n\t"
  :code: |
    Get-ChildItem env:

    Get-Item env:HOME
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6820'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6820
  :user_name: raynstard
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/07/24 07:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ども、raynstardです。\r\n環境には依存しないと思いますが、\r\n入力データを壊してしまうので基本的に直接strtok()は、\r\nまずいいんじゃないでしょうか？\r\n#
    forkとかexec*したときとか\r\n\r\nこのコードなら問題ないからやっているだけかもしれませんが。。。\r\nちょっと気になりました。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6821'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6821
  :user_name: alaya
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/851/
  :language: OCaml
  :time: 2008/07/24 20:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">キーから値を得るにはSys.getenvを使う。\r\n環境変数を全部取得するにはUnix.environmentを使う。\r\nちょっと紛らわしいけど、Unix.environmentはWindowsやcygwin環境でも使える。\r\n以下のコードをコンパイルするには\r\n$
    ocamlc unix.cma hogehoge.ml\r\nまたは\r\n$ ocamlopt unix.cmxa hogehoge.ml\r\nのようにunix.cma,unix.cmxaも一緒にコンパイルする必要がある。</pre>\n\t"
  :code: |
    (* show path *)
    let v = Sys.getenv "PATH" in print_string v;;

    (* show all enviroments *)
    let e = Unix.environment () in Array.iter (Printf.printf "%s\n") e;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6857'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6857
  :user_name: sumim
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/07/26 17:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n<p>特定の値を得るには、返値に対してキーを指定してアクセス（#at:）します。</p>\n<p>例：\nUnixProcess
    env at: #HOME</p>\n\n\t"
  :code: |
    UnixProcess env
  :tags:
  - OSProcess
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6873'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/6873
  :user_name: lunlumo
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2008/07/28 13:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>jclを使ってみました。</p>\n\n\t"
  :code: |
    import    scala.collection.jcl.Conversions

    object PrintEnv {
        def printEnv:Unit = {
            Conversions.convertMap(System.getenv).keys.toList.sort { (a,b) =&gt; a &lt; b }.foreach { k =&gt; printEnv(k) }
        }
        def printEnv(key:String):Unit = {
            Console.printf("%s:\t%s\n", key, System.getenv(key))
        }
        def main(args:Array[String]):Unit = {
            PrintEnv.printEnv
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7115'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/7115
  :user_name: lunlumo
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/813/
  :language: JavaFxScript
  :time: 2008/08/12 13:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　JavaFXScriptで。</p>\n\n\t"
  :code: |
    import    java.lang.System;

    for (k in System.getenv().keySet()) {
        System.out.printf("%s\t%s\n",k,System.getenv(k));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7502'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/7502
  :user_name: y0shim0t0
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/914/
  :language: Perl
  :time: 2008/08/31 05:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  表示できればよいとの事なので、見やすさは考慮しません :-D\r\n\n\t"
  :code: |
    print %ENV;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7571'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/7571
  :user_name: emasaka
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/09/05 16:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>bashで、exportされてないシェル変数を避けて環境変数の一覧を表示する方法には「printenv」「env」「export
    -p」があります。このうちexportはbash内蔵コマンドです。</p>\n<p>特定のキーから環境変数の値を得るには、printenvに環境変数名を与えます。</p>\n<p>蛇足として、内蔵コマンドだけで「printenv
    変数名」相当のことをするコマンド（関数）を定義してみます。</p>\n\n\t"
  :code: |
    # 環境変数一覧は以下のどれかで
    printenv
    env
    export -p

    # キーから値を得るには、printenvで
    prinetnv 'HOME'

    # printenvは外部コマンドだからという方には、pure bashで
    myprintenv1() {
        local name=$1
        local a b str
        export -p | while read a b str;do
            if [ ${str%%=*} = "$name" ];then
                str=${str#*=\"}
                echo ${str%\"}
                break
            fi
        done
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8815'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/8815
  :user_name: spoon
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/1036/
  :language: StandardML
  :time: 2009/04/16 07:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    (* show path *)
    case OS.Process.getEnv "PATH" of
       SOME v =&gt; print (v ^ "\n")
     | NONE =&gt; print "no path\n"
    ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9090'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9090
  :user_name: yamamoto
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/1064/
  :language: Scala
  :time: 2009/06/10 05:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>エラー処理つき。</p>\n\n\t"
  :code: "import scala.collection.jcl.Conversions\nobject Env{\n  val env = Conversions.convertMap(System.getenv)\n
    \ def apply(k:String):Option[String] = {\n    try{\n      Some(env(k))\n    }catch{\n
    \     case _ =&gt; None\n    }\n  }\n  def enum( f:(String,String)=&gt;Unit )
    : Unit = for( (k,v)&lt;-env ) f(k,v)\n}\n\nobject PrintEnv {\n  def main(args
    : Array[String]) : Unit = {\n     Env.enum{(k,v)=&gt;println(k+\" = \"+v)}\n     \n
    \    Env(\"SystemRoot\") match {\n       case Some(s) =&gt; println(s)\n       case
    _ =&gt; println(\"!!!!!ERROR!!!!!!\")\n     }\n     \n     Env(\"SystemLoot\")
    match {\n       case Some(s) =&gt; println(s)\n       case _ =&gt; println(\"!!!!!ERROR!!!!!!\")\n
    \    }\n     \n     ()//result\n  }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9115'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9115
  :user_name: yamamoto
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/1064/
  :language: Scala
  :time: 2009/06/11 07:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Envをfor文対応にしてみる。\r\nfor((k,v)&lt;-Env) println(k+\"
    = \"+v)\r\nというように。\r\n\r\n</pre>\n\t"
  :code: |
    object Env extends Iterable[(String,String)]{
      val env = Conversions.convertMap(System.getenv)
      def apply(k:String):Option[String] = {
        try{
          Some(env(k))
        }catch{
          case _ =&gt; None
        }
      }
      override def elements : Iterator[(String,String)] = env.elements
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9200'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9200
  :user_name: egtra
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/759/
  :language: JavaScript
  :time: 2009/06/19 08:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  WSHのJScriptです。WSHでは、WScript.Shellオブジェクトから取得可能です。\n\t"
  :code: |
    sh = new ActiveXObject('WScript.Shell');
    env = sh.Environment;
    stdIn = WScript.StdIn;
    stdOut = WScript.StdOut;
    stdOut.WriteLine('キー名を指定してください');
    key = stdIn.ReadLine();
    stdOut.WriteLine('%' + key + '% == ' + env(key));
  :tags:
  - WSH
  :references:
    :url: 
    :title: 
- :id: '9201'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9201
  :user_name: egtra
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/759/
  :language: BASIC
  :time: 2009/06/19 08:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  今度は環境変数の一覧を取得する例です。こちらはVBScriptにしました。COMオブジェクトでの列挙操作は、VBScriptのほうがFor
    Eachが使えるので楽です。\n\t"
  :code: |
    Set sh = CreateObject("WScript.Shell")
    Set env = sh.Environment

    For Each e In env
        s = s &amp; e &amp; vbNewLine
    Next

    WScript.Echo s
  :tags:
  - VBScript
  - WSH
  :references:
    :url: 
    :title: 
- :id: '9202'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9202
  :user_name: egtra
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/759/
  :language: VB
  :time: 2009/06/19 08:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  VB.NETはC#との差別化が難しいですが、今回はMyを使ってC#と別物にできました。キーが見付からないと例外を投げるので、Catchで捕まえています。\n\t"
  :code: |
    Module Env
        Sub Main()
            Console.WriteLine("キーを入力してください。")
            Dim key = Console.ReadLine()
            Try
                Console.WriteLine("%" &amp; key &amp; "% == " _
                    &amp; My.Application.GetEnvironmentVariable(key))
            Catch e As Exception
                Console.Error.WriteLine("キーの取得に失敗しました")
            End Try
        End Sub
    End Module
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9225'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9225
  :user_name: egtra
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/06/23 17:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  はい、envpはANSI Cでは規定されていないので、実装されていない処理系があることを想定したほうが良いと思います。というわけで&lt;stdlib.h&gt;のgetenv関数を使いました。ただし、こちらは名前から引くことしかできません。\r\n\r\nなお、該当する名前の環境変数がなければNULLを返すので、条件演算子で振り分けています。\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    int main(int argc, char** argv)
    {
        if (argc &gt; 1)
        {
            const char* env = getenv(argv[1]);
            printf("$%s = %s\n",
                argv[1], env ? env
                             : "(none)");
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9359'
  :parent_id: '191'
  :url: http://ja.doukaku.org/comment/9359
  :user_name: rennos
  :user_url: /web/20091028131039/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/07/13 15:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n</div>\n\t"
  :code: "#include \"mod_getenv.as\"\n\n#define IDW_MAIN 0\n#define true 1\n#define
    false 0\n\n    gosub *LInitialize\n    gsel IDW_MAIN, 1\n    \n*LMainLoop\n    gosub
    *LGetEnvarData\n    gosub *LRedraw\n    \n    wait 8\n    goto *LMainLoop\n    \n*LInitialize\n
    \   gosub *LSetVariable\n    gosub *LSetWindow\n    return\n    \n*LSetVariable\n
    \   sdim sData\n    sdim sEnvarName\n    sdim sResult\n    dim  bNoExists, 2\n
    \   bChanged = true\n    return\n    \n*LSetWindow\n    screen IDW_MAIN, 320,
    240, 2\n    title \"EnvarReader\"\n    objmode 2\n    pos 10, 10 : mes \"環境変数の名前を入力してください：\"\n
    \   pos 30, 30 : input  sEnvarName, 200, 25\n    pos 10, 60 : mesbox sResult,
    \   300, 170 : infResult = objinfo(stat, 2), stat\n    return\n    \n*LGetEnvarData\n
    \   getenv sData, sEnvarName\n    bNoExists(1) = bNoExists(0)\n    bNoExists(0)
    = ( sData == \"\" )\n    \n    if ( bNoExists(0) != bNoExists(1) ) {\n        bChanged
    = true\n        \n        if ( bNoExists(0) ) {\n            sResult = \"( なし
    )\"\n        } else {\n            sResult = sData\n        }\n    }\n    \n    return\n
    \   \n*LRedraw\n    if ( bChanged == false ) { return }\n    \n    objenable infResult(1),
    bNoExists(0) == false\n    objprm    infResult(1), sResult\n    \n    bChanged
    = false\n    return\n"
  :tags: []
  :references:
    :url: 
    :title: 
