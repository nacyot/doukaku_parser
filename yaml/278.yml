---
:id: '278'
:title: Twitterへの投稿
:comments:
- :id: '9447'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9447
  :user_name: pa
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/943/
  :language: 
  :time: 2009/08/06 13:28 GMT
  :vote_count: '8'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">Twitter(http://twitter.com/)につぶやきを投稿してください。\r\n\r\nAPIに関しては\r\nhttp://watcher.moe-nifty.com/memo/2007/04/twitter_api.html\r\nに日本語訳があるようです。\r\n「update」に投稿の仕様が説明されています。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9448'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9448
  :user_name: あにす
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2009/08/06 10:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  こんな感じで。\n\t"
  :code: "using System.Net;\nusing System.Text;\nusing System.Web;\n\nclass ついったー
    {\n    static void Main(string[] args) {\n        using(WebClient client = new
    WebClient()) {\n            client.Encoding = Encoding.UTF8;\n            client.Credentials
    = new NetworkCredential(\"ID\", \"Pass\");\n            string query = \"http://twitter.com/statuses/update.xml?status=\"
    + \n                HttpUtility.UrlEncode(\"どう書く？orgなう\");\n            client.UploadData(query,
    System.Text.Encoding.Default.GetBytes(\"\"));\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9450'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9450
  :user_name: turugina
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2009/08/07 02:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p><a class=\"reference\" href=\"/web/20100506132722/http://twitter.com/turugina/status/3172663886\">http://twitter.com/turugina/status/3172663886</a></p>\n\n\t"
  :code: |
    use strict;
    use warnings;

    use Config::Pit;
    use Net::Twitter;
    use utf8;

    my $c = pit_get("twitter.com",
      require =&gt; {
        username =&gt; "your twitter id",
        password =&gt; "your twitter password",
      },
    ) or die "failed to get auth info";
    my $t = Net::Twitter-&gt;new( %$c );
    $t-&gt;update('http://ja.doukaku.org/278/ 用のテスト');
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9452'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9452
  :user_name: uehaj
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/08/07 15:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>つぶやき投稿＋フレンドのタイムライン表示を行ってみました。@GrabなのでTwitter4jの事前ダウンロードとか不要です(Mavenリポジトリから取ってきます)。ただしこのGrabの書き方はGroovy
    1.7-beta-1以降のみに対応。</p>\n<p>コマンドラインに第一引数にユーザ名、パスワードを指定します。</p>\n\n\t"
  :code: |
    @Grab('net.homeip.yusuke:twitter4j:[2.0,)')
    import twitter4j.*

    new Twitter(args[0], args[1]).updateStatus('Tweet from groovy using  twitter4j and groovy 1.7').with { status -&gt;
      println("Successfully updated the status to [" + status.text + "].");
    }

    println("Showing friends timeline.");
    new Twitter(args[0], args[1]).friendsTimeline.each {
      println it.user.name + ":" + it.text
    }
  :tags:
  - grab
  - groovy
  - ivy
  - twitter4j
  :references:
    :url: 
    :title: 
- :id: '9456'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9456
  :user_name: egtra
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/759/
  :language: JavaScript
  :time: 2009/08/08 05:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Windows Script Hostで動きます。初めはVBScriptを使っていましたが、URLエンコードのためにJavaScirptへ移行しました。ところで、JavaScriptは使い慣れていないので、encodeURIComponentとencodeURIの違いが分かりませんでした。間違っていたらごめんなさい。\n\t"
  :code: |
    function twitte(id, password, message)
    {
        var req = new ActiveXObject("MSXML2.XMLHTTP");
        var url = "http://twitter.com/statuses/update.xml?status=" + encodeURIComponent(message);
        req.open("POST", url, false, id, password);
        req.send();
        return req;
    }

    r = twitte("なまえ", "パスワード", "へろー");
    WScript.Echo(r.responseText);
    WScript.Echo(r.status);
  :tags:
  - WSH
  :references:
    :url: 
    :title: 
- :id: '9458'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9458
  :user_name: sumim
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/08/08 09:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    | url user passwd args status |
    url := 'http://twitter.com/statuses/update.xml'.
    status := 'http://ja.doukaku.org/278/ 投稿用'.
    args := {#status-&gt;{status}} as: Dictionary.
    user := 'sumim'.
    passwd := 'password'.
    HTTPSocket httpPost: url args: args user: user passwd: passwd
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '9459'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9459
  :user_name: konn
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/100/
  :language: Haskell
  :time: 2009/08/08 11:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>要・Network.HTTP ( <a class=\"reference\" href=\"/web/20100506132722/http://hackage.haskell.org/cgi-bin/hackage-scripts/package/HTTP\">http://hackage.haskell.org/cgi-bin/hackage-scripts/package/HTTP</a>
    )</p>\n<p>こんな感じにコマンドラインから使えます。</p>\n<p>$ runhaskell twitter.hs USER PASS もう はなし
    ましたよ</p>\n<p>日本語でつぶやく場合は文字コードをUTF-8にして下さい。\n# Cinnamon ( <a class=\"reference\"
    href=\"/web/20100506132722/http://sourceforge.jp/projects/cinnamon/\">http://sourceforge.jp/projects/cinnamon/</a>
    ) を使えば、nkfで文字コード変換も簡単に出来るんですが\n# 本質から外れてしまうのでやめました。</p>\n\n\t"
  :code: |
    import Network.Browser
    import Network.HTTP
    import System.Environment

    main = do args &lt;- getArgs
              case args of
               (user:pass:stat) -&gt; if null stat then usage else browse (twitter user pass (unwords stat))
               _                -&gt; usage

    usage = putStr "usage: " &gt;&gt; getProgName &gt;&gt;= putStr &gt;&gt; putStrLn " user pass stat"

    twitter user pass stat = do
      setAuthorityGen (const.const(return $ Just (user, pass)))
      setOutHandler (const$return())
      request $ postRequest ("http://twitter.com/statuses/update.xml?" ++ urlEncodeVars [("status", stat)] )
      return ()
  :tags:
  - 要・Network.HTTP
  :references:
    :url: 
    :title: 
- :id: '9461'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9461
  :user_name: kkobayashi
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2009/08/08 20:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>もちろんRからもtwitterの投稿はできます。</p>\n\n\t"
  :code: |
    library(twitteR)
    sess &lt;- initSession('myUser', 'myPass')
    ns   &lt;- updateStatus(iconv('テストメッセージ', 'sjis', 'utf-8'), sess)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9462'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9462
  :user_name: eo-oe-aaaa
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/498/
  :language: Ruby
  :time: 2009/08/09 06:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>事前にgem install twitter要です。</p>\n\n\t"
  :code: |
    require 'twitter'

    o = Twitter::HTTPAuth.new('username', 'password')
    t = Twitter::Base.new(o)
    t.update('test')
  :tags: []
  :references:
    :url: /web/20100506132722/http://twitter.rubyforge.org/
    :title: 公式
- :id: '9470'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9470
  :user_name: 割と普通
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/581/
  :language: C
  :time: 2009/08/11 05:44 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <div class=\"section\">\n<p>LINQ to Twitterを使用\r</p>\n<p>http://www.codeplex.com/LinqToTwitter\r</p>\n<p>\r</p>\n<p>C#でLINQ
    to XXXが使用できるなら、利用しない手は無いでしょう。お題は投稿までですが、ユーザ名一覧の取得もやってみました。</p>\n</div>\n\t"
  :code: "using System;\nusing System.Linq;\nusing System.Net;\nusing System.Diagnostics;\nusing
    System.Web;\nusing System.Collections.Specialized;\nusing System.Threading;\nusing
    System.Globalization;\n\nnamespace ConsoleApplication\n{\n    using LinqToTwitter;\n\n
    \   class Program\n    {\n        static void Main(string[] args)\n        {\n
    \           string userName = \"ユーザ名\";\n            string password = \"パスワード\";\n\n
    \           var twitterCtx = new TwitterContext(userName, password);\n            twitterCtx.UpdateStatus(\"投稿メッセージ\");\n
    \           \n            //ユーザ名一覧を取得\n            twitterCtx.User.ToList().ForEach(
    user =&gt; Console.WriteLine(user.ScreenName) );\n\n            Console.ReadKey();\n
    \       }\n    }\n}\n"
  :tags: []
  :references:
    :url: /web/20100506132722/http://www.codeplex.com/LinqToTwitter
    :title: LINQ to Twitter - CodePlex
- :id: '9519'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9519
  :user_name: egtra
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/759/
  :language: Scheme
  :time: 2009/08/26 10:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Gauche使いました。インデントってこんなんでいいんでしょうか。Schemeはあんまり慣れていないです。\n\t"
  :code: |
    (use rfc.http)
    (use rfc.uri)
    (use rfc.base64)

    (define (twitte id password message)
        (http-post
            "twitter.com"
            (string-append
                "/statuses/update.xml?status="
                (uri-encode-string message :encoding "UTF-8"))
            ""
            :authorization (string-append
                "Basic "
                (base64-encode-string
                    (string-append
                        id ":" password)))))

    (twitte "なまえ" "パスワード" "一言")
  :tags:
  - Gauche
  :references:
    :url: 
    :title: 
- :id: '9533'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9533
  :user_name: nanige
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/1095/
  :language: PHP
  :time: 2009/08/29 19:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>PEAR HTTP Requestを使って作ってみました。\nPEARにはService Twitterもありますが，なかでcURLをつかっているので，入れていないと再ビルドしなければいけないので。\n日本語はUTF-8で投稿するみたいです。</p>\n\n\t"
  :code: |
    &lt;?php

    require_once('HTTP/Request.php');

    $username = 'username';
    $password = 'password';
    $comment = 'PHP からtwitter';

    $request =&amp; new HTTP_Request('http://twitter.com/statuses/update.xml');
    $request-&gt;setMethod(HTTP_REQUEST_METHOD_POST);
    $request-&gt;setBasicAuth($username, $password);
    $request-&gt;addPostData('status', $comment);

    $response = $request-&gt;sendRequest();

    if(PEAR::isError($response)){
        echo $response-&gt;getMessage();
    }

    ?&gt;
  :tags:
  - pear
  - php
  - twitter
  :references:
    :url: 
    :title: 
- :id: '9557'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9557
  :user_name: akineko
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/1097/
  :language: Java
  :time: 2009/09/07 08:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>コメントとかは適当です、ごめんなさい。\r</p>\n<p>もっとこうした方がいいよってところがあったら教えて頂けると嬉しいです。\r</p>\n<p>（指摘する箇所多すぎかもしれませんが･･･）</p>\n</div>\n\t"
  :code: "import java.util.Scanner;\n\npublic class Client {\n\n    public static
    void main(String[] args) {\n        Scanner stdIn = new Scanner(System.in);\n
    \       \n        System.out.print(\"Twitter ID : \");\n        String username
    = stdIn.nextLine();\n        \n        System.out.print(\"Twitter PASSWORD : \");\n
    \       String password = stdIn.nextLine();\n        \n        System.out.print(\"POST
    Message : \");\n        String message = stdIn.nextLine();\n        \n        Updater
    up = new Updater(username, password);\n        up.post(message);\n    }\n\n}\n\n\n-----------------------------------------------------------------------------\n\n\nimport
    java.io.OutputStream;\n\nimport java.net.URL;\nimport java.net.URLEncoder;\nimport
    java.net.HttpURLConnection;\n\nimport java.net.Authenticator;\nimport java.net.PasswordAuthentication;\n\npublic
    class Updater {\n    \n    private final String updateURL = \"http://twitter.com/statuses/update.xml\";\n
    \   \n    /**\n     * コンストラクタでユーザ名とパスワードを受け取り、その認証を登録する。\n     * @param username
    ユーザ名\n     * @param password パスワード\n     */\n    public Updater(String username,
    String password) {\n        HttpAuthenticator auth = new HttpAuthenticator(username,
    password);\n        Authenticator.setDefault(auth);\n    }\n    \n    /**\n     *
    引数で受け取った文字列をPOSTする。\n     * @param message POSTするメッセージ\n     */\n    public void
    post(String message) {\n        try {\n            //UpdateURLへのHttpURLConnectionを生成し、POSTメソッドの為の設定をする。\n
    \           HttpURLConnection con = (HttpURLConnection)(new URL(updateURL).openConnection());\n
    \           con.setRequestMethod(\"POST\");\n            con.setDoOutput(true);\n
    \           \n            //通信リンクを確立する。\n            con.connect();\n            \n
    \           //出力ストリームを取得し、メッセージをURLエンコードして書き込み。\n            OutputStream os =
    con.getOutputStream();\n            os.write((\"status=\" + URLEncoder.encode(message,
    \"UTF-8\")).getBytes());\n            os.flush();\n            os.close();\n            \n
    \           //通信が正常に行なわれたかどうかのチェック。\n            if (con.getResponseCode() !=
    HttpURLConnection.HTTP_OK)\n                System.out.println(\"ERROR! HTTP Response
    Status : \" + con.getResponseCode());\n            \n            //通信リンクを破棄。\n
    \           con.disconnect();\n            \n        } catch (Exception e) {\n
    \           //例外は握りつぶしてます。ごめんなさい。\n            e.printStackTrace();\n        }\n
    \   }\n\n    /**\n     * BASIC認証用クラス\n     */\n    class HttpAuthenticator extends
    Authenticator {\n        private PasswordAuthentication passAuth;\n        \n
    \       public HttpAuthenticator(String username, String password) {\n            passAuth
    = new PasswordAuthentication(username, password.toCharArray());\n        }\n        \n
    \       @Override\n        protected PasswordAuthentication getPasswordAuthentication()
    {\n            return passAuth;\n        }\n    }\n}\n"
  :tags:
  - Java
  - Twitter
  :references:
    :url: 
    :title: 
- :id: '9565'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9565
  :user_name: 匿名
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2009/09/08 21:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import twitter
    t = twitter.Api("user", "pass")
    s = t.PostUpdate("test")
  :tags: []
  :references:
    :url: /web/20100506132722/http://code.google.com/p/python-twitter/
    :title: python-twitter
- :id: '9670'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/9670
  :user_name: miso
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/1119/
  :language: HSP
  :time: 2009/11/08 14:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>2時間近くソケット＆HTTPと格闘していましたが、axobj使ったら3行で解決してしまいました。</p>\n\n\t"
  :code: |2
        axobj xml,"Msxml2.XMLHTTP"
        xml-&gt;"open" "POST","http://twitter.com/statuses/update.json","false","ID","パスワード"
        xml-&gt;"send" "status=投稿するメッセージ"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '10331'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/10331
  :user_name: PoohKid
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/180/
  :language: PHP
  :time: 2010/03/08 14:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PHP5にてコマンドラインから実行します。\r\nリクエスト部分は原始的にfsockopen関数を使用しました。\r\n\r\n使用法：\r\nphp
    this.php -u user -p pass -s \"status\"\r\n\r\nコマンドラインから入力されたSJISをUTF-８にエンコードする部分で悩みました。\r\n環境設定から何もかも初めてのPHPでした。\r\n所要時間：4時間</pre>\n\t"
  :code: |
    &lt;?php
        // php this.php -u user -p pass -s "status"
        $options = getopt('u:p:s:');
        echo(TwitterUpdate($options['u'], $options['p'], $options['s']));
    ?&gt;
    &lt;?php
    function TwitterUpdate($user, $pass, $status)
    {
        $request  = "POST /statuses/update.xml HTTP/1.0\r\n";

        $request .= "Host: twitter.com\r\n";
        $request .= "User-Agent: PHP/".phpversion()."\r\n";

        $request .= "Authorization: Basic ".base64_encode($user.":".$pass)."\r\n";

        $postdata = "status=".urlencode(mb_convert_encoding($status, 'UTF-8', 'SJIS'));
        $request .= "Content-Type: application/x-www-form-urlencoded\r\n";
        $request .= "Content-Length: ".strlen($postdata)."\r\n";
        $request .= "\r\n";
        $request .= $postdata;

        $fp = fsockopen('twitter.com', 80, $errno, $errstr, 30);
        if (!$fp) {
            die("$errstr ($errno)\n");
        }

        fputs($fp, $request);

        $response = "";
        while (!feof($fp)) {
            $response .= fgets($fp, 4096);
        }

        fclose($fp);

        return $response;
    }
    ?&gt;
  :tags: []
  :references:
    :url: /web/20100506132722/http://www.spencernetwork.org/memo/tips-3.php
    :title: 簡易 HTTP クライアント
- :id: '10460'
  :parent_id: '278'
  :url: http://ja.doukaku.org/comment/10460
  :user_name: Tokusei Noborio
  :user_url: /web/20100506132722/http://ja.doukaku.org/user/729/
  :language: Other
  :time: 2010/04/24 03:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>akinekoさんのJavaコードをClojureにしてみました。\n<a class=\"reference\" href=\"/web/20100506132722/http://ja.doukaku.org/comment/9557/\">http://ja.doukaku.org/comment/9557/</a></p>\n\n\t"
  :code: |
    (ns twitter
      (:import [java.io OutputStream]
           [java.net URL URLEncoder
            HttpURLConnection Authenticator
            PasswordAuthentication]))

    (def url "http://twitter.com/statuses/update.xml")

    (defn to-carray [str]
      (.toCharArray str))

    (defn http-auth [username password]
      (let [pass-auth (PasswordAuthentication. username
                           (to-carray password))]
        (proxy [Authenticator] []
          (getPasswordAuthentication [] pass-auth))))

    (defn updater [username password]
      (let [auth (http-auth username password)]
        (Authenticator/setDefault auth)))

    (defn connection []
      (let [con (.openConnection (URL. url))]
        (doto con
          (.setRequestMethod "POST")
          (.setDoOutput true)
          (.connect))))

    (defn post [username password message]
      (updater username password)
      (let [con (connection)
        os (.getOutputStream con)]
        (doto os
          (.write (.getBytes
               (str "status=" (URLEncoder/encode message "UTF-8"))))
          (.flush)
          (.close))
        (println os)
        (.disconnect con)
        (.getResponseCode con)))
  :tags:
  - ClClojure
  :references:
    :url: 
    :title: 
