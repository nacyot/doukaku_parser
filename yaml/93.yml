---
:id: '93'
:title: 末尾の空白文字を取り除く
:comments:
- :id: '4175'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4175
  :user_name: にしお
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/11/18 02:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>与えられた文字列の末尾の空白文字を取り除く方法と、その操作が与えられた文字列を破壊するかどうか。取り除かれる空白文字の種類。</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4176'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4176
  :user_name: にしお
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/11/18 02:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Pythonは文字列にrstrip(右側の空白文字を取り除く)というメソッドがある。\r\n非破壊的。</p>\r\n<p>取り除かれる空白文字はstring.whitespaceで定義されていて、\r\n通常は'\\t\\n\\x0b\\x0c\\r
    '。\r\nASCIIコードで表現すれば[9, 10, 11, 12, 13, 32]。\r\n取り除く文字の種類を変える場合は引数に与える。</p>\r\n\n\t"
  :code: "line.rstrip()\r\n\r\nline.rstrip('\\r\\n') # remove \\r and \\n\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4177'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4177
  :user_name: にしお
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/1/
  :language: Ruby
  :time: 2007/11/18 02:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Rubyは文字列がchomp,chomp!という2つのメソッドを持っている。chompは非破壊的でchomp!は破壊的。返る値は改行の取り除かれた文字列。\n取り除かれる文字はASCIIコードで表現すれば[10,
    13]のみ。</p>\n\n\t"
  :code: |
    line.chomp
    line.chomp!
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4178'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4178
  :user_name: にしお
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/1/
  :language: PHP
  :time: 2007/11/18 02:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>取り除かれる文字はASCIIコードで表現すると[0, 9, 10, 11, 13, 32]。</p>\n\n\t"
  :code: |
    rtrim(line)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4179'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4179
  :user_name: にしお
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/1/
  :language: JavaScript
  :time: 2007/11/18 02:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>JavaScriptには専用のメソッドはなさそうだったので正規表現で置換。取り除かれる文字はASCIIコードで表現すると[9,
    10, 11, 12, 13, 32]。</p>\n\n\t"
  :code: |
    line.replace(/\s+$/, "")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4181'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4181
  :user_name: sumim
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/18 03:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk では、文字列に withoutTrailingBlanks を送信。非破壊的。\r<br><br>取り除かれる文字は isSeparator という問い合わせに対して true を返してくる文字。具体的には　ASCII　コードで表現すると #(32 13 9 10 12) 。\n\t"
  :code: |
    line withoutTrailingBlanks
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4184'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4184
  :user_name: horiuchi
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2007/11/18 03:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Javaでは両側の空白文字を削除する String#trim() しかないので、正規表現で実装。\n取り除かれる文字は『空白文字:
    [ tnx0Bfr]』になります。</p>\n\n\t"
  :code: |
    line.replaceAll("\\s+$", "");
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4185'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4185
  :user_name: horiuchi
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/570/
  :language: 
  :time: 2007/11/18 03:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>『空白文字: [ tnx0Bfr]』の中のバックスラッシュが消えてしまったので、ASCIIコード表記に修正\nASCIIコードの10進表記で
    『32, 9, 10, 11, 12, 13』 になります。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4187'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4187
  :user_name: horiuchi
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/570/
  :language: Perl
  :time: 2007/11/18 04:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Perlがなかったので投稿。\nRubyと同じで 末尾の改行文字を取り除く関数があります。取り除かれる文字は [10, 13]
    のみ。</p>\n\n\t"
  :code: |
    chomp($line);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4189'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4189
  :user_name: federkasten
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/556/
  :language: C
  :time: 2007/11/18 04:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Cがなかったので。\n正規表現でやると、こんな感じでしょうか。。。</p>\n\n\t"
  :code: "#include &lt;string.h&gt;\n#include &lt;regex.h&gt;\n\nvoid rstrip( char*
    dest, const char* src ) {\n  regex_t preg;\n  regmatch_t pmatch;\n  \n  regcomp(&amp;preg,
    \"\\\\ +$\", REG_EXTENDED|REG_NEWLINE);\n  regexec(&amp;preg, src, 1, &amp;pmatch,
    0);\n  regfree(&amp;preg);\n  \n  strncpy( dest, src, pmatch.rm_so );\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4192'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4192
  :user_name: mtsuyugu
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/18 05:43 GMT
  :vote_count: '3'
  :vote_score: '-3'
  :body: "\n\t  組み込みではないので自作で破壊的関数。\r<br>空白文字の判定は isspace を使っていますが、取り除かれる文字は ASCIIコードで [9, 10, 11, 12, 13, 32]。\r<br>"
  :code: |
    #include &lt;ctype.h&gt;
    char* rtrim( char *str ){
       char *p = str;
       while( *p++ );
       p--;
       while( isspace( *(--p) ) );
       *(p+1) = '\0';
       return str;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4194'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4194
  :user_name: mtsuyugu
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/18 06:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>boost を使えば、boost::algorithm に trim が用意されています。trim_right_copy が非破壊で、trim_right
    が破壊的です。削除される文字は isspace が true になるものと同じです。</p>\n\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include "boost/algorithm/string/trim.hpp"

    using namespace std;
    using namespace boost::algorithm;

    int main ( int argc, char *argv[] ){
       string str1( argv[1] );
       string str2 = trim_right_copy( str1 );
       cout &lt;&lt; str1 &lt;&lt; "#" &lt;&lt; endl;
       cout &lt;&lt; str2 &lt;&lt; "#" &lt;&lt; endl;
       trim_right( str1 );
       cout &lt;&lt; str1 &lt;&lt; "#" &lt;&lt; endl;
    }
  :tags:
  - boost
  :references:
    :url: 
    :title: 
- :id: '4195'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4195
  :user_name: kozima
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/11/18 06:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Common Lisp には string-right-trim という関数があります。非破壊的です。\r\n取り除く文字は第一引数に文字列、リスト、ベクタのいずれかで指定します。</pre>\n\t"
  :code: |
    (string-right-trim '(#\Space #\Tab #\Newline) line)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4197'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4197
  :user_name: nobsun
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/11/18 07:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">一番わかりやすいのは，\r\n・文字列を反転\r\n・前から文字を辿って空白である間それを落す\r\n・もう一度反転する\r\nこれが，trim0
    なのですが，この場合与えられた文字列を2回たどることになります．\r\n\r\n与えられた文字列をどるのを1回にするには foldr を使って畳み込むという手があります．\r\nこれが
    trim1です．\r\n\r\nHaskellですから当然文字列を破壊することはできません．\r\n\r\n空白文字を判定するのは Data.Char モジュールの
    の isSpace です\r\nisSpace で空白と判定される文字コードはghciのプロンプトで以下のようにすると列挙できます。\r\n\r\n% ghci
    -v0\r\nPrelude&gt; :m + Data.Char Text.Printf\r\nPrelude Text.Printf Data.Char&gt;
    mapM_ (printf \"0x%02x\\n\") $ map ord $ filter isSpace [minBound .. maxBound]\r\n0x09\r\n0x0a\r\n0x0b\r\n0x0c\r\n0x0d\r\n0x20\r\n0xa0\r\n0x1680\r\n0x180e\r\n0x2000\r\n0x2001\r\n0x2002\r\n0x2003\r\n0x2004\r\n0x2005\r\n0x2006\r\n0x2007\r\n0x2008\r\n0x2009\r\n0x200a\r\n0x200b\r\n0x202f\r\n0x205f\r\n0x3000\r\n</pre>\n\t"
  :code: |
    import Data.Char

    trim0 = reverse . dropWhile isSpace . reverse

    trim1 = foldr (\ c cs -&gt; if null cs &amp;&amp; isSpace c then "" else c:cs) ""
  :tags:
  - Data.Char
  :references:
    :url: 
    :title: 
- :id: '4200'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4200
  :user_name: SiroKuro
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/11/18 09:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C# では String.TrimEnd メソッドがあります。非破壊的。\r\n取り除かれる文字を引数に指定すると、その文字を取り除きます。\r\nnull
    を指定すると、Unicode の空白文字 = {0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x20, 0xA0, 0x2000, 0x2001,
    0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x200B,
    0x3000, 0xFEFF} の２１個が消えます。\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            string text = "abcdefg\n   \n　　　\n\t\t\t";
            Console.WriteLine("[{0}]", text.TrimEnd(null));
                // [abcdefg]
            Console.WriteLine("[{0}]", text.TrimEnd('\n', '\r', ' ', '　', '\t', 'g', 'f'));
                // [abcde]
        }
    }
  :tags: []
  :references:
    :url: /web/20100606040200/http://msdn2.microsoft.com/ja-jp/library/system.string.trimend(VS.80).aspx
    :title: MSDN - String.TrimEnd メソッド (System)
- :id: '4209'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4209
  :user_name: shiro
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/11/18 20:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Schemeではsrfi-13のstring-trim-rightが使えます。\n取り除く文字種はデフォルトではlexerによって空白と見なされる文字(Gauche
    0.8.12ではspace, tab, linefeed, vertical tab, form feed, return.  いずれUnicode全般の空白文字も含む予定)。\n3番目の例のように、オプショナル引数で文字種の指定もできます。</p>\n\n\t"
  :code: |
    gosh&gt; (use srfi-13)
    #&lt;undef&gt;
    gosh&gt; (string-trim-right "abcd    ")
    "abcd"
    gosh&gt; (string-trim-right "abcd    \n")
    "abcd"
    gosh&gt; (string-trim-right "aBcDeFgh   \n" #[a-z\s])
    "aBcDeF"
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4249'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4249
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2007/11/19 10:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">毎回 null cs をチェックするのが癪なのでチェックしないバージョン。\r\n末尾が空白でなければコピーでなく与えられた文字列そのものを返します。\r\n\r\n実質は状態遷移してるだけです。\r\n読みづらい。もしかしたら実行効率も落ちてるかも。\r\nでもそんなの関………\r\n</pre>\n\t"
  :code: |
    import Char (isSpace)

    data T a = T [a] (a -&gt; [a] -&gt; T a)

    trim2 xs = str  where
      T str _ = foldr (\c (T cs f) -&gt; f c cs) (T xs lastCheck) xs
      lastCheck  c cs = if (isSpace c) then (T [] trailCheck) else (T cs  pass)
      trailCheck c _  = if (isSpace c) then (T [] trailCheck) else (T [c] cons)
      pass _ cs = T cs pass
      cons c cs = T (c:cs) cons
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4271'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4271
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/304/
  :language: 
  :time: 2007/11/20 09:25 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">効率なんか関係ねえといいながらもやはり気になって 100000バイトの文字列で\r\n計測してみました。\r\n\r\n全部空白文字のとき
    trim1 と trim2 はほぼ同時。（trim2 がちょい早く終わる）\r\n末尾の空白が少なくなるにつれて trim2 は段々早く終わるようになるが
    trim1 は変わらず。\r\n\r\ntrim2 の方が効率よい、よしよしと喜んで、さて問題外の trim0 もついでに\r\n計測してやるかとやってみたところ常に
    trim0 が時間もメモリも圧倒的に\r\n効率よい・・・ orz\r\nreverse も dropWhile も組み込みだから（本当？）なんでしょうか。\r\n凝ったことせずに組み込み関数組み合わせてシンプルなコード書きましょうという教訓でした。\r\n\r\nちなみに
    trim の結果文字列が完全に評価されたことを確認するのには\r\nf xs = foldl' (\\b c -&gt; b + ord c) 0 xs\r\nを使いました。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4451'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4451
  :user_name: yohei
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/415/
  :language: 
  :time: 2007/11/27 16:52 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">マイナス評価を付けても反応が無かったので、ちゃんと指摘します。\r\n次のような場合|123
    \ |と出力されず、|123|と出力されます。文字列が空白だけの時は...((((;゜Д゜)))\r\n char s[] = \"123       \";\r\n
    rtrim(s + 5);\r\n printf(\"|%s|\\n\", s);</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4456'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4456
  :user_name: 匿名
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/28 03:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>僕の勘違いでなければ問題の書き方にも問題があるように思いますね。\nトピック全体にもいえることですけど\nお題を簡素に書きすぎてやるべきことがわかりにくい気がします。</p>\n<p>その他の投稿でもchop系とtrim系が混ざっているので\n判断つきにくいのではないでしょうか。</p>\n<p>このお題は、末尾の空白文字を1文字削除する出よいのですか？\nそれとも連続する空白をすべて削除する？</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4457'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/4457
  :user_name: shiro
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/11/28 04:46 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <p>chop系とtrim系が混ざってる問題は確かにあるんですが、#4192はそれ以前の問題であることをyoheiさんは言っているのでは。(文字列の開始点をチェックしてないので渡されたデータより前にあるメモリにアクセスし、最悪破壊する可能性がある)。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5071'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/5071
  :user_name: susu
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2007/12/31 08:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>見当たらなかったので自作しました。両方非破壊です。</p>\n\n\t"
  :code: "let rtrim ?(ch=\" \\t\\n\\011\\012\\013\") str =\n  let rec loop i =\n    if
    i&gt;=0 &amp;&amp; String.contains ch str.[i]\n    then loop (i-1)\n    else String.sub
    str 0 (i+1)\n  in loop (String.length str - 1);;\n    \n(*正規表現版*)\n#load \"str.cma\";;\nlet
    rtrim2 str =\n  let cond = Str.regexp \"[ \\009-\\013]+$\" in\n  Str.global_replace
    cond \"\" str;;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5836'
  :parent_id: '93'
  :url: http://ja.doukaku.org/comment/5836
  :user_name: Nemo
  :user_url: /web/20100606040200/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/02/23 10:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>手頃なオペレータがなかったので自作。取り除く文字は5行目で定義しています。\n返り値はもとの文字列の部分文字列(参照)です。\n元の文字列実体が保持される、という意味では非破壊です。</p>\n\n\t"
  :code: |
    %!PS

    /RTrim { % (String   ) RTrim (String)
        dup length 1 sub
        &lt;&lt;9 true 10 true 11 true 12 true 13 true 32 true&gt;&gt;
        3 1 roll
        -1 0 {
            2 copy get
            3 index exch known {
                0 exch getinterval
            } {pop exit} ifelse
        } for
        exch pop
    } bind def

    (|) print
    (ABCD   ) RTrim print
    (|) =
  :tags: []
  :references:
    :url: 
    :title: 
