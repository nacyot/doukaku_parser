---
:id: '113'
:title: HTTPでGET　その2
:comments:
- :id: '4798'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4798
  :user_name: ところてん
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/12/13 07:17 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\r\n\t  <pre class=\"compact\">HTTPでGET　その２\r\n\r\n前回のお題\r\nhttp://ja.doukaku.org/18/\r\n\r\nHTTPで指定されたURLをGETするコードを書いてください。
    \r\nURLは「http://ja.doukaku.org/feeds/comments/」とします。 \r\n\r\nただし\r\n・Proxyサーバを経由してGETしてください。\r\n・タイムアウトを1秒に設定してください。\r\n　(デフォルトが1秒でも、1秒に変更してください)\r\n・タイムアウトを十分に小さくした場合、GETが失敗することを確認してください。\r\n\r\nもしOSに依存する場合はそのOS名のタグを、
    依存しない場合は「OS非依存」というタグをつけてください。\r\n わからなければつけなくても構いません。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20101117164910/http://ja.doukaku.org/18/
    :title: ' HTTPでGET'
- :id: '5990'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/5990
  :user_name: yharada
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/758/
  :language: Groovy
  :time: 2008/03/08 14:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>groovyです。こちらにも解答してみます\ntimeout=10でjava.net.SocketTimeoutExceptionがthrowされることを確認しました</p>\n\r\n\t"
  :code: "proxyHost = \"localhost\"\nproxyPort = 8000\nurl = \"http://ja.doukaku.org/feeds/comments/\"\ntimeout
    = 1000\n\na = new URL(\"http\", proxyHost, proxyPort, url).openConnection()\na.setReadTimeout(timeout)
    \nprintln a.getInputStream().getText(\"UTF8\")\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4904'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4904
  :user_name: SiroKuro
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/540/
  :language: 
  :time: 2007/12/20 18:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  おっと。失敗の確認に関して何も報告してなかった。\r<br>タイムアウト時には GetResponse が WebException を投げてきます。\r<br>自分の環境だと、１秒ではまず間違いなく例外が投げられますね。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4889'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4889
  :user_name: minke
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/28/
  :language: Ruby
  :time: 2007/12/19 19:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>Net::HTTP::Proxy を利用する</p>\n\r\n\t"
  :code: |
    require 'net/http'
    def get_with_proxy(proxy_server, proxy_port)
        proxy = Net::HTTP::Proxy(proxy_server, proxy_port)
        http = proxy.new('ja.doukaku.org')
        http.open_timeout = 1
        http.start do |h|
          response = h.get('/feeds/comments/')
          puts response.body
        end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5936'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/5936
  :user_name: howking
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/744/
  :language: Erlang
  :time: 2008/03/04 17:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>ざっくりと。</p>\n\r\n\t"
  :code: |
    1&gt; inets:start().
    ok
    2&gt; http:set_options([{proxy,{{"pro.xy.ip.addr", 8080},[]}}]).
    ok
    3&gt; http:request(get,{"http://ja.doukaku.org/feeds/comments/",[]},[{timeout,1000}],[]).
    {error,timeout} ... Timeout1秒だと失敗
    4&gt; http:request(get,{"http://ja.doukaku.org/feeds/comments/",[]},[{timeout,10000}],[]).
    {ok,{{"HTTP/1.0",200,"OK"}, ... (Timeout10秒だとOK)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4922'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4922
  :user_name: 匿名
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/4/
  :language: PHP
  :time: 2007/12/21 16:42 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>Zend Frameworkで</p>\n\r\n\t"
  :code: |
    &lt;?php
    require_once 'Zend/Http/Client.php';

    $config = array(
        'adapter'    =&gt; 'Zend_Http_Client_Adapter_Proxy',
        'proxy_host' =&gt; 'ugnews.net',
        'timeout'=&gt; 1
    );

    $client = new Zend_Http_Client('http://ja.doukaku.org/feeds/comments/', $config);
    print_r($client-&gt;request('GET'));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5266'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/5266
  :user_name: naranja
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2008/01/11 08:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  libcurl を使ってみました。使い方は怪しいですが。\r<br>若干古いライブラリなので最近の D 2.0 コンパイラではダメだと思われます。\r<br>こちらでは dmd 1.025 を bud 経由で使いました。\r\n\t"
  :code: |
    import std.stdio;
    import libcurl;
    import curldef;

    void main(){
        auto curl = new LibCurl();
        ProxyData proxy;
        proxy.url = "proxy.example.net:8001";
        curl.proxy(proxy);
        curl.URL("http://ja.doukaku.org/feeds/comments/");
        curl.setOption(CURLOPT_TIMEOUT, 1);

        auto str = curl.downloadToString();
        writefln("%s", str);
    }
  :tags: []
  :references:
    :url: /web/20101117164910/http://curl.haxx.se/libcurl/d/
    :title: libcurl for D
- :id: '6349'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/6349
  :user_name: turugina
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/760/
  :language: C
  :time: 2008/05/27 02:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Boost.Asioでゴリゴリ.</pre>\r\n\t"
  :code: "#include &lt;boost/array.hpp&gt;\n#include &lt;boost/asio.hpp&gt;\n#include
    &lt;boost/date_time/posix_time/posix_time.hpp&gt;\n#include &lt;boost/lexical_cast.hpp&gt;\n#include
    &lt;boost/regex.hpp&gt;\n#include &lt;boost/shared_ptr.hpp&gt;\n\n#include &lt;cstring&gt;\n#include
    &lt;exception&gt;\n#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nboost::shared_ptr&lt;boost::asio::ip::tcp::socket&gt;
    g_socket;\nboost::shared_ptr&lt;boost::asio::deadline_timer&gt; g_timer;\nboost::array&lt;char,
    128&gt; g_recv_buf;\n\nvoid on_read(\n    const boost::system::error_code&amp;
    err,\n    std::size_t bytes_transfered\n    )\n{\n  if ( err ) {\n    if ( err
    != boost::asio::error::eof )\n      std::cerr &lt;&lt; boost::system::system_error(err).what()
    &lt;&lt; \"\\n\";\n    if ( g_timer )\n      g_timer-&gt;cancel();\n    return;\n
    \ }\n  std::cout.write(g_recv_buf.data(), bytes_transfered);\n  g_socket-&gt;async_read_some(boost::asio::buffer(g_recv_buf,
    g_recv_buf.size()), on_read);\n}\n\nvoid on_timeout(const boost::system::error_code&amp;
    err)\n{\n  if ( err != boost::asio::error::operation_aborted ) {\n    if (!err)
    {\n      std::cerr &lt;&lt; \"TIMEOUT!\\n\";\n      if ( g_socket )\n        g_socket-&gt;shutdown(boost::asio::ip::tcp::socket::shutdown_both);\n
    \   }\n    else\n      std::cerr &lt;&lt; boost::system::system_error(err).what()
    &lt;&lt; \"\\n\";\n  }\n}\n\nint main(int c, char** v)\n{\n  int timeout_sec =
    1;\n\n  if ( c &lt; 2 ) {\n    std::cout &lt;&lt; \"usage: \" &lt;&lt; v[0] &lt;&lt;
    \" &lt;url&gt; [&lt;proxy url&gt; [&lt;timeour sec&gt;]]\\n\";\n    return 0;\n
    \ }\n  const bool use_proxy = c &gt; 2 &amp;&amp; std::strlen(v[2]);\n  const
    std::string proxy_url(use_proxy ? v[2] : \"\");\n  const std::string target_url(v[1]);\n\n
    \ if ( c &gt; 3 ) {\n    try {\n      timeout_sec = boost::lexical_cast&lt;int&gt;(v[3]);\n
    \   }\n    catch (const std::exception&amp; e) {\n      std::cerr &lt;&lt; \"invalid
    timeout sec (\" &lt;&lt; v[3] &lt;&lt; \") :\" &lt;&lt; e.what() &lt;&lt; \"\\n\";\n
    \     return 1;\n    }\n  }\n\n  std::string proto, host, port, path;\n\n  try
    {\n    boost::regex r(\"(?:([^:]+)://)?([^:/]+)(?::(\\\\d+))?/?(.*$)\");\n    boost::smatch
    m;\n    const std::string&amp; url = use_proxy ? proxy_url : target_url;\n    if
    ( boost::regex_match(url, m, r) ) {\n      proto = m[1].length() &gt; 0 ? m[1].str()
    : std::string(\"http\");\n      host  = m[2];\n      port  = m[3];\n      path
    \ = use_proxy ? target_url : \"/\" + m[4];\n    }\n    else {\n      std::cerr
    &lt;&lt; \"given url (\" &lt;&lt; url &lt;&lt; \") doesn't match!\\n\";\n      return
    1;\n    }\n  }\n  catch (const std::exception&amp; e) {\n    std::cerr &lt;&lt;
    \"error while analyzing url(\"\n      &lt;&lt; (use_proxy ? proxy_url : target_url)
    &lt;&lt; \") : \" &lt;&lt; e.what() &lt;&lt; \"\\n\";\n    return 1;\n  }\n\n
    \ try {\n    using boost::asio::ip::tcp;\n\n    boost::asio::io_service io_service;\n
    \   \n    tcp::resolver resolver(io_service);\n    g_timer.reset(new boost::asio::deadline_timer(io_service));\n\n
    \   tcp::resolver::query query(host, port.empty() ? proto : port );\n\n    tcp::resolver::iterator
    endpoint_iterator = resolver.resolve(query);\n    tcp::resolver::iterator end;\n\n
    \   g_socket.reset(new tcp::socket(io_service));\n    boost::system::error_code
    err = boost::asio::error::host_not_found;\n    while (err &amp;&amp; endpoint_iterator
    != end ) {\n      g_socket-&gt;close();\n      g_socket-&gt;connect(*endpoint_iterator++,
    err);\n    }\n    if ( err )\n      throw boost::system::system_error(err);\n\n
    \   const std::string message(\"GET \" + path + \" HTTP/1.0\\r\\n\\r\\n\");\n\n
    \   boost::asio::write(*g_socket, boost::asio::buffer(message),\n        boost::asio::transfer_all(),
    err);\n    if ( err )\n      throw boost::system::system_error(err);\n\n\n    g_timer-&gt;expires_from_now(boost::posix_time::seconds(timeout_sec));\n
    \   g_socket-&gt;async_read_some(boost::asio::buffer(g_recv_buf, g_recv_buf.size()),
    on_read);\n    g_timer-&gt;async_wait(on_timeout);\n    io_service.run();\n\n
    \   g_socket.reset();\n    g_timer.reset();\n  }\n  catch (const std::exception&amp;
    e) {\n    std::cerr &lt;&lt; e.what() &lt;&lt; \"\\n\";\n    return 1;\n  }\n\n
    \ return 0;\n}\n"
  :tags: []
  :references:
    :url: /web/20101117164910/http://www.boost.org/doc/libs/1_35_0/doc/html/boost_asio.html
    :title: Boost.Asio
- :id: '4907'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4907
  :user_name: nobsun
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/12/21 00:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>補足：プロキシは環境変数 HTTP_PROXY を見るようにしてあります。</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4895'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4895
  :user_name: yuin
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/12/20 07:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    from urllib2 import *
    req = Request("http://ja.doukaku.org/feeds/comments/")
    req.set_proxy("localhost:8000", "http")
    socket.setdefaulttimeout(1.0)
    print urlopen(req).read()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4902'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4902
  :user_name: 匿名
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/12/20 15:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ProxyサーバとTIMEOUTを設定してGETしています。\r<br>TIMEOUTを100msにした場合、java.net.SocketTimeoutException が発生します。\r\n\t"
  :code: "import java.net.*;\nimport java.io.*;\n\npublic class Sample {\n    public
    static final String SITE = \"http://ja.doukaku.org/feeds/comments/\";\n    public
    static final String PROXY_HOST = \"filter.nifty.com\";\n    public static final
    int PROXY_PORT = 8080;\n    public static final int TIMEOUT = 1 * 1000; // m sec\n\n
    \   public static void main(String[] args) throws Exception {\n        Proxy proxy
    = new Proxy(Proxy.Type.HTTP, \n                                new InetSocketAddress(PROXY_HOST,
    PROXY_PORT));\n        URLConnection uc = new URL(SITE).openConnection(proxy);\n
    \       uc.setConnectTimeout(TIMEOUT);\n        uc.setReadTimeout(TIMEOUT);\n
    \       uc.connect();\n        BufferedReader r = new BufferedReader(new InputStreamReader(\n
    \               uc.getInputStream(), \"UTF-8\"));\n        String str;\n        while
    ((str = r.readLine()) != null) {\n            System.out.println(str);\n        }\n
    \   }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4897'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4897
  :user_name: yuin
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/12/20 08:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    import java.io._
    import java.net._

    val con = (new URL("http", "localhost", 8000, "http://ja.doukaku.org/feeds/comments/")).openConnection.asInstanceOf[HttpURLConnection]
    con.setConnectTimeout(1000)
    con.setReadTimeout(1000)
    con.setRequestMethod("GET")
    val read = (new BufferedReader(new InputStreamReader(con.getInputStream))).readLine _

    def printContents:unit = read() match{
      case null =&gt;()
      case s =&gt; println(s);printContents
    }
    printContents
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4896'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4896
  :user_name: 匿名
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/12/20 07:56 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">タイムアウトをこのデータ取得関数全体でのタイムアウトだと解釈して\r\nすべてのメソッド呼び出し前にタイムアウトを設定しなおしています。\r\n\r\n確認できませんがposix系でしか動かないかもしれません。</pre>\r\n\t"
  :code: |
    import socket
    from time import time

    def geturl(url, proxy_host, proxy_port, timeout):
      timeout += time()
      s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
      s.settimeout(timeout-time())
      s.connect((proxy_host, proxy_port))
      s.settimeout(timeout-time())
      s.send('GET %s HTTP/1.1\r\n\r\n' % url)
      s.settimeout(timeout-time())
      r = d = s.recv(2048)
      while d:
        s.settimeout(timeout-time())
        d = s.recv(2048)
        r += d
      s.close()
      return r[r.index('\r\n\r\n')+4:]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4892'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4892
  :user_name: shiro
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/12/20 00:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>特にproxy用のインタフェースはありませんが、http-getのserver引数にproxyサーバ、url引数に目的とする絶対URLを指定してやればproxyを通したアクセスになります。</p>\n<p>タイムアウトはhttp-get自体ではまだサポートしていないので、スレッドを使ってみました。なのでpthreadサポートが必要ですが、pthreadが動けばOS非依存のはず。</p>\n\r\n\t"
  :code: |
    (use rfc.http)
    (use gauche.threads)

    (define *proxy* "localhost")
    (define *timeout* 1.0) ;seconds

    (define (get/proxy-and-timeout url)
      (let1 t (make-thread (lambda () (receive r (http-get *proxy* url) r)))
        (or (thread-join! (thread-start! t) *timeout* #f)
            (begin (thread-terminate! t) #f))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4899'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4899
  :user_name: 匿名
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2007/12/20 10:55 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>WWW::Mechanizeで．</p>\n<p>うちの環境では，timeout 1秒だと成功するorzので，0.1秒にしました．</p>\n\r\n\t"
  :code: |
    #!/usr/local/bin/ruby
    require 'rubygems'
    require 'mechanize'

    class Crawler &lt; WWW::Mechanize
      attr_accessor :agent

      PROXY_HOST = 'localhost'
      PROXY_PORT = '8080'
      URI = 'http://ja.doukaku.org/feeds/comments/'

      def initialize(conf = {})
        super()
        self.max_history = 1  # 幸せになるおまじない
        self.set_proxy(PROXY_HOST, PROXY_PORT)
        conf.each {|method, value| self.send(method, value) }
      end

      def fetch
        get(URI)
      end
    end

    # puts Crawler.new.fetch.body  # =&gt; succeed
    puts Crawler.new({:open_timeout= =&gt; 0.1, :read_timeout= =&gt; 0.1}).fetch.body
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9244'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/9244
  :user_name: ryugate
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/674/
  :language: Scala
  :time: 2009/06/26 07:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>プロパティをいじる方法で、Sourceを使ってみました。</p>\n\r\n\t"
  :code: |
    import scala.io.Source

    System.setProperty("http.proxyHost","proxy.server.jp")
    System.setProperty("http.proxyPort","8080")

    println(
      Source.fromURL("http://ja.doukaku.org/feeds/comments/")
            .getLines
            .mkString
           )
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4890'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4890
  :user_name: 匿名
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/12/19 20:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    #!/usr/bin/perl

    use strict;
    use warnings;

    use LWP::UserAgent;

    my $ua = LWP::UserAgent-&gt;new;
    $ua-&gt;timeout(1);
    $ua-&gt;proxy('http', 'http://proxy.example.net:8001/');

    my $res = $ua-&gt;get('http://ja.doukaku.org/feeds/comments');

    if ($res-&gt;is_success) {
        print $res-&gt;content;
    }
    else {
        die $res-&gt;status_line;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4920'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4920
  :user_name: sumim
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/12/21 16:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Squeak Smalltalk で。\r\n\t"
  :code: |
    | sock url crlf list contents secs |
    HTTPSocket useProxyServerNamed: 'proxy.example.com' port: 8080.
    url := 'http://ja.doukaku.org/feeds/comments/' asUrl.
    crlf := String crlf.
    secs := HTTPSocket deadlineSecs: 1.
    sock := HTTPSocket initHTTPSocket: url wait: secs ifError: [:err | ^err].
    sock sendCommand: 'GET ', url fullPath, ' HTTP/1.1', crlf, crlf.
    list := sock getResponseUpTo: crlf, crlf ignoring: String cr.
    contents := (sock getRestOfBuffer: list third) contents.
    sock destroy.
    HTTPSocket stopUsingProxyServer.
    ^contents
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4901'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4901
  :user_name: mc
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2007/12/20 15:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">(http-get/proxy-&amp;-timeout \"http://ja.doukaku.org/feeds/comments/\")\r\n;時間内\r\n;
    ==&gt;http-requestの結果\r\n;タイムアウト時\r\n; ==&gt; nil\r\n\r\nDrakmaとタイムアウトの制御に、Portable-Threadsを使ってみました。\r\n・Clozure
    CL 1.2 Linux/x86_64 \r\n・SBCL 1.0.12 Linux/x86_64 \r\n・Allegro 8.1 Express MacOSX/PPC\r\n・CLISP
    2.41 MacOSX/PPC\r\n・LispWorks PE 5.0.1 MacOSX/PPC\r\nで動作確認しています。\r\n;; LispWorks限定ということならhttp-requestはタイムアウト制御の引数を取ることが\r\n;;
    可能なようです。</pre>\r\n\t"
  :code: |
    (require :portable-threads)
    (require :drakma)

    (defun http-get/proxy-&amp;-timeout (uri &amp;optional (expire 1) proxy port)
      (portable-threads:with-timeout (expire nil)
        (drakma:http-request uri :proxy (and proxy `(,proxy ,port)))))
  :tags: []
  :references:
    :url: /web/20101117164910/http://www.cliki.net/Portable-Threads
    :title: Portable-Threads
- :id: '4988'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4988
  :user_name: shimakuma
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/12/27 04:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p><a class=\"reference\" href=\"/web/20101117164910/http://ja.doukaku.org/113/lang/java/\">Java</a>\n/\n<a
    class=\"reference\" href=\"/web/20101117164910/http://ja.doukaku.org/113/lang/scala/\">Scala</a>\nとほぼ同じ。</p>\n\r\n\t"
  :code: |
    importPackage(java.net);
    importPackage(java.io);

    (function doukaku113(prox, timeout, port){ port || (port = 8080);
      prox = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(prox, port));
      with(new URL('http://ja.doukaku.org/feeds/comments/').openConnection(prox)) try{
        setConnectTimeout(timeout);
        setReadTimeout(timeout);
        connect();
        with(new BufferedReader(new InputStreamReader(getInputStream(), 'UTF-8')))
          for(var b; b = readLine();) print(b);
      } catch(e){ print(e) }
      return arguments.callee;
    })(
      'localhost', 1000
      // =&gt; &lt;?xml version="1.0" ...
    )(
      'localhost', 100
      // =&gt; JavaException: java.net.SocketTimeoutException: Read timed out
    );
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5920'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/5920
  :user_name: mtsuyugu
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2008/03/02 01:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>#3704 を元にしています。</p>\n\r\n\t"
  :code: |
    #include &lt;curlpp/cURLpp.hpp&gt;
    #include &lt;curlpp/Easy.hpp&gt;
    #include &lt;curlpp/Options.hpp&gt;
    #include &lt;string&gt;

    std::string content;

    size_t writeMemoryCallback( char *ptr, size_t size, size_t nmemb  ){
       size_t realsize = size * nmemb;
       content.append(  static_cast&lt;const char *&gt;( ptr ), realsize );
       return realsize;
    }

    int main( int argc, char *argv[] ){

       try {
          cURLpp::Cleanup cleaner;
          cURLpp::Easy request;
          request.setOpt( new cURLpp::Options::Url( "http://ja.doukaku.org/feeds/comments/" ) );
          request.setOpt( new cURLpp::Options::WriteFunction(
                          cURLpp::Types::WriteFunctionFunctor( &amp;writeMemoryCallback )));
          request.setOpt( new cURLpp::Options::Proxy( "example.com:80" ) );
          request.setOpt( new cURLpp::Options::Timeout( 1 ));
          request.perform();
       }
       catch ( cURLpp::LogicError &amp; e ) {
          std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
          return 1;
       }
       catch ( cURLpp::RuntimeError &amp; e ) {
          std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
          return 1;
       }
       std::cout &lt;&lt; content &lt;&lt; std::endl;
       return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4906'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4906
  :user_name: nobsun
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/12/20 23:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>HTTPパッケージにあるモジュール群を使う．\nタイムアウトは ghc-6.8.2 で標準になったSystem.TImeout
    モジュールを使う</p>\n\r\n\t"
  :code: "module Main (main) where\n\nimport Data.Maybe\nimport Network.Browser\nimport
    Network.HTTP\nimport Network.URI\nimport System.Environment\nimport System.IO\nimport
    System.Timeout\n-- import qualified System.IO.UTF8 as U\n\nmain :: IO ()\nmain
    = do { prog &lt;- getProgName\n          ; args &lt;- getArgs\n          ; case
    args of\n              [h] -&gt; do { mr &lt;- timeout tolerance $ httpRequest
    (mkreq h)\n                        ; case mr of\n                            Nothing
    -&gt; hPutStrLn stderr $ prog ++ \": timeout\"\n                            Just
    (Right resp)\n                              -&gt; hPutStrLn stdout $ rspBody resp\n
    \                       }\n              _   -&gt; usage prog\n          }\n  where
    \n    mkreq h = Request uri GET [Header HdrHost h'] \"\"\n      where \n         uri
    = fromJust $ parseURI h\n         h'  = uriRegName $ fromJust $ uriAuthority uri\n
    \        \ntolerance :: Int\ntolerance = 10^6 -- micro sec\n                            \nusage
    :: String -&gt; IO ()\nusage prog = hPutStrLn stderr $ \"usage: \"++prog++\" &lt;uri&gt;\"\n\nhttpRequest
    :: Request -&gt; IO (Result Response)\nhttpRequest req\n = do { proxy &lt;- catch\n
    \                  (getEnv \"HTTP_PROXY\" &gt;&gt;= return . (flip Proxy Nothing))\n
    \                  (\\_ -&gt; return NoProxy)\n      ; (_, resp) &lt;- browse
    (setProxy proxy &gt;&gt; request req)\n      ; return (Right resp)\n      }\n"
  :tags: []
  :references:
    :url: /web/20101117164910/http://hackage.haskell.org/cgi-bin/hackage-scripts/package/HTTP-3001.0.4
    :title: HackageDB:HTTP-3001.0.4
- :id: '7112'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/7112
  :user_name: kkobayashi
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/08/12 13:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>タイムアウトはtimeoutというオプション、プロキシサーバーはhttp_proxyという環境変数でそれぞれ指定します。</p>\n<p>http_proxyは、起動後初回のダウンロード処理を実行する前に、一度だけ設定可能です。その後は設定可・不可の切り替えはできますが、プロキシサーバーのホストを変更することはできません(These
    environment variables must be set before the download code is first used: they
    cannot be altered later by calling Sys.setenv)。</p>\n<p>タイムアウトを1秒にすると、大抵のGETは失敗してしまうみたいですね。</p>\n\r\n\t"
  :code: |
    http.get &lt;- function(url, proxy='', timeout.value=1){
      options(timeout=timeout.value)
      Sys.setenv(http_proxy=proxy)
      readLines(url)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4894'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4894
  :user_name: SiroKuro
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/20 01:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  WebRequest.Timeout と WebRequest.Proxy から。意外と短く書けます。\r<br>OS 非依存。Mono とかでも動くのかな。\r\n\t"
  :code: |
    using System;
    using System.IO;
    using System.Net;
    static class Program {
        static void Main() {
            WebRequest request = WebRequest.Create("http://ja.doukaku.org/feeds/comments/");
            request.Timeout = 1000;
            request.Proxy = new WebProxy("http://proxy.example.net:8001/");
            request.Proxy.Credentials = new NetworkCredential("username", "password");
            using (StreamReader sr = new StreamReader(request.GetResponse().GetResponseStream())) {
                Console.WriteLine(sr.ReadToEnd());
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4900'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/4900
  :user_name: ihag
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/560/
  :language: 
  :time: 2007/12/20 11:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>う，ログインし忘れてた．</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8185'
  :parent_id: '113'
  :url: http://ja.doukaku.org/comment/8185
  :user_name: ihag
  :user_url: /web/20101117164910/http://ja.doukaku.org/user/560/
  :language: C
  :time: 2008/12/15 13:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>libfetchがあれば動きます．</p>\n\r\n\t"
  :code: |
    #include &lt;sys/param.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;fetch.h&gt;
    #include &lt;unistd.h&gt;

    #define handle_error_fetch(str) do { \
        fprintf(stderr, "%s: %s\n", str, fetchLastErrString); \
        exit(EXIT_FAILURE); \
    } while(0)

    int
    main(int argc, char **argv)
    {
        const char *URL = "http://ja.doukaku.org/feeds/comments";
        const char * const PROXY_DEFAULT = "http://localhost:8080";
        FILE *fd;
        size_t len_r, len_w;
        u_char buf[8192], *buf_p;

        fetchTimeout = 1;   /* in seconds */
        setenv("HTTP_PROXY", PROXY_DEFAULT, 0);


        if ((fd = fetchGetURL(URL, NULL)) == NULL)
            handle_error_fetch("fetchGetURL");

        while (!feof(fd)) {
            len_r = fread(buf, 1, sizeof(buf), fd);
            for (buf_p = buf; (buf_p - buf) &lt; len_r; buf_p += len_w)
                len_w = fwrite(buf_p, 1, len_r - (buf_p - buf), stdout);
        }
        fclose(fd);

        exit(EXIT_SUCCESS);
    }
  :tags: []
  :references:
    :url: 
    :title: 
