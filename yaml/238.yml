---
:id: '238'
:title: ナイツ関数（ボケの方）
:comments:
- :id: '8549'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8549
  :user_name: syat
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/766/
  :language: Other
  :time: 2009/02/25 07:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  入力した文章のところどころを言い間違えて出力する関数を実装してください。\r<br>（ナベアツ算を見てて思いつきました）\r<br><br>入出力の方法は標準入出力や引数・戻り値など、扱いやすい方法でかまいません。\r<br><br>文字単位でランダムに間違えても面白くないので、単語のリストから似た単語の候補を探すようにしてください。英単語でもＯＫです。単語のリストは参考ページからダウンロードしたものを加工して利用すると良いと思います。（４０００個あります）\r<br><br>結果がつまらなくても構いませんが、面白いボケをうむ工夫があると良いです。\r<br>※人が考えたボケは求めてませんよ！\r<br><br>入力の例として「どう書く？org」の前文をお借りしました。ご自分でヤホーで調べたりして手ごろな文章を見つけて下しあ。\r<br>"
  :code: |
    ＜入力例＞
    ドウカク org ヘ ヨウコソ
    コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ
     プログラマ ノ タメノ コロシアム デス
    トウコウ ヲ タメシテ ミタイ カタ ハ テスト
    トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス

    ＜出力例＞
    ドウモク org ヘ ヨウコソ
    コノ ザレゴト ハ ダサレタ オダイ ヲ イワハダ トシシタ キソイアウ
     プログラマ ノ タチノミ コロシアム デス
    トウコウ ヲ ハナシテ ミチノリ カタ ハ プリント
    トリアエズ ナガメテ ミツリン カタ ハ ゲンゴ ノ キンラン ガ オススメ デス
  :tags: []
  :references:
    :url: /web/20090619074204/http://www.ais.riec.tohoku.ac.jp/lab/wordlist/index-j.html
    :title: 日本語単語リスト
- :id: '8567'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8567
  :user_name: sumim
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/02/28 09:56 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n<p>単語のリストから文字数が似ていて最初と最後の文字が一致するものをピックアップし、該当がないときは元の単語を、複数ある時はランダムにチョイスして出力しています。</p>\n\n\t"
  :code: |
    | in wordList file |
    in := 'ドウカク org ヘ ヨウコソ
    コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ
    プログラマ ノ タメノ コロシアム デス
    トウコウ ヲ タメシテ ミタイ カタ ハ テスト
    トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス'.

    wordList := OrderedCollection new.
    #('25_10' '40_25' '55_40' '70_55') do: [:range |
        file := FileStream fileNamed: 'fam', range, '.txt'.
        file converter: (TextConverter newForEncoding: 'sjis').
        file wantsLineEndConversion: true.
        [file atEnd] whileFalse: [wordList addAll: (file nextLine subStrings: String tab)].
        file close].

    World findATranscript: nil.

    in linesDo: [:line |
        Transcript cr.
        (line subStrings: ' ')
            do: [:each |
                | foundWords |
                foundWords := wordList select: [:word |
                    (word size - each size) abs &lt;= 1 and: [
                        word first = each first and: [word last = each last]]].
                foundWords ifEmpty: [foundWords := foundWords copyWith: each].
                Transcript show: foundWords atRandom]
            separatedBy: [Transcript space]]

    "=&gt;
    ドクヤク org ヘ ヨワミソ
    コノ サトビト ハ ダサレタ オトガイ ヲ イトコニ トシワカ キュウロウ
    プラズマ ノ タカドノ コロシアム デス
    トクユウ ヲ タメシテ ミタイ カタ ハ テナント
    トキワズ ナツバテ ミタイ カタ ハ ゲンゴ ノ イチミン ガ オツトメ デス "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '8573'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8573
  :user_name: 匿名
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2009/03/03 07:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ボケるのに「レーベンシュタイン距離( <a class=\"reference\" href=\"/web/20090619074204/http://ja.wikipedia.org/wiki/%E3%83%AC%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%B3%E8%B7%9D%E9%9B%A2\">http://ja.wikipedia.org/wiki/%E3%83%AC%E3%83%BC%E3%83%99%E3%83%B3%E3%82%B7%E3%83%A5%E3%82%BF%E3%82%A4%E3%83%B3%E8%B7%9D%E9%9B%A2</a>
    )」を使ってみました。</p>\n<p>入力はテキストファイルからで。</p>\n\n\t"
  :code: "/*\n * NightsFormula.java\n *\n */\nimport java.io.*;\nimport java.util.*;\n\npublic
    class NightsFormula {\n    \n    private static final double _MINSimilarityRate
    = 0.51;\n    \n    public static void main(String[] args){\n        \n        String[]
    wordList = getWordList( new String[]{\"fam25_10.txt\",\"fam40_25.txt\",\"fam55_40.txt\",\"fam70_55.txt\"});\n
    \       \n        String[] srcList = getWordList(new String[]{\"inputSample.txt\"});\n
    \       \n        if(wordList == null || srcList == null){\n            System.out.println(\"word
    list or src list is NULL\");\n            return;\n        }\n        StringBuffer
    outb = new StringBuffer();\n        for(int i = 0; i &lt; srcList.length; i++){\n
    \           StringBuffer sb = new StringBuffer();\n            sb.append(srcList[i]).append(\"\\t\");\n
    \           for(int j = 0; j &lt; wordList.length; j++){\n                double
    sr = getSimilarityRate(srcList[i], wordList[j]);\n                if(sr &gt;=_MINSimilarityRate){\n
    \                   sb.append(wordList[j]).append(\"\\t\");\n                }\n
    \           }\n            String[] cand = split(sb);\n            String sc =
    cand[(int)(cand.length*Math.random())];\n            outb.append(sc).append(\"
    \");\n        }\n        System.out.println(outb.toString());\n    }\n    \n    private
    static double getSimilarityRate(String str1, String str2){\n        int ld = getLevenshteinDistance(str1,
    str2);\n        int len = (str1.length() &gt; str2.length() ? str1.length() :
    str2.length());\n        double result = ((double)(len - ld) / len);\n        return
    result;\n    }\n    \n    private static int getLevenshteinDistance(String str1,
    String str2){\n        \n    int[][] lArr = new int[str1.length()+1][str2.length()+1];\n
    \       \n    for(int i = 0; i &lt; lArr.length; i++) lArr[i][0] = i;\n    for(int
    i = 0; i &lt; lArr[0].length; i++) lArr[0][i] = i;\n    \n    for(int i = 0; i
    &lt; str1.length(); i++){\n            for(int j = 0; j &lt; str2.length(); j++){\n
    \               int cost = (str1.charAt(i) == str2.charAt(j)) ? 0 : 1;\n                lArr[i+1][j+1]
    = getMinimum( lArr[i][j+1] +1, lArr[i+1][j] +1, lArr[i][j] +cost );\n            }\n
    \   }\n    return lArr[str1.length()][str2.length()];\n    }\n    \n    private
    static int getMinimum(int a, int b, int c){\n        int m = a &lt; b ? a : b;\n
    \       return m &lt; c ? m : c;\n    }\n    \n    private static String[] getWordList(String[]
    filenames){\n        FileReader fr = null;\n        BufferedReader in = null;\n
    \       StringBuffer sb = new StringBuffer();\n        for(int i = 0; i &lt; filenames.length;
    i++){\n            try{\n                in = new BufferedReader(fr = new FileReader(filenames[i]));\n
    \               String line = null;\n                while((line=in.readLine())!=
    null){\n                    sb.append(line).append(\"\\t\");\n                }\n
    \           }catch(Throwable t){\n                t.printStackTrace();\n                return
    null;\n            }finally{\n                if(in != null){ try{ in.close();
    }catch(Throwable t){ ; }finally{ in = null;} }\n                if(fr != null){
    try{ fr.close(); }catch(Throwable t){ ; }finally{ fr = null;} }\n            }\n
    \       }\n        return split(sb);\n    }\n    \n    private static String[]
    split(StringBuffer sb){\n        StringTokenizer st = new StringTokenizer(sb.toString(),
    \" \\t\");\n        int len = st.countTokens();\n        String[] wlist = new
    String[len];\n        for(int i = 0; i &lt; len; i++){\n            wlist[i] =
    st.nextToken();\n        }\n        return wlist;\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8577'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8577
  :user_name: emasaka
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/852/
  :language: Perl
  :time: 2009/03/04 17:10 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">元ネタがわからないので、外してたらすみません。\r\n\r\nコード欄が1つなのでつなげていますが、mkdic.plとnaitsu.plの\r\n2つのプログラムからなります。\r\n\r\nmkdic.plは、事前にデータを作るプログラムです。\r\nmecabのipadicのソースに含まれるNoun.csvをカレントディレクトリ\r\nに置いて実行します。\r\nNoun.csvにある60,477語の総当たり（3,657,407,052通り）で、\r\n読みのLevenshtein距離が1になる組み合わせを求め、DB化します。\r\n\r\n#
    後から考えると、1操作で変換できる組み合わせだけを抜き出す\r\n# （1操作以上は計算しない）のが効率的でしたが、それに気が\r\n# ついたのは1日経過後ぐらい。\r\n\r\nnaitsu.plは、引数のファイルまたは標準入力から読み込んだ\r\nテキストをText::MeCabで分解して、単語がmkdic.plで作った\r\nDBにあればランダムに置きかえます。\r\n\r\n\r\n$
    perl mkdic.pl\r\n（この間3〜4日ぐらい）\r\n$ cat sample.txt\r\nこのサイトは出されたお題をいかに解くか競い合う、プログラマのためのコロシアムです。\r\n$
    perl naitsu.pl sample.txt\r\nこの細部は出されたお蛇尾をいかに解くか競い合う、プログラムのまめのコロシアムです。\r\n$ perl
    naitsu.pl sample.txt\r\nこの最多は出されたおだてをいかに解くか競い合う、プログラマーのタネのコロシアムです。\r\n</pre>\n\t"
  :code: |
    #!/usr/bin/perl
    # mkdic.pl
    use strict;
    use warnings;
    use Encode;
    use Text::Levenshtein qw(fastdistance);
    use DBI;

    my $source = './Noun.csv';
    my $source_enc = 'euc-jp';

    my $dbfile = './ls1.sqlite';
    my $db_enc = 'utf-8';

    sub readin {
        my @list;
        open my $fh, '&lt;', $source or die;
        while (&lt;$fh&gt;) {
            my ($word, $yomi) = (split(/,/, decode($source_enc, $_)))[0, 11];
            push @list, { word =&gt; $word, yomi =&gt; $yomi };
        }
        close $fh;
        \@list;
    }

    sub make_db {
        my $dbh = shift;
        $dbh-&gt;do('CREATE TABLE ls1 (key string, val string)');
    }

    sub make_ls1 {
        my $dbh = shift;
        my $list_ref = shift;

        my @list = @{$list_ref};
        my $sth = $dbh-&gt;prepare('INSERT INTO ls1 VALUES (?,?)');
        while (@list) {
            my $word1 = shift @list;
            for my $word2 (@list) {
                if (fastdistance($word1-&gt;{yomi}, $word2-&gt;{yomi}) == 1) {
                    my $word1_enc = encode($db_enc, $word1-&gt;{word});
                    my $word2_enc = encode($db_enc, $word2-&gt;{word});
                    $sth-&gt;execute($word1_enc, $word2_enc);
                    $sth-&gt;execute($word2_enc, $word1_enc);
                    print ("$word1_enc:$word2_enc\n");
                }
            }
        }
    }

    my $list_ref = readin();
    unlink $dbfile if (-f $dbfile);
    my $dbh = DBI-&gt;connect("dbi:SQLite:dbname=$dbfile", '', '',
                           { RaiseError =&gt; 1, AutoCommit =&gt; 0 });
    make_db($dbh);
    make_ls1($dbh, $list_ref);
    $dbh-&gt;commit;
    $dbh-&gt;disconnect();



    #!/usr/bin/perl
    # naitsu.pl
    use strict;
    use warnings;
    use DBI;
    use Text::MeCab;

    my $dbfile = './ls1.sqlite';

    sub get_ls1s {
        my ($sth, $word) = @_;
        $sth-&gt;execute($word);
        my ($word2) = $sth-&gt;fetchrow_array or return;
        return $word2;
    }

    my $text = do { local $/; &lt;ARGV&gt;; };

    my $dbh = DBI-&gt;connect("dbi:SQLite:dbname=$dbfile", '', '',);
    my $sth = $dbh-&gt;prepare(
        "SELECT val FROM ls1 WHERE key=? ORDER BY random() LIMIT 1" );

    my $mecab = Text::MeCab-&gt;new();
    my $node = $mecab-&gt;parse($text);

    for (; $node; $node = $node-&gt;next) {
        my $word = $node-&gt;surface;
        if (my $naitsu = get_ls1s($sth, $word)) {
            print $naitsu;
        } else {
            print $word;
        }
    }
    print "\n";

    $sth-&gt;finish;
    undef $sth;
    $dbh-&gt;disconnect;
  :tags:
  - DBI
  - Text::Leveshtein
  - Text::MeCab
  - mecab
  :references:
    :url: 
    :title: 
- :id: '8782'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8782
  :user_name: lunlumo
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/813/
  :language: Ruby
  :time: 2009/04/05 08:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　JavaとSmalltalkの投稿を参考に書いてみました。</p>\n\n\t"
  :code: |
    #! /usr/bin/ruby -Ks

    class LevenshteinDistance
        def self.distance(a, b)
            table = Array.new(a.split('').size + 1) do |i|
                i == 0 ? (0..b.split('').size).to_a : Array.new(b.split('').size).unshift(i)
            end
            (1..table.size - 1).each do |i|
                (1..table[i].size - 1).each do |j|
                    table[i][j] = [
                            table[i - 1][j] + 1,
                            table[i][j - 1],
                            table[i - 1][j - 1] + (a.split('')[i - 1] == b.split('')[j - 1] ? 0 : 1)
                        ].min
                end
            end
            table.last.last
        end
    end

    class Knights
        attr_accessor :dictionary
        def initialize(dict_file)
            self.dictionary = []
            File.open(dict_file) { |f| f.each { |line| self.dictionary.concat(line.split(/\s+/)) } }
            self
        end
        def translate(source)
            source.split(/\s+/).map do |w|
                list = self.dictionary.select { |d| yield(w, d) }.unshift(w)
                list[rand(list.size)]
            end
        end
    end

    source = &lt;&lt;EOS
    ドウカク org ヘ ヨウコソ
    コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ
    プログラマ ノ タメノ コロシアム デス
    トウコウ ヲ タメシテ ミタイ カタ ハ テスト
    トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス
    EOS
    knights = Knights.new("./path/to/word_list.txt")
    puts "入力:\n#{source}"
    puts "出力:"
    source.each_line do |line|
        puts(
            knights.translate(line) do |w, d|
                LevenshteinDistance.distance(w, d).to_f / [w.split('').size, d.split('').size].sort.first &lt; 0.4
            end.join(" ")
        )
    end
    puts "出力:"
    source.each_line do |line|
        puts(
            knights.translate(line) do |w, d|
                (w.split('').size - d.split('').size).abs &lt;= 1 &amp;&amp; w.split('').first == d.split('').first &amp;&amp; w.split('').last == d.split('').last
            end.join(" ")
        )
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8792'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8792
  :user_name: lunlumo
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/813/
  :language: Ruby
  :time: 2009/04/06 10:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　レーベンシュタイン距離の計算処理に間違いがあったので修正したものを。</p>\n\n\t"
  :code: |
    #! /usr/bin/ruby -Ks

    class LevenshteinDistance
        def self.distance(a, b)
            table = Array.new(a.split('').size + 1) do |i|
                i == 0 ? (0..b.split('').size).to_a : Array.new(b.split('').size).unshift(i)
            end
            (1..table.size - 1).each do |i|
                (1..table[i].size - 1).each do |j|
                    table[i][j] = [
                            table[i - 1][j] + 1,
                            table[i][j - 1] + 1,
                            table[i - 1][j - 1] + (a.split('')[i - 1] == b.split('')[j - 1] ? 0 : 1)
                        ].min
                end
            end
            table.last.last
        end
    end

    class Knights
        attr_accessor :dictionary
        def initialize(dict_file)
            self.dictionary = []
            File.open(dict_file) { |f| f.each { |line| self.dictionary.concat(line.split(/\s+/)) } }
            self
        end
        def translate(source)
            source.split(/\s+/).map do |w|
                (list = self.dictionary.select { |d| yield(w, d) }).empty? ? w : list[rand(list.size)]
            end
        end
    end

    source = &lt;&lt;EOS
    ドウカク org ヘ ヨウコソ
    コノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ
    プログラマ ノ タメノ コロシアム デス
    トウコウ ヲ タメシテ ミタイ カタ ハ テスト
    トリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス
    EOS
    puts "入力:\n#{source}"
    puts "出力:"
    knights = Knights.new("/path/to/wordlist.txt")
    source.each_line do |line|
        puts(
            knights.translate(line) do |w, d|
                LevenshteinDistance.distance(w, d).to_f / [w.split('').size, d.split('').size].max &lt; 0.5
            end.join(" ")
        )
    end
    puts "出力:"
    source.each_line do |line|
        puts(
            knights.translate(line) do |w, d|
                (w.split('').size - d.split('').size).abs &lt;= 1 &amp;&amp; w.split('').first == d.split('').first &amp;&amp; w.split('').last == d.split('').last
            end.join(" ")
        )
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8810'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/8810
  :user_name: lunlumo
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/04/14 15:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　Scalaで。</p>\n\n\t"
  :code: |
    import    java.io.{File,FileInputStream,InputStreamReader,BufferedReader}
    import    scala.util.Random

    object LevenshteinDistance {
        def distance(a:String, b:String) = {
            var    t:List[List[Int]] = List.range(a.size, -1, -1).foldLeft(List[List[Int]]())(
                (r,i) =&gt; i match {
                    case 0 =&gt; List.range(0, b.size + 1)::r
                    case _ =&gt; (i::List.make(b.size, 0))::r
                }
            )
            1.to(t.size - 1).foreach(i =&gt;
                1.to(t(i).size - 1).foreach(j =&gt;
                    t = t.take(i) ++
                        List(
                            t(i).take(j) ++
                            List(
                                (t(i - 1)(j) + 1)
                                .min(t(i)(j - 1) + 1)
                                .min(
                                    t(i - 1)(j - 1) +
                                    ((a(i - 1) == b(j - 1)) match { case true =&gt; 0; case _ =&gt; 1 })
                                )
                            ) ++
                            t(i).takeRight(t(i).size - j - 1)
                        ) ++
                        t.takeRight(t.size - i - 1)
                )
            )
            t.last.last
        }
    }

    class CKnights(f:String, e:String) {
        var    d:List[String] = List()
        val    i:BufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(f), e))
        val    r:Random = new Random
        while(i.ready) {
            val    l:String = i.readLine
            if (l != "") d = d:::l.split("\\s+").toList
        }
        i.close
        def translate(s:String)(j:(String,String)=&gt;Boolean):List[String] =
            s.split("\\s+").foldRight(List[String]())((w,k) =&gt;
                (d.filter(e =&gt; j(w, e)) match {
                    case t if t.isEmpty =&gt; w
                    case t =&gt; t(r.nextInt(t.size))
                })::k
            )
    }

    object Knights {
        def source:List[String] = readLine match {
                case null =&gt; List()
                case l =&gt; l::source
            }
        def main(args:Array[String]):Unit = args.size match {
                case a if a != 1 =&gt; println("usage: Knights DICTFILE")
                case _ =&gt; {
                    var    s:List[String] = source
                    var    k:CKnights = new CKnights(args.first, "Shift_JIS")
                    println("入力:")
                    s.foreach(l =&gt; println(l))
                    println("出力:")
                    s.foreach(l =&gt; println(
                            k.translate(l)((w, e) =&gt;
                                LevenshteinDistance.distance(w, e).toFloat / w.size.max(e.size) &lt; 0.5
                            ).mkString(" ")
                        )
                    )
                    println("出力:")
                    s.foreach(l =&gt; println(
                            k.translate(l)((w, e) =&gt;
                                Math.abs(w.size - e.size) &lt;= 1 &amp;&amp; w.first == e.first &amp;&amp; w.last == e.last
                            ).mkString(" ")
                        )
                    )
                }
            }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9134'
  :parent_id: '238'
  :url: http://ja.doukaku.org/comment/9134
  :user_name: tanakahisateru
  :user_url: /web/20090619074204/http://ja.doukaku.org/user/1025/
  :language: Python
  :time: 2009/06/12 15:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Java版でレーベンシュタイン距離を使っていたのに触発されたRuby版に触発されて、同じようなものを書いてみました。if-else式のために、Python2.5以上です。</p>\n<p>Java版そのままだと、総あたり検索していて遅かったので、先頭文字が一致する単語のみに絞ることにしました。あと、候補が複数ある場合はランダムに選択するようにしています。</p>\n<p>ちなみに単語辞書は毎回元サイトから拾っているので、オフラインでは動きません。</p>\n\n\t"
  :code: "#!coding: utf-8\nimport urllib, random\n\ndef download_words():\n    prefix
    = \"http://www.ais.riec.tohoku.ac.jp/lab/wordlist/\"\n    files = [\"fam70_55.txt\",
    \"fam55_40.txt\", \n             \"fam40_25.txt\", \"fam25_10.txt\"]\n    words
    = []\n    for f in files:\n        fd = urllib.urlopen(prefix + f)\n        for
    line in fd:\n            if line.strip() != \"\":\n                words.extend(line.strip().decode(\"sjis\").split(\"\\t\"))\n
    \       fd.close()\n    return words\n\nallwords = download_words()\n\ndef Levenshtein_distance(word0,
    word1):\n    d = dict()\n    for i in range(len(word0) + 1): d[(i,0)] = i\n    for
    j in range(len(word1) + 1): d[(0,j)] = j\n    for i in range(1, len(word0) + 1):\n
    \       for j in range(1, len(word1) + 1):\n            cost = 0 if word0[i-1]
    == word1[j-1] else 1\n            d[(i,j)] = min(d[(i-1,j)]+1, d[(i,j-1)]+1, d[(i-1,j-1)]+cost)\n
    \   return d[(len(word0), len(word1))]\n\ndef similarity(word0, word1):\n    l
    = max(len(word0), len(word1))\n    return float(l - Levenshtein_distance(word0,
    word1)) / l\n\ndef find_alt_word(word):\n    alt_words = filter(\n        lambda
    alt: alt[0] == word[0] and similarity(word, alt) &gt; 0.5,\n        allwords)\n
    \   )\n    return random.choice(alt_words) if alt_words else word\n\ndef knights(text):\n
    \   return  u\" \".join([find_alt_word(w) for w in text.split(u\" \")])\n\nprint
    knights(u'''ドウカク org ヘ ヨウコソ\nコノ サイト ハ ダサレタ オダイ ヲ イカニ トクカ キソイアウ\nプログラマ ノ タメノ コロシアム
    デス\nトウコウ ヲ タメシテ ミタイ カタ ハ テスト\nトリアエズ ナガメテ ミタイ カタ ハ ゲンゴ ノ イチラン ガ オススメ デス'''\n).encode(\"sjis\")\n"
  :tags: []
  :references:
    :url: 
    :title: 
