---
:id: '42'
:title: 複数行のコメントアウト
:comments:
- :id: '3398'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/3398
  :user_name: にしお
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/08 08:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  言語の機能系の問題です。\r\n<p>\r\nソースコードの複数行にまたがる範囲を、範囲の前後に何かを書き足すだけで実行しないようにしてください。\r\n「その範囲を削除する」などはダメです。\r\n何重まで入れ子にできるか、どのような制限があるかを明記してください。\r\n例えばJavaであれば/*～*/で複数行のコメントアウトができますが、入れ子/*
    /* */ */にできません。\r\nPythonであれば\"\"\"～\"\"\"で文字列化することでコメントアウトでき、'''～'''も使えるので2重まで入れ子にできます。\r\n</p>\n<p>\r\nこのお題は、無制限に入れ子にできるCommon
    Lispからの挑戦状です。\r\nプログラミングシンポジウムで前田敦司先生の発表を聞いて思いつきました。\r\n\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2022'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2022
  :user_name: rucker
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/130/
  :language: 
  :time: 2007/08/08 14:11 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">#if～はプリプロセッサディレクティブ、ですね。\r\n「マクロ」は#defineで定義されたものの事を指すのではないかな。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2028'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2028
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/08/08 16:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  elispは #| ～ |# をサポートしていないため、言語仕様上複数行コメントはできない。\r\nしかし、式をquoteすることでお手軽コメントアウトもどきはできる。\r\n言うまでもないが、評価結果はlistである。どうせGCされる運命なんだけどね。\r\n\r\n某所で見かけて以来、自分も使うようになった。\r\n\t"
  :code: |
    '(progn
       ;; 式をquoteすることで事実上コメントアウトになる
       (switch-to-buffer "*scratch*")
       (goto-char (point-max)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2005'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2005
  :user_name: nobsun
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/08 08:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n{-\r\nHaskellではブロックコメントは無限にネストさせらる\r\n-}\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2023'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2023
  :user_name: yuin
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/08/08 15:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    // 文字列として変数に割り当てる
    val a = """
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    """

    //いくらでも入れ子にできる
    /*
    aaaa /* bbbb /* cccc */ */ /* */
    */
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2031'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2031
  :user_name: smeghead
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/31/
  :language: 
  :time: 2007/08/08 17:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  最初、正にこれを探してました ^^；\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2004'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2004
  :user_name: tetsuro6502
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/213/
  :language: JavaScript
  :time: 2007/08/08 08:37 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\r\n\t  \r\n\t"
  :code: |
    実行させたくない箇所を
        function () {
    と
        }
    で括る。
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2156'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2156
  :user_name: katsu
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/08/14 12:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">SWI-prologには\r\n入れ子にできる、C風範囲コメントがあります。</pre>\r\n\t"
  :code: |
    crossp([],[]).
    crossp([X|Xs],[I|Is]):-member(I,X),crossp(Xs,Is).
    /*
            /*
             * comment
             */
     */
    :-findall(X,crossp([[1,2,3],[uno,due,tre],[un,doux,trois]],X),Xs),writeln(Xs).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2291'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2291
  :user_name: kkobayashi
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/17 16:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">そのようです。\r\nただ、\"。+ 改行\" の場合など（文字コードの関係かと思ったのですがよく分かりません・・・）\r\nおかしな挙動をすることがあるので、オフィシャルにサポートするものではなさそうです。\r\n</pre>\r\n\t"
  :code: |
    &gt; 文法的に問題なければ日本語も書けます &lt;- "これはオブジェクトです"
    &gt; 文法的に問題なければ日本語も書けます
    [1] "これはオブジェクトです"

    &gt; if(0){
    + あ。
     エラー： syntax error, unexpected $undefined, expecting '\n' or ';' or '}' ( "if(0){" の)
    &gt; }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2155'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2155
  :user_name: にしお
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/14 12:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  日本語が文法的に問題ないというのが逆にびっくりですが、長い名前の変数が1つ書いてあると見なされているわけでしょうか？\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5835'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/5835
  :user_name: Nemo
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/02/23 08:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">% PostScript の場合通常のコメントは % 以降の1行コメントのみ.\r\n\r\n{
    複数行のときは\r\nとりあえずスタックに\r\n積んで捨てるかなぁ...\r\n% ネストも\r\n  {\r\n     問題ない筈\r\n  } pop
    \r\n} pop</pre>\r\n\t"
  :code: "%!PS\n\n% 1 line comment\n\n{\n  hogehoge\n  fugafuga \n  {\n     foo\n
    \ } pop\n} pop\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2014'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2014
  :user_name: smeghead
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/08/08 11:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">何もしないマクロで囲む。入れ子も可能です。</pre>\r\n\t"
  :code: |
    (defmacro comment-out (&amp;body body))

    (print "hello.")
    (comment-out
    (print "how r u?")
    )
    (print "good bye.")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2084'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2084
  :user_name: omoikani
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/08/12 21:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  無制限に。\r\n\t"
  :code: |
    (* comment1
    (* comment 2 (* comment3 *) *)
    *)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2069'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2069
  :user_name: omoikani
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/374/
  :language: Other
  :time: 2007/08/11 05:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">StandardMLは何重でも可。</pre>\r\n\t"
  :code: |
    (* comment1
    (* comment2 (* comment3 *) *)
    *)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2026'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2026
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: Scheme
  :time: 2007/08/08 16:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  SRFI-30。Gaucheならデフォルトでサポート。\r\n\r\n\t"
  :code: |
    ;; (use srfi-30)
    (print 1) #| comment
    #| nested comment |#
    comment |#
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2439'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2439
  :user_name: omoikani
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/374/
  :language: 
  :time: 2007/08/23 00:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">StandardMLのコメントはネスト可能だが、コメントの開始記号と終端記号は必ず対になっていなければならないらしい。無制限じゃないです。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3501'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/3501
  :user_name: nobsun
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/10/23 03:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">#3500 をOtherで投稿しちゃった。\r\nHaskellで再投稿。</pre>\r\n\t"
  :code: "{- \nコードがないとカバレッジにカウントされない\nようなので、あらためて,投稿します。\n-}\n\nmain :: IO ()\nmain
    = putStrLn {- \"Hello, world!\"\n\n{- Haskellではコメントは何段でもネストできます．\n\n{-\nmain ::
    IO ()\nmain = putStrLn -} -} -} \"Bonjour, trisstesse\"\n\n{- {-\n*Main&gt; :main\nBonjour,
    trisstesse\n-}\n-}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8645'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/8645
  :user_name: egtra
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/03/11 21:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Cのコードで#if 0が使われていないので、C++で投稿します。Cでも使えるので心苦しい感じもします（言語指定をC/C++プリプロセッサにしたほうがよかったかもしれません）。ともあれ、#if
    0から#endifで囲った範囲はコンパイル対象から外れ、何重にも重ねられます。通常の複数行コメント/* */は二重以上にできません。\r\n\t"
  :code: |
    #include &lt;iostream&gt;

    int main()
    {
    #if 0
        std::cout &lt;&lt; "表示されませんよ" &lt;&lt; std::endl;
    #if 0
        std::cout &lt;&lt; "中に誰もいませんよ" &lt;&lt; std::endl;
    #endif
    #endif
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2030'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2030
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: D
  :time: 2007/08/08 16:56 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  Dだとプリプロセッサに相当する部分は言語仕様に含まれている！コンパイル時に判断。\r\n\t"
  :code: |
    module doukaku;
    private import std.stdio;

    void main() {
        static if (0) {
            these_lines();
            are_not();
            executed();
            static if (0) {
                nesting();
                is_allowed();
            }
        }
        /* C-style
           comment
           is also allowed. */
        writefln("ok");
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2350'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2350
  :user_name: kozima
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/164/
  :language: Emacs
  :time: 2007/08/21 01:21 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">ソースコード中で使われることは意図してなさそうですが\r\n#@n で n 文字読み飛ばすことができます。</pre>\r\n\t"
  :code: |
    #@18
    this is a comment
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2029'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2029
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: 
  :time: 2007/08/08 16:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  緊急回避ならば(when nil～)や(unless t～)なんてのもアリ？？\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2032'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2032
  :user_name: rucker
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/08/08 17:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">PHPの複数行のコメントはC同様/* */で入れ子に出来ませんが、\r\nヒアドキュメント構文(\"&lt;&lt;&lt;\")で使われないリテラルにしてしまえば\r\n入れ子もなんとか可能です。\r\nただし、ヒアドキュメント内の変数は展開されるため\r\n内容によってはエラーとなります。</pre>\r\n\t"
  :code: "&lt;?php\n/*\n\t普通のコメント\n */\n\n$a=array(0);\n\n&lt;&lt;&lt; ENDOFEND\n\n&lt;&lt;&lt;
    END\n\tリテラル化で疑似コメント\nEND;\n\n\t$a[0] の '0' や ']' が抜けると構文エラー\n\t$a[0] 自体が定義されていないと警告表示\n\nENDOFEND;\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4140'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/4140
  :user_name: greentea
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/573/
  :language: Python
  :time: 2007/11/17 04:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  いろいろためしてたら、こんなのできました。\r\n頭がこんがらがるので、なんでこうなるとか、'''も使うとどうなるとかは考えたくないです。\r\n\r\n書き方及び制限事項\r\n・トップレベルのコメントは(\"\"\"
    〜 \"\"\")で囲む\r\n・それ以降のコメントは(\"\"\",(\"\"\", 〜 \"\"\"),\"\"\")で囲む\r\n・ただし、トップレベルのコメント開始位置は正しいインデント位置から始めないといけない\r\n\t"
  :code: "print \"not a comment?\"\n\n(\"\"\"\n\nprint comment 1?\n\n  (\"\"\",(\"\"\",\n
    \      print comment 2?\n\n   (\"\"\",(\"\"\",\n     print comment 3?\n             (\"\"\",(\"\"\",\n
    \   print comm(ry \n   \"\"\"),\"\"\")\n  print comment 3!\n \"\"\"),\"\"\")\n\n
    \   print comment 2!\n          \"\"\"),\"\"\")\n    print comment 1!\n\n\"\"\")\n\nprint
    \"not a comment!\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2063'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2063
  :user_name: にしお
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/08/10 22:06 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">Pythonの場合、\"\"\"～\"\"\"か'''～'''で囲うことで\r\n複数行文字列にするのがおそらく唯一の方法です。\r\n</pre>\r\n\t"
  :code: |
    '''
    if x:
        """
        a = b
        """
        b = c
    '''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5850'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/5850
  :user_name: takuya_1st
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/725/
  :language: PHP
  :time: 2008/02/26 11:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>PHPは&lt;?php ...?&gt;の内側しか実行されないので、余計な出力を捨てると可能。JSPでも同等の事が可能。</p>\n\r\n\t"
  :code: |
    &lt;?php
    $a = range(1,100);
    #コメントアウト
    ob_start();?&gt;
    array_keys($a);
    &lt;?php ob_end_clean();
        array_shift($a);
    ob_start();?&gt;
    array_pop($a);
    &lt;?php ob_end_clean();
    array_flip($a);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2057'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2057
  :user_name: shyouhei
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/70/
  :language: Ruby
  :time: 2007/08/10 06:45 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\r\n\t  %文字列がネストできるって知ってた?\r\n\t"
  :code: |
    if false then %{
       if false then %{
          nested comment
       }; end
    }; end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2009'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2009
  :user_name: tsekine
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/124/
  :language: Bash
  :time: 2007/08/08 10:12 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  コメントアウトしたい文字列をヒアドキュメント扱いします。\r\n\r\n文字列 'EOF' の部分は任意の文字列なので、これが重複しない限りネストできます。\r\n\t"
  :code: |
    cat &lt;&lt; 'EOF' &gt; /dev/null
      foo
      # bar
      baz
      cat &lt;&lt; 'ABC' &gt; /dev/null
        what's the next of baz?
      ABC
    EOF
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2012'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2012
  :user_name: 匿名
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/08/08 11:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    # ループで
    {last;
        {last;
            print "NEST OK\n";
        }
    }

    # ヒアドキュメントで
    &lt;&lt;A;
    &lt;&lt;B;
        print "NEST OK\n"
    B
    A
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2027'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2027
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/08/08 16:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ↑は1行で書いてしまったが、もちろん複数行可能です。\r\n\t"
  :code: |
    1 #| comment
    #| nested comment
    |# comment |#          ;; =&gt; 1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3500'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/3500
  :user_name: nobsun
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/98/
  :language: Other
  :time: 2007/10/23 03:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: "{- \nコードがないとカバレッジにカウントされない\nようなので、あらためて,投稿します。\n-}\n\nmain :: IO ()\nmain
    = putStrLn {- \"Hello, world!\"\n\n{- Haskellではコメントは何段でもネストできます．\n\n{-\nmain ::
    IO ()\nmain = putStrLn -} -} -} \"Bonjour, trisstesse\"\n\n{- {-\n*Main&gt; :main\nBonjour,
    trisstesse\n-}\n-}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5247'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/5247
  :user_name: carver
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/648/
  :language: Other
  :time: 2008/01/09 05:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  GASで複数行をコメントアウトするには、 /* ... */ かマクロを使います。/* ... */ は入れ子にできませんが、マクロは入れ子にできます。\r\n\t"
  :code: |
    /*
     * コメント
     */

    .if DEBUG1
    .if DEBUG1
        /* コード */
    .endif
    .endif
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2043'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2043
  :user_name: tomatsu
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/09 11:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">\r\n</pre>\r\n\t"
  :code: |
    /*
    Java風コメントアウト
    */

    `
    バッククォートで囲んだ部分は文字列リテラルになる
    `
    if (false){
      // コメントアウトではないけど if 文を使うことも
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5938'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/5938
  :user_name: howking
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/744/
  :language: Erlang
  :time: 2008/03/04 19:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Erlangにブロックコメントはありません。行頭に%をつけるのみです。\r<br>eppというプリプロセッサが使えますが、マクロの展開のみで複数行にわたってコメントアウトというような用途にはあまり使えません。。。\r<br><br>実行結果\r<br>%% デバック(debug)オプション付きでコンパイル\r<br>1&gt; c(comment, [{d, debug}]).\r<br>{ok,comment}\r<br>%% デバックメッセージが表示される\r<br>2&gt; comment:start().\r<br>start debug\r<br>DEBUG comment:13 debug\r<br>ok\r<br>%% デバック(debug)オプションなし\r<br>3&gt; c(comment).\r<br>{ok,comment}\r<br>4&gt; comment:start().\r<br>start\r<br>void\r<br>"
  :code: |
    -module(comment).
    -compile(export_all).

    -ifdef(debug).
    -define(DEBUG(X), io:format("DEBUG ~p:~p ~p~n",[?MODULE,?LINE,X])).
    -else.
    -define(DEBUG(X), void).
    -endif.

    -ifdef(debug).
    start()-&gt;
        % これはコメント。
        io:format("start debug~n"),
        ?DEBUG(debug).
    -else.
    start()-&gt;
        % こういう分け方は可能。
        io:format("start~n"),
        ?DEBUG(debug).
    -endif.

    % これは文法エラーではじかれる
    -ifdef(debug).
    hello
    -endif.

    % 入れ子も可能だけど、定義は先にしておかなければいけない。
    -ifdef(debug).
    -ifdef(trace).
    -define(TRACE(X), io:format("TRACE ~p:~p ~p~n",[?MODULE,?LINE,X])).
    -endif.
    -endif.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2006'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2006
  :user_name: nobsun
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/08 08:41 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  http://www.sampou.org/haskell/report-revised-j/lexemes.html#sect2.3\r\nに記述があります\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2015'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2015
  :user_name: jz5
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/08 11:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">#Ifディレクティブかなぁ。ネストもOK。\r\n制限は同一行にコード記述不可です。\r\n条件式が不成立なら中身は構文チェックされないんですね。試して初めて知りました。</pre>\r\n\t"
  :code: |
    #If False Then
        ほげほげ
    #End If
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2017'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2017
  :user_name: ether
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/96/
  :language: Lua
  :time: 2007/08/08 12:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Lua5.1 では -- が1行コメントで --[[ から --]] までがブロックコメントになります。この性質を利用すると --[[
    を　---[[ と書き換えるだけでコメントアウトを解除できて便利です。ブロックコメントをネストするには --[=[ ... --]=] のように任意の数の等号を挟みます。この例では
    B だけが表示されます（シンタクスハイライトは残念ながらブロックコメントに対応していないようですが…）。\r\n\t"
  :code: |
    --[[
      print("A")
    --]]

    ---[[
      print("B")
    --]]

    --[===[
    --[==[
    --[=[
    --[[
      print("C")
    --]]
    --]=]
    --]==]
    --]===]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2162'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2162
  :user_name: miyamuko
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/382/
  :language: 
  :time: 2007/08/14 12:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">ネストはできませんが /**/  形式によるコメントがかけます。\r\n\r\nあとは、他の言語と同じようにコメントアウトする箇所が構文的に問題ないのであれば
    if (false) {} や fun{}で囲むしかないと思います。\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2007'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2007
  :user_name: ココサブ
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/08/08 08:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">C言語です。\r\n複数行のコメントは二つに分けられる。\r\n\r\n一つ目は/*
    */。\r\nただし、これは入れ子にできない。\r\n\r\n二つ目はマクロ。\r\nこれは入れ子も可能。</pre>\r\n\t"
  :code: "#include &lt;stdio.h&gt;\n\nint main()\n{\n#ifndef DEBUG1\n    printf(\"one\\n\");\n#ifndef
    DEBUG2\n    printf(\"two\\n\");\n    /*\n    printf(\"three\\n\");\n    */\n#endif
    /* DEBUG2 */\n    printf(\"four\\n\");\n#endif /* DEBUG1 */\n\n    return 0;\n}\n\n\n/*\n$
    gcc test.c -DDEBUG1 -DDEBUG2\n$ ./a.out \n$ gcc test.c -DDEBUG1 \n$ ./a.out \n$
    gcc test.c -DDEBUG2\n$ ./a.out \none\nfour\n$ gcc test.c\n$ ./a.out \none\ntwo\nfour\n$
    \n*/\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2013'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2013
  :user_name: 匿名
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/08 11:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Javaの場合、範囲を\r\n    if (false) { \r\nと\r\n
    \   }\r\nで囲むことにより実行しない（コード生成もされない）部分を指定します。\r\nもちろん false 部分は\r\n    if (DEBUG)
    {\r\nとしておいて\r\n    static final boolean DEBUG = false;\r\nと定数宣言する事ができます。入れ子の制限はありません。</pre>\r\n\t"
  :code: |
    private static final boolean DEBUG = false;

    public void foo() `
        if (DEBUG) {
            System.err.println("enter foo");
         }
        // do anything
        if (DEBUG) {
            System.err.println("exit foo");
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2016'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2016
  :user_name: cats
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/08/08 12:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  C#では、入れ子不可のブロックコメントと、入れ子可のifディレクティブが使えます。\r\n\t"
  :code: |
    /*
    ...
    */
    #if true
    ...
    #endif
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2025'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2025
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/08/08 16:32 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  comment reader macro\r\n\t"
  :code: |
    1 #| comment #| nested comment |# comment |#    ;; =&gt; 1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2326'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2326
  :user_name: iwk
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/08/19 10:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">再投稿</pre>\r\n\t"
  :code: |
    (*
    c.f. Comments are delimited by (* and *) and """may be nested""".

    一応ネストできますが無制限かどうかは不明。
    *)
    // C/C++ styleでも可能。

    //条件コンパイル用ですがこういう形も
    (*IF-FSHARP  ...F#のコード... ENDIF-FSHARP*)
    or  (*F#  ...F#のコード...  F#*)

    (*IF-CAML*)  ...OCamlのコード...  (*ENDIF-CAML*)
    or (*IF-OCAML*)  ...OCamlのコード... (*ENDIF-OCAML*)
  :tags: []
  :references:
    :url: /web/20100814104826/http://research.microsoft.com/fsharp/manual/lexyacc.aspx#Comments
    :title: 'The F# Programming Language Informal Specification '
- :id: '3489'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/3489
  :user_name: sumim
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/10/21 06:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    "通常のコメント（入れ子にはしにくい）"

    [ #ブロック式を代用したコメントアウト ].

    [[[ #入れ子にもできる ]]].
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2008'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2008
  :user_name: sumim
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2007/08/08 09:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Smalltalk のコメントアウトは通常 \"〜\" のようにダブルクオートで括るのですが、これだとコメント文中の \" をエスケープする（二連にする）作業が必要になり、今回の目的には使えません。しかし、実行させたくない箇所の前後を
    [ と ]. で括って無名関数（ブロックと呼ぶ）化してしまうことで、入れ子状態になることを気にせず当該箇所のコードを実行させなくすることは可能です。ただしこの場合、括る内容はコンパイル可能なコードになっていなくてはいけない…という制約があります。あと、当然のことながらパーサーはコメントとして認識しないため、メソッドのコメントを抽出するようなリフレクション機能が使えなくなる…という欠点もあるので、安易には用いないほうがよいでしょう。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2318'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2318
  :user_name: iwk
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/49/
  :language: Other
  :time: 2007/08/18 15:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Ocamlにはあてはまらない要素が多いのでOthersでF#\r\n\r\n</pre>\r\n\t"
  :code: |
    (*
    c.f. Comments are delimited by (* and *) and """may be nested""".

    一応ネストできますが無制限かどうかは不明。
    *)
    // C/C++ styleでも可能。

    //条件コンパイル用ですがこういう形も
    (*IF-FSHARP  ...F#のコード... ENDIF-FSHARP*)
    or  (*F#  ...F#のコード...  F#*)

    (*IF-CAML*)  ...OCamlのコード...  (*ENDIF-CAML*)
    or (*IF-OCAML*)  ...OCamlのコード... (*ENDIF-OCAML*)
  :tags: []
  :references:
    :url: /web/20100814104826/http://research.microsoft.com/fsharp/manual/lexyacc.aspx#Comments
    :title: The F# Programming Language Informal Specification
- :id: '4542'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/4542
  :user_name: shimakuma
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/343/
  :language: 
  :time: 2007/12/01 11:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    // 行コメント

    『・文字列によるコメントアウト
    　　→ 自由に書けるが入れ子に出来ない』。
    　
    「「ブロックによるコメントアウト。
    　　構文エラーを許さないが、入れ子に出来る。」」。
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2048'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2048
  :user_name: kkobayashi
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/09 14:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    if(0){
        cat("言語の仕様として複数行をコメントアウトする機能はありません\n")
        文法的に問題なければ日本語も書けます
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2010'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2010
  :user_name: rubikitch
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/08/08 10:14 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    #!/usr/local/bin/ruby -Ke
    =begin
    コメント。
    ネスト不可。
    =end
    if false
      これは
      ネスト可
      if false
        でも文法違反したらダメ!
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2041'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/2041
  :user_name: ココサブ
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/24/
  :language: 
  :time: 2007/08/09 03:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">そうですね。\r\n適当な事書いてすいませんでした。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100814104826/http://okuyama.mt.tama.hosei.ac.jp/unix/C/slide78-1.html
    :title: 法大奥山研究室:C言語:15. プリプロセッサ (#directive) とマクロ
- :id: '9221'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/9221
  :user_name: egtra
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/759/
  :language: Other
  :time: 2009/06/22 08:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>まだ、XML系が1つも出ていないので、代表としてXHTMLを投稿します。ところで、現在どう書く？の言語の選択肢にXAMLとXSLTがあるんですけど、彼らもXMLレベルのコメントの構文は同じなんですよね。そんなことを気にしたら投稿できないですけど。</p>\n\r\n\t"
  :code: |
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
       "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"&gt;
      &lt;head&gt;
        &lt;title&gt;XHTML+XMLコメントの例&lt;/title&gt;
      &lt;/head&gt;
      &lt;body&gt;
        &lt;p&gt;本文。&lt;!--ここはコメント--&gt;&lt;/p&gt;
        &lt;!--
        &lt;p&gt;あーあー、見えない。&lt;/p&gt;
        --&gt;
      &lt;/body&gt;
    &lt;/html&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9580'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/9580
  :user_name: uehaj
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/09/19 12:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>間に何を書いてもいい、という意味でのコメントとしては3重ネストまでかな。</p>\n\r\n\t"
  :code: |
    /*
    '''
    """
    abc
    """
    '''
    */
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9285'
  :parent_id: '42'
  :url: http://ja.doukaku.org/comment/9285
  :user_name: bleis-tift
  :user_url: /web/20100814104826/http://ja.doukaku.org/user/732/
  :language: SQL
  :time: 2009/07/05 13:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>SQL Serverでは範囲コメントは/* ～ <a href=\"/web/20100814104826/http://ja.doukaku.org/42/flatten/#id1\"
    name=\"id2\"><span class=\"problematic\" id=\"id2\">*</span></a>/で、入れ子も可能です。</p>\n<div
    class=\"system-message\" id=\"id1\">\n<p class=\"system-message-title\">System
    Message: <a name=\"id1\">WARNING/2</a> (<tt class=\"docutils\">&lt;string&gt;</tt>,
    line 1); <em><a href=\"/web/20100814104826/http://ja.doukaku.org/42/flatten/#id2\">backlink</a></em></p>\nInline
    emphasis start-string without end-string.</div>\n\r\n\t"
  :code: |
    /* hoge /* piyo */ foo */
    SELECT * FROM SomeTable;
  :tags: []
  :references:
    :url: /web/20100814104826/http://msdn.microsoft.com/ja-jp/library/ms178623.aspx
    :title: /*...*/ (コメント) (Transact-SQL)
