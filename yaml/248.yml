---
:id: '248'
:title: 急勾配の判定
:comments:
- :id: '8891'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8891
  :user_name: nobsun
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2009/05/04 10:25 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <div class=\"section\">\n<p>有限の長さの数列で，各要素の値が，その要素の後ろにある残りの列に含まれるすべての要素の和よりも大きい列を「急勾配の列」ということにします（空列の和は0とします）．\r</p>\n<p>\r</p>\n<p>任意の長さ（ただし有限の長さの）数列を与えられたとき，それが「急勾配の列」であるかどうかを判定する述語関数を定義してください．\r</p>\n<p>\r</p>\n<p>必須ではありませんが，効率についてコメントがあれば面白いかもしれませんね．\r</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8893'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8893
  :user_name: kozima
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2009/05/06 18:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>数列の長さに対して線形時間です。</p>\n\n\t"
  :code: |
    (defun rapidly-decreasing-p (numbers)
      (loop for sum = (reduce #'+ (cdr numbers)) then (- sum x)
         for x in numbers
         always (&lt; sum x)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8894'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8894
  :user_name: '186'
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/352/
  :language: Scheme
  :time: 2009/05/07 00:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>超増加列の反転かどうかを判定すればいいので、線形時間で出来ました。</p>\n\n\t"
  :code: |
    (define (super-decreasing? lis)
      (let1 l (reverse lis)
            (let loop ((l l) (s 0))
              (cond ((null? l) #t)
                    ((&gt; (car l) s)
                     (loop (cdr l) (+ s (car l))))
                    (else #f)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8895'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8895
  :user_name: sawat
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/322/
  :language: OCaml
  :time: 2009/05/07 02:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>OCaml学習中。</p>\n\n\t"
  :code: |
    let rec super_inc n lst = match lst with
        []     -&gt; true
      | a::rst -&gt; if n &lt; a then (super_inc (n+a) rst) else false

    let super_dec lst = f 0 (List.rev lst)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8896'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8896
  :user_name: takatoh
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/189/
  :language: Haskell
  :time: 2009/05/07 04:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>$ が多くてうっとうしいけど。</p>\n\n\t"
  :code: |
    import List

    steep xs = and $ zipWith (&gt;) xs $ map sum $ tail $ tails xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8897'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8897
  :user_name: sawat
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/322/
  :language: OCaml
  :time: 2009/05/07 05:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>訂正。super_dec関数内で呼び出す関数名が間違ってました。\nあと、計算量は O(n)です。</p>\n\n\t"
  :code: |
    let rec super_inc n lst = match lst with
        []     -&gt; true
      | a::rst -&gt; if n &lt; a then (super_inc (n+a) rst) else false;;

    let super_dec lst = super_inc 0 (List.rev lst);;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8898'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8898
  :user_name: tsuwabuki
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/479/
  :language: Haskell
  :time: 2009/05/07 10:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    isSteelyList xs = and $ zipWith (&gt;) xs $ tail $ scanl (-) (sum xs) xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8899'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8899
  :user_name: sumim
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/05/07 05:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    "ナイーブに"
    | 急勾配か？ |

    急勾配か？ := [:配列 |
        (1 to: 配列 size - 1) allSatisfy: [:順 | (配列 at: 順) &gt; (配列 allButFirst: 順) sum]].

    急勾配か？ value: #().    "=&gt; true "
    急勾配か？ value: #(1).   "=&gt; true "
    急勾配か？ value: #(0).   "=&gt; true "
    急勾配か？ value: #(32 16 8 4 2 1).   "=&gt; true "
    急勾配か？ value: #(32 15 8 4 2 1).   "=&gt; false "


    "効率に配慮して"
    | 急勾配か？ |

    急勾配か？ := [:配列 |
        [:exit |
            (配列 size to: 1 by: -1) inject: 0 into: [:和 :順 |
                | 要素 |
                要素 := 配列 at: 順.
                要素 &gt; 和 ifFalse: [exit value]. 和 + 要素]
        ] valueWithExit notNil].

    急勾配か？ value: #().    "=&gt; true "
    急勾配か？ value: #(1).   "=&gt; true "
    急勾配か？ value: #(0).   "=&gt; false "
    急勾配か？ value: #(32 16 8 4 2 1).   "=&gt; true "
    急勾配か？ value: #(32 15 8 4 2 1).   "=&gt; false "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '8900'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8900
  :user_name: U Okumura
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/862/
  :language: Groovy
  :time: 2009/05/07 05:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>コードは素直に書いてみました。たぶんO(n)のはず。OO的述語関数の表現としてbooleanの読み取り専用プロパティにしてみました。\r</p>\n<p>動作確認は以下のようにしています。\r</p>\n<p>&gt;|groovy|\r</p>\n<p>assert
    [].is急勾配()\r</p>\n<p>assert [0].is急勾配()\r</p>\n<p>assert [1,0].is急勾配()\r</p>\n<p>assert
    ! [0,1].is急勾配()\r</p>\n<p>assert [4,2,1].is急勾配()\r</p>\n<p>assert ! [3,2,1].is急勾配()\r</p>\n<p>||&lt;\r</p>\n<p>\r</p>\n</div>\n\t"
  :code: |
    List.metaClass.is急勾配 = {-&gt;
        delegate.size() &lt;= 1?
            true:
            delegate[1..-1].is急勾配() &amp;&amp; delegate[1..-1].sum() &lt; delegate[0]
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8901'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8901
  :user_name: U Okumura
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/862/
  :language: 
  :time: 2009/05/07 05:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>違った。毎回sum()してるから自乗オーダーでした。\nもうちょっと手を入れなきゃ。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8902'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8902
  :user_name: U Okumura
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/862/
  :language: Other
  :time: 2009/05/07 06:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>とりあえず急勾配な場合でもO(n)。かっこわるいです。\n一般的にはもっと良いはず。ランダムな数列において後ろから見たときに急勾配の条件に合わない値が出てくる確率ってどのくらいなんでしょう。（考えるのめんどくさい）</p>\n\n\t"
  :code: |
    List.metaClass.is急勾配 {-&gt;
        def sum
        for (val in delegate.reverse()) {
            if (sum != null &amp;&amp; val &lt;= sum) {
                return false
            }
            sum = (sum?:0) + val
        }
        return true
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8904'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8904
  :user_name: syat
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2009/05/07 13:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  効率は悪くないと思うけど、工夫はしてません。\r<br><br>仕様面ではっきりしないのは、\r<br>１．空リストは急勾配？ not 急勾配？\r<br>２．問題文の「空列の和は0とします」をどう読むか。\r<br>　　[0] は 0 + 空列  なので、not 急勾配になる？\r<br>　　（sum の初期値を 0 とするか -∞ にするかというだけの話だけど）\n\t"
  :code: |
    Array.prototype.isHeavySlope = function() {
      var sum = 0;
      for (var i = this.length-1; i &gt;= 0; i--) {
        if (this[i] &lt;= sum) return false;
        sum += this[i];
      }
      return true;
    }

    &gt;&gt;&gt; [].isHeavySlope()
    true
    &gt;&gt;&gt; [0].isHeavySlope()
    false
    &gt;&gt;&gt; [1,0].isHeavySlope()
    false
    &gt;&gt;&gt; [0,1].isHeavySlope()
    false
    &gt;&gt;&gt; [4,2,1].isHeavySlope()
    true
    &gt;&gt;&gt; [3,2,1].isHeavySlope()
    false
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8905'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8905
  :user_name: syat
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/766/
  :language: 
  :time: 2009/05/07 13:22 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  sumの初期値を -∞ にしたらだめじゃん。勘違いです。忘れてください。\r<br>てことは [0] は急勾配じゃないということでFA?\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8906'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8906
  :user_name: selpo
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/1013/
  :language: C
  :time: 2009/05/07 10:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>O(n)ですね。速くなりませんかね？\nでも、どうせ全部チェックしなきゃいけないんだから、O(n)が最速でしょうね。</p>\n\n\t"
  :code: |
    using System;
    static class P
    {
        static void Main(string[] args)
        {
            int[] array = { 1, 2, 7, 11, 25 };
            Console.WriteLine("急勾配で{0}", IsAggressive(array) ? "す" : "はありません");
        }
        static bool IsAggressive(int[] array)
        {
            int sum = 0;
            for (int i = 0; i &lt; array.Length; i++)
            {
                if (sum &gt;= array[i])
                    return false;
                else
                    sum += array[i];
            }
            return true;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8907'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8907
  :user_name: lunlumo
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/05/07 15:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　効率優先で。</p>\n\n\t"
  :code: |
    object SteepAngle {
        def isSteep(l:List[Int]):Boolean = l match {
                case List() =&gt; true
                case _ =&gt; {
                    def loop(s:Int, r:List[Int]):Boolean = r match {
                            case List() =&gt; true
                            case x::xs if x &gt; s =&gt; loop(s + x, xs)
                            case _ =&gt; false
                        }
                    loop(l.last, l.reverse.tail)
                }
            }
        def main(args:Array[String]):Unit =
            try {
                isSteep(args.toList.map(_.toInt)) match {
                    case true =&gt; println("steep")
                    case _ =&gt; println("not steep")
                }
            } catch {
                case e =&gt; println("usage: SteepAngle NUMBERS")
            }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8908'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8908
  :user_name: lunlumo
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/813/
  :language: Ruby
  :time: 2009/05/07 15:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　素直に書いてみました。</p>\n\n\t"
  :code: |
    class SteepAngle
        def self.steep?(l)
            (l.size &lt; 2) || (0...l.size - 1).all? { |i| l[i] &gt; l[i + 1...l.size].inject(0) { |r,e| r + e } }
        end
    end

    puts SteepAngle.steep?(ARGV.map { |p| p.to_i }) ? "steep" : "not steep"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8909'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8909
  :user_name: mono
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/398/
  :language: Haskell
  :time: 2009/05/07 16:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>mapAccumの遅延評価が良くわかりませんが...</p>\n\n\t"
  :code: |
    import Data.List (mapAccumR)

    isSteep = and . snd . mapAccumR (\acc x -&gt; (acc+x, x &gt; acc)) 0
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8910'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8910
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2009/05/07 11:51 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    import Maybe

    isKyukoubai xs = isJust $ foldr f (Just 0) xs  where
      f x b = do
        s &lt;- b
        if (x &gt; s) then Just (s+x) else Nothing
    {-
    &gt; isKyukoubai [4,2,1]
    True
    &gt; isKyukoubai [2,2,1]
    False
    &gt; isKyukoubai [undefined,2,2,1]
    False
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8911'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8911
  :user_name: 匿名
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2009/05/08 02:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  #8894を参考にさせて頂きました。\r\n数列を反転後、合計値を先頭に書き込みながら大小比較をしています。\n\t"
  :code: |
    def super_decreasing?(a)
      r = a.reverse
      while r[1] &amp;&amp; (w = r[0] &lt; r[1])
        r[1] += r[0]
        r.shift
      end
      w ? "yes. super_decreasing." : "not super_decreasing."
     end

    p super_decreasing?([8, 4, 2, 1]) # =&gt; yes..
    p super_decreasing?([8, 3, 2, 1]) # =&gt; not..
    p super_decreasing?([1]) # =&gt; not..
    p super_decreasing?([]) # =&gt; not..
    p super_decreasing?([1, -4, -5]) # =&gt; yes..
  :tags:
  - ruby1.9.0
  :references:
    :url: 
    :title: 
- :id: '8912'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8912
  :user_name: creeper
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/994/
  :language: C
  :time: 2009/05/07 22:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Cで普通に。\r\nO(n)です。</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    static int is_kyuukoubai(int* a, int num)
    {
        int i;
        int sum=0;
        for(i=num-1; i&gt;=0; i--)
        {
            if (a[i]&lt;=sum) return 0;
            sum+=a[i];
        }
        return 1;
    }

    int main()
    {
        int test[5] = { 20, 10, 5, 3, 1 };
        if (is_kyuukoubai(test, 5)) printf("kyuukoubai.\n");
        else printf("not kyuukoubai.\n");
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8913'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8913
  :user_name: sekia
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/588/
  :language: Perl
  :time: 2009/05/08 05:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>foreachの方が分かりやすかったかも。\n計算量はΘ(n)のはずです。</p>\n\n\t"
  :code: |
    use List::MoreUtils qw/all/;
    sub is_super_dec(@) {
      my $total = 0;
      all { ($_ &gt; $total) and do { $total += $_; 1 } } reverse @_;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8914'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8914
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2009/05/08 05:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  末尾再帰になってる？\n\t"
  :code: |
    isKyukoubai xs = f [] xs  where
      f ys (x:xs) = f (x:ys) xs
      f ys [] = g 0 ys
      g s (y:ys)
        | y &gt; s     = g (s+y) ys
        | otherwise = False
      g _ [] = True
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8915'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8915
  :user_name: tnk
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/30/
  :language: Java
  :time: 2009/05/08 05:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>思いっきりナイーブに。</p>\n<p>強いて特徴を言うなら，エラーチェックやオーバーフロー対策がしてあるくらい？</p>\n\n\t"
  :code: |
    public static boolean isSteep(int[] nums) {
        if (nums == null || nums.length == 0) return false;
        long sum = 0L;
        for (int i = nums.length - 1; i &gt;= 0; i--) {
            if (nums[i] &lt;= sum) return false;
            sum += nums[i];
        }
        return true;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8917'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8917
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2009/05/08 08:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">効率や末尾再帰や遅延評価や見易さやら考えてたら\r\n#8896 の reverse版になりました。\r\n</pre>\n\t"
  :code: |
    isKyukoubai xs = and $ zipWith (&gt;) ys $ scanl (+) 0 ys  where
      ys = reverse xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8918'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8918
  :user_name: sekia
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/588/
  :language: 
  :time: 2009/05/08 03:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ありゃしまった、急勾配でなければもっと早く返るからO(n)ではあってもΘ(n)じゃないですね。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8919'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8919
  :user_name: turugina
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/760/
  :language: C
  :time: 2009/05/08 04:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  計算量はO(n)ですが、リストを尻から舐めてくと多少は無駄な計算が抑えられるかなー、と。\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;
    #include &lt;algorithm&gt;
    #include &lt;iterator&gt;

    template &lt;typename T&gt;
    struct not_steep_slope {
      T sum_;
      not_steep_slope() : sum_(0) {}
      bool operator()(T v) {
        if (v &lt;= sum_) return true;
        sum_+=v;
        return false;
      }
    };

    template &lt;typename T&gt;
    bool is_steep_slope(const std::vector&lt;T&gt;&amp; v) {
      return std::find_if(v.rbegin(), v.rend(), not_steep_slope&lt;T&gt;()) == v.rend();
    }

    template &lt;typename T&gt;
    void check(const std::vector&lt;T&gt;&amp; v) {
      std::cout &lt;&lt; "(";
      std::copy(v.begin(), v.end(), std::ostream_iterator&lt;T&gt;(std::cout, ","));
      std::cout &lt;&lt; ") =&gt; " &lt;&lt; is_steep_slope(v) &lt;&lt; "\n";
    }

    int main() {
      std::cout.setf( std::ios::boolalpha );

      std::vector&lt;int&gt; v;
      check(v);

      v.push_back(1);
      check(v);

      v.front() = 0;
      check(v);

      v.clear();
      v.push_back(32);
      v.push_back(16);
      v.push_back(8);
      v.push_back(4);
      v.push_back(2);
      v.push_back(1);
      check(v);

      v[1] = 15;
      check(v);

      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8922'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8922
  :user_name: greentea
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/573/
  :language: Other
  :time: 2009/05/08 13:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>組み込み関数reversedのオーダは分かりませんが、少なくともそれ以外の部分は要素数について、線形時間です。</p>\n</div>\n\t"
  :code: |
    #!/usr/bin/python

    def checkSteep(target):
        li = reversed(target)
        sum = 0
        for x in li:
            if x &lt;= sum: return False
            sum += x
        return True

    if __name__ == '__main__':
        print 'Steep' if checkSteep([32, 16, 8, 4, 2, 1]) else 'not Steep' # =&gt; Steep
        print 'Steep' if checkSteep([32, 15, 8, 4, 2, 1]) else 'not Steep' # =&gt; not Steep
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8923'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8923
  :user_name: spoon
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/1036/
  :language: Python
  :time: 2009/05/08 14:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    def super_decreasing(l):
        return all(l[i] &gt; sum(l[i+1:]) for i in xrange(0, len(l)-1))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8924'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8924
  :user_name: syat
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2009/05/08 23:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  リストを前から見ていくこともできます。\r<br>後ろから見るほうがシンプルだけど、リストの長さが未確定の場合はこちらが有利。\r<br>ちなみに [1,0].isHeavySlope() は true になりますが何か？\n\t"
  :code: |
    Array.prototype.isHeavySlope = function() {
        if (this.length == 0) return true;
        var pre, sub;
        for each (var n in this) {
            if (pre == undefined) {
                sub = pre = n;
            } else {
                sub -= n;
                if (pre &lt;= n || sub &lt;= 0) return false;
                pre = n;
            }
        }
        return true;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8925'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8925
  :user_name: kkobayashi
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2009/05/09 06:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>cumsum の結果をキャッシュしておけば線形になります。</p>\n\n\t"
  :code: |
    is.superdecreasing &lt;- function(l) all(l &gt; rev(cumsum(rev(l)))-l)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8926'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8926
  :user_name: yohei
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/415/
  :language: Prolog
  :time: 2009/05/09 11:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    sd([],_) :- !.
    sd([X|Xs],S) :- X &gt; S, S1 is S + X, sd(Xs,S1).
    super_decreasing(Xs) :- reverse(Xs,Ys), sd(Ys,0).
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '8927'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8927
  :user_name: pooq
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2009/05/09 15:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">累積値のリストをつくって元のリストと比較しているので\r\n効率は良くないと思います。\r\n
    \  ]data1=: 2^i._15\r\n16384 8192 4096 2048 1024 512 256 128 64 32 16 8 4 2 1\r\n
    \  ]data2=: 100(0)}2^i._15\r\n100 8192 4096 2048 1024 512 256 128 64 32 16 8 4
    2 1\r\n   f data1\r\n1\r\n   f data2\r\n0</pre>\n\t"
  :code: |
    f=:*/@(&gt;(-~+/\.))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8928'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8928
  :user_name: 割と普通
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/581/
  :language: C
  :time: 2009/05/10 02:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>LINQを使って無難に判定。コレは 3n だから O(n)になるのかな。\r</p>\n<p>Aggregateとかを使おうと思ったんですが、結局はsumを外出しにするのと、Selectで十分だと気づきました。</p>\n</div>\n\t"
  :code: |2
            static bool IsAggressive(int[] list)
            {
                int sum = list.Sum();
                return list.Reverse().Select(num =&gt;
                {
                    sum -= num;
                    return sum - num;
                }).Any(num =&gt; num &lt; 0);
            }
  :tags:
  - LINQ
  :references:
    :url: 
    :title: 
- :id: '8939'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8939
  :user_name: ワサビ
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/1045/
  :language: OCaml
  :time: 2009/05/16 00:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ほとんどOCaml互換。計算量はO(n)です。\n\t"
  :code: |
    let isSteep ls =
        List.fold_right (fun x (result, sum) -&gt;
            if result &amp;&amp; x &gt; sum then (true, sum + x) else (false, sum)
        ) ls (true, 0) |&gt; fst
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '8958'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8958
  :user_name: sawa
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/1052/
  :language: Ruby
  :time: 2009/05/20 05:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #! /usr/bin/ruby

    class Array
        def steep?
            reverse.inject(0) do |sum, previous|
                return false unless previous &gt; sum
                sum += previous
            end
            true
        end
    end

    p [5, 3, 2].steep?
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8973'
  :parent_id: '248'
  :url: http://ja.doukaku.org/comment/8973
  :user_name: Songmu
  :user_url: /web/20090528015316/http://ja.doukaku.org/user/763/
  :language: Perl
  :time: 2009/05/22 03:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #!/usr/bin/perl
    use strict;
    use warnings;

    sub is_steep_array{
        my @arr = reverse @_;
        my $sum = 0;
        $sum &lt; $_ ? $sum += $_ : return () for @arr;
        1;
    }
    print 'true' if is_steep_array(9,4,2,1);
  :tags: []
  :references:
    :url: 
    :title: 
