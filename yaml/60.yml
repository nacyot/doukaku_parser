---
:id: '60'
:title: exp(pi * sqrt(n))が整数に近くなるnを探す
:comments:
- :id: '3416'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3416
  :user_name: herumi
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/564/
  :language: 
  :time: 2007/09/14 13:31 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  1以上200未満の整数nのうち、\r\nexp(pi * sqrt(n))がほとんど整数であるようなnを求めるコードを書いてください。\r\nなお、expは底がeである<a
    href=\"/web/20090221103043/http://ja.wikipedia.org/wiki/%E6%8C%87%E6%95%B0%E9%96%A2%E6%95%B0\">指数関数
    - Wikipedia</a>、\r\npiは円周率、sqrtは平方根です。また「ほとんど整数である」とは\r\n整数からプラスマイナス0.0001の範囲にあることとします。
    \r\n<p>\r\nPythonで34行のスクリプトを書いて得られた出力の例が下のようになります。\r\n</p>\n<pre>\r\n37 199148647.999978\r\n58
    24591257752.000000\r\n67 147197952743.999999\r\n163 262537412640768744.000000
    \r\n</pre>\r\nこの問題は光成さんに教えて頂いた\r\n<a href=\"/web/20090221103043/http://www.kaynet.or.jp/~kay/misc/epi163.html\">e^{π*sqrt{163}}≒26253741640768744</a>\r\nが元になっています。ご協力ありがとうございました。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3016'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3016
  :user_name: Y
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/428/
  :language: Mathematica
  :time: 2007/09/14 14:29 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">1から199まで(Range)の整数から、選ぶ(Select)、\r\n基準は、\r\n「x=Exp[Pi
    Sqrt[n]]として(With)、Abs[x-Round@x]が10^-4以下のもの」\r\n\r\n「10^-4を0.0001と書いてはいけない」という問題かな</pre>\n\t"
  :code: "Select[Range@199,\n  Function[{n}, \n    With[{x = Exp[Pi Sqrt@n]},\n      Abs[x
    - Round@x] &lt;= 10^-4]]]\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3018'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3018
  :user_name: nobsun
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/14 15:16 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">もともとかなり古いライブラリだけど。。。使い勝手は悪くないと思う。\r\n\r\nCReal
    モジュールを使う\r\n\r\nこのモジュールではデフォルトで小数点以下40桁まで表示。</pre>\n\t"
  :code: |
    module Main (main) where

    import CReal

    default (CReal)

    f :: CReal -&gt; (Int, CReal)
    f n = (ceiling n, exp $ pi * sqrt n)

    g :: CReal -&gt; Bool
    g n = 0.0001 &gt; if 0.5 &gt; n' - n then n' - n else 1 - (n' - n)
      where n' = fromInteger $ ceiling n

    main :: IO ()
    main = mapM_  (putStrLn . show) $ filter (g . snd) $ map f $ [1..200]

    {-
    *Main&gt; :main
    (37,199148647.9999780465518567665009238753359004336659)
    (58,24591257751.9999998222132414695761923552658122276102)
    (67,147197952743.9999986624542245068292613125786285081833)
    (163,262537412640768743.9999999999992500725971981856888793538563)
    -}
  :tags:
  - CReal
  :references:
    :url: /web/20090221103043/http://darcs.augustsson.net/Darcs/CReal/
    :title: CReal
- :id: '3019'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3019
  :user_name: nobsun
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/09/14 15:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あっ。200未満か。まぁいいか。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3020'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3020
  :user_name: ココサブ
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/09/14 17:06 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  <pre class=\"compact\">GNU拡張使用。\r\n精度の問題か163はひっかからず。\r\n\r\n実行結果は\r\n37
    199148647.999978\r\n58 24591257752.000000\r\n67 147197952743.999999</pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n#define __USE_GNU\n#include &lt;math.h&gt;\n\nvoid
    func(int n)\n{\n    long double d;\n    int n_normal, n_plus, n_minus;\n\n    /*
    exp(pi * sqrt(n)) を求める */\n    d = expl(M_PIl * sqrtl((double)n));\n\n    /* 精度倍する。1を加減算して桁上がりするか
    */\n    n_normal = fmodl(d*10000.0, 10000.0);\n    n_plus   = n_normal + 1;\n
    \   n_minus  = n_normal - 1;\n\n    if ((n_normal % 10000) == 0\n     || (n_plus
    \  % 10000) == 0\n     || (n_minus  % 10000) == 0) {\n        printf(\"%d %Lf\\n\",
    n, d); \n    }   \n}\n\nint main()\n{\n    int n;\n                                                                        \n
    \   for (n = 1; n &lt; 200; n++) {                                         \n
    \       func(n);\n    }\n\n    return 0;\n}\n"
  :tags:
  - GNU
  :references:
    :url: 
    :title: 
- :id: '3021'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3021
  :user_name: にしお
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/14 17:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt;「10^-4を0.0001と書いてはいけない」\r\n\r\nそうなんですか？</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3022'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3022
  :user_name: にしお
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/14 17:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">ええと、long doubleは18桁くらいの精度ですよね。\r\n67の計算には足りて、163の計算には足りないのでしょうね、きっと。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3023'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3023
  :user_name: yuin
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/09/14 17:51 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  \n<p>Apfloatを使いました。\n</p>\n<p>それだけじゃ何も芸がない感じだったので、implicitでApfloatをあまり意識せずに書ける様にしました。\n</p>\n\n\n\n\t"
  :code: |
    import org.apfloat._
    import scala.runtime._

    object findAlmostInt {
      implicit def toApfloat[A &lt;: AnyVal](i:A):Apfloat = {
        new Apfloat(i.toString, 32)
      }
      implicit def toDouble(i:Apfloat):RichDouble = i.doubleValue.toDouble
      val PI = ApfloatMath.pi(32)

      def apply(i:int, j:int) = {
        (i to j-1).filter{n =&gt;
          val x = ApfloatMath.exp(PI.multiply(ApfloatMath.sqrt(n)))
          val y = x.ceil.subtract(x)
          (if(y&lt;0.5){y}else{1.subtract(y)}).abs &lt; 0.0001
        }.toList
      }
    }

    println(findAlmostInt(1,200))
  :tags: []
  :references:
    :url: /web/20090221103043/http://www.apfloat.org/apfloat_java/
    :title: Apfloat
- :id: '3024'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3024
  :user_name: ocean
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/09/14 19:12 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  Decimalを使って多倍長計算。sqrtは組み込みのものを使い、expは安直にマクローリン展開で収束するまで回しています。psycoを使ってますが、それでもかなり遅いです。\n\t"
  :code: |
    from decimal import *
    import itertools

    def decimal_exp(x):
        curr, bunsi, bunbo = Decimal("1.0"), Decimal("1.0"), 1
        for k in itertools.count(1):
            bunsi *= x
            bunbo *= k
            next = curr + bunsi / bunbo
            if curr == next:
                return curr
            curr = next

    def main():
        pi = Decimal("3.141592653589793238462643383279")
        for n in xrange(1, 200):
            x = decimal_exp(pi * Decimal(n).sqrt()) # result
            i = x.quantize(Decimal("1.0"), rounding=ROUND_HALF_UP) # nearest integer
            if (x - i).quantize(Decimal("0.00001"), rounding=ROUND_DOWN) == 0:
                print n, x

    if __name__ == '__main__':
        try:
            import psyco
        except ImportError:
            pass
        else:
            psyco.full()
        main()
  :tags: []
  :references:
    :url: /web/20090221103043/http://d.hatena.ne.jp/piro_suke/20070822/1187756537
    :title: Pythonで10進数計算したり数値を丸めたりする
- :id: '3025'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3025
  :user_name: ocean
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/177/
  :language: diff
  :time: 2007/09/15 06:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  あああ、すみません。組み終わった後に \".00...\" という表記を自分好みの \"0.00..\" という表記に書き換えたときにエンバグしちゃったみたいで、37 が表示されなくなってました。プラス評価もらったのに申し訳ない。\n\t"
  :code: "--- a.orig\tSat Sep 15 15:12:33 2007\n+++ a.py\tSat Sep 15 15:12:50 2007\n@@
    -16,7 +16,7 @@\n     for n in xrange(1, 200):\n         x = decimal_exp(pi * Decimal(n).sqrt())
    # result\n         i = x.quantize(Decimal(\"1.0\"), rounding=ROUND_HALF_UP) #
    nearest integer\n-        if (x - i).quantize(Decimal(\"0.00001\"), rounding=ROUND_DOWN)
    == 0:\n+        if (x - i).quantize(Decimal(\"0.0001\"), rounding=ROUND_DOWN)
    == 0:\n             print n, x\n \n if __name__ == '__main__':\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3026'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3026
  :user_name: nobsun
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/09/15 09:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">f の定義がちょっとアレげなので、リファクタリング\r\n\r\nf :: Integer
    -&gt; (Integer, CReal)\r\nf n = (n, exp $ pi * sqrt (fromInteger n))\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3027'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3027
  :user_name: vtwntmtn
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/380/
  :language: Ruby
  :time: 2007/09/15 09:21 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">素直にbigdecimalを使って。</pre>\n\t"
  :code: |
    require "bigdecimal"
    require "bigdecimal/math.rb"

    include BigMath

    def exp_pi_sqrt(x)
      tmp = exp(PI(30) * sqrt(BigDecimal(x.to_s), 30), 30)
      err = BigDecimal 0.0001.to_s
      if (tmp &gt; (tmp.floor - err)) and (tmp &lt; (tmp.floor + err))
        print "#{x} #{tmp.to_s("F")}\n"
      elsif (tmp &gt; (tmp.ceil - err)) and (tmp &lt; (tmp.ceil + err))
        print "#{x} #{tmp.to_s("F")}\n"
      end
    end

    =begin
    for i in 1 .. 200
      exp_pi_sqrt i
    end
    =end
  :tags: []
  :references:
    :url: /web/20090221103043/http://www.ruby-lang.org/ja/man/?cmd=view;name=BigDecimal
    :title: Rubyリファレンスマニュアル - bigdecimal
- :id: '3028'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3028
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/09/15 10:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  強引に解いてみました。BigDecimalを使用していますがライブラリがないので自前で計算しています。expの計算方法が非効率的なので非常に時間がかかります（苦笑）。\n\t"
  :code: "import java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class
    Sample {\n    private static final double EPS = 0.000001;\n    private static
    final double EPS2 = 1e-25;\n    private static final BigDecimal TWO = new BigDecimal(2);\n
    \   private static final BigDecimal PI = new BigDecimal\n        (\"3.1415926535897932384626433\");\n
    \   public static BigDecimal exp(BigDecimal x) {\n        int i = 1;\n        BigDecimal
    b = new BigDecimal(i++);\n        BigDecimal c = x;\n        BigDecimal a = new
    BigDecimal(1.0);\n        BigDecimal d;\n        while ((d = c.divide(b, MathContext.DECIMAL128)).doubleValue()
    &gt; EPS) {\n            a = a.add(d);\n            b = b.multiply(new BigDecimal(i++));\n
    \           c = c.multiply(x);\n        }\n        return a;\n    }\n\n    public
    static BigDecimal sqrt(BigDecimal a) {\n        BigDecimal x = new BigDecimal(10);\n
    \       BigDecimal delta;\n        do {\n            delta = (x.multiply(x).subtract(a)).divide(TWO.multiply(x),
    \n                                                       MathContext.DECIMAL128);\n
    \           x = x.subtract(delta);\n        } while (delta.abs().doubleValue()
    &gt; EPS2);\n        return x;\n    }\n\n    public static void main(String[]
    args) {\n        for (int i = 1; i &lt; 200; i++) {\n            BigDecimal er
    = exp(PI.multiply(sqrt(new BigDecimal(i))));\n            BigDecimal rer = new
    BigDecimal(er.toBigInteger());\n            double a = er.subtract(rer).doubleValue();\n
    \           if (a &lt; 0.0001 || a &gt; 0.9999) {\n                System.out.printf(\"%d:
    %f%n\", i, er);\n            }\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3029'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3029
  :user_name: fkmn
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/190/
  :language: Perl
  :time: 2007/09/15 14:02 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">ふつうに Math::BigFloat を使ってます。\r\n\r\n実行結果：\r\n37
    =&gt; 199148647.99997804655185676650092387533591914368128\r\n58 =&gt; 24591257751.999999822213241469576192355288556885837\r\n67
    =&gt; 147197952743.99999866245422450682926131235350749310\r\n163 =&gt; 262537412640768743.99999999999925007259524857371873</pre>\n\t"
  :code: "use strict;\nuse warnings;\nuse Math::BigFloat;\n\nmy $diff = 0.0001;\nmy
    $pi   = Math::BigFloat-&gt;bpi(50);\n\nsub exp_pi_sqrt ($) {\n    return exp(
    $pi * Math::BigFloat-&gt;new( $_[0] )-&gt;bsqrt );\n}\n\nprint( $_-&gt;[0], \"
    =&gt; \", $_-&gt;[1], \"\\n\" ) for \n    grep {\n           abs( $_-&gt;[1] -
    $_-&gt;[1]-&gt;copy-&gt;bfloor )  &lt;= $diff\n        || abs( $_-&gt;[1] - $_-&gt;[1]-&gt;copy-&gt;bceil
    \ )  &lt;= $diff\n    }\n    map { [ $_ =&gt; exp_pi_sqrt($_) ] } 1 .. 200;\n"
  :tags:
  - Math::BigFloat
  :references:
    :url: 
    :title: 
- :id: '3030'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3030
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2007/09/15 14:55 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">どう書く.orgさんの趣旨に沿っているか分かりませんが、プログラマブル電卓を使用しました☆\r\n使い方は、コードをコピペして\r\n　編集→クリップボードを実行\r\nです☆</pre>\n\t"
  :code: |
    for(n=1;n&lt;200;n++)
      if((exp(pi*sqrt(n))*10000+1)%10000&lt;2)
        printf("%d %.99f\n",n,exp(pi*sqrt(n)));
  :tags: []
  :references:
    :url: /web/20090221103043/http://www.vector.co.jp/soft/win95/personal/se242555.html
    :title: 多倍長電卓LM
- :id: '3031'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3031
  :user_name: koguro
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/438/
  :language: Scheme
  :time: 2007/09/15 15:03 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">Gaucheだと任意精度の小数が扱えないので基本的に有理数で計算しています。\r\nただしまともにやるととんでもない時間がかかるので、以下のように計算をはしょっています。\r\n(1)
    問題は「整数に近いかどうか？」というものなので、exp(pi*sqrt(n))を級数展開した\r\nときの各項では小数部分のみ計算している。これで、各項の最終的な精度はdoubleで十分になる。\r\n(2)
    分母、分子の桁数が大きくなるのを防ぐため、偶数項と奇数項で計算を分けている\r\n(偶数項ではnの平方根はいらなくなるから)。\r\n\r\nとはいえ、これでも結構時間がかかっていて、MacPro
    3GHzで1500秒程度でした。\r\n</pre>\n\t"
  :code: "(use srfi-1)\n\n(define (calc-pi k)\n  (do ((n 1 (+ n 1))\n       (a 1 (*
    a (- (* 4 n n) (* 2 n))))\n       (b 2 (* b 16))\n       (c 1 (* c n))\n       (p
    0 (+ p (/ a (* b c c (- (* 2 n) 1))))))\n      ((&lt;= k n) (* 6 p))))\n\n(define
    (%sqrt* a n)\n  (let ((root (sqrt a)))\n    (if (= (* root root) a)\n        (inexact-&gt;exact
    root)\n        (do ((i 1 (+ i 1))\n             (xn a (/ (+ xn (/ a xn)) 2)))\n
    \           ((&lt;= n i) xn)))))\n\n(define sqrt* (cut %sqrt* &lt;&gt; 10))\n\n(define
    pi* (calc-pi 50))\n\n(define (fract/ n d)\n  (define (str-&gt;dbl str)\n    (string-&gt;number\n
    \    (string-append \"0.\" (substring str 0 (min 15 (string-length str))))))\n
    \ (let ((dstr (number-&gt;string d))\n        (nstr (number-&gt;string (modulo
    n d))))\n    (let ((d* (str-&gt;dbl dstr))\n          (n* (str-&gt;dbl nstr)))\n
    \     (/. n* d* (expt 10 (- (string-length dstr) (string-length nstr)))))))\n
    \   \n(define (%fract-exp-pi* n epsilon)\n  (let ((q1 (sqrt* n)))\n    (let ((pin
    (numerator pi*))\n          (pid (denominator pi*))\n          (q1n (numerator
    q1))\n          (q1d (denominator q1)))\n      (define (odd-term i pn pd fract)\n
    \       (let* ((new-pn (* pn pin))\n               (new-pd (* pd pid i))\n               (af
    (fract/ (* new-pn q1n) (* new-pd q1d)))\n               (new-fract (+ fract af)))\n
    \         (if (&lt; 0.0 af epsilon)\n              new-fract\n              (even-term
    (+ i 1) new-pn new-pd new-fract))))\n      (define (even-term i pn pd fract)\n
    \       (let* ((new-pn (* pn pin n))\n               (new-pd (* pd pid i))\n               (af
    (fract/ new-pn new-pd))\n               (new-fract (+ fract af)))\n          (if
    (&lt; 0.0 af epsilon)\n              new-fract\n              (odd-term (+ i 1)
    new-pn new-pd new-fract))))\n      (odd-term 1 1 1 0))))\n\n(define fract-exp-pi*
    (cut %fract-exp-pi* &lt;&gt; 0.00001))\n  \n(print (filter (lambda (n)\n                 (let1
    x (fract-exp-pi* n)\n                   (&lt;= (abs (- x (round x))) 0.0001)))\n
    \              (iota 199 1)))\n"
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3032'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3032
  :user_name: koguro
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/438/
  :language: diff
  :time: 2007/09/15 15:41 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">すみません、さっきのコードだと(pi * sqrt(n))^k / k! がたまたま整数に近かったときに\r\n誤動作する可能性がありました(今回の解の探索範囲では問題ないのですが)。</pre>\n\t"
  :code: |
    --- eps.scm.orig        2007-09-16 00:31:43.000000000 +0900
    +++ eps.scm     2007-09-16 00:32:29.000000000 +0900
    @@ -39,9 +39,11 @@
           (define (odd-term i pn pd fract)
             (let* ((new-pn (* pn pin))
                    (new-pd (* pd pid i))
    -               (af (fract/ (* new-pn q1n) (* new-pd q1d)))
    +               (an (* new-pn q1n))
    +               (ad (* new-pd q1d))
    +               (af (fract/ an ad))
                    (new-fract (+ fract af)))
    -          (if (&lt; 0.0 af epsilon)
    +          (if (and (&lt; 0.0 af epsilon) (&lt; an ad))
                   new-fract
                   (even-term (+ i 1) new-pn new-pd new-fract))))
           (define (even-term i pn pd fract)
    @@ -49,7 +51,7 @@
                    (new-pd (* pd pid i))
                    (af (fract/ new-pn new-pd))
                    (new-fract (+ fract af)))
    -          (if (&lt; 0.0 af epsilon)
    +          (if (and (&lt; 0.0 af epsilon) (&lt; new-pn new-pd))
                   new-fract
                   (odd-term (+ i 1) new-pn new-pd new-fract))))
           (odd-term 1 1 1 0))))
    @@ -60,3 +62,4 @@
                      (let1 x (fract-exp-pi* n)
                        (&lt;= (abs (- x (round x))) 0.0001)))
                    (iota 199 1)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3033'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3033
  :user_name: sumim
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/09/16 02:19 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  Squeak Smalltalk で。\r<br><br>組み込みの ScaledDecimal（Java でいうところの BigDecimal ）を使って、sqrt と exp を自前で用意。sqrt には、開平法を使用しています。1GHz PowerPC (OS X) で、21 分ほどかかりました(^_^;)。\n\t"
  :code: "| pi exp sqrt |\n\npi := 3.141592653589793238462643s24.\n\nsqrt := [:x |\n
    \   | pairs digits mem rem |\n    pairs := OrderedCollection new.\n    [x &gt;
    0] whileTrue: [pairs addFirst: x \\\\ 100. x := x // 100].\n    pairs addAll:
    (Array new: 24 withAll: 0).\n    digits := rem := mem := 0.\n    pairs do: [:pair
    |\n        | next found |\n        rem := rem * 100 + pair.\n        (0 to: 9)
    findLast: [:i | rem - ((next := mem * 10 + (found := i)) * i) &gt;= 0].\n        rem
    := rem - (next * found).\n        mem := next + found.\n        digits := digits
    * 10 + found].\n    (digits / 1e24) asScaledDecimal: 24].\n\nexp := [:x |\n    |
    val fac mul i delta |\n    val := fac := i := 1s5.\n    mul := x := x asScaledDecimal:
    5.\n    [(delta := mul / fac) &gt; 0.00001s5] whileTrue: [\n        val := val
    + delta.\n        mul := mul * x.\n        fac := fac * (i := i + 1)].\n    val].\n\n^(1
    to: 200)\n    collect: [:n | n -&gt; (exp value: (pi * (sqrt value: n)))]\n    thenSelect:
    [:assoc | (assoc value - (assoc value roundTo: 1)) abs &lt;= 0.0001s4]\n\n\"=&gt;
    {37 -&gt; 199148647.99996s5. \n     58 -&gt; 24591257751.99999s5. \n     67 -&gt;
    147197952743.99998s5. \n     163 -&gt; 262537412640768743.99998s5} \"\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '3034'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3034
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/09/16 02:37 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">人のふんどしで相撲を取るシリーズ。\r\n\r\n上記のコードを任意精度演算ライブラリとしてgmpを使いCに移植しました。\r\n</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;gmp.h&gt;

    mpf_t curr, next, bunsi, bunbo;

    void mpf_exp(mpf_t x)
    {
        unsigned int k;

        mpf_set_ui(curr, 1.0);
        mpf_set_ui(bunsi, 1.0);
        mpf_set_ui(bunbo, 1.0);

        for (k = 1; ;k++) {
            mpf_mul(bunsi, bunsi, x);
            mpf_mul_ui(bunbo, bunbo, k);
            mpf_div(next, bunsi, bunbo);
            mpf_add(next, next, curr);
            if (mpf_cmp(curr, next) == 0) {
                mpf_set(x, curr);
                return;
            }
            mpf_set(curr, next);
        }
    }

    int main(int argc, char *argv[])
    {
        char buf[128], tmp[8];
        double d;
        int i;
        mpf_t x, pi;

        mpf_set_default_prec(128);

        mpf_init(curr);
        mpf_init(next);
        mpf_init(bunsi);
        mpf_init(bunbo);
        mpf_init(x);
        mpf_init(pi);

        mpf_set_str(pi, "3.1415926535897932384626433832795029", 10);

        for (i = 1; i &lt; 200; i++) {
            mpf_set_ui(x, i);
            mpf_sqrt(x, x);
            mpf_mul(x, x, pi);
            mpf_exp(x);

            gmp_sprintf(buf, "%.*Ff", 6, x);
            d = atof(strncpy(tmp, strchr(buf, '.'), 7));
            if ((d &lt; 0.0001) || ((1 - d) &lt; 0.0001))
                printf("%d %s\n", i, buf);
        }

        mpf_clear(curr);
        mpf_clear(next);
        mpf_clear(bunsi);
        mpf_clear(bunbo);
        mpf_clear(x);
        mpf_clear(pi);

        return 0;
    }
  :tags:
  - gmp
  :references:
    :url: 
    :title: 
- :id: '3063'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3063
  :user_name: matyr
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/09/18 01:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t   便乗。このライブラリは重宝しそう。\n\t"
  :code: |
    function doukaku60(){ // 精度的に 58 が限界。
      with(Math) for(var r = [], f, n = 1; n &lt; 200; n++)
        if(abs((f = exp(PI * sqrt(n))) - round(f)) &lt; 1e-4) r.push([n, f]);
      return r;
    }
    // ↓ Apfloat を用いて書き換え //

    function doukaku60_(){
      var F = Packages.org.apfloat.Apfloat;
      var M = Packages.org.apfloat.ApfloatMath;
      for(var r = [], p = 25, h = new F(0.5, p), f, n = 1; n &lt; 200; n++){
        f = M.exp(M.pi(p).multiply(M.sqrt(new F(n, p))));
        if(M.abs(f.subtract(f.add(h).floor())).floatValue() &lt; 1e-4) r.push([n, f.toString(true)]);
      }
      return r;
    }
    print(doukaku60_().join('\n'))
  :tags:
  - Apfloat
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '3070'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3070
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/09/18 09:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">上記のコードをctypesを使ってpythonで実装してみました。\r\n\r\nCのヘッダファイル内で#ifdefやら#defineが多用されているので、もしかしたら\r\n環境依存になっているかもしれません。\r\n\r\n呼び出し毎にインスタンスを生成するexp関数と、静的なインスタンスを持つ\r\nexp2関数の速度を比較すると、exp2の方が20%ほどはやいようです。\r\n</pre>\n\t"
  :code: |
    from ctypes import *

    gmp = cdll.LoadLibrary('libgmp.so')

    for s in ['set_default_prec', 'init', 'clear', 'set', 'set_ui', 'set_str', 'mul'
    , 'mul_ui', 'div', 'add', 'cmp', 'sqrt', 'printf', 'snprintf']:
      try:
        gmp.__setattr__(s, gmp.__getattr__('__gmpf_'+s))
      except:
        gmp.__setattr__(s, gmp.__getattr__('__gmp_'+s))

    def mpf():
      class mpf_t(Structure):
        _fields_ = [("_mp_prec", c_int), ("_mp_size", c_int), ("_mp_exp", c_int), ("
    _mp_d", c_void_p)]

        def __init__(self):
          Structure.__init__(self)
          gmp.init(byref(self))

        def __del__(self):
          try:
            gmp.clear(byref(self))
          except:
            pass

      return pointer(mpf_t())

    def exp(rop, op):
      curr, bunsi, bunbo, next = mpf(), mpf(), mpf(), mpf()

      gmp.set_ui(curr, c_ulong(1))
      gmp.set_ui(bunsi, c_ulong(1))
      gmp.set_ui(bunbo, c_ulong(1))

      k = 1
      while True:
        gmp.mul(bunsi, bunsi, op)
        gmp.mul_ui(bunbo, bunbo, c_ulong(k))
        gmp.div(next, bunsi, bunbo)
        gmp.add(next, next, curr)
        if gmp.cmp(curr, next) == 0:
          gmp.set(rop, curr)
          return
        gmp.set(curr, next)
        k += 1

    def exp2(rop, op):
      try:
        curr, bunsi, bunbo, next = exp2.curr, exp2.bunsi, exp2.bunbo, exp2.next
      except:
        exp2.curr, exp2.bunsi, exp2.bunbo, exp2.next = mpf(), mpf(), mpf(), mpf()
        curr, bunsi, bunbo, next = exp2.curr, exp2.bunsi, exp2.bunbo, exp2.next

      gmp.set_ui(curr, c_ulong(1))
      gmp.set_ui(bunsi, c_ulong(1))
      gmp.set_ui(bunbo, c_ulong(1))

      k = 1
      while True:
        gmp.mul(bunsi, bunsi, op)
        gmp.mul_ui(bunbo, bunbo, c_ulong(k))
        gmp.div(next, bunsi, bunbo)
        gmp.add(next, next, curr)
        if gmp.cmp(curr, next) == 0:
          gmp.set(rop, curr)
          return
        gmp.set(curr, next)
        k += 1

    def frac_f(x):
      buf = c_buffer(256)
      gmp.snprintf(buf, len(buf)-1, "%.Ff", x)
      return float(buf.value[buf.value.index('.'):])

    def main():
      from time import time
      t = time()

      gmp.set_default_prec(128)

      x, pi = mpf(), mpf()

      gmp.set_str(pi, "3.141592653589793238462643383279502884197", 10)

      for i in range(1, 200):
        gmp.set_ui(x, c_ulong(i))
        gmp.sqrt(x, x)
        gmp.mul(x, x, pi)
    #    exp(x, x)
        exp2(x, x)
        f = frac_f(x)
        if f &lt; 0.0001 or (1-f) &lt; 0.0001:
          gmp.printf("%d %.6Ff\n", i, x)

      print time() - t

    if __name__ == '__main__':
      main()
  :tags:
  - ctypes
  - gmp
  :references:
    :url: 
    :title: 
- :id: '3082'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3082
  :user_name: nobsun
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/19 04:40 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">20000以下で調べてみたら，\r\n\r\n(37,199148647.9999780465518567665009238753359004336659)\r\n(58,24591257751.9999998222132414695761923552658122276102)\r\n(67,147197952743.9999986624542245068292613125786285081833)\r\n(163,262537412640768743.9999999999992500725971981856888793538563)\r\n(232,604729957825300084759.9999921715268564302785946808125512858845)\r\n(652,68925893036109279891085639286943768.0000000001637386442092346075723290625709)\r\n(719,3842614373539548891490294277805829192.9999872495660121875632701836570684449713)\r\n(1169,44555719382988281777368496770130045948309444044.9999608028638684615024311524958053653676)\r\n(1467,18095625621654510801615355531263454706630064771074975.9999999901236936712413276522472419790897)\r\n(2608,4750778730825177725463920948909726618214491718039471366318747406368792.0000003084643221299811801879962000157848)\r\n(4075,1247257156019637304856107520018074552566824585862995272173368815794085495792299621093743.9999936541874689715769690801805608661462)\r\n(5773,46309587632860353087565367053742331250287153098248715578209888177688338779879045292937243508078581367989.9999155688538141662485158867634827239495)\r\n(5868,327451666639079200503292535866541250265248788274691526825971156747731856100971255480468836963064283775072.0000971752541625920841201776565931010652)\r\n(14370,35853082260707987565058966569844138230073788113687426211111838655289387060751425253235617998546754095483027646820100689677619375065141669969772221012766669726610356.0000809961676073067730760452585504610564)\r\n(19183,932865712335864748985892137487224407024879778525651187858506512365813448395651706659915858370562540302669863675912417090372354324023009941419688829317421179304232837551154837099435561184585.9999366484683843100572967742009198686654)\r\n\r\nという結果でした．163が題意の意味で一番整数に近いようです．\r\n所要時間は，time
    ではかって，\r\n\r\n2128.54s user 8.40s system 96% cpu 36:49.42 total\r\n\r\nでした．\r\n</pre>\n\t"
  :code: "module Main (main) where\n\nimport Data.List\nimport System.Environment\nimport
    System.IO\nimport CReal\n\ndefault (CReal)\n\nf :: CReal -&gt; (Int, CReal)\nf
    n = (ceiling n, exp $ pi * sqrt n)\n\ng :: CReal -&gt; Bool\ng n = 0.0001 &gt;
    h n\n\nh :: CReal -&gt; CReal\nh n = if 0.5 &gt; n' - n then n' - n else 1 - (n'
    - n)\n  where n' = fromInteger $ ceiling n\n\nmain :: IO ()\nmain = do { args
    &lt;- getArgs\n          ; case args of\n              []  -&gt; loop 100 0\n
    \             n:_ -&gt; loop (read n) 0\n          }\nloop n m \n | n == m = return
    ()\n | True   = mapM_ (k . f) [(m*100)+1 .. (m+1)*100] &gt;&gt; loop n (m+1)\n\nk
    :: (Int,CReal) -&gt; IO ()\nk n@(i,r) = if g r then hPutStrLn stdout (show n)
    &gt;&gt; hFlush stdout\n\t    else putStr (show i ++ \"\\r\") &gt;&gt; hFlush
    stdout\n"
  :tags:
  - CReal
  :references:
    :url: 
    :title: 
- :id: '3083'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3083
  :user_name: nobsun
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/09/19 04:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">cpuスペックを書きわすれた。\r\nIntel(R) Pentium(R) M processor
    2.13GHz\r\nです</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3130'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3130
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/09/20 14:22 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">expの計算の効率を上げる事で、なんとか実用(?)的な性能にする事ができました。\r\n\r\nx
    = n log 10 + k の時\r\n    exp(x) = 10^n * exp(k)\r\nの性質を使っています。</pre>\n\t"
  :code: "import java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class
    Sample {\n    private static final double EPS = 0.000001;\n    private static
    final double EPS2 = 1e-25;\n    private static final BigDecimal TWO = new BigDecimal(2);\n
    \   private static final BigDecimal PI = new BigDecimal\n        (\"3.141592653589793238462643383279\");\n
    \   private static final BigDecimal LN10 = new BigDecimal\n        (\"2.3025850929940456840179914546844\");\n
    \   public static BigDecimal exp(BigDecimal x) {\n        BigDecimal[] dr = x.divideAndRemainder(LN10);\n
    \       int n = dr[0].intValue();\n        x = dr[1];\n        int i = 1;\n        BigDecimal
    b = new BigDecimal(i++);\n        BigDecimal c = x.scaleByPowerOfTen(n);;\n        BigDecimal
    a = new BigDecimal(1.0).scaleByPowerOfTen(n);\n        BigDecimal d;\n        while
    ((d = c.divide(b, MathContext.DECIMAL128)).doubleValue() &gt; EPS) {\n            a
    = a.add(d);\n            b = b.multiply(new BigDecimal(i++));\n            c =
    c.multiply(x);\n        }\n        return a;\n    }\n\n    public static BigDecimal
    sqrt(BigDecimal a) {\n        BigDecimal x = new BigDecimal(Math.sqrt(a.doubleValue()));\n
    \       BigDecimal delta;\n        do {\n            delta = (x.multiply(x).subtract(a)).divide(TWO.multiply(x),
    \n                                                       MathContext.DECIMAL128);\n
    \           x = x.subtract(delta);\n        } while (delta.abs().doubleValue()
    &gt; EPS2);\n        return x;\n    }\n\n    public static void main(String[]
    args) {\n        for (int i = 1; i &lt; 200; i++) {\n            BigDecimal er
    = exp(PI.multiply(sqrt(new BigDecimal(i))));\n            BigDecimal rer = new
    BigDecimal(er.toBigInteger());\n            double a = er.subtract(rer).doubleValue();\n
    \           if (a &lt; 0.0001 || a &gt; 0.9999) {\n                System.out.printf(\"%d:
    %f%n\", i, er);\n            }\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3138'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3138
  :user_name: ocean
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/09/20 17:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  #3130の匿名さんのアイデアを拝借して組みなおしてみたところ、2.6倍早くなりました。\n\t"
  :code: |
    from decimal import *
    import itertools

    def divmod(x, y): # workaround for python2.5 decimal mod bug.
        div = x // y
        mod = x - div * y
        return div, mod

    def decimal_exp(x):
        div, mod = divmod(x, Decimal("2.3025850929940456840179914546844"))
        curr, bunsi, bunbo = Decimal("1.0"), Decimal("1.0"), 1
        for k in itertools.count(1):
            bunsi *= mod
            bunbo *= k
            next = curr + bunsi / bunbo
            if curr == next:
                return (10 ** div) * curr
            curr = next

    def main():
        pi = Decimal("3.141592653589793238462643383279")
        for n in xrange(1, 200):
            x = decimal_exp(pi * Decimal(n).sqrt()) # result
            i = x.quantize(Decimal("1.0"), rounding=ROUND_HALF_UP) # nearest integer
            if (x - i).quantize(Decimal("0.0001"), rounding=ROUND_DOWN) == 0:
                print n, x

    if __name__ == '__main__':
        try:
            import psyco
        except ImportError:
            pass
        else:
            psyco.full()
        main()
  :tags: []
  :references:
    :url: /web/20090221103043/http://bugs.python.org/issue1182?@ok_message=msg%2056056%20created%3Cbr%3Eissue%201182%20created&amp;@template=item
    :title: これを組んでいて、Python2.5のバグを踏んでしまった（汗）
- :id: '3200'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3200
  :user_name: kozima
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/09/30 15:28 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">ext:long-float-digits の存在を知ったので使ってみたくなりまして。</pre>\n\t"
  :code: |
    (setf (ext:long-float-digits) 192)
    (loop
      for x from 1 below 200
      as y = (exp (* pi (sqrt (float x 1L0))))
      if (&lt; (abs (- y (round y))) 1e-4)
      do (format t "~D ~F~%" x y))
  :tags:
  - CLISP
  :references:
    :url: 
    :title: 
- :id: '3246'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3246
  :user_name: matarillo
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/136/
  :language: C
  :time: 2007/10/04 10:53 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">doubleだと桁が足りなかったのでdecimalにした。そのせいでExpやSqrtを自分で書かないといけなかった。</pre>\n\t"
  :code: |
    static void Main(string[] args)
    {
      for (int n = 1; n &lt; 200; n++)
      {
        decimal f = Func(n);
        if (IsAlmostInteger(f, 4))
          Console.WriteLine("{0} {1:f6}", n, f);
      }
      Console.ReadKey();
    }

    static decimal Func(int i)
    {
      return DecimalExpQuick(3.141592653589793238462643383279M * DecimalSqrt((decimal)i));
    }

    static decimal DecimalExpQuick(decimal d)
    {
      int n = 0;
      decimal p = 1.0M;
      decimal t = d;
      do
      {
        n++;
        p *= 2;
        t /= 2;
      }
      while (t &gt;= 0.1M);

      decimal et = DecimalExp(t);
      decimal ex = 1;
      for(int i = 0; i &lt; p; i++)
        ex *= et;
      return ex;
    }

    static decimal DecimalExp(decimal t)
    {
      int i = 0;
      decimal et = 0.0M;
      decimal ai = 1.0M;
      do
      {
        et += ai;
        i++;
        ai = ai * (t / i);
      }
      while (!NearlyEquals(ai, 0.0M));
      return et;
    }

    static decimal DecimalSqrt(decimal d)
    {
      decimal x = 1.0M;
      decimal betterX = 0.0M;
      while(true)
      {
        betterX = SqrtBailey(x, d);
        if (NearlyEquals(x, betterX))
          return betterX;
        x = betterX;
      }
    }

    static decimal SqrtBailey(decimal x, decimal d)
    {
      decimal fx = x * x - d;
      decimal dfx = 2.0M * x;
      return x - (fx / (dfx - (fx / dfx)));
    }

    static bool NearlyEquals(decimal d1, decimal d2)
    {
      int dights = IntDight(d1);
      decimal delta = 1e-28M * (decimal)Math.Pow(10, dights);
      return ((d1 - d2 &lt; delta) &amp;&amp; (d2 - d1 &lt; delta));
    }

    static int IntDight(decimal d)
    {
      if (d &lt; decimal.Zero)
        d = decimal.Negate(d);
      return IntAbsDight(d);
    }

    static int IntAbsDight(decimal d)
    {
      int i = 0;
      while (d &gt;= decimal.One)
      {
        d /= 10.0M;
        i++;
      }
      return i;
    }

    static bool IsAlmostInteger(decimal d, int dights)
    {
      decimal p = (decimal)Math.Pow(10, dights);
      decimal d1 = decimal.Round(d) * p;
      decimal d2 = decimal.Round(d * p);
      return ((d1 - d2 &lt;= 1.0M) &amp;&amp; (d2 - d1 &lt;= 1.0M));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3593'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3593
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/30 09:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Rは倍精度実数しか扱えないのと，nが67のときでも誤差がかなり大きいので，37と58しか拾えない\r\n&gt;
    (1:67)[abs((exp(pi*sqrt(1:67))-round(exp(pi*sqrt(1:67))))) &lt; 0.0001]\r\n[1]
    37 58\r\n</pre>\n\t"
  :code: |
    (1:67)[abs((exp(pi*sqrt(1:67))-round(exp(pi*sqrt(1:67))))) &lt; 0.0001]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3634'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/3634
  :user_name: 匿名
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/4/
  :language: awk
  :time: 2007/10/31 14:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">やはり，awk も倍精度実数までしか使えないから\r\n37 と 58 しか捕まえられないなあ\r\n\r\nawk
    -f p3416.awk\r\n37 : 199148647.99997794628\r\n58 : 24591257751.999965668\r\n</pre>\n\t"
  :code: |
    BEGIN {
        PI = atan2(1,1)*4
        for (n = 1; n &lt; 100; n++) {
            x = exp(PI*sqrt(n))
            if (abs(x-int(x+0.5)) &lt; 0.0001) printf "%i : %.20g\n", n, x
        }
    }

    function abs(x) { return x &lt; 0 ? -x : x }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4544'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/4544
  :user_name: vtwntmtn
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/380/
  :language: D
  :time: 2007/12/01 14:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Digital Mars D Compiler v1.015で動作確認しました。\n#3020の方と同じく163がヒットしない…。</p>\n\n\t"
  :code: |
    import std.stdio;
    import std.math;

    void exp_pi_sqrt(real x)
    {
        real tmp = exp(PI * sqrt(x));
        real err = 0.0001;
        if ((tmp &gt; (nearbyint(tmp) - err)) &amp;&amp; (tmp &lt; (nearbyint(tmp) + err))) {
            writef("%.0f %.4f\n", x, tmp);
        }
    }

    /*
    void main(char[][] args)
    {
        for (int i = 1; i &lt;= 200; ++i) {
            exp_pi_sqrt(i);
        }
    }
    */
  :tags: []
  :references:
    :url: /web/20090221103043/http://www.kmonos.net/alang/d/index.html
    :title: プログラミング言語 D
- :id: '5887'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/5887
  :user_name: ocean
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/177/
  :language: diff
  :time: 2008/02/27 17:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>このバグはPython2.5.2で修正されました。というわけでパッチです。</p>\n\n\t"
  :code: "--- a.py    Thu Feb 28 02:32:31 2008\n+++ a.py    Thu Feb 28 02:32:46 2008\n@@
    -1,10 +1,11 @@\n from decimal import *\n-import itertools\n+import itertools,
    sys\n \n-def divmod(x, y): # workaround for python2.5 decimal mod bug.\n-    div
    = x // y\n-    mod = x - div * y\n-    return div, mod\n+if sys.version_info[:3]
    &lt;= (2, 5, 1):\n+    def divmod(x, y): # workaround for python2.5 decimal mod
    bug.\n+        div = x // y\n+        mod = x - div * y\n+        return div,
    mod\n \n def decimal_exp(x):\n     div, mod = divmod(x, Decimal(\"2.3025850929940456840179914546844\"))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8178'
  :parent_id: '60'
  :url: http://ja.doukaku.org/comment/8178
  :user_name: taninsw
  :user_url: /web/20090221103043/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/15 00:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ただしい結果がかえってこないダメな例として投稿します。誤差の問題でしょうか</p>\n\n\t"
  :code: |
    f = (\n-&gt;exp(pi * sqrt n))
    g = (\x-&gt;0.0001 &gt; (abs $ fromInteger(round x) - x) )
    main = print$filter (g.f) [1..200]

    {-
    [37.0,58.0,117.0,128.0,129.0,130.0,131.0,132.0,133.0,134.0,135.0,136.0,137.0,138.0,139.0,140.0,141.0,142.0,143.0,144.0,145.0,146.0,147.0,148.0,149.0,150.0,151.0,152.0,153.0,154.0,155.0,156.0,157.0,158.0,159.0,160.0,161.0,162.0,163.0,164.0,165.0,166.0,167.0,168.0,169.0,170.0,171.0,172.0,173.0,174.0,175.0,176.0,177.0,178.0,179.0,180.0,181.0,182.0,183.0,184.0,185.0,186.0,187.0,188.0,189.0,190.0,191.0,192.0,193.0,194.0,195.0,196.0,197.0,198.0,199.0,200.0]
    -}
  :tags: []
  :references:
    :url: 
    :title: 
