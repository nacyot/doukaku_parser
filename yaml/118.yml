---
:id: '118'
:title: コマンドライン引数の取得
:comments:
- :id: '4868'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4868
  :user_name: dankogai
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/26/
  :language: 
  :time: 2007/12/18 14:47 GMT
  :vote_count: '16'
  :vote_score: '10'
  :body: "\r\n\t  \n<p>以下にけだし同感なので。\n</p>\n<p><a href=\"/web/20080229110448/http://inforno.net/articles/2007/12/18/i-dont-know-the-doukaku-org-will-be-a-multilingual-cookbook\">inferno
    :: どう書く？orgは多言語クックブックになれるか</a>\n   &gt; 一般投稿が可になった時に、ちょっと感じてたんですがやっぱり最近ある傾向が顕著で。というのは数学パズル系とか、(数学的な、事務処理などではない)アルゴリズム勝負！なお題ばっかりなんですよね。\n</p>\n<p>というわけで、たまには簡単でその場で答えが出て、なによりある言語使いにとって「外国語」ではこういうんだというのがわかる問題として考えてみました。\n</p>\n<p><code>%
    program a b c d</code>\n</p>\n<p>で a, b, c, d を得るにはどうしたらよいかという、それこそネイティブには刺身タンポポより簡単だけど、「外国人」にはとっさに浮かばないという問題です。\n</p>\n<p>Dan
    the Practical Programmer\n</p>\n\n\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4993'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4993
  :user_name: shiro
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/12/27 09:33 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  ナイスお題 as cookbook.\r<br><br>Schemeでは、SRFI-22準拠の処理系の場合、mainという関数の引数としてコマンドライン引数のリストが渡されます。これはプログラム本体の名前 (argv[0]に相当) も含んでいるので、引数だけを取り出すにはcdrをとります。\r<br><br> $ ./program a b c d\r<br> (a b c d)\r<br><br>SRFI-22は主要な処理系でサポートされています。(参考リンク参照)\r<br><br>なお、R6RSにはSRFI-22相当の仕様は規定されていませんが、ライブラリ関数 command-line を呼び出せば同じ情報が取れます。\r<br><br>"
  :code: |
    (define (main args)
      (print (cdr args))
      0)
  :tags: []
  :references:
    :url: /web/20080229110448/http://practical-scheme.net/wiliki/schemexref.cgi?SRFI-22
    :title: SRFI-22
- :id: '4994'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4994
  :user_name: tsuwabuki
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/479/
  :language: Haskell
  :time: 2007/12/27 09:42 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>引数を取得するgetArgsアクションを使います。\ngetArgs :: IO [String]</p>\n<p>Stringのリストが返ってくるので、リストをそのままprintで表示します。</p>\n<p>$
    runhaskell program.hs a b c d\n[\"a\",\"b\",\"c\",\"d\"]</p>\n\n\t"
  :code: |
    import System

    main = getArgs &gt;&gt;= print
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4995'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4995
  :user_name: todogzm
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/550/
  :language: Java
  :time: 2007/12/27 09:44 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Program.class がカレントフォルダにある前提です。\nコマンドラインの呼び出し方はこんな感じ。</p>\n<p>java
    Program a b c d</p>\n<p>結果はこんな感じ。</p>\n<p>print arguments:\na\nb\nc\nd</p>\n\n\t"
  :code: |
    public class Program {

        public static void main(String[] args) {
            System.out.println("print arguments:");
            for (String arg : args) {
                System.out.println(arg);
            }
        }

    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4996'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4996
  :user_name: todogzm
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/550/
  :language: 
  :time: 2007/12/27 09:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ちなみによく言われるtipsですが、main()の引数argsは\n常に非nullです。\nコマンドライン引数が与えられない場合は、長さ0の配列が引数として与えられます。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4997'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4997
  :user_name: dpp
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/433/
  :language: Python
  :time: 2007/12/27 09:52 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">sys.argvでコマンドライン引数をリストの形で取得できます。\r\nsys.argv[0]は直接Pythonに渡した、トップレベルファイル名です。\r\n\r\nなんで引数見るだけなのにインポートが必要なんだろうという気もしますが、現状ではこのようになっています。\r\n\r\n%
    python program.py a b c d\r\n['a', 'b', 'c', 'd']</pre>\n\t"
  :code: |
    import sys

    print sys.argv[1:]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4998'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4998
  :user_name: cho45
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/579/
  :language: Ruby
  :time: 2007/12/27 10:13 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <div class=\"section\">\n<p>$* も同じです。</p>\n</div>\n\t"
  :code: |
    p ARGV #=&gt; ["a", "b", "c", "d"]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4999'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/4999
  :user_name: cho45
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/579/
  :language: Io
  :time: 2007/12/27 10:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <div class=\"section\">\n<p>args に入ってるみたいです。(0 はスクリプト自身)\r</p>\n<p>\r</p>\n<p>Lobby
    はトップレベルのオブジェクト自身です。</p>\n</div>\n\t"
  :code: |
    args slice(1) println #=&gt; list("a", "b", "c", "d")
    Lobby args slice(1) println #=&gt; same
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5000'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5000
  :user_name: cho45
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/579/
  :language: JavaScript
  :time: 2007/12/27 10:24 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Rhino ではトップレベルの arguments という変数に入っています。</p>\n<p>ちなみにこれはちゃんとした Array
    みたいです。</p>\n\n\t"
  :code: |
    print(arguments instanceof Array); //=&gt; true
    print(arguments); //=&gt; a,b,c,d
  :tags:
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '5001'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5001
  :user_name: こう。
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/134/
  :language: C
  :time: 2007/12/27 10:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>argcに引数の個数、argv[n]にn番目の引数が入っています。</p>\n<p>ただし、n=0は実行プログラムです。\nなので、argc-1個の引数が正しいのかな？</p>\n\n\t"
  :code: |
    int main(int argc , char **argv){
    ･･･
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5002'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5002
  :user_name: mc
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2007/12/27 10:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Common Lispでは処理系依存になっていて処理系\r\nごとにそれぞれといった感じです。\r\n処理系の差を吸収しようという試みのパッケージは\r\n幾つかあると思いますが、現在AllegroとSBCLに\r\n対応している、KMRCLを紹介してみます。\r\n\r\n;;
    Lispマシンだったら関数の引数の取得で\r\n;; OKってことになるんでしょうけど…。</pre>\n\t"
  :code: |
    ;; $ sbcl "1" "2" "3" で処理系を起動したとする。
    (require :kmrcl)

    (kmrcl:command-line-arguments)
    ;; =&gt;("sbcl" "1" "2" "3")
  :tags: []
  :references:
    :url: /web/20080229110448/http://www.cliki.net/kmrcl
    :title: Cliki:KMRCL
- :id: '5003'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5003
  :user_name: 匿名
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/12/27 10:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Perl の場合@ARGVに入っています。\r\n$ARGV,ARGV もあって、全然違うので注意が必要です。\r\nshift
    は、引数指名しない場合（メインでは)@ARGVが指定されたとみなされます。</pre>\n\t"
  :code: |
    print shift  while(@ARGV);
  :tags:
  - Perl
  :references:
    :url: 
    :title: 
- :id: '5006'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5006
  :user_name: あにす
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2007/12/27 10:56 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>方法1はcと同じ方法です。自身のパスを含まない引数の配列を取得します。エントリポイントでのみ使えます。\n方法2は自身のパスを含んだ全ての引数を含む文字列を取得します。自分で分割しないとそれぞれの引数を得られません。\n方法3は自身のパスを含んだ引数の配列を取得します。プログラム中どこでも使えます。</p>\n\n\t"
  :code: |
    using System;
    class Program {
        static void Main(string[] args) {
            Console.WriteLine("方法1");
            foreach(string cmd in args) {
                Console.WriteLine(cmd);
            }

            Console.WriteLine("\n方法2");
            Console.WriteLine(System.Environment.CommandLine);

            Console.WriteLine("\n方法3");
            foreach(string cmd in System.Environment.GetCommandLineArgs()) {
                Console.WriteLine(cmd);
            }
            Console.ReadLine();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5007'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5007
  :user_name: ヨシオリ
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/370/
  :language: 
  :time: 2007/12/27 11:08 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">重箱の隅をつついて申し訳ないですが\r\nprintln だと改行されてしまうので\r\nprint
    の方が良いかと思います。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5008'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5008
  :user_name: あにす
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2007/12/27 11:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>方法2、方法3が題意に反するので訂正します。方法2から引数のみを得るのは難しいです。方法3を修正したコードを投稿します。</p>\n\n\t"
  :code: |
    //http://ja.doukaku.org/118/ 投稿用
    using System;
    class Program {
        static void Main(string[] args) {
            for(int i = 1; i &lt; System.Environment.GetCommandLineArgs().Length; i++) {
                Console.WriteLine(System.Environment.GetCommandLineArgs()[i]);
            }
            Console.ReadLine();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5009'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5009
  :user_name: susu
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2007/12/27 11:28 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">引数はSys.argv\r\n引数の長さはArray.length Sys.argvで出します。\r\n詳細なパーズはArgモジュールを使うと良いです。</pre>\n\t"
  :code: "(*引数を見る*)\n  Array.iter (Printf.printf \" %s \") Sys.argv;\n  print_newline();;\n\n(*プログラム名以外の引数*)\n
    \ let array_rest arr n =\n    Array.sub arr n (Array.length arr - n);; \n  array_left
    Sys.argv 1;;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5011'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5011
  :user_name: yuin
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/12/27 11:42 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>Scalaではインタプリタとコンパイル済みでは取得方法が違います。</p>\n\n\t"
  :code: |
    //インタプリタ
    println(args.toList) //argsはArray[String]

    //コンパイルする場合
    object Test {
      def main(args:Array[String]) = {
        println(args.toList)
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5013'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5013
  :user_name: sumim
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/12/27 14:36 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>Smalltalk では処理系依存です。Squeak Smalltalk では、 起動時に</p>\n<p>Squeak my.image
    program.st a b c d</p>\n<p>のように記述し、スクリプト中では SmalltalkImage&gt;&gt;#getSystemAttribute:
    の引数 3 以降で取り出せます。</p>\n\n\t"
  :code: |
    | args |
    World findATranscript: nil.
    args := (3 to: 6) collect: [:idx | SmalltalkImage current getSystemAttribute: idx].
    Transcript cr; show: args

    "=&gt; #('a' 'b' 'c' 'd') "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: /web/20080229110448/http://wiki.squeak.org/squeak/425
    :title: Squeak Swiki - Writing scripts
- :id: '5014'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5014
  :user_name: xsd
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/154/
  :language: Batchfile
  :time: 2007/12/27 14:55 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>バッチファイルではプログラム名が%0に、引数が%1～に入ります。</p>\n<p>shiftコマンドを実行すると、%2が%1に、%3が%2に、...というように順にシフトしていきます。</p>\n\n\t"
  :code: |
    @echo off

    :LOOP
      if "%1"=="" goto END
      echo %1
      shift
      goto LOOP
    :END
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5015'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5015
  :user_name: kkobayashi
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/12/27 15:40 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">Rは対話型インターフェイスが基本なので、コマンドライン引数の取得は\r\n実はあまり「簡単なお仕事」ではないかもしれません。\r\n\r\n起動オプションに
    --args a b c d と指定するとコマンドライン引数として使うことができます。\r\ntrailingOnly=TRUE にしない場合（デフォルト）は全ての起動オプションを取得します。\r\n</pre>\n\t"
  :code: "&gt; commandArgs(trailingOnly=TRUE)\n[1] \"a\" \"b\" \"c\" \"d\"\n\n&gt;
    commandArgs()\n[1] \"(略)\\\\R\\\\bin\\\\Rgui.exe\"\n[2] \"--args\"                                          \n[3]
    \"a\"                                               \n[4] \"b\"                                               \n[5]
    \"c\"                                               \n[6] \"d\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5017'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5017
  :user_name: dankogai
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/12/27 16:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ちなみに<code>ARGV</code>は、<code>@ARGV</code>をすべてファイル名と見なしてオープンした際のファイルハンドル。<code>&lt;&gt;</code>は<code>&lt;ARGV&gt;</code>を略記したものです。\r\n</p>\r\n<p><code>$ARGV</code>は、<code>ARGV</code>をイテレートしている際の実際のファイル名。<code>$.</code>で現在の行数も取れます。\r\n</p>\r\n<p>以下、サンプルプログラムはこの点をデモります。\r\n</p>\r\n<p>詳しくは\r\n</p>\r\n<p><a
    href=\"/web/20080229110448/http://search.cpan.org/perldoc?perlvar\">perldoc perlvar</a>\r\n</p>\r\n<p>で。\r\n</p>\r\n<p>Dan
    the Perl Monger\r\n</p>\r\n\r\n\r\n\n\t"
  :code: "#!/usr/local/bin/perl\r\nuse strict;\r\nuse warnings;\r\n\r\nwhile(my $line
    = &lt;ARGV&gt;){\r\n    printf \"%12s%4d:%s\", $ARGV, $., $line;\r\n}\r\n# 以下のようにして一行にできちゃう!\r\nperl
    -ple '$_=sprintf \"%12s%4d:%s\", $ARGV, $., $_' argv.pl\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5018'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5018
  :user_name: 匿名
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2007/12/27 18:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">既出よりもう少し丁寧なの</pre>\n\t"
  :code: |
    foreach my $arg (@ARGV){
        print "$arg\n";
    }
  :tags:
  - '@ARGV'
  - Perl
  :references:
    :url: 
    :title: 
- :id: '5019'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5019
  :user_name: 匿名
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/12/27 18:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">既出よりもう少し丁寧なの\r\n(間違えてOtherに挙げてしまいました、あちらは削除して下さい)</pre>\n\t"
  :code: |
    foreach my $arg (@ARGV){
        print "$arg\n";
    }
  :tags:
  - '@ARGV'
  - Perl
  :references:
    :url: 
    :title: 
- :id: '5020'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5020
  :user_name: sawat
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/322/
  :language: JavaScript
  :time: 2007/12/28 00:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  思いっきり実装依存。\r<br>Rhinoの場合、トップレベルのargumentsにコマンドライン引数が入ってます。\r<br><br>&gt; java -jar js.jar program.js a b c d\r<br>a\r<br>b\r<br>c\r<br>d\n\t"
  :code: |
    for(var i=0;i&lt;arguments.length;i++) print(arguments[i]);
  :tags:
  - Rhino
  - 既出
  :references:
    :url: 
    :title: 
- :id: '5021'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5021
  :user_name: pooq
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/28 00:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">j言語では、ARGVにコマンドライン全体のboxのリストがはいるようです。\r\n引数だけほしい場合は、3行目のように切り出す必要があります。\r\n先頭行は、コマンドラインの処理には、関係ありません。コンソール版の\r\nbox表示がグラフ文字を使うためか、カタカナに化けて見にくいので。\r\n\r\n&gt;jconsole
    argvtest.ijs a b c d\r\n+--------+------------+-+-+-+-+\r\n|jconsole|argvtest.ijs|a|b|c|d|\r\n+--------+------------+-+-+-+-+\r\n+-+-+-+-+\r\n|a|b|c|d|\r\n+-+-+-+-+\r\n</pre>\n\t"
  :code: |
    (9!:7)'+++++++++|-'
    echo ARGV
    echo 2}.ARGV
    exit ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5022'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5022
  :user_name: shimakuma
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/12/28 00:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>WSHだとこんな感じ。詳しくは →\n<a class=\"reference\" href=\"/web/20080229110448/http://msdn.microsoft.com/library/ja/script56/html/wsobjWshArguments.asp\">こちら</a>\n。</p>\n\n\t"
  :code: |
    a = WSH.arguments;
    WSH.echo(a instanceof Array);
    // =&gt; 0
    WSH.echo(l = a.length);
    // =&gt; 4
    for(i = 0, o = ''; i &lt; l; i++) o += a(i) +' ';
    WSH.echo(o)
    // =&gt; a b c d
    WSH.echo(a);
    // =&gt; Microsoft JScript 実行時エラー: 型が一致しません。
  :tags:
  - WSH
  :references:
    :url: 
    :title: 
- :id: '5023'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5023
  :user_name: shimakuma
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/343/
  :language: Smalltalk
  :time: 2007/12/28 01:17 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>GNU Smalltalk。Cのgetoptっぽい機能が付いてます。</p>\n\n\t"
  :code: |
    Smalltalk arguments print.
    Smalltalk arguments: '-c -d:' do: [:o :n| {o. n} print ]!
    "
    $ gst 114.st -a a b -c -dFuga
    =&gt; ('a' 'b' '-c' '-dFuga' )(nil 'a' )(nil 'b' )($c nil )($d 'Fuga' )
    "
  :tags:
  - GST
  :references:
    :url: 
    :title: 
- :id: '5024'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5024
  :user_name: kozima
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/28 02:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>CLISP の場合は未処理の引数が文字列のリストとして *args* に入っています。</p>\n<p>処理済の引数も含めて欲しい場合は関数
    argv を使うようです。こちらは文字列のベクタを新しく作って返します。</p>\n\n\t"
  :code: |
    (format t "*ARGS* = ~S~%(argv) = ~S" *args* (argv))
  :tags:
  - CLISP
  :references:
    :url: /web/20080229110448/http://clisp.cons.org/impnotes/environment-dict.html#argv
    :title: Implementation notes for GNU CLISP 25.2.15
- :id: '5025'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5025
  :user_name: あにす
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/504/
  :language: VB
  :time: 2007/12/28 02:21 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>VB.NETならMyがお手軽♪</p>\n\n\t"
  :code: |
    Module Module1
        Sub Main( )
            For Each cmd As String In My.Application.CommandLineArgs
                Console.WriteLine(cmd)
            Next
            Console.ReadLine()
        End Sub
    End Module
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5027'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5027
  :user_name: daira
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/468/
  :language: PHP
  :time: 2007/12/28 02:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>phpだとこんな感じですかね。\nコマンドラインから実行することはあまりありませんが。</p>\n<p>実行は以下のようにします。\n$
    php program.php a b c d</p>\n\n\t"
  :code: |
    &lt;?php
    for ($i = 1; $i &lt; count($argv); $i++)
        print "{$argv[$i]}\n";
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5029'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5029
  :user_name: tokibito(nullpobug)
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/252/
  :language: Delphi
  :time: 2007/12/28 06:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">ParamCount関数でパラメータの個数を得られます。\r\nParamStr関数でパラメータ文字列を取得できます。\r\nParamStr(0)には起動したプログラムのパスが入ります。</pre>\n\t"
  :code: |
    program arguments;

    {$APPTYPE CONSOLE}

    var
      i: Integer;
    begin
      for i := 1 to ParamCount do
      begin
        Write(ParamStr(i) + ' ');
      end;
      // =&gt; a b c d
    end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5038'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5038
  :user_name: ？せんたくいた
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2007/12/28 12:08 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">bash では $1,$2,$3,... に収納されます。\r\n引数の数は $# で。\r\nshift
    が効くのも batchfile に近いかな。\r\n</pre>\n\t"
  :code: |
    #!/bin/bash
    until [ "$#" -eq 0 ]; do
        echo "$1"
        shift
    done
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5041'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5041
  :user_name: dpp
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/433/
  :language: D
  :time: 2007/12/28 15:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">C/C++と同じく、main関数の引数として取ることができます。\r\nただし、Dの配列は自身の長さの情報を持っているためargc,
    argvに分けなくてもよくなっています。\r\n\r\n先頭要素にはプログラム自身の名前が入っています。\r\nコマンドライン引数のみを得たい場合はargs[1..length]のようにスライスするとよいです。\r\n\r\n%
    ./program a b c d\r\n./program a b c d </pre>\n\t"
  :code: |
    import std.stdio;

    int main(string[] args){
        foreach(string arg; args){
            writef("%s ", arg);
        }
        writefln();

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5044'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5044
  :user_name: 匿名
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/4/
  :language: PostScript
  :time: 2007/12/29 02:50 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Ghostscript の場合</p>\n<p>$ gs [options] -- filename arg1 ...</p>\n<p>のように起動すると、文字列
    arg1 ... が入った配列が ARGUMENTS という名前で定義されます</p>\n\n\t"
  :code: |
    %!PS
    gsave
    /Times-Roman findfont 16 scalefont setfont
    200 200 moveto

    userdict /ARGUMENTS known{
      ARGUMENTS{
        show
      }forall
    }{
      (no arguments)show
    }ifelse

    showpage
    grestore
  :tags:
  - Ghostscript
  :references:
    :url: /web/20080229110448/http://pages.cs.wisc.edu/~ghost/doc/AFPL/8.00/Use.htm#Input_control
    :title: How to use Ghostscript
- :id: '5045'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5045
  :user_name: omoikani
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/29 05:02 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Standard MLでは、CommandLineストラクチャのarguments関数を使います。\n自分自身の名前を除く引数がリストで返ります。\n自分自身の名前を得るには同ストラクチャのname関数を使います。</p>\n\n\t"
  :code: |
    val name = CommandLine.name ()
    val _ = print name
    val args = CommandLine.arguments ()
    val _ = app print args
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5048'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5048
  :user_name: しらたま
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/607/
  :language: 
  :time: 2007/12/29 15:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">なでしこでは、変数「コマンドライン」にコマンドライン引数が配列形式で格納されます。\r\n0番目には自分自身のファイル名が入ります。\r\n\r\n&gt;vnako
    program.nako a b c d\r\n\r\nとすると、ウィンドウに「a, b, c, d」が表示されます。</pre>\n\t"
  :code: |
    コマンドラインの0を配列削除
    コマンドラインを「, 」で配列結合して表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5150'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5150
  :user_name: vtwntmtn
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2008/01/03 14:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Erlangでは実行時にコマンドラインから実行する関数を指定できます。\nここではprogramモジュールのmain関数を実行し、引数a
    b c dを渡しています。</p>\n<pre class=\"literal-block\">\nerl -noshell -s program main
    a b c d -s init  stop\n</pre>\n<p>関数側はこれらの引数を文字列のリストとして受け取ります。</p>\n\n\t"
  :code: |
    -module(program).
    -export([main/1]).

    main(Arg) -&gt; io:format("~s ~s ~s ~s ~n", Arg).
  :tags:
  - ErlangOTP_R10B-10
  :references:
    :url: 
    :title: 
- :id: '5155'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5155
  :user_name: carver
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/648/
  :language: Other
  :time: 2008/01/04 04:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Mac OS X (PowerPC 32bit) アセンブリで。Mac OS X (PowerPC) のアセンブリでは、関数の引数はレジスタ
    r3-r10 に入ります。あとはmain関数の引数を操作するだけです。</p>\n\n\t"
  :code: "        ;; Mac OS X (PowerPC 32bit)\n        ;; % as -o cmdline.o cmdline.s
    &amp;&amp; gcc cmdline.o -o cmdline\n        .machine ppc\n        .globl _main\n\n_main:\n
    \       ;; r3 = int argc\n        ;; r4 = char *argv[]\n        ;; それぞれ r6, r7
    にコピーしておく\n        mr      r6, r3\n        mr      r7, r4\n\n_print_arg:\n        ;;
    まず、文字列の長さをカウントする\n        lwz     r4, 0(r7)       ; カウント用文字列\n        li      r5,
    0           ; 長さの初期化\n\n_count_strlen:\n        lbz     r0, 0(r4)       ; 1文字レジスタに移す\n
    \       cmpli   cr7, r0, 0\n        beq     cr7, _print_arg_write\n        addi
    \   r4, r4, 1\n        addi    r5, r5, 1\n        b       _count_strlen\n\n_print_arg_write:\n
    \       ;; 引数文字列の表示\n\n        ;; 引数の残数をスタックに退避\n        ;; sys_write() を呼ぶたびに実行\n
    \       subi    r1, r1, 4\n        stw     r6, 0(r1)\n\n        ;; sys_write()\n
    \       ;; r5 は _count_strlen で既に代入済み\n        li      r3, 1           ; 標準出力\n
    \       lwz     r4, 0(r7)       ; 出力する文字列\n        li      r0, 4           ; sys_write\n
    \       sc                      ; 呼び出し\n\n        ;; スタックから引数の残数を復帰\n        lwz
    \    r6, 0(r1)\n        addi    r1, r1, 4\n\n        ;; 引数の残数をスタックに退避\n        subi
    \   r1, r1, 4\n        stw     r6, 0(r1)\n\n        ;; スペースを出力\n        li      r3,
    1           ; 標準出力\n        li      r4, hi16(space)\n        addi    r4, r4, lo16(space)\n
    \       li      r5, 1           ; 出力する文字列の長さ\n        li      r0, 4           ;
    sys_write\n        sc                      ; 呼び出し\n\n        ;; スタックから引数の残数を復帰\n
    \       lwz     r6, 0(r1)\n        addi    r1, r1, 4\n\n        ;; 繰り返しの終了条件判断\n
    \       subi    r6, r6, 1       ; カウント減\n        cmpi    cr7, r6, 0\n        beq
    \    cr7, _end\n        addi    r7, r7, 4       ; 引数文字列のポインタを一つ進める\n        b
    \      _print_arg      ; 次の引数へ\n\n_end:\n        ;; 改行を出力\n        li      r3,
    1           ; 標準出力\n        li      r4, hi16(lf)\n        addi    r4, r4, lo16(lf)\n
    \       li      r5, 1\n        li      r0, 4           ; sys_write\n        sc
    \                     ; 呼び出し\n\n        ;; sys_exit()                                                             \n
    \       li      r3, 0\n        li      r0, 1\n        sc\n\n        .data\n        .align
    \ 2\n\nspace:\n        .asciz  \" \"\n\nlf:\n        .asciz  \"\\n\"\n"
  :tags:
  - Assembly
  - MacOSX
  - PowerPC
  :references:
    :url: 
    :title: 
- :id: '5194'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5194
  :user_name: eller
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/499/
  :language: HSP
  :time: 2008/01/05 12:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>dirinfo関数で取得できます。専用のマクロdir_cmdlineも用意されています。</p>\n\n\t"
  :code: |
    mes dir_cmdline // = mes dirinfo(4)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5206'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5206
  :user_name: GEOJ
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/650/
  :language: sed
  :time: 2008/01/06 07:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">最初の直感でsedでは絶対無理だと思ったのですが、卑怯な技を思いついたので書いて見ました。\r\nGNU拡張とシェル、procファイルシステムの力で無理やり実現しています（互換性の保証無し）。\r\n自己参照するので、ファイル名を固定する必要があります。\r\nこのソースではカレントディレクトリにshowargs.sedという名前で保存して\r\n./showargs.sed
    a b c d\r\nなどと実行します。\r\nカレントディレクトリ以外から実行できるようにするためには--file=の部分を絶対パスに直してください。\r\n</pre>\n\t"
  :code: |
    #!/bin/sed --file=showargs.sed

    s%^.*$%sed -e 's/[[:cntrl:]]/ /g' /proc/$PPID/cmdline%
    e
    s/^.*sed --file=showargs\.sed .*showargs\.sed *//
    s/ *$//
    q
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5241'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5241
  :user_name: 匿名
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/01/08 19:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #include &lt;stdio.h&gt;

    int main(int argc, char* argv[])
    {
        int i;

        for (i = 1; i &lt; argc; i++) {
            printf("%s\n", argv[i]);
        }

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5396'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5396
  :user_name: RC3
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/565/
  :language: Other
  :time: 2008/01/19 10:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">argc - コマンドラインパラメータ数を返す関数\r\nargv - コマンドラインパラメータを返す関数\r\n　※argv(str,
    0) =&gt; (空っぽ)\r\n\r\nC:/&gt;ge2exe para.g\r\nC:/&gt;para.exe a b c d\r\n1 = a\r\n2
    = b\r\n3 = c\r\n4 = d\r\nC:/&gt;</pre>\n\t"
  :code: "func main&lt;main&gt;\n{\n    uint i\n    str stemp\n\n    fornum i = 1,
    argc() + 1 \n    { \n        print( \"\\(i) = \\(argv( stemp, i ))\\n\") \n    }
    \n}\n"
  :tags:
  - Gentee
  :references:
    :url: /web/20080229110448/http://gentee.com/phpbb/viewtopic.php?t=553&amp;highlight=parameter
    :title: 'gentee.com :: View topic - Pass Parameters on Command Line'
- :id: '5397'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5397
  :user_name: RC3
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/565/
  :language: Lua
  :time: 2008/01/19 10:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">-コマンドライン引数はargという名前のグローバルなテーブルに格納される。\r\n-スクリプト名がインデックス0に格納される。\r\n-最初の引数がスクリプト名の後のインデックス1に格納され、以下同様。\r\n-フィールドnはスクリプト名の後の引数の数を持つ。\r\n-スクリプト名の前のすべての引数(インタプリタ名やオプション)は負のインデックスに割り当てられる。\r\n\r\nC:\\&gt;lua
    para.lua a b c d\r\n[-1] = lua\r\n[0] = para.lua\r\n[1] = a\r\n[2] = b\r\n[3]
    = c\r\n[4] = d\r\nC:\\&gt;</pre>\n\t"
  :code: |
    for i = -1, arg.n do
        print("[" .. i .. "] = " .. arg[i])
    end
  :tags: []
  :references:
    :url: /web/20080229110448/http://uri.sakura.ne.jp/~cosmic/yuno/lab/lua5_manual_ja.html#6
    :title: 'Lua: 5.0 リファレンスマニュアル／6 - スタンドアロンのLua'
- :id: '5440'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5440
  :user_name: queck
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/01/24 03:45 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>Factor では \"-\" 以外で始まる引数はファイル名とみなされてしまいます。\"-引数名=値\" という形式で渡す必要があります。引数名がそのままグローバル変数名になるので
    get で取得します。\n</p>\n<p>factor-nt.exe -script arg.factor -arg1=a -arg2=b -arg3=c
    -arg4=d\n</p>\n\n\n\n\t"
  :code: |
    USING: command-line prettyprint namespaces ;
    "arg1" get .
    "arg2" get .
    "arg3" get .
    "arg4" get .
  :tags:
  - Factor
  :references:
    :url: 
    :title: 
- :id: '5847'
  :parent_id: '118'
  :url: http://ja.doukaku.org/comment/5847
  :user_name: takuya_1st
  :user_url: /web/20080229110448/http://ja.doukaku.org/user/725/
  :language: PHP
  :time: 2008/02/26 02:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>$argv[0] には実行中のファイル名が登録されるので、お題の回答としては先頭をはずすべきかも</p>\n\n\t"
  :code: |
    &lt;?php

    array_shift($argv);
    print_r($argv);
  :tags: []
  :references:
    :url: /web/20080229110448/http://jp.php.net/manual/ja/features.commandline.php
    :title: PHP をコマンドラインから使用する
