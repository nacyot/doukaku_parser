---
:id: '10'
:title: 条件を満たす行を取り除く
:comments:
- :id: '3366'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/3366
  :user_name: にしお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/06 06:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ファイルから1行ずつ読み込み、\"#\"で始まる行だけを取り除いてファイルに出力するコードを書いてください。\r\n<p>\r\nサンプル入力\r\n</p>\n<pre>\r\nhello!\r\n#
    remove this\r\n # don't remove this\r\nbye!\r\n</pre>\r\nサンプル出力\r\n<pre>\r\nhello!\r\n
    # don't remove this\r\nbye!\r\n</pre>\r\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '477'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/477
  :user_name: ocean
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/07/10 11:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  何気にwith文。多分Python2.5以降限定。\r\n\t"
  :code: |
    from __future__ import with_statement
    import sys

    def convert(input, output):
        with open(output, "w") as io:
            for line in open(input):
                if not line.startswith("#"):
                    io.write(line)

    if __name__ == '__main__':
        convert(sys.argv[1], sys.argv[2])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '293'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/293
  :user_name: takano32
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/148/
  :language: Ruby
  :time: 2007/07/07 04:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  考え方は同じですが，Rubyっぽくなるように心がけてみました\r\n\t"
  :code: "ARGF.read.each_line do |line|\n\tputs line unless line.index('#') == 0\nend\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '519'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/519
  :user_name: satoru.net
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/207/
  :language: Perl
  :time: 2007/07/11 02:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: "my $tmp = &lt;&lt;\"EOM\";\nhello!\n# remove this\n # don't remove this\nbye!\nEOM\n\nopen(OUT,\"&gt;output\");\n\nfor(grep
    {!/^#/} split /\\n/,$tmp){\n\tprint OUT \"$_\\n\"\n}\nclose(OUT);\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6440'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/6440
  :user_name: lemonade
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/549/
  :language: C
  :time: 2008/06/05 03:03 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    using System.IO;
    using System.Linq;

    class Program
    {
        static void Main()
        {
            var lines =
                from s in File.ReadAllLines("infile.txt")
                where !s.StartsWith("#")
                select s;

            File.WriteAllLines("outfile.txt", lines.ToArray());
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '820'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/820
  :user_name: rubikitch
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/07/14 05:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    (defun remove-comments ()
      (goto-char (point-min))
      (while (re-search-forward "^#" nil t)
        (delete-region (point-at-bol) (1+ (point-at-eol)))))

    (defun test ()
      (save-excursion
        (set-buffer (find-file-noselect "10.input"))
        (remove-comments)
        (write-file "10.output")))
    (test)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '250'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/250
  :user_name: noeta
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/60/
  :language: PHP
  :time: 2007/07/06 11:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">PHP4以下なら普通にfopenとかで</pre>\r\n\t"
  :code: |
    &lt;?php
    function removeComment($infile, $outfile, $startwith ='#') {
        $r = "";
        foreach(file($infile) as $line) {
            if (strncmp($line, $startwith, strlen($startwith))) {
                $r .= $line;
            }
        }
        file_put_contents($outfile, $r);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '316'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/316
  :user_name: niha
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/160/
  :language: 
  :time: 2007/07/07 12:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  出力しなよ！\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '224'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/224
  :user_name: mattn
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/52/
  :language: Vim
  :time: 2007/07/06 07:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  実行するとfile.txtは書き換わってしまうので注意\r\n\t"
  :code: |
    vim -c "%g/^#/d _|wq" file.txt
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '225'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/225
  :user_name: gan2
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/142/
  :language: Ruby
  :time: 2007/07/06 07:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ワンライナーです。\r\n\t"
  :code: |
    ruby -pe "next if /^#/"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '505'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/505
  :user_name: ocean
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/07/10 17:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  何の変哲もないですが・・・\r\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;fstream&gt;

    void convert(const char* input, const char* output)
    {
        std::ifstream fin(input);

        if (fin)
        {
            std::ofstream fout(output);

            std::string s;

            while (std::getline(fin, s))
            {
                if (s.empty() || s[0] != '#')
                {
                    fout &lt;&lt; s &lt;&lt; std::endl;
                }
            }
        }
    }

    int main(int argc, char* argv[])
    {
        if (argc != 3)
        {
            std::cerr &lt;&lt; "usage: input output" &lt;&lt; std::endl;

            return -1;
        }

        convert(argv[1], argv[2]);

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '863'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/863
  :user_name: rubikitch
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/105/
  :language: D
  :time: 2007/07/14 18:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    module doukaku;
    private import std.stream;
    void remove_comments(BufferedFile in_f, BufferedFile out_f) {
        foreach(char[] line; in_f) {
            if (line[0] != '#')
                out_f.writeLine(line);
        }
    }

    void main() {
        BufferedFile in_f = new BufferedFile("10.input", FileMode.In);
        BufferedFile out_f = new BufferedFile("10.output", FileMode.OutNew);
        remove_comments(in_f, out_f);
        in_f.close();
        out_f.close();
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '324'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/324
  :user_name: ultraist
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/17/
  :language: awk
  :time: 2007/07/07 19:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  コピペミス\r\n\t"
  :code: |
    !/^#/ {print}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1377'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1377
  :user_name: PoohKid
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/180/
  :language: C
  :time: 2007/07/24 05:40 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">usingは多段重ねできるんですね（＾＾；\r\nhttp://www.divakk.co.jp/aoyagi/csharp_tips_using.html\r\n</pre>\r\n\t"
  :code: |
    using System;
    using System.Collections.Generic;
    using System.Text;

    namespace FileIO
    {
        class Program
        {
            static void Main(string[] args)
            {
                FileIO("sample_in.txt", "sample_out.txt");
            }

            static void FileIO(string fnameIn, string fnameOut)
            {
                using (System.IO.StreamWriter sw = new System.IO.StreamWriter(fnameOut,false,System.Text.Encoding.Default))
                using (System.IO.StreamReader sr = new System.IO.StreamReader(fnameIn, System.Text.Encoding.Default))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        if (!line.StartsWith("#"))
                        {
                            sw.WriteLine(line);
                        }
                    }
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '515'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/515
  :user_name: Kiske
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/202/
  :language: PHP
  :time: 2007/07/11 01:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">stream_get_lineバージョン</pre>\r\n\t"
  :code: |
    &lt;?php

    $handle = fopen("odai10.txt", "r");
    while(!feof($handle))
    {
        $buffer = stream_get_line($handle, 4096, "\n");
        if(strpos($buffer, "#") !== 0 )
        {
            $array[] = $buffer;
        }
    }
    fclose($handle);
    file_put_contents("odai10.txt", implode("\n", $array));
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1338'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1338
  :user_name: JDO
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/22 06:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  細かい点ですが、問題に与えられた条件では「ファイルから1行ずつ読み込み」とありますよね。この「読み込み」の部分に引っかりを感じました。AWK
    に限ったことではありませんが、ワンライナーの場合、そもそも「読み込み」の部分が記述されいなことになります。ワンライナーの場合は「読み込み」ではなく、「処理」が1行ずつされることが保証されているだけですよね。。。。(っと、自分の出した投稿に対して、後から突っ込みいれたりして。。。)\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1662'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1662
  :user_name: ether
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/96/
  :language: PowerShell
  :time: 2007/08/01 15:35 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    gc $args[0] | where {$_ -notmatch "^#"}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '220'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/220
  :user_name: kabukiage
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/139/
  :language: Perl
  :time: 2007/07/06 06:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    print grep!/^#/,&lt;&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '364'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/364
  :user_name: ところてん
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/07/08 23:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  正規表現でやろうとしたけど、うまくいかなかった。\r\n行頭を拾うのってどうすればいいんだっけ？\r\n\t"
  :code: |
    # -*- coding: utf-8 -*-

    infile = open("intext.txt", "r")
    s = infile.read()
    infile.close()

    outfile = open("outtext.txt", "w")

    for x in s.splitlines():
        if x[0] != "#":
            outfile.write(x + "\n")

    outfile.close()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '727'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/727
  :user_name: talo
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/237/
  :language: Java
  :time: 2007/07/13 06:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Javaでファイル入出力ってあんまりやったことなかったなぁ。めんどくさそうなイメージがあったから。\r\nやってみるとやっぱりｍ（ｒｙ</pre>\r\n\t"
  :code: |
    import java.io.BufferedReader;
    import java.io.FileReader;
    import java.io.FileWriter;

    public class ExcludeComment {
        public static void main(String[] args) throws Exception {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            FileWriter fw = new FileWriter("result");
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.startsWith("#")) {
                    fw.write(line + "\n");
                }
            }
            br.close();
            fw.close();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3737'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/3737
  :user_name: fujidig
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/06 15:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |2
        call RemoveComment "test.txt";
        endmacro;

    RemoveComment:
        openfile "/h " + $$1;
        ##line = 1;
        while( ##line &lt;= linecount2 ) {
            movetolineno 1, ##line;
            if ( code == '#' ) {
                selectline;
                delete;
            } else {
                ##line = ##line + 1;
            }
        }
        save;
        exit;
        return;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '602'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/602
  :user_name: sumim
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/12 01:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Squeak Smalltalk で手続き的に。</pre>\r\n\t"
  :code: |
    | file out |
    file := FileStream fileNamed: 'test.txt'.
    out := FileStream newFileNamed: 'out.txt'.
    [file atEnd] whileFalse: [
       | line |
       line := file nextLine.
       line first == $# ifFalse: [
          out nextPutAll: line.
          file peekLast == Character cr ifTrue: [out cr]]].
    file close.
    out edit
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '777'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/777
  :user_name: yuin
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/13 17:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    import scala.io.Source
    import java.io._
    val i = new BufferedWriter(new FileWriter(args(1)))
    i.write(Source.fromFile(args(0)).getLines.filter(!_.startsWith("#")).mkString(""))
    i.close
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '315'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/315
  :user_name: niha
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/160/
  :language: Ruby
  :time: 2007/07/07 12:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  コマンドラインオプションなしで\r\n\t"
  :code: |
    gets$9;gsub /^#.+$/,""
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '679'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/679
  :user_name: ether
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/96/
  :language: 
  :time: 2007/07/12 16:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ああ、タグを \"XSLT 2.0\" とすると2つのタグになってしまうのか…。 \r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1026'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1026
  :user_name: TGBT
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/167/
  :language: Python
  :time: 2007/07/17 07:18 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  行頭は^。\r\n\r\n処理の中身を想像すると、正規表現内で否定を拾うより、ifの否定でやったほうが効率が良い気がする。\r\n\t"
  :code: |
    # -*- coding: utf-8 -*-
    import re

    infile = open("intext.txt", "r")
    s = infile.read()
    infile.close()

    outfile = open("outtext.txt", "w")

    for x in s.splitlines():
        if re.compile("^[^#]").search(x):
            outfile.write(x + "\n")

    outfile.close()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1064'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1064
  :user_name: mjy
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/94/
  :language: Bash
  :time: 2007/07/18 12:19 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t   read は引数を指定しない場合、末尾の改行文字のみを削除します。\r\n「先頭の空白」が無視されるのは、 引数の渡し方によるのではないでしょうか。\r\n単語分割のさいに空白は、なくなります。\r\necho
    ”$LINE”  のように、クォートしてみてください。\r\n\t"
  :code: "#! /bin/bash\nfunction echo_if_not_comment(){\n    [ \"${1:0:1}\" != '#'
    ] &amp;&amp; echo -n \"$1\"\n}\nwhile read -r; do\n    if [ -z \"$REPLY\" ]; then\n
    \       echo\n    else \n        echo_if_not_comment \"$REPLY\"$'\\n'\n    fi\ndone\necho_if_not_comment
    \"$REPLY\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5931'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/5931
  :user_name: zubenalt
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/747/
  :language: Other
  :time: 2008/03/04 12:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Adaで適当に\r\n\t"
  :code: |
    with Ada.Text_Io;
    procedure Exclude is
       Line:String:=Ada.Text_Io.Get_Line;
    begin
       if Line(Line'First)/='#' then
          Ada.Text_Io.Put_Line(Line);
       end if;
       Exclude;
    exception
       when Ada.Text_Io.End_Error=&gt;return;
    end Exclude;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '758'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/758
  :user_name: ココサブ
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/24/
  :language: Bash
  :time: 2007/07/13 13:50 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">シェルスクリプトで頑張ろうと思ったけど、入力で先頭の空白を無視しない方法が分からなくて断念。\r\n\r\nread
    LINE\r\nで\r\n # don't\r\nを入力すると\r\nLINEに\"# don't\"と入るみたい。\r\n\r\n可能だったら、\r\necho
    $LINE | grep -v \"^#\"みたいにしたかった。</pre>\r\n\t"
  :code: |
    grep -v "^#"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '359'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/359
  :user_name: ytakenaka
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2007/07/08 18:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  使用例: (erase-commen-out-line 入力ファイル 出力ファイル)\r\n\t"
  :code: "(defun erase-comment-out-line (infile outfile)\n  (with-open-file (in infile
    :direction :input)\n    (with-open-file (out outfile :direction :output\n\t\t\t\t\t
    \   :if-exists :supersede)\n      (do ((line (read-line in nil 'eof)\n\t\t (read-line
    in nil 'eof)))\n\t  ((eql line 'eof) 'Done)\n\t(unless (equal (schar line 0) #\\#)\n\t
    \ (write-line line out))))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8189'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/8189
  :user_name: taninsw
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/16 00:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>最初に書いたコードが\n空白行があるとバグる事に気がついて\nあせりながら条件を加えました</p>\n\r\n\t"
  :code: |
    main=let f[]=True;f(x:_)=x/='#'in do readFile"doukaku10.txt"&gt;&gt;=writeFile "doukaku10.out".unlines.filter f.lines
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '327'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/327
  :user_name: shiro
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/07/08 00:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  この発想はなかった。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1097'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1097
  :user_name: にしお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/07/19 12:07 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">なんでマイナス評価付いてるんだろう～\r\nと思ったけど、プラス評価するほどでもないので評価はスルーで。\r\n\r\n・readしてsplitしなくてもfileオブジェクトはイテレータ\r\n・正規表現のコンパイルは重い処理なのでループの外へ\r\n\r\n頭にシャープがあるかないかだけだから\r\n正規表現を使うまでもない気もするけれど。</pre>\r\n\t"
  :code: |
    import re

    infile = file("tmp.txt")
    outfile = file("tmpout.txt", "w")
    pat = re.compile("^[^#]")

    for line in infile:
        if pat.match(line):
            outfile.write(line)

    infile.close()
    outfile.close()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1159'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1159
  :user_name: katsu
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/20 09:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  とりあえず、ライブラリを使わずに。\r\n\t"
  :code: |
    lineLoop:-peek_char(end_of_file).
    lineLoop:- line(B),(B=['#'|_]-&gt;write('');string_to_list(Str,B),write(Str)),lineLoop.

    line([]):-peek_char(end_of_file).
    line(['\n']):-peek_char('\n'),get_char(_).
    line([C|Cs]):-get_char(C),line(Cs).

    :- prompt(_,''),lineLoop, halt.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1336'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1336
  :user_name: JDO
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/22 06:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  細かい点ですが、問題に与えられた条件では「ファイルから1行ずつ読み込み」とありますよね。この「読み込み」の部分に引っかりを感じました。Vimに限ったことではありませんが、ワンライナーの場合、そもそも「読み込み」の部分が記述されいなことになります。ワンライナーの場合は「読み込み」ではなく、「処理」が1行ずつされることが保証されているだけですよね。。。。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '416'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/416
  :user_name: gm300
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/174/
  :language: sed
  :time: 2007/07/10 01:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">grep はないの?\r\ngrep -v '^#' のほうが美しいと思うけど。
    </pre>\r\n\t"
  :code: |
    sed '/^#/d' file &gt;file2
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '563'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/563
  :user_name: PoohKid
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/180/
  :language: C
  :time: 2007/07/11 12:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">たこのお題の趣旨は「ファイルハンドルの扱い」Ã\x97２だと思うので忠実にやってみました。\r\n\r\nC#なのでCloseはusingに任せるが吉♪\r\nただしハンドルが２つの場合にこの書き方で良いのか不安（＾＾；\r\nむしろ他の言語でusingの代わりにどう実装するのか見てみたいです。\r\n（たぶんJavaならfinallyだと思うけど…）\r\n\r\n正規表現は趣旨でないと思ったので割愛ッ！\r\n\r\n注意：このコードを試すときは実行ディレクトリにファイルを用意するかフルパスを指定して下さい。</pre>\r\n\t"
  :code: |
    using System;
    using System.Collections.Generic;
    using System.Text;

    namespace FileIO
    {
        class Program
        {
            static void Main(string[] args)
            {
                FileIO("sample_in.txt", "sample_out.txt");
            }

            static void FileIO(string fnameIn, string fnameOut)
            {
                using (System.IO.StreamWriter sw = new System.IO.StreamWriter(fnameOut,false,System.Text.Encoding.Default))
                {
                    using (System.IO.StreamReader sr = new System.IO.StreamReader(fnameIn, System.Text.Encoding.Default))
                    {
                        string line;
                        while ((line = sr.ReadLine()) != null)
                        {
                            if (! line.StartsWith("#"))
                            {
                                sw.WriteLine(line);
                            }
                        }
                    }
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1333'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1333
  :user_name: JDO
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/257/
  :language: awk
  :time: 2007/07/22 06:01 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  {print} なしでもいけるはず。。。\r\n\t"
  :code: |
    awk '!/^#/'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4955'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/4955
  :user_name: pooq
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/606/
  :language: Batchfile
  :time: 2007/12/25 01:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">grepみたいなコマンドがあったので、使ってみました。\r\nrmv_line input.txt
    &gt; output.txt\r\n</pre>\r\n\t"
  :code: |
    @findstr /v "^#" %1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '219'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/219
  :user_name: kawauchi
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/14/
  :language: Ruby
  :time: 2007/07/06 06:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    while ARGF.gets
      puts $_ unless $_[0] == ?#
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '676'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/676
  :user_name: ether
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/96/
  :language: XSLT
  :time: 2007/07/12 16:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  XSLT 2.0 でしか動きません。input パラメタに入力ファイル名を与えます。\r\n\r\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
    &lt;xsl:output method="text" /&gt;
    &lt;xsl:param name="input" /&gt;

    &lt;xsl:template match="/"&gt;
      &lt;xsl:for-each select="tokenize(unparsed-text($input), '\r?\n')"&gt;
        &lt;xsl:if test="not(starts-with(., '#'))"&gt;
          &lt;xsl:value-of select="."/&gt;&lt;xsl:text&gt;&amp;#xa;&lt;/xsl:text&gt;
        &lt;/xsl:if&gt;
      &lt;/xsl:for-each&gt;
    &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '357'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/357
  :user_name: Yorutrain
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/165/
  :language: PHP
  :time: 2007/07/08 16:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">これはひどい</pre>\r\n\t"
  :code: "&lt;?php\n$handle = fopen('hoge.txt','r');\nwhile(!feof($handle)){\n\t$buffer
    = fgets($handle);\n\tif(substr($buffer,0,1) != '#'){\n\t\t$array[] = $buffer;\n\t}\n}\nfclose($handle);\nfile_put_contents('hoge.txt',$array)\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '565'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/565
  :user_name: sybian
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/217/
  :language: PHP
  :time: 2007/07/11 12:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">とにかく短く書いてみた。\r\n\r\n&gt;php sample.php src.txt
    dest.txt</pre>\r\n\t"
  :code: |
    &lt;?php
    foreach(file($argv[1]) as $l)if(strpos($l,"#") !== 0)$r[]=$l;
    file_put_contents($argv[2],implode("",$r));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5448'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/5448
  :user_name: queck
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/01/24 16:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Factor です。</p>\n<p>\"in.txt\" \"out.txt\" remove-#-line</p>\n\r\n\t"
  :code: |
    USING: kernel io io.files io.streams.lines sequences ;

    : drop/write ( outstream line -- outstream )
        dup "#" head?
        [ drop ]
        [ over stream-print ]
        if ;

    : (remove-#-line) ( outstream -- outstream )
        [ readln dup ]
        [ drop/write ]
        [ drop ]
        while ;

    : remove-#-line ( in-file out-file -- )
        &lt;file-writer&gt; swap &lt;file-reader&gt; &lt;line-reader&gt;
        [ (remove-#-line) stream-close ] with-stream ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6505'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/6505
  :user_name: genzou
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/15 00:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    def inputfile = new File("c:/in.txt")
    def outputfile = new File("c:/out.txt")

    def buffer = []
    inputfile.eachLine{
        if( !(it ==~ /^\s*#.*/) )
            buffer &lt;&lt; it
    }

    outputfile.write( buffer.join("\n") )
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '221'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/221
  :user_name: jmuk
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/19/
  :language: Ruby
  :time: 2007/07/06 06:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ワンライナーで\r\n\t"
  :code: |
    % ruby -ne 'puts $_ unless $_ =~ /^#/'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '232'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/232
  :user_name: id:nekoruri
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/111/
  :language: C
  :time: 2007/07/06 08:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  久々にC言語。エラー処理をたくさん書かないといけなかったのがC言語なんだよな。Perlはor dieですむから困る。\r\n\r\n……すんません、ろくに例外処理してません。\r\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    #define MAXLENGTH 80

    int main( int argc, char *argv[] )
    {
            FILE *fh_input;
            FILE *fh_output;

            char line[MAXLENGTH];

            if ( argc != 3 ) {
                    printf( "%s &lt;input&gt; &lt;output&gt;\n", argv[0] );
                    exit(1);
            }

            fh_input = fopen( argv[1], "r" );
            if( fh_input == NULL ) {
                    printf( "%s: file open error!\n", argv[1] );
                    exit(1);
            }

            fh_output = fopen( argv[2], "w" );
            if( fh_output == NULL ) {
                    printf( "%s: file open error!\n", argv[2] );
                    exit(1);
            }

            while( fgets( line, MAXLENGTH, fh_input ) != NULL ) {
                    if( line[0] != '#' ) {
                            fputs( line, fh_output );
                    }
            }

            fclose( fh_output );
            fclose( fh_input );

            exit(0);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '412'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/412
  :user_name: cats
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/07/10 00:01 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    using System;
    class Program
    {
      static void Main()
      {
        string s;
        while ((s = Console.ReadLine()) != null)
          if (!s.StartsWith("#")) Console.WriteLine(s);
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2410'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/2410
  :user_name: omoikani
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/08/22 15:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">手続き型で。</pre>\r\n\t"
  :code: |
    fun rm_comment_line (rf::wf::[]) =
      let
        open TextIO

        val r = openIn rf
        val w = openOut wf

        fun rm_comment_line' NONE = (closeIn r; closeOut w)
          | rm_comment_line' (SOME x) = (
          if String.isPrefix "#" x then () else output (w, x);
          rm_comment_line' (inputLine r)
          )
      in
        rm_comment_line' (inputLine r)
      end
      | rm_comment_line _ = ();

    rm_comment_line (CommandLine.arguments ())
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '226'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/226
  :user_name: yuin
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/07/06 07:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    import fileinput
    map(open("out.txt", "w").write, filter(lambda v: not v.startswith("#"), fileinput.input()))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '438'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/438
  :user_name: にしお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/10 05:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">grepが言語なのかどうかが怪しいですよね\r\n(sedが言語なのかどうかもかなり怪しいですけど、\r\nsedスクリプトの存在とチューリング完全であるところから、\r\nまぁ、言語に位置づけてもよいかな、と。)\r\n\r\n言語一覧にない言語は「Other」を選んで\r\nタグで「grep」などとつけて投稿してもOKですよ\r\nこの場合は言語「Bash」を選ぶという手もあるかと思いますが。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1090'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1090
  :user_name: ココサブ
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/24/
  :language: Bash
  :time: 2007/07/19 02:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">アドバイスありがとうございます。\r\n問題は\r\n read LINE\r\nとやっていた事みたいです。</pre>\r\n\t"
  :code: |
    #!/bin/bash

    # 失敗したパターン
    # read LINE
    # echo "$LINE" | grep -v "^#"

    while read -r; do
        echo "$REPLY" | grep -v "^#"
    done
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1098'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1098
  :user_name: にしお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/07/19 12:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">ゆるせるワンライナー。\r\n・ジェネレーター内包表現でコメント行を捨てる\r\n・ファイルを変数に代入しないのでcloseはGC時に自動的に</pre>\r\n\t"
  :code: |
    file("tmpout.txt", "w").write(
        "".join(
            line
            for line in file("tmp.txt")
            if line[0] != "#"))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3126'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/3126
  :user_name: touchez_du_bois
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/432/
  :language: Groovy
  :time: 2007/09/20 09:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">1.1-beta-2で動作確認しました。\r\n&gt; groovy script
    filename\r\nという感じで動作します。\r\n引数チェックやクローズ処理はしてません。手抜きです。\r\n</pre>\r\n\t"
  :code: |
    new File( args[0] ).eachLine( ) {
        if ( it[0] != '#' ) {
            println it
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5400'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/5400
  :user_name: susu
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/01/19 14:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>改行入りのinput_lineも欲しいなぁ。</p>\n\r\n\t"
  :code: "let rm_line ?(c='#') fname =\n  let rec loop r w =\n    try\n      let l
    = input_line r ^ \"\\n\" in\n      if (l.[0] &lt;&gt; c) then (output_string w
    l);\n      loop r w\n    with err -&gt; \n      close_in r; close_out w;\n      if
    err = End_of_file\n      then Sys.rename (fname^\".tmp\") fname;\n  in loop (open_in
    fname) (open_out (fname^\".tmp\"));;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '323'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/323
  :user_name: ultraist
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/17/
  :language: awk
  :time: 2007/07/07 19:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  awk '!/^#/ {print}' ./data.txt &gt; ./data2.txt\r\n\t"
  :code: |
    !/^[^#]/ {print;}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4630'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/4630
  :user_name: ocaml-nagoya
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/514/
  :language: OCaml
  :time: 2007/12/05 15:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>再帰関数で書いてみました。</p>\n\r\n\t"
  :code: "let rec work (file,str) =\n  let line =\n    try \n      Some (input_line
    file)\n    with\n      _ -&gt; None\n  in  match line with\n        None -&gt;
    str\n      | Some line -&gt; work (file,str^(if ((String.get line 0) = '#') then
    \"\" else line^\"\\n\"));;\n\nlet in_file = open_in \"./hellow.txt\";;\nlet out_file
    = open_out \"./newhellow.txt\";;\noutput_string out_file (work (in_file,\"\"));;\nclose_in
    in_file;;\nclose_out out_file;;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1335'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1335
  :user_name: JDO
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/257/
  :language: Perl
  :time: 2007/07/22 06:41 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  Perl です。ちょっとひねくれてますけど、一応、問題の条件を満たしています。行の\"処理\"は1行ずつではありませんが、読み込みは、与えられた条件どおり、1行ずつです。読み込みの仕方についての条件がなくなれば、もっと効率的にできますよね。。。。\r\n\t"
  :code: |
    while (&lt;&gt;) {$buffer .= $_ } ;
    $buffer =~ s/([\A\n])#[^\n]*[\n\Z]/$1/g ;
    print $buffer ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '906'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/906
  :user_name: すがまさお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/248/
  :language: Ruby
  :time: 2007/07/15 08:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">ファイル名とか決め打ちだけど・・・</pre>\r\n\t"
  :code: "File.open('test.txt', 'r') do |file| \n  file.each do |line|\n    puts line
    unless line =~ /^#/\n  end\nend\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1065'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1065
  :user_name: mjy
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/94/
  :language: 
  :time: 2007/07/18 12:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  上の投稿は、 http://ja.doukaku.org/comment/758/ へのコメントとして書いたつもりだったのですが、独立した投稿になってしまったようですね。失礼しました。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '231'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/231
  :user_name: あっき
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/131/
  :language: Java
  :time: 2007/07/06 08:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Script系はさすがに短いなぁ…\r\ncloseしてないけどreaderだから許して？</pre>\r\n\t"
  :code: "import java.io.*;\n\npublic class RemoveLine {\n\tpublic static void main(String
    args[]) {\n\t\tif (args.length &lt; 1) return;\n\t\t\n\t\ttry {\n\t\t\tBufferedReader
    reader = new BufferedReader(new FileReader(args[0]));\n\t\t\tString line = reader.readLine();\n\t\t\twhile
    (line != null) {\n\t\t\t\tif (!line.startsWith(\"#\"))\n\t\t\t\t\tSystem.out.println(line);\n\t\t\t\tline
    = reader.readLine();\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tex.printStackTrace();\n\t\t}\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1794'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1794
  :user_name: 匿名
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/08/03 15:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">最もシンプルに書くならこう。</pre>\r\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;string&gt;

    int main(int,char**)
    {
      std::string line;
      while(std::getline(std::cin,line))
        if(line.empty() || line[0]!='#')
          std::cout &lt;&lt; line &lt;&lt; std::endl;
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1930'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1930
  :user_name: jz5
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/06 11:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">1行ずつ読み込みということなのでReadLineを使用してます。ただ、まとめて読み込んでも短くはならないと思うけど。\r\nUsingステートメントも使用できるけど、例外処理いれることを考えたらTryだけ使うほうがいいよね？</pre>\r\n\t"
  :code: |
    Public Sub FilterFile(ByVal input As String, ByVal output As String)

        Dim sr As StreamReader = Nothing
        Dim sw As StreamWriter = Nothing

        Try
            sr = New StreamReader(input)
            sw = New StreamWriter(output)

            Do While sr.Peek &lt;&gt; -1
                Dim line As String = sr.ReadLine
                If Not line.StartsWith("#") Then
                    sw.WriteLine(line)
                End If
            Loop

        Catch ex As Exception

        Finally
            If Not sr Is Nothing Then
                sr.Close()
            End If
            If Not sw Is Nothing Then
                sw.Close()
            End If
        End Try

    End Sub
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '509'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/509
  :user_name: ocean
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/07/10 19:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  前投稿したのがあまり面白くなかったので、自前で行分解するイテレータを作ってSTLしてみました。（行数かさばってすみません（汗））\r\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;fstream&gt;
    #include &lt;string&gt;
    #include &lt;algorithm&gt;
    #include &lt;iterator&gt;
    #include &lt;functional&gt;

    class line_iterator : public std::iterator&lt;std::input_iterator_tag, std::string&gt;
    {
        std::istream* _in;
        std::string _line;

        void getline()
        {
            if (_in &amp;&amp; !std::getline(*_in, _line))
            {
                _in = NULL;
            }
        }

    public:
        explicit line_iterator(std::istream&amp; in) : _in(&amp;in) { getline(); }

        line_iterator() : _in(NULL) {}

        const std::string&amp; operator*() const { return _line; }

        line_iterator&amp; operator++()
        {
            getline(); return *this;
        }

        line_iterator operator++(int)
        {
            line_iterator tmp = *this; getline(); return tmp;
        }

        friend bool operator==(const line_iterator&amp; lhs, const line_iterator&amp; rhs)
        {
            return lhs._in == rhs._in;
        }

        friend bool operator!=(const line_iterator&amp; lhs, const line_iterator&amp; rhs)
        {
            return lhs._in != rhs._in;
        }
    };

    struct starts_with_sharp : std::unary_function&lt;std::string, bool&gt;
    {
        bool operator()(const std::string&amp; s) const
        {
            return !s.empty() &amp;&amp; s[0] == '#';
        }
    };

    int main(int argc, char* argv[])
    {
        if (argc != 3)
        {
            std::cerr &lt;&lt; "usage: input output" &lt;&lt; std::endl;

            return -1;
        }

        std::ifstream fin(argv[1]);

        std::ofstream fout(argv[2]);

        std::remove_copy_if(
            line_iterator(fin),
            line_iterator(),
            std::ostream_iterator&lt;std::string&gt;(fout, "\n"),
            starts_with_sharp()
        );

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1337'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1337
  :user_name: JDO
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/22 06:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  細かい点ですが、問題に与えられた条件では「ファイルから1行ずつ読み込み」とありますよね。この「読み込み」の部分に引っかりを感じました。Ruby
    に限ったことではありませんが、ワンライナーの場合、そもそも「読み込み」の部分が記述されいなことになります。ワンライナーの場合は「読み込み」ではなく、「処理」が1行ずつされることが保証されているだけですよね。。。。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1160'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1160
  :user_name: katsu
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/20 09:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  read_line_to_codeを使うと、ユーザー入力にした場合、入力を待ってくれないのをどうすればよいのか判らないのです。\r\n\t"
  :code: |
    lineLoop(Str):-
            read_line_to_codes(Str,Line),
            (Line=[35|_]-&gt;write("");
             (not(Line=end_of_file)-&gt;string_to_list(S,Line),writeln(S),lineLoop(Str); true)).

    :- prompt(_,''),current_stream(_,'read',Str),lineLoop(Str), halt.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4365'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/4365
  :user_name: ocaml-nagoya
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/514/
  :language: OCaml
  :time: 2007/11/23 08:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ループを使わずにストリームでやってみました。\r\n\t"
  :code: "(* 関数合成 *)\nlet ($) f g x = f (g x)\n\nlet _ =\n  (* ファイルのオープン *)\n  let
    input =\n    open_in \"input_file\"\n  in\n  let output =\n    open_out \"output_file\"\n
    \ in\n  (* 一行ずつ読み込むストリーム作成 *)\n  let lines =\n    Stream.from (fun _ -&gt;\n      try\n
    \   Some (input_line input)\n      with\n    _ -&gt; None)\n  in\n  (* 正規表現で判定する
    *)\n  let exp = \n    Str.regexp \"^#\"\n  in\n  (* 条件にマッチしたら空文字列を返す *)\n  let
    filter str =\n    if Str.string_match exp str 0  then\n      \"\"\n    else\n
    \     str ^ \"\\n\"\n  in\n  (* ループでやらずにストリームで処理するところが関数型言語の肝 *)\n  Stream.iter
    (output_string output $ filter) lines;\n  (* 後始末 *)\n  close_in input;\n  close_out
    output\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '285'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/285
  :user_name: katsu
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/117/
  :language: Scheme
  :time: 2007/07/07 00:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  lambdaがいやだったので、any-predなんぞを使ってみました。\r\n\t"
  :code: |
    #!/usr/local/bin/gosh
    (port-for-each (any-pred #/^#/ print) read-line)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '587'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/587
  :user_name: iwk
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/07/11 16:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  まんまF#でやってみました。\r\n\r\n\t"
  :code: |
    open System;;
    open System.Text;;
    open System.IO;;
    open Array;;

    let fileIO (ifname:string) (ofname:string) =
        let streamW = new StreamWriter( ofname, false, Encoding.Default ) in
        let streamR = new StreamReader( ifname, Encoding.Default ) in
        let rmCommentLn (wstream:StreamWriter) =
            let rec readf (rstream:StreamReader) =
                let line = rstream.ReadLine() in
                if line = null then ()
                else
                    begin
                        if not (line.StartsWith "#")
                        then wstream.WriteLine line
                        else ();
                        readf rstream
                    end
            in using streamR readf
        in using streamW rmCommentLn;;

    if (length Sys.argv) = 3
    then fileIO Sys.argv.(1) Sys.argv.(2)
    else ();;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4928'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/4928
  :user_name: 匿名
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/4/
  :language: Batchfile
  :time: 2007/12/22 09:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">W2K以上ですが。</pre>\r\n\t"
  :code: |
    @echo off
    set output=test2.txt
    setlocal enabledelayedexpansion
    type NUL &gt; %output%
    for /f "tokens=1* delims=" %%a in (test.txt) do (
      set Z=%%a
      if "!Z:~0,1!" NEQ "#" echo !Z! &gt;&gt; %output%
    )
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '261'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/261
  :user_name: minke
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/28/
  :language: Haskell
  :time: 2007/07/06 12:58 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    main = getContents &gt;&gt;= putStr . unlines . filter (('#' /=) . head) . lines
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '875'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/875
  :user_name: rubikitch
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/105/
  :language: Lua
  :time: 2007/07/14 21:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    function remove_comments(in_filename, out_filename)
      out_f = io.output(out_filename)
      for line in io.lines(in_filename) do
        if string.sub(line, 1, 1) ~= "#" then
          out_f:write(line, "\n")
        end
      end
      out_f:close()
    end

    remove_comments("10.input", "10.output")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5455'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/5455
  :user_name: queck
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/681/
  :language: Common
  :time: 2008/01/25 12:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>series を使ってみました。\nseries はレイジーリストみたいな性質があるので、こういう書き方でも1行ずつ処理されます。</p>\n\r\n\t"
  :code: |
    (require :series)

    (defun remove-#-line (in-file out-file)
      (let* ((in (series:scan-file in-file #'read-line))
             (lines (series:choose-if
                     #'(lambda (x)
                         (or (string= "" x) (string/= "#" x :end2 1)))
                     in)))
        (series:collect-file out-file lines #'write-line)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '798'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/798
  :user_name: kkobayashi
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/14 03:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    remove.comment &lt;- function(infile, outfile){
        sink(outfile)
        cat(grep("^[^#]", scan(file=infile, what=character(0), sep="\n"), value=TRUE), sep="\n")
        sink()
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1099'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1099
  :user_name: にしお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/07/19 12:14 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">ゆるせないワンライナー\r\n\r\n・リスト内包表現で副作用のある関数を呼ぶのは嫌い\r\n　・素直にfor文で書いた方がいい</pre>\r\n\t"
  :code: |
    [file("tmpout.txt", "w").write(line)
     for line in file("tmp.txt")
     if line[0] != "#")]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '511'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/511
  :user_name: rubikitch
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/10 20:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Common Lispで初めてfile入出力書いてみたｗ\r\n\t"
  :code: |
    (require :iterate)
    (in-package :iter)
    (defun remove-comments (in out)
      (iter (for line in-stream in using #'read-line)
            (unless (char= (aref line 0) #\#)
              (write-line line out))))

    (defun test ()
      (with-open-file (in "10.input" :direction :input)
        (with-open-file (out "10.output" :direction :output :if-exists :supersede)
          (remove-comments in out))))

    (test)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1706'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1706
  :user_name: tomatsu
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/02 12:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    for (line : scanLines(file)){
       if (line.startsWith("#")) println(line)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '264'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/264
  :user_name: morchin
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/78/
  :language: Python
  :time: 2007/07/06 14:08 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">ファイルの入出力はリダイレクションを利用。\r\nPythonのリストは遅延評価しないので、その場で評価され中身が実行される。</pre>\r\n\t"
  :code: |
    import sys
    [l.startswith('#') or sys.stdout.write(l) for l in sys.stdin]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '271'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/271
  :user_name: nobsun
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/07/06 15:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">すでにほとんど同じものがありますが :)</pre>\r\n\t"
  :code: |
    module Main (main) where
    main :: IO ()
    main = putStr . unlines . filter (null ||| ('#'/=) . head) . lines =&lt;&lt; getContents
    infixr 2 |||
    (|||) :: (a -&gt; Bool) -&gt; (a -&gt; Bool) -&gt; (a -&gt; Bool)
    (p ||| q) x = if p x then True else q x
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '665'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/665
  :user_name: iwk
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/49/
  :language: JavaScript
  :time: 2007/07/12 14:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  &gt; cscript rem.js input.txt output.txt\r\n\t"
  :code: "var objFSO = new ActiveXObject(\"Scripting.FileSystemObject\");\n\nfunction
    /* void */ rmComments( ifname, ofname ) {\n    contents = \"\";\n    if( objFSO.FileExists(
    ifname ) ) {\n\tifileObj = objFSO.GetFile( ifname );\n\tstreamR = ifileObj.OpenAsTextStream(
    1 );\n\tstreamW = objFSO.CreateTextFile( ofname );\n\ttry {\n\t    while( !streamR.AtEndOfStream
    ) {\n\t\tcontents = streamR.ReadLine();\n\t\tif( contents.search(/#/) != 0 ) {\n\t\t
    \   streamW.WriteLine( contents );\n\t\t}\n\t    }\n\t} finally {\n\t    streamR.Close();\n\t
    \   streamW.Close();\n\t}\n    } else {\n\tthrow (ifname + \": No Such File\");\n
    \   }\n    return;\n}\n\nvar arg = WScript.Arguments.Unnamed;\nrmComments( arg.Item(0),
    arg.Item(1) );\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3890'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/3890
  :user_name: 匿名
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/12 05:24 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  ワンライナーで\r\n\t"
  :code: |
    出力先設定("out.txt");毎行読("test.txt")で反復;もし(LEFT(対象,1)&lt;&gt;"#")ならば;一行出力(対象)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4782'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/4782
  :user_name: vtwntmtn
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2007/12/12 17:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>一行づつ処理します。正規表現を使う必要はあまりないかも。</p>\n\r\n\t"
  :code: |
    -module(file_conv).
    -export([file_conv/2]).

    conv(In, Out) -&gt;
        case io:get_line(In, "") of
            eof -&gt; true;
            Line -&gt;
                case regexp:match(Line, "^#") of
                    nomatch -&gt; io:put_chars(Out, Line);
                    _ -&gt; false
                end,
                conv(In, Out)
        end.

    file_conv(InFileName, OutFileName) -&gt;
        {ok, In} = file:open(InFileName, read),
        {ok, Out} = file:open(OutFileName, write),
        conv(In, Out).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4891'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/4891
  :user_name: minke
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/28/
  :language: Haskell
  :time: 2007/12/19 20:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>空行に対応していなかったので書き直し</p>\n\r\n\t"
  :code: |
    main = getContents &gt;&gt;= mapM_ putStrLn' . lines

    putStrLn' ('#':_) = return ()
    putStrLn' xs = putStrLn xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6172'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/6172
  :user_name: pooq
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/606/
  :language: Io
  :time: 2008/04/12 06:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    f := File standardInput
    while(i := f readLine, if(i at(0) != 35, i println))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1332'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1332
  :user_name: JDO
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/22 05:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  「Perlはor dieですむ」。。。C言語でも、die 関数定義すれば、いいのでは？ 整数型として定義して、va_list,
    va_start, va_end なんか使えば、とっても面倒くさいけど、定義できますよ。いちど die 定義すれば便利につかえますから、やってみてもいいかもですね。\r\nhttp://homepage2.nifty.com/mattsan/software/samples/sample034.html\r\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1416'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/1416
  :user_name: にしお
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/24 12:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  修正しました\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8566'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/8566
  :user_name: doda
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/705/
  :language: Other
  :time: 2009/02/27 12:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>whitespaceで。</p>\n<p>使い方:\nwspace delline.ws &lt; infile &gt;
    outfile 2&gt;/dev.null</p>\n<p>whitespaceではEOFを検出する方法がないので、実装によっては動かないかもしれません。</p>\n<p><a
    class=\"reference\" href=\"/web/20101123175840/http://compsoc.dur.ac.uk/whitespace/download.php\">標準の実装</a>
    ではEOFに出会った時点でエラー終了しますが、出力は正常に行えているはずです。</p>\n\r\n\t"
  :code: ".\n      \n\n      \n \n                   \n          \n             \n\n
    \      \n \n     \n               \n          \n         \n\n      \n\n \n     \n\n
    \         \n\n      \n \n              \n          \n         \n\n \n        \n\n
    \          \n\n\n\n\n   \n    \n \n     \n                  \n     \n          \n
    \             \n\n    \n.\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9007'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/9007
  :user_name: pooq
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2009/05/25 16:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    load 'files'

    print =: (1!:2)&amp;2

    f =: 3 : 0
      if. '#' ~: y do. print y end.
      ''
    )

    f fapplylines 'data.txt'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9522'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/9522
  :user_name: Wiles
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1094/
  :language: C
  :time: 2009/08/26 23:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>fgetcでゴチャゴチャと……</p>\n\r\n\t"
  :code: "#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n#define MAX 100\n\nint
    main(void)\n{\n    FILE *in, *out;\n    char filename[50], buf[MAX], ch;\n    int
    i = 0, flag = 0;\n\n    printf(\"入力先ファイル名を指定してください: \");\n    gets(filename);\n
    \   if((in = fopen(filename, \"r\")) == NULL)\n    {\n        puts(\"入力先ファイルが開けませんでした\");\n
    \       exit(1);\n    }\n    printf(\"出力先ファイル名を指定してください: \");\n    gets(filename);\n
    \   if((out = fopen(filename, \"w\")) == NULL)\n    {\n        puts(\"出力先ファイルが開けませんでした\");\n
    \       exit(1);\n    }\n    while ((ch = fgetc(in)) != EOF)\n    {\n        if((i
    == 0) &amp;&amp; (ch == '#'))\n        {\n            flag = 1;\n        }\n        buf[i++]
    = ch;\n        if(ch == '\\n')\n        {\n            if(!flag)    fprintf(out,
    \"%s\", buf);\n            else    flag = 0;\n            memset(buf, '\\0', i);\n
    \           i = 0;\n        }\n    }\n    if((buf[i - 1] != '\\n') &amp;&amp;
    !flag)    fprintf(out, \"%s\", buf);\n    \n    fclose(in);\n    fclose(out);\n\n
    \   return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8310'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/8310
  :user_name: 匿名
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2009/01/10 03:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>入力が長い日も安心です。</p>\n<p>getchar_unlocked()のようなものが使える環境では、そちらを使ったほうがよいかもしれません。</p>\n\r\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    int main()
    {
        int c, pc;
        for (pc = '\n'; (c = getchar()) != EOF; pc = c)
            if (pc == '\n' &amp;&amp; c == '#')
                while ((c = getchar()) != EOF &amp;&amp; c != '\n')
                    pc = c;
            else
                putchar(c);
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '10403'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/10403
  :user_name: gushwell
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1046/
  :language: C
  :time: 2010/04/16 21:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>より汎用的に、条件を外側から与えられるようにしました。</p>\n\r\n\t"
  :code: "using System;\nusing System.IO;\n\nnamespace Sample {\n    class Program
    {\n        static void Main(string[] args) {\n            RemoveLines(\"sample.txt\",
    \"sampleOut.txt\", \n                s =&gt; s.Length &gt; 0 &amp;&amp; s[0] ==
    '#');\n        }\n\n        private static void RemoveLines(string infile, string
    outfile, \n                                        Predicate&lt;string&gt; judge)
    {\n            using (StreamReader sr = new StreamReader(infile))\n            using
    (StreamWriter sw = new StreamWriter(outfile)) {\n                string s;\n                while
    ((s = sr.ReadLine()) != null) {\n                    if (!judge(s))\n                        sw.WriteLine(s);\n
    \               }\n            }\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '10396'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/10396
  :user_name: 匿名
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2010/04/16 20:09 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <p>One acknowledges that life is high priced, however some people
    need cash for different issues and not every one gets enough cash. So to receive
    some &lt;a href=\"<a class=\"reference\" href=\"/web/20101123175840/http://lowest-rate-loans.com/\">http://lowest-rate-loans.com</a>\"&gt;loan&lt;/a&gt;
    and just auto loan would be a correct solution.</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8559'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/8559
  :user_name: hchbaw
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/950/
  :language: Other
  :time: 2009/02/26 16:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Clojure です。\r\n\r\n正規表現はリーダーマクロでも面倒みてくれているんですね。\r\n入出力には
    clojure.contrib.duck-streams を使いました。\r\n\r\n</pre>\r\n\t"
  :code: |
    (require '[clojure.contrib.duck-streams :as ds])
    (defn main []
      (let [p (comp not #(re-find #"^#" %))]
        (with-open [out (ds/writer "file:///tmp/out.txt")]
          (binding [*out* out]
            (doseq [s (ds/read-lines "file:///tmp/in.txt")]
              (when (p s)
                (println s)))))))
    (main)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8526'
  :parent_id: '10'
  :url: http://ja.doukaku.org/comment/8526
  :user_name: selpo
  :user_url: /web/20101123175840/http://ja.doukaku.org/user/1013/
  :language: C
  :time: 2009/02/18 02:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    using System;
    using System.IO;

    class Program
    {
        static void Main()
        {
            Concole.WriteLine("入力：");
            var input = Console.ReadLine();
            Console.WriteLine("出力：");
            var putput = Console.ReadLine();
            using (var sr = new StreamReader(input))
            {
                using (var sw = StreamWriter(output))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        if (line.StartsWith("#"))
                            sw.WriteLine(line);
                    }
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
