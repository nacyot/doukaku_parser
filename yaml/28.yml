---
:id: '28'
:title: 呼んだのは誰？
:comments:
- :id: '3384'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/3384
  :user_name: にしお
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/21 05:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  自身を呼び出した関数（メソッド）の名前を返す関数（メソッド）を書いてください。\r\n<p>\r\nRuby で表現すると、\r\n以下のような「fooという関数を呼び出す関数」#bar、#bazがあるとき\r\n\r\n</p>\n<pre>\r\ndef
    bar; foo end\r\ndef baz; foo end\r\n</pre>\r\n\r\nこのbar, bazの返り値が以下のようになるような関数fooを定義してください。\r\n<pre>\r\nbar
    \ #=&gt; \"bar\"\r\nbaz  #=&gt; \"baz\"\r\n</pre>\r\n\r\n<p>\r\nこのお題は匿名の「Smalltalk
    からの挑戦状」を元に作成しました。\r\n確かにこの手のリフレクションの機能が言語によってどう違うのかは興味深いところです。\r\nリフレクションを使う問題をいくつか考えてみたいと思います。\r\nご投稿ありがとうございました。\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1234'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1234
  :user_name: yuin
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/07/21 05:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">とりあえず。</pre>\n\t"
  :code: |
    import sys
    def bar():
      return foo()

    def baz():
      return foo()

    def foo():
      return sys._getframe(1).f_code.co_name
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1236'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1236
  :user_name: takatoh
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/189/
  :language: Ruby
  :time: 2007/07/21 05:46 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  callerの使い方をよくわかってませんが。\n\t"
  :code: |
    def foo
      /.*`(.+)'/ =~ caller(1)[0]
      $1
    end

    def bar; foo; end
    def baz; foo; end

    p bar
    p baz
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1237'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1237
  :user_name: yuin
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/21 05:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">引数の数がつくのでbar$0になりますが。</pre>\n\t"
  :code: |
    def bar = foo
    def baz = foo

    def foo = {
      val trace = (new Throwable).getStackTrace
      trace(1).getMethodName
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1240'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1240
  :user_name: ocean
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/07/21 05:58 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  あまり自信なし。\n\t"
  :code: |
    import inspect

    def foo():
        print inspect.stack()[1][3]

    def bar():
        foo()

    def baz():
        foo()

    def main():
        bar()
        baz()

    if __name__ == '__main__':
        main()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1243'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1243
  :user_name: 匿名
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/07/21 06:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "public class Test {\n\tpublic static void main(String[] args) throws Exception
    {\n\t\tSystem.out.println(\"bar() = \" + bar());\n\t\tSystem.out.println(\"bar()
    = \" + baz());\n\t}\n\t\n\tpublic static String bar() {\n\t\treturn foo();\n\t}\n\t\n\tpublic
    static String baz() {\n\t\treturn foo();\n\t}\n\t\n\tpublic static String foo()
    {\n\t\tStackTraceElement[] stackTraceElementArray = new Throwable().getStackTrace();\n\t\treturn
    stackTraceElementArray[1].getMethodName();\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1244'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1244
  :user_name: 匿名
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/07/21 06:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ごめんなさいアップしてから気づきましたが、\r\nSystem.out.println(\"bar()
    = \" + baz());\r\nではなく\r\nSystem.out.println(\"baz() = \" + baz());\r\nでした。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1245'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1245
  :user_name: rucker
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/07/21 06:28 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "&lt;?php\nfunction getfuncname()\n{\n\t$a=debug_backtrace();\n\treturn $a[1]['function'];\n}\n\nfunction
    func_a()\n{\n\techo getfuncname(),\"\\n\";\n}\n\nfunction func_b()\n{\n\techo
    getfuncname(),\"\\n\";\n}\n\nfunc_a();\nfunc_b();\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1246'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1246
  :user_name: shiro
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/07/21 06:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Schemeの場合、そもそも関数という概念が抽象的で、gotoの飛び先ラベル程度の\r\n意味しか持たないため、「呼び出した関数」の意味を厳密に決めるのは困難です。\r\n(ナイーブな処理系でも、少なくとも末尾呼び出しについては「ソース上のcaller」の\r\n情報は出せません---出せるようにすると言語仕様を満たせないから)\r\n\r\nなので、ここではGaucheのMOPを使って通常のSchemeとは違う呼び出し\r\nセマンティクスを実現してみます。\r\n\r\n実行例：\r\ngosh&gt;
    (define-generic bar :class &lt;tracer&gt;)\r\nbar\r\ngosh&gt; (define-method bar
    () (foo))\r\n#&lt;&lt;tracer&gt; 0x8e26940&gt;\r\ngosh&gt; (define-generic baz
    :class &lt;tracer&gt;)\r\nbaz\r\ngosh&gt; (define-method baz () (foo))\r\n#&lt;&lt;tracer&gt;
    0x8e26900&gt;\r\ngosh&gt; (bar)\r\nbar\r\ngosh&gt; (baz)\r\nbaz\r\n</pre>\n\t"
  :code: |
    (use gauche.parameter)

    (define call-trace (make-parameter '()))

    (define-class &lt;tracer&gt; (&lt;generic&gt;) ())

    (define-method apply-generic ((gf &lt;tracer&gt;) args)
      (parameterize ((call-trace (cons (ref gf'name) (call-trace))))
        (next-method)))

    (define (foo) ((every-pred pair? car) (call-trace)))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '1247'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1247
  :user_name: shiro
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/07/21 06:34 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">ちなみに下のマクロも仕込んでおけば見かけ上は普通の手続き定義のようになります:\r\n\r\ngosh&gt;
    (define (bar) (foo))\r\n#&lt;&lt;tracer&gt; 0x8cc0900&gt;\r\ngosh&gt; (define
    (baz) (foo))\r\n#&lt;&lt;tracer&gt; 0x8cc0880&gt;\r\ngosh&gt; (bar)\r\nbar\r\ngosh&gt;
    (baz)\r\nbaz\r\n\r\nただ、マクロを使ったら何でもありになってしまいますね。\r\n(マクロ内で手続きのトレース用のラッパーを仕込んでしまう、とか。)</pre>\n\t"
  :code: |
    (use util.match)
    (define-macro (define . args)
      (match args
        [((fn . args) . body)
         `(begin
            ((with-module gauche define) ,fn (make &lt;tracer&gt; :name ',fn))
            (define-method ,fn ,args . ,body))]
        [(var expr)
         `((with-module gauche define) ,var ,expr)]))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '1251'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1251
  :user_name: katsu
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/21 07:33 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">処理系依存、ですよ。\r\nwrite('')みたいな副作用でもしないと、最適化で「呼び出し」が無かったことになっちゃうので、そうしています。\r\n実行例\r\n
    $ pl -qs stack.pl\r\naaa(**)\r\nbbb(**)\r\n?-\r\n</pre>\n\t"
  :code: |
    aaa(X):-whoami(X),write('').
    bbb(X):-whoami(X),write('').

    whoami(X):-prolog_current_frame(F),prolog_frame_attribute(F,parent,X0),prolog_frame_attribute(X0,goal,X).

    :-aaa(Xa),writeln(Xa),bbb(Xb),writeln(Xb).
  :tags:
  - SWI-prolog
  :references:
    :url: 
    :title: 
- :id: '1253'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1253
  :user_name: cats
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/07/21 07:52 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    using System.Diagnostics;
    class Program
    {
      static void Main()
      {
        Console.WriteLine("bar  #=&gt; \"{0}\"", bar());
        Console.WriteLine("baz  #=&gt; \"{0}\"", baz());
      }
      static string bar() { return foo(); }
      static string baz() { return foo(); }
      static string foo()
      {
        return new StackTrace().GetFrame(1).GetMethod().Name;
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1254'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1254
  :user_name: 匿名
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/07/21 08:08 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">アカウントが作成できなかったので匿名投稿します。\r\n\r\nvar bar = function(){...}\r\n\r\nという形式では実現できませんでした。</pre>\n\t"
  :code: |
    var foo = function(){
        return arguments.callee.caller.toString().match(/function\s*([^(]+)/)[1];
    }
    function bar(){
        return foo();
    }
    function baz(){
        return foo();
    }

    alert(bar());
    alert(baz());
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1256'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1256
  :user_name: ココサブ
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/07/21 08:21 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <pre class=\"compact\">GNU拡張を使用しています。\r\n\r\n$ gcc -finstrument-functions
    -rdynamic caller.c -ldl\r\n\r\nのような形でコンパイルしてください。\r\n\r\n参考 : http://alohakun.blog7.fc2.com/blog-entry-760.html</pre>\n\t"
  :code: |
    #define _GNU_SOURCE
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;
    #include &lt;dlfcn.h&gt;

    char *caller_func_name;

    __attribute__((no_instrument_function))
    void __cyg_profile_func_enter(void *func_address, void *call_site)
    {
        Dl_info func_info;
        Dl_info call_info;

        if (dladdr(func_address, &amp;func_info) == 0) {
            return;
        }
        if (strcmp(func_info.dli_sname, "foo") != 0) {
            return;
        }

        if (dladdr(call_site, &amp;call_info) == 0) {
            return;
        }
        caller_func_name = (char *)call_info.dli_sname;
    }

    char *foo()
    {
        return caller_func_name;
    }

    char *bar()
    {
        return foo();
    }

    char *baz()
    {
        return foo();
    }

    int main()
    {
        printf("%s\n", bar());
        printf("%s\n", baz());
        return 0;
    }
  :tags:
  - GCC
  - GNU
  :references:
    :url: 
    :title: 
- :id: '1259'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1259
  :user_name: kkobayashi
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/21 08:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt; foo()\r\n[1] \"foo\"\r\n&gt; bar()\r\n[1]
    \"bar\"\r\n&gt; baz()\r\n[1] \"baz\"\r\n</pre>\n\t"
  :code: |
    foo &lt;- function(){
        as.character(sys.calls()[[1]])
    }
    bar &lt;- function(){
        foo()
    }
    baz &lt;- function(){
        foo()
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1260'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1260
  :user_name: 匿名
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/07/21 09:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">アカウント作れないですねぇ\r\n</pre>\n\t"
  :code: |
    use strict;

    sub bar {
      foo();
    }

    sub baz {
      foo();
    }

    sub foo {
      my $p = (caller(1))[0];
      (caller(1))[3] =~ m|^${p}::(.*)|;
    }

    print bar(),"\n";
    print baz(),"\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1261'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1261
  :user_name: rubikitch
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/21 10:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  処理系依存だな。\n\t"
  :code: |
    (defun foo () (caadr (caddr (sb-debug:backtrace-as-list))))
    (defun bar () (foo))
    (defun baz () (foo))
    (bar)                                   ; =&gt; BAR
    (baz)                                   ; =&gt; BAZ
  :tags:
  - sbcl
  :references:
    :url: 
    :title: 
- :id: '1262'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1262
  :user_name: rubikitch
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/07/21 10:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    def foo
      caller(1)[0][ /in `(.+)'$/, 1 ]
    end

    def bar() foo end
    def baz() foo end
    bar                             # =&gt; "bar"
    baz                             # =&gt; "baz"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1264'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1264
  :user_name: rubikitch
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/07/21 10:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  インタプリタ版。\r\n当然だがこういうのはバイトコンパイルすると使えない。他のコードになる。\n\t"
  :code: |
    (defun foo ()
      (with-temp-buffer
        (let ((standard-output (current-buffer)))
          (backtrace)
          (goto-char (point-min))
          (forward-line 8)
          (forward-sexp 1)
          (buffer-substring-no-properties (+ 2 (point-at-bol)) (point)))))
    (defun bar () (foo))
    (defun baz () (foo))
    (bar)                                   ; =&gt; "bar"
    (baz)                                   ; =&gt; "baz"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1265'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1265
  :user_name: rubikitch
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/105/
  :language: Lua
  :time: 2007/07/21 10:50 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  tail call optimizationをやるのでわざとstring.formatを呼んでみる。\n\t"
  :code: |
    function foo()
      return string.gsub(debug.traceback(), "^.+\n.+\n.+`(.+)'.+$", "%1")
    end
    function bar()
      return string.format("%s",foo())
    end
    function baz()
      return string.format("%s",foo())
    end

    print(bar())
    print(baz())
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1297'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1297
  :user_name: sumim
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/21 14:39 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">すみません。問題の投稿時にログインを忘れていました(^_^;)。\r\n\r\n遅まきながら
    Squeak Smalltalk です。</pre>\n\t"
  :code: |
    Object &gt;&gt; foo
       ^thisContext sender selector
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '1307'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1307
  :user_name: にしお
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/21 15:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">どうして匿名で投稿したのかなと疑問に思っていたのですが\r\nそういうことでしたか(^^;</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1376'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1376
  :user_name: morchin
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/78/
  :language: Python
  :time: 2007/07/24 05:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">inspectはまだ使いこなせていませんが。</pre>\n\t"
  :code: |
    def caller():
        import inspect
        return inspect.getouterframes(inspect.currentframe())[1][3]

    def foo():
        print caller()

    def bar():
        print caller()

    foo(), bar()
    # foo
    # bar
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1479'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1479
  :user_name: hamano
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/25/
  :language: C
  :time: 2007/07/26 15:02 GMT
  :vote_count: '6'
  :vote_score: '6'
  :body: "\n\t  __builtin_return_address() と libbfd の bfd_find_nearest_line() を使ってみました。\r\n\r\n%
    gcc -g caller.c -lbfd\r\nでコンパイルできます。\r\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;bfd.h&gt;

    static bfd *abfd;
    static int size;
    static asymbol **symbols;
    static asection *section;

    const char *foo()
    {
        int ret;
        void *addr;
        const char *file;
        const char *func;
        unsigned int line;

        addr = __builtin_return_address(0);
        ret = bfd_find_nearest_line(abfd, section, symbols, (long)addr,
                                    &amp;file, &amp;func, &amp;line);
        return func;
    }

    const char *bar()
    {
        return foo();
    }

    const char *baz()
    {
        return foo();
    }

    int main()
    {
        abfd = bfd_openr("/proc/self/exe", NULL);
        bfd_check_format(abfd, bfd_object);
        size = bfd_get_symtab_upper_bound(abfd);
        symbols = (asymbol**)malloc(size);
        section = bfd_get_section_by_name(abfd, ".debug_info");
        printf("%s\n", bar());
        printf("%s\n", baz());
        free(symbols);
        return 0;
    }
  :tags:
  - bfd
  :references:
    :url: 
    :title: 
- :id: '1612'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1612
  :user_name: ether
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/96/
  :language: Lua
  :time: 2007/07/31 04:02 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  ちゃんとテーブルの形で情報もらえるので文字列から抽出する必要はないかと\n\t"
  :code: |
    function foo() return debug.getinfo(2).name end

    function bar()
      local ret = foo()
      return ret
    end

    function baz()
      local ret = foo()
      return ret
    end

    print(bar())
    print(baz())
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1693'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/1693
  :user_name: 匿名
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/08/02 09:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  関数の概念がない言語だと、カバレッジに影響しませんか？\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2011'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/2011
  :user_name: tsekine
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/124/
  :language: Bash
  :time: 2007/08/08 10:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  新し目のbashじゃないと無理だと思います。\n\t"
  :code: |
    foo () {
      echo "${FUNCNAME[${#FUNCNAME[@]}-1]}"
    }
    bar () {
      foo
    }
    baz () {
      foo
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2094'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/2094
  :user_name: nobsun
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/13 04:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Haskellでは名前(識別子)はfirst-classの対象じゃないので式の中では通常の方法では不可能でしょうね。正規順簡約ではなにをcaller、calleeというのかは自明ではないでしょうねぇ。せいぜいコマンドラインから起動したプログラム名くらいかなかのうなのは。。。\n\t"
  :code: |
    import System.Environment
    main = getProgName &gt;&gt;= putStrLn
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2097'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/2097
  :user_name: shg
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/383/
  :language: Matlab
  :time: 2007/08/13 05:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  dbstackでファイル名やそのファイル名の中の何行目で呼ばれたかも取得可能。デバッグ目的の関数なので。\n\t"
  :code: |
    function foo
    st = dbstack;
    st(2).name
  :tags:
  - MATLAB7.4
  :references:
    :url: 
    :title: 
- :id: '2567'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/2567
  :user_name: 管理者
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/411/
  :language: 
  :time: 2007/08/28 08:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Perl6::Callerを使う例</pre>\n\t"
  :code: ''
  :tags:
  - Perl6
  :references:
    :url: /web/20080507172426/http://d.hatena.ne.jp/fbis/20070728/1185599125
    :title: どう書くでリハビリ
- :id: '2752'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/2752
  :user_name: 130R
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/08/31 11:38 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">PS C:\\&gt; bar\r\nbar\r\nPS C:\\&gt; buz\r\nbuz</pre>\n\t"
  :code: |
    function caller
    {
         if ((get-variable -scope 1 MyInvocation).Value.PositionMessage -match "\+ (\S+) &lt;&lt;&lt;&lt;")
         {
              $matches[1]
         }
    }

    function bar { caller }
    function buz { caller }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4287'
  :parent_id: '28'
  :url: http://ja.doukaku.org/comment/4287
  :user_name: cho45
  :user_url: /web/20080507172426/http://ja.doukaku.org/user/579/
  :language: Io
  :time: 2007/11/21 07:00 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  \n\t"
  :code: |
    foo := method(
        call coroutine callStack at(2) message name
    )

    bar := method(
        foo
    )

    baz := method(
        foo
    )

    bar println
    baz println
  :tags: []
  :references:
    :url: 
    :title: 
