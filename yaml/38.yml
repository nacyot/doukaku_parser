---
:id: '38'
:title: 整数の漢数字表記
:comments:
- :id: '3394'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/3394
  :user_name: にしお
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/03 11:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  キーボードから正の整数を入力すると、それを漢数字で表示するプログラムを作ってください☆\r\n例えば「1732050807568877」なら「千七百三十二兆
    五百八億 七百五十六万 八千八百七十七」といった感じです☆\r\n「一七三二兆 〇五〇八億 〇七五六万 八八七七」ではダメですよ＾＾；\r\n<p>\r\nこのお題は匿名での投稿です。\r\n与えられる整数の範囲は一京未満(10000000000000000未満)としたいと思います。\r\nご投稿ありがとうございます。\r\n</p>\n<p>\r\n2年前のLL
    Day&amp;Nightの「キミならどう書く」で、\r\nこれ専用のCPANモジュールが作られていたような記憶があるので\r\n勝手にPerlからの挑戦状とみなしておきます(笑)\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1777'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1777
  :user_name: 沢渡 みかげ
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/101/
  :language: Perl
  :time: 2007/08/03 12:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">初の1番乗り？\r\nきれいなコードではないですが．．．\r\n\r\n&gt; perl
    suuzi.pl 1732050807568877\r\n千七百三十二兆五百八億七百五十六万八千八百七十七\r\n\r\n</pre>\n\t"
  :code: |
    #!/usr/bin/perl

    my $num = $ARGV[0];

    my @name0 = ('', qw(一 二 三 四 五 六 七 八 九));
    my @name1 = ('', qw(十 百 千));
    my @name2 = ('', qw(万 億 兆));

    my $i = 0;
    my $j = 0;
    my $res = '';
    while($num =~ s/(\d)$//) {
      my $d = $1;
      if($d &gt; 1) {
        $res = $name0[$d] . $name1[$i] . $res;
      }
      elsif($d == 1 and $i != 0) {
        $res = $name1[$i] . $res;
      }
      $i++;
      if($i % 4 == 0) {
        $j++;
        $i = 0;
        $res = $name2[$j] . $res if($num ne '');
      }
    }

    print $res, "\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1778'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1778
  :user_name: yuin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/08/03 12:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "def num2K(num):\n  if num == 0: return u\"零\"\n  s = []\n  \n  for i,v in
    enumerate(map(int, reversed(str(num)))):\n    if i in num2K.table:\n      s.append(num2K.table2[v]+num2K.table[i]+(i
    &gt; 3 and u\" \" or u\"\"))\n    elif v &gt; 1:\n      s.append(num2K.table2[int(v)]+num2K.table[i%4])\n
    \   elif v != 0:\n      s.append(num2K.table[i%4])\n  return \"\".join(reversed(s))\nnum2K.table
    = {0:u\"\", 1:u\"十\",2:u\"百\",3:u\"千\",4:u\"万\",8:u\"億\",12:u\"兆\",16:u\"京\"}\nnum2K.table2
    = {0:u\"\",1:u\"一\",2:u\"二\",3:u\"三\",4:u\"四\", 5:u\"五\", 6:u\"六\", 7:u\"七\",
    8:u\"八\", 9:u\"九\"}\n\n\n\nprint num2K(input(u\"&gt;&gt;\"))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1779'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1779
  :user_name: 沢渡 みかげ
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/101/
  :language: Perl
  :time: 2007/08/03 12:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">バグがありました（汗\r\n1の位の1の処理条件が抜けていました．\r\n\r\nシャワー浴びていたときにふと気づきましたが，手遅れ．\r\n\r\nというわけで一番乗りは無かったことにしていただけないでしょうか．．．（恥</pre>\n\t"
  :code: |
    #!/usr/bin/perl

    my $num = $ARGV[0];

    my @name0 = ('', qw(一 二 三 四 五 六 七 八 九));
    my @name1 = ('', qw(十 百 千));
    my @name2 = ('', qw(万 億 兆));

    my $i = 0;
    my $j = 0;
    my $res = '';
    while($num =~ s/(\d)$//) {
      my $d = $1;
      if($d &gt; 1) {
        $res = $name0[$d] . $name1[$i] . $res;
      }
      elsif($d == 1 and $i != 0) {
        $res = $name1[$i] . $res;
      }
      elsif($d == 1 and $i == 0) {
        $res = $name0[$d] . $res;
      }
      $i++;
      if($i % 4 == 0) {
        $j++;
        $i = 0;
        $res = $name2[$j] . $res if($num ne '');
      }
    }

    print $res, "\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1780'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1780
  :user_name: yuin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/08/03 13:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  日本語コケるのでエスケープしてます。こういうときのためにソースコードのASCII以外をエスケープするスクリプトを作ってあるのですが、役に立ちました。\n\t"
  :code: "object num2K {\n  val table = Map(0-&gt;\"\", 1-&gt;\"\\u5341\",2-&gt;\"\\u767e\",3-&gt;\"\\u5343\",4-&gt;\"\\u4e07\",8-&gt;\"\\u5104\",12-&gt;\"\\u5146\",16-&gt;\"\\u4eac\")\n
    \ val table2 = Map(0-&gt;\"\",1-&gt;\"\\u4e00\",2-&gt;\"\\u4e8c\",3-&gt;\"\\u4e09\",4-&gt;\"\\u56db\",
    5-&gt;\"\\u4e94\", 6-&gt;\"\\u516d\", 7-&gt;\"\\u4e03\", 8-&gt;\"\\u516b\", 9-&gt;\"\\u4e5d\")\n
    \ def apply(num:long):String = {\n    if(num == 0) return \"\\u96f6\"\n    val
    lst = num.toString.reverse.map(x=&gt;Integer.parseInt(x+\"\"))\n    (0 to lst.length-1).foldLeft(List(\"\")){(r,
    i) =&gt; \n      if(table.contains(i)) {\n        table2(lst(i))+table(i)+(if(i&gt;3){\"
    \"}else{\"\"})::r\n      }else if(lst(i) &gt; 1){\n        table2(lst(i))+table(i%4)::r\n
    \     }else if(lst(i) != 0){\n        table(i%4)::r\n      }else{\n        r\n
    \     }\n    }.mkString(\"\")\n  }\n}\n\nprint(\"&gt;&gt;\")\nprintln(num2K(readLong))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1781'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1781
  :user_name: ApplePedlar
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/320/
  :language: Java
  :time: 2007/08/03 13:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  途中からわけがわからなくなりましたが、多分できました。\n\t"
  :code: "public class Test {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"args[0]
    = \" + args[0]);\n\t\tString res = num2K(args[0]);\n\t\tSystem.out.println(res);\n\t}\n\tstatic
    String[] unitStr = new String[] { \"\", \"万\", \"億\", \"兆\", /*\"京\", \"垓\", \n\t\"穰\",
    \"溝\", \"澗\", \"正\", \"載\", \"極\",\n\t\"恒河沙\", \"阿僧祇\", \"那由他\", \"不可思議\", \"無量大数\",*/
    }; \n\tstatic String[] unitStr2 = new String[] { \"千\", \"百\", \"十\", };\n\tstatic
    String numStr = \"零一ニ三四五六七八九\";\n\tpublic static String num2K(long num) {\n\t\tString
    s = Long.toString(num);\n\t\treturn num2K(s);\n\t}\n\tpublic static String num2K(String
    s) {\n\t\tif (s.length() == 1) {\n\t\t\treturn Character.toString(numStr.charAt(s.charAt(0)
    - '0'));\n\t\t}\n\t\tStringBuffer sb = new StringBuffer();\n\t\tboolean flag =
    false;\n\t\tfor (int i = 0; i &lt; s.length(); i++) {\n\t\t\tint mod = 3 - (s.length()
    - i - 1) % 4;\n\t\t\tint div = (s.length() - i - 1) / 4;\n\t\t\tif (div &gt;=
    unitStr.length) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tint num = s.charAt(i)
    - '0';\n\t\t\tflag |= num != 0;\n\t\t\t\n\t\t\tif (num == 0 &amp;&amp; (mod !=
    3 || div != 0) &amp;&amp; (!flag || mod != 3)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif
    (num == 0 || num == 1 &amp;&amp; mod != 3 &amp;&amp; !(mod == 0 &amp;&amp; div
    != 0)) {\n\t\t\t} else {\n\t\t\t\tsb.append(numStr.charAt(num));\n\t\t\t}\n\t\t\tif
    (mod == 3) {\n\t\t\t\tsb.append(unitStr[div]);\n\t\t\t\tflag = false;\n\t\t\t}
    else {\n\t\t\t\tsb.append(unitStr2[mod]);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1782'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1782
  :user_name: ocean
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/177/
  :language: 
  :time: 2007/08/03 13:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt;&gt;10001\r\n一万 千百十一\r\n\r\nと表示されます。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1783'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1783
  :user_name: yuin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/08/03 13:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  うわーすみません。これで大丈夫かな？\r\nあと、1000と100は千、百、でいいんですよね、これ。でも一千はありなのかな。とりあえず、10000からは一万とかにしました。\n\t"
  :code: "def num2K(num):\n  if num == 0: return u\"零\"\n  s = []\n  \n  for i,v in
    enumerate(map(int, reversed(str(num)))):\n    if v == 0: \n      continue\n    if
    i in num2K.table:\n      if v &gt; 1 or i &gt; 3:\n        s.append(num2K.table2[v]+num2K.table[i]+(i
    &gt; 3 and u\" \" or u\"\"))\n      else:\n        s.append(num2K.table[i] or
    num2K.table2[v]+(i &gt; 3 and u\" \" or u\"\"))\n    elif v &gt; 1:\n      s.append(num2K.table2[int(v)]+num2K.table[i%4])\n
    \   elif v != 0:\n      s.append(num2K.table[i%4])\n  return \"\".join(reversed(s))\nnum2K.table
    = {0:u\"\", 1:u\"十\",2:u\"百\",3:u\"千\",4:u\"万\",8:u\"億\",12:u\"兆\",16:u\"京\"}\nnum2K.table2
    = {0:u\"\",1:u\"一\",2:u\"二\",3:u\"三\",4:u\"四\", 5:u\"五\", 6:u\"六\", 7:u\"七\",
    8:u\"八\", 9:u\"九\"}\n\n\n\nprint num2K(input(u\"&gt;&gt;\"))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1784'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1784
  :user_name: ocean
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/08/03 13:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  多分できました。終了するときは、CTRL+Zを押してリターンキーを押します。（Windows以外ではもしかしたら違うキーかも）\n\t"
  :code: |
    # coding: shift_jis

    class SolveError(RuntimeError):
        pass

    def split(n, m):
        while n:
            yield n % m
            n //= m

    def solve(s):
        try:
            n = int(s)
        except ValueError:
            raise SolveError("not an integer")
        if not(0 &lt; n &lt; 10000000000000000):
            raise SolveError("not in range")

        large = [u"", u"万", u"億", u"兆"]
        small = [u"", u"十", u"百", u"千"]
        digit = [u"", u"一", u"二", u"三", u"四", u"五", u"六", u"七", u"八", u"九"]
        def convert():
            for i_large, n_large in enumerate(split(n, 10000)):
                if n_large:
                    if i_large:
                        yield u" "
                    yield large[i_large]
                    for i_small, n_small in enumerate(split(n_large, 10)):
                        if n_small:
                            yield small[i_small]
                            if not(n_small == 1 and i_small):
                                yield digit[n_small]
        return "".join(reversed(list(convert())))

    def main():
        while 1:
            try:
                s = raw_input("&gt; ")
            except EOFError:
                break
            try:
                print solve(s)
            except SolveError, e:
                print "error:", e

    if __name__ == '__main__':
        main()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1788'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1788
  :user_name: tomatsu
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/03 14:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "function num2K(num){\n  table = {0=&gt;\"\", 1=&gt;\"十\",2=&gt;\"百\",3=&gt;\"千\",4=&gt;\"万\",8=&gt;\"億\",12=&gt;\"兆\",16=&gt;\"京\"}\n
    \ table2 = [\"\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\",\"七\",\"八\",\"九\"]\n  if
    (num == 0) return \"零\"\n  i = 0\n  s = {}\n  for (v : project(reverse(string(num)),
    {a-&gt;a-'0'})){\n    if (table.containsKey(i)){\n      s.add(table2[v] + table[i]
    + (i &gt; 3 ? \" \" : \"\" ))\n    } else if (v &gt; 1){\n      s.add(table2[v]
    + table[i%4])\n    } else if (v != 0){\n      s.add(table[i%4])\n    }\n    i++\n
    \ }\n  join(\"\", reverse(s))\n}\n\nprint(\"&gt;&gt;\"); flush(); println(num2K(readLine(System.in)))
    \n"
  :tags:
  - Pnuts
  :references:
    :url: 
    :title: 
- :id: '1790'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1790
  :user_name: es
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/147/
  :language: Scheme
  :time: 2007/08/03 14:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    (use text.tree)
    (use util.list)

    (define (positive-&gt;kansuji n)
      (define (keta-split n keta)
        (receive (q r) (quotient&amp;remainder n keta)
                 (if (&lt; q keta)
                     (if (zero? q)
                         (list r)
                         (list r q))
                     (cons r (keta-split q keta)))))
      (define (add-tanni lst tanni)
        (fold
         (lambda (x t l)
           (cons (list (cond ((and (equal? 1 x) (not (equal? t ""))) "")
                             ((integer? x)
                              (list-ref '("" "一" "二" "三" "四" "五" "六" "七" "八" "九") x))
                             (else x))
                       (if (and (equal? 0 x) (not (equal? t "")))
                           ""
                           t))
                 l))
         '() lst tanni))
      (tree-&gt;string
       (intersperse " " (add-tanni (map (lambda (n)
                                          (add-tanni (keta-split n 10)
                                                     '("" "十" "百" "千")))
                                        (keta-split n 10000))
                                   '("" "万" "億" "兆")))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '1791'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1791
  :user_name: onjo
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/235/
  :language: Common
  :time: 2007/08/03 15:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  寝る前にのぞいたらまた増えてる…ペースはやいですね。とりあえずぐっちゃぐっちゃと回答。うごいてるっぽい。\r\n\r\nDOUKAKU-38&gt;
    (number-to-kanji 1732050807568877)\r\n\"千七百三十二兆五百八億七百五十六万八千八百七十七\"\n\t"
  :code: "(defun number-to-kanji (num)\n  (let ((digit   #(\"零\" \"一\" \"二\" \"三\"
    \"四\" \"五\" \"六\" \"七\" \"八\" \"九\"))\n        (subunit #(\"\" \"十\" \"百\" \"千\"))\n
    \       (unit    #(\"\" \"万\" \"億\" \"兆\")))\n    (loop for i from 0\n          initially
    (if (= num 0) (return (aref digit 0)))\n          for (n m) = (multiple-value-list
    (floor num 10000)) ; 4 桁ずつ区切る\n          until (and (= n 0) (= m 0))\n          for
    value = (loop for j from 0 to 3 ; 位\n                            for x = (mod
    (floor m (expt 10 j)) 10) ; 数字\n                            when (/= x 0) ; 零千
    零百 零十 対策\n                            collect (format nil \"~A~A\" \n                                            ;
    一千 一百 一十 対策\n                                            (if (and (= x 1) (&gt;
    j 0)) \"\" (aref digit x)) \n                                            (aref
    subunit j)))\n           when value appending (cons (aref unit i) value) into
    result\n           do (setf num n)\n           finally (return (apply #'concatenate
    (cons 'string (reverse result)))))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1792'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1792
  :user_name: nobsun
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/03 15:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  昔のコード、漢数字名があるかぎり表示可能\r\n123456789012345678901234567890\r\n=&gt;十二穣三千四百五十六禾予七千八百九十外千二百三十四京五千六百七十八兆九千十二億三千四百五十六万七千八百九十\r\n\r\nData.UTF8
    は手製のライブラリ\r\nhttp://www.sampou.org/cgi-bin/haskell.cgi?nobsun%3autf8\n\t"
  :code: "module Main where\n\nimport System.Environment\nimport Data.List\nimport
    qualified Data.UTF8 as U\n\nmain = do { a:_ &lt;- getArgs\n          ; U.putStrLn
    $ toKanSuuji a\n          }\n\ntoKan,toKan' :: String -&gt; String\ntoKan  = concat
    . reverse .zipWith mkname base10000 \n       . map (concat . reverse . conv4)
    . slices 4\ntoKan' = concat . reverse . zipWith mkname baseBig \n       . map
    toKan . slices 8\n\ntoKanSuuji str\n = case splitAt 52 $ reverse str of\n     (s,\"\")
    -&gt; toKan $ padding 4 s\n     (s,b) -&gt; if length b &gt; 40\n                 then
    \"こんな大きな数の漢字数字名は知りません\"\n                 else (toKan' $ padding 8 b) ++ toKan
    s\n   where\n     padding n s = s ++ replicate ((n - (length s `mod` n)) `mod`
    n) '0'\n\nslices :: Int -&gt; [a] -&gt; [[a]]\nslices n = unfoldr phi\n  where
    phi [] = Nothing\n        phi xs = Just $ splitAt n xs\n\nbase1 = [\"\",\"一\",\"二\",\"三\",\"四\",\"五\",\"六\",\"七\",\"八\",\"九\"]\nbase10
    = [\"\",\"十\",\"百\",\"千\"]\nbase10000 = [\"\",\"万\",\"億\",\"兆\",\"京\",\"外\",\"禾予\",\"穣\",\"溝\",\"澗\",\"正\",\"載\",\"極\"]\nbaseBig
    = [\"恒河沙\",\"阿僧祇\",\"那由多\",\"不可思議\",\"無量大数\"]\n\nconv4 = zipWith mkname' base10
    . map ((base1 !!) . read . (:[]))\n\nmkname \"\" \"\" = \"\"\nmkname \"\" d =
    d\nmkname p \"\" = \"\"\nmkname p d = d++p\n\nmkname' \"\" \"\" = \"\"\nmkname'
    \"\" d = d\nmkname' p \"\" = \"\"\nmkname' p \"一\" = p\nmkname' p d = d++p\n"
  :tags:
  - Haskell
  :references:
    :url: 
    :title: 
- :id: '1793'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1793
  :user_name: yuin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/08/03 15:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  さらに突き詰めてみました。たぶんいけているハズ。\r\n\r\nこの方法だと、どれだけ単位が増えても単純にテーブルに追加するだけでいけます。\n\t"
  :code: |
    def num2kanji(num):
      if num == 0: return u"零"
      num_str = str(num)[::-1]
      s = []
      for n,v in enumerate(map(int, num_str)):
        i = n if n in num2kanji.table else n%4
        sep = i&gt;3 and u" "or""
        if v == 0 and i &gt; 3 and num_str[n:n+4]!=u"0000":
          s.append(num2kanji.table[i]+sep)
        elif v &gt; 1 or (i &gt; 3 and v == 1):
          s.append(num2kanji.table2[v]+num2kanji.table[i]+sep)
        elif v &gt; 0:
          s.append(num2kanji.table[i] or num2kanji.table2[v]+sep)
      return "".join(reversed(s)).rstrip()

    num2kanji.table = {0:u"", 1:u"十",2:u"百",3:u"千",4:u"万",8:u"億",12:u"兆",16:u"京", 20:u"垓",24:u"予", 28:u"穣", 32:u"溝", 36:u"潤", 40:u"正", 44:u"載", 48:u"極", 52:u"恒河沙", 56:u"阿僧祇", 60:u"那由多", 64:u"不可思議", 68:u"無量大数"}
    num2kanji.table2 = {0:u"",1:u"一",2:u"二",3:u"三",4:u"四", 5:u"五", 6:u"六", 7:u"七", 8:u"八", 9:u"九"}

    print num2kanji(input(u"&gt;&gt;"))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1795'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1795
  :user_name: nobsun
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/03 15:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  うへぇ 外じゃなくて 垓 ですね。タトしちゃった。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1796'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1796
  :user_name: yuin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/08/03 16:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ミスってたので修正。\n\t"
  :code: "object num2K {\n  val table = Map(0-&gt;\"\", 1-&gt;\"\\u5341\",2-&gt;\"\\u767e\",3-&gt;\"\\u5343\",4-&gt;\"\\u4e07\",8-&gt;\"\\u5104\",12-&gt;\"\\u5146\",16-&gt;\"\\u4eac\")\n
    \ val table2 = Map(0-&gt;\"\",1-&gt;\"\\u4e00\",2-&gt;\"\\u4e8c\",3-&gt;\"\\u4e09\",4-&gt;\"\\u56db\",
    5-&gt;\"\\u4e94\", 6-&gt;\"\\u516d\", 7-&gt;\"\\u4e03\", 8-&gt;\"\\u516b\", 9-&gt;\"\\u4e5d\")\n
    \ def apply(num:long):String = {\n    if(num == 0) return \"\\u96f6\"\n    val
    numStr = num.toString.reverse.mkString(\"\")\n    val lst = numStr.map(x=&gt;Integer.parseInt(x+\"\"))\n\n
    \   (0 to lst.length-1).foldLeft(List(\"\")){(r, n) =&gt; \n      val i = (if(table.contains(n)){n}else{n%4})\n
    \     val sep = (if(i&gt;3){\" \"}else{\"\"})\n      val v = lst(n)\n      if(v==0
    &amp;&amp; i&gt;3 &amp;&amp; !numStr.substring(n).startsWith(\"0000\")) \n        table(i)::sep::r\n
    \     else if(v &gt; 1 || (i &gt; 3 &amp;&amp; v == 1))\n        table2(v)+table(i)::sep::r\n
    \     else if(v &gt; 0)\n        (if(table(i) == \"\"){table2(v)}else{table(i)})::sep::r\n
    \     else\n        r\n    }.mkString(\"\").trim\n  }\n}\n\nwhile(true) {\n  print(\"&gt;&gt;\")\n
    \ println(num2K(readLong))\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1797'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1797
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2007/08/03 17:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">(n - (length s `mod` n)) `mod` n は (- length
    s) `mod n でよい？\r\n</pre>\n\t"
  :code: |
    -- 「なんとなくlength使いたくない Maybe大好き のオレが来ましたよ」的には
    -- foo s = slices 4 $ padding 4 s
    -- は
    foo s = map (map (fromMaybe '0')) $ takeWhile (isJust.head)
      $ slices 4 $ map Just s ++ repeat Nothing
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1802'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1802
  :user_name: shiro
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/08/03 19:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  「恒河沙」以降が10^8ステップになる流儀があるので、もうちょっと面倒では?\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1803'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1803
  :user_name: shiro
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/08/03 19:53 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  たぶん同じ時に書いたScheme版を発掘。\n\t"
  :code: "(use text.tree)\n\n(define (漢数字 整数)\n  (define 桁 '(\"\" \"\" \"弐\" \"参\"
    \"四\" \"伍\" \"六\" \"七\" \"八\" \"九\"))\n  (define 小位列 '(\"千\" \"百\" \"拾\" \"\"))\n
    \ (define 大位列 '(\"\" \"万\" \"億\" \"兆\" \"京\" \"垓\" \"(禾予)\" \"穰\" \"溝\" \"澗\"
    \"正\"\n                   \"載\" \"極\"))\n  (define 特位列 '(\"恒河砂\" \"阿僧祇\" \"那由多\"
    \"不可思議\" \"無量大数\"))\n  (define 壱恒河砂 (expt 10 52))\n  (define 限界 (expt 10 92))\n\n
    \ (define (小再帰 数 単位 位列)\n    (cond ((zero? 数) '())\n          ((= 数 1) '(\"壱\"))\n
    \         ((&gt;= 数 単位)\n           `(,(list-ref 桁 (quotient 数 単位)) ,(car 位列)\n
    \            ,@(小再帰 (modulo 数 単位) (/ 単位 10) (cdr 位列))))\n          (else (小再帰
    数 (/ 単位 10) (cdr 位列)))))\n\n  (define (大再帰 数 位列)\n    `(,@(if (&gt;= 数 10000)\n
    \           (大再帰 (quotient 数 10000) (cdr 位列))\n            '())\n      ,@(if (zero?
    (modulo 数 10000))\n            '()\n            `(,(小再帰 (modulo 数 10000) 1000
    小位列) ,(car 位列)))))\n\n  (define (特大再帰 数 位列)\n    `(,@(if (&gt;= 数 100000000)\n
    \           (特大再帰 (quotient 数 100000000) (cdr 位列))\n            '())\n      ,@(if
    (zero? (modulo 数 100000000))\n            '()\n            `(,(大再帰 (modulo 数 100000000)
    大位列) ,(car 位列)))))\n\n  (tree-&gt;string\n   (cond ((&gt;= 整数 限界) \"限界突破\")\n
    \        ((&gt;= 整数 壱恒河砂) \n          (list (特大再帰 (quotient 整数 壱恒河砂) 特位列)\n                (大再帰
    (modulo 整数 壱恒河砂) 大位列)))\n         (else (大再帰 整数 大位列))))\n  )\n"
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '1804'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1804
  :user_name: sumim
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/08/04 00:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\n\t"
  :code: |
    | 数 漢数字 |
    数 := 1732050807568877.
    漢数字 := ''.
    #('' 万 億 兆 京) do: [:大位 |
        | 大位の数 |
        大位の数 := ''.
        #('' 十 百 千) do: [:小位 |
            | 小位の数 |
            小位の数 := #('' 一 二 三 四 五 六 七 八 九) at: 数 \\ 10 + 1.
            数 := 数 // 10.
            小位の数 ifNotEmpty: [
                (小位 notEmpty and: [小位の数 = '一']) ifTrue: [小位の数 := ''].
                大位の数 := 小位の数, 小位, 大位の数]].
        大位の数 ifNotEmpty: [漢数字 := 大位の数, 大位, 漢数字]].
    ^漢数字   "=&gt; '千七百三十二兆五百八億七百五十六万八千八百七十七' "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '1809'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1809
  :user_name: kacchi
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/08/04 08:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">M-x number-to-kanji &lt;RET&gt; 1732050807568877
    &lt;RET&gt;\r\n=&gt;千七百三十二兆五百八億七百五十六万八千八百七十七\r\n</pre>\n\t"
  :code: |
    (require 'cl)
    (defun number-to-kanji (str)
      (interactive "sNumber: ")
      (and (&gt; (length str) 52) (error "52桁まで"))
      (labels ((nsplit (str)
                 (labels ((rev (s) (concat (nreverse (mapcar #'identity s)))))
                   (setq str (rev str))
                   (let ((start 0) r)
                     (while (string-match ".\\{1,4\\}" str start)
                       (push (match-string 0 str) r)
                       (setq start (match-end 0)))
                     (mapcar #'rev r))))
               (kanji (str)
                 (apply #'concat
                        (nreverse
                         (mapcar*
                          #'(lambda (i n)
                              (let ((s (nth (string-to-number n)
                                            '("〇" "一" "二" "三" "四" "五" "六" "七" "八" "九"))))
                                (and (&gt; i 0) (string= s "一") (setq s ""))
                                (if (string= s "〇") ""
                                    (concat s (nth i '("" "十" "百" "千"))))))
                          '(0 1 2 3) (nreverse (mapcar #'string str)))))))
        (let ((l (nreverse (mapcar #'kanji (nsplit str)))))
          (funcall
           (if current-prefix-arg #'insert #'message)
           (apply #'concat
                  (nreverse
                   (mapcar* #'(lambda (i s)
                                (concat s (if (string= s "") ""
                                              (nth i '("" "万" "億" "兆" "京" "垓" "(禾予)" "穣" "溝" "澗" "正" "載" "極")))))
                            (number-sequence 0 (- (length l) 1)) l)))))))
  :tags:
  - Emacs22
  :references:
    :url: 
    :title: 
- :id: '1811'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1811
  :user_name: ？せんたくいた
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/241/
  :language: sed
  :time: 2007/08/04 08:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  4桁区切りでまとめる為に行末に\"@\"足して、最後に消して。\r\n\n\t"
  :code: |
    #!/bin/sed -f
    s/$/@/
    s/\([0-9]\)\([0-9]\{12\}@\)/\1兆\2/
    s/\([0-9]\)\([0-9]\{8\}@\)/\1億\2/
    s/\([0-9]\)\([0-9]\{4\}@\)/\1万\2/
    s/\([1-9]\)\([0-9][0-9][0-9][兆億万@]\)/\1千\2/g
    s/\([1-9]\)\([0-9][0-9][兆億万@]\)/\1百\2/g
    s/\([1-9]\)\([0-9][兆億万@]\)/\1十\2/g
    s/1\([兆億万@]\)/一\1/g
    s/[01]//g
    y/23456789/二三四五六七八九/
    s/@$//g
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1812'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1812
  :user_name: talo
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/237/
  :language: Java
  :time: 2007/08/04 08:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">クラスにしてみた。それに伴い機能追加。\r\n・漢数字 -&gt; 数字への変換 (内部的に行う)\r\n・マイナス値への対応\r\n\r\n演算は
    BigInteger のものをそのまま流用しています。</pre>\n\t"
  :code: |
    import java.math.BigInteger;
    import java.util.Map;
    import java.util.HashMap;

    public class JapaneseNumber implements Comparable&lt;JapaneseNumber&gt; {

        private static final Map&lt;Integer, String&gt; UNIT;

        private static final Map&lt;Integer, String&gt; NUM;

        private static final String ZERO;

        static {
            UNIT = new HashMap&lt;Integer, String&gt;();
            UNIT.put(0, ""); UNIT.put(1, "十"); UNIT.put(2, "百"); UNIT.put(3, "千");
            UNIT.put(4, "万"); UNIT.put(8, "億"); UNIT.put(12, "兆"); UNIT.put(16, "京");
            // and so on.....
            ZERO = "零";
            NUM = new HashMap&lt;Integer, String&gt;();
            NUM.put(0, ""); NUM.put(1, "一"); NUM.put(2, "二"); NUM.put(3, "三");
            NUM.put(4, "四"); NUM.put(5, "五"); NUM.put(6, "六"); NUM.put(7, "七");
            NUM.put(8, "八"); NUM.put(9, "九");
        }

        private BigInteger value;

        public JapaneseNumber(BigInteger value) {
            this.value = value;
        }

        /** 負の数は頭に「負」とつける.&lt;br&gt;ex) -1 = 負一 */
        public JapaneseNumber(String jnum) {
            try {
                this.value = decode(new StringBuffer(jnum).reverse().toString());
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        public JapaneseNumber(int value) {
            this(new BigInteger(String.valueOf(value)));
        }

        public JapaneseNumber(long value) {
            this(new BigInteger(String.valueOf(value)));
        }

        private BigInteger decode(String jnum) throws Exception {
            long minus = 1L;
            if (jnum.endsWith("負")) {
                minus = -1L;
                jnum = jnum.substring(0, jnum.length() - 1);
            }
            BigInteger result = BigInteger.ZERO;
            BigInteger unit = BigInteger.ONE;
            BigInteger smallUnit = BigInteger.ONE;
            for (int i = 0; i &lt; jnum.length(); i++) {
                String s = String.valueOf(jnum.charAt(i));
                String next = i + 1 &gt;= jnum.length() ? null : String.valueOf(jnum.charAt(i + 1));
                int key = getKey(UNIT, s);
                if (key &gt; 3) {
                    unit = BigInteger.valueOf((long) Math.pow((double) 10, (double) key));
                } else if (key &gt; 0) {
                    smallUnit = BigInteger.valueOf((long) Math.pow((double) 10, (double) key));
                } else if (NUM.containsValue(s)) {
                    result = result .add(BigInteger.valueOf((long) getKey(NUM, s)).multiply(unit.multiply(smallUnit)));
                    smallUnit = BigInteger.ONE;
                }
                if ((next == null || (!NUM.containsValue(next) &amp;&amp; getKey(UNIT, next) &gt; 3)
                                  || (!NUM.containsValue(next) &amp;&amp; getKey(UNIT, next) &lt;= 3 &amp;&amp; key &lt;= 3))
                        &amp;&amp; key &gt; 0) {
                    result = result.add(unit.multiply(smallUnit));
                    smallUnit = BigInteger.ONE;
                }
            }
            return result.multiply(BigInteger.valueOf(minus));
        }

        private int getKey(Map&lt;Integer, String&gt; map, String value) {
            for (Map.Entry&lt;Integer, String&gt; entry : map.entrySet()) {
                if (entry.getValue().equals(value)) {
                    return entry.getKey();
                }
            }
            return 0;
        }

        public JapaneseNumber add(JapaneseNumber val) {
            return new JapaneseNumber(this.value.add(val.value));
        }

        public JapaneseNumber sub(JapaneseNumber val) {
            return new JapaneseNumber(this.value.subtract(val.value));
        }

        public JapaneseNumber mul(JapaneseNumber val) {
            return new JapaneseNumber(this.value.multiply(val.value));
        }

        public JapaneseNumber div(JapaneseNumber val) {
            return new JapaneseNumber(this.value.divide(val.value));
        }

        public JapaneseNumber rem(JapaneseNumber val) {
            return new JapaneseNumber(this.value.remainder(val.value));
        }

        public int compareTo(JapaneseNumber o) {
            return value.compareTo(o.value);
        }

        @Override
        public boolean equals(Object o) {
            if (o instanceof JapaneseNumber &amp;&amp;
                    ((JapaneseNumber) o).value.equals(this.value)) {
                return true;
            }
            return false;
        }

        @Override
        public int hashCode() {
            return this.value.hashCode();
        }

        @Override
        public String toString() {
            if (value.equals(BigInteger.ZERO)) {
                return this.ZERO;
            }
            String s = new StringBuffer(value.toString()).reverse().toString();
            StringBuffer sb = new StringBuffer();
            String minus = "";
            if (s.endsWith("-")) {
                minus = "負";
                s = s.substring(0, s.length() - 1);
            }
            for (int i = 0; i &lt; s.length(); i++) {
                int n = Integer.parseInt(String.valueOf(s.charAt(i)));
                int key = UNIT.containsKey(i) ? i : i % 4;
                if (n == 0 &amp;&amp; key &gt; 3 &amp;&amp; !s.substring(n, n + 4).equals("0000")) {
                    sb.append(UNIT.get(key));
                } else if (n &gt; 1 || (key &gt; 3 &amp;&amp; n == 1)) {
                    sb.append(UNIT.get(key)).append(NUM.get(n));
                } else if (n &gt; 0) {
                    sb.append(!UNIT.get(key).equals("") ?  UNIT.get(key) : NUM.get(n));
                }
            }
            sb.append(minus);
            return sb.reverse().toString();
        }

        public static void main(String[] args) {
            JapaneseNumber n1 = new JapaneseNumber(new BigInteger("748718000431734"));
            JapaneseNumber n2 = new JapaneseNumber("三");
            JapaneseNumber n3 = new JapaneseNumber(new BigInteger("-748718000431734"));
            JapaneseNumber n4 = new JapaneseNumber("負三");
            System.out.println(n1 + " たす " + n4 + " は " + n1.add(n4));
            System.out.println(n3 + " ひく " + n2 + " は " + n3.sub(n2));

    // 実行結果
    // 七百四十八兆七千百八十億四十三万千七百三十四 たす 負三 は 七百四十八兆七千百八十億四十三万千七百三十一
    // 負七百四十八兆七千百八十億四十三万千七百三十四 ひく 三 は 負七百四十八兆七千百八十億四十三万千七百三十七
        }

    }
  :tags:
  - ネタ
  :references:
    :url: 
    :title: 
- :id: '1814'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1814
  :user_name: ？せんたくいた
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/241/
  :language: sed
  :time: 2007/08/04 11:34 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  一兆一あたりでNG。億と万を取り除かないと。\r\n\n\t"
  :code: |
    #!/bin/sed -f
    s/$/@/
    s/\([0-9]\)\([0-9]\{12\}@\)/\1兆\2/
    s/\([0-9]\)\([0-9]\{8\}@\)/\1億\2/
    s/\([0-9]\)\([0-9]\{4\}@\)/\1万\2/
    s/\([1-9]\)\([0-9][0-9][0-9][兆億万@]\)/\1千\2/g
    s/\([1-9]\)\([0-9][0-9][兆億万@]\)/\1百\2/g
    s/\([1-9]\)\([0-9][兆億万@]\)/\1十\2/g
    s/1\([兆億万@]\)/一\1/g
    s/[01]//g
    y/23456789/二三四五六七八九/
    s/億万/億/
    s/兆億/兆/
    s/@$//
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1815'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1815
  :user_name: iwk
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/08/04 12:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #light
    let nums = ["";"一";"二";"三";"四";"五";"六";"七";"八";"九"]
    let ords = ["";"十";"百";"千"]
    let us = ["";"万";"億";"兆"]

    let rec zipWith z xs ys =
        match xs,ys with
         | _,[] -&gt; []
         | [],_ -&gt; []
         | x::xs',y::ys' -&gt; (z x y)::(zipWith z xs' ys')

    let kanjiName nss =
        let knss = List.map (List.map (List.nth nums)) nss
        let rnss = List.map List.rev knss
        let named_rnss = List.map (zipWith (fun o n -&gt; n ^ o) ords) rnss
        let knss = List.map List.rev named_rnss
        List.map (String.concat "") knss
         |&gt; List.rev
         |&gt; (zipWith (fun o n -&gt; n ^ o) us)
         |&gt; List.rev
         |&gt; String.concat ""

    let toKanji n =
        let rec iterate b res num =
            if num = 0 then res
            else iterate b ((num%b)::res) (num/b)
        List.map (iterate 10 []) (iterate 10000 [] n)
        |&gt; kanjiName
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '1816'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1816
  :user_name: yuin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/82/
  :language: 
  :time: 2007/08/04 13:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ありゃそうなんですか・・・日本の単位も奥深いですねえ。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1836'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1836
  :user_name: katsu
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/08/04 16:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">みなさんおひさしぶりです。\r\n数値処理無しで動いています。\r\n差分リストっぽいところは、DCG使ってます。\r\n最後にガード'也'を外すところが格好悪いです。\r\nしかし、prologらしいさって一体なんでしょうね。</pre>\n\t"
  :code: |
    :-encoding('utf8').

    tr(I,R):-atom_chars(I,I1),tr(I1,_,_,R0),delete(R0,'也',R1),atom_chars(R,R1).

    tr([],B2,B1,[]):-trb1(B1),trb2(B2).
    tr([I|Is],B2,B1,R):-
            tr(Is,B2s,[B1c|B1],Rs),
            succB2(B1c,B2s,B2),
            trnr(B1c,B2s,Rs,I,R,Rs).

    succB2('千')--&gt;!,[_].
    succB2(_)--&gt;[].

    b2(B,Rs)--&gt;{member(B,Rs)},[].
    b2(B,_)--&gt;[B].

    trnr(_,_,_,'0')--&gt;!,[].
    trnr(' ',[B2|_],R,I)--&gt;trns(I),[],b2(B2,R).
    trnr(B1,[B2|_],R,I)--&gt;trns(I),[B1],b2(B2,R).

    trns(1)--&gt;!,[].
    trns(I)--&gt;trn(I).

                            trn('1')--&gt;[].
    trn('2')--&gt;['二'].      trn('3')--&gt;['三'].
    trn('4')--&gt;['四'].      trn('5')--&gt;['五'].
    trn('6')--&gt;['六'].      trn('7')--&gt;['七'].
    trn('8')--&gt;['八'].      trn('9')--&gt;['九'].

    trb1(L):-L=[' ','十','百','千'|L].

    trb2(['也','万','億','兆']).

    :-tr('1732050807568877',X),writeln(X).
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '1848'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1848
  :user_name: hamano
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/25/
  :language: C
  :time: 2007/08/04 19:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「1732050807568877」 は正しく表示されますがその他のケースに自信が無いです^^;</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;ctype.h&gt;

    char *knum[] = {"" , "一", "二", "三", "四", "五", "六", "七", "八", "九"};
    char *ksuffix[] = {"十", "百", "千"};
    char *ksuffix2[] = {"", "万", "億", "兆"};

    int main(int argc, char *argv[]){
        int i;
        size_t len;
        char *num;
        if(argc &lt; 2){
            fprintf(stderr, "too few argument\n");
            return EXIT_FAILURE;
        }
        len = strlen(num = argv[1]);
        if(len &gt; 16) return EXIT_FAILURE;
        for(i=0;i&lt;len; i++){
            if(!isdigit((int)num[i])) continue;
            if((len - i - 1) % 4){
                if(num[i] != '1')
                    printf("%s", knum[num[i] - '0']);
                if(num[i] != '0')
                    printf("%s", ksuffix[(len - i - 1) % 4 - 1]);
            }else{
                printf("%s", knum[num[i] - '0']);
                printf("%s", ksuffix2[(len - i - 1) / 4]);
            }
        }
        printf("\n");
        return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1873'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1873
  :user_name: smeghead
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/08/05 13:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  再帰で書いてみましたが、かなり複雑になってしまいました。loop向きの問題でした。\n\t"
  :code: "(defvar *kanji-digits* #(\"\" \"一\" \"二\" \"三\" \"四\" \"五\" \"六\" \"七\"
    \"八\" \"九\"))\n(defvar *kanji-10000-units* #(\"\" \"万 \" \"億 \" \"兆 \" \"京 \"))\n(defvar
    *kanji-units* #(\"\" \"十\" \"百\" \"千\"))\n\n(defun n-kanji (c unit)\n  (concatenate
    \n    'string\n    (cond ((and (equal c \"1\") (&gt; (mod unit 4) 0)) \"\")\n
    \         (t (aref *kanji-digits* (parse-integer c))))\n    (cond ((not (equal
    c \"0\"))\n           (aref *kanji-units* (mod unit 4))))))\n(defun nnnn-kanji
    (str unit kanji)\n  (if (zerop (length str))\n    kanji\n    (nnnn-kanji\n      (subseq
    str 1) \n      (1+ unit)\n      (concatenate 'string (n-kanji (subseq str 0 1)
    unit) kanji))))\n(defun number-kanji (str)\n  (if (equal str \"0\") \"零\"\n    (labels
    ((rec (str unit kanji)\n                  (let ((len (length str)))\n                    (if
    (zerop len)\n                      kanji\n                      (let ((sub-str
    (if (&gt; len 4) (subseq str 0 4) (subseq str 0 len))))\n                        (rec
    (if (&gt; len 4) (subseq str 4) \"\")\n                             (+ unit 4)\n
    \                            (concatenate\n                               'string
    \n                               (if (equal sub-str (make-string (length sub-str)
    :initial-element #\\0))\n                                 \"\"\n                                 (concatenate
    \n                                   'string\n                                   (nnnn-kanji
    sub-str unit \"\")\n                                   (cond ((&gt; (mod unit
    4) 0) \"\")\n                                         (t (aref *kanji-10000-units*
    (floor unit 4))))))\n                               kanji)))))))\n      (rec (reverse
    str) 0 \"\"))))\n\n(defun main ()\n  (loop as n = (progn\n                 (format
    t \"input number:\")\n                 (read-line *standard-input* nil nil))\n
    \       do (handler-case \n             (progn \n               (if (equal (string-trim
    '(#\\Space #\\Tab #\\Newline) n) \"\") (return))\n               (format t \"~a~%\"
    (number-kanji n)))\n             (error (c) (format t \"error! it isn't integer.~%\")))))\n(main)\n"
  :tags:
  - clisp
  :references:
    :url: 
    :title: 
- :id: '1890'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1890
  :user_name: shimakuma
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/08/05 21:42 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  正規表現で強引に。\n\t"
  :code: "alert((function(n){\n\tif(!(n = parseInt(n))) return \"零\";\n\t(n = n.toString(10).split(\"\")).reverse();\n\tvar
    d = \"零一二三四五六七八九\";\n\tvar u = \"`万億兆京垓\\u79ED穣溝潤正載極恒阿那不無'\".split(\"\").join(\"十百千\");\n\tfor(var
    r = \"\", i = n.length; i--;) r += d.charAt(n[i]) + u.charAt(i);\n\treturn r.replace(/(?:零[十百千]?){4}.|零[十百千]?|一(?=[十百千])|.*'|`/g,
    \"\");\n})(prompt(\"\", Math.round(1e+16 * Math.random()))));\n"
  :tags:
  - Firefox
  - IE
  :references:
    :url: 
    :title: 
- :id: '1898'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1898
  :user_name: jz5
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/06 02:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Longの範囲は対応できてると思う。</pre>\n\t"
  :code: |
    Public Function ConvertToKanjiNumber(ByVal number As Long) As String

        If number = 0 Then
            Return "零"
        End If

        Dim unit1() As String = {"万", "億", "兆", "京"}
        Dim unit2() As String = {"十", "百", "千"}
        Dim kjnum As String = "一二三四五六七八九"

        Dim numStr As String = number.ToString
        Dim length As Integer

        Dim sb As New System.Text.StringBuilder
        Dim appended As Boolean = False

        If numStr.StartsWith("-") Then
            sb.Append("マイナス")
            numStr = numStr.Substring(1)
        End If

        length = numStr.Length

        For i As Integer = length - 1 To 0 Step -1

            Dim n As Integer = CInt(numStr.Substring(length - i - 1, 1))

            If n &gt; 1 OrElse (n = 1 AndAlso (i Mod 4) = 0) Then
                sb.Append(kjnum.Chars(n - 1))
                appended = True
            End If

            If n &lt;&gt; 0 AndAlso (i Mod 4) &gt; 0 Then
                sb.Append(unit2(i Mod 4 - 1))
                appended = True
            End If

            If appended AndAlso i \ 4 &gt; 0 AndAlso (i Mod 4) = 0 Then
                sb.Append(unit1(i \ 4 - 1))
                appended = False
            End If

        Next

        Return sb.ToString

    End Function
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1901'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1901
  :user_name: kaorun
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/61/
  :language: Other
  :time: 2007/08/06 02:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">10桁までしか行けないけど、まーたまにはVBA(Word)があってもいいじゃまいか...。\r\n\r\n(ちなみに、手作業で入れるときは、文書内でCtrl
    + F9を押下、{}が出たら、FILLIN  \"Enter Number\"  \\* DBNUM2 を入力。F9押下)</pre>\n\t"
  :code: |
    Sub InsertDBNum2()
        Selection.Fields.Add Range:=Selection.Range, Type:=wdFieldFillIn, Text:="""数値を入力""  \* DBNUM2", PreserveFormatting:=False
    End Sub
  :tags:
  - FieldCode
  - VBA
  - Word
  :references:
    :url: 
    :title: 
- :id: '1904'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1904
  :user_name: cats
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/08/06 03:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    class Program
    {
      static void Main()
      {
        Console.WriteLine(Number2Kanji(1732050807568877));
      }
      static string Number2Kanji(long n)
      {
        string[] ss = { "", "万", "億", "兆" };
        string[] tt = { "", "十", "百", "千" };
        string[] nn = { "", "", "二", "三", "四", "五", "六", "七", "八", "九" };
        string s = "";
        int k = 0;
        while (n &gt; 0)
        {
        int m = (int)(n % 10000);
        n /= 10000;
        string t = "";
        int l = 0;
        while (m &gt; 0)
        {
          string u = tt[l++];
          int q = m % 10;
          if (q == 0) u = "";
          else if (q == 1 &amp;&amp; l == 1) u = "一";
          t = nn[q] + u + t;
          m /= 10;
        }
          s = t + (string.IsNullOrEmpty(t) ? "" : ss[k++]) + s;
        }
        return string.IsNullOrEmpty(s) ? "零" : s;
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1912'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1912
  :user_name: jz5
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/344/
  :language: 
  :time: 2007/08/06 04:54 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  10000とかだと うまくいかないようです。\r\nn % 10000が0だと桁の単位が上がらないのかな？\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1945'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1945
  :user_name: kkobayashi
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/06 14:50 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">いろいろな書き方があって面白いですね。\r\nRで書くならmatrixでしょうか。\r\n(n
    x 4)のmatrixを作って、単位を穴埋めしています。\r\n\r\nあまり大きな数を数値のまま入れると扱えないので（Rの仕様っぽい）\r\n文字で入れる必要があります。\r\n\r\n&gt;
    japanese.expression(1732050807568877)\r\n[1] \"千七百三十二兆五百八億七百五十六万八千八百七十七\"\r\n&gt;
    japanese.expression(1111111111111111)\r\n[1] \"千百十一兆千百十一億千百十一万千百十一\"\r\n&gt; japanese.expression(9999999999999999)
    # =&gt; 1e+16になる\r\n[1] \"一万NA千NA百十六\"\r\nWarning message:\r\n 強制変換により NA が生成されました
    in:\r\nas.integer.default(rev(unlist(strsplit(as.character(x), \"\"))))\r\n&gt;
    japanese.expression(\"9999999999999999\")\r\n[1] \"九千九百九十九兆九千九百九十九億九千九百九十九万九千九百九十九\"</pre>\n\t"
  :code: |
    japanese.expression &lt;- function(x){
       if(x == "0") return("零")
       list1 &lt;- c("", "一", "二", "三", "四", "五", "六", "七", "八", "九")
       list2 &lt;- c("", "十", "百", "千")
       list3 &lt;- c("", "万", "億", "兆")

       number   &lt;- as.integer(rev(unlist(strsplit(as.character(x), ""))))
       number   &lt;- matrix(c(number, numeric((4-length(number))%%4)), 4)
       list2mat &lt;- matrix(list2, nrow(number), ncol(number))
       list2mat[number==0] &lt;- ""
       number[2:4,][number[2:4,] == 1] &lt;- 0
       paste(rev(paste(rbind(list3[1:ncol(number)], apply(number, 2, function(n)(list1[n+1]))),
                       rbind("", list2mat), sep="")), collapse="")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1963'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1963
  :user_name: Mistfeal
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/153/
  :language: PHP
  :time: 2007/08/07 04:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  PHP4だと str_split が使えないので自作しました。PHP5の場合は素直に str_split を使ってください。\n\t"
  :code: "&lt;?php\nfunction Arab2Kan($num) {\n\t$num_ary = array(\"1\"=&gt;\"一\",\"2\"=&gt;\"二\",\"3\"=&gt;\"三\",\"4\"=&gt;\"四\",\"5\"=&gt;\"五\",\"6\"=&gt;\"六\",\"7\"=&gt;\"七\",\"8\"=&gt;\"八\",\"9\"=&gt;\"九\");\n\t$dig_ary
    = array(\"0\"=&gt;\"\",\"1\"=&gt;\"十\",\"2\"=&gt;\"百\",\"3\"=&gt;\"千\");\n\t$unt_ary
    = array(\"0\"=&gt;\"\",\"1\"=&gt;\"万\",\"2\"=&gt;\"億\",\"3\"=&gt;\"兆\");\n\t$splt_num
    = str_split4(strrev($num),4);\n\tfor ( $i = 0; $i &lt; 4; $i++ ) {\n\t\t$unit
    = \"\";\n\t\t$splt_num[$i] = @str_split4($splt_num[$i]);\n\t\tfor ( $j = 0; $j
    &lt; 4; $j++ ) {\n\t\t\tif ( $splt_num[$i][$j] != \"0\" ) {\n\t\t\t\tif ( $splt_num[$i][$j]
    != \"1\" ) {\n\t\t\t\t\t$unit = $num_ary[$splt_num[$i][$j]].$dig_ary[$j].$unit;\n\t\t\t\t}elseif
    ( $i == 0 ) {\n\t\t\t\t\t$unit = $num_ary[$splt_num[$i][$j]].$dig_ary[$j].$unit;\n\t\t\t\t}else
    {\n\t\t\t\t\t$unit = $dig_ary[$j].$unit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$unit
    .= $unt_ary[$i];\n\t\t$rtn = $unit.$rtn;\n\t}\n\treturn $rtn;\n}\n\nfunction str_split4($val,$div)
    {\n\tif ( $div &gt; 0 ) {\n\t\t$up = $div;\n\t}else {\n\t\t$up = 1;\n\t}\n\tfor
    ( $i = 0; $i &lt; strlen($val); $i += $up ) {\n\t\t$rtn[] = substr($val,$i,$up);\n\t}\n\treturn
    $rtn;\n}\n\necho Arab2Kan(\"1732050807568877\");\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1965'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1965
  :user_name: Mistfeal
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/153/
  :language: 
  :time: 2007/08/07 04:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  バグを発見したので修正します。\r\n14行目を以下に置き換えてください。\r\n\r\n}elseif ( $i == 0 &amp;&amp;
    $j == 0 ) {\r\n\r\nテストはちゃんとやりましょうorz\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1966'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1966
  :user_name: Mistfeal
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/153/
  :language: PHP
  :time: 2007/08/07 04:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  バグにバグを重ねてるし・・・orz\r\nこれが正解です。\n\t"
  :code: "&lt;?php\nfunction Arab2Kan($num) {\n\t$num_ary = array(\"1\"=&gt;\"一\",\"2\"=&gt;\"二\",\"3\"=&gt;\"三\",\"4\"=&gt;\"四\",\"5\"=&gt;\"五\",\"6\"=&gt;\"六\",\"7\"=&gt;\"七\",\"8\"=&gt;\"八\",\"9\"=&gt;\"九\");\n\t$dig_ary
    = array(\"0\"=&gt;\"\",\"1\"=&gt;\"十\",\"2\"=&gt;\"百\",\"3\"=&gt;\"千\");\n\t$unt_ary
    = array(\"0\"=&gt;\"\",\"1\"=&gt;\"万\",\"2\"=&gt;\"億\",\"3\"=&gt;\"兆\");\n\t$splt_num
    = str_split4(strrev($num),4);\n\tfor ( $i = 0; $i &lt; 4; $i++ ) {\n\t\t$unit
    = \"\";\n\t\t$splt_num[$i] = @str_split4($splt_num[$i]);\n\t\tfor ( $j = 0; $j
    &lt; 4; $j++ ) {\n\t\t\tif ( $splt_num[$i][$j] != \"0\" ) {\n\t\t\t\tif ( $splt_num[$i][$j]
    != \"1\" ) {\n\t\t\t\t\t$unit = $num_ary[$splt_num[$i][$j]].$dig_ary[$j].$unit;\n\t\t\t\t}elseif
    ( $j == 0 ) {\n\t\t\t\t\t$unit = $num_ary[$splt_num[$i][$j]].$dig_ary[$j].$unit;\n\t\t\t\t}else
    {\n\t\t\t\t\t$unit = $dig_ary[$j].$unit;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$unit
    .= $unt_ary[$i];\n\t\t$rtn = $unit.$rtn;\n\t}\n\treturn $rtn;\n}\n\nfunction str_split4($val,$div)
    {\n\tif ( $div &gt; 0 ) {\n\t\t$up = $div;\n\t}else {\n\t\t$up = 1;\n\t}\n\tfor
    ( $i = 0; $i &lt; strlen($val); $i += $up ) {\n\t\t$rtn[] = substr($val,$i,$up);\n\t}\n\treturn
    $rtn;\n}\n\necho Arab2Kan(\"1732050807518817\");\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1967'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/1967
  :user_name: naoya_t
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/08/07 05:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "BEGIN {\n\tsplit(\"一 二 三 四 五 六 七 八 九\", digit, \" \")  # digit[1] = \"一\"\n}\n\n/^$/
    { exit } # 空行の入力で終了\n\n/^[0-9]*$/ {\n\tif (length($1) &gt; 16) {\n\t\tprint \"一京以上の数字には対応しておりません。\"\n\t\tnext\n\t}\n\n\ttmp
    = \"0000000000000000\" $1\n\tpadded = substr(tmp, length(tmp)-16+1, 16) # 先頭を
    0 で埋めてある\n\tketa = length(padded)\n\n\ts = \"\"\n\n\tchou = substr(padded,1,4)\n\tif
    (0 + chou) s = s kan(chou) \"兆\"\n\n\toku  = substr(padded,5,4)\n\tif (0 + oku)
    s = s kan(oku) \"億\"\n\n\tman  = substr(padded,9,4)\n\tif (0 + man) s = s kan(man)
    \"万\"\n\n\tichi = substr(padded,13,4)\n\tif (0 + ichi) s = s kan(ichi)\n\n\tif
    (s ‾ /^$/) s = \"零\"\n\n\tprint s\n}\n\nfunction kan(padded,    s,sen,hyaku,juu,ichi)\n{\n\ts
    = \"\"\n\n\tsen = 0 + substr(padded,1,1)\n\tif (sen) {\n\t\tif (sen &gt; 1) s
    = s digit[sen]\n\t\ts = s \"千\"\n\t}\n\n\thyaku = 0 + substr(padded,2,1)\n\tif
    (hyaku) {\n\t\tif (hyaku &gt; 1) s = s digit[hyaku]\n\t\ts = s \"百\"\n\t}\n\n\tjuu
    = 0 + substr(padded,3,1)\n\tif (juu) {\n\t\tif (juu &gt; 1) s = s digit[juu]\n\t\ts
    = s \"十\"\n\t}\n\n\tichi = 0 + substr(padded,4,1)\n\tif (ichi) s = s digit[ichi]\n\n\treturn
    s\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2037'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2037
  :user_name: rubikitch
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/08/08 19:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  小学校時代、図書室に数の本があって無量大数まで覚えたものだった。\n\t"
  :code: |
    $KCODE='e'
    def under10000(n)
      unit = ["千", "百", "十", ""]
      nums = %w[〇 一 二 三 四 五 六 七 八 九]
      n = format("%04d", n.to_i)
      unless n == '0000'
        (0...4).inject("") {|accm, i|
          case n[i]
          when ?0
            accm
          when ?1
            if i==3
              accm &lt;&lt; nums[n[i]-?0] &lt;&lt; unit[i]
            else
              accm &lt;&lt; unit[i]
            end
          else
            accm &lt;&lt; nums[n[i]-?0] &lt;&lt; unit[i]
          end
        }
      end
    end

    def japanese(n)
      return "〇" if n.to_s == '0'
      raise "too large number!" if n.to_s.length &gt; 52
      unit = ["極", "載", "正", "澗", "溝", "穣", "(禾予)", "垓", "京", "兆", "億", "万", ""]
      splitted = n.to_s.reverse.scan(/.{1,4}/).map{|s| s.reverse}.reverse
      splitted.unshift(*([nil]*(unit.length-splitted.length)))
      (0...unit.length).inject("") {|accm, i|
        sub = under10000(splitted[i])
        if sub
          accm &lt;&lt; sub &lt;&lt; unit[i]
        else
          accm
        end
      }
    end

    japanese 0                      # =&gt; "〇"
    japanese 1                      # =&gt; "一"
    japanese 10                     # =&gt; "十"
    japanese 1125                   # =&gt; "千百二十五"
    japanese 1111                   # =&gt; "千百十一"
    japanese 2204                 # =&gt; "二千二百四"
    japanese 1234567890 # =&gt; "十二億三千四百五十六万七千八百九十"
    japanese 1732050807568877       # =&gt; "千七百三十二兆五百八億七百五十六万八千八百七十七"
    japanese 1732050807568877193747198374282342374230983482393942 # =&gt; "千七百三十二極五百八載七百五十六正八千八百七十七澗千九百三十七溝四千七百十九穣八千三百七十四(禾予)二千八百二十三垓四千二百三十七京四千二百三十兆九千八百三十四億八千二百三十九万三千九百四十二"
    japanese 1000000000000000000000000000000000000000000000000000 # =&gt; "千極"
    japanese "1000000000000000000000000000000000000000000000000000" # =&gt; "千極"
    japanese 1000000000200000000000000300000000400000000050054001 # =&gt; "千極二十正三百(禾予)四十京五千五万四千一"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2038'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2038
  :user_name: rubikitch
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/08/08 20:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    (defpackage doukaku38 (:use common-lisp ) (:export :japanese)
    (in-package :doukaku38)

    (let ((unit #("千" "百" "十" ""))
          (nums #("〇" "一" "二" "三" "四" "五" "六" "七" "八" "九")))
      (defun %under10000 (n)
        (setf n (format nil "~04d" n))
        (unless (string= n "   0")
          (loop for i from 0 below 4
             for n-i = (aref n i)
             collecting
               (case n
                 ((#\0 #\ )   "")
                 (#\1
                  (if (= i 3)
                      (concatenate 'string (aref nums 1) (aref unit i))
                      (aref unit i)))
                 (t
                  (concatenate 'string (aref nums (- (char-code n-i) (char-code #\0)))
                               (aref unit i)))) into accum
             finally (return (apply #'concatenate 'string accum))))))

    (let ((unit #("極" "載" "正" "澗"  "溝" "穣"  "(禾予)" "垓"  "京" "兆" "億" "万" "")))
      (defun %split (n)
        (loop
           for i downfrom (* 4 (1- (length unit))) to 0 by 4
           for d = (expt 10 i)
           for (q r) = (multiple-value-list (floor n d))
           do (setf n r)
           collecting q))
      (defun japanese (n)
        (cond ((&gt; n 10000000000000000000000000000000000000000000000000000)
               (error "too large number!"))
              ((zerop n) "〇")
              (t (loop for u across unit
                    for u10000 in (%split n)
                    for sub = (%under10000 u10000)
                    collecting (if sub (concatenate 'string sub u) "") into accum
                    finally (return (apply #'concatenate 'string accum)))))))

    (japanese 0)                            ; =&gt; "〇"
    (japanese 1)                            ; =&gt; "一"
    (japanese 10)                           ; =&gt; "十"
    (japanese 1125)                         ; =&gt; "千百二十五"
    (japanese 1111)                         ; =&gt; "千百十一"
    (japanese 2204)                         ; =&gt; "二千二百四"
    (japanese 1234567890)                   ; =&gt; "十二億三千四百五十六万七千八百九十"
    (japanese 1732050807568877)             ; =&gt; "千七百三十二兆五百八億七百五十六万八千八百七十七"
    (japanese 1732050807568877193747198374282342374230983482393942) ; =&gt; "千七百三十二極五百八載七百五十六正八千八百七十七澗千九百三十七溝四千七百十九穣八千三百七十四(禾予)二千八百二十三垓四千二百三十七京四千二百三十兆九千八百三十四億八千二百三十九万三千九百四十二"
    (japanese 1000000000000000000000000000000000000000000000000000) ; =&gt; "千極"
    (japanese 1000000000200000000000000300000000400000000050054001) ; =&gt; "千極二十正三百(禾予)四十京五千五万四千一"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2039'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2039
  :user_name: rubikitch
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/08/08 20:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ↑から修正。んー、おかしいな、テスト時はうまくいってたのに…\n\t"
  :code: |
    (defpackage doukaku38 (:use common-lisp ) (:export :japanese))
    (in-package :doukaku38)

    (let ((unit #("千" "百" "十" ""))
          (nums #("〇" "一" "二" "三" "四" "五" "六" "七" "八" "九")))
      (defun %under10000 (n)
        (setf n (format nil "~04d" n))
        (unless (string= n "   0")
          (loop for i from 0 below 4
             for n-i = (aref n i)
             collecting
               (case n-i
                 ((#\0 #\ )   "")
                 (#\1
                  (if (= i 3)
                      (concatenate 'string (aref nums 1) (aref unit i))
                      (aref unit i)))
                 (t
                  (concatenate 'string (aref nums (- (char-code n-i) (char-code #\0)))
                               (aref unit i)))) into accum
             finally (return (apply #'concatenate 'string accum))))))

    (let ((unit #("極" "載" "正" "澗"  "溝" "穣"  "(禾予)" "垓"  "京" "兆" "億" "万" "")))
      (defun %split (n)
        (loop
           for i downfrom (* 4 (1- (length unit))) to 0 by 4
           for d = (expt 10 i)
           for (q r) = (multiple-value-list (floor n d))
           do (setf n r)
           collecting q))
      (defun japanese (n)
        (cond ((&gt; n 10000000000000000000000000000000000000000000000000000)
               (error "too large number!"))
              ((zerop n) "〇")
              (t (loop for u across unit
                    for u10000 in (%split n)
                    for sub = (%under10000 u10000)
                    collecting (if sub (concatenate 'string sub u) "") into accum
                    finally (return (apply #'concatenate 'string accum)))))))

    (japanese 0)                            ; =&gt; "〇"
    (japanese 1)                            ; =&gt; "一"
    (japanese 10)                           ; =&gt; "十"
    (japanese 1125)                         ; =&gt; "千百二十五"
    (japanese 1111)                         ; =&gt; "千百十一"
    (japanese 2204)                         ; =&gt; "二千二百四"
    (japanese 1234567890)                   ; =&gt; "十二億三千四百五十六万七千八百九十"
    (japanese 1732050807568877)             ; =&gt; "千七百三十二兆五百八億七百五十六万八千八百七十七"
    (japanese 1732050807568877193747198374282342374230983482393942) ; =&gt; "千七百三十二極五百八載七百五十六正八千八百七十七澗千九百三十七溝四千七百十九穣八千三百七十四(禾予)二千八百二十三垓四千二百三十七京四千二百三十兆九千八百三十四億八千二百三十九万三千九百四十二"
    (japanese 1000000000000000000000000000000000000000000000000000) ; =&gt; "千極"
    (japanese 1000000000200000000000000300000000400000000050054001) ; =&gt; "千極二十正三百(禾予)四十京五千五万四千一"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2050'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2050
  :user_name: 匿名
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/09 16:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  マイナスの数には対応していません。とりあえず題意は満たしていると思います。\n\t"
  :code: "public class Sample {\n    static final char[] 数字 = {'〇', '一', '二', '三',
    '四', '五', '六', '七', '八', '九'};\n    static final String[] 桁 = {\"千\", \"百\", \"十\",
    \"\"};\n    static final int[] 桁数 = {1000, 100, 10, 1};\n    static final String[]
    万桁 = {\"京\", \"兆\", \"億\", \"万\", \"\"};\n    static final long[] 万桁数 = {(long)1e16,
    (long)1e12, (long)1e8, (long)1e4, 1};\n    \n    public static String 漢数字(long
    val) {\n        StringBuffer 結果 = new StringBuffer();\n        for (int i = 0;
    i &lt; 万桁.length; i++) {\n            long val2 = val / 万桁数[i];\n            if
    (val2 &gt; 0) {\n                for (int j = 0; j &lt; 桁.length; j++) {\n                    int
    val3 = (int)val2 / 桁数[j];\n                    if (val3 &gt; 0) {\n                        if
    (val3 != 1 || 桁[j] == \"\") {\n                            結果.append(数字[val3]);\n
    \                       }\n                        結果.append(桁[j]);\n                    }\n
    \                   val2 %= 桁数[j];\n                }\n                結果.append(万桁[i]);\n
    \           }\n            val %= 万桁数[i];\n        }\n        return 結果.toString();\n
    \   }\n\n    public static void main(String[] args) {\n        System.out.println(漢数字(Long.parseLong(args[0])));\n
    \   }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2055'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2055
  :user_name: nskj77
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/375/
  :language: Haskell
  :time: 2007/08/10 04:06 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  System.IO.UTF8をつかって。\n\t"
  :code: |
    import System.IO.UTF8 as U

    nsplit :: Int -&gt; String -&gt; [String]
    nsplit _ [] = []
    nsplit n ss | n == 0    = [ss]
                | otherwise = let (x,xs) = splitAt n ss in x:nsplit n xs

    rnsplit :: Int -&gt; String -&gt; [String]
    rnsplit n = reverse . map reverse . nsplit n . reverse

    suppress n c s = reverse $ take n $ reverse s ++ repeat c

    kansuuji = ["零","一","二","三","四","五","六","七","八","九"]
    keta1 = reverse ["","十","百","千"]
    keta2 n = reverse $ take n ["", "萬","億","兆","京"]

    addK1 :: String -&gt; String -&gt; String
    addK1 "一" "十"  = "十"
    addK1 "一" "百"  = "百"
    addK1 "一" "千"  = "千"
    addK1 "零" _  = ""
    addK1 x y     = x ++ y

    f :: Integer -&gt; IO ()
    f = U.putStrLn . concatMap (++" ") . k2 . k1 . rnsplit 4 . reads . show
      where reads = concatMap ((!!) kansuuji . read) . ss
            fmt   = map (suppress 4 '零')
            k1    = map (concat . zipWith (flip addK1) keta1 . ss) . fmt
            k2 xs = zipWith addK1 xs (keta2 (length xs))
            ss    = map (flip (:) [])
  :tags:
  - Haskell
  :references:
    :url: /web/20080225222953/http://hackage.haskell.org/cgi-bin/hackage-scripts/package/utf8-string-0.1
    :title: 'HackageDB: utf8-string-0.1'
- :id: '2065'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2065
  :user_name: makapin
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/86/
  :language: Perl
  :time: 2007/08/11 01:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  うーん、全然スマートにならなかった・・・\n\t"
  :code: |
    use strict;
    use warnings;
    use bigint;
    use Test::Simple tests =&gt; 12;

    my %kanji_of =
      (1 =&gt; '一',  2 =&gt; '二',  3 =&gt; '三',  4 =&gt; '四',  5 =&gt; '五',
       6 =&gt; '六',  7 =&gt; '七',  8 =&gt; '八',  9 =&gt; '九' );

    my @keta = ('千','百','十','');
    my @big_keta = ('', '万','億','兆');


    sub to_kanji{
      my $num = shift;
      $num = '0'.$num until (length($num) % 4 == 0);
      my @list = grep {defined $_} ( $num =~ m/(\d{4})?(\d{4})?(\d{4})?(\d{4})$/ );
      my $ret =  append_man_oku_tyo( map {to_kanji_sub($_)} @list );
      return $ret;
    }

    sub append_man_oku_tyo{
      my @list = @_;
      my $i = 0;
      my $str = join ' ', grep {$_}
        reverse map {$_ . ($_? $big_keta[$i++]:($i++,'')) }
        reverse @list;
      return $str;
    }

    #４桁の数字を漢字に変換
    sub to_kanji_sub{
      my @num = split //, shift;
      return join '', map {
        $num[$_] ? ( $_ != 3 &amp;&amp; $num[$_] == 1 ? '': $kanji_of{$num[$_]}).$keta[$_] :''
      } 0..3;
    }

    #テストコード
    do_test();
    sub do_test{
      ok(to_kanji(1) eq '一',"1 ok");
      ok(to_kanji(1234) eq '千二百三十四',"1234 ok");
      ok(to_kanji(4321) eq '四千三百二十一', "4321 ok");
      ok(to_kanji(100) eq '百', "100 ok");
      ok(to_kanji(1000) eq '千', "1000 ok");
      ok(to_kanji(1001) eq '千一', "1001 ok");
      ok(to_kanji(1021) eq '千二十一', "1021 ok ");
      ok(to_kanji(12345) eq '一万 二千三百四十五', "12345 ok");
      ok(to_kanji(10000) eq '一万' ,"10000 w");
      ok(to_kanji(1_0000_0000_0000) eq '一兆', "1_0000_0000_0000 ok");
      ok(to_kanji(1_2345_6789) eq '一億 二千三百四十五万 六千七百八十九', "1234567879 ok");
      ok(to_kanji(1732050807568877) eq '千七百三十二兆 五百八億 七百五十六万 八千八百七十七', "1732050807568877 ok");
    }
  :tags:
  - Perl
  :references:
    :url: 
    :title: 
- :id: '2467'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2467
  :user_name: 匿名
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2007/08/24 02:23 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">るびきちさんのより短くを目標に考えてみましたが、一行かないませんでした。</pre>\n\t"
  :code: "#!/usr/local/bin/ruby\n\ndef jsen(ary)\n  k1 = [\"\", \"一\", \"二\" ,\"三\",
    \"四\", \"五\", \"六\", \"七\", \"八\", \"九\"]\n  k10 = ['', \"十\",\"百\", \"千\"]\n
    \ str, s = \"\", ary.size - 1\n  ary.each{|num|\n    keta = s\n    case num\n
    \   when 0\n      keta = nil\n    when 1\n      num = nil unless keta == 0\n    end\n
    \   str &lt;&lt; k1[num].to_s unless num.nil?\n    str &lt;&lt; k10[keta].to_s
    unless keta.nil?\n    s -= 1\n  }\n  return str\nend\n\ndef jnum(n)\n  return
    \"零\" if n == 0\n  str, h, ary = \"\", Hash.new, Array.new\n  k = [\"\", \"万\",
    \"億\", \"兆\", \"京\"]\n  key, value = n.to_s.split(//).size - 1, n.to_s.split(//)\n
    \ return nil if key &gt; 19 # max \"京\"\n  value.each{|i|\n    ary.push i.to_i\n
    \   if key.divmod(4)[1] == 0\n      h[key.divmod(4)[0]] = ary\n      ary = []\n
    \   end\n    key -= 1\n  }\n  h.sort.reverse.each{|x, ary|\n    str &lt;&lt; jsen(ary).to_s
    \n    str &lt;&lt; k[x].to_s + \" \" unless ary == [0, 0, 0, 0]\n  }\n  return
    str\nend\n#n = 1732050807568877\n# 千七百三十二兆 五百八億 七百五十六万 八千八百七十七\nn =  0\n# =&gt;
    零\nn =  1\n# =&gt; 一\nn = 10\n# =&gt; 十\nn = 100\n# =&gt; 百\nn= 1000\n# =&gt;
    千\nn= 10001000\n# =&gt; 千万 千\n\nprint jnum(n)\n"
  :tags:
  - ruby
  :references:
    :url: 
    :title: 
- :id: '2473'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/2473
  :user_name: ocean
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/08/24 05:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  bcc32とVisualC++6で確認しました。g++ではコンパイルできませんでした。どうやら、\"十\"の二バイト目が'\\\\'となっていることから、これがエスケープ文字とみなされて、「文字列が終わってない」というエラーになっているようです。g++のバグ？（mingwに付属の最新のg++）\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;stdexcept&gt;
    #include &lt;string&gt;
    #include &lt;map&gt;

    std::map&lt;char, std::string&gt; create_table()
    {
        std::map&lt;char, std::string&gt; table;

        table['1'] = "一"; table['2'] = "二"; table['3'] = "三";
        table['4'] = "四"; table['5'] = "五"; table['6'] = "六";
        table['7'] = "七"; table['8'] = "八"; table['9'] = "九";

        return table;
    }

    std::string convert2(
        std::string::const_reverse_iterator&amp; it,
        std::string::const_reverse_iterator end,
        const std::string&amp; s)
    {
        if (it == end) return "";

        const char c = *it++;

        if (c == '0') return "";

        if (c == '1' &amp;&amp; !s.empty()) return s;

        static const std::map&lt;char, std::string&gt; table = create_table();

        std::map&lt;char, std::string&gt;::const_iterator it_table = table.find(c);

        if (it_table == table.end())
        {
            throw std::runtime_error("invalid character");
        }

        return it_table-&gt;second + s;
    }

    std::string convert1(
        std::string::const_reverse_iterator&amp; it,
        std::string::const_reverse_iterator end,
        const std::string&amp; s)
    {
        if (it == end) return "";

        std::string ret;

    #define DO(S) ret.insert(0, convert2(it, end, S))

        DO(""); DO("十"); DO("百"); DO("千");

    #undef DO

        return (ret.empty() || s.empty()) ? ret : ret + s + " ";
    }

    std::string convert(const std::string&amp; s)
    {
        std::string::const_reverse_iterator it = s.rbegin();

        std::string ret;

    #define DO(S) ret.insert(0, convert1(it, s.rend(), S))

        DO(""); DO("万"); DO("億"); DO("兆");

    #undef DO

        if (it != s.rend())
        {
            throw std::runtime_error("overflow");
        }

        return ret;
    }

    int main()
    {
        while (true)
        {
            std::cout &lt;&lt; "&gt; ";

            std::string s;

            if (!(std::cin &gt;&gt; s))
            {
                break;
            }

            try
            {
                std::cout &lt;&lt; convert(s) &lt;&lt; std::endl;
            }
            catch (std::exception&amp; e)
            {
                std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3183'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/3183
  :user_name: naranja
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/09/27 11:10 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">少ない行数で。</pre>\n\t"
  :code: |
    import std.stdio;

    void main(string[] args){
        string number = args[1], answer;
        for(int i = 0; i &lt; number.length; i++){
            int digit = number[length - i - 1] - '0';
            answer = (digit ? ((i % 4 &amp;&amp; digit == 1 ? "" : ["", "一", "二", "三", "四", "五", "六", "七", "八", "九"][digit]) ~ ["", "十", "百", "千"][i % 4]) : "") ~ (i % 4 ? "" : ["", "万", "億", "兆"][i / 4] ~ (i ? " " : "")) ~ answer;
        }
        writefln(answer);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3611'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/3611
  :user_name: 匿名
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/31 02:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">9999999999999998 までは扱えますよ\r\n（倍精度実数が扱える整数値の限界）\r\nというわけで，以下のように\r\n地道にやる方法を書いてみました\r\n&gt;
    foo(1234567890123456)\r\n一千二百三十四兆五千六百七十八億九千十二万三千四百五十六\r\n&gt; foo(9999999999999998)\r\n九千九百九十九兆九千九百九十九億九千九百九十九万九千九百九十八\r\n&gt;
    foo(1111111111111111)\r\n一千百十一兆一千百十一億一千百十一万一千百十一\r\n&gt; foo(12345)\r\n一万二千三百四十五\r\n</pre>\n\t"
  :code: |
    foo &lt;- function(x) {
        bar &lt;- function(y, t) {
            baz &lt;- function(x) {
                c("", "二", "三", "四", "五", "六", "七", "八", "九")[x]
            }
            baz2 &lt;- function(x) {
                c("一", "二", "三", "四", "五", "六", "七", "八", "九")[x]
            }
            s &lt;- as.integer(unlist(strsplit(paste("000", as.character(y), sep=""), "")))
            l &lt;- length(s)
            str &lt;- ""
            if (s[l-3]) str &lt;- paste(str, baz2(s[l-3]), "千", sep="")
            if (s[l-2]) str &lt;- paste(str, baz(s[l-2]), "百", sep="")
            if (s[l-1]) str &lt;- paste(str, baz(s[l-1]), "十", sep="")
            if (y) str &lt;- paste(str, baz2(s[l]), t, sep="")
            cat(str)
        }
        bar(x%/%1000000000000, "兆")
        bar((x%%1000000000000)%/%100000000, "億")
        bar((x%%100000000)%/%10000, "万")
        bar(x%%10000, "")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3612'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/3612
  :user_name: 匿名
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/31 02:19 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">少し修正</pre>\n\t"
  :code: |
    foo &lt;- function(x) {
        bar &lt;- function(y, t) {
            baz &lt;- function(x, w) {
                r &lt;- c("一", "二", "三", "四", "五", "六", "七", "八", "九")[x]
                if (x == 1 &amp;&amp; w == 1) r &lt;- ""
                return(r)
            }
            s &lt;- as.integer(unlist(strsplit(paste("000", as.character(y), sep=""), "")))
            l &lt;- length(s)
            str &lt;- ""
            if (s[l-3]) str &lt;- paste(str, baz(s[l-3], 2), "千", sep="")
            if (s[l-2]) str &lt;- paste(str, baz(s[l-2], 1), "百", sep="")
            if (s[l-1]) str &lt;- paste(str, baz(s[l-1], 1), "十", sep="")
            if (y) str &lt;- paste(str, baz(s[l], 2), t, sep="")
            cat(str)
        }
        bar(x%/%1000000000000, "兆")
        bar((x%%1000000000000)%/%100000000, "億")
        bar((x%%100000000)%/%10000, "万")
        bar(x%%10000, "")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3717'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/3717
  :user_name: dankogai
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/11/05 16:46 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">そのモジュールの作者ざんす。\r\n</pre>\n\t"
  :code: "% perl -CIO -MLingua::JA::Numbers -le 'print num2ja(1234567890)'\r\n十二億三千四百五十六万七千八百九十\r\n"
  :tags: []
  :references:
    :url: /web/20080225222953/http://blog.livedoor.jp/dankogai/archives/50017672.html
    :title: ''
- :id: '3937'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/3937
  :user_name: 匿名
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/13 09:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">なでしこで素直に。単位を定義すればもっと上の桁まで扱えるはず</pre>\n\t"
  :code: |
    「漢数字に変換したい整数を入力してください」で尋ねる
    それを漢数字変換して言う
    おわり

    ●漢数字変換(nを)
    　　outとは文字列
    　　tmpとは文字列
    　　漢数字とは配列=区切る("一,二,三,四,五,六,七,八,九",",")
    　　単位Aとは配列=区切る(",十,百,千",",")
    　　単位Bとは配列=区切る(",万,億,兆",",")
    　　
    　　(nを4で数値分割して配列逆順)を反復
    　　　　(対象を文字列分解して配列逆順)を反復
    　　　　　　もし(対象=0)ならば、続ける
    　　　　　　もし(対象=1&amp;&amp;回数&lt;&gt;1)ならば
    　　　　　　　　tmp=単位A[回数-1]&amp;tmp
    　　　　　　違えば
    　　　　　　　　tmp=漢数字[対象-1]&amp;単位A[回数-1]&amp;tmp
    　　　　out=tmp&amp;単位B[回数-1]&amp;out
    　　　　tmp=""
    　　outで戻る

    ●数値分割(mをnで)
    　　tとは配列
    　　(バイト数(m)&lt;&gt;0)の間
    　　　　tの0にRIGHT(m,4)を配列挿入
    　　　　mから4バイト右端削除
    　　tで戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4530'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/4530
  :user_name: 匿名
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/12/01 02:28 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>10000とかなるとおかしかったので修正orz\n文字列で与えると大きな桁が扱えます</p>\n\n\t"
  :code: |
    "1732050807568877"を漢数字変換
    表示

    ●漢数字変換(nを)
    　　outとは文字列
    　　tmpとは文字列
    　　flagとは整数=0
    　　漢数字とは配列=区切る("一,二,三,四,五,六,七,八,九",",")
    　　単位Aとは配列=区切る(",十,百,千",",")
    　　単位Bとは配列=区切る(",万,億,兆,京,垓,杼,穣,溝,澗,"&amp;
    　　"正,載,極,恒河沙,阿僧祇,那由他,不可思議,無量大数",",")
    　　
    　　(nを4で数値分割して配列逆順)を反復
    　　　　(対象を文字列分解して配列逆順)を反復
    　　　　　　もし(対象=0)ならば、続ける
    　　　　　　もし(対象=1&amp;&amp;回数&lt;&gt;1)ならば
    　　　　　　    tmp=単位A[回数-1]&amp;tmp
    　　　　　　違えば
    　　　　　　    tmp=漢数字[対象-1]&amp;単位A[回数-1]&amp;tmp
    　　　　　　flag=1
    　　　　もし(flag=1)ならば
    　　　　    out=tmp&amp;単位B[回数-1]&amp;out
    　　　　    flag=0
    　　　　tmp=""
    　　outで戻る

    ●数値分割(mをnで)
    　　tとは配列
    　　(バイト数(m)&lt;&gt;0)の間
    　　　　tの0にRIGHT(m,4)を配列挿入
    　　　　mから4バイト右端削除
    　　tで戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5325'
  :parent_id: '38'
  :url: http://ja.doukaku.org/comment/5325
  :user_name: carver
  :user_url: /web/20080225222953/http://ja.doukaku.org/user/648/
  :language: Other
  :time: 2008/01/14 18:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Mac OS X (PowerPC 32bit) アセンブリで。お題の通り一京未満しか対応してません。</p>\n\n\t"
  :code: "        .machine ppc\n        .globl _main\n\n;; Usage: ./kansuuji string\n
    \       \n;; r3: 数字\n;; r4: 桁数\n;; r5: 処理中の数字\n;; r6: 開始時のスタックの位置\n;; r7: 漢数字（零〜九）\n;;
    r8: 漢数字の桁1（十百千）\n;; r9: 漢数字の桁2（万〜）\n;; r11: 表示文字数\n;; r12: フラグ\n;;      1: 桁1をスタックに積んだかどうか\n;;
    \     2: 桁2をスタックに積んだかどうか\n_main:\n        lwz     r3, 4(r4)       ; argv[1]\n
    \       li      r4, 0\n        mr      r6, r1          ; スタックポインタを保存\n        \n
    \       lis     r7, hi16(digit)\n        addi    r7, r7, lo16(digit)\n\n        ;;
    文字列の最後にセット\n        lis     r8, hi16(subunit_end)\n        addi    r8, r8, lo16(subunit_end)\n
    \       lis     r9, hi16(unit_end)\n        addi    r9, r9, lo16(unit_end)\n\n
    \       ;; 改行をスタックに積んでおく\n        li      r11, 1          ; 表示文字数（改行含む）\n        li
    \     r0, 10          ; '\\n'\n        stbu    r0, -1(r1)\n        \ngoto_end:\n
    \       ;; 文字列の最後に移動\n        addi    r4, r4, 1\n        lbz     r5, 0(r3)\n        addi
    \   r3, r3, 1\n        cmpli   cr7, r5, 0\n        bne     cr7, goto_end\n        subi
    \   r3, r3, 2       ; 文字列の終端から戻す\n        subi    r4, r4, 1\n        mr      r13,
    r4\n\nscan:\n        li      r12, 0          ; フラグをクリア\n        \n        ;; 桁1\n
    \       lbz     r0, 0(r8)\n        cmpli   cr7, r0, 0\n        bne     cr7, push_subunit\n\n
    \       ;; 桁1のポインタを先頭に戻し、桁2へ\n        lis     r8, hi16(subunit)\n        addi
    \   r8, r8, lo16(subunit)\n        b       push_unit\n\n;; 桁1\npush_subunit:\n
    \       lbz     r0, 1(r8)\n        stbu    r0, -1(r1)\n        lbz     r0, 0(r8)\n
    \       stbu    r0, -1(r1)\n        addi    r8, r8, 2\n        addi    r11, r11,
    2     ; 表示文字数+2\n        li      r12, 1          ; フラグ\n        b       push_digit\n\n;;
    桁2\npush_unit:\n        lbz     r0, 0(r9)\n        cmpli   cr7, r0, 0\n        beq
    \    cr7, ignore_unit\n\n        ;; 桁2をスタックに追加\n        lbz     r0, 1(r9)\n        stbu
    \   r0, -1(r1)\n        lbz     r0, 0(r9)\n        stbu    r0, -1(r1)\n        addi
    \   r9, r9, 2\n        addi    r11, r11, 2     ; 表示文字数+2\n        li      r12,
    2          ; フラグ\n        b       push_digit\n        \nignore_unit:\n        lis
    \    r9, hi16(unit)\n        addi    r9, r9, lo16(unit)      \n        \npush_digit:\n
    \       ;; 整数に変換してスタックに追加\n        lbz     r5, 0(r3)\n        subi    r5, r5,
    48      ; ASCIIコード\n\n        ;; 数字が1で、かつ桁1がある場合は1を省略\n        cmpli   cr7, r5,
    1\n        cmpli   cr6, r12, 1\n        crand   2, 30, 26       ; cr0[eq] = cr7[eq]
    &amp; cr6[eq]\n        beq     cr0, next_scan\n\n        ;; 数字が0で、かつ一の位であれば省略\n
    \       cmpli   cr7, r5, 0\n        cmpl    cr6, r13, r4\n        crand   2, 30,
    26       ; cr0[eq] = cr7[eq] &amp; cr6[eq]\n        beq     cr0, next_scan\n\n
    \       ;; 数字が0で、かつ桁2がある場合は数字だけ省略\n        cmpli   cr7, r5, 0\n        cmpli   cr6,
    r12, 2\n        crand   2, 30, 26       ; cr0[eq] = cr7[eq] &amp; cr6[eq]\n        beq
    \    cr0, next_scan\n\n        ;; 数字が0で、かつ桁1がある場合は両方省略\n        cmpli   cr7, r5,
    0\n        cmpli   cr6, r12, 1\n        crand   2, 30, 26       ; cr0[eq] = cr7[eq]
    &amp; cr6[eq]\n        bne     cr0, push_digit_exec\n        addi    r1, r1, 2
    \      ; 先に積んである桁を戻す\n        subi    r11, r11, 2\n        b       next_scan\n
    \       \npush_digit_exec:\n        ;; 数字\n        add     r10, r7, r5\n        add
    \    r10, r10, r5    ; 2バイト分\n        lbz     r0, 1(r10)\n        stbu    r0,
    -1(r1)\n        lbz     r0, 0(r10)\n        stbu    r0, -1(r1)\n        addi    r11,
    r11, 2\n\nnext_scan:\n        subi    r3, r3, 1\n        subi    r4, r4, 1\n        cmpli
    \  cr7, r4, 0\n        bgt     cr7, scan\n\n        ;; 表示\n        stwu    r6,
    -4(r1)      ; スタックに退避\n        li      r3, 1\n        addi    r4, r1, 4\n        mr
    \     r5, r11\n        li      r0, 4           ; sys_write()\n        sc\n        lwz
    \    r6, 0(r1)       ; スタックから復帰\n        addi    r1, r1, 4\n\nexit:\n        ;;
    終了\n        mr      r1, r6          ; スタックポインタを戻す\n        li      r3, 0\n        li
    \     r0, 1\n        sc\n\n\n        .data\n        .align  4\n\ndigit:\n        .asciz
    \ \"零一二三四五六七八九\"\n        .align  4\n\nsubunit:\n        .asciz  \"十百千\"\n        subunit_end
    = . - 1\n        .align  4\n\nunit:\n        .asciz  \"万億兆\"\n        unit_end
    = . - 1\n        .align  4\n"
  :tags:
  - Assembly
  - MacOSX
  - PowerPC
  :references:
    :url: 
    :title: 
