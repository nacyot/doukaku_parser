---
:id: '100'
:title: 正整数のゲーデル数化？
:comments:
- :id: '4420'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4420
  :user_name: nobsun
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/11/27 00:54 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">正の整数 n を引数としてとり， 2^d1 * 3^d2 * 5^d3 ... *
    pk^dk を返す関数\r\ngoedel を定義してください．\r\n\r\nただし，n を10進表現で k 桁の数としたときの各桁の数が数列 [d1,d2,d3,...,dk]\r\nをなすとし，dk
    が 1 の位，d1 が 10^(k-1) の位です．また，pk は k番目の素数です．\r\n\r\ngoedel   9  ⇒ 2^9             ⇒
    \ 512\r\ngoedel  81  ⇒ 2^8 * 3^1       ⇒  768\r\ngoedel 230  ⇒ 2^2 * 3^3 * 5^0
    ⇒  108\r\n\r\n</pre>\r\n\t"
  :code: ''
  :tags:
  - ゲーデル数
  :references:
    :url: /web/20080229110409/http://ja.wikipedia.org/wiki/%E3%82%B2%E3%83%BC%E3%83%87%E3%83%AB%E6%95%B0
    :title: ゲーデル数
- :id: '4648'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4648
  :user_name: ところてん
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/12/06 16:55 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  <pre class=\"compact\">こうかな？\r\nc=2が美しく無いけど。</pre>\n\t"
  :code: |
    def goedel(n):
        result = 1
        c = 2
        for x in str(n):
            result *= c**int(x)
            c += 1
        return result

    print goedel(9)
    print goedel(81)
    print goedel(230)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4649'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4649
  :user_name: ところてん
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/12/06 17:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">全力で問題を勘違いしていた。\r\n素数を生成する部分を追加してみた。</pre>\n\t"
  :code: "def CreatePrimes(n):\n    primes = []\n    c = 2\n    while len(primes)
    &lt; n:\n        primes.append(c)\n        for x in primes[:-1]:\n            if
    c%x == 0:\n                primes.pop();\n                break\n        c +=
    1\n    return primes\n\ndef goedel(n):\n    result = 1\n    primes = CreatePrimes(len(str(n)))\n
    \   \n    for x in str(n):\n        result *= primes[0]**int(x)\n        primes
    = primes[1:]\n    return result\n\nprint goedel(9)\nprint goedel(81)\nprint goedel(230)\nprint
    goedel(12345)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4650'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4650
  :user_name: SiroKuro
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/06 17:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  こんな感じでしょうか。IEnumerator&lt;int&gt; がなんか気持ち悪いですが……\n\t"
  :code: |
    using System;
    using System.Collections.Generic;
    static class Program {
        static void Main() {
            Console.WriteLine(Goedel(9));   // 512
            Console.WriteLine(Goedel(81));  // 768
            Console.WriteLine(Goedel(230)); // 108
        }
        static double Goedel(int num) {
            double goedel = 1;
            IEnumerator&lt;int&gt; p = Prime();
            foreach(char c in num.ToString()) {
                p.MoveNext();
                goedel *= Math.Pow(p.Current, c - '0');
            }
            return goedel;
        }
        static IEnumerator&lt;int&gt; Prime() {
            yield return 2;
            List&lt;int&gt; primes = new List&lt;int&gt;();
            for(int num = 3; ; num += 2) {
                foreach(int p in primes) {
                    if (num % p == 0)
                        goto SKIP;
                }
                primes.Add(num);
                yield return num;
            SKIP:;
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4651'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4651
  :user_name: mtsuyugu
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/12/06 17:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  n を 10 桁までに限定しています。\n\t"
  :code: |
    #include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;math.h&gt;

    int goedel( int n ){
       static int prime[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29};
       char buf[11];
       char *dk = buf;
       int *pk = prime;
       int result = 1;
       snprintf(dk,11,"%d",n);
       while(*dk){
          result *= pow( *pk++, *dk++ -'0' );
       }
       return result;
    }

    void main ( void ){
       printf("%d\n", goedel(9));
       printf("%d\n", goedel(81));
       printf("%d\n", goedel(230));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4652'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4652
  :user_name: fkmn
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/190/
  :language: Perl
  :time: 2007/12/06 17:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>もうちょっと簡単に出来そう</p>\n\n\t"
  :code: |
    use strict;
    use warnings;
    use Math::Prime::XS qw(is_prime);
    use List::Util qw(reduce);
    use List::MoreUtils qw(pairwise);

    sub primes {
        my $number = shift;
        my @primes = (2);
        my $i      = 3;
        while ( @primes &lt; $number ) {
            push( @primes, $i ) if is_prime($i);
            $i++;
        }
        return @primes;
    }

    sub goedel {
        my $number = shift;
        my @num    = split //, $number;
        my @primes = primes( scalar(@num) );
        reduce { $a * $b } pairwise { $a**$b } @primes, @num;
    }

    print goedel(9);
    print goedel(81);
    print goedel(230);
  :tags:
  - List::MoreUtils
  - List::Util
  - Math::Prime::XS
  :references:
    :url: 
    :title: 
- :id: '4653'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4653
  :user_name: sumim
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/12/06 17:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\r<br><br>指定した数未満の素数列を生成する、組み込みの Integer class&gt;&gt;#primesUpTo: を流用して富豪的に。\n\t"
  :code: |
    | primesOfSize goedel |

    primesOfSize := [:n |
        | m primes  |
        m := 0.
        [(primes := Integer primesUpTo: (10 raisedTo: (m := m + 1))) size &gt;= n] whileFalse.
        primes first: n].

    goedel := [:num |
        | digits size |
        digits := (num asString as: Array) collect: [:char | char asString asInteger].
        size := digits size.
        primes := primesOfSize value: size.
        (1 to: size) inject: 1 into: [:goe :idx | goe * ((primes at: idx) raisedTo: (digits at: idx))]].

    goedel value: 9.   "=&gt; 512 "
    goedel value: 81.   "=&gt; 768 "
    goedel value: 230.   "=&gt; 108 "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4654'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4654
  :user_name: mad
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/418/
  :language: Haskell
  :time: 2007/12/06 18:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>やっぱり一度文字列化するの一番効率的で簡単みたいです。</p>\n\n\t"
  :code: "import Data.Char\n\nprimes = sieve [2..] \n  where \n  sieve (x:xs) = x
    : sieve [y| y&lt;-xs, y `mod` x /= 0]\n\ngoedel x = product $ zipWith (^) primes
    (map digitToInt (show x))\n\n{-\n*Main&gt; goedel 9\n512\n*Main&gt; goedel 81\n768\n*Main&gt;
    goedel 230\n108\n-}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4655'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4655
  :user_name: omoikani
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/06 18:24 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">10桁限定。それ以上は整数がoverflowします。</pre>\n\t"
  :code: |
    fun prime n a 0 = a
      | prime n a i =
      if n mod 2 &lt;&gt; 0 andalso n mod 3 &lt;&gt; 0 then
        prime (n + 1) (a @ [n]) (i - 1)
      else
        prime (n + 1) a i


    fun goedel n =
    let
      val p = prime 5 [2, 3] 10
      val a = map (valOf o Int.fromString o str) ((explode o Int.toString) n)
    in
      floor (ListPair.foldl (fn (x, y, z) =&gt; Math.pow (real x, real y) * z) 1.0 (p, a))
    end

    val printInt = println o Int.toString;

    printInt (goedel 9);
    printInt (goedel 81);
    printInt (goedel 230)
  :tags:
  - SML#
  :references:
    :url: 
    :title: 
- :id: '4657'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4657
  :user_name: dankogai
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/26/
  :language: 
  :time: 2007/12/06 21:07 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">あれ、これだと\r\n\r\ngoedel 230  ⇒ 2^2 * 3^3 * 5^0
    ⇒  108\r\ngoedel 23   ⇒ 2^2 * 3^3 ⇒  108\r\n\r\nなので、ゲーデル数と元の数との一対一対応が取れないのでは?\r\n\r\nこうすればOKだけど\r\n\r\ngoedel'
    230  ⇒ 2^(2+1) * 3^(3+1) * 5^(0+1) ⇒  3240\r\ngoedel' 23   ⇒ 2^(2+1) * 3^(3+1)
    ⇒  648\r\n\r\nDan the Goedel Numberer</pre>\n\t"
  :code: ''
  :tags:
  - すばらしい洞察
  :references:
    :url: 
    :title: 
- :id: '4658'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4658
  :user_name: dankogai
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/12/06 21:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p><code>goedel_number()</code>の二番目の引数にnonzeroを指定することで<a href=\"/web/20080229110409/http://ja.doukaku.org/comment/4657/\">#4657</a>で指摘した「仕様バグ」にも対応しています。\n</p>\n<p>Dan
    the Goedel Numberer\n</p>\n\n\n\n\t"
  :code: |
    #!/usr/local/bin/perl
    use strict;
    use warnings;

    my @primes = ( 2, 3 );

    sub fill_primes {
        my $nprimes = shift;
      ODD:
        for ( my $n = $primes[ @primes - 1 ] + 2 ; @primes &lt; $nprimes ; $n += 2 ) {
            for my $d (@primes) {
                last if $d * $d &gt; $n;
                next ODD unless $n % $d;
            }
            push @primes, $n;
        }
    }

    sub goedel_number {
        my $n      = shift;
        my $offset = shift || 0;
        my @d      = ( $n =~ /(\d)/g );
        fill_primes( scalar @d );
        use bigint;
        my $result = 1;
        $result *= $primes[$_]**( $d[$_] + $offset ) for ( 0 .. @d - 1 );
        $result;
    }

    local $\ = "\n";
    local $, = ", ";
    print goedel_number( $ARGV[0] || 1234567890, $ARGV[1] );
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4659'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4659
  :user_name: dankogai
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/26/
  :language: JavaScript
  :time: 2007/12/06 21:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p><a href=\"/web/20080229110409/http://ja.doukaku.org/comment/4658/\">#4658</a>の素直な移植。\n</p>\n<p>Dan
    the Goedel Numberer\n</p>\n\n\n\n\t"
  :code: |
    var primes = [2,3];
    function fill_primes(nprimes){
      function f(n){
        for (var p = 0, l = primes.length; p &lt; 0; p++){
          if (p*p &gt; n)    return;
          if (n % d == 0) break;
        }
        primes[primes.length] = n;
      }
      for (var n = primes[primes.length-1]+2; primes.length &lt; nprimes; n += 2)
        f(n);
    }
    function goedel_number(n, offset){
      if (! offset) offset = 0;
      var d = [];
      n.toString().replace(/\d/g, function(m){
        d[d.length] = parseInt(m);
      });
      fill_primes(d.length);
      var result = 1;
      for (var i = 0, l = d.length; i &lt; l ; i++) {
        result *= Math.pow(primes[i], d[i]+offset);
      }
      return result;
    }
    /*
    p(goedel_number(23));
    p(goedel_number(230));
    p(goedel_number(23,1));
    p(goedel_number(230,1));
    */
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4660'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4660
  :user_name: nido
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/589/
  :language: Ruby
  :time: 2007/12/06 22:47 GMT
  :vote_count: '5'
  :vote_score: '5'
  :body: "\n\t  <p>車輪は発明しない方向で。</p>\n\n\t"
  :code: |
    require "mathn"
    def goedel(n)
      prime=Prime.new
      n.to_s.split(//).inject(1){|r,k| r*=prime.next**k.to_i}
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4661'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4661
  :user_name: horiuchi
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/570/
  :language: 
  :time: 2007/12/06 23:19 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">ゲーテル数の定義とは関係ないですが、\r\n一対一対応を素直に取れるように定義を変更するなら、\r\n逆向きに並べるのが単純でいい気がします。\r\n\r\ngoedel
    230  ⇒ 2^2 * 3^3 * 5^0 ⇒  108\r\ngoedel  23  ⇒ 2^2 * 3^3 ⇒  108\r\n\r\nではなく、\r\n\r\ngoedel
    230  ⇒ 2^0 * 3^3 * 5^2 ⇒  675\r\ngoedel  23  ⇒ 2^3 * 3^2 * 5^0 ⇒  72\r\n\r\nこれで、位取りの意味的に上位の0は無視することと、\r\n0乗した値が無視できることが対応づけられます。</pre>\n\t"
  :code: ''
  :tags:
  - すばらしい洞察
  :references:
    :url: 
    :title: 
- :id: '4663'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4663
  :user_name: ocean
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/12/07 01:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>素朴に。</p>\n\n\t"
  :code: |
    import itertools

    def is_prime(n):
        for i in itertools.count(2):
            if i * i &gt; n:
                return True
            if n % i == 0:
                return False

    def primes():
        for n in itertools.count(2):
            if is_prime(n):
                yield n

    def numbers(n):
        a = []
        while n:
            a.append(n % 10)
            n /= 10
        return reversed(a)

    def goedel(n):
        result = 1
        for pk, dk in itertools.izip(primes(), numbers(n)):
            result *= (pk ** dk)
        return result

    def main():
        for n in (9, 81, 230):
            print goedel(n)

    if __name__ == '__main__':
        main()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4664'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4664
  :user_name: Kiske
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/202/
  :language: PHP
  :time: 2007/12/07 02:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>素数を作るところをもっとなんとかしたい・・・。\nとりあえず出来たのでUP。</p>\n\n\t"
  :code: |
    &lt;?php
    function prime($len)
    {
        $result = array(2);
        for($n = 2; $n &lt;= $len; $n++) {
            if($n % 2 == 0) {
                continue;
            }
            for($i = 3 ; pow($i, 2) &lt;= $n ; $i += 2) {
                if($n % $i == 0)
                    continue 2;
            }
            array_push($result, $n);
        }
        return $result;
    }

    function goedel($n)
    {
        $n = strval($n);
        $result = 1;
        $prime = prime($n);
        for($i = 0; $i &lt; strlen($n); $i++) {
            $result *= pow($prime[$i], $n[$i]);
        }
        return $result;
    }
  :tags: []
  :references:
    :url: /web/20080229110409/http://ja.wikipedia.org/wiki/%E3%82%A8%E3%83%A9%E3%83%88%E3%82%B9%E3%83%86%E3%83%8D%E3%82%B9%E3%81%AE%E7%AF%A9
    :title: エラトステネスの篩 - Wikipedia
- :id: '4665'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4665
  :user_name: jijixi
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/582/
  :language: OCaml
  :time: 2007/12/07 02:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">特にひねりのない実装。\r\n素数はエラトステネスのふるいを使ったジェネレータにしてますが、\r\n工夫のない作りなのでたぶん指数オーダーです。\r\n\r\n最近は関数型至上主義も薄れてきて、リファレンスや
    for 文なども\r\nわりと平気で使えるようになってきました。\r\n外に影響出さないなら、中で何やってたって良いんです :-p\r\n\r\n\r\n%
    ocaml goedel.ml\r\ngoedel 9 =&gt; 2^9 =&gt; 512\r\ngoedel 81 =&gt; 2^8 * 3^1 =&gt;
    768\r\ngoedel 230 =&gt; 2^2 * 3^3 * 5^0 =&gt; 108\r\n</pre>\n\t"
  :code: |
    let gen_prime () =
       let now = ref 2 in
       let buf = ref [2] in
       let rec is_prime = function
          | 2 -&gt; true
          | n -&gt;
               if List.exists (fun i -&gt; n mod i = 0) !buf
               then false
               else (buf := n::!buf; true)
       in
       let rec next_prime i =
          let n = !now in
          incr now;
          if is_prime n
          then Some n
          else next_prime i
       in
       Stream.from next_prime

    let goedel n =
       let pow n = function
          | 0 -&gt; 1
          | m -&gt;
               let rec loop acc = function
                  | 1  -&gt; acc
                  | m' -&gt; loop (acc * n) (m' - 1)
               in
               loop n m
       in
       let s      = string_of_int n in
       let buf    = Buffer.create 10 in
       let add    = Buffer.add_string buf in
       let result = ref 1 in
       let primes = gen_prime () in
       for i = 0 to (String.length s) - 1 do
          let m = int_of_string (String.make 1 s.[i]) in
          let n = Stream.next primes in
          if Buffer.length buf &gt; 0 then add " * ";
          List.iter add [string_of_int n; "^"; string_of_int m];
          result := !result * (pow n m)
       done;
       (Buffer.contents buf, !result)

    let test () =
       let samples = [9; 81; 230] in
       List.iter begin fun n -&gt;
          let s, r = goedel n in
          Printf.printf "goedel %d =&gt; %s =&gt; %d\n" n s r
       end samples

    let () = if not !Sys.interactive then test ()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4667'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4667
  :user_name: tnk
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/30/
  :language: Java
  :time: 2007/12/07 03:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">とりあえず，「仕様バグ」は無視して題意どおりの実装。\r\n\r\n$ java Goedel
    230\r\n108\r\n\r\n$ java Goedel 123456789\r\n52713275010243038997421106186697438702252144407250</pre>\n\t"
  :code: |
    import java.math.BigInteger;
    import java.util.Vector;

    public class Goedel {
        private static final int CERTAINTY = 24;
        public static void main(String[] args) throws Exception {
            Vector&lt;BigInteger&gt; primes = new Vector&lt;BigInteger&gt;();
            for (int i = 2; primes.size() &lt; args[0].length(); i++) {
                BigInteger bi = BigInteger.valueOf(i);
                if (bi.isProbablePrime(CERTAINTY)) primes.add(bi);
            }
            BigInteger result = BigInteger.ONE;
            for (int i = 0; i &lt; args[0].length(); i++)
                result = result.multiply(primes.get(i).pow(Integer.valueOf(args[0].substring(i,i+1))));
            System.out.println(result);
        }
    }
  :tags:
  - Java1.5
  :references:
    :url: 
    :title: 
- :id: '4668'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4668
  :user_name: naoto
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/572/
  :language: Scheme
  :time: 2007/12/07 04:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なんとなくstreamを使ってみた。\nsieveとprimesはSICPのやつ。</p>\n\n\t"
  :code: |
    (use util.stream)
    (use gauche.collection)

    (define (integers-starting-from n)
      (stream-cons n (integers-starting-from (+ n 1))))

    (define (sieve stream)
      (define (divisible? x y) (= (remainder x y) 0))
      (stream-cons
       (stream-car stream)
       (sieve (stream-filter
               (lambda (x) (not (divisible? x (stream-car stream))))
               (stream-cdr stream)))))

    (define primes (sieve (integers-starting-from 2)))

    (define (number-&gt;digit-stream n)
      (stream-map
       (lambda (c) (- (char-&gt;integer c) (char-&gt;integer #\0)))
       (string-&gt;stream (number-&gt;string n))))

    (define (goedel n)
      (apply * (stream-&gt;list
                (stream-map (lambda (pk nk) (expt pk nk))
                            primes (number-&gt;digit-stream n)))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4669'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4669
  :user_name: 匿名
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/4/
  :language: Matlab
  :time: 2007/12/07 05:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>所詮は浮動小数点数なので大きなnについての精度は無考慮。</p>\n<p>primes(100)は100までの素数25個を返す。\n25と決めうちしているのは気持ち悪いが、double型が正確に表わせるのは高々十数桁であり、その範囲で使うぶんにはとりあえずはOKとする。\n桁数に応じた数の素数をとりだしたい場合は、第4行を次のように置き換えればよい:</p>\n<pre
    class=\"literal-block\">\nif n &lt; 6\n  p = primes(11);  % Five smallest primes\nelse\n
    \ u = n*(log(n) + log(log(n)));  % An upper bound of the value of the nth prime\n
    \ p = primes(u);\nend\n</pre>\n<p>上界uは <a class=\"reference\" href=\"/web/20080229110409/http://ja.wikipedia.org/wiki/%E7%B4%A0%E6%95%B0%E5%AE%9A%E7%90%86\">ピエール・デザルトの定理</a>
    による。</p>\n\n\t"
  :code: |
    function g = goedel(n)
      s = num2str(n) - '0';
      n = length(s);
      p = primes(100);
      g = prod(p(1:n).^s);
  :tags:
  - 参考になる
  :references:
    :url: 
    :title: 
- :id: '4670'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4670
  :user_name: あにす
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2007/12/07 05:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>で、結局ゲーデル数って何ですか?(w</p>\n\n\t"
  :code: |
    //http://ja.doukaku.org/100/　投稿用
    using System;
    using System.Collections.Generic;
    class Program {
    　　static void Main(string[] args) {
    　　　　Console.WriteLine(goedel(9));
    　　　　Console.WriteLine(goedel(81));
    　　　　Console.WriteLine(goedel(230));
    　　　　Console.ReadLine();
    　　}

    　　static double goedel(int n) {
    　　　　string tmpStr = n.ToString();
    　　　　double r = 1;
    　　　　List&lt;double&gt; prime = new List&lt;double&gt;(new double[] { 2 });
    　　　　for(int i = 3; ; i += 2) {
    　　　　　　bool isPrime = true;
    　　　　　　for(int j = 3; j &lt; i; j++) {
    　　　　　　　　if(i % j == 0) {
    　　　　　　　　　　isPrime = false;
    　　　　　　　　　　break;
    　　　　　　　　}
    　　　　　　}
    　　　　　　if(isPrime) prime.Add(i);
    　　　　　　if(prime.Count &gt;= tmpStr.Length) break;
    　　　　}
    　　　　for(int i = 0; i &lt; tmpStr.Length; i++) {
    　　　　　　r *= Math.Pow(prime[i], (double.Parse(tmpStr[i].ToString())));
    　　　　}
    　　　　return r;
    　　}
    }
  :tags:
  - C#2.0
  :references:
    :url: /web/20080229110409/http://blogs.dion.ne.jp/anis7742/#6547823
    :title: 貧脚レーサーのサボり日記
- :id: '4671'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4671
  :user_name: 梅紫蘇
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/596/
  :language: C
  :time: 2007/12/07 06:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>とりあえずお題通りに（桁が変わると一意じゃないのを見越してタイトルに？が付いてるのと解釈）。\nとりあえず解が出せるのは5桁までかな....6桁だと64bitでも溢れる気がする。\n桁数が少ないので素数は計算せず。</p>\n\n\t"
  :code: |
    #include &lt;complex&gt;

    static unsigned int prime[] = {2, 3, 5, 7, 11};

    unsigned int digit(unsigned int n, unsigned int base)
    {
        unsigned d = 1;
        for (; n &gt; (base - 1); n /= base) { d++; }
        return d;
    }

    unsigned long long goedel(unsigned int n)
    {
        unsigned long long ans = 1;
        for (unsinged int d = digit(n, 10); d &gt; 0; d--, n /= 10)
            ans *= (unsigned long long)std::pow((double)prime[d - 1], (int)(n % 10));
        return ans;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4673'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4673
  :user_name: 梅紫蘇
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/596/
  :language: 
  :time: 2007/12/07 07:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>計算違い。4桁で既に溢れてる....orz</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4674'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4674
  :user_name: 匿名
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/12/07 08:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>仕様通りに組んでみました</p>\n\n\t"
  :code: |
    !変数宣言が必要
    ●CPrime(N)
        PrimeListとは配列=2
        Flagとは整数=0
        Mとは整数=2
        Iとは整数
        (要素数(PrimeList)&lt;N)の間
            Iで2からINT(SQRT(M))+1まで繰り返す
                もし(M%I=0)ならば
                    Flag=1
                    抜ける
            もし(Flag=0)ならば
                PrimeListにMを配列追加
            Flag=0
            M=M+1
        PrimeListで戻る
    ●goedel(N)
        TMPとは整数=1
        NListとは配列=文字列分解(TOSTR(N))
        PrimeListとは配列=CPrime(N)
        PrimeListを反復
            TMP=TMP*(対象^NList[回数-1])
        TMPで戻る

    goedel(9)を表示
    goedel(81)を表示
    goedel(230)を表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4675'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4675
  :user_name: shimakuma
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/343/
  :language: xtal
  :time: 2007/12/07 12:14 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  nobreak 便利。\n\t"
  :code: |
    doukaku100: fun(n){
      primes: fiber(){
        yield 2;
        for(n: 3;; n += 2)
          for(d, m : 3, math::sqrt(n); d &lt; m; d += 2)
            if(n % d == 0) break; nobreak yield n;
      }
      r: 1;
      n.to_s.split("").zip(primes){|d, p| r *= math::pow(p, d.to_i); }
      return r;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4676'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4676
  :user_name: jijixi
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/582/
  :language: OCaml
  :time: 2007/12/07 15:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  なんとなく大きな数対応版 (Num モジュール使用)。\r<br>素数の方はたかだか数十番目くらいしか必要にならないので int のまま。\r<br><br>% ocaml nums.cma goedel.ml\r<br>goedel 9 =&gt; 2^9 =&gt; 512\r<br>goedel 81 =&gt; 2^8 * 3^1 =&gt; 768\r<br>goedel 230 =&gt; 2^2 * 3^3 * 5^0 =&gt; 108\r<br>goedel 1256 =&gt; 2^1 * 3^2 * 5^5 * 7^6 =&gt; 6617756250\r<br>goedel 34721 =&gt; 2^3 * 3^4 * 5^7 * 7^2 * 11^1 =&gt; 27286875000\r<br>goedel 542673 =&gt; 2^5 * 3^4 * 5^2 * 7^6 * 11^7 * 13^3 =&gt; 326393949142783922400\r<br>goedel 19425463134 =&gt; 2^1 * 3^9 * 5^4 * 7^2 * 11^5 * 13^4 * 17^6 * 19^3 * 23^1 * 29^3 * 31^4 =&gt; 475616767259341262526341725017954602561250\r<br>"
  :code: |
    open Num

    let gen_prime () =
       let now = ref 3 in
       let buf = ref [2] in
       let rec is_prime = function
          | 2 -&gt; true
          | n -&gt;
               let limit = n / 2 in
               if List.exists begin fun i -&gt;
                  if i &gt; limit
                  then false (* skip *)
                  else n mod i = 0
               end !buf
               then false
               else (buf := n::!buf; true)
       in
       let rec next_prime = function
          | 0 -&gt; Some 2
          | i -&gt;
             let n = !now in
             now := !now + 2;
             if is_prime n
             then Some n
             else next_prime i
       in
       Stream.from next_prime

    let goedel num =
       let s      = string_of_num num in
       let buf    = Buffer.create 10 in
       let add    = Buffer.add_string buf in
       let result = ref (Int 1) in
       let primes = gen_prime () in
       for i = 0 to (String.length s) - 1 do
          let cs = String.make 1 s.[i] in
          let m  = num_of_string cs in
          let n  = Stream.next primes in
          if Buffer.length buf &gt; 0 then add " * ";
          List.iter add [string_of_int n; "^"; cs];
          result := !result */ (power_num (Int n) m)
       done;
       (Buffer.contents buf, !result)

    let test () =
       let samples = [9; 81; 230; 1256; 34721; 542673; 19425463134] in
       let pr ch n = output_string ch (string_of_num n) in
       List.iter begin fun n -&gt;
          let s, r = goedel (Int n) in
          Printf.printf "goedel %a =&gt; %s =&gt; %a\n" pr (Int n) s pr r
       end samples

    let () = if not !Sys.interactive then test ()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4677'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4677
  :user_name: omoikani
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/07 17:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>素数生成が間違っていたので修正。\nついでに多倍長整数を使って、Overflowしないようにしてみた。</p>\n\n\t"
  :code: |
    fun prime n =
    let
      val a = List.tabulate (n - 1, fn x =&gt; x + 2)

      fun loop [] = []
        | loop (x::xs) =
          x :: loop (List.filter (fn i =&gt; i mod x &lt;&gt; 0) xs)
    in
      loop a
    end


    fun goedel (n : IntInf.int) =
    let
      open IntInf

      val p = map fromInt (prime 100)
      val a = map (valOf o Int.fromString o str) ((explode o toString) n)
    in
      toString (ListPair.foldl (fn (x, y, z) =&gt; pow (x, y) * z) 1 (p, a))
    end


    fun println s = print (s ^ "\n")

    val _ = println (goedel 9)
    val _ = println (goedel 81)
    val _ = println (goedel 230)
    val _ = println (goedel 19425463134)
  :tags:
  - SML/NJ
  :references:
    :url: 
    :title: 
- :id: '4678'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4678
  :user_name: mad
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/418/
  :language: Haskell
  :time: 2007/12/07 22:40 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ちょっとparallel list comprehension使ってみたかったんので...。\nzipWith (^)より可読性いいかもしれないですね。</p>\n\n\t"
  :code: "{-# OPTIONS_GHC -fglasgow-exts #-}\nimport Data.Char\n\nprimes = sieve [2..]
    \n  where \n  sieve (x:xs) = x : sieve [y| y&lt;-xs, y `mod` x /= 0]\n\ngoedel
    x = product [p^(digitToInt c) | p &lt;- primes | c &lt;- show x]\n\n{-\n*Main&gt;
    goedel 9\n512\n*Main&gt; goedel 81\n768\n*Main&gt; goedel 230\n108\n-}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4684'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4684
  :user_name: vtwntmtn
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/380/
  :language: D
  :time: 2007/12/08 10:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import std.conv;
    import std.math;
    import std.string;

    uint goedel(uint n) {
            static int[] primes = [ 2, 3 , 5, 7, 11, 13, 17, 19, 23, 29 ];
            real rslt = 1;
            string str = toString(n);
            for (int i = 0; i &lt; str.length; ++i) {
                    rslt *= pow(cast(real)(primes[i]), toUint([str[i]]));
            }
            return cast(uint)(rslt);
    }

    /*
    import std.stdio;

    void main() {
            writefln("%d, %d, %d", 9, 512, goedel(9));
            writefln("%d, %d, %d", 81, 768, goedel(81));
            writefln("%d, %d, %d", 230, 108, goedel(230));
    }
    */
  :tags:
  - dmd1.015
  :references:
    :url: 
    :title: 
- :id: '4685'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4685
  :user_name: koguro
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/438/
  :language: Mathematica
  :time: 2007/12/08 13:07 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>この手の問題はMathematicaだと簡単に書けますね。</p>\n\n\t"
  :code: |
    goedel[n_] := Times @@ MapIndexed[Prime[#2[[1]]]^#1 &amp;, IntegerDigits[n]]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4687'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4687
  :user_name: れい
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/601/
  :language: VB
  :time: 2007/12/08 22:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">素数導出コードを書く気が起こりません。\r\n無限精度整数がないのでやな感じです。</pre>\n\t"
  :code: |
    Module Module1

        Sub Main()
            Console.WriteLine(Goedel(9))
            Console.WriteLine(Goedel(81))
            Console.WriteLine(Goedel(230))
        End Sub

        Public Function Goedel(ByVal n As Integer) As Double
            If n &lt; 0 Then Throw New ArgumentOutOfRangeException()
            Dim digits As New List(Of Integer)
            Dim primes As Integer()
            Dim r As Double

            While (n &gt; 0)
                digits.Add(n Mod 10)
                n = n \ 10
            End While

            primes = GetPrimes(digits.Count)

            r = 1
            For i As Integer = 0 To digits.Count - 1
                r *= primes(i) ^ digits(digits.Count - i - 1)
            Next

            Return r
        End Function

        Public Function GetPrimes(ByVal count As Integer) As Integer()
            If count &gt; 10 Then Throw New ArgumentOutOfRangeException()
            Dim r(count - 1) As Integer
            Array.Copy(PrimeSeeds, 0, r, 0, count)
            Return r
        End Function

        Private PrimeSeeds As Integer() = New Integer() {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}

    End Module
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4715'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4715
  :user_name: pooq
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/10 06:30 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">j言語です。\r\n   goedel=.3 :'*/x:(p:i.#\":y)^\".\"0\":y'\r\n
    \  goedel 9\r\n512\r\n   goedel 81\r\n768\r\n   goedel 230\r\n108\r\n   goedel
    12345\r\n870037764750\r\n   goedel 123456789\r\n52713275010243038997421106186697438702252144407250\r\n\r\n\r\n#4657の提案(goedel2)と#4661の提案(goedel3)もやってみました。\r\n
    \  goedel2=.3 :'*/x:(p:i.#\":y)^&gt;:\".\"0\":y'\r\n   goedel2 230\r\n3240\r\n
    \  goedel2 23\r\n648\r\n\r\n   goedel3=.3 :'*/x:(p:i.#\":y)^|.\".\"0\":y'\r\n
    \  goedel3 230\r\n675\r\n   goedel3 23\r\n72\r\n</pre>\n\t"
  :code: |
    goedel=.3 :'*/x:(p:i.#":y)^"."0":y'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4716'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4716
  :user_name: yuin
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/12/10 09:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import java.lang.Double.parseDouble
    def sieve(s: Stream[Int]): Stream[Int] =
      Stream.cons(s.head, sieve(s.tail filter { _ % s.head != 0 }))
    def primes = sieve(Stream.from(2))

    def goedel(n:int) = {
      var s = n.toString
      primes.take(s.size).zipWithIndex.foldLeft(1d){(r, p) =&gt;
        r*Math.pow(p._1, parseDouble(s(p._2)+""))
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4723'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4723
  :user_name: kozima
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/10 13:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>普通に書くとイマイチ面白くないかと思ってひねり出したコード。牛刀割鶏な感はありますが、ジェネレータを使って繰り返しを行うマクロを定義して、これに素数ジェネレータを渡しています。これくらいだと
    Lisp マクロの入門用としていい題材だったかもしれません。</p>\n\n\t"
  :code: |
    (defun make-prime-generator ()
      (let ((primes ()))
        (lambda ()
          (if (null primes)
              (setf primes (list 2))
            (do ((x (1+ (car primes)) (1+ x)))
                ((notany (lambda (p) (= (rem x p) 0)) primes)
                 (push x primes))))
          (car primes))))

    (defmacro loop-with-generator ((var generator)
                                   (end-test &amp;rest result) &amp;body body)
      (let ((gvar (gensym)))
        `(do ((,gvar ,generator))
             (,end-test ,@result)
           (let ((,var (funcall ,gvar))) ,@body))))

    (defun goedel (n)
      (let ((digits (do ((m n (floor m 10)) (ds ()))
                        ((= m 0) ds)
                      (push (rem m 10) ds)))
            (code 1))
        (loop-with-generator (p (make-prime-generator))
                             ((null digits) code)
          (setf code (* (expt p (pop digits)) code)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4888'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/4888
  :user_name: vtwntmtn
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2007/12/19 17:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1&gt; c(goedel).\r\n{ok,goedel}\r\n2&gt; goedel:goedel(9).\r\n512\r\n3&gt;
    goedel:goedel(81).\r\n768\r\n4&gt; goedel:goedel(230).\r\n108\r\n</pre>\n\t"
  :code: |
    -module(goedel).
    -export([goedel/1]).

    prime(Num) -&gt; prime(Num - 1, [2], 3).

    prime(0, List, _) -&gt; lists:last(List);
    prime(Num, List, Max) -&gt;
        case lists:any(fun(X) -&gt; (Max rem X) =:= 0 end, List) of
            true  -&gt; prime(Num, List, Max + 2);
            false -&gt; prime(Num - 1, List ++ [Max], Max + 2)
        end.

    pow({_, 0}) -&gt; 1;
    pow({X, Y}) -&gt; X * pow({X, Y - 1}).

    column(Num) -&gt; length(hd(io_lib:format("~B", [Num]))).

    goedel(Num) -&gt;
        List = [pow(X) || X &lt;- goedel(Num, [], column(Num))],
        lists:foldl(fun(X, Proc) -&gt; X * Proc end, 1, List).

    goedel(_, List, 0) -&gt; lists:zip([prime(X) || X &lt;- lists:seq(1, length(List))], List);
    goedel(Num, List, Size) -&gt; goedel(Num div 10, [Num rem 10] ++ List, Size - 1).
  :tags:
  - ErlangOTP_R10B-10
  :references:
    :url: 
    :title: 
- :id: '5075'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/5075
  :user_name: saws
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/642/
  :language: Ruby
  :time: 2007/12/31 11:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ここでevalはどうなんだろう. \n\t"
  :code: |
    require "mathn"
    def goedel(num)
      prime = Prime.new
      eval(num.to_s.scan(/\d/).map{|d| prime.next**d.to_i}.join('*'))
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5076'
  :parent_id: '100'
  :url: http://ja.doukaku.org/comment/5076
  :user_name: susu
  :user_url: /web/20080229110409/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2007/12/31 13:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">セルフprimeで。\r\nデフォルト値を変更するときは\r\ngoedel ~prime:[|1.;
    2.; 3.|] n とか\r\ngoedel ~prime:(gen_prime x) n のようにして使います。</pre>\n\t"
  :code: "let goedel ?(prime=[|2.; 3.; 5.; 7.; 11.|]) n =\n  let res = ref 1. in\n
    \ let i = ref 0 in (*iteri用*)\n  String.iter\n    (fun x -&gt; \n      res :=
    !res *. (prime.(!i) ** (float_of_string (Char.escaped x)) );\n      incr i)\n
    \   (string_of_int n);\n  res.contents;;\n"
  :tags: []
  :references:
    :url: 
    :title: 
