---
:id: '15'
:title: ファイル更新の監視
:comments:
- :id: '3371'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/3371
  :user_name: にしお
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/09 09:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  あるファイル名がfilenameという変数に入っているとします。\r\nこのファイルが更新されるたびに\"modified!\"と表示するプログラムを作ってください。\r\n<p>\r\nもしOSに依存する場合はそのOS名のタグを、\r\n依存しない場合は「OS非依存」というタグをつけてください。\r\nわからなければつけなくても構いません。\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '394'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/394
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/07/09 12:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ファイルの存在チェックとタイムスタンプのチェックのみを１秒周期で行っています。\r\n\t"
  :code: |
    import java.io.File;

    public class Sample {
        static final String filename = "./check";
        static final long INTERVAL = 1000; // 1 sec
        static final String MESSAGE = "modified!";

        public static void main(String[] args) throws InterruptedException {
            File checkFile = new File(filename);
            long lastModified = checkFile.lastModified();
            while (true) {
                Thread.sleep(INTERVAL);
                long lm2 = checkFile.lastModified();
                if (lastModified != lm2) {
                    System.out.println(MESSAGE);
                    lastModified = lm2;
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6587'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/6587
  :user_name: genzou
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/25 06:04 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <p>一秒ごとにファイルの更新日時をチェックしています。</p>\n\r\n\t"
  :code: |
    def filename = "c:/test.txt"

    def file = new File(filename)
    def lastModified = file.lastModified()
    while(true){
        if( lastModified != file.lastModified() ){
            println "modified! : OS非依存 : ${file.lastModified()}"
            lastModified = file.lastModified()
        }
        Thread.sleep(1000)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '461'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/461
  :user_name: ocean
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/07/10 09:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  短い間隔で続けざまに変更すると、modified!が一度しか表示されないことがあるので、題意を満たしてないかも。\r\n\t"
  :code: |
    import os, time

    filename = "a.txt"

    def get_mtime():
        return os.stat(filename).st_mtime

    mtime = get_mtime()
    while 1:
        time.sleep(1)
        new_mtime = get_mtime()
        if mtime != new_mtime:
            mtime = new_mtime
            print "modified!"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1851'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/1851
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/05 01:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Timer と TimerTask を使ってみました。\r\n\t"
  :code: "import java.io.File;\nimport java.util.TimerTask;\n\npublic class FileCheck
    extends TimerTask {\n\n\tprivate File targetFile;\n\tprivate long lastModify;\n\n\tpublic
    FileCheck(String filename){\n\t\tif(filename == null)\n\t\t\tthrow new IllegalArgumentException();\n\t\ttargetFile
    = new File(filename);\n\t\tlastModify = targetFile.lastModified();\n\t}\n\n\t@Override\n\tpublic
    void run() {\n\t\tlong modify = targetFile.lastModified();\n\t\tif(modify != lastModify)\n\t\t\tdoModifiedAction();\n\t\tlastModify
    = modify;\n\t}\n\n\tprotected void doModifiedAction() {\n\t\tSystem.out.println(\"modified!\");\n\t}\n}\n\n\nimport
    java.util.Timer;\n\npublic class FileChekMain {\n\tpublic static void main(String[]
    args) {\n\n\t\tString filename = \"./bin/aaa.txt\";\n\n\t\tTimer timer = new Timer();\n\t\ttimer.schedule(new
    FileCheck(filename), 1000L,1000L);\n\t}\n\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6272'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/6272
  :user_name: kozima
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/164/
  :language: OCaml
  :time: 2008/05/08 14:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>処理順に依存しないようにしてみました。</p>\n\r\n\t"
  :code: |
    let monitor path sec =
      let rec loop stat =
        Unix.sleep sec;
        let next_stat = Unix.stat path in
          if stat &lt;&gt; next_stat then print_endline "modified!";
          loop next_stat
      in loop (Unix.stat path)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6271'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/6271
  :user_name: susu
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/05/08 08:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  こちらも処理順依存です。\r<br>ocamlが左から評価するようになったら、sleepは右のstat前にいります。\r\n\t"
  :code: |
    (*ocaml unix.cma doukaku15.ml*)
    let monitor path sec =
      while true do
        if (Unix.sleep sec; Unix.stat path) &lt;&gt; Unix.stat path
        then print_endline "modified!"
      done
    in monitor "a.txt" 2;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '392'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/392
  :user_name: zigorou
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/64/
  :language: Perl
  :time: 2007/07/09 12:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  $ perl watch.pl /path/to/file 3\r\n\r\nなら3秒おきに監視みたいな感じ。\r\nモジュール使うと反則かな？w\r\n\t"
  :code: "#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Carp::Clan qw(croak);\nuse
    File::Monitor;\n\nmy $filename = shift @ARGV;\nmy $duration = int(shift @ARGV
    || 5);\n\ncroak qq|No such file. ($filename)| unless (-e $filename);\ncroak qq|Invalid
    duration| unless ($duration &gt;= 1);\n\nmy $monitor = File::Monitor-&gt;new;\n$monitor-&gt;watch(\n
    \   $filename, \n    sub {\n        my ($name, $event, $change) = @_;\n        if
    ($change) {\n            print \"modified\\n\";\n        }\n    }\n);\n\nwhile
    (1) {\n    $monitor-&gt;scan;\n    sleep $duration;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6284'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/6284
  :user_name: だいら
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/468/
  :language: PHP
  :time: 2008/05/14 01:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: "&lt;?php\n$filename = \"testfile.txt\";\n$sleepTime = 1; //micro seconds\n\nif
    (!($modifiedTimeOld = get_file_modified_time($filename))) {\n    exit(\"File not
    found.\");\n}\n\nwhile (true) {\n    clearstatcache();\n    \n    if (!($modifiedTimeNew
    = get_file_modified_time($filename))) {\n        exit(\"File not found.\");\n
    \   }\n    \n    if ($modifiedTimeOld != $modifiedTimeNew) {\n        echo \"modified!\\n\";\n
    \       $modifiedTimeOld = $modifiedTimeNew;\n    }\n    \n    usleep($sleepTime);\n}\n\nfunction
    get_file_modified_time($filename) {\n    if (check_file_exist($filename)) {\n
    \       return filemtime($filename);\n    } else {\n        return false;\n    }\n}\n\nfunction
    check_file_exist($filename) {\n    if (!(file_exists($filename) &amp;&amp; is_file($filename)))
    {\n        return false;\n    }\n    return true;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3685'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/3685
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/03 02:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">kansi.txt　は　わざとですよね？</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '390'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/390
  :user_name: cats
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/07/09 11:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    using System;
    using System.IO;

    class Program
    {
      static void Main()
      {
        string filename = @"c:\test.txt";
        FileSystemWatcher fsw = new FileSystemWatcher(
          Path.GetDirectoryName(filename),
          Path.GetFileName(filename));
        fsw.Changed += delegate(object sender, FileSystemEventArgs e)
        {
          Console.WriteLine("modified!");
        };
        while (true)
          fsw.WaitForChanged(WatcherChangeTypes.All);
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '419'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/419
  :user_name: ytakenaka
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2007/07/10 02:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  (modify-checher ファイル名) で使えます。\r\n\t"
  :code: |
    (defun modify-checher (filename)
      (let ((last-update nil))
        (labels ((checher (stream)
                   (let ((present (file-write-date stream)))
                     (unless (equal last-update present)
                       (print "modified!")
                       (setf last-update present)))))
          (with-open-file (stream filename :direction :input)
            (setf last-update (file-write-date stream))
            (loop do
                 (sleep 5)
                 (checher stream))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '387'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/387
  :user_name: anekos
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/170/
  :language: Ruby
  :time: 2007/07/09 11:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: "last_mtime = File.mtime(filename)\nloop do\n  unless (mtime = File.mtime(filename))
    == last_mtime\n    puts \"modified!\" \n    last_mtime = mtime\n  end\n  sleep(0.1)\nend\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3192'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/3192
  :user_name: nobsun
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/28 13:45 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">OS非依存、GHC依存(threadDelay)\r\nチェックは1秒毎</pre>\r\n\t"
  :code: "module Main (main) where\n\nimport Control.Monad (when)\nimport Control.Concurrent
    (threadDelay)\nimport Data.Maybe (maybe, listToMaybe)\nimport System.Directory
    (getModificationTime)\nimport System.Environment (getArgs)\nimport System.IO.Error
    (catch)\nimport System.Time (ClockTime, getClockTime)\n\nmain :: IO ()\nmain =
    flip watchFile Nothing . maybe \".\" id . listToMaybe =&lt;&lt; getArgs\n\nwatchFile
    :: FilePath -&gt; Maybe ClockTime -&gt; IO ()\nwatchFile file prev\n = catch (threadDelay
    (1*1000000) &gt;&gt; check prev)\n         (const $ watchFile file . Just =&lt;&lt;
    getClockTime)\n   where \n     check Nothing      = watchFile file . Just =&lt;&lt;
    getModificationTime file\n     check (Just mtime) = do { mtime' &lt;- getModificationTime
    file\n                             ; when (mtime &lt; mtime') (putStrLn \"modified!\")\n
    \                            ; watchFile file (Just mtime')\n                             }\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1012'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/1012
  :user_name: kkobayashi
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/16 13:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Pure Rなので多分OS非依存だと思います。\r\n\t"
  :code: |
    watch.file &lt;- function(file){
       mtime &lt;- file.info(file)$mtime
       repeat{
           if(mtime != (file.info(file)$mtime)){
               mtime &lt;- file.info(file)$mtime
               print("modified!")
           }
           Sys.sleep(1)
       }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2229'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/2229
  :user_name: ソラ
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/391/
  :language: HSP
  :time: 2007/08/16 09:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">適当です。バイナリは使えないぜ。</pre>\r\n\t"
  :code: "//HSPでファイル更新確認プログラム\n\n*config\n\t//監視するファイル名\n\tfilename = kansi.txt\n\t//確認する間隔（１０００の１分秒　１０００で１秒）\n\ttimes
    = 20\n\t//以下、プログラム\n\tpuel = \"\"\n\tgoto *gurdman\n*gurdman\n\tnotesel puel\n\tnoteload
    filename\n\tif puel != pool {\n\t\tgosub *alert\n\t}\n\tpool = puel\n\tawait times\n*alert\n\tmes
    \"modified!\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '399'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/399
  :user_name: kawauchi
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/14/
  :language: Ruby
  :time: 2007/07/09 15:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  mtime を見ないで済むよう書き換えました。\r\n\t"
  :code: |
    require 'rubygems'
    require 'win32/ipc' # http://rubyforge.org/projects/win32utils
    require 'win32/changenotify' # http://rubyforge.org/projects/win32utils
    include Win32

    exit if ARGV == []
    filename = File.expand_path(ARGV[0])

    flags = ChangeNotify::FILE_NAME | ChangeNotify::LAST_WRITE | ChangeNotify::SIZE
    cn = ChangeNotify.new(File.dirname(filename), false, flags)

    loop {
      cn.wait(){|sa|
        sa.each {|st|
          puts "modified!" if st.file_name == File.basename(filename)
        }
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5933'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/5933
  :user_name: howking
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/744/
  :language: Erlang
  :time: 2008/03/04 15:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  MD5でチェックさせてみました。\r\n\t"
  :code: |
    -module(checker).
    -export([start/0]).

    start()-&gt;
        Filename="test.html",
        loop(Filename,[]).

    loop(F,C)-&gt;
        timer:sleep(1000),
        NC=erlang:md5(element(2,file:read_file(F))),
        if
            C =:= [] -&gt; loop(F,NC);
            C =:= NC -&gt; loop(F,C);
            C =/= NC -&gt;
                io:format("modified!~n"),
                loop(F,NC)
        end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '896'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/896
  :user_name: ofk
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/247/
  :language: JavaScript
  :time: 2007/07/15 06:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">（　＾Ï\x89＾）</pre>\r\n\t"
  :code: "function modified(f) {\n\tsetInterval(function () {\n\t\tvar s = arguments.callee;\n\t\tvar
    r = new XMLHttpRequest;\n\t\tr.open(\"GET\", f, true);\n\t\tr.onload = function(){\n\t\t\tif
    (s.b &amp;&amp; s.b != r.responseText)\n\t\t\t\talert(\"modified!\");\n\t\t\ts.b
    = r.responseText;\n\t\t};\n\t\tr.send(null);\n\t}, 1000);\n}\n\nmodified(filename);\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2771'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/2771
  :user_name: naoya_t
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/09/01 17:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">system() から test, touch, sleep, rm を呼び出しています。ほとんどシェルスクリプトです。これを敢えてawkで書くメリットはないです。\r\n%
    awk -f kanshi.awk -v filename=foobar\r\n</pre>\r\n\t"
  :code: "BEGIN {\n\tsrand ; rand ; rand\n\ttmpfile = sprintf(\"/tmp/kanshi%06d\",
    rand*1000000)\n\t# create tmpfile\n\tsystem(\"touch -r \" filename \" \" tmpfile)\n\n\twhile
    (1) {\n\t\tr = system(\"test \" filename \" -nt \" tmpfile) # if filename is newer
    than tmpfile\n\t\tif (r == 0) {\n\t\t\t# message\n\t\t\tprint \"modified!\"\n\t\t\t#
    synchronize\n\t\t\tsystem(\"touch -r \" filename \" \" tmpfile)\n\t\t}\n\t\tif
    (system(\"sleep 1\")) break  # aborted\n\t}\n\n\t# remove tmpfile\n\tsystem(\"rm
    -f \" tmpfile)\n\texit\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '595'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/595
  :user_name: rubikitch
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/11 19:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  posix対応。処理系はsbcl。\r\n\t"
  :code: "(defun modify-checker (filename)\n  (labels ((mtime () (sb-posix:stat-mtime
    (sb-posix:stat filename))))\n    (let ((last-mtime (mtime)) current-mtime)\n      (loop
    do\n           (sleep 3)\n           (setf current-mtime (mtime))\n           (when
    (/= current-mtime last-mtime)\n             (format t \"modified!~%\")\n             (setf
    last-mtime current-mtime))))))\n\n           \n         \n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '421'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/421
  :user_name: ytakenaka
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/35/
  :language: 
  :time: 2007/07/10 02:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">失敬。冒頭に\r\n(defvar filename \"foo.txt\")\r\nをくわえてください。^^;\r\n最後に、\r\n(defun
    file-checher2 ()\r\n    (file-checher filename))\r\nもくわえてください。(file-checher2)でお題への回答になります。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '405'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/405
  :user_name: kacchi
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/07/09 20:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">EmacsLisp です :-)\r\n毎秒、更新時刻を比較します。\r\n(setq
    filename \"hoge\") などとして、M-x watch-modification で起動してください。\r\n変数 filename がセットされてないなら、ファイル名を聞いてくるので指定してください。\r\nキャンセルするには、M-x
    watch-modification-cancel です。\r\n</pre>\r\n\t"
  :code: "(defvar watch-modification-repeat-sec 1.0)\n(defvar watch-modification-timer
    nil)\n(defvar watch-modification-stack nil)\n(defvar watch-modification-buffer
    \"*watch*\")\n\n(defun watch-modification ()\n  (interactive)\n  (let ((file (or
    (and (boundp 'filename) filename)\n\t\t  (read-file-name \"File: \"))))\n    (unless
    (string= file \"\")\n      (watch-modification-cancel)\n      (setq watch-modification-timer\n\t
    \   (run-with-timer 1 watch-modification-repeat-sec\n\t\t\t    'watch-modification-function
    file)))))\n\n(defun watch-modification-cancel ()\n  (interactive)\n  (when watch-modification-timer\n
    \   (cancel-timer watch-modification-timer))\n  (setq watch-modification-timer
    nil\n\twatch-modification-stack nil))\n\n(defun watch-modification-function (file)\n
    \ (let ((modified-time (nth 5 (file-attributes file))))\n    (if (null watch-modification-stack)\n
    \       (push modified-time watch-modification-stack)\n      (unless (equal modified-time
    (car watch-modification-stack))\n\t(push modified-time watch-modification-stack)\n\t(save-selected-window\n\t
    \ (pop-to-buffer\n\t   (set-buffer (get-buffer-create watch-modification-buffer)))\n\t
    \ (insert \"modified!\\n\"))))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '531'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/531
  :user_name: mjy
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/94/
  :language: Bash
  :time: 2007/07/11 05:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    #! /bin/bash

    filename=~/tmp/check

    read -n 0 &lt; $filename
    while sleep 3; do
        if [ -N $filename ]; then
            echo 'modified!'
            sleep 1
            read -n 0 &lt; $filename
        fi
    done
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1365'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/1365
  :user_name: katsu
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/23 08:02 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  (T,T)が、唇噛んで泣いているように見えるんです。\r\n\t"
  :code: |
    watch(Filename,MTime):-sleep(0.1),time_file(Filename,MTime0),modified(MTime0,MTime),watch(Filename,MTime0).
    modified(_,0).
    modified(T,T).
    modified(_,_):-writeln(modified).

    :-watch('./watch.pl',0).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3676'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/3676
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: Scheme
  :time: 2007/11/02 17:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">SchemeというかGaucheですが。\r\nしかも超亀レスですが。</pre>\r\n\t"
  :code: |
    (use file.util)

    (define filename "hoge.txt")

    (define (make-file-modification-monitor fname sleep on-modified)
      (define (mon c)
        (let1 n (file-mtime fname)
          (unless (= c n) (on-modified))
          (sleep)
          (mon n)))
      (cut mon (file-mtime fname)))

    ((make-file-modification-monitor filename (cut sys-sleep 1) (cut print "modified!")))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '398'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/398
  :user_name: id:nekoruri
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/111/
  :language: 
  :time: 2007/07/09 14:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  POE持ち出してきた自分はもっと反則なので大丈夫だと思います：）\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5827'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/5827
  :user_name: silverwire
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/646/
  :language: 
  :time: 2008/02/21 17:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">誤りが 1つありましたので、訂正します。\r\n\r\n20c20\r\n&lt;
    \      ping -n %1 127.0.0.1 &gt;NUL\r\n---\r\n&gt;       ping -n 1 127.0.0.1 &gt;NUL
    ::  1秒間スリープ</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1709'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/1709
  :user_name: tomatsu
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/02 12:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    function monitor(filename) monitor(filename, 1000, "modified!")
    function monitor(filename, interval, message){
      f = getFile(filename)
      lm = f.lastModified()
      while (true){
        sleep(interval)
        m = f.lastModified()
        if (m != lm){
          println(message)
          lm = m;
        }
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '397'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/397
  :user_name: sumim
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/09 14:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Squeak Smalltalk で。</pre>\r\n\t"
  :code: |
    | directory filename lastModTime |
    directory := FileDirectory default.
    filename := 'test.txt'.
    lastModTime := (directory entryAt: filename) modificationTime.
    [  [  | modificationTime |
          modificationTime := (directory entryAt: filename) modificationTime.
          modificationTime = lastModTime ifFalse: [
             Transcript cr; show: 'modified!'.
             lastModTime := modificationTime].
          (Delay forSeconds: 3) wait
       ] repeat
    ] forkAt: Processor userBackgroundPriority
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '389'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/389
  :user_name: id:nekoruri
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/111/
  :language: Perl
  :time: 2007/07/09 11:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  POE::Wheel::FollowTail\r\n\t"
  :code: |
    #!/usr/local/bin/perl

    use strict;
    use warnings;

    use POE;
    use POE::Wheel::FollowTail;

    my $target_filename = shift;

    if ( !defined $target_filename or $target_filename eq '' ) {
            print "$0 &lt;filename&gt;\n";
            exit 1;
    }

    POE::Session-&gt;create(
            inline_states =&gt; {
                    _start =&gt; \&amp;setup,
                    handler_input =&gt; \&amp;handler_input,
            },
            args =&gt; [ $target_filename ],
    );

    POE::Kernel-&gt;run;
    exit;

    sub setup
    {
            my ( $heap, $target_filename ) = @_[HEAP, ARG0];
            $heap-&gt;{tail_wheel} = POE::Wheel::FollowTail-&gt;new(
                    Filename =&gt; $target_filename,
                    InputEvent =&gt; 'handler_input',
            );
            return;
    }

    sub handler_input
    {
            print "modified!\n";
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4047'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/4047
  :user_name: faultier
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/545/
  :language: Objective
  :time: 2007/11/15 06:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">NSRunLoopで回すのはいいのかどうか分かりません。NSTimerを使いたくてこの形に。\r\n一応Leopardタグ付けますがfor
    ~ in ~のところをNSEnumeratorを使うように書き換えればXcode2.xでもコンパイルできるはず。\r\nあと、Leopardだとそのままずばりファイルの監視をするFSEventというAPIがあります。\r\nTimeMachineが使ってるやつ。これはCなんですが、詳細は参考ページ参照で。</pre>\r\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n\n#define WATCH_PATH @\"target
    path\"\n#define WATCH_FILE_ATTR @\"target file atrributes\"\n#define WATCH_FILE_MODIFIED
    @\"target file modified\"\n\n@interface Watcher : NSObject\n{\n    NSMutableDictionary
    \   *targetPathes;\n    NSFileManager        *manager;\n    NSMutableDictionary
    \   *fileAttributes;\n}\n- (id)initWithTargetPathes:(NSArray *)pathes;\n- (void)checkModified;\n@end\n\n@implementation
    Watcher\n- (id)initWithTargetPathes:(NSArray *)pathes;\n{\n    targetPathes    =
    [NSMutableDictionary dictionary];\n    manager            = [NSFileManager defaultManager];\n
    \   fileAttributes    = [NSMutableDictionary dictionary];\n    for (NSString *path
    in pathes)\n    {\n        [targetPathes setValue:path forKey:path];\n        NSDictionary
    *status = [manager fileAttributesAtPath:path traverseLink:YES];\n        if (status)
    [fileAttributes setValue:status forKey:path];\n    }\n    return self;\n}\n- (void)sendNotification:(NSString
    *)aPath withStatus:(id)aStatus\n{\n    NSString *message = [NSString stringWithFormat:@\"'%@'
    is modified!\", aPath];\n    [[NSNotificationCenter defaultCenter] postNotificationName:WATCH_FILE_MODIFIED\n
    \                                                       object:message\n                                                      userInfo:aStatus];\n
    \   return;\n}\n- (void)checkModified\n{\n    for (NSString *path in targetPathes)\n
    \   {\n        NSAutoreleasePool *pool    = [NSAutoreleasePool new];\n        NSDictionary
    *_prev        = [fileAttributes objectForKey:path];\n        NSDictionary *_current
    \   = [manager fileAttributesAtPath:path traverseLink:YES];\n        if (_prev
    || _current)\n        {\n            if (!_current)\n            {\n                [fileAttributes
    removeObjectForKey:path];\n                [self sendNotification:path withStatus:nil];\n
    \           }\n            else if (![_current isEqual:_prev])\n            {\n
    \               [fileAttributes setObject:[_current copy] forKey:path];\n                [self
    sendNotification:path withStatus:_current];\n            }\n        }\n        [pool
    release];\n    }\n    return;\n}\n@end\n\n@interface FileStatusLogger : NSObject\n{\n
    \   NSNotificationCenter* center;\n}\n- (id)initWithNotificationCenter:(NSNotificationCenter
    *)aCenter;\n- (void)log:(NSNotification *)notice;\n@end\n\n@implementation FileStatusLogger\n-
    (id)initWithNotificationCenter:(NSNotificationCenter *)aCenter\n{\n    [super
    init];\n    [aCenter addObserver:self selector:@selector(log:) name:WATCH_FILE_MODIFIED
    object:nil];\n    return self;\n}\n- (id)init\n{\n    return [self initWithNotificationCenter:[NSNotificationCenter
    defaultCenter]];\n}\n- (void)log:(NSNotification *)notice;\n{\n    NSLog(@\"%@\",
    [notice object]);\n    return;\n}\n@end\n\nvoid usage(name)\n{\n    printf(\"Usage:
    %s &lt;interval&gt; &lt;duration&gt; &lt;path1&gt; [&lt;path2&gt;...]\\n\", name);\n
    \   exit(1);\n}\n\nint main(int argc, char *argv[])\n{\n    if (argc &lt; 4) usage(argv[0]);\n
    \   \n    NSAutoreleasePool *pool    = [NSAutoreleasePool new];\n    NSMutableArray
    *pathes    = [NSMutableArray array];\n    NSTimeInterval interval    = strtod(argv[1],
    NULL);\n    NSTimeInterval duration    = strtod(argv[2], NULL);\n    \n    if
    (interval &lt;= 0) usage(argv[0]);\n\n    int i;\n    for (i = 3; i &lt; argc;
    i++)\n    {\n        [pathes addObject:[NSString stringWithCString:argv[i]]];\n
    \   }\n\n    Watcher *watcher            = [[Watcher alloc] initWithTargetPathes:pathes];\n
    \   FileStatusLogger *logger    = [FileStatusLogger new];\n    NSTimer *timer
    \               = [NSTimer scheduledTimerWithTimeInterval:interval\n                                                                   target:watcher\n
    \                                                                selector:@selector(checkModified)\n
    \                                                                userInfo:nil\n
    \                                                                 repeats:YES];\n
    \   NSLog(@\"monitoring start\");\n    [[NSRunLoop currentRunLoop] addTimer:timer
    forMode:NSDefaultRunLoopMode];\n    if (duration &gt; 0)\n    {\n        [[NSRunLoop
    currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:duration]];\n
    \   }\n    else\n    {\n        [[NSRunLoop currentRunLoop] run];\n    }\n    NSLog(@\"monitoring
    end\");\n    \n    [pool release];\n\n    return 0;\n}\n"
  :tags: []
  :references:
    :url: /web/20101226213933/http://developer.apple.com/samplecode/Watcher/index.html
    :title: Watcher(FSEvent APIの使用例)
- :id: '404'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/404
  :user_name: shiro
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/07/09 20:15 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">同じ方針ですが、modifyされているときのアクションは純粋に副作用だけなので(printするだけ)、\r\n\r\n(if
    条件 (loop) (begin (action) (loop)))\r\n\r\nよりは\r\n\r\n(unless 条件 (action))\r\n(loop)\r\n\r\nのように副作用だけくくり出してしてしまうのが好みですね
    \r\n(分岐が増えた場合でもloopは一箇所にまとめられるし)。たとえば：</pre>\r\n\t"
  :code: |
    (define (modify-checker)
      (let loop ((previous #f)
                 (modified (file-mtime filename)))
        (when (and previous (not (= previous modified)))
          (print "modified"))
        (sys-sleep 3)
        (loop modified (file-mtime filename))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '406'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/406
  :user_name: kacchi
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/145/
  :language: Scheme
  :time: 2007/07/09 20:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">自分も良くわかってませんが、とりあえず投稿しときます。:p</pre>\r\n\t"
  :code: |
    (use file.util)

    (define filename "hoge.txt")

    (define (watch-modification file since nsec)
      (let loop ((last-mtime since))
        (sys-nanosleep nsec)
        (let ((current (max (file-mtime file) last-mtime)))
          (unless (= current last-mtime) (print "modified!"))
          (loop current))))

    (watch-modification filename (file-mtime filename) 500000000) ;0.5s
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4349'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/4349
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/23 02:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>タイマーでぐるぐる回してるだけです</p>\n\r\n\t"
  :code: |
    filename=デスクトップ&amp;"test.txt"
    TMP=filenameのファイル更新日時
    監視タイマーとはタイマー
    これについて
        値=1000
        時満ちた時は～
            もし(TMP&lt;&gt;ファイル更新日時(filename))ならば
                "modified!"を表示
                TMP=filenameのファイル更新日時
        開始
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '385'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/385
  :user_name: es
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/147/
  :language: Scheme
  :time: 2007/07/09 10:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">なんか根本的にわかってないかもですが・・</pre>\r\n\t"
  :code: |
    (use file.util)

    (define filename "hoge.txt")

    (define (modify-checker)
      (let loop ((lastmodified (file-mtime filename)))
        (sys-sleep 3)
        (if (= lastmodified (file-mtime filename))
            (loop lastmodified)
            (begin (print "modified!")
                   (loop (file-mtime filename))))))

    (modify-checker)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '393'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/393
  :user_name: にしお
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/09 12:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  モジュールの豊富さもPerlのパワーの一つだと思うのでいいんじゃないでしょうか。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5826'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/5826
  :user_name: silverwire
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/21 17:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">指定されたファイルのコピーを一時ディレクトリ(%TEMP%)に作成し、バイナリモードで元\r\nのファイルと比較しています。タイムスタンプだけが更新された場合には検出できません。\r\n\r\n
    \ e.g.\r\n    C:&gt;monitor monitor.bat\r\n    指定されたファイルを監視しています。\r\n    終了するにはCtrl-Cを押してください。\r\n\r\n
    \   02:22:22 指定されたファイルが更新されました。\r\n\r\nWindows XPで動作を確認。fcはWindows NTにも存在するので、NTでも動作するかもしれま\r\nせん。\r\n\r\n#
    为了妈贡献出我自己手里的全部二。</pre>\r\n\t"
  :code: |
    :: monitor.bat
    @echo off
      setlocal
        set f=%TEMP%\%~nx1

        if "%1" == "" (echo %~n0 [FILE] &amp; goto :EOF)
        if not exist %1 (echo 指定されたファイルが見つかりません。 &amp; goto :EOF)

        echo 指定されたファイルを監視しています。
        echo 終了するにはCtrl-Cを押してください。
        echo.
        copy %1 %f% &gt;NUL
        :loop
          fc /b %f% %1 &gt;NUL
          if %ERRORLEVEL% equ 1 (
            for /f "tokens=2 delims=. " %%t in ('echo.^|time') do echo %%t 指定されたファイルが更新されました。
            copy %1 %f% &gt;NUL
          )
          ping -n %1 127.0.0.1 &gt;NUL
        goto loop
      endlocal
    goto :EOF
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '445'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/445
  :user_name: es
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/147/
  :language: 
  :time: 2007/07/10 07:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">おお、キレイ!\r\n勉強になります。ありがとうございます。\r\n\r\nあと自分のでは、8行目と11行目の間に更新されると\"modified!\"の出力が一回少なくなってしまいますね。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2230'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/2230
  :user_name: ソラ
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/391/
  :language: HSP
  :time: 2007/08/16 09:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">すいません、最後の行にreturnいれてください。修正版は</pre>\r\n\t"
  :code: "//HSPでファイル更新確認プログラム\n\n*config\n\t//監視するファイル名\n\tfilename = kansi.txt\n\t//確認する間隔（１０００の１分秒　１０００で１秒）\n\ttimes
    = 20\n\t//以下、プログラム\n\tpuel = \"\"\n\tgoto *gurdman\n*gurdman\n\tnotesel puel\n\tnoteload
    filename\n\tif puel != pool {\n\t\tgosub *alert\n\t}\n\tpool = puel\n\tawait times\n*alert\n\tmes
    \"modified!\"\n\treturn\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '391'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/391
  :user_name: kawauchi
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/14/
  :language: Ruby
  :time: 2007/07/09 12:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    require 'event' # http://yagi.xrea.jp/2006/08/event.rb

    filename = File.expand_path("touched.txt")

    last_mtime = File.stat(filename).mtime
    loop {
      Win32::Event::FindChangeNotification(File.dirname(filename))
      file_mtime = File.stat(filename).mtime
      if last_mtime != file_mtime
        puts "modified!"
        last_mtime = file_mtime
      else
        sleep 0.1
      end
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '418'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/418
  :user_name: Mistfeal
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/153/
  :language: PHP
  :time: 2007/07/10 02:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  CLI版。\r\nPHPでローカルファイルを監視することなんて、まず無いと思いますが一応。\r\n\t"
  :code: "#!/usr/bin/php\n&lt;?php\n$filename = $argv[1];\n$second   = 1;\nif ( file_exists($filename)
    ) {\n\t$fp = fopen($filename,\"r\");\n\t$fbin1 = fread($fp,filesize($filename));\n\tfclose($fp);\n}else
    {\n\texit(\"file not found &lt;{$filename}&gt;\\n\");\n}\nwhile (true) {\n\t$fp
    = fopen($filename,\"r\");\n\t$fbin2 = fread($fp,filesize($filename));\n\tif (
    $fbin1 != $fbin2  ) {\n\t\techo \"modified!\\n\";\n\t\t$fbin1 = $fbin2;\n\t}\n\tfclose($fp);\n\tsleep($second);\n}\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '929'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/929
  :user_name: yuin
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/15 13:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  JAVAと一緒。\r\n\t"
  :code: |
    import java.io._
    def watchFile(name:String) = {
      val f = new File(name)
      var last = f.lastModified
      while(true){
        Thread.sleep(1000)
        if(f.lastModified != last) {
          println("modified!")
          last = f.lastModified
        }
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '413'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/413
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/07/10 00:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">実は役に立たない基本形(笑\r\n</pre>\r\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;time.h&gt;
    #include &lt;sys/stat.h&gt;
    #include &lt;sys/errno.h&gt;

    int moniter(const char *filename, const useconds_t interval)
    {
        struct stat s;
        time_t      last_modified = 0;
        int         result = 0;

        printf("monitering file : %s\n", filename);
        result = stat(filename, &amp;s);
        if( result == 0 )
        {
            last_modified = s.st_mtime;
            do
            {
                printf("."); fflush(stdout);
                stat(filename, &amp;s);
                if( last_modified &lt; s.st_mtime )
                {
                    printf(" modified!\n");
                    last_modified = s.st_mtime;
                }
                usleep( interval );
            }while(1);
         }
        else
        {
            printf("error:%d\n", errno);
        }
        return 0;
    }

    int main(int argc, char *argv[])
    {
        if( argc &lt; 2 )
        {
            return 1;
        }
        if( *argv[1] == '\0' )
        {
            return 2;
        }

        // 無限ループ 監視間隔1.5秒
        moniter(argv[1], 1500);
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4767'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/4767
  :user_name: omoikani
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/11 20:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>監視は1秒毎。</p>\n\r\n\t"
  :code: |
    fun check filename =
    let
      val t = OS.FileSys.modTime filename
    in
      (OS.Process.sleep o Time.fromSeconds) 1;

      if t = OS.FileSys.modTime filename then
        check filename
      else
        (print ("modified!" ^ "\n"); check filename)
    end

    val _ = check "hoge.txt"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '415'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/415
  :user_name: raynstard
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/127/
  :language: C
  :time: 2007/07/10 01:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">つづいて現実的かなと思うもの。\r\nシグナルよりもソケットの方がいいかも。\r\ndetachして放置してもよい？</pre>\r\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;time.h&gt;
    #include &lt;pthread.h&gt;
    #include &lt;sys/stat.h&gt;
    #include &lt;sys/errno.h&gt;
    #include &lt;sys/signal.h&gt;

    static int       continued   = 0;
    static pthread_t threads[20];

    static void signal_handler(int signum)
    {
        continued = 0;
    }

    void *moniter(void *arg)
    {
        struct stat s;
        const char *filename      = arg;
        time_t      last_modified = 0;
        int         result        = 0;

        if( filename == NULL )
        {
            return NULL;
        }

        printf("monitering file : %s\n", filename);
        result = stat(filename, &amp;s);
        if( result == 0 )
        {
            last_modified = s.st_mtime;
            while( continued != 0 )
            {
                printf("."); fflush(stdout);
                stat(filename, &amp;s);
                if( last_modified &lt; s.st_mtime )
                {
                    printf(" modified! %s\n", filename);
                    last_modified = s.st_mtime;
                }
                usleep( 8000 );
            }
         }
        else
        {
            printf("error:%d\n", errno);
        }
        printf("monitering end[%s]\n", filename);
        fflush(stdout);
        return NULL;
    }

    size_t setup(char *filename[], size_t nFiles)
    {
        struct sigaction act;
        int              signum[] = {SIGINT};
        size_t n;
        int result = 0;

        // シグナルの設定
        for(size_t num=0; num&lt;sizeof(signum)/sizeof(*signum); num++)
        {
            if( sigaction(signum[n], NULL, &amp;act) == 0 )
            {
                act.sa_handler = (void (*)(int))signal_handler;
                act.sa_flags &amp;= ~SA_SIGINFO ;
                result = sigaction(signum[n], &amp;act, NULL);
            }
        }

        // スレッドの設定
        continued = 1;
        for(n=0; n&lt;nFiles; n++)
        {
            if( n &gt;= 20 ) break;
            result = pthread_create( &amp;threads[n], NULL, moniter, (void *)filename[n]);
        }
        return n;
    }

    int main(int argc, char *argv[])
    {
        size_t nThreads = 0;

        if( argc &lt; 2 )
        {
            return 1;
        }
        if( *argv[1] == '\0' )
        {
            return 2;
        }
        nThreads = setup(argv+1, argc-1);
        for(int n = 0; n&lt; nThreads; n++ )
        {
            pthread_join( threads[n], NULL ); // 終了待ち合わせ
        }
        printf("all threads end\n");
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3698'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/3698
  :user_name: mtsuyugu
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/04 01:51 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  tail -f の動作を調べて、参考にしました。\r<br>kevent, kqueue を使っているので BSD 限定だと思います。\r<br>簡単のためファイル名変更と削除には対応していません。\r\n\t"
  :code: |
    #include &lt;sys/types.h&gt;
    #include &lt;sys/stat.h&gt;
    #include &lt;sys/event.h&gt;
    #include &lt;fcntl.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;


    int main ( int argc, char *argv[] ){

       struct stat sb;
       struct kevent kev;
       int kq, fd;


       if( argc &lt; 2 ){
          fprintf(stderr,"Usage: %s filename\n", argv[0] );
          return EXIT_FAILURE;
       }

       if( stat( argv[1], &amp;sb ) == -1 ){
          fprintf(stderr,"%s is not acceessible\n", argv[1] );
          return EXIT_FAILURE;
       }

       if( !S_ISREG( sb.st_mode ) ){
          fprintf(stderr,"%s is not regular file\n", argv[1] );
          return EXIT_FAILURE;
       }

       if( (fd = open( argv[1], O_RDONLY )) == -1 ){
          fprintf(stderr,"open(\"%s\") failed\n", argv[1] );
          return EXIT_FAILURE;
       }

       kq = kqueue();

       EV_SET( &amp;kev, fd, EVFILT_READ, EV_ADD | EV_ENABLE | EV_CLEAR , 0, 0, 0 );
       if( kevent(kq, &amp;kev, 1, NULL, 0, NULL) &lt; 0 ){
          fprintf(stderr,"kevent failed\n" );
          return EXIT_FAILURE;
       }
       while(1){
          kevent(kq, NULL, 0, &amp;kev, 1, NULL);
          printf("modified!\n");
       }
       return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: /web/20101226213933/http://www.google.com/codesearch?hl=en&amp;q=show:Jpr0rMxXFl0:eMe6OJKQfeg:OWgsbPo2mwE
    :title: tail.c
- :id: '597'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/597
  :user_name: rubikitch
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/11 21:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  再帰。\r\n\t"
  :code: |
    (defun modify-checker (filename)
      (labels ((mtime () (sb-posix:stat-mtime (sb-posix:stat filename)))
               (check (old-t new-t)
                 (when (/= old-t new-t)
                   (format t "modified!~%"))
                 (sleep 3)
                 (check new-t (mtime))))
        (check (mtime) (mtime))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5371'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/5371
  :user_name: ika
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/654/
  :language: D
  :time: 2008/01/17 12:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>まだDが出ていなかったので。\n標準ライブラリが使いづらくて仕方がありません。</p>\n\r\n\t"
  :code: "import std.stdio, std.file, std.date, std.c.time;\n\nvoid main(string[]
    args) {\n    if(args.length &lt;= 1) return;\n    auto filename = args[1];\n    \n
    \   d_time lastmod = mtime(filename);\n    while(true) {\n        d_time lastmod2
    = mtime(filename);\n        if(lastmod != lastmod2) {\n            writeln(\"modified!\");\n
    \           lastmod = lastmod2;\n        }\n        msleep(1000);\n    }\n}\n\nd_time
    mtime(string file) {\n    d_time ftc, fta, ftm;\n    getTimes(file, ftc, fta,
    ftm);\n    return ftm;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5841'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/5841
  :user_name: takuya_1st
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/725/
  :language: Python
  :time: 2008/02/25 01:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  IronPythonで書いてみました。\r\nC#とほぼ同じになりますが、C#よりタイプ量が少ないのがうれしいですね\r\n\t"
  :code: |
    import clr
    import System
    from System.IO import *
    filename = "D:/test.php"
    fw = FileSystemWatcher( Path.GetDirectoryName(filename), Path.GetFileName(filename))
    def handle( w,a ):
      print "modified"

    fw.Changed += handle
    fw.EnableRaisingEvents = True
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '429'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/429
  :user_name: ultraist
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/17/
  :language: C
  :time: 2007/07/10 04:23 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\r\n\t  最近のLinux用。\r\nファイル更新の定義が謎なのでいろいろ監視します。いろいろには、内容の変更、属性の変更、移動、削除が含まれます。ファイルを移動したりファイル名をリネームしても対象ファイルの監視を続けます。対象ファイルが削除されると監視をやめます。\r\n\r\n\t"
  :code: "/* $ gcc fnotify.c -o fnotify -Wall */\n#include &lt;sys/inotify.h&gt;\n#include
    &lt;unistd.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;stddef.h&gt;\n#include
    &lt;stdlib.h&gt;\n#include &lt;stdio.h&gt;\n\n#define INOE_HDR_SZ offsetof(struct
    inotify_event, name)\n\nstatic int ino_error(int ino_dev, const char *message)\n{\n
    \   close(ino_dev);\n    perror(message);\n    return EXIT_FAILURE;\n}\n\nint
    observe(const char *filename)\n{\n    int ino_dev, ino_fd, len;\n    struct inotify_event
    *event;\n    char buffer[INOE_HDR_SZ + PATH_MAX];\n    \n    ino_dev = inotify_init();\n
    \   if (ino_dev == -1) {\n        perror(\"inotify_init\");\n        return EXIT_FAILURE;\n
    \   }\n    ino_fd = inotify_add_watch(ino_dev, filename,\n                IN_ATTRIB
    | IN_MODIFY | IN_MOVE_SELF | IN_DELETE_SELF);\n    if (ino_fd == -1) {\n        return
    ino_error(ino_dev, filename);\n    }\n    event = (struct inotify_event *)buffer;\n
    \   \n    while (1) {\n        len = read(ino_dev, event, sizeof(buffer));\n        if
    (len == -1 || len == 0) {\n            return ino_error(ino_dev, \"read\");\n
    \       }\n        if (event-&gt;mask &amp; IN_ATTRIB) {\n            puts(\"modified!
    (ATTRIB)\");\n        } else if (event-&gt;mask &amp; IN_MODIFY) {\n            puts(\"modified!
    (MODIFY)\");\n        } else if (event-&gt;mask &amp; IN_MOVE_SELF) {\n            puts(\"modified!
    (MOVE_SELF)\");\n        } else if (event-&gt;mask &amp; IN_DELETE_SELF) {\n            puts(\"modified!
    (DELETE_SELF)\");\n            break;\n        }\n    }\n    close(ino_dev);\n
    \   \n    return EXIT_SUCCESS;\n}\n\nint main(int argc, const char **argv)\n{\n
    \   if (argc != 2) {\n        fprintf(stderr, \"Usage: %s filename\\n\", argv[0]);\n
    \       return EXIT_FAILURE;\n    }\n    \n    return observe(argv[1]);\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1368'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/1368
  :user_name: shiro
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/41/
  :language: Haskell
  :time: 2007/07/23 09:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Haskell練習中。\r\nGHCのSystem.Posixモジュール使用。</pre>\r\n\t"
  :code: "import Maybe\nimport Directory\nimport System.Posix\n\nwatchFile filename
    = watchIt Nothing\n  where watchIt Nothing = do mtime &lt;- getModificationTime
    filename\n                             watchIt (Just mtime)\n        watchIt (Just
    prev) = do mtime &lt;- getModificationTime filename\n                                 if
    (prev &lt; mtime) \n                                   then putStrLn \"modified!\"\n
    \                                  else return ()\n                                 sleep
    3\n                                 watchIt (Just mtime)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4073'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/4073
  :user_name: mtsuyugu
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/481/
  :language: diff
  :time: 2007/11/15 14:25 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  プラス評価ありがとうございます。\r<br>- 初回のイベント通知は捨てる。\r<br>- close 処理を追加。\r<br>を追加してみました。\r\n\t"
  :code: |
    --- main.c.org  Thu Nov 15 23:18:57 2007
    +++ main.c      Thu Nov 15 23:23:17 2007
    @@ -4,7 +4,13 @@
     #include &lt;fcntl.h&gt;
     #include &lt;stdio.h&gt;
     #include &lt;stdlib.h&gt;
    +#include &lt;signal.h&gt;
    +#include &lt;unistd.h&gt;

    +int received_sigint;
    +void sigint_handler( int sig ){
    +   received_sigint = 1;
    +}

     int main ( int argc, char *argv[] ){

    @@ -33,6 +39,11 @@
           return EXIT_FAILURE;
        }

    +   if( signal(SIGINT, sigint_handler) == SIG_ERR ){
    +      fprintf(stderr,"couldn't register SIGINT handler\n");
    +      return EXIT_FAILURE;
    +   }
    +
        kq = kqueue();

        EV_SET( &amp;kev, fd, EVFILT_READ, EV_ADD | EV_ENABLE | EV_CLEAR , 0, 0, 0 );
    @@ -40,9 +51,16 @@
           fprintf(stderr,"kevent failed\n" );
           return EXIT_FAILURE;
        }
    +   kevent(kq, NULL, 0, &amp;kev, 1, NULL);
        while(1){
    -      kevent(kq, NULL, 0, &amp;kev, 1, NULL);
    +      if( kevent(kq, NULL, 0, &amp;kev, 1, NULL) == -1 ){
    +         if( !received_sigint ){
    +            perror("error");
    +         }
    +         break;
    +      }
           printf("modified!\n");
        }
    +   close(fd);
        return EXIT_SUCCESS;
     }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1996'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/1996
  :user_name: hirose31
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/334/
  :language: Perl
  :time: 2007/08/07 17:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">$ observe-mtime -c 'echo \"modified!\"' filename\r\n\r\nいつも使っているスクリプトでいけそうなのでまんま投稿します。\r\n\r\n・複数ファイルを監視できます\r\n・任意のコマンドを実行できます\r\n・監視間隔を指定できます\r\n\r\n</pre>\r\n\t"
  :code: |
    #!/usr/bin/env perl

    use strict;
    use warnings;
    use Pod::Usage;
    use Getopt::Long;
    use File::Modified;

    my $Interval = $ENV{INTERVAL} || 3; # sec
    my $command;

    Getopt::Long::Configure("bundling");
    GetOptions(
        'command|c=s' =&gt; ¥$command,
        'help|h|?'    =&gt; sub { pod2usage() },
        ) or pod2usage;
    my @files = @ARGV;
    pod2usage unless $command;

    ### @files
    ### $command

    my $o = File::Modified-&gt;new(files=&gt;[ @files ]);
    my @changes;

    while (1) {
        if (@changes = $o-&gt;changed) {
            ### @changes
            print qx{ $command };
            $o-&gt;update;
        }
        ### sleep: $Interval
        sleep $Interval;
    }

    __END__

    =head1 SYNOPSIS

    observe-mtime -c command file [file...]

    =cut
  :tags: []
  :references:
    :url: /web/20101226213933/http://d.hatena.ne.jp/hirose31/20070528/1180326347
    :title: ''
- :id: '670'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/670
  :user_name: ocean
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/07/12 15:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  カバレッジ稼ぎ。ロジックはPython版とほとんど同じ。\r\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;stdexcept&gt;
    #include &lt;windows.h&gt;

    FILETIME mtime(const char* path)
    {
        WIN32_FIND_DATA wfd;

        HANDLE h = ::FindFirstFile(path, &amp;wfd);

        if (h == INVALID_HANDLE_VALUE)
        {
            throw std::runtime_error("file not found");
        }

        ::FindClose(h);

        return wfd.ftLastWriteTime;
    }

    int main()
    {
        try
        {
            const char filename[] = "a.txt";

            FILETIME old_mtime = mtime(filename);

            while (true)
            {
                ::Sleep(100);

                const FILETIME new_mtime = mtime(filename);

                if (::CompareFileTime(&amp;old_mtime, &amp;new_mtime) != 0)
                {
                    std::cout &lt;&lt; "modified!" &lt;&lt; std::endl;
                }

                old_mtime = new_mtime;
            }
        }
        catch (std::exception&amp; e)
        {
            std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7915'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/7915
  :user_name: 匿名
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/11/01 06:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>116行目のscheduledTimerWithTimeInterval:target:selector:userInfo:repeats:\nのメソッドでcurrentRunLoopに登録されますので、\n122行目の
    addTimer:...はいらないんじゃないかなぁ。</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '395'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/395
  :user_name: zigorou
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/64/
  :language: XUL
  :time: 2007/07/09 13:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Cc, Ciはそれぞれ\r\n\r\nconst Cc = Components.classes;\r\nconst Ci =
    Components.interfaces;\r\n\r\nされているとして、\r\n\r\nvar fw = new FileWatch(\"/home/zigorou/hoge.txt\",
    5);\r\nfw.watch();\r\n\r\nで5秒おきにErrorConsoleに対して更新されてればmodified表示。\r\n\r\nfw.unwatch()で監視止める。\r\n\r\nでももっと奇麗に書き方ありそうな気がする。Observerがそもそもあったりして（ぇ\r\n\t"
  :code: |
    var FileWatch = function(filename, duration) {
      this.file = Cc["@mozilla.org/file/local;1"].createInstance(Ci.nsILocalFile);
      this.file.initWithPath(filename);
      this.duration = duration;
    };

    FileWatch.prototype = {
      iid: null,
      lastTime: null,
      watch: function() {
        this.lastTime = (new Date()).getTime();
        var self = this;
        this.iid = setInterval(function() { self.watchFile(); }, this.duration * 1000);
      },
      watchFile: function() {
        if (this.file.lastModifiedTime - this.lastTime &gt; 0) {
          this.log("modified");
        }

        this.lastTime = (new Date()).getTime();
      },
      log: function(message) {
        Cc["@mozilla.org/consoleservice;1"].getService(Ci.nsIConsoleService).logStringMessage(message);
      },
      unwatch: function() {
        clearInterval(this.iid);
      }
    };
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9835'
  :parent_id: '15'
  :url: http://ja.doukaku.org/comment/9835
  :user_name: taka_2
  :user_url: /web/20101226213933/http://ja.doukaku.org/user/1132/
  :language: Other
  :time: 2010/01/19 01:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    Option Explicit

    Dim filename, fs, objFile
    Dim lastDateLastModified, nowDateLastModified

    filename = WScript.Arguments(0)

    Set fs = CreateObject("Scripting.FileSystemObject")
    If fs.FileExists(filename) = False Then
        WScript.Echo(filename &amp; " is not exists.")
        WScript.Quit(1)
    End If

    Set objFile = fs.GetFile(filename)
    lastDateLastModified = objFile.DateLastModified

    Do
        nowDateLastModified = objFile.DateLastModified
        If lastDateLastModified &lt;&gt; nowDateLastModified Then
            WScript.Echo "modified!"
            lastDateLastModified = nowDateLastModified
        End If
        WScript.Sleep(10000)
    Loop
  :tags: []
  :references:
    :url: 
    :title: 
