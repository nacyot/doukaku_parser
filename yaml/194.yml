---
:id: '194'
:title: lessの実装
:comments:
- :id: '6817'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6817
  :user_name: takeru
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/850/
  :language: 
  :time: 2008/07/24 04:55 GMT
  :vote_count: '8'
  :vote_score: '-6'
  :body: "\r\n\t  <div class=\"section\">\n<p>'less'を実装してください。\r</p>\n<p>巨大なファイルでも効率的に動作するようにしてください。\r</p>\n<p>\r</p>\n<p>最低限必要な機能は、\r</p>\n<ul>\n<li>\n上下スクロール\r\n</li>\n<li>検索\r</li>\n</ul>\n<p>です。\r</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6879'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6879
  :user_name: syat
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/766/
  :language: C
  :time: 2008/07/29 09:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  コマンド f, b, /, n, N, q を受け付けます。\r<br><br>文字列のリストに全部ぶっこんでから表示してるだけ。\r<br>「巨大なファイルでも～」というのは置いといて、、、\r<br>（3万行くらいなら余裕ぽい）\n\t"
  :code: |
    using System;
    using System.Collections.Generic;
    using System.IO;

    class MyLess
    {
        int height = 20;
        List&lt;string&gt; lines = new List&lt;string&gt;();
        int pos = 0;
        string search = null;

        MyLess(TextReader tr) {
            string line;
            while ((line = tr.ReadLine()) != null)
                lines.Add(line);
            tr.Close();
        }
        void Show() {
            Console.Clear();
            for (int i = 0 ; i &lt; height &amp;&amp; (i + pos) &lt; lines.Count ; i++)
                Console.WriteLine("{0,5}{1} {2}", i + pos + 1, i == 0 ? '&gt;' : '|', lines[i + pos]);
        }
        void Forward() {
            pos = pos + height &gt; lines.Count ? lines.Count - 1 : pos + height;
        }
        void Back() {
            pos = pos &lt; height ? 0 : pos - height;
        }
        void Find(bool forward) {
            if (search == null) return;

            bool found = false;
            if (forward) {
                for (int i = pos + 1 ; i &lt; lines.Count ; i++) {
                    if (lines[i].Contains(search)) {
                        found = true; pos = i; break;
                    }
                }
            } else {
                for (int i = pos - 1 ; i &gt;= 0 ; i--) {
                    if (lines[i].Contains(search)) {
                        found = true; pos = i; break;
                    }
                }
            }
            Show();
            if (found)
                Console.Write("{0}{1}", forward ? '/' : '?', search);
            else
                Console.Write("見つかりません");
        }
        void Do() {
            Show();
            while (true) {
                ConsoleKeyInfo key = Console.ReadKey(true);
                switch (key.KeyChar) {
                    case 'q': return;
                    case 'f': Forward(); Show(); break;
                    case 'b': Back(); Show(); break;
                    case '/':
                        Console.Write('/');
                        search = Console.ReadLine().Replace("\n", "");
                        if (search.Length == 0)
                            search = null;
                        Find(true);
                        break;
                    case 'n': Find(true); break;
                    case 'N': Find(false); break;
                    default: break;
                }
            }
        }

        static void Main(string[] args) {
            MyLess less;
            if (args.Length == 0)
                less = new MyLess(Console.In);
            else
                less = new MyLess(new StreamReader(args[0]));

            less.Do();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6881'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6881
  :user_name: syat
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/766/
  :language: 
  :time: 2008/07/29 10:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  なお、動かし方は\r<br>   myless.exe  ファイル名\r<br>です。\r<br>   dir  |  myless.exe\r<br>のようにすると例外がでました。（ReadKeyがまずかったらしい）\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6883'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6883
  :user_name: kkobayashi
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/07/29 10:36 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>反則ですが。</p>\n\n\t"
  :code: |
    less &lt;- function(f) file.show(f, pager="less")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6887'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6887
  :user_name: sumim
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/07/30 05:26 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    | file font nLines cr sp goNextPage goPrevPage findNext prevLine |
    file := FileStream fileNamed: 'in.txt'.

    font := TextStyle defaultFont.
    cr := Character cr.
    sp := Character space.
    nLines := Display height // (font height + font descent).

    goNextPage := [nLines timesRepeat: [file nextLine]].
    prevLine := [file binary. [file position = 0 or: [file back = 13]] whileFalse. file ascii].
    goPrevPage := [nLines timesRepeat: [prevLine value]].
    findNext := [:pattern | pattern notEmpty ifTrue: [file upToAll: pattern]. prevLine value].

    [   | string |
        string := String streamContents: [:ss |
            | position |
            position := file position.
            nLines timesRepeat: [
                file nextLine ifNotNilDo: [:line | ss nextPutAll: line].
                file peek ifNotNil: [ss cr]].
            file position: position].
        Display fillWhite.
        string asDisplayText display.
        [Sensor keyboardPressed] whileFalse.
        Sensor keyboard caseOf: {
            [$q] -&gt; [file close. ^World restoreDisplay].
            [$g] -&gt; [file reset].
            [$G] -&gt; [file setToEnd].
            [sp] -&gt; [goNextPage value].
            [$f] -&gt; [goNextPage value].
            [$b] -&gt; [goPrevPage value].
            [cr] -&gt; [file nextLine].
            [$e] -&gt; [file nextLine].
            [$y] -&gt; [prevLine value].
            [$/] -&gt; [findNext value: (FillInTheBlank request: 'pattern:')]
        } otherwise: []
    ] repeat
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6983'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6983
  :user_name: takano32
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/148/
  :language: Ruby
  :time: 2008/08/05 01:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  環境に依存するかもしれませんが、書いてみました。\r<br>Gentoo Linuxで動作確認してます。\r<br>% ruby -v\r<br>ruby 1.8.6 (2008-06-20 patchlevel 230) [i686-linux]\r<br><br>less準拠でjk/qが使えます。\r<br>"
  :code: |
    #!/usr/bin/env ruby

    require 'curses'

    lines = ARGF.readlines
    index = 0
    LINES = 10
    Curses::init_screen


    def update(index, lines)
        (index..index+LINES).each do |l|
            Curses::stdscr.setpos(l - index, 0)
            Curses::addstr lines[l]
        end
    end

    def search(index, lines)
        word = ''
        while (ch = Curses::getch) != 0x0A do
            word += ch.chr
        end
        (index..(lines.size)).each do |l|
            if lines[l].match(word) then
                return l
            end
        end
        return nil
    end


    update(index, lines)

    while ch = Curses::getch do
        case ch
        when ?j
            index += 1 if index &lt; lines.length - LINES
        when ?k
            index -= 1 if 0 &lt; index
        when ?/
            index = search(index, lines) || index
        when ?q
            break
        end
        update(index, lines)
    end
  :tags:
  - curses
  :references:
    :url: /web/20090514041959/http://www.ruby-lang.org/ja/man/html/curses.html
    :title: curses - Rubyリファレンスマニュアル
- :id: '6984'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/6984
  :user_name: M.Suzuki
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/771/
  :language: C
  :time: 2008/08/05 01:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  効率はともかく、巨大なファイルでも表示できるように作ってみました。\r\n表示はcurses、ファイルの行インデックススキャンをバックグラウンドで行うためにpthreadを使用しています。\r\n行インデックスもテンポラリファイルとして書き出しているので、fpos_tが32bitの環境でも2GB、64bitなら8EBまでいける(自信なし)はずです。\r\n\r\nただし、システム側に懲りすぎたので、タブやら一行の折り返しやらは手を抜いて全く手付かずです。\r\n検索機能もUIが手抜きのためインクリメンタルサーチしかできません。\n\t"
  :code: |
    /*
        Large less
            programed by M.Suzuki
            ver 0.1     2008/8/4

        key binding
            n,j,^n      scroll up
            p,k,^p      scroll down
            /           i-search
            ESC         i-search cancel
            TAB         next search(i-search only)
            q           quit
     */

    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;
    #include &lt;curses.h&gt;
    #include &lt;pthread.h&gt;

    #define LINE_MAX    256     /* file text width max  */

    #define False   0
    #define True    (!False)

    static pthread_mutex_t file_mutex;
    static FILE* fileFp;
    static FILE* seekFp;
    static fpos_t lineTop;
    static fpos_t lineMax;
    static bool readMaxFlag;
    static bool abortFlag;

    static void ScanWait()
    {
        pthread_mutex_lock(&amp;file_mutex);
        while( lineTop + LINES &gt;= lineMax ){
            static struct timespec time10ms = {0,10*1000*1000};
            pthread_mutex_unlock(&amp;file_mutex);
            nanosleep(&amp;time10ms,NULL);
            pthread_mutex_lock(&amp;file_mutex);
            if( readMaxFlag ){
                break;
            }
        }   /* end of while */
        pthread_mutex_unlock(&amp;file_mutex);
    }

    static char* ReadLine(int y, char* buff)
    {
        char* text = NULL;

        ScanWait();
        pthread_mutex_lock(&amp;file_mutex);
        if( lineTop + y + 1 &lt; lineMax ){
            fpos_t offset = sizeof(fpos_t)*(lineTop+y);

            fsetpos(seekFp,&amp;offset);
            fread(&amp;offset,sizeof(fpos_t),1,seekFp);
            fsetpos(fileFp,&amp;offset);
            if( fgets(buff,LINE_MAX,fileFp) ){
                text = buff;
            }
        }
        pthread_mutex_unlock(&amp;file_mutex);
        return text;
    }

    static void DrawLine(int y)
    {
        char* text;
        char buff[LINE_MAX+1];

        text = ReadLine(y,buff);
        if( text == NULL ){
            text = "~";
        }
        mvinsstr(y,0,text);
    }

    static void ViewAll()
    {
        int y;

        erase();
        for(y=0;y&lt;LINES;y++){
            DrawLine(y);
        }
    }

    static void RollUp()
    {
        ScanWait();
        pthread_mutex_lock(&amp;file_mutex);
        if( lineTop &gt;= lineMax ){
            if( readMaxFlag ){
                pthread_mutex_unlock(&amp;file_mutex);
                return;
            }
        }
        lineTop++;
        pthread_mutex_unlock(&amp;file_mutex);
        move(0,0);
        deleteln();
        move(LINES-1,0);
        DrawLine(LINES-1);
        refresh();
    }

    static void RollDown()
    {
        pthread_mutex_lock(&amp;file_mutex);
        if( lineTop &lt;= 0 ){
            pthread_mutex_unlock(&amp;file_mutex);
            return;
        }
        lineTop--;
        pthread_mutex_unlock(&amp;file_mutex);
        move(0,0);
        insdelln(1);
        DrawLine(0);
        refresh();
    }

    static void Search()
    {
        char search[LINE_MAX];
        int len = 0;

        while(1){
            int key = getch();
            int y = 0;
            if( key == 0x1b ){
                break;
            }
            if( key == '\t' ){
                y = 1;
            } else {
                if( len &lt; LINE_MAX ){
                    search[len++] = key;
                    search[len] = '\0';
                }
            }
            while(1){
                char buff[LINE_MAX+1];
                if( ReadLine(y,buff) == NULL ){
                    return;
                }
                if( strstr(buff,search) ){
                    pthread_mutex_lock(&amp;file_mutex);
                    lineTop += y;
                    pthread_mutex_unlock(&amp;file_mutex);
                    ViewAll();
                    break;
                }
                y++;
            }   /* end of while */
        }   /* end of while */
    }

    static void KeyLoop()
    {
        ViewAll();
        while(1){
            int key = getch();
            if( key == 'q' ){
                break;
            }
            switch(key){
              case 'N'-'@':
              case 'n':
              case 'j':
                RollUp();
                break;
              case 'P'-'@':
              case 'p':
              case 'k':
                RollDown();
                break;
              case '/':
                Search();
                break;
            }   /* end of switch */
        }   /* end of while */
    }

    void* ScanThread(void* arg)
    {
        fpos_t filePos;

        fgetpos(fileFp, &amp;filePos);
        while(1){
            char buff[LINE_MAX+1];
            fpos_t fpos = sizeof(fpos_t)*lineMax;

            pthread_mutex_lock(&amp;file_mutex);
            fsetpos(seekFp,&amp;fpos);
            fwrite(&amp;filePos,sizeof(fpos_t),1,seekFp);
            lineMax++;
            fsetpos(fileFp,&amp;filePos);
            if( fgets(buff,LINE_MAX,fileFp) == NULL ){
                break;
            }
            fgetpos(fileFp,&amp;filePos);
            if( abortFlag ){
                break;
            }
            pthread_mutex_unlock(&amp;file_mutex);
        }   /* end of while */
        readMaxFlag = True;
        pthread_mutex_unlock(&amp;file_mutex);
        return NULL;
    }

    static void MainLoop()
    {
        pthread_t scanThread_id;
        char tmpName[L_tmpnam];

        tmpnam(tmpName);
        if( (seekFp=fopen(tmpName,"w+b")) == NULL ){
            perror(tmpName);
            return;
        }

        pthread_mutex_init(&amp;file_mutex,NULL);

        lineTop = 0;
        lineMax = 0;
        if( pthread_create(&amp;scanThread_id,NULL,ScanThread,NULL)!=0){
            perror("ScanThread");
            return;
        }

        initscr();
        noecho();
        raw();
        cbreak();

        KeyLoop();

        nocbreak();
        noraw();
        echo();
        endwin();

        pthread_mutex_lock(&amp;file_mutex);
        abortFlag = True;
        pthread_mutex_unlock(&amp;file_mutex);
        pthread_join(scanThread_id,NULL);

        fclose(seekFp);
        remove(tmpName);
    }

    int main(int argc, char* argv[])
    {
        char* fname = NULL;
        int i;

        for(i=1;i&lt;argc;i++){
            char* p = argv[i];
            if( *p == '-' ){
                /* option   */
            } else {
                fname = argv[i];
            }
        }   /* end of for */
        if( fname != NULL ){
            if( (fileFp=fopen(fname,"r")) == NULL ){
                perror(fname);
                return 1;
            }
            MainLoop();
            fclose(fileFp);
        }
        return 0;
    }
  :tags:
  - curses
  - pthread
  :references:
    :url: 
    :title: 
- :id: '7624'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/7624
  :user_name: 匿名
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/09/10 20:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>検索とスクロールだけ実装</p>\n\n\t"
  :code: "import sys\nimport wx\nimport wx.stc\n\nclass LessSTC(wx.stc.StyledTextCtrl):\n\n
    \   def __init__(self, parent, ID,\n                 pos=wx.DefaultPosition, size=wx.DefaultSize,\n
    \                style=0):\n        wx.stc.StyledTextCtrl.__init__(self, parent,
    ID, pos, size, style)\n        self.Bind(wx.EVT_CHAR, self.OnChar)\n        self.Bind(wx.EVT_KEY_DOWN,
    self.OnKeyDown)\n        self.find = None\n        self.sb = parent.GetStatusBar()\n\n
    \   def OnChar(self, event):\n        key_code = chr(event.GetKeyCode())\n        if
    self.find:\n            f = self.sb.GetStatusText() + key_code\n            self.sb.SetStatusText(f)\n
    \       elif key_code in '/?':\n            self.sb.SetStatusText(key_code)\n
    \           self.find = key_code\n        else:\n            event.Skip()\n\n
    \   def OnKeyDown(self, event):\n        if not self.find:\n            event.Skip()\n
    \           return\n        key_code = event.GetKeyCode()\n        if key_code
    == wx.WXK_BACK:\n            self.sb.SetStatusText(self.sb.GetStatusText()[:-1])\n
    \       elif key_code == wx.WXK_SPACE:\n            f = self.sb.GetStatusText()
    + ' '\n            self.sb.SetStatusText(f)\n        elif key_code == wx.WXK_ESCAPE:\n
    \           self.find = None\n            self.sb.SetStatusText('')\n        elif
    key_code == wx.WXK_RETURN:\n            word = self.sb.GetStatusText()\n            self.SearchAnchor()\n
    \           if word[0] == '/':\n                self.SearchNext(0,word[1:]) \n
    \           elif word[0] == '?':\n                self.SearchPrev(0,word[1:])\n
    \           self.find = None\n            self.sb.SetStatusText('')\n        elif
    key_code &lt; wx.WXK_START:\n            event.Skip()\n\nclass LessFrame(wx.Frame):\n
    \   def __init__(self, parent, id, title, pos=wx.DefaultPosition,\n                 size=wx.DefaultSize,
    style=wx.DEFAULT_FRAME_STYLE):\n        wx.Frame.__init__(self, parent, id, title,
    pos=pos, size=size, style=style)\n        self.SetStatusBar(wx.StatusBar(self))\n
    \       less = LessSTC(self, -1)\n        less.SetText(open(sys.argv[1]).read())\n
    \       less.SetReadOnly(1)\n\nclass Less(wx.App):\n    def OnInit(self):\n        frame
    = LessFrame(None, -1, u'less')\n        self.SetTopWindow(frame)\n        frame.Show()\n
    \       return True\n\nif __name__ == '__main__':\n    if len(sys.argv) - 1:\n
    \       app = Less()\n        app.MainLoop()\n"
  :tags:
  - wxPython
  :references:
    :url: 
    :title: 
- :id: '7680'
  :parent_id: '194'
  :url: http://ja.doukaku.org/comment/7680
  :user_name: M.Suzuki
  :user_url: /web/20090514041959/http://ja.doukaku.org/user/771/
  :language: Haskell
  :time: 2008/09/19 04:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">IOまみれですが、なんとか実装しました。\r\nライブラリを使えば楽勝と思いきや、必要な機能が無かったり、\r\n画面サイズを超えるとエラーになったりと、意外と手間取り、\r\n検索機能を入れる前に、力尽きてしまいました。\r\n</pre>\n\t"
  :code: |
    {-# LANGUAGE ForeignFunctionInterface #-}

    --
    --  ghc --make hless.hs -lncurses
    --
    --  need : hscurses-1.3

    import System.IO
    import Control.Exception
    import System.Environment
    import qualified UI.HSCurses.Curses as Curses
    import qualified UI.HSCurses.CursesHelper as CursesH

    import Foreign
    import Foreign.C.Types

    --

    foreign import ccall unsafe "ncurses.h winsdelln"
        winsdelln :: Curses.Window -&gt; CInt -&gt; IO CInt

    deleteln :: Int -&gt; IO CInt
    deleteln n = winsdelln Curses.stdScr $ fromIntegral (-n)

    insertln :: Int -&gt; IO CInt
    insertln n = winsdelln Curses.stdScr $ fromIntegral n

    --
    data File = File {
        fhandle ::  Handle,
        list    ::  [Integer]
    } deriving (Show)

    data Info = Info {
        file    ::  File,
        top     ::  Int
    } deriving (Show)

    --
    scanFile :: Handle -&gt; IO [Integer]
    scanFile fp = do
        eof &lt;- hIsEOF fp
        if eof
            then return []
            else do
                p &lt;- hTell fp
                l &lt;- hGetLine fp
                flist &lt;- scanFile fp
                return (p : flist)

    showLine :: File -&gt; Int -&gt; IO String
    showLine f n
        | n &gt;= (length $ list f)    = do return "~"
        | otherwise             = do
            hSeek (fhandle f) AbsoluteSeek $ (list f)!!n
            line &lt;- hGetLine $ fhandle f
            return line
    --

    getW = do
        (_,w) &lt;- Curses.scrSize
        return w

    getH = do
        (h,_) &lt;- Curses.scrSize
        return h

    drawLine :: Info -&gt; Int -&gt; IO ()
    drawLine info n = do
        str &lt;- showLine (file info) (n + (top info))
        ss &lt;- trim str
        Curses.mvWAddStr Curses.stdScr n 0 ss
        where
            trim s = do
                w &lt;- getW
                if (length s) &gt;= w
                    then
                        return ((take (w-2) s) ++ "$")  -- (x_x)
                    else
                        return s

    redraw :: Info -&gt; IO ()
    redraw info = do
        h &lt;- getH
        redraw' h
        Curses.refresh
        where
            redraw' 0 = return ()
            redraw' n = do
                m &lt;- getH
                drawLine info (m-n)
                redraw' (n-1)

    --

    moveDown :: Info -&gt; IO Info
    moveDown info
        | (top info) &gt;= len =   return info
        | otherwise         =   scrollUp
        where
            len = length $ list $ file info
            next = info { top = (top info) + 1 }
            scrollUp = do
                h &lt;- getH
                CursesH.gotoTop
                deleteln 1
                Curses.move (h-1) 0
                drawLine next (h-1)
                Curses.refresh
                return next

    moveUp :: Info -&gt; IO Info
    moveUp info
        | (top info) == 0   =   return info
        | otherwise         =   scrollDown
        where
            next = info { top = (top info) - 1 }
            scrollDown = do
                CursesH.gotoTop
                insertln 1
                drawLine next 0
                Curses.refresh
                return next

    eventLoop :: Info -&gt; IO Info
    eventLoop info =
        do
            key &lt;- Curses.getCh
            case key of
                Curses.KeyChar 'l' -&gt; process $ return info
                Curses.KeyChar 'q' -&gt; return info
                Curses.KeyChar 'n' -&gt; process $ moveDown info
                Curses.KeyChar 'p' -&gt; process $ moveUp info
                Curses.KeyUp       -&gt; process $ moveUp info
                Curses.KeyDown     -&gt; process $ moveDown info
                _ -&gt; eventLoop info
            where
                process f = do
                    r &lt;- f
                    eventLoop r

    --

    main = do
        (fileName:_) &lt;- getArgs
        fp &lt;- openFile fileName ReadMode
        flist &lt;- scanFile fp
        let info = Info { file = File { fhandle = fp, list = flist}, top = 0}
        runMain info `finally` CursesH.end
        where
            runMain info = do
                CursesH.start
                redraw info
                eventLoop info
  :tags:
  - hscurses-1.3
  :references:
    :url: 
    :title: 
