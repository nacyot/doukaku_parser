---
:id: '29'
:title: n日後を返す関数を返す関数
:comments:
- :id: '3385'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3385
  :user_name: にしお
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/21 10:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  整数nを渡すと「日時のデータを受け取って、n日後の日時を返す関数」を返す関数を作ってください。\r\n関数を返す関数が作れない場合は、関数の代わりになるようなオブジェクトでも構いません。\r\n<p>\r\nPythonの対話的インタプリタで表現すると下のようになります。\r\n</p>\n<pre>\r\n&gt;&gt;&gt;
    def n_days_later(n):\r\n        ?????\r\n\r\n&gt;&gt;&gt; five_days_later = n_days_later(5)\r\n&gt;&gt;&gt;
    datetime.datetime.now()\r\ndatetime.datetime(2007, 7, 20, 20, 11, 42, 78000)\r\n&gt;&gt;&gt;
    five_days_later(_)\r\ndatetime.datetime(2007, 7, 25, 20, 11, 42, 78000)\r\n</pre>\r\n<p>\r\n出題の意図としては「関数を返す関数」と「日時の差分の扱い方」を、それぞれ単体だと簡単すぎるので合わせ技にしてみた、というところです。\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3715'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3715
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/05 16:14 GMT
  :vote_count: '4'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">このサイトを「マルチリンガル・クックブック」として利用する人は、\r\n回答の多くが2038年問題を再生産していることに注意してください</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3719'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3719
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/06 02:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">n=20000としたらどうなるか、というような話ですね</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3721'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3721
  :user_name: Y
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/428/
  :language: 
  :time: 2007/11/06 04:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">タイムスタンプのように、日付を内部的に4バイトの整数で表していると、\r\n2038-01-19T03:14:07+0000以降を扱えないという2038年問題になります。\r\n\r\n2038問題をクリアしているかどうかは、\r\n答えがこれ以降になるケースを試せばわかります。\r\n\r\nたとえばPHPの場合、PEAR
    Dateを使えば2038年以降も扱えるのですが、\r\nそれでも秒で表したときに4バイトを超える期間を扱えません。\r\n（試したのはPHP 5.2, PEAR
    Date 1.41です。）\r\n\r\nこの問題をクリアしているかどうかは、\r\n長い期間（3万日とか）のケースを試せばわかります。\r\n\r\nというわけで、\r\nPHP使いにとっては2重にトラップがかけられた良問だと思います。\r\n\r\nここではそこまで考えなくてもいいじゃん、と思いたいのですが、\r\nそういう態度が2000年問題や2038年問題の一因だろうと自戒して</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1266'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1266
  :user_name: rubikitch
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/07/21 10:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Procじゃだめ？\n\t"
  :code: |
    def n_days_later(n)
      lambda{|t| t+n*3600*24}
    end

    t = Time.now                    # =&gt; Sat, Jul 21 2007 19:54:48 +0900
    n_days_later(2)[t]              # =&gt; Mon, Jul 23 2007 19:54:48 +0900
    n_days_later(200)[t]            # =&gt; Wed, Feb 06 2008 19:54:48 +0900
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1267'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1267
  :user_name: rubikitch
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/21 11:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  format-universal-timeはsbcl依存。それ以外はportableかと。\n\t"
  :code: |
    (defun n-days-later (n)
      (lambda (time) (+ time (* n 3600 24))))

    (let ((now (get-universal-time)))
      (list
       (sb-int:format-universal-time nil now)
       (n-days-later 3)
       (sb-int:format-universal-time nil (funcall (n-days-later 3) now))))
    ;; =&gt; ("Saturday, July 21, 2007 08:02:31 PM [-9]"
    ;;     #&lt;CLOSURE (LAMBDA #) {C53793D}&gt;
    ;;     "Tuesday, July 24, 2007 08:02:31 PM [-9]")
  :tags:
  - sbcl
  :references:
    :url: 
    :title: 
- :id: '1268'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1268
  :user_name: yuin
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/82/
  :language: Python
  :time: 2007/07/21 11:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  ふつうに。\n\t"
  :code: |
    from datetime import datetime, timedelta

    def n_days_later(n):
     return lambda d: d + timedelta(days=n)

    five_days_later = n_days_later(5)
    d = datetime.now()
    print(five_days_later(d))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1269'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1269
  :user_name: rubikitch
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/105/
  :language: Scheme
  :time: 2007/07/21 11:13 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  やっぱposixだけなのかな？\n\t"
  :code: |
    (define (n-days-later n)
      (lambda (sys-tm-time) (sys-localtime (+ (sys-mktime sys-tm-time) (* n 3600 24)))))
    (let ((now (sys-localtime (sys-time)))
          (fmt "%Y/%m/%d %H:%M:%S"))
      (print
       (list (sys-strftime fmt now)
             (n-days-later 3)
             (sys-strftime fmt ((n-days-later 3) now)))))
    ;; (2007/07/21 20:12:15 #&lt;closure (n-days-later n-days-later)&gt; 2007/07/24 20:12:15)
  :tags:
  - gauche
  - posix
  :references:
    :url: 
    :title: 
- :id: '1271'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1271
  :user_name: yuin
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/21 11:23 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  ScalaではFunction.curriedでカリー化できます。\n\t"
  :code: |
    import java.util.Calendar
    import java.text.SimpleDateFormat

    def n_days_later(n:int, c:Calendar) = {
      c.add(Calendar.DATE, n)
      c
    }

    val five_days_later = Function.curried(&amp;n_days_later)(5)
    val now = Calendar.getInstance

    val formatter = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z")
    println(formatter.format(five_days_later(now).getTime))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1272'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1272
  :user_name: yuin
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/21 11:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">お題どおりn_days_laterの引数を1にするとこうかな。</pre>\n\t"
  :code: |
    import java.util.Calendar
    import java.text.SimpleDateFormat

    def n_days_later(n:int) = {
      (c:Calendar) =&gt; {
        val r = c.clone.asInstanceOf[Calendar]
        r.add(Calendar.DATE, n)
        r
      }
    }

    val five_days_later = n_days_later(5)
    val now = Calendar.getInstance

    val formatter = new SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z")
    println(formatter.format(five_days_later(now).getTime))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1273'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1273
  :user_name: kacchi
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/07/21 11:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">使ったことないですが、確か lexical-let を使うとできたような気が。</pre>\n\t"
  :code: |
    (require 'cl)
    (defun make-ndays-later (n)
      (lexical-let ((n n))
        (lambda (y m d) (encode-time 0 0 0 (+ d n) m y))))

    (fset '10days-later (make-ndays-later 10))
    (fset '-10days-later (make-ndays-later -10))

    (format-time-string "%Y/%m/%d(%a)" (10days-later 2007 7 21))
    =&gt;"2007/07/31(火)"

    (format-time-string "%Y/%m/%d(%a)" (-10days-later 2007 7 21))
    =&gt;"2007/07/11(水)"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1274'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1274
  :user_name: kkobayashi
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/21 11:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt; five_days_later &lt;- n_days_later(5)\r\n&gt;
    fifty_days_later &lt;- n_days_later(50)\r\n&gt; five_days_later()\r\n[1] \"2007-07-26
    20:40:27 東京 (標準時)\"\r\n&gt; fifty_days_later()\r\n[1] \"2007-09-09 20:40:45 東京
    (標準時)\"\r\n</pre>\n\t"
  :code: |
    n_days_later &lt;- function(day=0){
        return(function(){Sys.time() + day*60*60*24})
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1276'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1276
  :user_name: cats
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/07/21 12:15 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    class Program
    {
      delegate DateTime Func(DateTime dt);
      static Func NDaysLater(int n) { return delegate(DateTime dt){return dt.AddDays(n); };}
      static void Main()
      {
        Func FiveDaysLater = NDaysLater(5);
        DateTime dt = new DateTime(2007, 7, 20);
        Console.WriteLine(FiveDaysLater(dt).ToShortDateString()); // 2007/07/25
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1277'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1277
  :user_name: ocean
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/177/
  :language: JavaScript
  :time: 2007/07/21 12:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  IE6とFirefox2で確認。\n\t"
  :code: |
    function n_days_after(n) {
        return function(date) {
            return new Date(date.getTime() + n * 1000 * 60 * 60 * 24);
        };
    }

    var one_days_after = n_days_after(1);
    var two_days_after = n_days_after(2);

    var now = new Date();
    alert(now);
    alert(one_days_after(now));
    alert(two_days_after(now));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1281'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1281
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/07/21 12:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">これで、いけるかな。\r\n</pre>\n\t"
  :code: |
    import time

    def n_days_later(n):
      def days_later():
        return time.localtime(time.time() + n * 24 * 60 * 60)
      return days_later

    five_days_later = n_days_later(5)
    print five_days_later()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1282'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1282
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/07/21 13:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">クロージャですね。</pre>\n\t"
  :code: |
    var n_days_later = function(n){
        return function(){
            return new Date(Date.parse(new Date()) + 24 * 60 * 60 * 1000 * n);
        };
    }

    var yesterday       = n_days_later(-1);
    var tomorrow        = n_days_later(1);
    var five_days_later = n_days_later(5);
    var _365_days_later = n_days_later(365);

    alert(yesterday());
    alert(tomorrow());
    alert(five_days_later());
    alert(_365_days_later());
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1283'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1283
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/07/21 13:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あ、この場合lambdaでよかったな。python3000でも生き延びそうなので、\r\n記念にlambdaにしておこう。\r\n</pre>\n\t"
  :code: |
    import time

    def n_days_later(n):
      return lambda: time.localtime(time.time() + n * 24 * 60 * 60)

    five_days_later = n_days_later(5)
    print five_days_later()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1284'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1284
  :user_name: rubikitch
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/105/
  :language: Lua
  :time: 2007/07/21 13:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    function n_days_later(n)
      return function (time)
               return time + n*3600*24
             end
    end

    tm = os.time()
    print(os.date("%c", tm))
    print(n_days_later(3))
    print(os.date("%c", n_days_later(3)(tm)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1285'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1285
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/07/21 13:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  題意の「日時のデータを受け取って」を見逃してしまいました･･･\r\n#1282では、常に「今日」を基準にしてしまいます。\r\n\r\nうっかりしました。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1286'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1286
  :user_name: kacchi
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/07/21 13:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">お題を読み違えてました。すみません。日時ですね。今度は大丈夫?</pre>\n\t"
  :code: |
    (defun make-ndays-later (n)
      (lexical-let ((n n))
        (lambda (time)
          (apply (lambda (s mi h d m y dow dst zone)
                   (encode-time s mi h (+ d n) m y))
                 (decode-time time)))))

    (fset 'five-days-later (make-ndays-later 10))
    (fset 'five-days-later- (make-ndays-later -10))

    (format-time-string "%Y/%m/%d %T" (five-days-later (current-time)))
    =&gt;"2007/07/31 21:39:38"

    (format-time-string "%Y/%m/%d %T" (five-days-later- (current-time)))
    =&gt;"2007/07/11 21:39:59"

    (format-time-string
     "%Y/%m/%d %T"
     ;; encode-time: SECOND MINUTE HOUR DAY MONTH YEAR &amp;optional ZONE
     (five-days-later (encode-time 49 43 21 21 7 2007)))
    =&gt;"2007/07/31 21:43:49"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1288'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1288
  :user_name: kacchi
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/07/21 13:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あせって投稿したら失敗してしまいました。ちらかしてすみません。</pre>\n\t"
  :code: |
    (require 'cl)

    (defun make-ndays-later (n)
      (lexical-let ((n n))
        (lambda (time)
          (apply (lambda (s mi h d m y dow dst zone)
                   (encode-time s mi h (+ d n) m y))
                 (decode-time time)))))

    (fset 'five-days-later (make-ndays-later 5))
    (fset 'five-days-later- (make-ndays-later -5))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1289'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1289
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/07/21 13:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  問題をどう解釈するか迷ったのですが、単純にインスタンス化する問題だと考えました。\n\t"
  :code: |
    import java.util.Date;
    import java.util.Calendar;

    public class DaysLater {
        int delta;

        public DaysLater(int n) {
            delta = n;
        }

        public Date later(Date d) {
            Calendar c = Calendar.getInstance();
            c.setTime(d);
            c.add(Calendar.DATE, delta);
            return c.getTime();
        }

        public static void main(String[] args) {
            DaysLater fiveDaysLater = new DaysLater(5);
            System.out.println(fiveDaysLater.later(new Date()));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1291'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1291
  :user_name: rubikitch
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/07/21 13:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  closureもどき。\n\t"
  :code: |
    (defun n-days-later (n)
      `(lambda (time) (+ time (* ,n 3600 24))))

    (let ((now (float-time))
          (fmt "%Y/%m/%d %H:%M:%S"))
      (list
       (format-time-string fmt (seconds-to-time now))
       (n-days-later 3)
       (format-time-string fmt (seconds-to-time (funcall (n-days-later 3) now))))) ; =&gt; ("2007/07/21 22:41:48" (lambda (time) (+ time (* 3 3600 24))) "2007/07/24 22:41:48")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1293'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1293
  :user_name: にしお
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/21 14:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Procでも構わないとは思いますが、\r\nRubyは普通の関数を返り値として返せないのですか？\r\nRubyはオブジェクト指向を頑張っているイメージがあるので\r\n当然関数も第一級のオブジェクトだと思っていたのですが…</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1294'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1294
  :user_name: にしお
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/21 14:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Javaは関数が第一級のオブジェクトではないので\r\nそうするしかないかな、と思っています。\r\n問題文の「関数の代わりになるようなオブジェクトでも構いません。」は\r\nJavaのことを考えて付け加えました。\r\n(一応Java使いでもあるので)</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1299'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1299
  :user_name: sumim
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/21 14:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\n\t"
  :code: |
    | fiveDaysLater now |
    fiveDaysLater := [:n | [:date | date + n days]] value: 5.
    now := DateAndTime now.
    ^now -&gt; (fiveDaysLater value: now)

    "=&gt; 2007-07-21T23:47:36+09:00-&gt;2007-07-26T23:47:36+09:00 "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '1300'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1300
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: PHP
  :time: 2007/07/21 14:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  PHPで関数をオブジェクトもしくはリファレンスで扱う方法ってあるのかな…\r\nあったら教えてください！\r\n\n\t"
  :code: "&lt;?php\nclass NDaysLater\n{\n\tprivate $_nday=0;\n\t\n\tprivate function
    __construct($nday)\n\t{\n\t\t$this-&gt;_nday=($nday&gt;0)?'+'.$nday:$nday;\n\t}\n\t\n\tpublic
    static function n_days_later($nday=0)\n\t{\n\t\treturn new NDaysLater($nday);\n\t}\n\t\n\tpublic
    function __toString()\n\t{\n\t\treturn strftime(\"%Y, %m, %d, %H, %M, %S\",strtotime(\"{$this-&gt;_nday}
    days\"));\n\t}\n}\n\n$fivedayslater = NDaysLater::n_days_later(5);\nprint $fivedayslater;\n?&gt;\n"
  :tags:
  - PHP5
  :references:
    :url: 
    :title: 
- :id: '1301'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1301
  :user_name: iwk
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/07/21 14:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    module Main =
        struct
            let nDaysLater n (date:System.DateTime) =
                let nDLater = date.AddDays(float n) in
                nDLater.ToString()
        end;;
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '1308'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1308
  :user_name: kkobayashi
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/21 16:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">題意を読み違えてました、すみません。\r\nRの日付変換は「日付っぽい文字列」を適当に変換してくれるので結構便利です。\r\n\r\n&gt;
    five_days_later &lt;- n_days_later(5)\r\n&gt; five_days_later()\r\n[1] \"2007-07-27
    00:53:57 東京 (標準時)\"\r\n&gt; five_days_later(\"2007/1/2\")\r\n[1] \"2007-01-07
    東京 (標準時)\"\r\n&gt; five_days_later(\"2007/1/2 3:4:5\")\r\n[1] \"2007-01-07 03:04:05
    東京 (標準時)\"\r\n&gt; five_days_later(\"2007-1-2 3:4:5\")\r\n[1] \"2007-01-07 03:04:05
    東京 (標準時)\"\r\n</pre>\n\t"
  :code: |
    n_days_later &lt;- function(day=0){
        return(function(d=Sys.time()){as.POSIXct(d) + day*60*60*24})
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1311'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1311
  :user_name: ココサブ
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/07/21 16:19 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">gcc依存です。\r\n\r\nそれと、\r\nfive_days_later = n_days_later(5)\r\nは思いつかなくて\r\nn_days_later(five_days_later,
    5)\r\nという形になっています。</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;time.h&gt;

    #define n_days_later(FUNC, N)\
        char *func##N##_days_latter(const time_t *t)\
        {\
            time_t tmp = *t;\
            tmp += N * 60 * 60 * 24;\
            return ctime(&amp;tmp);\
        }\
        FUNC = func##N##_days_latter;

    int main()
    {
        time_t now;
        char *(*five_days_later)(const time_t *);

        n_days_later(five_days_later, 5);
        time(&amp;now);
        printf("%s", five_days_later(&amp;now));
        return 0;
    }
  :tags:
  - GCC
  - GNU
  :references:
    :url: 
    :title: 
- :id: '1314'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1314
  :user_name: shiro
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/07/21 17:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  日付関係ならsrfi-19もあります。\n\t"
  :code: |
    (use srfi-19)

    (define (n-days-later n)
      (lambda (date) (julian-day-&gt;date (+ (date-&gt;julian-day date) n))))

    (let ((now (current-date)))
      (list (date-&gt;string (current-date))
            (date-&gt;string ((n-days-later 5) (current-date)))))

    ;; =&gt; ("Sat Jul 21 07:07:52-1000 2007" "Thu Jul 26 07:07:52-1000 2007")
  :tags:
  - gauche
  - srfi-19
  :references:
    :url: 
    :title: 
- :id: '1319'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1319
  :user_name: katsu
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/22 02:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">クロージャとか無いので、適当な名前を付けて述語を定義するしかないです。多分。\r\n呼び出すときはcall/nを使います。</pre>\n\t"
  :code: |
    n_days_later(N,Pred):-gensym(temprary_predicate_,Pred),H=..[Pred,D,R],B=(R is D + N * 86400),P=..[:-,H,B],assert(P).

    :-get_time(T),n_days_later(10,Pred),call(Pred,T,R),convert_time(R,Rs),writeln(Rs).
  :tags:
  - SWI-prolog
  :references:
    :url: 
    :title: 
- :id: '1321'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1321
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/07/22 03:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  お題を読み違えていたので、再投稿。\r\n\n\t"
  :code: |
    import time

    def n_days_later(n):
      return lambda d: time.localtime(time.mktime(d) + n * 24 * 60 * 60)

    five_days_later = n_days_later(5)
    print five_days_later(time.localtime())
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1325'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1325
  :user_name: satyri
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/76/
  :language: PHP
  :time: 2007/07/22 04:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こんなのでいいのかな。</pre>\n\t"
  :code: "&lt;?php\nfunction n_days_later($n){\n\treturn create_function('$time',
    \n\t\t'return date(\"Y/m/d H:i:s\", strtotime( \"+ '.$n.' day\", $time));');\n}\n\n$func
    = n_days_later(5);\necho $func(time());\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1330'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1330
  :user_name: rubikitch
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/105/
  :language: 
  :time: 2007/07/22 05:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">http://www.ruby-lang.org/ja/man/index.cgi?cmd=view;name=Method\r\nhttp://www.ruby-lang.org/ja/man/index.cgi?cmd=view;name=Proc\r\n関数（メソッド）は変換してあげなくてはいけません…。\r\nけれど、Proc→メソッドに変換することもできます。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1331'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1331
  :user_name: ocean
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/07/22 05:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C++にはクロージャのようなものはないので、関数オブジェクトで。（注：time_tを使っているので、2038年までしか表現できない場合あり）\n\t"
  :code: |
    #include &lt;time.h&gt;
    #include &lt;iostream&gt;

    class n_days_later
    {
        int _n;

    public:
        explicit n_days_later(int n) : _n(n) {}

        time_t operator()(time_t t) const
        {
            return t + static_cast&lt;time_t&gt;(24) * 60 * 60 * _n;
        }
    };

    void print(time_t t)
    {
        std::cout &lt;&lt; ctime(&amp;t);
    }

    int main()
    {
        const time_t now = time(NULL);

        const n_days_later one_days_later(1);

        const n_days_later two_days_later(2);

        print(now);

        print(one_days_later(now));

        print(two_days_later(now));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1339'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1339
  :user_name: smeghead
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/07/22 07:01 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">日付型というのは見つからなかったので、構造体の定義からやりました。\r\n(setq
    now (datetime-now))\r\n(print now)\r\n =&gt; #S(DATETIME :YEAR 2007 :MONTH 7 :DATE
    22 :HOUR 15 :MINUTE 35 :SECOND 50)\r\n(print (funcall (n-days-after 10) now))\r\n
    =&gt; #S(DATETIME :YEAR 2007 :MONTH 8 :DATE 1 :HOUR 15 :MINUTE 35 :SECOND 50)</pre>\n\t"
  :code: "(defstruct datetime year month date hour minute second)\n\n(defun datetime-now
    ()\n  (multiple-value-bind\n    (second minute hour date month year)\n    (get-decoded-time)\n
    \   (make-datetime :year year :month month\n                   :date date :hour
    hour\n                   :minute minute :second second)))\n\n(defun n-days-after
    (n)\n  #'(lambda (date) \n      (multiple-value-bind\n        (second minute hour
    date month year)\n        (decode-universal-time \n          (+ (encode-universal-time
    \n               (datetime-second date) (datetime-minute date)\n               (datetime-hour
    date) (datetime-date date)\n               (datetime-month date) (datetime-year
    date))\n             (* n 60 60 24)))\n        (make-datetime :year year :month
    month\n                       :date date :hour hour\n                       :minute
    minute :second second))))\n"
  :tags:
  - clisp
  :references:
    :url: 
    :title: 
- :id: '1340'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1340
  :user_name: smeghead
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/07/22 07:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">日付はuniversal-timeで持っておいて、日付用のformat関数を用意して、表示する時に変換する方が、らしい方法かもしれないと思いました。\r\n\r\n(setq
    now (get-universal-time))\r\n(date-format t now)\r\n =&gt; 2007/7/22 16:1:53\r\n(date-format
    t (funcall (n-days-after 10) now))\r\n =&gt; 2007/8/1 16:1:53\r\n</pre>\n\t"
  :code: "(defun date-format (destination arg-date)\n  (multiple-value-bind\n    (second
    minute hour date month year)\n    (decode-universal-time arg-date)\n    (format
    destination \"~d/~d/~d ~d:~d:~d\"\n            year month date hour minute second)))\n\n(defun
    n-days-after (n)\n  #'(lambda (arg-date) \n        (+ arg-date (* n 60 60 24))))\n"
  :tags:
  - clisp
  :references:
    :url: 
    :title: 
- :id: '1341'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1341
  :user_name: yuin
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/82/
  :language: PHP
  :time: 2007/07/22 09:14 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  できますよ。create_functionを使います。\n\t"
  :code: |
    function n_days_later($days) {
      return create_function('$d',
        'return getdate(mktime(
           $d["hours"], $d["minutes"], $d["seconds"], $d["mon"],
           $d["mday"] + '. $days . ', $d["year"]
        ));');
    }

    $five_days_later = n_days_later(5);
    $date = $five_days_later(getdate());

    print_r($date);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1347'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1347
  :user_name: 沢渡 みかげ
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/101/
  :language: Mathematica
  :time: 2007/07/22 11:04 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">こんな感じで実行します．\r\nIn[1]:= dayslater[n_] := DatePlus[#,
    n] &amp;\r\nIn[2]:= fivedayslater := dayslater[5]\r\nIn[3]:= now = DateList[]\r\nOut[3]=
    {2007, 7, 22, 20, 4, 2.2296250}\r\nIn[4]:= fivedayslater[now]\r\nOut[4]= {2007,
    7, 27, 20, 4, 2.2296250}\r\n</pre>\n\t"
  :code: |
    dayslater[n_] := DatePlus[#, n] &amp;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1364'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1364
  :user_name: shiro
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/41/
  :language: Haskell
  :time: 2007/07/23 07:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Haskell練習中。\r\n\r\n実行例:\r\n*Main&gt; do c &lt;-
    getClockTime; return (fiveDaysLater c)\r\nFri Jul 27 21:46:57 HST 2007\r\n</pre>\n\t"
  :code: |
    import Time

    nDaysLater :: Int -&gt; (ClockTime -&gt; ClockTime)
    nDaysLater n = addToClockTime (TimeDiff 0 0 n 0 0 0 0)

    -- example
    fiveDaysLater = nDaysLater 5
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1370'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1370
  :user_name: JDO
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/257/
  :language: Java
  :time: 2007/07/23 15:45 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  確かに、Java には 一般的な関数を返す方法がありませんね。でも、インターフェイスを宣言して、そのシグニチャに従うオブジェクトを返すような実装にすると、(あくまで、私の感覚ですが)
    「関数を返す関数」のイメージにより近づく気がします。「ファクトリーメソッド」的な考え方ですね。例えば、こんなのどうでしょ？ (厳密にはファクトリーではありませんが、、、)\n\t"
  :code: "interface N_Days_Later\n  {public Date apply (Date d) ;}\n\nと宣言しておいて、\n\nclass
    N_Days_Later_Factory\n  {\n  static N_Days_Later getFunction (int n)\n    {return
    new N_Days_Later_Impl (n) ;}\n\n  \n  // あとは実装を...\n\n  private static class N_Days_Later_Impl\n
    \   implements N_Days_Later\n    {\n    int delta ;\n\n    N_Days_Later_Impl (int
    n)\n      {delta = n ;}\n\n    public Date apply (Date d)\n      {\n      Calendar
    c = Calendar.getInstance () ;\n      c .setTime (d) ;\n      c .add (Calendar.DATE,
    delta) ;\n      return c .getTime () ;\n      }\n    }\n  }\n\n\n～ 使い方 ～\n\nN_Days_Later
    five_days_later = N_Days_Later_Factory.getFunction (5) ;\n\nDate d = five_days_later
    .apply (new Date ()) ;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1371'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1371
  :user_name: JDO
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/23 16:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C++のことよく分からないので、的をはずしていたらごめんなさい。n_days_later クラスの定義までできているようですが、もう一歩進めて、n_days_later
    インスタンスへの参照を返すような関数を定義されてはどうでしょう？ 「n_days_later &amp;getFunction (int n) ;」とかいう形のです。「Class
    var () ;」形式や「Class* var = new Class () ;」といった普通のインスタンス生成の形式よりも「関数を返す関数」のイメージに近づくと思います。(ファクトリーメソッドのイメージです。)\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1373'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1373
  :user_name: ocean
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/177/
  :language: 
  :time: 2007/07/24 03:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  うーん、シグネチャを保証するために多態を使うというのも何か違うような・・・例えばプラグインを実装したくて、MIDI用、MP3用と継承して、統一的にPlugin*として呼ぶ、というのは自然だと思うし、n日後を返す実装が複数あって動的に切り替えたい場合はそうすると思うのですが、その場合は「関数を返す」のではなく、普通にオブジェクトを返すと思います。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1374'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1374
  :user_name: ocean
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/07/24 03:22 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  ああ、読み違えたかな・・・「n_days_later &amp;getFunction (int n) ;」という形だと、ローカル変数への参照は少なくともbcc32(5.5)ではエラーになります。VisualC++6では警告ですが、動作がおかしいです。なので、どこかにインスタンスを保持しておかなければなりません。というか、下のようにすればファクトリ風味ですが、これでいいのかな。\n\t"
  :code: |
    #include &lt;time.h&gt;
    #include &lt;iostream&gt;

    class n_days_later
    {
        int _n;

    public:
        explicit n_days_later(int n) : _n(n) {}

        time_t operator()(time_t t) const
        {
            return t + static_cast&lt;time_t&gt;(24) * 60 * 60 * _n;
        }
    };

    void print(time_t t)
    {
        std::cout &lt;&lt; ctime(&amp;t);
    }

    int main()
    {
        const time_t now = time(NULL);

        const n_days_later one_days_later = n_days_later(1);

        const n_days_later two_days_later = n_days_later(2);

        print(now);

        print(one_days_later(now));

        print(two_days_later(now));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1386'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1386
  :user_name: にしお
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/1/
  :language: Java
  :time: 2007/07/24 07:41 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Pythonでは__call__という名前のメソッドを定義したクラスは\r\n関数のように呼び出すことができるので、それのまねをしてみました。\r\n関数の引数と返り値は型パラメータで一般化して\r\nIFunction&lt;Date,
    Date&gt;で「Dateを取ってDateを返す関数」にしています。\r\n</pre>\n\t"
  :code: "import java.util.Calendar;\nimport java.util.Date;\n\nclass N_Days_Later
    {\n\tstatic IFunction&lt;Date, Date&gt; getFunction(int n) {\n\t\tclass Result
    implements IFunction&lt;Date, Date&gt; {\n\t\t\tprivate int n;\n\n\t\t\tpublic
    Result(int n) {\n\t\t\t\tthis.n = n;\n\t\t\t}\n\n\t\t\tpublic Date __call__(Date
    arg) {\n\t\t\t\tCalendar c = Calendar.getInstance();\n\t\t\t\tc.setTime(arg);\n\t\t\t\tc.add(Calendar.DATE,
    n);\n\t\t\t\treturn c.getTime();\n\t\t\t}\n\t\t}\n\n\t\treturn new Result(n);\n\t}\n\n\tpublic
    static void main(String[] args) {\n\t\tIFunction&lt;Date, Date&gt; five_days_later
    = N_Days_Later.getFunction(5);\n\t\tDate d = five_days_later.__call__(new Date());\n\t\tSystem.out.println(d);\n\t}\n}\n\ninterface
    IFunction&lt;R, A&gt; {\n\tpublic R __call__(A arg);\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1437'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1437
  :user_name: JDO
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/24 17:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  うむむ。もしかして、インスタンス生成の書き方だけの問題だったりしたんでしょうか？。。。『「n_days_later &amp;getFunction
    (int n) ;」という形だと、ローカル変数への参照は…エラーになります』の点ですが、私も投稿後に気がつきました。参照が使えるのはコンパイル時に解決されるものだけですものね。。。。。。何はともあれ、結局のところ、設問の「関数を返す」の意図は、指定した日数後の日付を計算する
    \"関数\" を返す、というよりは、\"関数\"であれ、\"手続き\" であれ、\"オブジェクト\"であれ、\"述語\"であれ、その \"機能\" を実現する何かを生成するという意味でしょうから、私の指摘は、出題の意図としては、的はをはずしていたものですね。お騒がせしてスミマセンでした。。。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1438'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1438
  :user_name: JDO
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/257/
  :language: 
  :time: 2007/07/24 17:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  おぉぉ。さすがですね。Generic にしたことで、文字通り一般化したきれいな形にまとまりましたね。1引数関数というのは、数学的な関数ではよくある形ですから、IFunction
    みたいな定義が Java 標準にあるべきかもですよね。。。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1498'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1498
  :user_name: zigorou
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/64/
  :language: Perl
  :time: 2007/07/27 06:50 GMT
  :vote_count: '3'
  :vote_score: '-3'
  :body: "\n\t  DateTime, DateTime::Duration使用版\n\t"
  :code: |
    #!/usr/bin/perl

    use strict;
    use warnings;

    use DateTime;
    use DateTime::Duration;

    sub date_later {
        DateTime-&gt;today + DateTime::Duration-&gt;new(days =&gt; shift);
    }

    print date_later(5);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1721'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1721
  :user_name: tomatsu
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/02 12:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    function n_day_later(n) {{d-&gt;addDay(d, n)}}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1889'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1889
  :user_name: minekoa
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/337/
  :language: Smalltalk
  :time: 2007/08/05 18:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Visual Works で。\r\n\r\nSqueak Smalltalk にある DateAndTime がこちらには無いので
    Timestamp を 使ってみました。しかし Timestamp には Date にはある addDays: メソッドがいないとか、そもそもクラス名からすると
    弄っちゃうのはどうなの、とか書くうちにこのチョイスは良くないんじゃないかと不安になってきました。\n\t"
  :code: |
    | nDaysLater fiveDaysLater now |
    nDaysLater := [:n | [:timestamp |
                           timestamp addSeconds: n*60*60*24]].
    fiveDaysLater := nDaysLater value: 5.

    now := Timestamp now.
    Transcript cr;
               show: 'now= ';
               show: now printString.
    Transcript cr;
               show: '5days later= ';
               show: (fiveDaysLater value: now) printString


    "== 結果 ==
    now= August 5, 2007 11:37:34.071
    5days later= August 10, 2007 11:37:34.071
    "
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1964'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/1964
  :user_name: yooskeh
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/91/
  :language: Prolog
  :time: 2007/08/07 04:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  call(foo(A), B) は call(foo, A, B) と同じなので assart/1 を使わずに以下のように書けると思います。\n\t"
  :code: |
    n_days_later_pred(N, T, R) :- R is T + N * 86400.
    n_days_later(N, n_days_later_pred(N)).
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '2176'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2176
  :user_name: drop
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/388/
  :language: Haskell
  :time: 2007/08/14 15:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">芸がなーい</pre>\n\t"
  :code: |
    import Data.Time.Calendar

    nDaysLater = addDays
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2328'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2328
  :user_name: ココサブ
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/24/
  :language: Perl
  :time: 2007/08/19 10:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Time::Pieceモジュールを使用。\r\n</pre>\n\t"
  :code: |
    #!/usr/bin/perl
    use Time::Piece;
    use Time::Seconds;

    sub n_days_later {
        my ($n) = @_;

        my $func = sub {
            my ($date) = @_;
            $date += ONE_DAY * $n;
            return $date;
        };

        return $func;
    }

    my $datetime = localtime;
    my $five = &amp;n_days_later(5);

    print $datetime, "\n";
    print &amp;$five($datetime), "\n";

    # 実行結果
    # Sun Aug 19 19:32:00 2007
    # Fri Aug 24 19:32:00 2007
  :tags: []
  :references:
    :url: /web/20090121004017/http://perldoc.jp/docs/modules/Time-Piece-1.08/Piece.pod
    :title: Time::Piece - オブジェクト指向な時間オブジェクト
- :id: '2435'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2435
  :user_name: omoikani
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/08/22 23:26 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">一旦、秒にまで落とさにゃならんのか。。。</pre>\n\t"
  :code: |
    fun n_days_later n d =
      let
        open Time

        val ndays = fromSeconds (n * 24 * 60 * 60)
        val t = Date.toTime d
      in
        Date.fromTimeLocal (t + ndays)
      end;

    val five_days_later = n_days_later 5;

    print (Date.toString (five_days_later (Date.fromTimeLocal (Time.now ()))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2436'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2436
  :user_name: omoikani
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/08/22 23:39 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">こっちの方がスマート。</pre>\n\t"
  :code: |
    fun n_days_later n d =
    let
      open Date
    in
      date { year = year d,
             month = month d,
             day = day d + n,
             hour = hour d,
             minute = minute d,
             second = second d,
             offset = offset d
           }
    end;

    val five_days_later = n_days_later 5;

    print (Date.toString (five_days_later (Date.fromTimeLocal (Time.now()))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2441'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2441
  :user_name: jz5
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/23 01:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    Function n_days_later(ByVal n As Integer) As Func(Of DateTime, DateTime)
        Return Function(dateTime As DateTime) dateTime.AddDays(n)
    End Function
  :tags:
  - VB9.0
  :references:
    :url: 
    :title: 
- :id: '2847'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2847
  :user_name: 130R
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/09/03 06:53 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">文字列展開をつかってクロージャモドキ\r\nPS C:\\&gt; $t = n_days_later(1)\r\nPS
    C:\\&gt; $t\r\n\r\n2007年9月4日 15:54:59\r\n\r\n\r\nPS C:\\&gt; $t = n_days_later(10)\r\nPS
    C:\\&gt; $t\r\n\r\n2007年9月13日 15:55:06</pre>\n\t"
  :code: |
    function n_days_later($n){$ExecutionContext.InvokeCommand.InvokeScript("(get-date).addDays($n)")}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2866'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/2866
  :user_name: 130R
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/09/03 11:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">コマンド間違えてた。ただ値を返すだけでした\r\n\r\nPS C:\\&gt; $f
    = n_days_later(3)\r\nPS C:\\&gt; &amp;$f\r\n\r\n2007年9月6日 20:02:27\r\n\r\nPS C:\\&gt;
    $f\r\n(get-date).addDays(3)\r\nPS C:\\&gt; $f = n_days_later(1)\r\nPS C:\\&gt;
    $f\r\n(get-date).addDays(1)\r\nPS C:\\&gt; &amp;$f\r\n\r\n2007年9月4日 20:03:04</pre>\n\t"
  :code: |
    function n_days_later($n){$ExecutionContext.InvokeCommand.NewScriptBlock("(get-date).addDays($n)")}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3225'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3225
  :user_name: cooldaemon
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/451/
  :language: Erlang
  :time: 2007/10/02 01:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1&gt; DateTime = erlang:localtime().\r\n{{2007,10,2},{10,0,40}}\r\n2&gt;
    F5 = foo:n_days_later(5).\r\n#Fun&lt;foo.1.47506014&gt;\r\n3&gt; F5(DateTime).\r\n{{2007,10,7},{10,0,40}}\r\n</pre>\n\t"
  :code: |
    -module(foo).
    -export([n_days_later/1]).

    n_days_later(Days) -&gt;
      fun ({Date, Time}) -&gt;
        {
            calendar:gregorian_days_to_date(
              calendar:date_to_gregorian_days(Date) + Days
            ),
            Time
        }
      end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3252'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3252
  :user_name: tilde
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/446/
  :language: Objective
  :time: 2007/10/05 07:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Objective-C的にやれることを試行錯誤した結果、関数を返すのではなく、NSObjectのクラスメソッド\r\nとして登録した関数のセレクタを返す形で実現してみました。\r\n\r\n以下の環境で動作確認しています。\r\n\r\n・Mac
    OSX 10.4.10、Xcode 2.4.1\r\n・Windows XP、GNUstep-base-1.13.1-gui-0.11.0</pre>\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n\n#if GNU_RUNTIME\n#define MetaClass(
    a ) [a class]-&gt;class_pointer\nextern void class_add_method_list (Class class,
    MethodList_t list);\n#else\n#import &lt;objc/objc-class.h&gt;\n#import &lt;objc/objc-runtime.h&gt;\n#define
    MetaClass( a ) [a class]-&gt;isa\n#endif\n\nNSCalendarDate* daysLater( id self,
    SEL _cmd, NSCalendarDate* date ) {\n\tint nDays = [[NSString stringWithUTF8String:sel_getName(
    _cmd )] intValue];\n\treturn [date dateByAddingYears:0 months:0 days:nDays hours:0
    minutes:0 seconds:0];\n}\n\nSEL createMethod( int n ) {\n\tconst char* days =
    [[[NSNumber numberWithInt:n] stringValue] UTF8String];\n\tSEL selector = sel_registerName(
    days );\t\t\t\t//数値nの文字列表現をセレクタとして登録する\n\tstruct objc_method_list* methodList
    =\t\t\t\t\t//割り当てたメモリはプログラム終了まで解放しない\n\t\t\tcalloc( sizeof (struct objc_method_list),
    1 );\n\tmethodList-&gt;method_count = 1;\t\t\t\t\t\t\t//登録するメソッド数は１\n\tmethodList-&gt;method_list[0].method_name
    =\t\t\t\t//メソッド名はセレクタ（数値nの文字列表現）\n#if GNU_RUNTIME\n\t\t\t(SEL)sel_get_name( selector
    );\n#else\n\t\t\tselector;\n#endif\n\tmethodList-&gt;method_list[0].method_types
    = \"@0@0:0@0\";\t//オブジェクトの引数を１つ取り、返り値はオブジェクト\n\tmethodList-&gt;method_list[0].method_imp
    = (IMP)daysLater;\n\tclass_addMethods( MetaClass( NSObject ), methodList );\t//NSObjectのクラスメソッドとして登録\n\treturn
    selector;\n}\n\nint main (int argc, const char * argv[]) {\n    NSAutoreleasePool
    * pool = [[NSAutoreleasePool alloc] init];\n\t\n\tSEL selector = createMethod(
    5 );\t\t\t\t\t\t//５日後の日付を返す関数を作成\n\tNSCalendarDate* now = [NSCalendarDate calendarDate];\t//現在の日付を作成\n\tNSLog(
    [now description] );\t\t\t\t\t\t\t\t//現在の日付を表示\n\tNSCalendarDate* fiveDaysLater
    =\t\t\t\t\t\t\t//作成した関数を呼び出して５日後の日付を取得\n\t\t[NSObject performSelector:selector
    withObject:now];\n\tNSLog( [fiveDaysLater description] );\t\t\t\t\t//５日後の日付を表示\n\t\n
    \   [pool release];\n    return 0;\n}\n"
  :tags:
  - Cocoa
  - GNUstep
  - Mac
  - OSX
  :references:
    :url: 
    :title: 
- :id: '3428'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3428
  :user_name: Y
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/428/
  :language: Mathematica
  :time: 2007/10/17 15:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">日本限定、nは0以上、西暦限定、暦はユリウス暦とグレゴリオ暦のみ、妥当な日付が入力されることする\r\n\r\n・入力が1873年1月1日より前ならユリウス暦で計算\r\n・・結果が1892年12月2日より後ならグレゴリオ暦に変換\r\n・・そうでなければそのまま\r\n・そうでなければグレゴリオ暦で計算\r\n\r\nMathematicaでは、1752年9月14日にユリウス暦からグレゴリオ暦に切り替わったことになっていることに注意\r\n\r\n&gt;
    nDaysLater[1]@{1752, 9, 2}\r\n\r\n{1752, 9, 3}　（異常なし）\r\n\r\n&gt; nDaysLater[1]@{1872,
    12, 2}\r\n\r\n{1873, 1, 1}　（暦が切り替わった）\r\n\r\n&gt; nDaysLater[5]@{2007, 7, 20}\r\n\r\n{2007,
    7, 25}　（異常なし）\r\n</pre>\n\t"
  :code: |
    &lt;&lt;Miscellaneous`Calendar`　（Version 6では「&lt;&lt;Calendar`」）

    nDaysLater[n_] := Function[{d},
        Module[{tmp},
          If[{10000, 100, 1}. d &lt; 18730101,
            tmp = DaysPlus[d, n, Calendar -&gt; Julian];
            If[18721202 &lt; {10000, 100, 1}. tmp,
              DaysPlus[{1873, 1, 1}, DaysBetween[{1872, 12, 3}, tmp, Calendar -&gt; Julian]],
              tmp],
            DaysPlus[d, n]]]]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3483'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3483
  :user_name: naranja
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/10/20 13:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    import std.stdio;
    import std.date;

    d_time delegate(d_time) nDaysLater(int n){
        class C{
            d_time n;
            this(int n){
                this.n = n;
            }
            d_time nDaysLater(d_time date){
                return date + n * 24 * 60 * 60 * TicksPerSecond;
            }
        }
        return &amp;(new C(n)).nDaysLater;
    }

    void main(){
        auto fiveDaysLater = nDaysLater(5);
        writefln(toString(fiveDaysLater(getUTCtime())));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3712'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3712
  :user_name: LiosK
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/515/
  :language: JavaScript
  :time: 2007/11/05 14:37 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">普通に日数を足す関数を書いて、それをbindして引数束縛するのは邪道でしょうか？\r\n\r\nprototype.jsのFunction.prototype.bindを使います。</pre>\n\t"
  :code: |
    /* use prototype.js */

    var addDays = function(n, date) {
        return new Date(date.getTime() + 1000 * 60 * 60 * 24 * n);
    };

    var fiveDaysLater = addDays.bind(null, 5);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3713'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3713
  :user_name: LiosK
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/515/
  :language: PHP
  :time: 2007/11/05 14:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">日時をUNIXタイムスタンプのまま処理するとすごく簡単に。</pre>\n\t"
  :code: |
    &lt;?php
    function nDaysLater($n)
    {
        return create_function('$time', "return \$time + 86400 * $n;");
    }

    $fiveDaysLater = nDaysLater(5);

    print_r($fiveDaysLater(time()));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3715'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3715
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/05 16:14 GMT
  :vote_count: '4'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">このサイトを「マルチリンガル・クックブック」として利用する人は、\r\n回答の多くが2038年問題を再生産していることに注意してください</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3719'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3719
  :user_name: 匿名
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/06 02:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">n=20000としたらどうなるか、というような話ですね</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3721'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/3721
  :user_name: Y
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/428/
  :language: 
  :time: 2007/11/06 04:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">タイムスタンプのように、日付を内部的に4バイトの整数で表していると、\r\n2038-01-19T03:14:07+0000以降を扱えないという2038年問題になります。\r\n\r\n2038問題をクリアしているかどうかは、\r\n答えがこれ以降になるケースを試せばわかります。\r\n\r\nたとえばPHPの場合、PEAR
    Dateを使えば2038年以降も扱えるのですが、\r\nそれでも秒で表したときに4バイトを超える期間を扱えません。\r\n（試したのはPHP 5.2, PEAR
    Date 1.41です。）\r\n\r\nこの問題をクリアしているかどうかは、\r\n長い期間（3万日とか）のケースを試せばわかります。\r\n\r\nというわけで、\r\nPHP使いにとっては2重にトラップがかけられた良問だと思います。\r\n\r\nここではそこまで考えなくてもいいじゃん、と思いたいのですが、\r\nそういう態度が2000年問題や2038年問題の一因だろうと自戒して</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4504'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/4504
  :user_name: かも
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/67/
  :language: Bash
  :time: 2007/11/30 09:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>n_days_afterの第一引数は作りたい関数名、第二引数はnです。</p>\n<p>日付の計算はGNU dateに頼ってます。こんな使い方もあるんですね。</p>\n\n\t"
  :code: |
    #!/bin/bash

    n_days_after(){
      local funcname=$1
      local n=$2
      eval $funcname'(){ date --date "$* '$n' day"; }'
    }

    # test
    n_days_after six_days_after 6

    six_days_after Fri Nov 30 12:00:00 JST 2007
    six_days_after `date`
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5046'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/5046
  :user_name: pooq
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/29 12:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">副詞として定義すると引数に名詞（数値や文字）や動詞を取り、動詞\r\nを返すものができるようです。副詞の場合、引数が1個だと左にしか\r\n指定できないようです。\r\n\r\n
    \  five_days_later 2007 12 31 20 0 0\r\n2008 1 5 20 0 0\r\n   five_days_later
    2008 2 27 20 0 0\r\n2008 3 3 20 0 0\r\n   five_days_later 2007 2 27 20 0 0\r\n2007
    3 4 20 0 0\r\n   five_days_later 2000 2 27 20 0 0\r\n2000 3 3 20 0 0\r\n   five_days_later
    2037 2 27 20 0 0\r\n2037 3 4 20 0 0\r\n   five_days_later 1700 12 31 20 0 0\r\n1701
    1 5 20 0 0\r\n   five_days_later 0 12 31 20 0 0\r\n1 1 5 20 0 0\r\n   five_days_later
    _1000 12 31 20 0 0\r\n_999 1 5 20 0 0\r\n</pre>\n\t"
  :code: |
    load 'dates'
    n_days_later=:1 :'1 tsrep (tsrep y) + 86400000 * u'
    five_days_later=: 5 n_days_later
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5443'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/5443
  :user_name: queck
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/01/24 05:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Factor としては : n_days_later +day ; の方がふさわしいようにも思いますが。</p>\n\n\t"
  :code: |
    USING: kernel calendar prettyprint ;

    : n_days_later ( n -- quot )
        [ +day ] curry ;

    ! example
    now dup . 5 n_days_later call .
  :tags:
  - Factor
  :references:
    :url: 
    :title: 
- :id: '6276'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/6276
  :user_name: susu
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/05/09 12:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  一万日後とちょっとまで。\n\t"
  :code: |
    #load "unix.cma";;
    let n_days_later n () =
      let t = Unix.localtime (Unix.gettimeofday ()) in
      snd (Unix.mktime {t with Unix.tm_mday = t.Unix.tm_mday+n});;
    (*
      現在   (Unix.localtime (Unix.gettimeofday ()));;
      五日後 (n_days_later 5) ();;
    *)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6489'
  :parent_id: '29'
  :url: http://ja.doukaku.org/comment/6489
  :user_name: genzou
  :user_url: /web/20090121004017/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/13 22:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>クロージャを利用しました。</p>\n\n\t"
  :code: |
    def nDaysLater( n ){
        return { date -&gt;
            date + n
        }
    }

    // 試行
    def f = nDaysLater(100000)
    def newDate = f(new Date())
    println newDate
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
