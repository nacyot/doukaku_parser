---
:id: '18'
:title: HTTPでGET
:comments:
- :id: '3374'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3374
  :user_name: にしお
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/12 09:53 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  HTTPで指定されたURLをGETするコードを書いてください。\r\nURLは「http://ja.doukaku.org/feeds/comments/」とします。\r\n<p>\r\nもしOSに依存する場合はそのOS名のタグを、\r\n依存しない場合は「OS非依存」というタグをつけてください。\r\nわからなければつけなくても構いません。\r\n</p>\n<p>\r\nこのお題はところてんさんの投稿を参考にして作成しました。\r\nご投稿ありがとうございます。\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3733'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3733
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/06 09:24 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">なでしこ自体がWindows依存です...</pre>\r\n\t"
  :code: |
    "http://ja.doukaku.org/feeds/comments/"をHTTPデータ取得して表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3734'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3734
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/06 09:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">すみません、投稿する場所を間違ってしまいましたorz</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5433'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/5433
  :user_name: queck
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/01/23 13:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Factor です。\nwrite のあとにステータスとヘッダがスタックに残るので最後に 2drop しています。\n文字コードはごめんなさい。</p>\n\r\n\t"
  :code: |
    USING: kernel http.client io ;
    "http://ja.doukaku.org/feeds/comments/" http-get write 2drop
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '671'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/671
  :user_name: kawauchi
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/14/
  :language: Other
  :time: 2007/07/12 15:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Hackety Hack &lt;http://hacketyhack.net/&gt;\r\n\t"
  :code: |
    feed = Web.fetch("http://ja.doukaku.org/feeds/comments/")
    puts feed
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '669'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/669
  :user_name: takano32
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/148/
  :language: awk
  :time: 2007/07/12 15:35 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  gawkなのだぁ！\r\n\t"
  :code: |
    gawk 'BEGIN{while(("GET http://ja.doukaku.org/feeds/comments/ /inet/tcp/0/ja.doukaku.org/80" |&amp; getline) &gt; 0) {print $0}}'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '649'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/649
  :user_name: kawauchi
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/14/
  :language: Ruby
  :time: 2007/07/12 12:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Windowsのみ\r\n\t"
  :code: |
    require 'Win32/Console' # http://rubyforge.org/projects/win32console
    require 'open-uri'
    require 'uconv'

    $cp = Win32::Console.OutputCP()
    #ENV['HTTP_PROXY'] = "http://proxy.example.com:8080/"

    uri = "http://ja.doukaku.org/feeds/comments/"

    begin
      str = open(uri).read
    rescue
      $stderr.puts $!
    else
      if $cp == 932
        output = Uconv.u8tosjis(str)
      else
        output = str
      end
      print output
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1092'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1092
  :user_name: aplo
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/267/
  :language: Ruby
  :time: 2007/07/19 05:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">教科書通り？　</pre>\r\n\t"
  :code: "require 'open-uri'\nputs open(\"http://ja.doukaku.org/feeds/comments\").read
    \n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3762'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3762
  :user_name: dankogai
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/11/08 12:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">CPANマンセー\r\n\r\nDan the Perl Monger</pre>\r\n\t"
  :code: |
    l% perl -MLWP::Simple -le 'print get(shift)' http://www.dan.co.jp/
    &lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN"&gt;
    ...
    &lt;/HTML&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '983'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/983
  :user_name: PHO
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/69/
  :language: Haskell
  :time: 2007/07/16 08:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    import Data.Maybe
    import Network.HTTP
    import Network.URI

    uri :: URI
    uri = fromJust $ parseURI "http://ja.doukaku.org/feeds/comments/"

    main = do Right resp &lt;- simpleHTTP $ Request uri GET [] ""
              putStrLn (rspBody resp)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2227'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2227
  :user_name: ソラ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/391/
  :language: HSP
  :time: 2007/08/16 07:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">できた。\r\nHSPのSOCKはやっぱり使いにくいｗ\r\n他の方法は使わないけど。\r\nネットワークプログラミング苦手。\r\nでもRubyでネットワークプログラミングやってみたい！</pre>\r\n\t"
  :code: "#include \"hspsock.as\"\n\taihfioejfoweihfoihf = \"\"\n\tmesbox aihfioejfoweihfoihf,200,300\n\tbutton
    \"BYE\",*bye\n\t;\n\twait 10\n\t;\n\tgoto *sd\n\n*sd\n\ttitle \"げっと準備\"\n\tsockopen
    0,\"ja.doukaku.org\",80\n\tif stat : dialog \"ERROR\\nSTAT=\"+stat : goto *sdover\n\tsockput
    \"GET /feeds/comments/ HTTP/1.0\\nHost:???\\nUser-Agent: GetrTest\\n\\n\"\n\tif
    stat : dialog \"socket error\" : goto *sdover\n\t;\n\tbuf=\"\":a=\"\"\n\tb=0:sz=0\n*wloop\n\tawait
    0\n\tsockget a,64\n\tif stat : dialog \"socket error\" : goto *sdover\n\tb=peek(a,0):if
    b=0 : goto *sdok\n\tbuf+=a\n\tsz+=64:title \"受信中 \"+sz\n\tif sz&gt;3000 : dialog
    \"受信サイズがオーバーしました。\" : goto *sdok\n\tgoto *wloop\n*sdok\n\tobjprm 0,buf\n\ttitle
    \"終了\"\n*sdover\n\tsockclose\n\tstop\n\n*bye\n\tend\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '653'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/653
  :user_name: ether
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/96/
  :language: Tcl
  :time: 2007/07/12 13:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Tcl 標準の http パッケージで。\r\n\t"
  :code: |
    package require http
    http::geturl http://ja.doukaku.org/feeds/comments/ -channel stdout
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '652'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/652
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/07/12 12:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  GETしてどうするか決まっていないのですが、標準出力にそのまま書き出しています。\r\n\t"
  :code: |
    import java.net.URL;
    import java.net.URLConnection;
    import java.io.InputStream;
    import java.io.IOException;

    public class Sample {

        static final String url = "http://ja.doukaku.org/feeds/comments/";
        static final int BUFFER_SIZE = 2048;

        public static void main(String[] args) throws IOException {
            URLConnection uc = new URL(url).openConnection();
            InputStream is = uc.getInputStream();
            byte[] buffer = new byte[BUFFER_SIZE];
            int r;
            while ((r = is.read(buffer)) &gt; 0) {
                System.out.write(buffer, 0, r);
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3980'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3980
  :user_name: ihag
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/560/
  :language: Ruby
  :time: 2007/11/13 18:21 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">portalfsをサポートしているシステムで動きます．\r\n事前に/pへportalfsをmountして下さい．\r\nFreeBSDなら以下のような感じでどうぞ．\r\n\r\n#
    echo 'tcp/ tcp tcp/' &gt; /etc/portal.conf\r\n# mkdir /p\r\n# mount -t portalfs
    /etc/portal.conf /p\r\n</pre>\r\n\t"
  :code: |
    open("/p/tcp/ja.doukaku.org/80", 'r+') {|io|
      puts((io &lt;&lt; "GET /feeds/comments/ HTTP/1.0\r\n\r\n").read)
    }
  :tags: []
  :references:
    :url: /web/20110317020745/http://www.freebsd.org/cgi/man.cgi?query=mount_portalfs&amp;sektion=8&amp;manpath=FreeBSD+6.2-RELEASE
    :title: mount_portalfs(8)
- :id: '691'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/691
  :user_name: kkobayashi
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/07/12 18:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">download.fileを使うともっと簡単ですが・・・。</pre>\r\n\t"
  :code: |
    scan("http://ja.doukaku.org/feeds/comments/", what=character(0), sep="\n", encoding="UTF-8")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3948'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3948
  :user_name: Psychs
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/554/
  :language: Objective
  :time: 2007/11/13 13:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">AppKit のリンクが必要です。\r\n</pre>\r\n\t"
  :code: |
    #import &lt;Foundation/Foundation.h&gt;
    #import &lt;Appkit/Appkit.h&gt;

    @interface AppController : NSObject
    @end

    @implementation AppController

    - (void)startRequest
    {
      NSURL* url = [NSURL URLWithString:@"http://ja.doukaku.org/feeds/comments/"];
      NSMutableURLRequest* req = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:30.0];
      [req setHTTPMethod:@"GET"];
      [[NSURLConnection alloc] initWithRequest:req delegate:self];
    }

    - (void)connectionDidFinishLoading:(NSURLConnection*)conn
    {
      [NSApp terminate:self];
    }

    - (void)connection:(NSURLConnection*)conn didFailWithError:(NSError*)err
    {
      NSLog(@"error");
      [NSApp terminate:self];
    }

    - (void)connection:(NSURLConnection*)conn didReceiveData:(NSData*)data
    {
      NSLog([[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] autorelease]);
    }

    @end

    int main(int argc, char** argv)
    {
      id pool = [NSAutoreleasePool new];
      [NSApplication sharedApplication];
      id controller = [[AppController alloc] init];
      [controller startRequest];
      [NSApp run];
      [pool release];
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2678'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2678
  :user_name: 130R
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/08/30 07:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">一応OS依存？</pre>\r\n\t"
  :code: |2
     $url = "http://ja.doukaku.org/feeds/comments/"
    $content = $(new-object net.webclient).downloadstring($url)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '635'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/635
  :user_name: mjy
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/94/
  :language: Python
  :time: 2007/07/12 10:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    #! /usr/bin/python
    import urllib
    u = urllib.urlopen('http://ja.doukaku.org/feeds/comments/')
    print u.read()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '642'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/642
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/07/12 11:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  文字コードの指定をUTF-8にしないとまずいのでは？\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '663'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/663
  :user_name: iwk
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/07/12 14:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  参考にさせていただきました。\r\n\t"
  :code: |
    open System;;
    open System.Net;;
    open System.Text;;

    let getContents (url:string) =
        let webClnt = new WebClient() in
        let returnValue = webClnt.DownloadData( url ) in
        Encoding.UTF8.GetString( returnValue );;

    let doukakuURL = "http://ja.doukaku.org/feeds/comments/";;

    Console.WriteLine( getContents doukakuURL );;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '733'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/733
  :user_name: tsekine
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/124/
  :language: Bash
  :time: 2007/07/13 09:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Bash ってゆーか nc とゆーか。。。\r\n\t"
  :code: |
    http_get () {
      url="$1"
      host=$(echo $url | sed -e "s:[^/]*//::" -e "s:/.*::")
      echo -e "GET $url HTTP/1.0\n" | nc $host 80
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '656'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/656
  :user_name: yuin
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/12 13:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">普通にやるとまんまJAVAなのでScalaらしく。接続は閉じてないけど気にしない。</pre>\r\n\t"
  :code: |
    import java.net._
    import java.io._

    val readLine = &amp;(new BufferedReader(new InputStreamReader((new URL("http://ja.doukaku.org/feeds/comments/")).openStream))).readLine
    def print_contents():Unit = readLine() match {
      case null =&gt; ()
      case s    =&gt; {println(s);print_contents}
    }
    print_contents
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '683'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/683
  :user_name: rubikitch
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/07/12 17:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    (url-http  (url-generic-parse-url  "http://ja.doukaku.org/feeds/comments/") #'display-buffer '(" *http ja.doukaku.org:80*"))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '844'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/844
  :user_name: Ren
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/245/
  :language: JavaScript
  :time: 2007/07/14 13:00 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">Greasemonkey用ユーザスクリプトはOK……？</pre>\r\n\t"
  :code: |
    // ==UserScript==
    // @name           GetURL
    // @namespace      ja.doukaku.org
    // ==/UserScript==
    (function () {
      GM_xmlhttpRequest({
        method: "GET",
        url: "http://ja.doukaku.org/feeds/comments/",
        onload: function (data) {
          alert(data.responseText);
        }
      });
    })();
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3036'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3036
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: HSP
  :time: 2007/09/16 04:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">HSPでHTTPならhspsockでなくhspinetを使えば簡単にできますよー。</pre>\r\n\t"
  :code: |
    #include "hspinet.as"
    netinit
    if stat : dialog "ネット接続できません。" : end
    neturl "http://ja.doukaku.org/feeds/"
    netload "comments"
    notesel buf
    noteload "comments"
    delete "comments"
    mesbox buf, 640, 480
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1040'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1040
  :user_name: ココサブ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/24/
  :language: Vim
  :time: 2007/07/17 15:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">コマンドモードで実行する。\r\nこのあと\r\n\r\n:w 好きなファイル名\r\n\r\nとかすればよい。</pre>\r\n\t"
  :code: |
    :e http://ja.doukaku.org/feeds/comments/
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '631'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/631
  :user_name: es
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/147/
  :language: Ruby
  :time: 2007/07/12 10:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    ruby -rkconv -ropen-uri -e 'puts open(ARGV.shift).read.toeuc' http://ja.doukaku.org/feeds/comments/
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1493'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1493
  :user_name: muhmoo
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/307/
  :language: ActionScript
  :time: 2007/07/27 04:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">フレーム1にボタンインスタンスmyBtn_btnを配置。フレーム1にフレームアクションを記述。</pre>\r\n\t"
  :code: |
    stop();
    myBtn_btn.onRelease = function() {
      getURL("http://ja.doukaku.org/feeds/comments/", "_blank", "GET");
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5989'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/5989
  :user_name: yharada
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/758/
  :language: Groovy
  :time: 2008/03/08 12:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>初投稿です。\nこんなにコメントついてるのにgroovyがまだないようなので・・・</p>\n\r\n\t"
  :code: |
    text = new URL("http://ja.doukaku.org/feeds/comments/").getText("UTF8")
    println text
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '980'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/980
  :user_name: ether
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/96/
  :language: Lua
  :time: 2007/07/16 08:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  LuaSocket &lt;http://luaforge.net/projects/luasocket/&gt; を使用。\r\n\t"
  :code: |
    print(socket.http.request("http://ja.doukaku.org/feeds/comments/"))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '638'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/638
  :user_name: inamorix
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/220/
  :language: JavaScript
  :time: 2007/07/12 10:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: "&lt;script src=\"http://www.google.com/jsapi?key=YOUR_KEY_HERE\"&gt;&lt;/script&gt;\n&lt;script&gt;\ngoogle.load('feeds',
    '1');\ngoogle.setOnLoadCallback(function () {\n\tnew google.feeds.Feed('http://ja.doukaku.org/feeds/comments/').load(function
    (r) {\n\t\tif (!r.error) alert(r.feed.entries[0].title);\n\t});\n});\n&lt;/script&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '710'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/710
  :user_name: yuin
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/07/13 01:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">もう一発Scala。</pre>\r\n\t"
  :code: |
    import scala.io._
    println(Source.fromURL("http://www.google.co.jp").getLines.mkString(""))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2112'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2112
  :user_name: higeorange
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/194/
  :language: Io
  :time: 2007/08/13 13:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    URL with("http://ja.doukaku.org/feeds/comments/") fetch print
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '725'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/725
  :user_name: Yuichirou
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/32/
  :language: JavaScript
  :time: 2007/07/13 06:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  XMLHttpRequestは非同期通信(Ajax)だけでなく、シンプルでわかりやすい同期通信もさせられます。というわけで別解。\r\n\r\n\t"
  :code: |
    var url = "http://ja.doukaku.org/feeds/comments/";

    function getxhr() {
      if (XMLHttpRequest) {
        var xhr = new XMLHttpRequest();
      } else if (ActiveXObject) {
        try {
          var xhr = new ActiveXObject("Msxml2.XMLHTTP");
        } catch(e) {
          try {
            var xhr = new ActiveXObject("Microsoft.XMLHTTP");
          } catch(e) {
            var xhr = null;
          }
        }
      } else {
        var xhr = null;
      }
      return xhr;
    }

    function httpget(url) {
      var xhr = getxhr();
      if (xhr == null) return;

      xhr.open("GET", url, false);
      xhr.send(null);
      return xhr.responseText;
    }

    var data = httpget(url);
    if (data) document.write(data);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3009'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3009
  :user_name: jz5
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/09/14 03:06 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    My.Computer.Network.DownloadFile("http://ja.doukaku.org/feeds/comments/", "comments.xml")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '719'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/719
  :user_name: ココサブ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/07/13 04:40 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  ultraistさんありがとうございます。\r\nHostヘッダフィールドを追加したら動きました。\r\ngetaddrinfoにスキームをつけるのはMac
    OS Xの方ではつけても問題ありませんでした。Ubuntuの方でやったらSegmentation fault (core dumped)がでました。\r\n\t"
  :code: |
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;netdb.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    int main()
    {
        char *request = "GET /feeds/comments/ HTTP/1.1\nHost: ja.doukaku.org\n\n";
        int sockfd;
        struct addrinfo hint;
        struct addrinfo *result;
        char buf[256];
        int size;

        /* アクセスしたいホストの情報を得る */
        memset(&amp;hint, 0, sizeof(hint));
        hint.ai_family = AF_INET;
        hint.ai_socktype = SOCK_STREAM;
        getaddrinfo("ja.doukaku.org", "80", &amp;hint, &amp;result);

        /* ソケットを作成し、接続しに行く */
        sockfd = socket(result-&gt;ai_family, result-&gt;ai_socktype, result-&gt;ai_protocol);
        connect(sockfd, result-&gt;ai_addr, result-&gt;ai_addrlen);

        /* リクエストし、返ってくる文字列を表示 */
        write(sockfd, request, strlen(request));
        while (size = read(sockfd, buf, sizeof(buf))) {
            write(1, buf, size);
        }

        close(sockfd);
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3733'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3733
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/06 09:24 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">なでしこ自体がWindows依存です...</pre>\r\n\t"
  :code: |
    "http://ja.doukaku.org/feeds/comments/"をHTTPデータ取得して表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '634'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/634
  :user_name: tetsuro6502
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/213/
  :language: JavaScript
  :time: 2007/07/12 10:27 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  ブラウザのアドレスバーに…\r\n\t"
  :code: |
    javascript:void (location.href='http://ja.doukaku.org/feeds/comments/')
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '714'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/714
  :user_name: tmty
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/219/
  :language: Ruby
  :time: 2007/07/13 03:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  あれれ、切れちゃった\r\nもう1回。。\r\n\t"
  :code: |
    ruby -e 'require "net/http"; require "kconv"; \
    Kconv.toutf8(Net::HTTP.get_print("ja.doukaku.org", "/feeds/comments/"));'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '684'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/684
  :user_name: ultraist
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/17/
  :language: 
  :time: 2007/07/12 17:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  HTTP/1.1だとHostヘッダフィールドが必須です。指定しないと400エラーになります。これでホスト名を指定しないとバーチャルホストで動いているサイトから正しいデータが取れません。それ以前に、getaddrinfoにスキームを含めるとアドレス解決できないと思うのですが、最近のはできるの？\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5237'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/5237
  :user_name: 割と普通
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/581/
  :language: C
  :time: 2008/01/08 17:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>WebClientはあったのですが、こちらでの取得方法はなかったので</p>\n\r\n\t"
  :code: |
    using System;
    using System.IO;
    using System.Net;
    using System.Text;

    class Program
    {
        public static void Main(string[] args)
        {
            WebResponse res = WebRequest.Create("http://ja.doukaku.org").GetResponse();
            using (StreamReader sr = new StreamReader(res.GetResponseStream(), Encoding.UTF8))
            {
                Console.WriteLine(sr.ReadToEnd());
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '658'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/658
  :user_name: ところてん
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/166/
  :language: C
  :time: 2007/07/12 13:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  wininetを使ったネットアクセス windows限定\r\n\t"
  :code: "#pragma comment(lib,\"wininet.lib\")\n#include &lt;stdio.h&gt;\n#include
    &lt;windows.h&gt;\n#include &lt;wininet.h&gt;\n\nint main()\n{\n\tHINTERNET hInet;\n\tHINTERNET
    hFile;\n\n\thInet = InternetOpenA(\"TEST\",INTERNET_OPEN_TYPE_DIRECT,\n\t\tNULL,NULL,0);\n\n\thFile
    = InternetOpenUrlA(hInet,\n\t\t\"http://ja.doukaku.org/feeds/comments/\",\n\t\tNULL,0,INTERNET_FLAG_RELOAD,0);\n\t\n\tunsigned
    char buf[1024];\n\tDWORD dwSize;\n\n\tdo{\n\t\tInternetReadFile(hFile, buf, 1023,
    &amp;dwSize);\n\t\tbuf[dwSize] = '\\0';\n\t\tprintf(\"%s\\n\", buf);\n\t}while(dwSize);\n\n\tgetchar();\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2498'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2498
  :user_name: tea
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/402/
  :language: Python
  :time: 2007/08/25 03:55 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">Twisted版。howtoに書いてるサンプルそのまま。</pre>\r\n\t"
  :code: |
    from twisted.web.client import getPage
    from twisted.internet import reactor

    if __name__ == '__main__':

        def print_contents(contents):
            print contents
            reactor.stop()

        import sys
        if len(sys.argv) &gt;= 2:
            d = getPage(sys.argv[1])
            d.addCallback(print_contents)
        reactor.run()
  :tags: []
  :references:
    :url: /web/20110317020745/http://twistedmatrix.com/projects/core/documentation/howto/async.html#auto8
    :title: Twisted 非同期プログラミング
- :id: '3734'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3734
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/06 09:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">すみません、投稿する場所を間違ってしまいましたorz</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '646'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/646
  :user_name: kawauchik
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/53/
  :language: C
  :time: 2007/07/12 11:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  VC++/MFCで。\r\n\t"
  :code: "#include &lt;afxwin.h&gt;\n#include &lt;afxinet.h&gt;\n\nconst TCHAR* url
    = _T(\"http://ja.doukaku.org/feeds/comments/\");\n\nint _tmain()\n{\n\tCInternetSession
    session(_T(\"MFC wget\"));\n\tCHttpFile* pFile = (CHttpFile*)session.OpenURL(url);\n\tCString
    line;\n\twhile (pFile-&gt;ReadString(line))\n\t\tfwprintf(stdout, _T(\"%S\"),
    line);\n\n\treturn 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '637'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/637
  :user_name: sumim
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/12 10:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Squeak Smalltalk で、エンコーディングと改行記号の変換も一緒に。</pre>\r\n\t"
  :code: |
    | stream |
    stream := HTTPSocket httpGet: 'http://ja.doukaku.org/feeds/comments/'.
    ^stream contents withSqueakLineEndings convertFromEncoding: 'utf-8'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1712'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1712
  :user_name: tomatsu
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/02 12:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    read(getURL("http://ja.doukaku.org/feeds/comments"))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2577'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2577
  :user_name: すがまさお
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/248/
  :language: Ruby
  :time: 2007/08/28 17:58 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">言及らしいので反応。\r\nとりあえず文字化けは対応したよ！（Windows環境であることを前提に文字コード変換した）\r\nとりあえずOS非依存のために
    NKF は使わない方向で。</pre>\r\n\t"
  :code: |
    require 'net/http'
    require 'kconv'

    response = nil

    Net::HTTP.start('ja.doukaku.org') do |http|
      response = http.get('/feeds/comments/')
    end

    # Windows 環境の場合は SJIS へ
    puts response.body.tosjis
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1352'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1352
  :user_name: shiro
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/07/22 21:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  これだと、transfer-encoding: chunkedで返って来た場合に困りませんか。caller側でやるってことにしても、「chunkedだったかどうか」の情報も返さないとcaller側では判別できないような。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '662'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/662
  :user_name: noeta
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/60/
  :language: PHP
  :time: 2007/07/12 13:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    &lt;?php readfile('http://ja.doukaku.org/feeds/comments/'); ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '705'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/705
  :user_name: shiro
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/07/13 00:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  おやこっちを見落としてた。お題「XMLから情報を取り出す」の方に書いちゃいましたが…\r\n\t"
  :code: |
    (use rfc.http)
    (values-ref (http-get "ja.doukaku.org" "/feeds/comments") 2)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '672'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/672
  :user_name: ココサブ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/07/12 15:47 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  ソケットを使用しているので、一応Windowsでも似たようなコードで動くはず。\r\n\r\nエラー処理していません。\r\nあと、別のアドレスにアクセスしにいっている模様。なんでだろう。\r\n\t"
  :code: |
    #include &lt;sys/types.h&gt;
    #include &lt;sys/socket.h&gt;
    #include &lt;netdb.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    int main()
    {
        char *request = "GET /feeds/comments/ HTTP/1.1\n\n";
        int sockfd;
        struct addrinfo hint;
        struct addrinfo *result;
        char buf[256];
        int size;

        /* アクセスしたいホストの情報を得る */
        memset(&amp;hint, 0, sizeof(hint));
        hint.ai_family = AF_INET;
        hint.ai_socktype = SOCK_STREAM;
        getaddrinfo("http://ja.doukaku.org", "80", &amp;hint, &amp;result);

        /* ソケットを作成し、接続しに行く */
        sockfd = socket(result-&gt;ai_family, result-&gt;ai_socktype, result-&gt;ai_protocol);
        connect(sockfd, result-&gt;ai_addr, result-&gt;ai_addrlen);

        /* リクエストし、返ってくる文字列を表示 */
        write(sockfd, request, strlen(request));
        while (size = read(sockfd, buf, sizeof(buf))) {
            write(1, buf, size);
        }

        close(sockfd);
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7196'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/7196
  :user_name: genzou
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/08/18 11:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    println new URL("http://ja.doukaku.org/feeds/comments/").getText("UTF-8")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '636'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/636
  :user_name: cats
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/07/12 10:28 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  \r\n\t"
  :code: |
    using System;
    using System.Net;
    using System.Text;
    class Program
    {
      static void Main()
      {
        string url = "http://ja.doukaku.org/feeds/comments/";
        WebClient wc = new WebClient();
        byte[] bb = wc.DownloadData(url);
        string s = Encoding.UTF8.GetString(bb);
        Console.WriteLine(s);
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3236'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3236
  :user_name: naranja
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/10/02 16:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Tango を使って。</pre>\r\n\t"
  :code: |
    import tango.io.Stdout;
    import tango.net.http.HttpGet;

    void main(){
        auto page = new HttpGet("http://ja.doukaku.org/feeds/comments/");
        Stdout(cast(char[])page.read).newline;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '650'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/650
  :user_name: kawauchik
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/53/
  :language: 
  :time: 2007/07/12 12:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  fwprintfではなくて_ftprintf だった。キャストも古いほうだ。\r\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3010'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3010
  :user_name: mamamoto
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/437/
  :language: Bash
  :time: 2007/09/14 05:43 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">--enable-net-redirectionsの付いたBash用。\r\n手元のだとFedoraは大丈夫だけどUbuntuのBashはだめでした。</pre>\r\n\t"
  :code: |
    exec 3&lt;&gt; /dev/tcp/ja.doukaku.org/80
    echo -e "GET /feeds/comments/ HTTP/1.1\nHost: ja.doukaku.org\n\n" &gt;&amp;3

    while read l &lt;&amp;3
    do
        echo $l
    done
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '747'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/747
  :user_name: ココサブ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/24/
  :language: 
  :time: 2007/07/13 11:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ありがとうございます。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '654'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/654
  :user_name: 沢渡 みかげ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/101/
  :language: Erlang
  :time: 2007/07/12 13:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">erl -noshell -s httpget httpget -s init stop\r\nのように起動します．</pre>\r\n\t"
  :code: |
    -module(httpget).
    -export([httpget/0]).

    httpget() -&gt;
        {ok, {Status, Header, Body}} = http:request("http://ja.doukaku.org/feeds/comments/"),
        io:format("Status: ~p~nHeader:~n~p~nBody:~n~s~n", [Status, Header, Body]).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1076'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1076
  :user_name: rubikitch
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/18 15:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  cl-curl以外でまともに使えるのが見付からなかったorz\r\n\t"
  :code: |
    (require :curl)
    (in-package :curl)
    (with-connection-returning-string ()
      (set-option :url "http://ja.doukaku.org/feeds/comments/")
      (perform))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3950'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3950
  :user_name: Psychs
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/554/
  :language: Objective
  :time: 2007/11/13 13:11 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">release をちゃんと入れました。</pre>\r\n\t"
  :code: |
    #import &lt;Foundation/Foundation.h&gt;
    #import &lt;Appkit/Appkit.h&gt;

    @interface AppController : NSObject
    {
      NSURLConnection* connection;
    }
    @end

    @implementation AppController

    - (void)dealloc
    {
      if (connection) [connection release];
    }

    - (void)startRequest
    {
      NSURL* url = [NSURL URLWithString:@"http://ja.doukaku.org/feeds/comments/"];
      NSMutableURLRequest* req = [NSMutableURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:30.0];
      [req setHTTPMethod:@"GET"];
      connection = [[NSURLConnection alloc] initWithRequest:req delegate:self];
    }

    - (void)connectionDidFinishLoading:(NSURLConnection*)conn
    {
      [NSApp terminate:self];
    }

    - (void)connection:(NSURLConnection*)conn didFailWithError:(NSError*)err
    {
      NSLog(@"error");
      [NSApp terminate:self];
    }

    - (void)connection:(NSURLConnection*)conn didReceiveData:(NSData*)data
    {
      NSLog([[[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding] autorelease]);
    }

    @end

    int main(int argc, char** argv)
    {
      id pool = [NSAutoreleasePool new];
      [NSApplication sharedApplication];
      id controller = [[[AppController alloc] init] autorelease];
      [controller startRequest];
      [NSApp run];
      [pool release];
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1138'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1138
  :user_name: aplo
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/267/
  :language: PHP
  :time: 2007/07/19 21:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">file_get_contentsよりもセキュアなcurlで取得してみる</pre>\r\n\t"
  :code: |
    &lt;?php
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "http://ja.doukaku.org/feeds/comments/");
    curl_setopt($ch, CURLOPT_HEADER, 0);
    curl_exec($ch);
    curl_close($ch);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '655'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/655
  :user_name: satyri
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/76/
  :language: PHP
  :time: 2007/07/12 13:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">とりあえずお手軽に。</pre>\r\n\t"
  :code: |
    &lt;?php
    $buffer = file_get_contents('http://ja.doukaku.org/feeds/comments/');
    print $buffer;
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '668'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/668
  :user_name: ocean
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/177/
  :language: Java
  :time: 2007/07/12 15:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    import java.io.*;
    import java.net.*;

    class MeApp
    {
        public static void main(String[] args) throws Exception
        {
            final BufferedReader r = new BufferedReader(
                new InputStreamReader(
                    new URL("http://ja.doukaku.org/feeds/comments/").openStream(), "UTF-8"));
            try
            {
                String s;

                while ((s = r.readLine()) != null)
                {
                    System.out.println(s);
                }
            }
            finally
            {
                r.close();
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6589'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/6589
  :user_name: turugina
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/06/25 11:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">unparsed-text() を使って。\r\nよっぽどひねくれた実装でもない限り\r\nGETでとってくると思います。</pre>\r\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      &gt;

      &lt;xsl:output method="text" /&gt;

      &lt;xsl:template match="/" &gt;
        &lt;xsl:value-of select="unparsed-text('http://ja.doukaku.org/feeds/comments/')" /&gt;
      &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '661'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/661
  :user_name: 沢渡 みかげ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/101/
  :language: Mathematica
  :time: 2007/07/12 13:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">普通にImport命令でインポートできます．\r\nただ，形式を指定してあげないといけないのと，RSSのXML解析時にいくつか警告が出るようです．．．</pre>\r\n\t"
  :code: |
    Import["http://ja.doukaku.org/feeds/comments/", "RSS"]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '640'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/640
  :user_name: watta
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/183/
  :language: Perl
  :time: 2007/07/12 10:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    perl -MLWP::Simple -e 'print LWP::Simple::get(shift)' http://ja.doukaku.org/feeds/comments/
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '909'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/909
  :user_name: すがまさお
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/248/
  :language: Ruby
  :time: 2007/07/15 09:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">レスポンスデータはそのまま標準出力に出してます</pre>\r\n\t"
  :code: |
    require 'net/http'

    Net::HTTP.start('ja.doukaku.org') do |http|
      puts http.get('/feeds/coments/')
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3704'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/3704
  :user_name: mtsuyugu
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/04 16:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  curlpp を使用しました。 -lcurlpp を付けてビルドしています。 \r<br>curlpp があれば、おそらく OS には依存しないと思うのですが…。\r\n\t"
  :code: |
    #include &lt;curlpp/cURLpp.hpp&gt;
    #include &lt;curlpp/Easy.hpp&gt;
    #include &lt;curlpp/Options.hpp&gt;
    #include &lt;string&gt;

    std::string content;

    size_t writeMemoryCallback( char *ptr, size_t size, size_t nmemb  ){
       size_t realsize = size * nmemb;
       content.append(  static_cast&lt;const char *&gt;( ptr ), realsize );
       return realsize;
    }

    int main( int argc, char *argv[] ){

       try {
          cURLpp::Cleanup cleaner;
          cURLpp::Easy request;
          request.setOpt( new cURLpp::Options::Url( "http://ja.doukaku.org/feeds/comments/" ) );
          request.setOpt( new cURLpp::Options::WriteFunction(
                          cURLpp::Types::WriteFunctionFunctor( &amp;writeMemoryCallback )));
          request.perform();
       }
       catch ( cURLpp::LogicError &amp; e ) {
          std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
          return 1;
       }
       catch ( cURLpp::RuntimeError &amp; e ) {
          std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
          return 1;
       }
       std::cout &lt;&lt; content &lt;&lt; std::endl;
       return 0;
    }
  :tags: []
  :references:
    :url: /web/20110317020745/http://rrette.com/textpattern/index.php?s=cURLpp
    :title: cURLpp
- :id: '639'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/639
  :user_name: Yuichirou
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/32/
  :language: JavaScript
  :time: 2007/07/12 10:53 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  基本的にどのブラウザ上でも動くはず。無駄にAjax。\r\nなお、しばしばXMLHttpRequestとActiveXObjectの試す順番が逆に記述されているケースがありますが、IE7がXMLHttpRequestに対応したのでこの順の方が適当です。\r\n\r\n\t"
  :code: |
    var url = "http://ja.doukaku.org/feeds/comments/";

    if (XMLHttpRequest) {
      var xhr = new XMLHttpRequest();
    } else if (ActiveXObject) {
      try {
        var xhr = new ActiveXObject("Msxml2.XMLHTTP");
      } catch(e) {
        try {
          var xhr = new ActiveXObject("Microsoft.XMLHTTP");
        } catch(e) {
          var xhr = null;
        }
      }
    } else {
        var xhr = null;
    }

    if (xhr != null) {
      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) {
          document.write(xhr.responseText);
        }
      }
      xhr.open("GET", url, true);
      xhr.send(null);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '648'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/648
  :user_name: id:amachang
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/62/
  :language: 
  :time: 2007/07/12 12:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  うあ。URL も決まってたのね＞＜すみません。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '724'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/724
  :user_name: にしお
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/13 05:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  直しておきました。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1665'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1665
  :user_name: ether
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/96/
  :language: PowerShell
  :time: 2007/08/01 15:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    $wc = new-object net.webclient
    $wc.DownLoadString("http://ja.doukaku.org/feeds/comments/")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2562'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2562
  :user_name: 管理者
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/411/
  :language: 
  :time: 2007/08/28 08:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">言及らしきものがあったのでリンク。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20110317020745/http://d.hatena.ne.jp/deis/20070723/1185160727
    :title: '[Ruby]Proxyサーバを経由してURLをGETする'
- :id: '647'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/647
  :user_name: id:amachang
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/62/
  :language: JavaScript
  :time: 2007/07/12 11:57 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  iframe で\r\n\t"
  :code: |
    document.body.appendChild(document.createElement('iframe')).src='http://google.com';
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2578'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/2578
  :user_name: すがまさお
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/248/
  :language: Ruby
  :time: 2007/08/28 17:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">こっちの方が Ruby っぽいかな。</pre>\r\n\t"
  :code: |
    require 'net/http'
    require 'kconv'

    Net::HTTP.start('ja.doukaku.org') do |http|
      puts http.get('/feeds/comments/').body.tosjis
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '685'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/685
  :user_name: rubikitch
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/12 17:06 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  application/rss+xmlはバイナリとみなされるっぽいorz\r\nだから文字列ではなくてintegerのvectorが返る。\r\n\t"
  :code: |
    (require :drakma)
    (format t "~a" (drakma:http-request "http://ja.doukaku.org/feeds/comments/" :force-binary nil))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '713'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/713
  :user_name: tmty
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/219/
  :language: Ruby
  :time: 2007/07/13 03:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  初投稿です\r\n\t"
  :code: |
    ruby -e 'require "net/http"; require "kconv"; Kconv.toutf8(Net::HTTP.get_print("ja.doukaku.org", "/feeds/comments/"));'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '967'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/967
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/07/16 05:46 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  [低レベルの実装] HTTP用の出来合いのライブラリーを用いない、低レベルの実装です。ソケットを開いて、HTTPリクエストを送って、結果を受け取るだけです。文字コードの処理などは全くしていません。実装に使った言語は
    Perl ですが、どの言語でもほとんど同じ実装になるはずです。\r\n\t"
  :code: |
    use Socket ;
    use FileHandle ;

    print &amp;HTTP_GET ('ja.doukaku.org', 80, '/feeds/comments/', '1.1') ;

    sub HTTP_GET
      {
      local ($host   ) = $_[0] ;
      local ($port   ) = $_[1] ;
      local ($path   ) = $_[2] ;
      local ($version) = $_[3] ;

      local (*handler) ;

      socket (handler, Socket::PF_INET, Socket::SOCK_STREAM, 0) ;

      local ($ip) = &amp;Socket::inet_aton ($host) ;
      connect (handler, &amp;Socket::pack_sockaddr_in ($port, $ip)) ;

      &amp;FileHandle::autoflush (handler, 1) ;

      if ($version eq '1.0')
        {
        print handler "GET $path HTTP/1.0\n" ;
        print handler "\n" ;
        }

      elsif ($version eq '1.1')
        {
        print handler "GET $path HTTP/1.1\n" ;
        print handler "Host: ${host}\n" ;
        print handler "Connection: close\n" ;
        print handler "\n" ;
        }

      local ($responce) = '' ;
      while (&lt;handler&gt;)
        {$responce .= &lt;handler&gt; ;}

      close (handler) ;

      return $responce ;
      }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '643'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/643
  :user_name: 匿名
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/07/12 11:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  すみません、\r\n上コメントは勘違いです。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '715'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/715
  :user_name: tmty
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/219/
  :language: PHP
  :time: 2007/07/13 03:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  PHP CLIで..\r\n\t"
  :code: |
    php -r 'echo file_get_contents("http://ja.doukaku.org/feeds/comments/");'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1148'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/1148
  :user_name: katsu
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/07/20 02:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">SWI-prologのhttpモジュール。\r\n本体とは別にインストールする必要があります。\r\nprolog色付かないなぁ。</pre>\r\n\t"
  :code: |
    :-use_module(library('http/http_client')).
    :-http_get('http://ja.doukaku.org/feeds/comments/',O,[]),writeln(O),halt.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '720'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/720
  :user_name: ココサブ
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/24/
  :language: 
  :time: 2007/07/13 04:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  コピーペースト失敗。\r\n一行一行ごとに不要な空行できてしまった。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9051'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/9051
  :user_name: egtra
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/759/
  :language: XAML
  :time: 2009/06/04 14:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>今回もLoose XAMLではありません、要コンパイルです。OSタグとしてWindowsを付けていないのはわざとです。かといって、Widnows以外でWPFが使える環境も現時点ではないでしょうから、OS非依存も付けられないという中途半端な状態です。ごめんなさい。</p>\n\r\n\t"
  :code: |
    &lt;Window x:Class="WpfApplication1.Window1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="XMLから情報を取り出す"&gt;
        &lt;WebBrowser Source="http://ja.doukaku.org/feeds/comments/"/&gt;
    &lt;/Window&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8953'
  :parent_id: '18'
  :url: http://ja.doukaku.org/comment/8953
  :user_name: pooq
  :user_url: /web/20110317020745/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2009/05/19 12:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    load 'socket'
    coinsert 'jsocket'
    load '~system\examples\socket\socklab.ijs'

    webget 'ja.doukaku.org/feeds/comments/'
  :tags: []
  :references:
    :url: 
    :title: 
