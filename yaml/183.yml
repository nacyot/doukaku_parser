---
:id: '183'
:title: リストの並び
:comments:
- :id: '6421'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6421
  :user_name: coze
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/818/
  :language: 
  :time: 2008/06/03 15:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">数値のリストがあります。リストのサイズは N です。\r\nls[0]がリストの先頭要素、ls[N-1]が最後の要素です。\r\n\r\n問題:
    入力として与えられたリストが次の条件を満たすかどうかを求めてください。\r\n\r\nfor (int i = 0; i &lt; N-1; i++) {\r\n
    \ ls[i] != ls[i+1] である\r\n  ls[i] &lt; ls[i+1] なら、ls[i] &lt; ls[k] である(for all
    k = i+1 to N-1)\r\n  ls[i] &gt; ls[i+1] なら、ls[i] &gt; ls[k] である(for all k = i+1
    to N-1)\r\n}\r\n\r\nN の範囲は 3 &lt;= N &lt;= 50000 です。実行例を示します。\r\n\r\n&gt; check([1,
    5, 4, 2])\r\nTrue\r\n&gt; check([1, 2, 3])\r\nTrue\r\n&gt; check([825, 102, 811,
    140, 812, 125, 263])\r\nFalse\r\n&gt; check([824, 102, 811, 140, 810, 155, 263])\r\nTrue\r\n&gt;
    check([5, 4, 3, 2, 1])\r\nTrue\r\n&gt; check([4, 2, 5, 3, 1])\r\nFalse</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6422'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6422
  :user_name: 匿名
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/06/03 20:16 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>日本語でお願いします。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6424'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6424
  :user_name: lemonade
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/549/
  :language: C
  :time: 2008/06/04 00:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Console.WriteLine(check(new[] { 825, 102, 811, 140, 812, 125, 263
    }));\nFalse</p>\n<p>Console.WriteLine(check(new[] { 824, 102, 811, 140, 810, 155,
    263 }));\nTrue</p>\n\n\t"
  :code: |
    using System;
    using System.Linq;

    class Program
    {
        static void Main()
        {
            Console.WriteLine(check(new[] { 825, 102, 811, 140, 812, 125, 263 }));
            Console.WriteLine(check(new[] { 824, 102, 811, 140, 810, 155, 263 }));
        }

        static bool check(int[] ls)
        {
            if (ls.Count() &lt;= 1)
            {
                return true;
            }
            else if (ls.First() &lt; ls.Skip(1).First())
            {
                return ls.Skip(1).All(n =&gt; ls.First() &lt; n) &amp;&amp; check(ls.Skip(1).ToArray());
            }
            else if (ls.First() &gt; ls.Skip(1).First())
            {
                return ls.Skip(1).All(n =&gt; ls.First() &gt; n) &amp;&amp; check(ls.Skip(1).ToArray());
            }
            else
            {
                return false;
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6426'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6426
  :user_name: sumim
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/06/04 00:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    | check |

    check := [:list |
        (1 to: list size - 1) allSatisfy: [:idx |
            | first second |
            (first := list at: idx) = (second := list at: idx + 1) ifTrue: [false] ifFalse: [
                | sym |
                sym := first &lt; second ifTrue: [#positive] ifFalse: [#negative].
                (list allButFirst: idx) - first allSatisfy: [:each | each perform: sym]]]].


    check value: #(1 5 4 2).                       "=&gt; true "
    check value: #(1 2 3).                         "=&gt; true "
    check value: #(825 102 811 140 812 125 263).   "=&gt; false "
    check value: #(824 102 811 140 810 155 263).   "=&gt; true "
    check value: #(5 4 3 2 1).                     "=&gt; true "
    check value: #(4 2 5 3 1).                     "=&gt; false "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6427'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6427
  :user_name: nobsun
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2008/06/04 03:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import Data.List

    check :: [Int] -&gt; Bool
    check xs = all foo $ tails xs
     where
      foo []     = True
      foo (x:xs) = all (EQ /=) &amp;&amp;&amp; ((1 &gt;=) . length . group) $ map (compare x) xs

    (&amp;&amp;&amp;) :: (a -&gt; Bool) -&gt; (a -&gt; Bool) -&gt; (a -&gt; Bool)
    (p &amp;&amp;&amp; q) x = if p x then q x else False
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6428'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6428
  :user_name: syat
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2008/06/04 06:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>JavaScript＠Firebugコンソールで。少し意訳しました。</p>\n<pre class=\"doctest-block\">\n&gt;&gt;&gt;
    new Array(1,5,4,2).check();\ntrue\n&gt;&gt;&gt; new Array(1,2,3).check();\ntrue\n&gt;&gt;&gt;
    new Array(825,102,811,140,812,125,263).check();\nfalse\n&gt;&gt;&gt; new Array(824,102,811,140,810,155,263).check();\ntrue\n&gt;&gt;&gt;
    new Array(5,4,3,2,1).check();\ntrue\n&gt;&gt;&gt; new Array(4,2,5,3,1).check();\nfalse\n</pre>\n\n\t"
  :code: |
    Array.prototype.check = function() {
      var upper = Number.MAX_VALUE;
      var lower = Number.MIN_VALUE;
      for (var i = 0; i &lt; this.length; i++) {
        if ( (upper &lt;= this[i]) || (this[i] &lt;= lower) )
          return false;
        if (this[i] &lt; this[i+1])
          lower = this[i];
        else
          upper = this[i];
      }
      return true;
    };
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6429'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6429
  :user_name: kozima
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2008/06/04 08:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>書いてみたら意外とすっきり。</p>\n\n\t"
  :code: |
    (defun check (list)
      (loop for (x . xs) on list always
        (or (every (lambda (y) (&lt; x y)) xs) (every (lambda (y) (&gt; x y)) xs))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6430'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6430
  :user_name: kozima
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/164/
  :language: Haskell
  :time: 2008/06/04 08:30 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Haskell の方がきれいに書けますね。</p>\n\n\t"
  :code: |
    import Data.List

    check (x:xs) = (all (&lt; x) xs || all (&gt; x) xs) &amp;&amp; check xs
    check []     = True
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6431'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6431
  :user_name: sna
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/819/
  :language: Scala
  :time: 2008/06/04 08:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  N = 50000 のときの速度を考えて実装。\n\t"
  :code: "object Doukaku183 extends Application {\n  \n  def least   [A &lt;% Ordered[A]](a:
    A, b: A) = if (a &lt; b) a else b\n  def greatest[A &lt;% Ordered[A]](a: A, b:
    A) = if (a &gt; b) a else b\n  \n  def check[A &lt;% Ordered[A]](ls: List[A])
    = {\n    \n    def loop(ls: List[A], min: A, max: A): boolean = ls match {\n      case
    Nil =&gt; true\n      case h :: t =&gt; {\n        if (min &lt;= h &amp;&amp;
    h &lt;= max) false\n        else loop(t, least(min, h), greatest(max, h))\n      }\n
    \   }\n    \n    ls.reverse match {\n      case Nil =&gt; true\n      case h ::
    t =&gt; {\n        loop(t, h, h)\n      }\n    }\n  }\n  \n  \n  {\n    println(check(List(1,
    5, 4, 2)))                        // =&gt; true\n    println(check(List(1, 2,
    3)))                           // =&gt; true\n    println(check(List(825, 102,
    811, 140, 812, 125, 263))) // =&gt; false\n    println(check(List(824, 102, 811,
    140, 810, 155, 263))) // =&gt; true\n    println(check(List(5, 4, 3, 2, 1)))                     //
    =&gt; true\n    println(check(List(4, 2, 5, 3, 1)))                     // =&gt;
    false\n    \n    println(check((1 to 50000).toList))                     // =&gt;
    true\n    println(check(100 :: (1 to 49999).toList))              // =&gt; false\n
    \ }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6432'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6432
  :user_name: sna
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/819/
  :language: 
  :time: 2008/06/04 08:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Number.MIN_VALUE = 5e-324\r\nなので、0以下の数値を含んでいると失敗しませんか。\r\n\r\n&gt;&gt;&gt;
    new Array(0, 1, 2).check();\r\nfalse</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6433'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6433
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2008/06/04 09:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import Maybe

    check [] = True
    check xs = isJust $ check' $ reverse xs  where
      check' (x:xs) = foldl (\b x -&gt; b &gt;&gt;= f x) (Just(x,x)) xs
      f x (l,h) | x &lt; l = Just (x,h)
                | x &gt; h = Just (l,x)
                | otherwise = Nothing
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6437'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6437
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2008/06/04 16:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">-∞ と ∞ と foldr を使って書き直し。</pre>\n\t"
  :code: "import Maybe\n\ndata Z = NegInf | Finite Integer | PosInf deriving (Eq,Ord)\n
    \ncheck xs = isJust $ foldr ((=&lt;&lt;).f.Finite) (Just(PosInf,NegInf)) xs  where
    \n  f x (l,h) | l &lt;= x &amp;&amp; x &lt;= h = Nothing\n            | otherwise
    \       = Just (min x l, max x h)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6438'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6438
  :user_name: syat
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2008/06/04 23:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ナイスツッコミ！\r<br>語感にやられました。（それをMIN_VALUEと言うか・・・。）\r<br>無限大に直してみました。\r<br><br>&gt;&gt;&gt; new Array(0, 1, 2).check();\r<br>true\n\t"
  :code: |
    &lt;  var upper = Number.MAX_VALUE;
    &lt;  var lower = Number.MIN_VALUE;
    ---
    &gt;  var upper = Number.POSITIVE_INFINITY;
    &gt;  var lower = Number.NEGATIVE_INFINITY;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6439'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6439
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/304/
  :language: diff
  :time: 2008/06/05 02:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">整数しかこないつもりでいました。一般の型に修正。</pre>\n\t"
  :code: |
    &gt; data Z = NegInf | Finite Integer | PosInf deriving (Eq,Ord)
    ---
    &gt; data N a = NegInf | Finite a | PosInf deriving (Eq,Ord)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6454'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6454
  :user_name: susu
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/06/09 10:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "let rec check = function\n  | [] -&gt; true\n  | hd::[] -&gt; true\n  |
    x::y::tl -&gt;\n      if (x!=y) &amp;&amp; \n        ((x&lt;y &amp;&amp; List.for_all
    ((&lt;) x) tl) || \n         (x&gt;y &amp;&amp; List.for_all ((&gt;) x) tl))\n
    \     then check (y::tl) else false;;\n(*\n  Array.map check [|\n    [1; 5; 4;
    2];\n    [1; 2; 3];\n    [825; 102; 811; 140; 812; 125; 263];\n    [824; 102;
    811; 140; 810; 155; 263];\n    [5; 4; 3; 2; 1];\n    [4; 2; 5; 3; 1];\n  |];;\n*)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6758'
  :parent_id: '183'
  :url: http://ja.doukaku.org/comment/6758
  :user_name: leque
  :user_url: /web/20081121131931/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/07/17 05:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    (use srfi-1)

    (define (main args)
      (print
       (let loop ((xs (map string-&gt;number (cdr args))))
         (or (null? xs)
             (null? (cdr xs))
             (let ((a (car xs))
                   (b (cadr xs)))
               (and (not (= a b))
                    (every (cute (if (&lt; a b) &lt; &gt;) a &lt;&gt;) (cddr xs))
                    (loop (cdr xs)))))))
      0)
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
