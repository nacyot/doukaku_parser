---
:id: '70'
:title: 文字列の反転(括弧の対応を保存)
:comments:
- :id: '3450'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3450
  :user_name: nobsun
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/10/18 06:13 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">与えられた文字列を前後反転する関数 reverseString2 を書いてください。\r\nただし、reverseString2
    は単純に文字列を反転するのではなく、括弧の対応\r\nを保存するようにしてください。\r\n\r\n以前のお題で作成した単純に与えられた文字列を単純に前後反転したもの返す\r\nreverseString
    では\r\n\r\n  reverseString(\"文字列(もじれつ)の反転(はんてん)\") \r\n    → \")んてんは(転反の)つれじも(列字文\"\r\n\r\nのように括弧の対応は保存されませんが、reverseString2
    では\r\n\r\n  reverseString2(\"文字列(もじれつ)の反転(はんてん)\")\r\n    → \"(んてんは)転反の(つれじも)列字文\"\r\n\r\nのように括弧の対応が保存されます。\r\n括弧文字は、'('と')'、'{'と'}'、'['と']'で、それぞれASCII文字と仮定し\r\nてください。\r\n\r\n
    \ reverseString2(\"対応[の{とれている(さまざまな)括弧}の(例)]です。\")\r\n    → \"。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対\"\r\n\r\n入力文字列では対応の取れている括弧の内側には対応の取れない括弧文字はな\r\nいと解釈してください。たとえば、\r\n\r\n
    \ reverseString2(\"これ(は(対応のとれていない)括弧がある例です。\")\r\n    → \"。すで例るあが弧括(いないてれとの応対)は(れこ\"\r\n\r\n次のような場合は対応のとれている括弧はないという解釈になります。\r\n\r\n
    \ reverseString2(\"これ(も{対応の)とれていない}括弧の例です\")\r\n    → \"。すで例の弧括}いないてれと)の応対{も(れこ\"\r\n\r\n日本語対応にする場合の文字のエンコーディングは実装側で都合のよいように\r\n仮定してください。日本語対応であることは望ましいですが、必須ではありま\r\nせん。
    \r\n\r\n---\r\nこのお題はnobsunさんに投稿いただきました。ご協力ありがとうございます。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3504'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3504
  :user_name: dpp
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/433/
  :language: Python
  :time: 2007/10/23 07:01 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">エレガントでない気もしますが一応例示された通りの変換ができます。\r\n\r\n＞reverseString2(\"これ(も{対応の)とれていない}括弧の例です\")\r\n＞　→
    \"。すで例の弧括}いないてれと)の応対{も(れこ\"\r\n句点が抜けてますね。</pre>\n\t"
  :code: "# coding: shift_jis\r\n\r\ndef reverseString2(s, coding = 'shift_jis'):\r\n
    \   s = list(unicode(s, coding))\r\n    length = len(s)\r\n    stack = []\r\n
    \   pairs = []\r\n    dic = {')': '(', '}': '{', ']': '['}\r\n    \r\n    # 対応する括弧をリストアップ\r\n
    \   for i, c in enumerate(s):\r\n        if stack and dic.get(c, '') == stack[-1][1]:\r\n
    \           pairs.append((stack[-1][0], i))\r\n            stack.pop()\r\n        elif
    c in '({[':\r\n            stack.append((i, c))\r\n    \r\n    s = s[::-1]\r\n
    \   \r\n    for start, end in pairs:\r\n        start, end = length - start -
    1, length - end - 1\r\n        s[start], s[end] = s[end], s[start]\r\n    \r\n
    \   return ''.join(s).encode(coding)\r\n\r\ndef test(s, answer):\r\n    s = reverseString2(s)\r\n
    \   print (s == answer) and 'ok!' or s\r\n\r\nif __name__ == '__main__':\r\n    test(\"文字列(もじれつ)の反転(はんてん)\",
    \"(んてんは)転反の(つれじも)列字文\")\r\n    test(\"対応[の{とれている(さまざまな)括弧}の(例)]です。\", \"。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対\")\r\n
    \   test(\"これ(は(対応のとれていない)括弧がある例です。\", \"。すで例るあが弧括(いないてれとの応対)は(れこ\")\r\n    test(\"これ(も{対応の)とれていない}括弧の例です。\",
    \ \"。すで例の弧括}いないてれと)の応対{も(れこ\")\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3505'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3505
  :user_name: matyr
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/10/23 17:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t   似た問題があなごるにありましたね。 \n\t"
  :code: |
    function reverseString2($){
      var p = '([{（［｛)]}）］｝', n = p.length / 2, s = [], i = -1, x, t;
      for($ = $.toString().split(''); $[++i];) if(~(x = p.indexOf($[i])))
        if(x &lt; n) s.push({ x: x + n, i: i });
        else if((t = s.pop()) &amp;&amp; t.x == x) $[t.i] = p.charAt(x), $[i] = p.charAt(x - n);
      return $.reverse().join('');
    }
  :tags: []
  :references:
    :url: /web/20081202124324/http://golf.shinh.org/p.rb?Mirroring+Character
    :title: anarchy golf - Mirroring Characters
- :id: '3506'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3506
  :user_name: katsu
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/117/
  :language: Scheme
  :time: 2007/10/23 17:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">(cons x knil)のあたりが汚いので、もうちょっと何とかなるとは思うのですが…\r\n実行結果：\r\n(んてんは)転反の(つれじも)列字文\r\n。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対\r\n。すで例るあが弧括(いないてれとの応対)は(れこ\r\nすで例の弧括}いないてれと)の応対{も(れこ\r\n</pre>\n\t"
  :code: |
    (use text.tree)

    (define parens '((#\) . #\() (#\} . #\{) (#\] . #\[)))
    (define openp (append (map car parens) (map cdr parens)))

    (define (spl x l)
      (cond ((null? l) (values #f #f))
            ((eqv? x (car l)) (values () (cdr l)))
            ((memv (car l) openp) (values #f #f))
            (else (receive (head tail) (spl x (cdr l))
                        (values (if head (cons (car l) head) #f) tail)))))

    (define (reverse-string2 l)
      (tree-&gt;string
        (fold (lambda (x knil)
                (cond ((assv x parens) =&gt;
                       (lambda (pair)
                         (cond ((spl (cdr pair) knil)
                                (lambda (x _) x)
                                =&gt; (lambda (body rest)
                                     (cons `(,(cdr pair) ,@body ,(car pair)) rest)))
                               (else (cons x knil)))))
                      (else (cons x knil))))
              () (string-&gt;list l))))

    (for-each (compose print reverse-string2)
              '("文字列(もじれつ)の反転(はんてん)"
                "対応[の{とれている(さまざまな)括弧}の(例)]です。"
                "これ(は(対応のとれていない)括弧がある例です。"
                "これ(も{対応の)とれていない}括弧の例です"))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3507'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3507
  :user_name: sumim
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/10/24 00:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\n\t"
  :code: |
    | parentheses reverseString2 offset |
    parentheses := '({[)}]'.
    offset := parentheses size // 2.
    reverseString2 := [:str |
        | marks |
        marks := OrderedCollection new.
        str copy doWithIndex: [:chr :idx |
            | type |
            type := parentheses indexOf: chr.
            type &gt; offset ifFalse: [type &gt; 0 ifTrue: [marks add: idx; add: type]] ifTrue: [
                (marks notEmpty and: [marks removeLast + offset = type])
                    ifTrue: [str swap: idx with: marks removeLast]
                    ifFalse: [marks removeLast]]].
        str reversed].

    reverseString2 value: '文字列(もじれつ)の反転(はんてん)'.
       "=&gt; '(んてんは)転反の(つれじも)列字文' "
    reverseString2 value: '対応[の{とれている(さまざまな)括弧}の(例)]です。'.
       "=&gt; '。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対' "
    reverseString2 value: 'これ(は(対応のとれていない)括弧がある例です。'.
       "=&gt; '。すで例るあが弧括(いないてれとの応対)は(れこ' "
    reverseString2 value: 'これ(も{対応の)とれていない}括弧の例です。'.
       "=&gt; '。すで例の弧括}いないてれと)の応対{も(れこ' "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '3508'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3508
  :user_name: mamamoto
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/437/
  :language: Ruby
  :time: 2007/10/24 03:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">全般に無難なコードとおもいますが\r\nstk.popのところはちょっと感じ悪いかも。\r\nつーかelsifでいろいろやりすぎ感がいやなのかなあ。</pre>\n\t"
  :code: |
    K = [['(', ')'], ['[', ']'], ['{', '}']]
    OPN, CLS = K.transpose

    def reverseString2(org)
      str = org.split(//)
      stk = []

      str.each_with_index{|c, i|
        if ki = OPN.index(c)
          stk.push([i, ki])
        elsif ki = CLS.index(c) and (j, kj = stk.pop) and ki == kj
          str[j] = CLS[ki]
          str[i] = OPN[kj]
        end
      }

      str.reverse.join
    end

    if __FILE__ == $0
      def test(a,b)
        p a, reverseString2(a), b, reverseString2(a) == b
      end

      test("文字列(もじれつ)の反転(はんてん)", "(んてんは)転反の(つれじも)列字文")
      test("対応[の{とれている(さまざまな)括弧}の(例)]です。", "。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対")
      test("これ(は(対応のとれていない)括弧がある例です。", "。すで例るあが弧括(いないてれとの応対)は(れこ")
      test("これ(も{対応の)とれていない}括弧の例です。",  "。すで例の弧括}いないてれと)の応対{も(れこ")
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3510'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3510
  :user_name: tsuwabuki
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/479/
  :language: Haskell
  :time: 2007/10/24 06:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">もっときれいに書けそうな気がします。</pre>\n\t"
  :code: "reverseString2 :: String -&gt; String\r\nreverseString2 str = let (e, s)
    = foldl f ([],[]) str in foldl (\\s1 (s2,c) -&gt; s2++c:s1) s e\r\n    where f
    (e, s) c\r\n              | c `elem` \"({[\" = (([], c):e, s)\r\n              |
    c `elem` \")}]\" = case e of\r\n                                   (es1, p1):(es2,
    p2):rest\r\n                                        | c == opposite p1 -&gt; ((p1:es1++c:es2,
    p2):rest, s)\r\n                                        | otherwise -&gt; ((c:es1++p1:es2,
    p2):rest, s)\r\n                                   [(es, p)]\r\n                                       |
    c == opposite p -&gt; ([], p:es++c:s)\r\n                                       |
    otherwise -&gt; ([], c:es++p:s)\r\n                                   [] -&gt;
    (e, c:s)\r\n              | otherwise = case e of\r\n                              (es,
    p):rest -&gt; ((c:es, p):rest, s)\r\n                              otherwise    -&gt;
    (e, c:s)\r\n          opposite '(' = ')'\r\n          opposite ')' = '('\r\n          opposite
    '{' = '}'\r\n          opposite '}' = '{'\r\n          opposite '[' = ']'\r\n
    \         opposite ']' = '['\r\n          opposite c = c\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3511'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3511
  :user_name: shiro
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/41/
  :language: Haskell
  :time: 2007/10/24 07:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Haskell練習中。\r\nあまり美しくないなあ。\r\nghciで日本語はどう使うのかなあ。\r\n\r\n実行例\r\n*Main&gt;
    reverseString2 \"mojiretsu(MOJIRETSU) no hanten(HANTEN).\"\r\n\".(NETNAH)netnah
    on (USTERIJOM)usterijom\"\r\n*Main&gt; reverseString2 \"taiou[no{toreteiru(samazamana)kakko}no(rei)]desu.\"\r\n\".used[(ier)on{okkak(anamazamas)urieterot}on]uoiat\"\r\n*Main&gt;
    reverseString2 \"kore(ha(taiounotoreteinai)kakkonoarureidesu.\"\r\n\".usedieruraonokkak(ianieterotonuoiat)ah(erok\"\r\n*Main&gt;
    reverseString2 \"kore(mo{taiouno)toreteinai}kakkonoreidesu.\"\r\n\".usedieronokkak}ianieterot)onuoiat{om(erok\"\r\n</pre>\n\t"
  :code: |
    parens = [('(',')'), ('[',']'), ('{','}')]

    isOpener c = elem c $ map fst parens
    isCloser c = elem c $ map snd parens

    closer p = case lookup p parens of
                 Just q -&gt; q
                 Nothing -&gt; error "huh?"

    revs [] rs zs = ([],rs++zs)
    revs (x:xs) rs zs
      | isOpener x = case revs xs [] [x] of
                       (xs',rs') -&gt; revs xs' (rs'++rs) zs
      | isCloser x = case zs of
                       [z] | x == closer z -&gt; (xs, [z]++rs++[x])
                       _                   -&gt; (xs, [x]++rs++zs)
      | otherwise  = revs xs (x:rs) zs

    reverseString2 s = snd $ revs s [] []
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3512'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3512
  :user_name: yohei
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/10/24 08:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "using System;\nusing System.Text;\nusing System.Collections.Generic;\n\nclass
    Program {\n    static string reverseString2(string s) {\n        Stack&lt;string&gt;
    stack = new Stack&lt;string&gt;();\n        StringBuilder sb = new StringBuilder(s.Length);\n
    \       string paren = \"()[]{}\";\n        \n        foreach (char ch in s) {\n
    \           int index = paren.IndexOf(ch);\n            if (index &lt; 0) {                //
    other\n                sb.Insert(0, ch);\n            } else if (index % 2 ==
    0) {    // ([{\n                stack.Push(sb.ToString());\n                stack.Push(ch.ToString());\n
    \               sb.Remove(0, sb.Length);\n            } else {                        //
    )]}\n                if (stack.Count == 0) {\n                  sb.Insert(0, ch);\n
    \               } else if (stack.Peek() == paren.Substring(index - 1, 1)) {\n
    \                   sb.Insert(0, stack.Pop()).Append(ch);\n                    if
    (stack.Count &gt; 0) sb.Append(stack.Pop());\n                } else {\n                    sb.Insert(0,
    ch);\n                    while (stack.Count &gt; 0) sb.Append(stack.Pop());\n
    \               }\n            }\n        }\n        while (stack.Count &gt; 0)
    sb.Append(stack.Pop());\n        \n        return sb.ToString();\n    }\n    static
    void Main(string[] args) {\n        Console.WriteLine(reverseString2(\"文字列(もじれつ)の反転(はんてん)\"));\n
    \       Console.WriteLine(reverseString2(\"対応[の{とれている(さまざまな)括弧}の(例)]です。\"));\n
    \       Console.WriteLine(reverseString2(\"これ(は(対応のとれていない)括弧がある例です。\"));\n        Console.WriteLine(reverseString2(\"これ(も{対応の)とれていない}括弧の例です\"));\n
    \   }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3513'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3513
  :user_name: nobsun
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/10/24 08:37 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <pre class=\"compact\">ghcで日本語を正しく扱うには，いまのところ入出力の際に UTF8 &lt;-&gt;
    内部コード\r\nという変換をする必要があります．この変換を行うモジュールは以前自前で書いた\r\nことがあるのですが，今は Hackage DB に登録されています．\r\n\r\nhttp://hackage.haskell.org/cgi-bin/hackage-scripts/package/utf8-string-0.2\r\n\r\nインストール手順は以下のとおりです．\r\n\r\n$
    wget http://hackage.haskell.org/packages/archive/utf8-string/0.2/utf8-string-0.2.tar.gz\r\n$
    tar xf utf8-string-0.2.tar.gz\r\n$ cd utf8-string-0.2\r\n$ runhaskell Setup.lhs
    configure\r\n$ runhaskell Setup.lhs build\r\n$ sudo runhaskell Setup.lhs install\r\n\r\nこれで
    Codec.Binary.UTF8.String と System.IO.UTF8 モジュールが使えるように\r\nなります．\r\n\r\n$ ghc-pkg
    -l | grep utf8 \r\n\r\nとやるとこのパッケージがインストールされたかどうか確認できます．\r\nghci には直接 UTF8 の文字列リテラルを入力できない(orz)ので，ソースコードに\r\n定数として仕込んでおく必要があります．ソースコードのエンコーディングを\r\nUTF8
    にして\r\n\r\nsample0 = \"文字列(もじれつ)の反転(はんてん)\"\r\nsample1 = \"対応[の{とれている(さまざまな)括弧}の(例)]です。\"\r\nsample2
    = \"これ(は(対応のとれてない)括弧がある例です。\"\r\nsample3 = \"これ(も{対応の)とれていない}括弧の例です。\"\r\n\r\nというのをソースコード(3511.hs)にいれておきますそうしておいて，\r\n-
    ghci を起動．\r\n- System.IO.UTF8 を追加．\r\n- 出力用 wrapper を追加．\r\n- wrapper をつかって結果を表示\r\n\r\n$
    ghci -v0 3511.hs\r\n*Main&gt; :m + System.IO.UTF8\r\n*Main System.IO.UTF8&gt;
    let wrapper = (System.IO.UTF8.putStrLn .)\r\n*Main System.IO.UTF8&gt; wrapper
    reverseString2 sample0\r\n(んてんは)転反の(つれじも)列字文\r\n*Main System.IO.UTF8&gt; wrapper
    reverseString2 sample1\r\n。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対\r\n*Main System.IO.UTF8&gt;
    wrapper reverseString2 sample2\r\n。すで例るあが弧括(いなてれとの応対)は(れこ\r\n*Main System.IO.UTF8&gt;
    wrapper reverseString2 sample3\r\n。すで例の弧括}いないてれと)の応対{も(れこ\r\n\r\nああ面倒 ^^;\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3514'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3514
  :user_name: matarillo
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/136/
  :language: C
  :time: 2007/10/24 09:00 GMT
  :vote_count: '3'
  :vote_score: '-3'
  :body: "\n\t  <pre class=\"compact\">意図は通じると思いますが</pre>\n\t"
  :code: |
    public static string ReverseString2(string input)
    {
      if (input == null)
        return null;
      char[] buffer = new char[input.Length];
      int sl = (int)'('; // 40
      int sr = (int)')'; // 41
      int ml = (int)'{'; // 123
      int mr = (int)'}'; // 125
      int ll = (int)'['; // 91
      int lr = (int)']'; // 93
      for (int i = 0; i &lt; buffer.Length; i++)
      {
        int c = (int)input[i];
        if (c == sl || c == sr)
          c = sl + sr - c;
        else if (c == ml || c == mr)
          c = ml + mr - c;
        else if (c == ll || c == lr)
          c = ll + lr - c;
        buffer[buffer.Length - 1 - i] = (char)c;
      }
      return new string(buffer);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3515'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3515
  :user_name: matarillo
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/136/
  :language: 
  :time: 2007/10/24 09:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">おっと、これだと対応が取れていないときの動作が不正ですね。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3516'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3516
  :user_name: nobsun
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/10/24 12:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「鶏を割くに牛刀をもってす」の感はありますが，\r\nパーザを構成してしまうという手もあります．\r\n</pre>\n\t"
  :code: "import qualified System.IO.UTF8 as U\nimport Text.ParserCombinators.ReadP\n\ndata
    Kakko = Maru | Nami | Kaku\n\ndata Inline = Plain String\n            | Paren
    Kakko [Inline]\n\npPlain  = do { s &lt;- many1 $ satisfy (flip notElem \"(){}[]\");
    return (Plain s)}\n\npMaru = do { char '('; is &lt;- many pInline; char ')'; return
    (Paren Maru is) }\npNami = do { char '{'; is &lt;- many pInline; char '}'; return
    (Paren Nami is) }\npKaku = do { char '['; is &lt;- many pInline; char ']'; return
    (Paren Kaku is) }\n\npParen = pMaru +++ pNami +++ pKaku\npInline = pPlain +++
    pParen\n\npInlines =   many1 (pPlain +++ pParen)\n         +++ do { c  &lt;- satisfy
    (const True)\n                ; is &lt;- pInlines\n                ; return (Plain
    [c] : is)\n                }\n\nrevInline (Plain s) = Plain (reverse s)\nrevInline
    (Paren k is) = Paren k (foldl ((. revInline) . flip (:)) [] is)\n\ninstance Show
    Inline where\n  show (Plain s) = s\n  show (Paren k is) = case k of\n                         Maru
    -&gt; '(':(concatMap show is)++\")\"\n                         Nami -&gt; '{':(concatMap
    show is)++\"}\"\n                         Kaku -&gt; '[':(concatMap show is)++\"]\"\n\nreverseString2
    = concatMap show \n               . reverse \n               . map revInline \n
    \              . fst \n               . head \n               . filter (null .
    snd) \n               . readP_to_S pInlines\n\nsample0 = \"文字列(もじれつ)の反転(はんてん)\"\nsample1
    = \"対応[の{とれている(さまざまな)括弧}の(例)]です。\"\nsample2 = \"これ(は(対応のとれてない)括弧がある例です。\"\nsample3
    = \"これ(も{対応の)とれていない}括弧の例です。\"\n\n{-\n*Main&gt; U.putStrLn $ reverseString2 $ sample0\n(んてんは)転反の(つれじも)列字文\n*Main&gt;
    U.putStrLn $ reverseString2 $ sample1\n。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対\n*Main&gt;
    U.putStrLn $ reverseString2 $ sample2\n。すで例るあが弧括(いなてれとの応対)は(れこ\n*Main&gt; U.putStrLn
    $ reverseString2 $ sample3\n。すで例の弧括}いないてれと)の応対{も(れこ\n-}\n"
  :tags:
  - Text.ParserCombinators.ReadP
  :references:
    :url: 
    :title: 
- :id: '3520'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3520
  :user_name: yuin
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/10/25 12:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    def reverseString2(str:String) = {
      val bras = "()[]{}"
      ((List[(int,int)](), new StringBuilder(str)) /: str.toList.zipWithIndex){
        case ((stk, sb), (c, i)) =&gt; bras.indexOf(c) match {
          case -1 =&gt; (stk, sb)
          case bi  =&gt; bi&amp;1 match {
            case 0 =&gt; ((i,bi^1)::stk,sb)
            case _ =&gt;
              for((j,bj) &lt;- List(stk.head) if bj == bi) {
                sb.update(j, bras(bi))
                sb.update(i, bras(bj^1))
              }
              (stk.tail, sb)
          }
        }
      }._2.reverse.mkString
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3521'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3521
  :user_name: kozima
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/10/25 14:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">とりあえずそのままひっくり返して、対応してた括弧は後で入れ換え。</pre>\n\t"
  :code: |
    (defun reverse-string2 (string)
      (loop with str = (reverse string) and stack
        for c across str and i from 0
        do (case c
             ((#\) #\] #\}) (push (cons c i) stack))
             ((#\( #\[ #\{)
              (if (eql (caar stack) (elt ")]}" (position c "([{")))
                  (progn
                    (rotatef (elt str i) (elt str (cdar stack)))
                    (setf stack (cdr stack)))
                (setf stack ()))))
        finally (return str)))

    ;;; test
    (defun test (s1 s2)
      (format t "~:[NG~;OK~]~%" (string= (reverse-string2 s1) s2)))
    (mapc #'test
          '("文字列(もじれつ)の反転(はんてん)"
            "対応[の{とれている(さまざまな)括弧}の(例)]です。"
            "これ(は(対応のとれていない)括弧がある例です。"
            "これ(も{対応の)とれていない}括弧の例です。")
          '("(んてんは)転反の(つれじも)列字文"
            "。すで[(例)の{弧括(なまざまさ)るいてれと}の]応対"
            "。すで例るあが弧括(いないてれとの応対)は(れこ"
            "。すで例の弧括}いないてれと)の応対{も(れこ"))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3529'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3529
  :user_name: dpp
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/433/
  :language: Python
  :time: 2007/10/26 08:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">投稿する場所間違えるわ、張りなおした際に間違えたコード張るわ、\r\n括弧の交換を後でやる意味が無いわと散々でした。自分慌てすぎ。\r\n以降はもっと落ち着いて投稿したいと思います･･･</pre>\n\t"
  :code: "def reverseString2(s, coding = 'shift_jis'):\n    s = list(unicode(s, coding))\n
    \   stack = []\n    dic = {')': '(', '}': '{', ']': '['}\n    \n    for i, c in
    enumerate(s):\n        if stack and dic.get(c, '') == stack[-1][1]:\n            s[stack[-1][0]],
    s[i] = s[i], s[stack[-1][0]]\n            stack.pop()\n        elif c in '(){}[]':\n
    \           stack.append((i, c))\n    \n    return ''.join(s[::-1]).encode(coding)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3537'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3537
  :user_name: walf443
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/349/
  :language: Ruby
  :time: 2007/10/27 08:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">自動で括弧の対応にマッチしてくれるライブラリはあると結構便利かもしれないと感じました。(括弧の対応はもちろんカスタマイズ可能)
    。探せば既にあるような気もするけど</pre>\n\t"
  :code: "def reverse_string2 str\n  match_pairs = {\n    '(' =&gt; ')',\n    '{'
    =&gt; '}',\n    '[' =&gt; ']',\n  }\n\n  match_pairs.each do |key,val|\n    str
    = str.gsub(/(#{Regexp.escape(key)})([^#{Regexp.escape(key)}]*?)(#{Regexp.escape(val)})/)
    {|str| \"#{$3}#{$2}#{$1}\" };\n  end\n\n  str.split(//).reverse.join\nend\n\nif
    $PROGRAM_NAME == __FILE__\n  $KCODE = 'u'\n  require 'rubygems'\n  require 'spec'\n\n
    \ describe \"reverse_string2\" do\n    it \"は文字列を反転させること\" do\n      reverse_string2(\"文字列の反転\").should
    == \"転反の列字文\"\n    end\n\n    it \"は()の対応を保存すること\" do\n      reverse_string2(\"文字列(もじれつ)の反転(はんてん)\").should
    == \"(んてんは)転反の(つれじも)列字文\"\n    end\n    it \"は{}の対応を保存すること\" do\n      reverse_string2(\"文字列{もじれつ}の反転{はんてん}\").should
    == \n      \"{んてんは}転反の{つれじも}列字文\"\n    end\n    it \"は[]の対応を保存すること\" do\n      reverse_string2(\"文字列[もじれつ]の反転[はんてん]\").should
    == \"[んてんは]転反の[つれじも]列字文\"\n    end\n    it \"対応の取れている括弧にのみ対応すること\" do\n      reverse_string2(\"これ(は(対応のとれていない)括弧がある例です。\").should
    == \"。すで例るあが弧括(いないてれとの応対)は(れこ\"\n    end\n  end\nend\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3538'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3538
  :user_name: walf443
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/349/
  :language: 
  :time: 2007/10/27 08:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ネストした括弧に対応してない模様\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3564'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3564
  :user_name: mtsuyugu
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/10/29 15:12 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">初投稿です。Cで書いてみました。日本語は未対応です。</pre>\n\t"
  :code: |
    char *reverse_string2( char *str, int length ){
       char *now = str;
       int len = length;
       int i=0;
       char **sp, *p;
       sp = (char **) malloc( length * sizeof( char * ));

       if( !sp || !now ){
          return NULL;
       }

       for(; *str &amp;&amp; len--; now++ ){
          if( *now == '(' ) sp[i++] = now;
          else if( *now == '{' ) sp[i++] = now;
          else if( *now == '[' ) sp[i++] = now;
          else if( ( *now == ')' &amp;&amp; i &amp;&amp; *sp[i-1] == '(' &amp;&amp; i-- )
                || ( *now == '}' &amp;&amp; i &amp;&amp; *sp[i-1] == '{' &amp;&amp; i-- )
                || ( *now == ']' &amp;&amp; i &amp;&amp; *sp[i-1] == '[' &amp;&amp; i-- ))
          {
             (p = strchr("()",*sp[i])) || (p = strchr("{}",*sp[i])) || (p = strchr("[]",*sp[i]));
             *sp[i] = *(p+1);
             (p = strchr(")(",*now)) || (p = strchr("}{",*now)) || (p = strchr("][",*now));
             *now = *(p+1);
          }
       }
       free( sp );
       return reverse_string( str, length );
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3599'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3599
  :user_name: mtsuyugu
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/10/30 11:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">for ループの中を改良しました。</pre>\n\t"
  :code: |2
       for(; *str &amp;&amp; len--; now++ ){
          if( *now == '(' || *now== '{' || *now == '[' ) sp[i++] = now;
          else if( ( *now == ')' &amp;&amp; i &amp;&amp; *sp[i-1] == '(' &amp;&amp; (*sp[--i] = ')') &amp;&amp; (*now = '(') )
                || ( *now == '}' &amp;&amp; i &amp;&amp; *sp[i-1] == '{' &amp;&amp; (*sp[--i] = '}') &amp;&amp; (*now = '{') )
                || ( *now == ']' &amp;&amp; i &amp;&amp; *sp[i-1] == '[' &amp;&amp; (*sp[--i] = ']') &amp;&amp; (*now = '[') ) ){}
       }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3620'
  :parent_id: '70'
  :url: http://ja.doukaku.org/comment/3620
  :user_name: Otter
  :user_url: /web/20081202124324/http://ja.doukaku.org/user/497/
  :language: Haskell
  :time: 2007/10/31 05:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">一本の再帰呼び出しのパスで処理を終わらせられるように考えてみました。行きで閉じ括弧、帰りでひらき括弧の処理をしています。</pre>\n\t"
  :code: "type Paren = Char\ntype ParenStack = [Paren]\n\nreverseString2 :: String
    -&gt; String\nreverseString2 str = fst $ reverseStrParen (str, [])\n\nreverseStrParen
    :: (String, ParenStack) -&gt; (String, ParenStack)\nreverseStrParen ([],  _)        =
    ([], [])\nreverseStrParen (x:[], stkOpen) = ([flipParenIfMatch x stkOpen], pushCloseParen
    x [])\nreverseStrParen (x:xs, stkOpen) = \n            (reverseRest ++ [flipParen2Way
    x stkOpen stkClose], pushCloseParen x stkClose)\n        where\n        (reverseRest,
    stkClose) = reverseStrParen (xs ,pushOpenParen x stkOpen)\n\nflipParen2Way ::
    Char -&gt; ParenStack -&gt; ParenStack -&gt; Char\nflipParen2Way x stkOpen stkClose\n
    \   | isOpening x = flipParenIfMatch x stkClose\n    | isClosing x = flipParenIfMatch
    x stkOpen\n    | otherwise   = x\n\nflipParenIfMatch :: Char -&gt; ParenStack
    -&gt; Char\nflipParenIfMatch x [] = x\nflipParenIfMatch x (y:_)\n    | isOpposit
    x y = y\n    | otherwise = x\n\npushCloseParen :: Paren -&gt; ParenStack -&gt;
    P\n\n\n\n\n<!--\n     FILE ARCHIVED ON 12:43:24 Dec 2, 2008 AND RETRIEVED FROM
    THE\n     INTERNET ARCHIVE ON 13:38:44 Nov 16, 2013.\n     JAVASCRIPT APPENDED
    BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.\n\n     ALL OTHER CONTENT MAY
    ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.\n     SECTION 108(a)(3)).\n-->"
  :tags: []
  :references:
    :url: 
    :title: 
