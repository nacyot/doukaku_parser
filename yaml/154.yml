---
:id: '154'
:title: 情報オリンピック2007年度世界大会「帆」
:comments:
- :id: '5755'
  :parent_id: '154'
  :url: http://ja.doukaku.org/comment/5755
  :user_name: yukoba
  :user_url: /web/20081122160840/http://ja.doukaku.org/user/689/
  :language: 
  :time: 2008/02/15 04:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>中高生向けの情報オリンピックの世界大会2007年度の第1日目「帆」です。コンテストは2日間にて行われます。クロアチアにて開催されました。</p>\n<ul
    class=\"simple\">\n<li>問題文： <a class=\"reference\" href=\"/web/20081122160840/http://www.ioi-jp.org/ioi/2007/problem/day1/sails-prob-j.pdf\">http://www.ioi-jp.org/ioi/2007/problem/day1/sails-prob-j.pdf</a>\n</li>\n<li>テストデータ：
    <a class=\"reference\" href=\"/web/20081122160840/http://www.hsin.hr/ioi2007/index.php?page=tasks\">http://www.hsin.hr/ioi2007/index.php?page=tasks</a>\n</li>\n<li>問題一覧：
    <a class=\"reference\" href=\"/web/20081122160840/http://www.ioi-jp.org/ioi/2007/problem/index.html\">http://www.ioi-jp.org/ioi/2007/problem/index.html</a>\n</li>\n<li>コンテスト概要：
    <a class=\"reference\" href=\"/web/20081122160840/http://www.ioi-jp.org/ioi/2007/index.html\">http://www.ioi-jp.org/ioi/2007/index.html</a>\n</li>\n</ul>\n<p>「問題ごとに、プログラムの実行時間（や使用メモリ量）に制限が設定されています。」にご注意ください。本問では、制限時間1秒、メモリ制限64MBとなっています。</p>\n<p>入出力は標準入出力にて行います。</p>\n<p>採点は、テストデータにおいて正しい結果が返ってくるかで採点されます。出題時はテストデータの一部のみが公開されており、全てのデータは出題時には公開されていません。</p>\n\r\n\t"
  :code: ''
  :tags:
  - 情報オリンピック
  :references:
    :url: 
    :title: 
- :id: '5761'
  :parent_id: '154'
  :url: http://ja.doukaku.org/comment/5761
  :user_name: yukoba
  :user_url: /web/20081122160840/http://ja.doukaku.org/user/689/
  :language: Scala
  :time: 2008/02/15 07:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>間違ったコードです。こんなインチキアルゴリズムでも、半分の部分点がもらえることにビックリ。</p>\n\n\t"
  :code: |
    object Sails2 extends Application {
      val N = readInt
      // 高さ,　旗の数
      val mast:Array[Array[int]] = List.tabulate(N, i =&gt; readLine.split(" ").toList.map(Integer.parseInt(_)).toArray).toArray
      var maxHeight = 0
      mast.foreach(l =&gt; maxHeight = Math.max(maxHeight, l(0)))

      val count = new Array[int](maxHeight + 1)
      var flags = 0
      mast.foreach(a =&gt; {
        count(a(0)) += 1
        flags += a(1)
      })
      for(i &lt;- (1 to maxHeight - 1).reverse) {
        count(i) += count(i + 1)
      }
      var left = flags
      var sum = 0l
      for(i &lt;- (1 to maxHeight).reverse) {
        val min = Math.min(count(i), left / i)
        left -= min
        sum += (min * (min - 1) / 2)
      }
      println(sum)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5772'
  :parent_id: '154'
  :url: http://ja.doukaku.org/comment/5772
  :user_name: yukoba
  :user_url: /web/20081122160840/http://ja.doukaku.org/user/689/
  :language: Scala
  :time: 2008/02/18 09:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  擬似コードは以下の通りです。\r<br>h == zoneMax は else の一部ですが、混ぜてしまうと、概念的に混乱してしまうので、意図的に分離しています。\r<br><br>---------------------\r<br><br>マストの高さでソート\r<br>低いマストから\r<br>  NES : 高さ(1～) -&gt; 累積帆数\r<br>    これは管理しない。概念上のみ。\r<br>  step : 高さ -&gt; ひとつ上の高さからの累積帆数の増分 = NES(h) - NES(h + 1)\r<br>  stepHeight: step(h) != 0 となる h の TreeSet\r<br>    step を更新するときに、ひとつ上を見て、add, remove を判断する\r<br>    zoneMin = 同じNESが連続する下限の高さ\r<br>    zoneMax = 同じNESが連続する上限の高さ\r<br>  h = 今回の高さ - 今回の帆数\r<br>  h == 0\r<br>    step(マストの高さ)++\r<br>  h == マストの高さ\r<br>    // ありえない（帆を必ずつける）\r<br>  h == zoneMin\r<br>    step(zoneMin - 1)--   // zoneMin &gt;= 2 のみ\r<br>    step(マスト高さ)++\r<br>  h == zoneMax\r<br>    // 222111000\r<br>    // 222211111\r<br>    step(zoneMin - 1)--   // zoneMin &gt;= 2 のみ\r<br>    step(zoneMin)++\r<br>    zoneMax != マスト高さ\r<br>      step(zoneMax)--\r<br>      step(マスト高さ)++\r<br>  else\r<br>    w = zonMax - h + 1    // w &gt;= 1\r<br>    step(zoneMin - 1)--   // zoneMin &gt;= 2 のみ\r<br>    step(zoneMin + w - 1)++\r<br>    zoneMax != マスト高さ\r<br>      step(zoneMax)--\r<br>      step(マスト高さ)++\r<br><br>---------------------\n\t"
  :code: "import scala.collection.jcl.TreeSet\n\nobject Sails extends Application
    {\n  // データの読み込み\n  val N = readInt\n  // マストの(height, flags) のソート済み配列\n  val
    masts = List.tabulate(N, i =&gt; {\n    val ary = readLine.split(\" \").map(Integer.parseInt(_))\n
    \   (ary(0), ary(1))\n  }).sort((a,b) =&gt; a &lt; b).toArray\n  var maxHeight
    = masts(masts.length - 1)._1 \n  \n  val step = new Array[int](maxHeight + 2)\n
    \ val stepHeight = new TreeSet[int]()\n  //for(mast &lt;- masts) {\n  for(i &lt;-
    0 until (masts.length)) {\n    val mast = masts(i)     \n    val mastHeight =
    mast._1\n    val h = mastHeight - mast._2 + 1\n    def getZoneMin(h:int):int =
    {\n      val h2 = stepHeight.underlying.ceiling(h)\n      val h3 = if(h2 == null)
    {\n      if(stepHeight.underlying.size == 0) return 1\n        stepHeight.underlying.last\n
    \     } else {\n        stepHeight.underlying.lower(h2)\n      }\n      if(h3
    == null) 1 else h3.asInstanceOf[int] + 1\n    }\n    def getZoneMax(h:int):int
    = {\n      val h2 = stepHeight.underlying.ceiling(h)\n      if(h2 == null) mastHeight
    else h2.asInstanceOf[int]\n    }\n    val zoneMin = getZoneMin(h)\n    val zoneMax
    = getZoneMax(h)\n    //println(\"i = \" + i + \", h = \" + h + \", zoneMin = \"
    + zoneMin + \", zoneMax = \" + zoneMax)\n    def addStep(h:int, v:int) {\n      if(h
    &lt;= 0) return\n      step(h) += v\n      adjustStepHeight(h)\n    }\n    def
    adjustStepHeight(h:int) {\n      if(step(h) != 0)\n        stepHeight.underlying.add(h)\n
    \     if(h &gt;= 2 &amp;&amp; step(h - 1) != 0)\n        stepHeight.underlying.add(h
    - 1)\n      if(step(h) == 0)\n        stepHeight.underlying.remove(h)\n      if(h
    &gt;= 2 &amp;&amp; step(h - 1) == 0)\n        stepHeight.underlying.remove(h -
    1)\n    }\n    if(h == 1) {\n      addStep(mastHeight, 1)\n    } else if(h ==
    zoneMin) {\n      addStep(zoneMin - 1, -1)\n      addStep(mastHeight, 1)\n    }
    else if(h == zoneMax) {\n       addStep(zoneMin - 1, -1)\n       addStep(zoneMin,
    1)\n       if(zoneMax != mastHeight) {\n         addStep(zoneMax, -1)\n         addStep(mastHeight,
    1)\n       }\n    } else {\n      val w = zoneMax - h + 1\n      addStep(zoneMin
    - 1, -1)\n      addStep(zoneMin + w - 1, 1)\n      if(zoneMax != mastHeight) {\n
    \       addStep(zoneMax, -1)\n        addStep(mastHeight, 1)\n      }\n    }\n
    \   //println(\"i = \" + i + \", step = \" + step.toList + \", stepHeight = \"
    + stepHeight)\n  }\n  //println(step.toList)\n  \n  var sum = 0l\n  var flagCount
    = 0\n  for(i &lt;- (1 to maxHeight).reverse) {\n    def sumNE(n:long) = n * (n
    - 1) / 2\n    flagCount += step(i)\n    sum += sumNE(flagCount)\n  }\n  println(sum)\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
