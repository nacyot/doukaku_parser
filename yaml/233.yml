---
:id: '233'
:title: ナベアツ算
:comments:
- :id: '8411'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8411
  :user_name: fumokmm
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/856/
  :language: 
  :time: 2009/01/29 10:22 GMT
  :vote_count: '4'
  :vote_score: '-2'
  :body: "\r\n\t  <div class=\"section\">\n<p>「3の倍数と3がつく数字の時だけアホになる」コードを実装して下さい。\r</p>\n<p>\r</p>\n<p>\r</p>\n<p>また、余裕のあるかたは更に、\r</p>\n<p>「8の倍数のときに人探しをしてる感じに」「5の倍数のときにナルシストに」なるよう実装して下さい。</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8444'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8444
  :user_name: nobsun
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2009/02/05 05:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>オプションの条件が重なったときはどうするのかしらん？</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8445'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8445
  :user_name: nemo_kaz
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/837/
  :language: Groovy
  :time: 2009/02/05 05:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>3の倍数の場合のみ</p>\n\n\t"
  :code: "boolean aho\n1.upto(30) { \n    if (it%3 == 0) {aho=true}\n    it.toString().toList().each
    {if (it==\"3\"){aho=true} }\n    print it\n    if (aho) {println \" ーっ\"} else
    {println \"\"}\n    aho=false\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8446'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8446
  :user_name: manzo
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/980/
  :language: Ruby
  :time: 2009/02/05 06:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>アホになるってどういうことだろう？\n３の場合。</p>\n<p>３と５の倍数\n３と８の倍数\n５と８の倍数</p>\n<p>の時は何になればよろしいんでしょうか？</p>\n\n\t"
  :code: |
    a = [*("1".."100")].map{|i|i.chars.include?("3") ? "(☆゜o゜)ぅにゃぁ～！" : i}
    puts a.map{|i|i.to_i % 3 == 0 ? "(☆゜o゜)ぅにゃぁ～！" : i}
  :tags:
  - Ruby1.8.7
  :references:
    :url: 
    :title: 
- :id: '8447'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8447
  :user_name: 匿名
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2009/02/05 01:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>倍数のときにはアクションを混ぜてたはずだけど、忘れた・・</p>\n\n\t"
  :code: |
    1.upto(100) do |i|
      act = ""
      act &lt;&lt; " (ﾟ∀ﾟ)ｱﾋｬ" if ((i%3 == 0) || (i.to_s.include?("3")))
      act &lt;&lt; " (゜д゜；三；゜д゜）" if (i%8 == 0)
      act &lt;&lt; "（´ー`）フッ" if (i%5 == 0)
      printf("%3d%s\n", i, act)
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8448'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8448
  :user_name: ところてん
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2009/02/05 07:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">pythonでナベアツクラスを書いてみました。\r\nintを継承したクラスなので、intとして扱えますが、\r\nstrしたときの挙動が違います。</pre>\n\t"
  :code: |
    #coding: utf-8

    class nabeatsu(int):
        def __add__(self, other):
            return nabeatsu(int(self) + other)
        def __sub__(self, other):
            return nabeatsu(int(self) - other)
        def __mul__(self, other):
            return nabeatsu(int(self) * other)
        def __div__(self, other):
            return nabeatsu(int(self) / other)

        def __str__(self):
            if str(int(self)).find("3") != -1 or (int(self) != 0 and self % 3 == 0):
                return "わかりません＞＜"
            elif (int(self) != 0 and self % 5 == 0):
                return "ところでこいつを見てくれ、これをどう思う？"
            elif (int(self) != 0 and self % 8 == 0):
                return "私の崇高なぽてちはどこですか？（上野たん）"
            else:
                return int(self).__str__()

    if __name__ == "__main__":
        a = nabeatsu(0)
        for i in range(100):
            a += 1
            print unicode(str(a), "utf-8")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8453'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8453
  :user_name: sumim
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/02/05 07:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Squeak Smalltalk で。\n     <br><br>\n   以前書いた、ちょっと風変わりな実装はコチラに。\n</p>\n\n\n\n\t"
  :code: "(1 to: 40) collect: [:n |\n    ((n isDivisibleBy: 3) or: [n printString
    includes: $3]) \n        ifTrue: [#アホ] ifFalse: [n]]\n\n\"=&gt; #(1 2 #アホ 4 5
    #アホ 7 8 #アホ 10 11 #アホ #アホ 14 #アホ \n16 17 #アホ 19 20 #アホ 22 #アホ #アホ 25 26 #アホ 28
    29 #アホ \n#アホ #アホ #アホ #アホ #アホ #アホ #アホ #アホ #アホ 40) \"\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: /web/20090604221008/http://d.hatena.ne.jp/sumim/20080417/p1
    :title: 世界のナベアツに Squeak Smalltalk で挑戦する
- :id: '8456'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8456
  :user_name: greentea
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/573/
  :language: Other
  :time: 2009/02/05 08:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Pythonでワンライナー。</pre>\n\t"
  :code: |
    for x in ['アホ' if not x%3 or str(x).find('3')!=-1 else 'どこ？' if not x%8 else 'ナル' if not x%5 else x for x in range(1,101)]: print x
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8457'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8457
  :user_name: U Okumura
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/862/
  :language: Groovy
  :time: 2009/02/05 08:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>ちょっとひねって数字自体をあほにしたりナルシストにしたりしてみました。\n</p>\n<p>かなり無茶をしたので1.6でしか動ききません。\n
    \  （Range中の同じ数値が同じインスタンスである事に依存しています。）  <br>\n   1.6 RC2で動作を確認しました。1.6でもバージョンによっては動かなくなるかも…です。\n</p>\n\n\n\n\t"
  :code: |
    Integer.metaClass.アホになる = {-&gt;
        delegate.metaClass.toString = {-&gt;"${delegate}っ"}
    }
    Integer.metaClass.ナルシストになる = {
        def old = delegate.metaClass.getMetaMethod('toString', new Object[0])
        delegate.metaClass.toString = {-&gt;"${old.invoke(delegate)}…oh!"}
    }
    Integer.metaClass.人を捜してる感じになる = {
        def old = delegate.metaClass.getMetaMethod('toString', new Object[0])
        delegate.metaClass.toString = {-&gt;"${old.invoke(delegate)}〜〜？"}
    }
    ((3..100).step(3)+((1..100).findAll{"$it" =~/3/})).each {it.アホになる()}
    (5..100).step(5).each {it.ナルシストになる()}
    (8..100).step(8).each {it.人を捜してる感じになる()}

    (1..100).each {println it.toString()}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8458'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8458
  :user_name: fumokmm
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/856/
  :language: 
  :time: 2009/02/05 08:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">(補足)\r\n確か、3の倍数と3がつく数字よりも\r\n8の倍数と5の倍数を優先してた気がします。\r\n8の倍数と5の倍数ではどちらが優先なのか覚えておりません。\r\nすみませんが各自の実装にお任せします(苦笑)</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20090604221008/http://www.youtube.com/watch?v=xL3Z8z9K0MQ&amp;hl=ja
    :title: YouTube - 世界のナベアツ
- :id: '8459'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8459
  :user_name: emasaka
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2009/02/05 08:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>「アホになる」を縦ゆれ、「人探し」を横ゆれで表現してみました。</p>\n\n\t"
  :code: |
    #!/bin/bash

    function AhoNiNaru() {
        local -i i
        for ((i = 0; i &lt; 80; i++)) {
            tput indn 3
            tput rin 3
        }
    }

    function HitoSagashi() {
        local n=$1
        local -i i
        for ((i = 0; i &lt; 70; i++)) {
            tput el1
            echo -n $n
        }
        echo
    }

    function NabeAtzz() {
        local -i n=$1

        tput clear
        tput cud 3

        local -i i
        for ((i = 1; i &lt;= n; i++)) {
            if ((i % 8 == 0)); then
                HitoSagashi $i
            else
                echo $i
            fi
            if ((i % 3 == 0)) || [[ $i == *3* ]]; then
                AhoNiNaru
            fi
            sleep 1
        }
    }

    NabeAtzz 100
  :tags:
  - tput
  :references:
    :url: 
    :title: 
- :id: '8460'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8460
  :user_name: greentea
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/573/
  :language: Python
  :time: 2009/02/05 08:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">さっき言語をつけ忘れたので、同じくpythonで、全然別のを再投稿。\r\n意地でも数字の3,
    if, %演算子, 数字を文字列として読み込む処理を使わずに書いてみた。</pre>\n\t"
  :code: "#!/usr/bin/python                      \n# coding: utf-8                        \n\ndef
    included_three():\n        v = 1        \n        while True:  \n                yield
    1*v\n                yield 1*v\n                yield 1*v\n                yield
    u'アホ'\n                yield 1*v\n                yield 1*v\n                yield
    1*v\n                yield 1*v\n                yield 1*v\n                yield
    1*v\n                try: g\n                except:\n                        g
    = included_three()\n                        g.next()\n                v = g.next()\n\ndef
    mul_of_three_or_included_three():\n        included = included_three()\n        included.next()\n
    \       while True:\n                yield 1*included.next()\n                yield
    1*included.next()\n                included.next()\n                yield u'アホ'\n\nv
    = mul_of_three_or_included_three()\nfor i,j in zip(range(1, 41), v):\n        try:
    print i+j-1\n        except: print j\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8461'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8461
  :user_name: 匿名
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2009/02/05 09:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    def aho(n)
      a = [3,8,5].zip(["-aho", "-naru", "-doko?"])
      r = []
      (1..n).map{|i|
        r &lt;&lt; i
        a.each{|x, y|
          r[-1] = y if (i%x == 0)
        }
        r[-1] = "-aho" if i.to_s.index("3")
      }
      r
    end

    p aho(40)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8465'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8465
  :user_name: pooq
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2009/02/06 02:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">アホなので数字が返せません。\r\n\r\n   nabeathu 50\r\n1 2
    _ 4 5 _ 7 8 _ 10 11 _ _ 14 _ 16 17 _ 19 20 _ 22 _ _ 25 26 _ 28 29 _ _ _ _ _ _
    _ _ _ _ 40 41 _ _ 44 _ 46 47 _ 49 50\r\n</pre>\n\t"
  :code: |
    nabeathu=:3 :'_(I.+./(0=3|a),:+./|:3=10#.inv a)}a=.&gt;:i.y'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8467'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8467
  :user_name: ksky
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/918/
  :language: Groovy
  :time: 2009/02/06 05:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>３だけ対応版です。</p>\n\n\t"
  :code: |
    def isAho(i) {
      !(i % 3) || ("$i".count('3'))
    }

    (1..40).each { println "$it ${isAho(it) ? 'Aho' : ''}" }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8468'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8468
  :user_name: U Okumura
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/862/
  :language: Groovy
  :time: 2009/02/07 02:14 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>「風変わりな実装」に触発されました^^</p>\n\n\t"
  :code: "class ナベアツ {\n    static range\n    \n    def getの倍数() {\n        return
    range.findAll{it % (this as Integer) == 0}\n    }\n    \n    def getのつく数字() {\n
    \       range.findAll{\"$it\" =~ \"${this as Integer}\"}\n    }\n    \n    public
    String stringValue() { this as String} \n   \n    def まで(cls) {\n        range
    = (1..(this as Integer) as ArrayList)\n        cls()\n        return range\n    }\n}\nInteger.metaClass.mixin(ナベアツ)\n\nArrayList.metaClass.と
    = {list-&gt;new ArrayList(new TreeSet(delegate + list))}\nArrayList.metaClass.のとき
    = {cls-&gt;\n    delegate.each{\n        def old = it.stringValue()\n        it.metaClass.getOld
    = {old}\n        it.metaClass.stringValue = cls\n    }\n}\nArrayList.metaClass.なります
    = {-&gt;\n    delegate.each {println it.stringValue()}\n}\n\ndef アホに= {\"${delegate.old}っ\"}\ndef
    ナルシストに = {\"${delegate.old}…oh!\"}\ndef 人を捜してる感じに= {\"${delegate.old}〜〜？\"}\n\n200.まで
    {\n    3.の倍数.と(3.のつく数字).のとき(アホに)\n    5.の倍数.のとき(ナルシストに)\n    8.の倍数.のとき(人を捜してる感じに)\n}.なります()\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8469'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8469
  :user_name: Otter
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/497/
  :language: Haskell
  :time: 2009/02/07 02:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>もう、普通にやっただけでは面白くないとは思うのですが…</p>\n\n\t"
  :code: "module Main where\n\nimport Data.List\n\nnabe n\n    | (n `mod` 3 == 0)
    || (elem '3' $ show n) = (n, \"Aho\")\n    | otherwise = (n, show n)\n\nnaben
    d msg i@(n, str)\n    | n `mod` d == 0 = (n, msg ++ str)\n    | otherwise = i\n\nnabe5
    = naben 5 \"Naru \"\n\nnabe8 = naben 8 \"Doko \"    \n\nmain = print $ intercalate
    \", \" $ map (snd.nabe5.nabe8.nabe) [1..40]\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8471'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8471
  :user_name: mattsan
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/833/
  :language: C
  :time: 2009/02/07 06:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>テンプレートの組み合わせで、数字と順序をかえることができます。</p>\n<p>こんなことで100行以上かかっちゃった orz
    。</p>\n\n\t"
  :code: |
    /// 2009/02/07
    /// http://ja.doukaku.org/233/

    #include &lt;iostream&gt;

    template&lt;typename T&gt;
    class Nabeatsu
    {
    public:
        Nabeatsu() : i_() {}
        virtual ~Nabeatsu() {}
        virtual void write(std::ostream&amp; out) const = 0;
        operator int () const { return i_; }
        T getValue() const { return i_; }
        template&lt;typename U&gt; bool operator &lt;= (U value) { return i_ &lt;= value; }
        Nabeatsu&amp; operator ++ () { ++i_; return *this; }

    private:
        T i_;
    };

    template&lt;typename T&gt;
    std::ostream&amp; operator &lt;&lt; (std::ostream&amp; out, const Nabeatsu&lt;T&gt;&amp; nabeatsu)
    {
        nabeatsu.write(out);
        return out;
    }

    template&lt;int N, typename T&gt;
    class Aho : public Nabeatsu&lt;T&gt;
    {
    public:
        Aho() : Nabeatsu&lt;T&gt;() {}

        void write(std::ostream&amp; out) const
        {
            T i = Nabeatsu&lt;T&gt;::getValue();
            out &lt;&lt; i;
            if((i % N == 0) || includeN())
            {
                out &lt;&lt; " aho";
            }
        }

    private:
        bool includeN() const
        {
            int n = Nabeatsu&lt;T&gt;::getValue();
            while(n &gt; 0)
            {
                if((n % 10) == N)
                {
                    return true;
                }
                n /= 10;
            }
            return false;
        }
    };

    template&lt;int N, typename T&gt;
    class Doko : public Nabeatsu&lt;T&gt;
    {
    public:
        Doko() : Nabeatsu&lt;T&gt;() {}

        void write(std::ostream&amp; out) const
        {
            T i = Nabeatsu&lt;T&gt;::getValue();
            out &lt;&lt; i;
            if(i % N == 0)
            {
                out &lt;&lt; " doko";
            }
        }
    };

    template&lt;int N, typename T&gt;
    class Naru : public Nabeatsu&lt;T&gt;
    {
    public:
        Naru() : Nabeatsu&lt;T&gt;() {}

        void write(std::ostream&amp; out) const
        {
            T i = Nabeatsu&lt;T&gt;::getValue();
            out &lt;&lt; i;
            if(i % N == 0)
            {
                out &lt;&lt; " naru";
            }
        }
    };

    int main(int, char* [])
    {
        Naru&lt;5, Doko&lt;8, Aho&lt;3, int&gt; &gt; &gt; nabeatsu;
        ++nabeatsu;
        while(nabeatsu &lt;= 40)
        {
            std::cout &lt;&lt; nabeatsu &lt;&lt; std::endl;
            ++nabeatsu;
        }

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8473'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8473
  :user_name: ispopopo
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/209/
  :language: C
  :time: 2009/02/07 12:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Decorator パターンの練習。ちゃんと使えてるでしょうか。</p>\n\n\t"
  :code: "namespace Nabeatsu\n{\n    class Program\n    {\n        static void Main(string[]
    args)\n        {\n            PersonClass nabeatsu = new Person(\"・・・\");\n            nabeatsu
    = new MultipleNumberPerson(nabeatsu, \"あほですねん\", 3);\n            nabeatsu = new
    ContainNumberPerson(nabeatsu, \"あほですねん\", 3);\n            nabeatsu = new MultipleNumberPerson(nabeatsu,
    \"俺ってかっこいい\", 5);\n            nabeatsu = new MultipleNumberPerson(nabeatsu, \"さがしてますねん\",
    8);\n            nabeatsu.CountTo(100);\n        }\n    }\n\n    abstract class
    PersonClass\n    {\n        abstract public string getLine(int i);\n        \n
    \       public void CountTo(int count)\n        {\n            for (int i = 1;
    i &lt; count + 1; i++)\n            {\n                Console.WriteLine(this.getLine(i));\n
    \           }\n        }\n    }\n\n    class Person : PersonClass\n    {\n        private
    string phrase;\n\n        public Person(string phrase)\n        {\n            this.phrase
    = phrase;\n        }\n\n        public override string getLine(int i)\n        {\n
    \           return string.Format(\"{0,3} : {1}\", i.ToString(), this.phrase);\n
    \       }\n    }\n\n    class ContainNumberPerson : PersonClass\n    {\n        private
    PersonClass person;\n        private string line;\n        private int x;\n\n
    \       public ContainNumberPerson(PersonClass person, string line, int x)\n        {\n
    \           this.person = person;\n            this.line = line;\n            this.x
    = x;\n        }\n\n        public override string getLine(int i)\n        {\n
    \           if (i.ToString().Contains(x.ToString()))\n            {\n                return
    string.Format(\"{0,3} : {1}\", i.ToString(), this.line);\n            }\n            else\n
    \           {\n                return this.person.getLine(i);\n            }\n
    \       }\n    }\n\n    class MultipleNumberPerson : PersonClass\n    {\n        private
    PersonClass person;\n        private string line;\n        private int x;\n\n
    \       public MultipleNumberPerson(PersonClass person, string line, int x)\n
    \       {\n            this.person = person;\n            this.line = line;\n
    \           this.x = x;\n        }\n\n        public override string getLine(int
    i)\n        {\n            if (i % x == 0)\n            {\n                return
    string.Format(\"{0,3} : {1}\", i.ToString(), this.line);\n            }\n            else\n
    \           {\n                return person.getLine(i);\n            }\n        }\n
    \   }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8475'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8475
  :user_name: 割と普通
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/581/
  :language: C
  :time: 2009/02/08 08:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>以下の点でイマイチかなぁと。\r</p>\n<ul>\n<li>\n toStringを二回呼んでる\r\n</li>\n<li>
    LINQのメソッドチェーンを活かしきれてない\r</li>\n</ul>\n<p>\r</p>\n<p>変にToString、int.Parseをしてもパフォーマンスが落ちるだけだしなぁ・・・。うーん・・・。型付言語で巧く文字列数字を扱う方法が思いつきにくく。</p>\n</div>\n\t"
  :code: |
    class ナベアツ算
    {
        public static IEnumerable&lt;string&gt; Action(int num)
        {
            return Enumerable.Range(1, num).Select(n =&gt;
            {
                if (n % 5 == 0) return "ナルシスト";
                else if (n % 8 == 0) return "探索人";
                else if (n % 3 == 0 || n.ToString().Contains("3")) return "アホの子";
                else return n.ToString();
            });
        }
    }
  :tags:
  - LINQ
  :references:
    :url: 
    :title: 
- :id: '8476'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8476
  :user_name: fumokmm
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/856/
  :language: Java
  :time: 2009/02/08 10:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">教科書的な書き方で。</pre>\n\t"
  :code: |
    public String nabeatsu(int num) {
        if (num % 3 == 0) {
            return "あほ";
        } else if (String.valueOf(num).contains("3")) {
            return "あほ";
        } else {
            return String.valueOf(num);
        }
    }
  :tags: []
  :references:
    :url: /web/20090604221008/http://h.hatena.ne.jp/fumokmm/9234278155119332311
    :title: このお題の発端
- :id: '8478'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8478
  :user_name: horiuchi
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/570/
  :language: Perl
  :time: 2009/02/09 09:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>とりあえずワンライナーで、3の場合だけ処理するバージョン</p>\n\n\t"
  :code: |
    map{print((!($_%3)or/3/)?'aho':$_,"\n")}(1..41);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8497'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8497
  :user_name: leque
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2009/02/13 14:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    (import (rnrs)
            (srfi :13))

    (define (nabeatu n)
      (cond
       ((or (zero? (mod n 3))
            (string-index (number-&gt;string n) #\3))
        'aho)
       (else n)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8503'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8503
  :user_name: タックル
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/1012/
  :language: Python
  :time: 2009/02/13 22:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ワンライナーで書いてみました。（参考ページは自身のブログです）</p>\n\n\t"
  :code: |
    print ('%s\n' * 100 % tuple([str(n)  + u' &lt;- アホ' * int(not (n % 3) or '3' in str(n)) for n in range(1, 101)]))
  :tags: []
  :references:
    :url: /web/20090604221008/http://3tackle.blog55.fc2.com/blog-entry-73.html
    :title: 今日の3タックル
- :id: '8513'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8513
  :user_name: ポケット
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/828/
  :language: C
  :time: 2009/02/16 00:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">一応組み合わせて表示できるようにしてみました。\r\n\r\n</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    int check(int x){
      int i = 0;
      if (x%3 == 0 || x%10 == 3){
        printf("（ﾟ∇ﾟ）アッホー");
        i = 1;
      } if (x%5 == 0 || x%10 == 5){
        printf("(｡+･｀ω･´)☆　キラーﾝ");
        i = 1;
      } if (x%8 == 0 || x%10 == 8){
        printf("o((･_･彡 ･_･))o ｷｮﾛｷｮﾛｯ");
        i = 1;
      } else {
        if (i != 1){
          printf("%d",x);
        }
      }
      return 0;
    }

    int main(int argc,char *argv[])
    {
      int i,end;
      printf("1から:");
      scanf("%d",&amp;end);
      for(i = 0;i &lt; end;i++){
        printf("[%d]:",i+1);
        check(i+1);
        printf("\n");
      }
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8518'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8518
  :user_name: ポケット
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/828/
  :language: Common
  :time: 2009/02/17 09:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>check 関数を作ったので新たなネタが出たときも対応できるはず。</p>\n\n\t"
  :code: "(defun check (x y)\n  (if (or (zerop (rem x y)) (= (rem x 10) y))\n      t\n
    \     nil))\n(defun numlist (x y)\n  (let ((result nil))\n    (loop (if (&gt;
    x y) (return (reverse result))\n          (progn (push x result) (incf x 1))))))\n\n(defun
    nabeatu (x y)\n    (mapcar #'(lambda (x) (cond ((check x 3) '（ﾟ∇ﾟ）アホ！    )\n                ((check
    \ x 5) '（-_☆\\）ｷﾗｰﾝ)\n                ((check  x 8) '|(･_･ ) ( ･_･)ｷｮﾛｷｮﾛ|)\n
    \               (t x))) \n        (numlist x y)))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8536'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8536
  :user_name: 匿名
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2009/02/19 21:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ポイントは、3を含むことの判定を数値のままで判定していること。\n\t"
  :code: "#include &lt;iostream&gt;\n\nint main(int argc, char** argv){\n  for (long
    N = 1; N &lt; 41;++N){\n    bool aho = false;\n    if (N % 3 == 0) aho = true;\n
    \   else\n      for (int M = N; 0 &lt; M; M /= 10)\n        if (M % 10 == 3) aho
    = true;\n    \n    std::cout &lt;&lt;  (aho ? \"（‘３‘）\" : \"（´ー｀）\");\n    std::cout
    &lt;&lt; N &lt;&lt; std::endl;\n  }\n  return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8563'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8563
  :user_name: moeprj
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/1021/
  :language: Perl
  :time: 2009/02/26 22:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  FizzBuzzみたいな感じ。\n\t"
  :code: |
    print$_%8?$_%5?(!($_%3)or/3/)?'アホ':$_:'フッ':'どこ？',$/for 1..41;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8572'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8572
  :user_name: turugina
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2009/03/02 23:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>「アホになる」をどう表現したものか悩みましたが...</p>\n<p>尚、出力はファイルにリダイレクトとかしないとコンソール画面がアホになる恐れがありますので気をつけてください。</p>\n\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:fn="http://www.w3.org/2005/xpath-functions"
      &gt;

      &lt;xsl:output method="html" /&gt;

      &lt;xsl:template match="/"&gt;
        &lt;html&gt;
          &lt;body&gt;
            &lt;xsl:for-each select="1 to 100"&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="(. mod 3)=0 or fn:contains(xs:string(.), '3')"&gt;
                  &lt;xsl:variable name="num" as="xs:integer" select="." /&gt;
                  &lt;xsl:for-each select="fn:string-to-codepoints('アホ')"&gt;
                    &lt;xsl:value-of select="fn:codepoints-to-string((.+$num))" /&gt;
                  &lt;/xsl:for-each&gt;
                &lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;
                  &lt;xsl:value-of select="." /&gt;
                &lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
              &lt;br /&gt;
            &lt;/xsl:for-each&gt;
          &lt;/body&gt;
        &lt;/html&gt;
      &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8581'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8581
  :user_name: mattn
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/52/
  :language: Vim
  :time: 2009/03/06 00:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ここまでやる必要はないのですが...\n\t"
  :code: |
    scriptencoding utf-8

    silent! unlet s:ndg
    let s:ndg = [
      \ {0: ''},
      \ {0: 'じゅう'},
      \ {0: 'ひゃく', 3: 'ぴゃく', 6: 'ぴゃく', 8: 'ぴゃく'},
      \ {0: 'せん', 3: 'ぜん'},
    \ ]

    silent! unlet s:dig
    let s:dig = [
      \ {0: ''},
      \ {0: 'まん'},
      \ {0: 'おく'},
      \ {0: 'ちょう'},
      \ {0: 'けい'},
      \ {0: 'がい'},
      \ {0: 'じょ'},
      \ {0: 'じょう'},
      \ {0: 'こう'},
      \ {0: 'かん'},
      \ {0: 'せい'},
      \ {0: 'さい'},
      \ {0: 'ごく'},
      \ {0: 'こうがしゃ'},
      \ {0: 'あそうぎ'},
      \ {0: 'なゆた'},
      \ {0: 'ふかしぎ'},
      \ {0: 'むりょうたいすう'}
    \ ]

    silent! unlet s:num
    let s:num = [
      \ {0: 'ぜろ'},
      \ {0: 'いち'},
      \ {0: 'に'},
      \ {0: 'さん'},
      \ {0: 'よん'},
      \ {0: 'ご'},
      \ {0: 'ろく', 3: 'ろっ'},
      \ {0: 'なな'},
      \ {0: 'はち', 3: 'はっ', 4: 'はっ'},
      \ {0: 'きゅう'},
    \ ]

    silent! unlet s:num_aho
    let s:num_aho = [
      \ {0: 'じぇろ'},
      \ {0: 'いちぃ'},
      \ {0: 'にぃ'},
      \ {0: 'しゃん'},
      \ {0: 'よぉん'},
      \ {0: 'ごぉ'},
      \ {0: 'ろくぅ', 3: 'ろぉっ'},
      \ {0: 'ななぁ'},
      \ {0: 'はちぃ', 3: 'はぁっ', 4: 'はぁっ'},
      \ {0: 'きゅうぅ'},
    \ ]

    " return japanese numeric string from 'num'
    function! s:num2ja(num, numdic, digdic, ndgdic, lstdic)
      let str = "" . a:num
      let numdic = a:numdic
      let digdic = a:digdic
      let len = len(str)
      if str == 0
        return numdic[0][0]
      endif
      if len &gt;= 17*4+1
        return digdic[17][0]
      endif
      let n = 0
      let ret = ""
      while n &lt; len
        if n == len - 1
          let numdic = a:lstdic
        endif
        if str[n] != 0 &amp;&amp; (str[n] != 1 || (len-n)%4 == 1)
          let ret .= has_key(numdic[str[n]], len-n) ?
            \ numdic[str[n]][len-n] : numdic[str[n]][0]
        endif
        if str[n] != 0
          let ret .= has_key(a:ndgdic[(len-n-1)%4], str[n]) ?
            \ a:ndgdic[(len-n-1)%4][str[n]] : a:ndgdic[(len-n-1)%4][0]
          let ret .= has_key(a:digdic[(len-n-1)/4], str[n]) ?
            \ a:digdic[(len-n-1)/4][str[n]] : a:digdic[(len-n-1)/4][0]
        endif
        let n = n + 1
      endwhile
      return ret
    endfunction

    " generate array from 'start' to 'end'
    function! s:gen_array(start, end)
      let ret = []
      let n = a:start
      while n &lt;= a:end
        call add(ret, n)
        let n = n + 1
      endwhile
      return ret
    endfunction

    for n in s:gen_array(1, 40)

      if !(n % 3) || n =~ '3'
        let ret = s:num2ja(n, s:num_aho, s:dig, s:ndg, s:num_aho)
      else
        let ret = s:num2ja(n, s:num, s:dig, s:ndg, s:num)
      endif
      if !(n % 5)
        let ret = substitute(ret." Oh!", "じゅう", "じゅぉぅ", "g")
      endif
      if !(n % 8)
        let ret .= "ー？"
      endif
      echo ret
    endfor
  :tags:
  - ナベアツ
  :references:
    :url: 
    :title: 
- :id: '8723'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8723
  :user_name: tanakahisateru
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/1025/
  :language: Scala
  :time: 2009/03/25 08:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>普通中の普通なコードです。OCamlと比較するために。詳しくはブログにて。</p>\n\n\t"
  :code: |
    println(1 to 40 map ((n) =&gt; {
      var s = n.toString()
      if(n % 3 == 0 || s.contains('3')) { s += " Aho" }
      if(n % 5 == 0) { s += " Doko" }
      if(n % 8 == 0) { s += " Naru" }
      s
    }) reduceLeft ((s,e) =&gt; { s + "," + e }) )
  :tags: []
  :references:
    :url: /web/20090604221008/http://d.hatena.ne.jp/tanakahisateru/
    :title: 投稿者のブログ記事
- :id: '8724'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8724
  :user_name: tanakahisateru
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/1025/
  :language: OCaml
  :time: 2009/03/25 08:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>普通中の普通なコードです。Scalaと比較するために。詳しくはブログにて。</p>\n\n\t"
  :code: |
    let range s e = let rec loop r x = if x &gt;= s then loop (x :: r) (x - 1) else r in loop [] e;;

    let nums = range 1 40 in
    let nabestr_of_int x =
        let f3 s = if x mod 3 = 0 || String.contains s '3' then s ^ " Aho" else s in
        let f5 s = if x mod 5 = 0 then s ^ " Doko" else s in
        let f8 s = if x mod 8 = 0 then s ^ " Naru" else s in
            f8 (f5 (f3 (string_of_int x))) in
    let all = List.map nabestr_of_int nums in
    let result = String.concat "," all in
    print_string (result ^ "\n");;
  :tags: []
  :references:
    :url: /web/20090604221008/http://d.hatena.ne.jp/tanakahisateru/20090325/1237958098
    :title: 投稿者のブログ記事
- :id: '8725'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8725
  :user_name: tanakahisateru
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/1025/
  :language: OCaml
  :time: 2009/03/25 08:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>F#のパイプ演算子(?)を定義して、Scalaふうに書いてみました。</p>\n\n\t"
  :code: |
    let range s e =
        let rec loop r x = if x &gt;= s then loop (x :: r) (x - 1) else r in
        loop [] e;;

    let (|&gt;) v f = f v;;

    (1 |&gt; range 40) |&gt; (List.map (fun x -&gt;
        let s = ref (string_of_int x) in
            if x mod 3 = 0 || String.contains !s '3' then s := !s ^ " Aho";
            if x mod 5 = 0 then s := !s ^ " Doko";
            if x mod 8 = 0 then s := !s ^ " Naru";
            !s
    )) |&gt; (String.concat ",") |&gt; print_string;;
  :tags: []
  :references:
    :url: /web/20090604221008/http://d.hatena.ne.jp/tanakahisateru/20090325/1237958098
    :title: 投稿者のブログ記事
- :id: '8981'
  :parent_id: '233'
  :url: http://ja.doukaku.org/comment/8981
  :user_name: rennos
  :user_url: /web/20090604221008/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/05/22 05:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  とりあえず、\r<br>「x の倍数か x のつく数 ( 0 &lt; x &lt; 10, x は自然数 )」\r<br>をナベアツ数といい、この x をナベアツ法数と呼ぶことにしました。\r<br>"
  :code: "#module mod_nbnumber\n\n#define true  1\n#define false 0\n\n// number が
    nLaw に対するナベアツ数かどうかを調べる\n#defcfunc IsNabeatsuNumber int number, int nLaw, local
    powval\n    if ( nLaw &lt;= 0 || nLaw &gt;= 10 || number == 0 &amp;&amp; nLaw
    != 0 ) {\n        return false\n    }\n    \n    if ( (number \\ nLaw) == 0 )
    { return true }        // 倍数か？\n    if ( (number \\ 10) == nLaw ) { return true
    }    // 1 桁目は nLaw か？\n    \n    // 2桁目以降が nLaw か？\n    powval = 1\n    while
    ( number &gt; powval )\n        powval *= 10\n        if ( (number / powval) ==
    nLaw ) { return true }    // i 桁目は nLaw か？\n    wend\n    return false\n    \n#global\n\n#const
    MAX_VALUE 40\n\n    aho     = \"アホ\"\n    finder  = \"人を探してる感じ\"\n    narcist
    = \"ナルシスト\"\n    \n    sdim buf, 3200\n    notesel buf\n    repeat MAX_VALUE,
    1\n        stmp = \"\"+ cnt +\": \"\n        bool = 0\n        \n        // アホになる\n
    \       if ( IsNabeatsuNumber( cnt, 3 ) ) {\n            stmp += aho\n            bool
    \ = 1\n        }\n        \n        // 人を探してる感じになる\n        if ( cnt \\ 8 == 0
    ) {\n            if ( bool ) { stmp += \"＆\" }\n            stmp += finder\n            bool
    \ = 1\n        }\n        \n        // ナルシスト\n        if ( cnt \\ 5 == 0 ) {\n
    \           if ( bool ) { stmp += \"＆\" }\n            stmp += narcist\n            bool
    \ = 1\n        }\n        \n        noteadd stmp\n    loop\n    noteunsel\n    mesbox
    buf, ginfo(12), ginfo(13)\n    stop\n"
  :tags: []
  :references:
    :url: 
    :title: 
