---
:id: '167'
:title: 変数の初期値
:comments:
- :id: '5927'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5927
  :user_name: takuya_1st
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/725/
  :language: 
  :time: 2008/03/03 12:49 GMT
  :vote_count: '12'
  :vote_score: '-4'
  :body: "\r\n\t  <pre class=\"compact\">WEB+DB 43のRecent Perl Worldを読んで知りました。\r\n\r\n変数を初期化するに当たってPerlでは\r\nmy
    $var ||= 'foo';\r\nとかきます。この不備を補うためPerlの5.10には\r\nDefined-or演算子が実装されたそうです。\r\n$zero
    //= 25;\r\nこのような変数のデフォルト設定を行う方法を各種言語ではどうかくのでしょうか。\r\n\r\n\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5942'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5942
  :user_name: Sixeight
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/710/
  :language: Ruby
  :time: 2008/03/05 10:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    foo ||= 'hoge'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5943'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5943
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/03/05 10:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    zero = 25 if zero is None else zero
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5944'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5944
  :user_name: sumim
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/03/05 10:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltak では変数の初期値が nil なので、nil の場合のみブロックを実行する #ifNil: を適宜コールして初期化などを行ないます。</p>\n\n\t"
  :code: |
    foo ifNil: [foo := 'hoge']
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '5947'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5947
  :user_name: mc
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/03/05 11:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    お題と同じ主旨ということであれば、Common LispというかLISP系では、
    orを使うのがイディオムっぽいですが、下記の例では、既にvarに
    値が設定されていないとエラーになってしまいます。

    ;(setq var nil)
    ;etc 〜

    (let ((var (or var 'foo)))
      var)
    ;=&gt; foo

    大域変数については、defvarがあり、既に値が設定されている場合は、
    値が上書きされません。

    ;; 初回
    (defvar foo 'foo)
    =&gt; foo

    ;; 以降
    (defvar foo 'bar)
    =&gt; foo
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5950'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5950
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/03/05 13:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">無理に書けばこう、なのかな？\r\n</pre>\n\t"
  :code: |
    try:
      var
    except NameError:
      var = 'foo'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5951'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5951
  :user_name: kozima
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2008/03/05 13:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>OCaml とか Haskell には初期化されてない変数が存在しませんね。そういう言語って他にも結構あるような。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5952'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5952
  :user_name: あにす
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/504/
  :language: 
  :time: 2008/03/05 14:12 GMT
  :vote_count: '11'
  :vote_score: '9'
  :body: "\n\t  <p>すみません。Perlが読めません。\n”この不備を補うため”とありますが、\nmy $var ||= 'foo';\nにはどんな不備があるのでしょうか？\nこれは$var型の変数myを宣言し、fooを代入しているということでいいのでしょうか？\n文字列型varにfooを代入しているようにも見えます。\nDefined-or演算子とは何でしょうか?検索してもすぐには見付けられませんでした。\n”//”がDefined-or演算子ということでいいのでしょうか？\n”変数のデフォルト設定”とは変数の初期化とどう違うのでしょうか?\nそれとも、初期化前の値を、型ごとに決めるということでしょうか？初期化前の値を決めることに合理性が見出せないので考えにくいですが…。\nお題は自然言語のみで題意を理解出来るようにして欲しいと思います。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5953'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5953
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2008/03/05 14:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    var var1 = "foo";
    var var1 = var1 || 'bar';
    alert(var1);

    var var2 = var2 || 'bar';
    alert(var2);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5954'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5954
  :user_name: kozima
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2008/03/05 14:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>boundp, fboundp なのかなあ、と思ったのですが、それとは違うんでしょうか？正直なところお題の背景をあまり理解できていませんが……</p>\n<p>局所変数だったら初期化しないと
    nil なので or が使えますけど、あまり見かけない気がしますね。Emacs Lisp だとコマンドの引数に使うことがあるかも。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5955'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5955
  :user_name: mc
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/03/05 14:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  すいません、defvarの返り値は、変数名になるのですが、\r<br>前の書き方だと混乱を招くので、書き直しました。\n\t"
  :code: |
    ;; 初回
    (defvar var 'foo)

    var
    ;=&gt; foo

    ;; 以降
    (defvar var 'bar)

    var
    ;=&gt; foo
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5956'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5956
  :user_name: mc
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/405/
  :language: 
  :time: 2008/03/05 15:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  自分もboundpもありかと思ったのですが、\r<br>シンボルの値となると、また別の話になってくる\r<br>かと思いorを使った例を書きました。\r<br>Perlは良く知らないので外しているかもしれませんが…。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5958'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5958
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/03/06 05:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">お題投稿者ではありませんが、勝手に答えると\r\n\r\n　my $var ||= 'foo';\r\n\r\nというコードは$varという変数がnilのときだけ'foo'を代入するもので\r\n「この不備」と言われているのはコード中のどこかで$varにnilが代入された場合に\r\n上記のコード部分で望まない代入が起きることでしょう。\r\n\r\n　$zero
    //= 25;\r\n\r\nこちらのコードなら確実に一度だけの初期化が行われるようです。\r\n\r\nこのコードの使い道は、と言えば、Cにおける手続き内でのstatic変数の同等機能の実現などが\r\n考えられます。\r\n\r\nという解釈の元に#5950を投稿しましたが、全然外してたりして。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5960'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5960
  :user_name: Otter
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/497/
  :language: Haskell
  :time: 2008/03/06 06:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>お題は変数の「デフォルト値」をセットするコードなので、「デフォルト値」以外をセットできないHaskellでは普通にイニシャライズすればオッケイ？</p>\n<p>それとは別に、スレッド間通信用のMVar型はnewEmptyMVarでもって、値のセットされていないインスタンスを手に入れられるので、MVarでやってみました。</p>\n\n\t"
  :code: |
    module Main
        where

    import Control.Concurrent
    import Control.Monad

    uninitedMVar :: IO (MVar Int)
    uninitedMVar = newEmptyMVar

    initedMVar :: IO (MVar Int)
    initedMVar = newMVar 4

    setIfEmpty :: MVar Int -&gt; Int -&gt; IO ()
    setIfEmpty em i = do
        fEmpty &lt;- isEmptyMVar em
        if (fEmpty) then
            tryPutMVar em i &gt;&gt; return ()
            else
                return ()

    setAndPrint :: MVar Int -&gt; IO()
    setAndPrint em = do
        setIfEmpty em 7
        i &lt;- takeMVar em
        putStrLn $ show i

    i = 4

    main = do
        print i
        uninitedMVar &gt;&gt;= setAndPrint
        initedMVar &gt;&gt;= setAndPrint
    ==&gt;
    4
    7
    4
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5961'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5961
  :user_name: Otter
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/497/
  :language: Haskell
  :time: 2008/03/06 06:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>if文きらいです...</p>\n\n\t"
  :code: |
    module Main
        where

    import Control.Concurrent
    import Control.Monad

    uninitedMVar :: IO (MVar Int)
    uninitedMVar = newEmptyMVar

    initedMVar :: IO (MVar Int)
    initedMVar = newMVar 4

    setIfEmpty :: MVar Int -&gt; Int -&gt; IO ()
    setIfEmpty em i = isEmptyMVar em &gt;&gt;= \fEmpty -&gt; when (fEmpty) $ putMVar em i

    setAndPrint :: MVar Int -&gt; IO()
    setAndPrint em = do
        setIfEmpty em 7
        takeMVar em &gt;&gt;= putStrLn.show

    i = 4 --immutable

    main = do
        print i
        uninitedMVar &gt;&gt;= setAndPrint
        initedMVar &gt;&gt;= setAndPrint
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5963'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5963
  :user_name: nobsun
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2008/03/06 06:56 GMT
  :vote_count: '6'
  :vote_score: '6'
  :body: "\n\t  <pre class=\"compact\">ある言語でサポートされている機能が，別の言語でどのようにサポートされているか\r\nあるいはどのように代替するかは興味が尽きないですね．\r\n\r\nただ，言語の機能を実際にそれが必要なプログラミングの場面あるいは何故その機能\r\nが必要なのかという理由と切り離してしまうと，プログラミングスタイルの全然違う\r\n言語では意味をなさなくなってしまうことがあります．たとえば，「変数の初期化」\r\nの場合Perlでdefined-or演算子が必要な理由は自明かもしれませんが，他の言語では\r\n自明ではない場合がありそうに思います．あるいは，「変数の初期化」ということ自\r\n体に意味がない言語，さらに，「変数」という言葉が指す概念がPerlとは違うものも\r\nあるでしょう．\r\n\r\n〜言語には〜というプログラミングをする場面で，〜という機能を使って，〜という\r\n問題点を解決するけれど，他の言語ではどうしてるのか？\r\n\r\nてな感じの問いかけになっているより幅広い言語のやり方を知ることができるのでは\r\nないかと思います．\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5973'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5973
  :user_name: kkobayashi
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/03/06 16:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Perlではmy宣言された変数はそもそも未定義のはずですから、\r\n\"my $var
    ||= 'foo';\"というコードの意図は私もうまく解釈できません。\r\n\r\n||=や//=(Defined-or)を使いそうなシチュエーションとしては、\r\n可変のパラメーターを使用して変数の初期化を行いたいような場合\r\n（パラメーターがセットされていればその値で初期化し、セットされていなければ\r\nデフォルトの値を使用する）\r\nなのかな？とお題を解釈しました。\r\n\r\nsub
    function{\r\n    my $var = shift;\r\n    $var ||= 'foo';\r\n}\r\n\r\nとか。\r\n\r\n「不備」というのは、$varに\"0\"や空文字が入っていた場合でも\r\n論理値が偽になってしまうので「未定義」と区別が出来ない・・・\r\nということでいいのですよね？\r\n（BBSなどで、名前を「0」にすると「名前を入れてください」というエラーになるものが\r\n結構あったような）\r\n\r\nRでは、missing()を使って引数に値がセットされているかどうかをチェックします。\r\nPerlみたいに1演算子で・・・という便利なものはなさそうです。\r\n</pre>\n\t"
  :code: |
    f &lt;- function(var){
        if(missing(var)){
            var &lt;- 'foo'
        }
        var
    }

    &gt; f()
    [1] "foo"
    &gt; f("")
    [1] ""
    &gt; f(0)
    [1] 0
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5976'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5976
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: PHP
  :time: 2008/03/07 07:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>同じくif文が嫌いです。</p>\n\n\t"
  :code: |
    $var = $_REQUEST['var'];
    $var = (empty($var))? 'bar' : $var;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5981'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5981
  :user_name: Nemo
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/03/07 14:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PostScript における「変数」というのが微妙なところですが、\r\nカレント辞書に名前と値のペアを登録することだと解釈しました。\r\n\r\nGS&gt;/a
    10 def\r\nGS&gt;/a 20 DefaultValue \r\nGS&gt;/b 30 DefaultValue \r\nGS&gt;a =\r\n10\r\nGS&gt;b
    =\r\n30\r\n</pre>\n\t"
  :code: |
    %!PS
    /DefaultValue { % Symbol val DefaultValue -
      currentdict 2 index known {
        pop pop
      } {
        def
      } ifelse
    } bind def
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5982'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5982
  :user_name: margarite
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/741/
  :language: Perl
  :time: 2008/03/07 16:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Perlが無かったので投稿します。\n……って、あれ？</p>\n\n\t"
  :code: |
    my $var1 = (!defined $var1) ?  'foo' : $var1;
    my $var2 = 'foo' unless defined $var2;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5986'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5986
  :user_name: あにす
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2008/03/08 09:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">つまり定数を宣言すればよいということでしょうか…。\r\nconst string hoge
    = \"piyo\";\r\nこれだと宣言時に値が確定してないときには具合が悪いですね。\r\nこんなのはどうでしょう？\r\n\r\nわかりにくいですね…。</pre>\n\t"
  :code: |
    string hoge;
    hoge = hoge == "" ? "piyo" : hoge;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5987'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5987
  :user_name: あにす
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2008/03/08 09:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すみません。これだとコンパイル出来ませんね。</pre>\n\t"
  :code: |
    string hoge = "";
    hoge = hoge == "" ? "piyo" : hoge;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5991'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5991
  :user_name: silverwire
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/646/
  :language: Bash
  :time: 2008/03/08 17:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">シェルスクリプトの場合、環境変数を unsetしてしまったり、値に空文字列をセットして\r\nいたとしても、変数展開演算子を使用することで想定外の挙動を回避することができます。\r\n\r\n#
    なお、 Solarisの /bin/shは ~を実装していないので、以下の例については注意が必要\r\n# です。</pre>\n\t"
  :code: |
    rm -rf ${HOME:=~}/tmp/*
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5992'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5992
  :user_name: silverwire
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/03/08 18:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">バッチでは、if文に defined条件を指定することで変数が定義されているかどうか調べる\r\nことができます。\r\n\r\n使いどころは様々ですが、一例を挙げれば、Windows
    NTとWindows 2000以降の cmd.exeの\r\n実装の差異を吸収することが可能です。\r\n\r\n  e.g.\r\n    Windows
    NTの場合\r\n      C:\\&gt;echo %DATE%\r\n      %DATE%           &lt;- 環境変数DATEは実装されていないため、変数展開されない。\r\n\r\n
    \     C:\\&gt;date.bat\r\n      2008/03/09\r\n\r\n    Windows 2000の場合\r\n      C:\\&gt;echo
    %DATE%\r\n      2008/03/09\r\n\r\n      C:\\&gt;date.bat\r\n      2008/03/09</pre>\n\t"
  :code: |
    :: date.bat
    @echo off
      setlocal
        if not defined DATE for /f %%d in ('date /t') do set DATE=%%d
        echo %DATE%
      endlocal
    goto :EOF
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5994'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5994
  :user_name: kozima
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2008/03/09 11:11 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>確かに、用途を考えてみるとそちらの方が近いような気がしますね。</p>\n<p>お題への答えとしては引数リストの initform,
    svar もアリかも。</p>\n\n\t"
  :code: "(defun foo (&amp;optional (var \"foo\")) (if var (write var)))\n(defun bar
    (&amp;optional (var nil sv)) (if sv (write var)))\n\n(dolist (form '((foo) (foo
    \"foobar\") (foo nil)\n                (bar) (bar \"foobar\") (bar nil)))\n  (format
    t \"~&amp;~S prints: \" form)\n  (eval form))\n\n#|\n実行結果:\n\n(FOO) prints: \"foo\"\n(FOO
    \"foobar\") prints: \"foobar\"\n(FOO NIL) prints: \n(BAR) prints: \n(BAR \"foobar\")
    prints: \"foobar\"\n(BAR NIL) prints: NIL\n|#\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5999'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/5999
  :user_name: Jlake
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/658/
  :language: PHP
  :time: 2008/03/11 06:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    $var = isset($_REQUEST['var']) ? $_REQUEST['var'] : 'default';
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6000'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6000
  :user_name: Jlake
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/658/
  :language: Perl
  :time: 2008/03/11 06:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">use strict;\r\nがない場合</pre>\n\t"
  :code: |
    #my $var1 = 'foo' ;
    my $var2 = $var1 || 'bar';
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6019'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6019
  :user_name: r0c
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/396/
  :language: Python
  :time: 2008/03/18 12:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    var = var if 'var' in locals() else 'foo'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6027'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6027
  :user_name: todogzm
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/550/
  :language: Java
  :time: 2008/03/21 03:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>苦肉の策。String test; という変数宣言がある前提です。</p>\n\n\t"
  :code: |
    test = (test == null) ? "abc" : test;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6176'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6176
  :user_name: Dubhead
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/785/
  :language: D
  :time: 2008/04/15 04:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Dでも、変数はすべて初期化されます。\r\n\r\nなお、浮動小数点型の変数はnan (not a number) で初期化され、これを「!&lt;&gt;=」という演算子でチェックすることができます。\r\n以下の例ではuninitializedと出力されます。\n\t"
  :code: |
    import std.stdio;

    void main()
    {
        float foo;

        if (foo !&lt;&gt;= float.nan) {
            writefln("uninitialized");
        }
        else {
            writefln("initialized to some value");
        }
    }
  :tags:
  - D
  :references:
    :url: 
    :title: 
- :id: '6232'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6232
  :user_name: syat
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/766/
  :language: SQL
  :time: 2008/04/29 11:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  coalesce はSQL標準の関数で、リスト中の NULL じゃない初めの値を返します。\r<br>読み方は コゥァレス みたいな感じで、後ろのほうにアクセントを。\r<br>お題の意味からはちょっと外れてるかも。\r<br><br>SQLでは初期値は NULL です。\r<br>三値論理とかいう独特のルールを持つため、初心者が苦しみます。\n\t"
  :code: |
    SELECT id, COALESCE(name, '名無しさん') name FROM namelist ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6258'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6258
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/05/04 12:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>#5963\n#5973\nを、見た感じでは、初回起動時に初期化されて、２度と初期化しない。と解釈しました。</p>\n\n\t"
  :code: |
    static char *Var = "Foo";/*書き換え不可能な文字列"Foo"がセットされる。はず。
    ポインタの値は変更できます。さらに保持されます。*/
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6303'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6303
  :user_name: susu
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/05/19 06:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  refとoptionでシミュレート。\n\t"
  :code: |
    type 'a t = 'a option ref

    let mkvar () = (ref None:'a t)
    let get (x:'a t) = !x
    let set_normal (x:'a t) y = (x := Some y)
    let set_defor (x:'a t) y =
      match !x with
      | None -&gt; x := Some y
      | Some _ -&gt; ()

    let (//=) = set_defor;;

    (*
      let x = mkvar ();;
      x //= 1;  get x;; (* Some 1*)
      x //= 2;  get x;; (* Some 1*)
    *)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6436'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6436
  :user_name: lunlumo
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/813/
  :language: 
  :time: 2008/06/04 10:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  &gt;　my $var ||= 'foo';\r<br>&gt;というコードは$varという変数がnilのときだけ'foo'を代入するもので\r<br><br>　であれば余り問題は無いのですが，このコードは以下のコードと同じ意味になります。\r<br><br>my $var = $var || 'foo'; #||は短絡演算子\r<br><br>　問題中にある様に変数の宣言と一緒にやる場合には然程問題になりませんが，perlでは0は偽として評価されるので，値が設定されていない場合に初期値を設定する意図で使用するケースで，以下の様に問題が出る場合があるのです。\r<br><br>my $var;\r<br>[..snip..]\r<br>$var = 0;\r<br>[..snip..]\r<br>$var ||= 1; #0が設定されている場合は0のままとするつもり\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6567'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6567
  :user_name: turugina
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/06/24 01:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">XSLTでは変数は variable 要素で宣言します。\r\n内容を指定しない場合は、指定した型によって\r\n空の～～(空リスト、空文字列など)になります。\r\n\r\nというわけで、変数は宣言と同時に必ず初期化されています。\r\nというか、変数の内容を変更できないので、\r\n宣言と同時に初期値を放り込まざるをえません。\r\n\r\n一方、template
    呼び出しなどで param 要素によるパラメタが利用できます。\r\nパラメタは呼び出し側で指定されなかった場合のデフォルト値を指定できます。\r\n(デフォルト値の指定がない場合は変数と同様、空の～～になります)\r\n\r\nパラメタも変数と同様、内容の変更はできません。</pre>\n\t"
  :code: "&lt;xsl:stylesheet version=\"2.0\"\n  xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n
    \ xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n  &gt;\n\n  &lt;xsl:output method=\"text\"
    /&gt;\n\n  &lt;!-- global variable --&gt;\n  &lt;xsl:variable name=\"hoge\" as=\"xs:integer\"
    select=\"5\" /&gt;\n\n  &lt;xsl:template match=\"/\"&gt;\n    &lt;!-- local variable
    --&gt;\n    &lt;xsl:variable name=\"hige\" as=\"element()\"&gt;\n      &lt;parent&gt;&lt;child&gt;baby&lt;/child&gt;&lt;/parent&gt;\n
    \   &lt;/xsl:variable&gt;\n    \n    &lt;!-- call template without parameters
    --&gt;\n    &lt;xsl:call-template name=\"func\" /&gt;\n\n    &lt;!-- call template
    with parameters --&gt;\n    &lt;xsl:call-template name=\"func\"&gt;\n      &lt;xsl:with-param
    name=\"param1\"&gt;6&lt;/xsl:with-param&gt;\n      &lt;xsl:with-param name=\"param2\"
    as=\"xs:string*\"&gt;\n        &lt;xsl:sequence select=\"('foo','bar','baz')\"
    /&gt;\n      &lt;/xsl:with-param&gt;\n    &lt;/xsl:call-template&gt;\n  &lt;/xsl:template&gt;\n\n
    \ &lt;xsl:template name=\"func\"&gt;\n    &lt;!-- parameters --&gt;\n    &lt;xsl:param
    name=\"param1\" as=\"xs:integer\"&gt;7&lt;/xsl:param&gt;\n    &lt;xsl:param name=\"param2\"
    as=\"xs:string*\" /&gt;\n  &lt;/xsl:template&gt;\n\n&lt;/xsl:stylesheet&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6668'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6668
  :user_name: 匿名
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/4/
  :language: D
  :time: 2008/07/05 07:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ああ、そうか</p>\n<p>そもそもコンパイル系言語では変数が宣言されてないとコンパイル時エラーになるので「未定義の変数を操作」なんて状況自体が有り得ないわけですが、\n必ず実行できるスクリプト系の言語では有り得るんですね。\nそれがどんな問題を引き起こすのかまでは分かりませんが、defined-or演算子が必要なのであろうことは分かります。\nとなるとD言語では「コンパイラが検出してくれるので必要ない」が正解かな。</p>\n<p>ちなみにD言語では基本的に宣言した変数は全て初期化されますが、実行速度を重視する場合は初期化しないこともできます。\nまた、typedefで新しく型を定義するときにデフォルトの初期値を指定できます(変な言い方ですが)。\n問題と似たようなケースで使えそうです。</p>\n\n\t"
  :code: |
    import std.stdio;

    //デフォルトの初期値
    typedef int myint = 100;

    void main()
    {
      int a;
      myint b;
      //未初期化の変数を宣言
      myint c = void;

      //"a=0 b=100 c=(不定)"
      writefln("a=%d b=%d c=%d",a,b,c);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6678'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6678
  :user_name: nemo_kaz
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/837/
  :language: Groovy
  :time: 2008/07/06 02:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    def var ='foo'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6755'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/6755
  :user_name: leque
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/07/17 00:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Perl では 0 や空文字列も偽と判断されるのでこのような演算子が必要なんですね。 Scheme では R6RS で (define
    var) のような書き方もできるようになりましたが、これも何らかの未規定の値が設定されるだけで、それを利用したプログラムを書くことはできません。</p>\n<p>このような場合は仮の値として
    #f を入れておくのをよく見掛けます。</p>\n\n\t"
  :code: |
    (define var #f)

    (some-function (or var 100))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7697'
  :parent_id: '167'
  :url: http://ja.doukaku.org/comment/7697
  :user_name: lunlumo
  :user_url: /web/20081122151832/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2008/09/21 11:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>　scalaの場合変数宣言時に値を設定する必要があるので，未初期化時に値を設定するやり方は用意されていません。Option型は用意されているので，Noneが設定されている場合に限り値を設定する処理を参考までに挙げておきます。</p>\n</div>\n\t"
  :code: |
    class DefinedOr[T] {
        var    _v:Option[T] = None
        def this(n:T) = { this(); this.v = n }
        def v:Option[T] = _v
        def v_=(v:T) = { _v = Some(v) }
        def ||=(n:T) = { v = v match { case None =&gt; n; case Some(x) =&gt; x } }
    }
    object Main {
        def main(args:Array[String]) = {
            var    d:DefinedOr[Int] = new DefinedOr
            println(d.v)
            d ||= 0
            println(d.v)
            d ||= 1
            println(d.v)
            d = new DefinedOr(2)
            println(d.v)
            d ||= 0
            println(d.v)
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
