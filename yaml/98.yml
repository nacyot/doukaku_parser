---
:id: '98'
:title: ２進数の記述
:comments:
- :id: '4345'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4345
  :user_name: yappy
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/533/
  :language: C
  :time: 2007/11/22 17:17 GMT
  :vote_count: '6'
  :vote_score: '4'
  :body: "\r\n\t  　コンピューターの原理は2進数だというのに、多くのプログラミング言語で8進数や16進数しか記述できないのは少し変だとは思いませんか？\r<br>　そこで、ソース中に２進数を定数として書く方法、またはその代替手段を考えてください。\r<br><br>ある程度の評価基準を示します(できるところまでで構いません)。\r<br>・2進数の表示方法は0と1\r<br>・桁数は可変長\r<br>・コンパイル等の後に最適化等によって定数に変換されることが見込まれる\r<br><br>Cで関数として実装したものを示しておきます。\r<br>"
  :code: |
    int bin(int b1, int b2, int b3, int b4, int b5, int b6, int b7, int b8){
        return b1&lt;&lt;7 | b2 &lt;&lt;6 | b3&lt;&lt;5 | b4&lt;&lt;4 | b5&lt;&lt;3 | b6&lt;&lt;2 | b7&lt;&lt;1 | b8;
    }

    int byte = bin(0, 1, 1, 0, 1, 0, 0, 1);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4552'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4552
  :user_name: sumim
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/12/02 11:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk では 2r01101001 という書式で二進数のリテラル記述が可能です。\n\t"
  :code: |
    2r01101001   "=&gt; 105 "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4553'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4553
  :user_name: anekos
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/170/
  :language: Haskell
  :time: 2007/12/02 11:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    bin :: [Integer] -&gt; Integer
    bin = foldl (\x y -&gt; x * 2 + y) 0

    -- Prelude&gt; bin[0, 1, 1, 0, 1, 0, 0, 1]
    -- 105
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4554'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4554
  :user_name: SiroKuro
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/02 11:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  オーソドックスに。C# だとコンパイル時計算って……むりだったような気が……。\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            Console.WriteLine(Bin(01001001));   // 73
            Console.WriteLine(Bin(01101001));   // 105
        }
        static int Bin(uint octet) {
            int digit = 1, bin = 0;
            while(octet != 0) {
                if ((octet % 10) != 0) bin |= digit;
                digit &lt;&lt;= 1;
                octet /= 10;
            }
            return bin;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4555'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4555
  :user_name: SiroKuro
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/02 11:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  んー。やっぱり C# なら文字列として持ってたほうが良いかな。\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            Console.WriteLine(Bin("01001001"));   // 73
            Console.WriteLine(Bin("01101001"));   // 105
        }
        static int Bin(string num) {
            return Convert.ToInt32(num, 2);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4556'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4556
  :user_name: dpp
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/433/
  :language: Python
  :time: 2007/12/02 11:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">リテラルとしての2進数表現は現在ありませんが、以下のように書く事ができます。\r\n(Python3.0では二進数表記も使えます)</pre>\n\t"
  :code: |
    i = int('01101001', 2) # 105

    # 0,1以外はエラー
    i = int('11111112', 2) # ValueError: invalid literal for int() with base 2: '1112'

    i = 0b01101001 # python3.0
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4557'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4557
  :user_name: anekos
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/170/
  :language: Ruby
  :time: 2007/12/02 11:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>リテラルで書けます。</p>\n\n\t"
  :code: |
    p 0b01101001  #=&gt; 105
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4558'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4558
  :user_name: dpp
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/433/
  :language: D
  :time: 2007/12/02 11:52 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">D言語では2進リテラルが使えます。</pre>\n\t"
  :code: |
    import std.stdio;

    int main(){
        writefln("%d", 0b01101001);

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4559'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4559
  :user_name: fujidig
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/507/
  :language: HSP
  :time: 2007/12/02 12:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  HSP にはソース中に２進数を定数として書く方法として '0b' や '%' のプレフィックスがあります。\n\t"
  :code: |
    mes 0b01101001
    mes %01101001
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4560'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4560
  :user_name: anekos
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/170/
  :language: Haskell
  :time: 2007/12/02 12:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>リストで書くのはめんどくさいので。</p>\n\n\t"
  :code: |
    b :: Integer -&gt; Integer
    b 0 = 0
    b x = b' x + 2 * b (div x 10)
        where b' x = if odd x then 1 else 0

    main = print $ b 01101001  -- 10
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4561'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4561
  :user_name: kozima
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/02 12:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Common Lisp は #b で二進数が書けます。Emacs Lisp, Scheme でも同じ書き方ができます。</p>\n\n\t"
  :code: |
    #b1010 ; =&gt; 10
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4562'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4562
  :user_name: 匿名
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/12/02 12:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なでしこにはプリプロセスがあるのにマクロがなかったりするので、関数で表現するしかないようです。</p>\n\n\t"
  :code: |
    BIN("1010")を表示
    ●BIN(x)
        sとは整数;nとは整数=文字数(x)
        (文字列分解(x))で反復
        　　n=n-1;s=s+(対象*2^n)
        sで戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4563'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4563
  :user_name: anekos
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/170/
  :language: Haskell
  :time: 2007/12/02 12:52 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Template Haskell を使ってみた。\n2ファイルあります。</p>\n\n\t"
  :code: "{- binmain.hs -}\n\nimport Bin\n\nmain = print $(b 01101001)\n\n\n\n{- bin.hs
    -}\n\nmodule Bin (b) where\n\nimport Language.Haskell.TH\n\nbin :: Integer -&gt;
    Integer\nbin 0 = 0\nbin x = bin' x + 2 * bin (div x 10)\n    where bin' x = if
    odd x then 1 else 0\n\nb x = litE $ IntegerL $ bin x\n\n{-\n&gt;&gt; ghc --make
    -fth binmain.hs \n&gt;&gt; ./binmain\n105\n-\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4565'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4565
  :user_name: dankogai
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/12/02 13:08 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  \n<p>この話題、すでに\n</p>\n<ul>\n<li>\n     <a href=\"/web/20081201184219/http://blog.livedoor.jp/dankogai/archives/50928817.html\">404
    Blog Not Found:tips - 二進数表記まとめ</a>\n </li>\n</ul>\n<p>でやっちゃっているのですが念のため。\n</p>\n<p>Dan
    the Perl Monger\n</p>\n\n\n\n\t"
  :code: |
    # 引数チェックあり
    sub bin{ eval  "0b" . join('', grep /^[01]$/, @_)  };
    # なし
    sub bin{ eval  "0b" . join('',  @_)  };
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4566'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4566
  :user_name: xsd
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/154/
  :language: OCaml
  :time: 2007/12/02 13:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>OCamlもliteralで二進数が書けます。</p>\n\n\t"
  :code: |
    # 0b01101001;;
    - : int = 105
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4567'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4567
  :user_name: dankogai
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/26/
  :language: JavaScript
  :time: 2007/12/02 13:13 GMT
  :vote_count: '3'
  :vote_score: '-1'
  :body: "\n\t  \n<p>考え方としては<a href=\"/web/20081201184219/http://ja.doukaku.org/comment/4565/\">#4565</a>と同じ。\n</p>\n<p>Dan
    the JavaScripter\n</p>\n\n\n\n\t"
  :code: |
    function bin(){
      var str = '';
      for (var i = 0, l = arguments.length; i &lt; l; i++) str += arguments[i]+0;
      return parseInt(str, 2);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4569'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4569
  :user_name: yuin
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/12/02 14:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>2進数のリテラルはありません。</p>\n\n\t"
  :code: |
    Integer.parseInt("1000", 2)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4570'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4570
  :user_name: cho45
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/579/
  :language: Ruby
  :time: 2007/12/02 14:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>最適化されませんがせっかくなので ruby1.9 で書いてみました。Enumerable によるメソッドチェイン部分だけが
    1.9 必要部分です。\n</p>\n<pre><code>ruby 1.9.0 (2007-11-21 patchlevel 0) [i686-linux]\n</code></pre>\n<p>Ruby
    ではメソッド呼び出しのカッコを省略できるのですが、文字列リテラルを最初の引数に書く場合にはさらに空白も省略できます (1.8 でも)。\n</p>\n\n\n\n\t"
  :code: |
    def b(str)
        str.reverse.each_char.with_index.inject(0) {|r,(s,i)|
            r |= s.to_i &lt;&lt; i
        }
    end

    p b"01101001"
    p  "01101001".to_i(2)
    p  0b1101001
  :tags:
  - ruby1.9
  :references:
    :url: 
    :title: 
- :id: '4571'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4571
  :user_name: matyr
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/343/
  :language: xtal
  :time: 2007/12/02 15:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  0b か 0B で始めると２進整数リテラル。\n\t"
  :code: |
    0b1010.p;
    // =&gt; 10

    0B0110_1001.p;
    // =&gt; 105 (アンダーバーは無視される)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4573'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4573
  :user_name: xsd
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/154/
  :language: C
  :time: 2007/12/02 16:22 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <pre class=\"compact\">コンパイル時の定数の畳み込みにこだわって、C++のtemplateを使ってみました。\r\n2進数8桁までの対応です。\r\n\r\nデフォルト引数の値を0にすると、引数省略したときに位が上がってしまうため、\r\n2という定数を引数が省略されたマークとして使い、桁ずらしを行っています。</pre>\n\t"
  :code: "template &lt;int a = 2, int b = 2, int c = 2, int d = 2, int e = 2, int
    f = 2, int g = 2, int h = 2&gt;\nstruct Bin {\n     enum {\n        v = (h !=
    2) ? ((((((a * 2 + b) * 2 + c) * 2 + d) * 2 + e) * 2 + f) * 2 + g) * 2 + h\n          :
    (g != 2) ?  (((((a * 2 + b) * 2 + c) * 2 + d) * 2 + e) * 2 + f) * 2 + g\n          :
    (f != 2) ?   ((((a * 2 + b) * 2 + c) * 2 + d) * 2 + e) * 2 + f\n          : (e
    != 2) ?    (((a * 2 + b) * 2 + c) * 2 + d) * 2 + e\n          : (d != 2) ?     ((a
    * 2 + b) * 2 + c) * 2 + d\n          : (c != 2) ?      (a * 2 + b) * 2 + c\n          :
    (b != 2) ?       a * 2 + b\n          : (a != 2) ?       a\n          : 0\n    };
    \n};\n\nvoid test()\n{\n    int n000 = Bin&lt;                      &gt;::v;\n
    \   int n001 = Bin&lt;                     1&gt;::v;\n    int n002 = Bin&lt;                  1,
    0&gt;::v;\n    int n005 = Bin&lt;               1, 0, 1&gt;::v;\n    int n010
    = Bin&lt;            1, 0, 1, 0&gt;::v;\n    int n021 = Bin&lt;         1, 0,
    1, 0, 1&gt;::v;\n    int n042 = Bin&lt;      1, 0, 1, 0, 1, 0&gt;::v;\n    int
    n085 = Bin&lt;   1, 0, 1, 0, 1, 0, 1&gt;::v;\n    int n170 = Bin&lt;1, 0, 1, 0,
    1, 0, 1, 0&gt;::v;\n}\n\n/*\n   コンパイル結果の一部\n  定数はコンパイル時に計算されてました。\n*/\n\n?test@@YAXXZ
    PROC NEAR                    ; test\n; File c:\\src\\cons\\dk98.cpp\n; Line 17\n
    \   push    ebp\n    mov    ebp, esp\n    sub    esp, 36                    ;
    00000024H\n; Line 18\n    mov    DWORD PTR _n000$[ebp], 0\n; Line 19\n    mov
    \   DWORD PTR _n001$[ebp], 1\n; Line 20\n    mov    DWORD PTR _n002$[ebp], 2\n;
    Line 21\n    mov    DWORD PTR _n005$[ebp], 5\n; Line 22\n    mov    DWORD PTR
    _n010$[ebp], 10        ; 0000000aH\n; Line 23\n    mov    DWORD PTR _n021$[ebp],
    21        ; 00000015H\n; Line 24\n    mov    DWORD PTR _n042$[ebp], 42        ;
    0000002aH\n; Line 25\n    mov    DWORD PTR _n085$[ebp], 85        ; 00000055H\n;
    Line 26\n    mov    DWORD PTR _n170$[ebp], 170        ; 000000aaH\n; Line 27\n
    \   mov    esp, ebp\n    pop    ebp\n    ret    0\n?test@@YAXXZ ENDP                    ;
    test\n"
  :tags:
  - VisualC++
  :references:
    :url: 
    :title: 
- :id: '4575'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4575
  :user_name: horiuchi
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2007/12/02 22:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>2進数のリテラル表記はないので</p>\n\n\t"
  :code: |
    Integer.parseInt("01101001", 2);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4577'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4577
  :user_name: 梅紫蘇
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/596/
  :language: C
  :time: 2007/12/03 04:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>カンマがいらない形で....。これ使うくらいなら素直にビットフィールドの構造体定義するか、std::bitset使うけど；；</p>\n\n\t"
  :code: |
    inline unsigned long bin(unsigned long n)
    {
        return ((((n % 100000000) / 10000000) * 0x80) |
                (((n %  10000000) /  1000000) * 0x40) |
                (((n %   1000000) /   100000) * 0x20) |
                (((n %    100000) /    10000) * 0x10) |
                (((n %     10000) /     1000) * 0x08) |
                (((n %      1000) /      100) * 0x04) |
                (((n %       100) /       10) * 0x02) |
                (((n %        10) /        1) * 0x01));
    }

    void func()
    {
        unsigned long n = bin(1000000);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4578'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4578
  :user_name: naoto
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/572/
  :language: Scheme
  :time: 2007/12/03 06:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Gaucheならそのまま書けますね。</p>\n\n\t"
  :code: |
    gosh&gt; #b01101001
    105
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4579'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4579
  :user_name: naoto
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/572/
  :language: 
  :time: 2007/12/03 06:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>GaucheならというかSchemeなら、でした。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4580'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4580
  :user_name: jijixi
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/582/
  :language: Erlang
  :time: 2007/12/03 06:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  Erlang なら 2 進数から 36 進数リテラルまで完備 :-)\n\t"
  :code: |
    Eshell V5.5.5  (abort with ^G)
    1&gt; 2#01101001.
    105
    2&gt; 36#01101001.
    2237295169
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4581'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4581
  :user_name: eban
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/97/
  :language: Bash
  :time: 2007/12/03 07:50 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <p>Bashの場合はbase#nという形式で表現します。</p>\r\n\n\t"
  :code: "$ echo $[2#11111111]\r\n255\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4582'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4582
  :user_name: odz
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/212/
  :language: C
  :time: 2007/12/03 08:06 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <p>C++ でやるのはちょっと前に話題になってましたね。\nでそれを参考にテンプレート特殊化とプリプロセッサマクロを使ったやつを。</p>\n<p>8進数リテラルを使うので桁数に限界があります。unsigned
    long long が 64bits の環境で22桁ほど。</p>\n\n\t"
  :code: |
    #include &lt;iostream&gt;

    template&lt;unsigned long long n, int base = 8&gt;
    struct binary {
        enum {
            value = (binary&lt;n / base&gt;::value &lt;&lt; 1) + (n % base == 1 ? 1 : 0)
        };
    };

    template&lt;&gt;
    struct binary&lt;0&gt; {
        enum {
            value = 0
        };
    };

    #define BIN(n) binary&lt;0 ## n ## ul&gt;::value

    int main()
    {
        std::cout &lt;&lt; BIN(1101001) &lt;&lt; std::endl; // =&gt; 105
        std::cout &lt;&lt; BIN(1111111111111111111111) &lt;&lt; std::endl; // =&gt; 4194303
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4585'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4585
  :user_name: こう。
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/134/
  :language: C
  :time: 2007/12/03 10:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>さっき同じこと実験しててハマりました。</p>\n<p>最上位が0の場合8進数として認識されます。</p>\n<p>ってことでマクロで修正。</p>\n<p>あと最適化されないけど、文字列版も</p>\n\n\t"
  :code: |
    /*bin_n(00111100)と書きます。
    */
    #define  bin_n(n) \
        ((((0##n%0100000000)/010000000)&lt;&lt;7)\
        +(((0##n%0010000000)/001000000)&lt;&lt;6)\
        +(((0##n%0001000000)/000100000)&lt;&lt;5)\
        +(((0##n%0000100000)/000010000)&lt;&lt;4)\
        +(((0##n%0000010000)/000001000)&lt;&lt;3)\
        +(((0##n%0000001000)/000000100)&lt;&lt;2)\
        +(((0##n%0000000100)/000000010)&lt;&lt;1)\
        +(((0##n%0000000010)/000000001)   ))

    /*文字列使用版
    こちらも同じくbin_s(00111100)と書きます。
    */
    #define bin_s(str)\
        (((#str[0]-'0')&lt;&lt;7)+((#str[1]-'0')&lt;&lt;6)+((#str[2]-'0')&lt;&lt;5)\
        +((#str[3]-'0')&lt;&lt;4)+((#str[4]-'0')&lt;&lt;3)+((#str[5]-'0')&lt;&lt;2)\
        +((#str[6]-'0')&lt;&lt;1)+#str[7]-'0')
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4588'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4588
  :user_name: naoto
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/572/
  :language: Scheme
  :time: 2007/12/03 12:42 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">なんとなく36進数まで対応してみました。\r\nもっと良い方法がありそうですが。\r\n\r\n10:user&gt;
    #,(r 2 \"01101001\")\r\n=&gt; 105\r\n11:user&gt; #,(r 16 \"ff\")\r\n=&gt; 255\r\n12:user&gt;
    #,(r 36 \"10\")\r\n=&gt; 36\r\n</pre>\n\t"
  :code: |
    (define-reader-ctor 'r
      (lambda (radix string)
        (string-&gt;number string radix)))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4589'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4589
  :user_name: 匿名
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/12/03 12:52 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  \n\t"
  :code: |
    bin = lambda *a: sum([1 &lt;&lt; i for i, j in enumerate(reversed(a)) if j])

    bin(0,1,1,0,1,0,0,1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4593'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4593
  :user_name: 梅紫蘇
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/596/
  :language: C
  :time: 2007/12/03 15:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>なるほど。\n先頭0付けると8進数って、0x付けると16進数ってぇのと大差ない感覚だったんですけど。</p>\n<p>マクロは、拡張も楽な感じ。（コードは試してません）</p>\n\n\t"
  :code: |
    #define bin_8(a)                bin_n(a)
    #define bin_16(a,b)             ((bin_8(a)&lt;&lt;8)|bin_8(b))
    #define bin_32(a,b,c,d)         ((bin_16(a,b)&lt;&lt;16)|bin_16(c,d))
    #define bin_64(a,b,c,d,e,f,g,h) ((bin_32(a,b,c,d)&lt;&lt;32)|bin_32(e,f,g,h))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4598'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4598
  :user_name: atsu-kan
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/600/
  :language: Other
  :time: 2007/12/04 01:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ビルトイン関数 bin2dec() があります．</p>\n\n\t"
  :code: |
    bin2dec('01101001')
  :tags:
  - Matlab
  :references:
    :url: /web/20081201184219/http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bin2dec.html
    :title: 'MATLAB Function Reference:  bin2dec'
- :id: '4599'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4599
  :user_name: atsu-kan
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/600/
  :language: Matlab
  :time: 2007/12/04 02:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ビルトイン関数 bin2dec() があります．</p>\n\n\t"
  :code: |
    bin2dec('01101001')
  :tags: []
  :references:
    :url: /web/20081201184219/http://www.mathworks.com/access/helpdesk/help/techdoc/ref/bin2dec.html
    :title: 'MATLAB Function Reference:  bin2dec'
- :id: '4604'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4604
  :user_name: yappy
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/533/
  :language: C
  :time: 2007/12/04 18:08 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  来てみたらもう次のお題が出てしまっていたので、用意していた私の案を公開します。\r<br><br>Cのマクロによる実装です。\r<br>引数に二進数表現を受け取り、#によってダブルクォーテーションでくくって文字列にします。\r<br>ここで、文字列リテラルのサイズ(NULL文字含む)がsizeof(\"str\")で取得できる(この場合4)を利用して、左の方が足りないときは0と見なします。そうでないなら文字コードの'0'と'1'で判定します。\r<br>#4585を任意文字数にした感じでしょうか。\n\t"
  :code: |
    /* 使用例 0を詰めても桁数が半端でも大丈夫 bintest.c */
    #include &lt;stdio.h&gt;
    #include "binary.h"

    int main(){
        printf("%u\n", bin(0111));
        printf("%u\n", bin(11111));
        printf("%u\n", bin(11111111111111111111111111111111));
    }


    /* ２進数記述マクロ binary.h */
    #ifndef BINARY_H_INCLUDE
    #define BINARY_H_INCLUDE

    #define bin(n) ((sizeof(#n)&lt;33?0:(#n[sizeof(#n)-33]-'0') &lt;&lt; 31) |\
    (sizeof(#n)&lt;32?0:(#n[sizeof(#n)-32]-'0') &lt;&lt; 30) |\
    (sizeof(#n)&lt;31?0:(#n[sizeof(#n)-31]-'0') &lt;&lt; 29) |\
    (sizeof(#n)&lt;30?0:(#n[sizeof(#n)-30]-'0') &lt;&lt; 28) |\
    (sizeof(#n)&lt;29?0:(#n[sizeof(#n)-29]-'0') &lt;&lt; 27) |\
    (sizeof(#n)&lt;28?0:(#n[sizeof(#n)-28]-'0') &lt;&lt; 26) |\
    (sizeof(#n)&lt;27?0:(#n[sizeof(#n)-27]-'0') &lt;&lt; 25) |\
    (sizeof(#n)&lt;26?0:(#n[sizeof(#n)-26]-'0') &lt;&lt; 24) |\
    (sizeof(#n)&lt;25?0:(#n[sizeof(#n)-25]-'0') &lt;&lt; 23) |\
    (sizeof(#n)&lt;24?0:(#n[sizeof(#n)-24]-'0') &lt;&lt; 22) |\
    (sizeof(#n)&lt;23?0:(#n[sizeof(#n)-23]-'0') &lt;&lt; 21) |\
    (sizeof(#n)&lt;22?0:(#n[sizeof(#n)-22]-'0') &lt;&lt; 20) |\
    (sizeof(#n)&lt;21?0:(#n[sizeof(#n)-21]-'0') &lt;&lt; 19) |\
    (sizeof(#n)&lt;20?0:(#n[sizeof(#n)-20]-'0') &lt;&lt; 18) |\
    (sizeof(#n)&lt;19?0:(#n[sizeof(#n)-19]-'0') &lt;&lt; 17) |\
    (sizeof(#n)&lt;18?0:(#n[sizeof(#n)-18]-'0') &lt;&lt; 16) |\
    (sizeof(#n)&lt;17?0:(#n[sizeof(#n)-17]-'0') &lt;&lt; 15) |\
    (sizeof(#n)&lt;16?0:(#n[sizeof(#n)-16]-'0') &lt;&lt; 14) |\
    (sizeof(#n)&lt;15?0:(#n[sizeof(#n)-15]-'0') &lt;&lt; 13) |\
    (sizeof(#n)&lt;14?0:(#n[sizeof(#n)-14]-'0') &lt;&lt; 12) |\
    (sizeof(#n)&lt;13?0:(#n[sizeof(#n)-13]-'0') &lt;&lt; 11) |\
    (sizeof(#n)&lt;12?0:(#n[sizeof(#n)-12]-'0') &lt;&lt; 10) |\
    (sizeof(#n)&lt;11?0:(#n[sizeof(#n)-11]-'0') &lt;&lt; 9) |\
    (sizeof(#n)&lt;10?0:(#n[sizeof(#n)-10]-'0') &lt;&lt; 8) |\
    (sizeof(#n)&lt;9?0:(#n[sizeof(#n)-9]-'0') &lt;&lt; 7) |\
    (sizeof(#n)&lt;8?0:(#n[sizeof(#n)-8]-'0') &lt;&lt; 6) |\
    (sizeof(#n)&lt;7?0:(#n[sizeof(#n)-7]-'0') &lt;&lt; 5) |\
    (sizeof(#n)&lt;6?0:(#n[sizeof(#n)-6]-'0') &lt;&lt; 4) |\
    (sizeof(#n)&lt;5?0:(#n[sizeof(#n)-5]-'0') &lt;&lt; 3) |\
    (sizeof(#n)&lt;4?0:(#n[sizeof(#n)-4]-'0') &lt;&lt; 2) |\
    (sizeof(#n)&lt;3?0:(#n[sizeof(#n)-3]-'0') &lt;&lt; 1) |\
    (sizeof(#n)&lt;2?0:(#n[sizeof(#n)-2]-'0') &lt;&lt; 0))

    #endif


    /* binary.h生成プログラム binary.c */
    #include &lt;stdio.h&gt;

    #define BIT 32

    int main(){
        int i;
        freopen("binary.h", "w", stdout);
        puts("#ifndef BINARY_H_INCLUDE");
        puts("#define BINARY_H_INCLUDE");
        puts("");

        printf("#define bin(n) (");
        for(i=0; i&lt;BIT; i++){
            printf("(sizeof(#n)&lt;%d?0:(#n[sizeof(#n)-%d]-'0') &lt;&lt; %d)", BIT-i+1, BIT-i+1, BIT-i-1);
            if(i != BIT-1)
                printf(" |\\\n");
        }
        printf(")\n");

        puts("");
        puts("#endif");
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4607'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4607
  :user_name: Kiske
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/202/
  :language: PHP
  :time: 2007/12/05 01:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>リテラル表記は出来ませんがbindec関数が用意されてます。</p>\n\n\t"
  :code: |
    $i = bindec("01101001"); // 105

    // 0,1のみをgrepした計算結果になる
    $i = bindec("01101201"); // 53 = 0110101
  :tags:
  - php
  :references:
    :url: 
    :title: 
- :id: '4680'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4680
  :user_name: 匿名
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/12/08 02:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>基準の最後に「定数に変換される」がありますので、一応、定数として宣言したほうが題意にあっているのではないかと考えました。</p>\n\n\t"
  :code: |
    public class Sample {
        public static final int B01101001 = Integer.parseInt("01101001", 2);

        public static void main(String[] args) {
            System.out.println(B01101001);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4682'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4682
  :user_name: 匿名
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/4/
  :language: PostScript
  :time: 2007/12/08 06:35 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  PostScript も 2 進数から 36 進数まで書けますよ\r\n\n\t"
  :code: |
    GS&gt;2#100 =
    4
    GS&gt;36#wxyz =
    1537019
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4709'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4709
  :user_name: omoikani
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/09 18:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>リテラル表記はないので。</p>\n\n\t"
  :code: |
    val b = (valOf o StringCvt.scanString (Int.scan StringCvt.BIN));
    b"01101001" (* 105 *)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4775'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4775
  :user_name: yohei
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/415/
  :language: Prolog
  :time: 2007/12/12 07:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>SWI-prologでは，ISO準拠の0bを付けた書き方と\nEdinburgh Prologの2～36の基数を指定した書き方があります．</p>\n\n\t"
  :code: |
    ?- X is 0b01101001, Y is 2'01101001.
    X = 105,
    Y = 105
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '4776'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4776
  :user_name: eban
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/97/
  :language: 
  :time: 2007/12/12 08:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>すみません。言語を入れ忘れてしまったようです。\nBashに直してください。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4825'
  :parent_id: '98'
  :url: http://ja.doukaku.org/comment/4825
  :user_name: pooq
  :user_url: /web/20081201184219/http://ja.doukaku.org/user/606/
  :language: 
  :time: 
  :vote_count: 
  :vote_score: 
  :body: ''
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
