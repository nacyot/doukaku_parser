---
:id: '185'
:title: コメントの削除
:comments:
- :id: '6534'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6534
  :user_name: nobsun
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2008/06/18 01:56 GMT
  :vote_count: '5'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">ソースコードからコメント部分を削除するプログラム decomment を書いてください．\r\nすくなくとも，decomment
    を記述したのと同じ言語で書かれているソースコードが\r\n扱えるようにしてください．\r\n\r\n\r\n\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6544'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6544
  :user_name: 匿名
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/06/21 20:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>一番のりを狙って書きました。起動パラメータに与えられたJavaのソースファイルからコメントを削除し、\".out\" 拡張子つきのファイルに書き込みます。</p>\n\n\t"
  :code: "import java.util.regex.*;\nimport java.io.*;\n\npublic class Decomment {\n\n
    \   static final Pattern COMMENT1 = Pattern.compile(\"/\\\\*.*?\\\\*/\", Pattern.DOTALL);\n
    \   static final Pattern COMMENT2 = Pattern.compile(\"//.*\");\n    \n    public
    static void main(String[] args) throws IOException {\n        for (String name
    : args) {\n            BufferedReader r = new BufferedReader(new FileReader(name));\n
    \           FileWriter w = new FileWriter(name + \".out\");\n            StringBuilder
    sb = new StringBuilder();\n            String line;\n            while ((line
    = r.readLine()) != null) {\n                sb.append(line).append(System.getProperty(\"line.separator\"));\n
    \           }\n            String s1 = COMMENT1.matcher(sb).replaceAll(\"\");\n
    \           String result = COMMENT2.matcher(s1).replaceAll(\"\");\n            w.write(result);\n
    \           w.close();\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6545'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6545
  :user_name: Nemo
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/06/21 20:26 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>言語仕様的には PostScript では%以降がコメントになります。\nただしプリンタや処理系によってはコメント中の情報を用いて処理をする場合があります...</p>\n\n\t"
  :code: |
    %!PS

    /Decomment { % (filename) Decomment -
        true exch
        (r) file
        {
            % outputflag file
            dup read
            not { exit } if
            dup 37 eq {
                3 -1 roll pop false 3 1 roll
            } if
            dup dup 10 eq exch 13 eq or {
                3 -1 roll pop true 3 1 roll
            } if
            2 index {
                ( ) dup 0 4 -1 roll put
                print
            } {
                pop
            } ifelse
        } loop
        pop pop
    } bind def

    %---- Test Code ----
    (decomment.ps) Decomment
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6547'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6547
  :user_name: 匿名
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/06/21 21:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>文字列リテラルに対応していませんでした。あわてると駄目ですね。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6548'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6548
  :user_name: 匿名
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/06/21 22:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>文字列リテラル対応版です。</p>\n\n\t"
  :code: "import java.util.regex.*;\nimport java.io.*;\n\npublic class Decomment {\n
    \   static final String LITERAL = \"\\\"(?:\\\\\\\\.|[^\\\"])*\\\"\";\n    static
    final String COMMENT1 = \"(?s:/\\\\*.*?\\\\*/)\";\n    static final String COMMENT2
    = \"//.*\";\n    static final Pattern DECOM_PAT = Pattern.compile(\"(\" + LITERAL
    + \")|\" + \n            COMMENT1 + \"|\" + COMMENT2);\n    static final String
    LINE_SEPARATOR = System.getProperty(\"line.separator\");\n    \n    public static
    void main(String[] args) throws IOException {\n        for (String name : args)
    {\n            BufferedReader r = new BufferedReader(new FileReader(name));\n
    \           FileWriter w = new FileWriter(name + \".out\");\n            StringBuilder
    sb = new StringBuilder();\n            String line;\n            while ((line
    = r.readLine()) != null) {\n                sb.append(line).append(LINE_SEPARATOR);\n
    \           }\n            String result = DECOM_PAT.matcher(sb).replaceAll(\"$1\");\n
    \           w.write(result);\n            w.close();\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6549'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6549
  :user_name: sumim
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/06/21 23:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n<p>与えられた Smalltalk コードを抽象構文木に落とし、それに含まれるコメントノードを削除してから文字列に戻して出力しました（実際は、抽象構文木の初回出力時にそこからコメントノードが削除される副作用を流用）。</p>\n\n\t"
  :code: "| decomment |\ndecomment := [:sourceStr |\n    | dummySel tree |\n    dummySel
    := 'dummy '.\n    tree := Parser new\n        parse: (dummySel, sourceStr) readStream\n
    \       class: UndefinedObject\n        noPattern: false\n        context: nil\n
    \       notifying: nil\n        ifFail: [^nil]. \n    (tree printString; printString)
    allButFirst: dummySel size].\n\n^decomment value: '\"comment1\" ^ self \"comment2\"'
    \  \"=&gt; '    ^ self' \"\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6550'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6550
  :user_name: syat
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/766/
  :language: Brainf
  :time: 2008/06/22 02:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Brainf*ckで。入力された文字のうち、コメント（実行可能な８文字以外全部）を削除します。終了せず、ひたすら入力を待ち続けるので適当に止めてください。</p>\n<p>Brainfuck
    Developerで実行する場合は複数行の入力ができませんが、[Extras] - [Set Input File ...] から入力ファイルを指定できます。すばらしいツールです。あとは言語が良けりゃぁ言うことなし。</p>\n\n\t"
  :code: |
    +[&gt;
      ,                      # {1} = input char
      &gt;+&lt;                    # {2} = 1
      [-&gt;&gt;+&gt;+&lt;&lt;&lt;]            # {3:4} = !{1}
      &gt;&gt;&gt;
      &gt;++++++[-&lt;-------&gt;]&lt;-  # {4} = {4} minus 43
      [                      # if {4} not 43 (plus)
        -[                   # if {4} not 44 (comma)
          -[                 # if {4} not 45 (minus)
            -[               # if {4} not 46 (dot)
              &gt;++++[-&lt;----&gt;]&lt;++
              [              # if {4} not 60 (lt)
                --[          # if {4} not 62 (gt)
                  &gt;+++++[-&lt;------&gt;]&lt;+
                  [          # if {4} not 91 (open)
                    --[      # if {4} not 93 (close)
                      &lt;&lt;-&gt;&gt;  #   then {2} = 0
                      [-]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
      &lt;&lt;
      [&gt;.&lt;-]                 # if {2} then print {3}
      &gt;[-]&lt;&lt;
    &lt;]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6551'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6551
  :user_name: baal
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/827/
  :language: Scheme
  :time: 2008/06/22 04:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Scheme で書きました。\r\nread で読み込んで write で書き出せばコメントを消すことができます。\r\n但し、タブや改行まで消えてしまいます。\r\nこれ以外の方法で実装しようとするとパーサを書き直すことになり大変ですので、この方法に
    Pretty Printer を組み合わせるのが現実的な回答だと思います。\r\n\n\t"
  :code: |
    (define decomment (lambda ()
      (let loop ((s (read)))
        (if (not (eof-object? s))
          (begin (write s) (newline) (loop (read)))))))

    (define main (lambda (args)
      (decomment)
      0))
  :tags:
  - Scheme
  :references:
    :url: /web/20081121142336/http://practical-scheme.net/wiliki/wiliki.cgi?Gauche%3APrettyPrint
    :title: Gauche:PrettyPrint
- :id: '6552'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6552
  :user_name: Nemo
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/06/22 05:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>修正版... 文字列中に%を書けたとは...</p>\n\n\t"
  :code: "%!PS\n\n/Decomment { % (filename) Decomment -\n    true exch\n    0 exch\n
    \   (r) file\n    {\n        % outputflag file\n        dup read\n        not
    { exit } if\n        dup 40 eq {\n            3 -1 roll 1 add 3 1 roll\n        }
    if\n        dup 41 eq {\n            3 -1 roll 1 sub 3 1 roll\n        } if\n
    \       dup 37 eq {\n            2 index 0 eq {\n                4 -1 roll pop
    false 4 1 roll\n            } if\n        } if\n        dup dup 10 eq exch 13
    eq or {\n            4 -2 roll pop pop true 0 4 2 roll\n        } if\n        3
    index {\n            ( ) dup 0 4 -1 roll put\n            print\n        } {\n
    \           pop\n        } ifelse \n    } loop\n    pop pop pop\n} bind def\n\n%----
    Test Code ----\n(====%===) pop % ==\n(decomment.ps) Decomment\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6553'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6553
  :user_name: kkobayashi
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/06/22 20:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">doukaku.185.R:\r\n------------------------------------------------------------------------\r\n#
    Rのコメントは一行なので、大抵の場合はgrep(\"^[^#]\", &lt;文字列&gt;, value=TRUE)で問題なさそうですが。\r\n\r\na
    &lt;- 10  # 文頭以外のコメント\r\nb &lt;- \"文字列中の#\"\r\n\r\nif(0){\r\n    ここに書くコメントはRの文法上のコメントではないので削除されません\r\n}\r\n\r\n\r\n実行結果:\r\n------------------------------------------------------------------------\r\n&gt;
    decomment(\"doukaku.185.R\")\r\nexpression(a &lt;- 10, b &lt;- \"文字列中の#\", if(0){\r\n
    \   ここに書くコメントはRの文法上のコメントではないので削除されません\r\n})\r\nattr(,\"srcfile\")\r\ndoukaku.185.R</pre>\n\t"
  :code: |
    decomment &lt;- parse
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6554'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6554
  :user_name: turugina
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/760/
  :language: C
  :time: 2008/06/23 00:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">C++で書いてみました。\r\nが、C++を書いた気にならない...\r\n\r\nちなみに、#if
    0 ～ #endif は「コメント」ではないと思っているので対応していません。</pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;fstream&gt;

    /* g++ -o decomment decomment.cpp */

    // decomment
    void decomment(
        std::ostream&amp; os,
        std::istream&amp; is
        )
    {
      bool blc, olc; /* in block/one-line comment */
      bool str, chr; /* in string/char literal */

      blc=olc=str=chr=false;

      char c,pc='\0';
      while ( is.get(c) ) {
        // escape
        if ( c == '\\' ) {
          if ( !olc &amp;&amp; !blc ) {
            if ( pc == '/' )
              os.put('/');
            os.put(c);
          }
          is.get(c);
          if ( !olc &amp;&amp; !blc )
            os.put(c);
        }
        // end of one-line comment
        else if ( olc &amp;&amp; (c == '\n' || c == '\r') ) {
          olc = false;
          os.put(c);
          pc = '\0';
          continue;
        }
        // end of block comment
        else if ( blc &amp;&amp; pc == '*' &amp;&amp; c == '/' ) {
          blc = false;
          pc = '\0';
          continue;
        }
        // start of one-line comment
        else if ( pc == '/' &amp;&amp; c == '/' &amp;&amp; !str &amp;&amp; !chr &amp;&amp; !blc ) {
          olc = true;
          pc = '\0';
          continue;
        }
        // start of block comment
        else if ( pc == '/' &amp;&amp; c == '*' &amp;&amp; !str &amp;&amp; !chr &amp;&amp; !olc ) {
          blc = true;
          pc = '\0';
        }
        // start/end of char literal
        else if ( !olc &amp;&amp; !blc &amp;&amp; c == '\'' ) {
          chr = !chr;
          if ( pc == '/' )
            os.put('/');
          os.put(c);
        }
        // start/end of string literal
        else if ( !olc &amp;&amp; !blc &amp;&amp; c == '\"' ) {
          str = !str;
          if ( pc == '/' )
            os.put('/');
          os.put(c);
        }
        else {
          if ( pc == '/' &amp;&amp; !olc &amp;&amp; !blc )
            os.put('/');
          if ( c != '/' &amp;&amp; !olc &amp;&amp; !blc )
            os.put(c);
        }
        pc = c;
      }
    }

    namespace {
      const char* test = "//\
                          " "/*" "hoge" "*/"
                          /* / * /* // */ "hige";
    }
    int main(int c, char** v)
    {
      (void)test;
      if ( c &lt; 2 ) {
        std::cout &lt;&lt; "usage: " &lt;&lt; v[0] &lt;&lt; " &lt;C++ source file&gt;\n";
        return 0;
      }

      std::ifstream ifs(v[1]);
      if ( !ifs ) {
        std::cerr &lt;&lt; "failed to open " &lt;&lt; v[1] &lt;&lt; "\n";
        return 1;
      }
      decomment(std::cout, ifs);
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6555'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6555
  :user_name: turugina
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2008/06/23 00:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">CPANモジュール PPI を利用して。\r\n# SYNOPSISにまんまコメント削除の例が載ってたし</pre>\n\t"
  :code: |
    use strict;
    use warnings;

    use PPI;

    =head1 NAME

    decomment - strip comments/pods from code

    =head1 SYNOPSIS

      decomment.pl &lt;some.pl&gt;

    =head1 SEE ALSO

    L&lt;http://ja.doukaku.org/185/&gt;

    PPI L&lt;http://search.cpan.org/~adamk/PPI-1.203/lib/PPI.pm&gt;

    =cut

    if ( !$ARGV[0] ) {
      print "usage: $0 &lt;some.pl&gt;\n";
      exit 0;
    }
    # test data
    my $testdata = "string with # :)"; # this is a comment;

    # use PPI to strip comment from code
    my $doc = PPI::Document-&gt;new($ARGV[0]);
    $doc-&gt;prune(q/PPI::Token::Pod/);
    $doc-&gt;prune(q/PPI::Token::Comment/);
    print $doc-&gt;content;

    __END__
    this section is not a comment.
  :tags: []
  :references:
    :url: /web/20081121142336/http://search.cpan.org/~adamk/PPI-1.203/lib/PPI.pm
    :title: PPI
- :id: '6556'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6556
  :user_name: honconn
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/830/
  :language: C
  :time: 2008/06/23 01:36 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>やっつけです</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    int
    main(int argc, char *argv[])
    {
      FILE *f;
      char c;
      int flg = 0;

      if(argc != 2)
        exit(EXIT_FAILURE);

      f = fopen(argv[1],  "r");

      while((c = fgetc(f)) != EOF) {
        if((flg == 0) &amp;&amp; (c == '/')) {
          flg = 1;
          continue;
        } else if((flg == 1) &amp;&amp; (c == '/')) {
          flg = 2;
        } else if((flg == 1) &amp;&amp; (c == '*')) {
          flg = 3;
        } else if((flg == 1) &amp;&amp; (c != '/') &amp;&amp; (c != '*')) {
          putchar('/');
          flg = 0;
        } else if((flg == 3) &amp;&amp; (c == '*')) {
          flg = 4;
        } else if((flg == 4) &amp;&amp; (c == '/')) {
          flg = 5;
        }

        if(flg == 0) {
          putchar(c);
        }
        if((flg == 2) &amp;&amp; (c == '\n')){
          flg = 0;
        }
        if(flg == 5) {
          flg = 0;
        }
      }

      exit(EXIT_SUCCESS);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6557'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6557
  :user_name: 匿名
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/06/23 02:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ストリームを使っているだけで実質Cですね…。</p>\n\n\t"
  :code: |
    #include &lt;iostream&gt;

    static void decomment(std::istream&amp; in, std::ostream&amp; out)
    {
        in.unsetf(std::ios::skipws);

        char c;
        char prev = 0;

        while(in &gt;&gt; c)
        {
            if(c == '/')
            {
                prev = c;
                in &gt;&gt; c;
                if(c == '*')
                {
                    do
                    {
                        while((in &gt;&gt; c) &amp;&amp; (c != '*'))
                        {
                            if(c == '\n')
                            {
                                out &lt;&lt; c;
                            }
                        }
                    } while((in &gt;&gt; c) &amp;&amp; (c != '/'));

                    c = ' ';
                }
                else if(c == '/')
                {
                    while((in &gt;&gt; c) &amp;&amp; (c != '\n'))
                        ; // NOP
                }
                else
                {
                    out &lt;&lt; prev;
                }
            }
            else if((c == '"') &amp;&amp; (prev != '\\') &amp;&amp; (prev != '\''))
            {
                do
                {
                    out &lt;&lt; c;
                    if(c == '\\')
                    {
                        in &gt;&gt; c;
                        out &lt;&lt; c;
                    }
                } while((in &gt;&gt; c) &amp;&amp; (c != '"'));
            }

            out &lt;&lt; c;
            prev = c;
        }
    }

    int main(int, char*[])
    {
        decomment(std::cin, std::cout);

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6560'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6560
  :user_name: 匿名
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/4/
  :language: Emacs
  :time: 2008/06/23 15:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>comment-kill がやるようです。</p>\n\n\t"
  :code: |
    (defun decomment (buffer)
      "バッファ内のコメント文を削除します"
      (interactive "bdecomment ")
      (with-current-buffer buffer
        (save-excursion
          (goto-char (point-min))
          (comment-kill (point-max)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6563'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6563
  :user_name: Otter
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/497/
  :language: Haskell
  :time: 2008/06/23 18:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>α置換の時に使ったパーサーがコメントを読み落としてしまうことを利用しました。もっと単純に文字列のパースでもできるはずですが、既存のソースに手を加えればできるということで…</p>\n\n\t"
  :code: "module Main where\n\nimport Language.Haskell.Syntax\nimport Language.Haskell.Parser\nimport
    Language.Haskell.Pretty\nimport Data.Generics\n\npp :: ParseResult HsModule -&gt;
    String\npp (ParseOk hsm) = prettyPrint hsm\npp _ = \"parse failed\"\n\nmain ::
    IO ()\nmain \n  = do mod &lt;- getContents\n       putStr $ pp $ parseModule mod\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6565'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6565
  :user_name: a2c
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/831/
  :language: Python
  :time: 2008/06/23 21:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">初投稿\r\n泥です。\r\n初めてre使った</pre>\n\t"
  :code: |
    import re, sys

    try :
        f = open(sys.argv[1], "r")
        raw_str = f.read()
        f.close()
    except :
        print "file read error"

    sharpe = re.compile(".*#.*")
    s_quote = re.compile("'''")
    d_quote = re.compile('"""')

    de_sharpe_str = ""
    tmp = raw_str.split("\n")
    for i in tmp:
        de_sharpe_str += sharpe.split(i)[0] + "\n"

    x = [s_quote.split(de_sharpe_str)[x]for x in range(0, len(s_quote.split(de_sharpe_str)), 2)]
    y = [d_quote.split(de_sharpe_str)[x]for x in range(0, len(x), 2)]

    print "\n".join(y)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6566'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6566
  :user_name: Otter
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/497/
  :language: 
  :time: 2008/06/23 23:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>これはパーサーの実装に依存したハックですね…</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6573'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6573
  :user_name: 柿
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/832/
  :language: Scheme
  :time: 2008/06/24 15:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  同じく，タブや改行は消えてしまいます．\r<br>writeだと，#0=(1 . #0#)で終わらないのでwirte/ssを使いました．\n\t"
  :code: |
    (port-for-each write/ss read)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6574'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6574
  :user_name: 柿
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/832/
  :language: Scheme
  :time: 2008/06/24 16:01 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  すいません，訂正です．\r<br>#6573のでは，トップレベルに直接変数が書いてあった時に，くっ付いてしまいますね．\n\t"
  :code: |
    (port-for-each (lambda (s) (write/ss s) (newline)) read)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6579'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6579
  :user_name: masa.edw
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/361/
  :language: C
  :time: 2008/06/24 14:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>相互再帰風に書いてみました</p>\n\n\t"
  :code: "#include &lt;stdio.h&gt;\n\ntypedef void* (*filter)(int c, FILE* out);\n\nvoid
    drive(filter f, FILE* in, FILE* out)\n{\n    int c;\n\n    do {\n        c = fgetc(in);\n\n
    \       if (c == EOF)\n            break;\n    } while ((f = f(c, out)));\n}\n\n#define
    CALL(func)                              \\\n    do { return func; } while(0)\n\n#define
    FINISH()                                \\\n    do { return NULL; } while(0)\n\n\nvoid*
    normal_code(int, FILE*);\nvoid* next_of_slash_in_normal_code(int, FILE*);\nvoid*
    string(int, FILE*);\nvoid* next_of_backslash_in_string(int, FILE*);\nvoid* single_quote(int,
    FILE*);\nvoid* next_of_backslash_in_single_quote(int, FILE*);\nvoid* comment(int,
    FILE*);\nvoid* next_of_star_in_comment(int, FILE*);\nvoid* oneline_comment(int,
    FILE*);\n\nvoid* normal_code(int c, FILE* out)\n{\n    switch (c) {\n    case
    '/':\n        CALL(next_of_slash_in_normal_code);\n\n    case '\"':\n        fputc(c,
    out);\n        CALL(string);\n\n    case '\\'':\n        fputc(c, out);\n        CALL(single_quote);\n\n
    \   default:\n        fputc(c, out);\n        CALL(normal_code);\n    }\n}\n\nvoid*
    next_of_slash_in_normal_code(int c, FILE* out)\n{\n    switch (c) {\n    case
    '*':\n        CALL(comment);\n        \n    case '/':\n        CALL(oneline_comment);\n\n
    \   default:\n        fputc('/', out);\n        fputc(c, out);\n        CALL(normal_code);\n
    \   }\n}\n\nvoid* string(int c, FILE* out)\n{\n    fputc(c, out);\n\n    switch
    (c) {\n    case '\\\\':\n        CALL(next_of_backslash_in_string);\n\n    case
    '\"':\n        CALL(normal_code);\n\n    default:\n        CALL(string);\n    }\n}\n\nvoid*
    next_of_backslash_in_string(int c, FILE* out)\n{\n    fputc(c, out);\n    CALL(string);\n}\n\nvoid*
    single_quote(int c, FILE* out)\n{\n    fputc(c, out);\n\n    switch (c) {\n    case
    '\\\\':\n        CALL(next_of_backslash_in_single_quote);\n\n    case '\\'':\n
    \       CALL(normal_code);\n\n    default:\n        CALL(single_quote);\n    }\n}\n\nvoid*
    next_of_backslash_in_single_quote(int c, FILE* out)\n{\n    fputc(c, out);\n    CALL(single_quote);\n}\n\nvoid*
    comment(int c, FILE* out)\n{\n    if (c == '*')\n        CALL(next_of_star_in_comment);\n
    \   else\n        CALL(comment);\n}\n\nvoid* next_of_star_in_comment(int c, FILE*
    out)\n{\n    if (c == '/')\n        CALL(normal_code);\n    else\n        CALL(comment);\n}\n\nvoid*
    oneline_comment(int c, FILE* out)\n{\n    if (c == '\\n')\n        CALL(normal_code);\n
    \   else\n        CALL(oneline_comment);\n}\n\nvoid decomment(FILE* in, FILE*
    out)\n{\n    drive(normal_code, in, out);\n}\n\nint main(int argc, char** argv)\n{\n
    \   decomment(stdin, stdout);\n    return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6580'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6580
  :user_name: 匿名
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/4/
  :language: Haskell
  :time: 2008/06/24 20:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>おもいっきりベタな実装してみました。もしかすると抜けている部分があるかもしれません…。</p>\n\n\t"
  :code: |
    decomment :: String -&gt; String
    decomment s = decommentNormal s
      where
        decommentNormal         []                      = []
        decommentNormal         ('\'':'"':'\'':cs)      = '\'':'"':'\'':(decommentNormal cs)
        decommentNormal         ('\'':'\\':'"':'\'':cs) = '\'':'\\':'"':'\'':(decommentNormal cs)
        decommentNormal         ('"':cs)                = '"':(decommentQuote cs)
        decommentNormal         ('-':'-':cs)            = decommentCommentLine cs
        decommentNormal         ('{':'-':cs)            = decommentCommentBlock 0 cs
        decommentNormal         (c:cs)                  = c:(decommentNormal cs)
        decommentQuote          ('"':cs)                = '"':(decommentNormal cs)
        decommentQuote          ('\\':'"':cs)           = '\\':'"':(decommentQuote cs)
        decommentQuote          (c:cs)                  = c:(decommentQuote cs)
        decommentCommentLine    ('\n':cs)               = '\n':(decommentNormal cs)
        decommentCommentLine    (_:cs)                  = decommentCommentLine cs
        decommentCommentBlock 0 ('-':'}':cs)            = '\n':(decommentNormal cs)
        decommentCommentBlock n ('-':'}':cs)            = decommentCommentBlock (n-1) cs
        decommentCommentBlock n ('{':'-':cs)            = decommentCommentBlock (n+1) cs
        decommentCommentBlock n (c:cs)                  = decommentCommentBlock n     cs

    main = getContents &gt;&gt;= putStrLn.decomment
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6586'
  :parent_id: '185'
  :url: http://ja.doukaku.org/comment/6586
  :user_name: nobsun
  :user_url: /web/20081121142336/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2008/06/25 02:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>ちょっと長いけど，Haskell, C, C++ 対応のつもり，\r</p>\n<p>\r</p>\n<p>CommentStyleクラスとQuoteStyleクラスを使って，いろいろな言語に対応できるように工夫してみた．\r</p>\n<ul>\n<li>\n
    commentLeadings メソッドは一行コメントの開始マーク(複数可)文字列を返すメソッド\r\n</li>\n<li>\n commentOpenings
    メソッドはブロックコメントの開始マーク(複数可)文字列を返すメソッド\r\n</li>\n<li>\n commentClosing  メソッドは与えられたブロックコメントの開始マークに対応する修了マークを返すメソッド\r\n</li>\n<li>
    commentNestable はブロックコメントがネスト可能かどうかを返すメソッド\r</li>\n</ul>\n<p>など．\r</p>\n<p>\r</p>\n<ul>\n<li>\n
    文字列リテラル\r\n</li>\n<li> ブロックコメントのネスト\r</li>\n</ul>\n<p>\r</p>\n<p>に対応する．厳密にやるには，その言語のパーザを読んで結果の構文木データを，プリティプリンタ(自作することになる)に食わせるのかな．めんどうだけど．．.\r</p>\n</div>\n\t"
  :code: "{-# LANGUAGE EmptyDataDecls #-}\nmodule Main (main) where\n\nimport Control.Arrow\nimport
    Data.Char\nimport Data.List\nimport Data.Maybe\nimport System.Environment\n\nmain
    :: IO ()\nmain = interact . genDecomment . listToMaybe . map (map toLower) =&lt;&lt;
    getArgs\n   \ngenDecomment :: Maybe String -&gt; String -&gt; String\ngenDecomment
    (Just \"c\")    = decomment cstyle\ngenDecomment (Just \"c++\")  = decomment cppstyle\ngenDecomment
    _             = decomment hstyle\n\nclass CommentStyle c where\n  commentLeadings
    \ :: c -&gt; [String]\n  commentOpenings  :: c -&gt; [String]\n  commentClosing
    \  :: c -&gt; String -&gt; String\n  commentNestable  :: c -&gt; Bool\n\nclass
    QuoteStyle q where\n  quoteOpenings  :: q -&gt; [Char]\n  quoteClosing   :: q
    -&gt; Char -&gt; Char\n  quoteEscape    :: q -&gt; Char\n\nsplitWithPrefix ::
    Eq a =&gt; [a] -&gt; [a] -&gt; Maybe ([a],[a])\nsplitWithPrefix [] xs = Just ([],xs)\nsplitWithPrefix
    (p:ps) xxs@(x:xs)\n  | p == x     = splitWithPrefix ps xs &gt;&gt;= return . ((x:)
    *** id)\n  | otherwise  = Nothing\n\nsplitQuoted :: Eq a =&gt; a -&gt; a -&gt;
    [a] -&gt; ([a], [a])\nsplitQuoted esc qm []   = ([],[])\nsplitQuoted esc qm (c:cs)\n
    \          | c == qm    = ([],cs)    \n           | c == esc   = case cs of \n
    \                           []     -&gt; ([c],[])\n                            c':cs'
    -&gt; ((c:).(c':) *** id) $ splitQuoted esc qm cs'\n           | otherwise  =
    ((c:) *** id) $ splitQuoted esc qm cs\n\ndecomment :: (CommentStyle s, QuoteStyle
    s) =&gt; s -&gt; String -&gt; String\ndecomment s \"\"         = \"\"\ndecomment
    s ccs@(c:cs) = case mapMaybe (flip splitWithPrefix ccs) $ commentLeadings s of\n
    \ (_,xs):_ -&gt; decomment s $ snd $ break ('\\n'==) xs\n  []       -&gt; case
    mapMaybe (flip splitWithPrefix ccs) $ commentOpenings s of\n                (p,xs):_
    -&gt; decommentC s [p] xs\n                []       -&gt; if elem c (quoteOpenings
    s) then c:decommentQ s c cs \n                            else c\n\n\n\n\n<!--\n
    \    FILE ARCHIVED ON 14:23:36 Nov 21, 2008 AND RETRIEVED FROM THE\n     INTERNET
    ARCHIVE ON 13:04:25 Nov 16, 2013.\n     JAVASCRIPT APPENDED BY WAYBACK MACHINE,
    COPYRIGHT INTERNET ARCHIVE.\n\n     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY
    COPYRIGHT (17 U.S.C.\n     SECTION 108(a)(3)).\n-->"
  :tags: []
  :references:
    :url: 
    :title: 
