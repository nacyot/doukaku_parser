---
:id: '210'
:title: π
:comments:
- :id: '7764'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7764
  :user_name: nori
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/10/09 23:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>円周率を計算してください。</p>\n<p>積分を計算するも、素朴な方法も、速さを目指すも、LLで計算する意味を問うもあるでしょう。</p>\n<p><a
    class=\"reference\" href=\"/web/20090103070539/http://ja.wikipedia.org/wiki/%E5%86%86%E5%91%A8%E7%8E%87\">http://ja.wikipedia.org/wiki/%E5%86%86%E5%91%A8%E7%8E%87</a></p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7765'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7765
  :user_name: turugina
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2008/10/10 02:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">とりあえず、参考ページにあった数式で素直に計算。</pre>\n\t"
  :code: |
    use strict;
    use warnings;

    use bignum;

    use List::Util qw/reduce/;
    use Memoize;

    sub fract
    {
      $_[0] == 0 || $_[0] == 1 ? 1 :
      $_[0] * fract($_[0]-1);
    }
    memoize(q/fract/);

    my $N = 32;

    print 6 * reduce {
      no warnings qw/once/;
      $a + $b
    } map {
      fract(2 * $_) /
      ((2 ** (4 * $_ + 1)) * (fract($_) ** 2) * (2 * $_ + 1))
    } 0 .. $N;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7766'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7766
  :user_name: turugina
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2008/10/10 08:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ビジュアル的にはこっちのほうがおもしろい</pre>\n\t"
  :code: |
    use strict;
    use warnings;

    use bignum;

    use Memoize;

    sub fract
    {
      my $n = shift;
      $n == 0 || $n == 1 ? 1 :
      $n * fract($n-1);
    }
    sub f
    {
      my $n = shift;
      $n &lt; 0 ? 0 :
      fract(2 * $n) /
      ((2 ** (4 * $n + 1)) * (fract($n) ** 2) * (2 * $n + 1)) +
      f($n-1);
    }
    memoize(q/fract/);
    memoize(q/f/);

    my $N = 1024;

    print "@{[6 * f($_)]}\n" for 1 .. $N;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7767'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7767
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/10 09:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ここでいう「計算」とはどういう意味なのでしょうか。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7769'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7769
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/10/10 13:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">遅い、精度が低い</pre>\n\t"
  :code: |
    import java.util.Random;
    /**
     *　教科書的なモンテカルロ法
     */
    public class Pi {
        public static void main(String args[]) {
        Random r= new Random();
        int m=1000000;
        double j=0;
        for(int i=0;i&lt;m;i++)
            if(Math.hypot(r.nextDouble(),r.nextDouble())&lt;1.0)
              j++;
        System.out.println(4*j/m);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7770'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7770
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Mathematica
  :time: 2008/10/10 15:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>問題文の趣旨をまるで無視。</p>\n\n\t"
  :code: |
    N[Pi,10000]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7771'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7771
  :user_name: kkobayashi
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/10/10 10:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Rにはpiという組み込み変数がありますが、計算であればRらしくモンテカルロで。</p>\n\n\t"
  :code: |
    pi.montecarlo &lt;- function(n){
      mean(replicate(n, sum(runif(2)^2) &lt; 1)) * 4
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7772'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7772
  :user_name: sumim
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/10/10 15:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: "| pi n next |\npi := 0.0.\nn := 0.\n[   next := 6 * (2 * n) factorial \n
    \       / ((2 raisedTo: 4 * n + 1) * n factorial squared * (2 * n + 1)).\n    next
    &lt; 1e-16] whileFalse: [pi := pi + next. n := n + 1].\n^pi   \"=&gt; 3.141592653589793
    \"\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '7773'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7773
  :user_name: nobsun
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/98/
  :language: Other
  :time: 2008/10/10 15:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">昔のメモにのこっていたコード。出典がわからないのだがなにかのpaperにあったコードだと思う。\r\n桁数を指定する。各桁の数のリストで出力\r\n\r\n*Main&gt;
    :main 30\r\n[3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7]\r\n</pre>\n\t"
  :code: |
    import System.Environment
    main = print . flip take  (g (1,180,60,2)) . read . head =&lt;&lt; getArgs
    g (q,r,t,i) = y : g (10*q*i*(2*i-1),10*u*(q*(5*i-2)+r-y*t),t*u,i+1)
      where (u,y) = (3*(3*i+1)*(3*i+2),div (q*(27*i-12)+5*r) (5*t))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7774'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7774
  :user_name: nobsun
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2008/10/10 10:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>言語指定しわすれた Haskell です</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7775'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7775
  :user_name: nobsun
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2008/10/10 10:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>すみません再投稿します</p>\n\n\t"
  :code: |
    import System.Environment
    main = print . flip take  (g (1,180,60,2)) . read . head =&lt;&lt; getArgs
    g (q,r,t,i) = y : g (10*q*i*(2*i-1),10*u*(q*(5*i-2)+r-y*t),t*u,i+1)
      where (u,y) = (3*(3*i+1)*(3*i+2),div (q*(27*i-12)+5*r) (5*t))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7776'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7776
  :user_name: nori
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/10/10 20:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>せっかくmathematicaなんだから積分計算してくださいよ。</p>\n<p>それから何桁まで埋め込みでもっているのでしょうか？</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7777'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7777
  :user_name: sumim
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2008/10/10 21:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Mathematica の Pi は組み込みの無理数オブジェクトで、N は引数を任意の精度の実数に変換する関数なのだそうです。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20090103070539/http://infoshako.sk.tsukuba.ac.jp/ShakoDoc/Mathematica/Intro-3/Intro/Sec2.html
    :title: Mathematica への誘い - ２．数値計算
- :id: '7778'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7778
  :user_name: ？せんたくいた
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2008/10/11 00:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">前半は半径rの1/4円の面積aを求めています。\r\n後半では面積aを単純に4倍し、r*rで割ってpiを求めたかったのですが、\r\nbashでは小数を持てないので、小数部分を10倍しながら表示しています。\r\n\r\n$
    ./pi.sh 100\r\n3.1416\r\n$ ./pi.sh 241\r\n3.1400974\r\n$ ./pi.sh 1000\r\n3.141548\r\n</pre>\n\t"
  :code: |
    #/bin/bash

    r="$1"
    a=0

    for ((x=1;x&lt;=r;x++)) {
        for ((y=0;y&lt;r;y++)) {
            if ((x*x+y*y&lt;=r*r));then
                a=$((a+1))
            else break
            fi
        }
    }

    z=$((a*4));m=$((z/(r*r)))
    echo -n $m
    z=$((z-m*r*r))
    if ((z));then
        echo -n .
    fi
    for ((i=1;i&lt;8&amp;&amp;z&gt;0;i++)) {
        n=$((z*10/(r*r)))
        z=$((z*10-n*r*r))
        echo -n $n
    }
    echo
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7779'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7779
  :user_name: 99yen
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/10/11 03:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>１万回ループの無限級数(1-1/3+1/5-1/7…)で三桁の精度です。</p>\n\n\t"
  :code: |
    # 組み込みPI
    PIを表示

    # 無限級数
    a=1
    nで1から10000まで繰り返す
        a=a+(-1^n)*(1/(2*n+1))
    a*4を表示

    # モンテカルロ法
    t=10000
    m=10000
    a=0
    nで0からtまで繰り返す
        もし(HYPOT(mの乱数/m,mの乱数/m))&lt;1ならば
            a=a+1
    a*4/tを表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7780'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7780
  :user_name: tsuwabuki
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/479/
  :language: Haskell
  :time: 2008/10/11 09:21 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>単純に円周率の数字がほしいだけならHaskellには最初から用意されています。</p>\n\n\t"
  :code: |
    main = print pi
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7781'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7781
  :user_name: leque
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/10/11 07:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Gauche で (use math.const) (print pi) というのも風情がないので三角関数で。</p>\n\n\t"
  :code: |
    (display (* (asin 1) 2))
    (newline)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7782'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7782
  :user_name: nori
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/10/11 10:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  なるほど。どういう実装なんでしょうね。\r<br><br>  Mathematicaにはいくつかの数学定数が組み込まれています。これらのうち興味深いものは\r<br>  無理数で、それらはMathematicaではいかなる精度でも計算できるように定義されています。\r<br>  RAMの容量と計算を求めるのにかかる時間だけが、唯一計算可能な精度を制限しています。\r<br>  数学定数の中でも最も良く知られているのはPiとEでしょう。 \r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7785'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7785
  :user_name: こう。
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/134/
  :language: C
  :time: 2008/10/12 10:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Wikipediaにあったarcsinのテーラー展開を利用してます。\r\n\r\n整数だけで計算してみました。\r\nまたよくわからない計算になってしまいました。</pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n\n/*\n       ∞\n    pi=Σ(3*(2n)!/(2^4n*(n!)^2*(2n+1)))\n
    \      n=0\n*/\nvoid put_pi(){\n    unsigned long long pi=0;\n    int n;\n\n    unsigned
    long long factor=1;\n    int f2_m=2;\n    int f2_m_a=10;\n    int pow2_4n=0;\n
    \   int p2f_a=1;\n    int add2n_1=1;\n    \n    for(n=0;n&lt;16;n++){\n        pi+=(3*(1000000000000000000&gt;&gt;pow2_4n)*(factor)/add2n_1);\n
    \       factor=factor*f2_m/p2f_a;\n        f2_m+=f2_m_a;\n        f2_m_a+=8;\n
    \       pow2_4n+=4;\n        add2n_1+=2;\n        p2f_a+=add2n_1;\n        \n
    \       printf(\"PI=%Ld\\n\",pi);\n    }\n}\nint main(){\n    put_pi();\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7786'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7786
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/10/12 11:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>arcsin(1/2)のテイラー展開により円周率を一万桁まで求めるプログラムです。</p>\n<p>最後の20桁は05600101655256367493です（9995桁まで正確に求められているようです）。</p>\n\n\t"
  :code: "import java.math.*;\n\npublic class Pi10000 {\n    static final BigInteger
    TWO = BigInteger.valueOf(2);\n    static final BigInteger SIXTEEN = BigInteger.valueOf(16);\n
    \   static final int PRECISION = 10000;\n    \n    public static void main(String[]
    args) {\n        BigInteger pi = BigInteger.ZERO;\n        BigInteger a = BigInteger.valueOf(3).multiply(BigInteger.TEN.pow(PRECISION));\n
    \       BigInteger d = BigInteger.ONE;\n        BigInteger e;\n        long i
    = 0, j = 0;\n        do {\n            e = a.divide(d);\n            pi = pi.add(e);\n
    \           a = a.multiply(BigInteger.valueOf(++i)).multiply(BigInteger.valueOf(++i));\n
    \           a = a.divide(SIXTEEN).divide(BigInteger.valueOf(++j).pow(2));\n            d
    = d.add(TWO);\n        } while(!e.equals(BigInteger.ZERO));\n        System.out.println(new
    BigDecimal(pi, PRECISION));\n    }\n\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7790'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7790
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Mathematica
  :time: 2008/10/13 08:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>せっかくなので数値積分させてみました．</p>\n<p>Abs[Pi - npi]を評価すると2x10^(-100)でした．</p>\n<p>この値は積分範囲の逆数程度になっている様子．</p>\n\n\t"
  :code: |
    npi = NIntegrate[1/(1 + x^2), {x, -10^100, 10^100}, WorkingPrecision -&gt; 200, MaxRecursion -&gt; 50]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7792'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7792
  :user_name: matarillo
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/136/
  :language: Other
  :time: 2008/10/14 01:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>VBA for Excel (2003)</p>\n\n\t"
  :code: |
    Sub PI()
        Range("A2").FormulaR1C1 = "=ROW(RC)-2"
        Range("B2").FormulaR1C1 =  _
            "=FACT(RC[-1]*2)/FACT(RC[-1])/FACT(RC[-1])" &amp; _
            "/POWER(2,4*RC[-1]+1)/(2*RC[-1]+1)"
        Range("A2:B22").Select
        Selection.FillDown
        Range("A1").Select
        ActiveCell.FormulaR1C1 = "=SUM(R[1]C[1]:R[21]C[1])*6"
    End Sub
  :tags:
  - vba
  :references:
    :url: 
    :title: 
- :id: '7793'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7793
  :user_name: matarillo
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/136/
  :language: C
  :time: 2008/10/14 01:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>横に長いと醜いので改行とインデントを入れている。</p>\n\n\t"
  :code: |
    string s = new System.Net.WebClient().DownloadString
      ("http://www.google.co.jp/search?hl=en&amp;q=pi");
    System.Console.WriteLine
      (s.Substring(s.IndexOf("pi =") + 5, 10));
  :tags: []
  :references:
    :url: /web/20090103070539/http://www.google.co.jp/intl/ja/help/features.html#calculator
    :title: Google ヘルプ:電卓機能
- :id: '7795'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7795
  :user_name: turugina
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/760/
  :language: 
  :time: 2008/10/13 22:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">今更ながらfactorialのつもりのサブルーチン名がfractになってることに気が付いた。\r\n恥さらしもいいとこだ
    orz...\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7797'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7797
  :user_name: vvakame
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/834/
  :language: Scheme
  :time: 2008/10/14 13:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>arcsinのテイラー展開を写経する的な</p>\n\n\t"
  :code: |
    import (rnrs hashtables (6)))

    (define (memoize f)
      (let ((cache (make-eqv-hashtable)))
        (lambda args
          (let ((pvalue (hashtable-ref cache args #f)))
        (or    pvalue
            (let ((result (apply f args)))
              (hashtable-set! cache args result)
              result))))))

    (define fact
       (lambda (n)
         (if (&lt;= n 1)
         1
         (* n (fact (- n 1))))))

    (define (pi freq)
      (define (iter n value)
        (let ((value2 (+ value (taylor-step n))))
          (if (= n freq)
          value2
          (iter (+ n 1) value2))))
      (define (taylor-step n)
        (/ (fact (* 2 n))
           (*
        (expt 2 (+ (* 4 n) 1))
        (expt (fact n) 2)
        (+ (* 2 n) 1))))
      (* (iter 0 0) 6))

    (define result (pi 30))
    (display result)
    (newline)
    (display (inexact result))
  :tags:
  - ypsilon
  :references:
    :url: /web/20090103070539/http://blog.livedoor.jp/dankogai/archives/50459308.html
    :title: ''
- :id: '7798'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7798
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/10/15 01:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import math
    print math.asin(1)*2
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7803'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7803
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/10/15 09:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>高野喜久雄の公式を使って高速化してみました。</p>\n<p>π/4 = 12 arctan (1/49) + 32 arctan
    (1/57) - 5 arctan(1/239) + 12 arctan(1/110443)</p>\n<p>arcsin(1/2)に比べて3.4倍高速になっています（小数点以下10万桁求めています。99,998桁まで正確に求められているようです）。</p>\n\n\t"
  :code: "import java.math.*;\n\npublic class Pi100000 {\n    static final BigInteger
    TWO = BigInteger.valueOf(2);\n    static final int PRECISION = 100000;\n    \n
    \   public static void main(String[] args) {\n        BigInteger pi = BigInteger.ZERO;\n
    \       pi = arctan(pi, 4 * 12, 49);\n        pi = arctan(pi, 4 * 32, 57);\n        pi
    = arctan(pi, -4 * 5, 239);\n        pi = arctan(pi, 4 * 12, 110443);\n        System.out.println(new
    BigDecimal(pi, PRECISION));\n    }\n    \n    public static BigInteger arctan(BigInteger
    pi, int n, int x) {\n        BigInteger a = BigInteger.valueOf(n).multiply(BigInteger.TEN.pow(PRECISION));\n
    \       a = a.divide(BigInteger.valueOf(x));\n        BigInteger x2 = BigInteger.valueOf(x).pow(2);\n
    \       BigInteger d = BigInteger.ONE;\n        for (;;) {\n            BigInteger
    e = a.divide(d);\n            if (e.signum() == 0)\n                break;\n            pi
    = pi.add(e);\n            a = a.divide(x2);\n            d = d.add(TWO);\n            e
    = a.divide(d);\n            pi = pi.subtract(e);\n            a = a.divide(x2);\n
    \           d = d.add(TWO);\n        }\n        return pi;\n    }\n\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7808'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7808
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/17 11:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>面積から攻めるのはよく知られていますね。\r</p>\n<p>「ビュフォンの針」を実装するのもありでしょう。\r</p>\n<p>\r</p>\n<p>手でがんばった人\r</p>\n<p>http://portal.nifty.com/2008/10/01/c/\r</p>\n<p>\r</p>\n<p>applet\r</p>\n<p>http://www.f.waseda.jp/takezawa/math/number/buffon/buffon.htm\r</p>\n</div>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7809'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7809
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/17 11:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なるほど。googleに計算させるのですね。</p>\n<p><a class=\"reference\" href=\"/web/20090103070539/http://3.141592653589793238462643383279502884197169399375105820974944592.jp/\">http://3.141592653589793238462643383279502884197169399375105820974944592.jp/</a>\nというのもあるらしいですが、サーバが死んでいるみたいです。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7810'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7810
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/17 11:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>print math.atan(1)*4\nでもいいですな。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7811'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7811
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/10/18 06:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>IOCCC に円周率を計算するプログラムが投稿されたことがありますね\n<a class=\"reference\" href=\"/web/20090103070539/http://www0.us.ioccc.org/1988/westley.c\">http://www0.us.ioccc.org/1988/westley.c</a></p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20090103070539/http://www0.us.ioccc.org/1988/westley.c
    :title: ''
- :id: '7883'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7883
  :user_name: nori
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/10/29 08:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>IOCCCって、AA好きですよね。\n＃フライトシミュレーターでソースが飛行機のAAだったのがあったな。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7910'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7910
  :user_name: leque
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/840/
  :language: Common
  :time: 2008/10/31 18:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>common-lisp:pi と比べると意外と精度が低い？</p>\n\n\t"
  :code: |
    (princ (* (acos 0) 2))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7918'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/7918
  :user_name: seri
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/641/
  :language: Ruby
  :time: 2008/11/01 21:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「ビュフォンの針」は初めて知りました。\r\nというわけで実装。\r\n</pre>\n\t"
  :code: |
    class Needle
      LENGTH = 5
      RAND_MAX = 10000
      attr_reader :x1, :x2

      def initialize()
        @x1 = rand(RAND_MAX) + rand
        @x2 = LENGTH * Math.cos(rand * 2 * Math::PI) + @x1
      end

    end

    n = 10000
    crossed = 0
    n.times {
      needle = Needle.new()
      k1 = (needle.x1 / (2 * Needle::LENGTH)).to_i
      k2 = (needle.x2 / (2 * Needle::LENGTH)).to_i
      crossed += 1 if k1 != k2
    }

    pi = n.to_f / crossed.to_f
    puts "pi = #{pi}"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8031'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/8031
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/11/13 07:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt; 昔のメモにのこっていたコード。出典がわからないのだがなにかのpaperにあったコードだと思う。\r\n\r\nコードの出典はわかりませんが計算方法は多分\r\n「円周率の公式集（そのた・不明）」のページ\r\nhttp://www.pluto.ai.kyutech.ac.jp/plt/matumoto/pi_small/node14.html\r\nの下の方にある\r\n\r\nt[n]
    = n(2n-1)((5n+3)+t[n+1])/((3n+1)(3n+2)3)\r\nπ[n] = 3 + t[1]\r\nπ = lim π[n]\r\nというやつですね。\r\n\r\n&gt;
    各桁の数のリストで出力\r\n\r\n収束の関係上いつかは誤差で間違った数がでてくるんでしょうね\r\n（後の桁で１０以上の数がでてきて全体としては正しい値に調整されると思いますが）\r\nその桁にたどりつく前に計算機資源が足りなくなるか。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8091'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/8091
  :user_name: rossy
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/429/
  :language: Other
  :time: 2008/11/28 11:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ライプニッツ・グレゴリー級数で素朴に書きました。\n結果は3.1415937340でした。</p>\n\n\t"
  :code: |
    def piPer4 = 0
    (1..1000001).each {
        piPer4 = -piPer4 + 1 / (it * 2 - 1)
    }
    println piPer4 * 4
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8092'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/8092
  :user_name: rossy
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/429/
  :language: Groovy
  :time: 2008/11/28 11:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>何度もすいません。言語を選択してませんでした。\nライプニッツ・グレゴリー級数で素朴に書きました。結果は3.1415937340でした。</p>\n\n\t"
  :code: |
    def piPer4 = 0
    (1..1000001).each {
        piPer4 = -piPer4 + 1 / (it * 2 - 1)
    }
    println piPer4 * 4
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8095'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/8095
  :user_name: 匿名
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2008/11/29 09:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>はじめて先輩におそわったアルゴリズムがこれでした。高校時代です。キャッシャーみたいな電算機で一度間違うとはじめからやり直しでした。これなら高校生にもわかるんじゃないかと。積分？で。</p>\n<p>バカバカしいのですがRubyでinjectを使いたかったので。</p>\n\n\t"
  :code: |
    #sqrtを使うのでMathをinclude
    include Math

    #計算結果を入れるリスト
    list = []

    #2をいくつで分割するか1000万で小数点以下６桁まででた。
    d = 10000000

    #長方形の底辺　xの増加数
    dd = 2.0 / d

    #はじめのxの値を入れる
    x = dd

    #x**2 + y**2 = r**2から
    #y = sqrt(4 - x ** 2)

    while  x &lt; 2
    list &lt;&lt; sqrt(4 - (x ** 2))
        x += dd
    end

    p list.inject(:+) * dd
    p PI
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8139'
  :parent_id: '210'
  :url: http://ja.doukaku.org/comment/8139
  :user_name: taninsw
  :user_url: /web/20090103070539/http://ja.doukaku.org/user/973/
  :language: Other
  :time: 2008/12/12 19:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>モンテカルロシミュレーションで……</p>\n<p>実行結果はこんな感じです。</p>\n<p><a href=\"/web/20090103070539/http://ja.doukaku.org/210/flatten/#id1\"
    name=\"id2\"><span class=\"problematic\" id=\"id2\">*</span></a>Main&gt; pi'\n3.13396\n<a
    href=\"/web/20090103070539/http://ja.doukaku.org/210/flatten/#id3\" name=\"id4\"><span
    class=\"problematic\" id=\"id4\">*</span></a>Main&gt; pi'\n3.14472\n<a href=\"/web/20090103070539/http://ja.doukaku.org/210/flatten/#id5\"
    name=\"id6\"><span class=\"problematic\" id=\"id6\">*</span></a>Main&gt; pi'\n3.13884</p>\n<div
    class=\"system-message\" id=\"id1\">\n<p class=\"system-message-title\">System
    Message: <a name=\"id1\">WARNING/2</a> (<tt class=\"docutils\">&lt;string&gt;</tt>,
    line 6); <em><a href=\"/web/20090103070539/http://ja.doukaku.org/210/flatten/#id2\">backlink</a></em></p>\nInline
    emphasis start-string without end-string.</div>\n<div class=\"system-message\"
    id=\"id3\">\n<p class=\"system-message-title\">System Message: <a name=\"id3\">WARNING/2</a>
    (<tt class=\"docutils\">&lt;string&gt;</tt>, line 6); <em><a href=\"/web/20090103070539/http://ja.doukaku.org/210/flatten/#id4\">backlink</a></em></p>\nInline
    emphasis start-string without end-string.</div>\n<div class=\"system-message\"
    id=\"id5\">\n<p class=\"system-message-title\">System Message: <a name=\"id5\">WARNING/2</a>
    (<tt class=\"docutils\">&lt;string&gt;</tt>, line 6); <em><a href=\"/web/20090103070539/http://ja.doukaku.org/210/flatten/#id6\">backlink</a></em></p>\nInline
    emphasis start-string without end-string.</div>\n\n\t"
  :code: "pi' = do let t = 100000\n         nums &lt;- sequence(map sequence (replicate
    t (replicate 2 randomFIO)))\n         putStrLn $ show $ (fromIntegral(length(filter
    f nums)  )/fromIntegral(t)) * 4\n      where\n         f :: [Float] -&gt; Bool\n
    \        f = (&lt; 1). sum.map(^2)   \n         randomFIO :: IO Float\n         randomFIO
    = randomIO\n"
  :tags: []
  :references:
    :url: 
    :title: 
