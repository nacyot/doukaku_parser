---
:id: '189'
:title: コード圧縮
:comments:
- :id: '6664'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6664
  :user_name: sweetie089
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/836/
  :language: 
  :time: 2008/07/04 12:47 GMT
  :vote_count: '11'
  :vote_score: '-5'
  :body: "\r\n\t  <pre class=\"compact\">スペースやインデントなど、本来は必要なく開発効率を上げるために記述が許可されている項目について、\r\nそれらを可能な限り減らし、コードを短くするコード書いてください。\r\nまた、投稿時に対象とする言語と、実際の処理結果を記載できるとわかり易いかと思います。\r\n\r\n以下詳細\r\n・全てを行う必要はありません、どこまで行うかは任意です。\r\n・ローカル宣言など、消しても動作に関係のない構文の削除や置き換えを行っても構いません。\r\n・必ず同じ入力に同じ結果が返るのであれば処理内容を変えることもかまいませんが、推奨・強制はしません。\r\n・コンパイラや実行環境に依存する圧縮は避けてください。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6729'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6729
  :user_name: nskj77
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/375/
  :language: Haskell
  :time: 2008/07/13 22:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こんな感じでしょうか\r\n$ runhaskell HaskellParser.hs
    &lt; HaskellParser.hs\r\nmodule Main where { import Language.Haskell.Parser; import
    Language.Haskell.Pretty; import Language.Haskell.Syntax; import Text.PrettyPrint.HughesPJ;
    main = do { (ParseOk x) &lt;- return . parseModule =&lt;&lt; getContents; putStrLn
    $ prettyPrintStyleMode (Style OneLineMode maxBound 0) defaultMode{layout = PPSemiColon}
    x}}</pre>\n\t"
  :code: "module Main where                                                                                                       \n\nimport
    Language.Haskell.Parser\nimport Language.Haskell.Pretty\nimport Language.Haskell.Syntax\nimport
    Text.PrettyPrint.HughesPJ\n\nmain = do\n  (ParseOk x) &lt;- return . parseModule
    =&lt;&lt; getContents\n  putStrLn $ prettyPrintStyleMode (Style OneLineMode maxBound
    0) defaultMode {layout = PPSemiColon} x\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6731'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6731
  :user_name: sumim
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/07/13 23:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    | method |
    method := Integer &gt;&gt; #factorial.
    ^method methodClass prettyPrinterClass
        format: method getSource
        in: method methodClass
        notifying: nil
        decorated: false.
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6732'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6732
  :user_name: kkobayashi
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/07/14 08:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すごいマイナス評価・・・！\r\n\r\nRのdeparse()は、適切にインデントを入れなおしてくれるという\r\n（このお題的には）余計な機能がついてますが、とりあえずこんな感じで。\r\n\r\n&gt;
    writeLines(deparse(parse(text=code, srcfile=NULL)))\r\nexpression(sapply(1:10,
    function(n) {\r\n    for (i in 1:n) {\r\n        print(n)\r\n    }\r\n    print(\"------\")\r\n}))</pre>\n\t"
  :code: |
    code &lt;- ' sapply(1:10, function(n)
                          {
                              for(i in 1:n)
      {
                                  print(n)
                                   }
                              print("------")
                                          }
    # comment
             )
    '
    writeLines(deparse(parse(text=code, srcfile=NULL)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6733'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6733
  :user_name: nori
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2008/07/15 00:18 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>:D</p>\n\n\t"
  :code: |
    import this
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6734'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6734
  :user_name: 匿名
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/07/14 23:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">4番目の条件がなければ、\r\n私はプラス評価しますよ（やらないけど）。\r\n\r\n「コンパイラが構文解析した結果を利用する」\r\nなら楽しそうじゃないですか。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6740'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6740
  :user_name: leque
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/07/15 21:56 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Gauche で書いてみました。基本的に read して write しただけです。</p>\n\n\t"
  :code: |
    (define (main args)
      (for-each write
                (call-with-input-file (cadr args)
                  (cut port-&gt;list read &lt;&gt;))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6748'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6748
  :user_name: sotarok
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/655/
  :language: PHP
  :time: 2008/07/16 09:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    &lt;?php
    echo php_strip_whitespace("filename.php");
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6749'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6749
  :user_name: syat
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/766/
  :language: C
  :time: 2008/07/16 11:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C#でまじめにやってみた。\r<br>（あれ？α置換でも同じようなコード書いた気が）\r<br>動けばよかろう、な品質です。\r<br>"
  :code: |
    using System;
    using System.Text;
    using System.IO;

    namespace DouKaku
    {
        class Program
        {
            /**
             * 内部状態
             *   通常,文字リテラル,文字列リテラル,逐語文字列リテラル,行コメント,範囲コメント
             */
            enum State { None, Char, RegularStr, VerbatimStr, LineComment, DelimitedComment }

            /* コード圧縮を行う */
            static string Compress(string code)
            {
                string WhiteSpace = " \t\r\n";                  //空白
                string LineTerminator = "\r\n";                 //行終端
                string Kigou = @"{}[]().,:;+-*/%&amp;|^!~=&lt;&gt;?""'@"; //演算子・記号
                StringBuilder sb = new StringBuilder();
                State state = State.None;

                for (int i = 0 ; i &lt; code.Length ; i++) {
                    switch (state) {
                    case State.LineComment:         //行コメント
                        if (LineTerminator.IndexOf(code[i]) &gt;= 0)
                            state = State.None;
                        break;
                    case State.DelimitedComment:    //範囲コメント
                        if (code[i] == '*' &amp;&amp; code[i + 1] == '/') {
                            state = State.None;
                            i++;
                        }
                        break;
                    case State.RegularStr:          //文字列リテラル
                    case State.Char:                //文字リテラル
                        if (code[i] == '\\')
                            sb.Append(code[i++]);
                        else if (code[i] == (state == State.Char ? '\'' : '"'))
                            state = State.None;
                        sb.Append(code[i]);
                        break;
                    case State.VerbatimStr:         //逐語文字列リテラル
                        if (code[i] == '"')
                            if (code[i + 1] != '"')
                                state = State.None;
                            else {
                                sb.Append('"');
                                i++;
                            }
                        sb.Append(code[i]);
                        break;
                    case State.None:                //通常
                        if (code[i] == '/' &amp;&amp; code[i + 1] == '/') {
                            state = State.LineComment;
                        } else if (code[i] == '/' &amp;&amp; code[i + 1] == '*') {
                            state = State.DelimitedComment;
                            i++;
                        } else if (code[i] == '"') {
                            state = State.RegularStr;
                            sb.Append(code[i]);
                        } else if (code[i] == '\'') {
                            state = State.Char;
                            sb.Append(code[i]);
                        } else if (code[i] == '@' &amp;&amp; code[i + 1] == '"') {
                            state = State.VerbatimStr;
                            sb.Append("@\"");
                            i++;
                        } else if (WhiteSpace.IndexOf(code[i]) &gt;= 0) {
                            if (WhiteSpace.IndexOf(code[i + 1]) &lt; 0
                             &amp;&amp; Kigou.IndexOf(code[i + 1]) &lt; 0
                             &amp;&amp; 0 &lt; sb.Length
                             &amp;&amp; WhiteSpace.IndexOf(sb[sb.Length - 1]) &lt; 0
                             &amp;&amp; Kigou.IndexOf(sb[sb.Length - 1]) &lt; 0)
                                sb.Append(' ');
                        } else
                            sb.Append(code[i]);
                        break;
                    }
                }
                return sb.ToString();
            }

            static void Main(string[] args)
            {
                try {
                    string input = File.ReadAllText(args[0]);
                    string output = Compress(input);
                    Console.WriteLine(output);
                } catch (ApplicationException ex) {
                    Console.WriteLine(ex.StackTrace);
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6761'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6761
  :user_name: Nemo
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/07/17 10:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Postscript では、通常、コードは実行可能な圧縮配列の形で\ncurrent dict に記録されるので、それを書きだす、という方向\nでいいのでしょうかね....\nあまり潰しが利きませんが...</p>\n\n\t"
  :code: |
    %!PS

    % テスト用コード
    /TestProc { % Hogehoge Fugafuga
        1 3 roll 10 add % areare
        (abc%Hoge) == == % zzz
    } def

    % ========  出力
    currentdict /TestProc get ==

    % ======== 以下出力結果
    % {1 3 roll 10 add (abc%Hoge) == ==}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6766'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6766
  :user_name: 匿名
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/07/19 10:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>コメント #6548 を改造して、全てのコメントを除いて空白と改行を１個にまとめるプログラムにしました。</p>\n<p>空白は削除できる場合もあるのですが、意味が変わる場合が考えられるために１個は残してあります。</p>\n\n\t"
  :code: "import java.util.regex.*;\nimport java.io.*;\n\npublic class Decomment2
    {\n    static final String LITERAL = \"(?:\\\"(?:\\\\\\\\.|[^\\\"])*\\\")|(?:\\'(?:\\\\\\\\.|[^\\'])*\\')\";\n
    \   static final String COMMENT1 = \"(?s:/\\\\*.*?\\\\*/)\";\n    static final
    String COMMENT2 = \"//.*\";\n    static final String SPACES = \"\\\\s+\";\n    static
    final Pattern DECOM_PAT = Pattern.compile(\"(\" + LITERAL + \")|((\" + \n            COMMENT1
    + \"|\" + COMMENT2 + \"|\" + SPACES + \")+)\");\n    static final String LINE_SEPARATOR
    = System.getProperty(\"line.separator\");\n    \n    public static void main(String[]
    args) throws IOException {\n        for (String name : args) {\n            BufferedReader
    r = new BufferedReader(new FileReader(name));\n            FileWriter w = new
    FileWriter(name + \".out\");\n            StringBuilder sb = new StringBuilder();\n
    \           String line;\n            while ((line = r.readLine()) != null) {\n
    \               sb.append(line).append(LINE_SEPARATOR);\n            }\n            Matcher
    m = DECOM_PAT.matcher(sb);\n            StringBuffer replace = new StringBuffer();\n
    \           while (m.find()) {\n                if (m.group(2) != null &amp;&amp;
    m.group(2).length() &gt; 0) {\n                    m.appendReplacement(replace,
    \" \");\n                } else {\n                    m.appendReplacement(replace,
    \"$1\");\n                }\n            }\n            m.appendTail(replace);\n
    \           w.write(replace.toString());\n            w.close();\n        }\n
    \   }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6803'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6803
  :user_name: mc
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/07/22 11:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  readで読んで、writeでプリティプリント属性をオフにして印字してみています。\r<br>入力ファイル:\r<br>;;; doukaku-189.data -*- lisp -*- \r<br><br>;; 1\r<br>(let ((x 10   )\r<br>      (y 20  ))\r<br>  (list x  y  ))\r<br><br>;; 2\r<br>(let ((x 10)\r<br>      (y   20))\r<br>  (list x  y   ))\r<br>~~\r<br>印字結果:\r<br>(LET ((X 10) (Y 20)) (LIST X Y))(LET ((X 10) (Y 20)) (LIST X Y))\n\t"
  :code: "(with-open-file (str \"doukaku-189.data\")\n  (loop :for in := (read str
    nil nil) :while in \n        :do (write in :pretty nil)))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6810'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/6810
  :user_name: kozima
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/164/
  :language: Emacs
  :time: 2008/07/23 07:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>昔ゴルフ用に書いたものを書き直しました。Emacs のバッファを書き換えます。対象言語は Common Lisp で、バッファのモードは
    lisp-mode と仮定しています。</p>\n<dl class=\"docutils\">\n<dt>出力例:</dt>\n<dd>(defun mylib-compress-need-space-p()(cond((or(bobp)(eobp))nil)((string-match\"[\"'(),`]\"(string(following-char)))nil)((looking-back\"#[0-9]+#\")nil)((looking-back\"#\\\\.\")t)((string-match\"[\"()]\"(string(preceding-char)))nil)(t)))</dd>\n</dl>"
  :code: |
    (defun mylib-compress-region (&amp;optional start end)
      (interactive "r")
      (save-restriction
        (when (and start end)
          (narrow-to-region start end)
          (goto-char (point-min)))
        (loop
          do (delete-region (point)
                            (progn (while (forward-comment 1)) (point)))
          until (or (eobp) (= (following-char) ?\)))
          if (mylib-compress-need-space-p)
          do (insert " ")
          if (looking-at "\\(#'?\\|['`]\\|,@?\\)?(")
          do
          (down-list 1)
          (mylib-compress-region)
          (up-list 1)
          else do (forward-sexp 1))))

    (defun mylib-compress-need-space-p ()
      (cond ((or (bobp) (eobp))
             nil)
            ((string-match "[\"'(),`]" (string (following-char)))
             nil)
            ((looking-back "#[0-9]+#")
             nil)
            ((looking-back "#\\\\.")
             t)
            ((string-match "[\"()]" (string (preceding-char)))
             nil)
            (t)))
  :tags:
  - Emacs22
  :references:
    :url: 
    :title: 
- :id: '8270'
  :parent_id: '189'
  :url: http://ja.doukaku.org/comment/8270
  :user_name: saws
  :user_url: /web/20090514041644/http://ja.doukaku.org/user/642/
  :language: Ruby
  :time: 2009/01/01 20:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>スペースとタブと空行を削除しています.</p>\n\n\t"
  :code: |
    def del_space(str)
      str.each_line.map{|line|
        line.gsub!(/\s*(:^\s)??/){|m| m == "\n" ? m : ''}
        line.gsub!(/\t/, '')

        line.empty?||line == "\n" ? nil : line


      }.compact.join
    end
    print del_space(File.read(__FILE__))
  :tags:
  - 1.9.0
  :references:
    :url: 
    :title: 
