---
:id: '204'
:title: 文字列型日時ののN秒後時間取得
:comments:
- :id: '7401'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7401
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/08/27 06:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">日時を表す文字列と時間(秒)を受け取り\r\n指定された日時からN秒となる日時を出力する関数
    DateEx() を作成してください。\r\n\r\n関数の仕様は次の通りです。\r\n1. 入力となる日時の書式は任意である。\r\n    → プログラムの都合に合わせてよい。\r\n2.
    入力となる時間(秒)は、負の値も許容すること。\r\n    また、負の値が指定された場合、指定の日時よりも前の日時を出力すること\r\n3. 出力する日時は入力の日時と同じ書式をとる文字列であること\r\n4.
    出力する日時は正規化されていること\r\n5. 出力先は標準出力、または、バッファのいずれでもよい。\r\n\r\nたとえば、DateEx(\"20080827235925\",40)ならば\r\n出力は\r\n「20080828000005」です。\r\n\r\n余力があれば時間を省略可能とし、\r\n省略された場合は「現在時刻」を利用するようにしてみてください。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7533'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7533
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/09/01 05:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">最近は普通にパーサがある時代になったのですね。\r\nごめんなさい盲点でした^^；；\r\n\r\nということで、「仕様.3」については、\r\n入力の書式は限定しないこととし、出力の書式を限定するようにしてください。\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7506'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7506
  :user_name: nori
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2008/08/31 19:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>このお題は日時のparseをさせたいのでしょうか？それとも差分の計算をさせたいのでしょうか？</p>\n\n\t"
  :code: |
    def dateex(d, delta):
      return d + datetime.timedelta(seconds=delta)

    if __name__ == '__main__':
      import time
      day = datetime.date(2008, 8, 31)
      print dateex(day, 100000)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7507'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7507
  :user_name: あにす
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2008/08/31 19:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  date = \"2008/08/27 23:59:25\"\r<br>addSeconds = 40\r<br>&gt; \"2008/08/28 00:00:05\"\n\t"
  :code: "using System;\n\nclass Program {\n    static void Main(string[] args) {\n
    \       Console.WriteLine(\n            DateEx(Console.ReadLine(), long.Parse(Console.ReadLine()))\n
    \           );\n        \n        Console.WriteLine(\n            DateEx(long.Parse(Console.ReadLine()))\n
    \           );\n        \n        Console.ReadLine();\n    }\n\n    static string
    DateEx(string date, long addSeconds) {\n        DateTime d;\n        DateTime.TryParse(date,
    out d);\n        if(d == null) throw new ArgumentException(\"日付が正しくありません。\", \"date\");\n
    \       return d.AddSeconds((double)addSeconds).ToString();\n    }\n\n    static
    string DateEx(long addSeconds) {\n        return DateEx(DateTime.Now.ToString(),
    addSeconds);\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7508'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7508
  :user_name: だいら
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/468/
  :language: PHP
  :time: 2008/08/31 19:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    &lt;?php
    function DateEx($time, $diff){
        echo echo date('YmdHis',strtotime($time)+$diff);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7509'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7509
  :user_name: だいら
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/468/
  :language: 
  :time: 2008/08/31 19:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>echoが2つになってしまった・・・。片方いらないです。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7510'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7510
  :user_name: emasaka
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/08/31 19:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    DateEx() {
      date -d "$1 $2 seconds"
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7511'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7511
  :user_name: emasaka
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/08/31 20:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>仕様2を満たしていませんでした。</p>\n<p>修正と、ついでに1引数に対応。</p>\n\n\t"
  :code: |
    DateEx() {
      [ -z "$2" ] &amp;&amp; set '' $1
      if [[ $2 == -* ]];then
        date -d "$1 ${2:1} seconds ago"
      else
        date -d "$1 $2 seconds"
      fi
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7512'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7512
  :user_name: turugina
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/08/31 20:15 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">入出力の日付文字列はISO8601形式です。</pre>\n\t"
  :code: |
    &lt;?xml version="1.0" encoding="utf-8"?&gt;
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:fn="http://www.w3.org/2005/xpath-functions"
      xmlns:my="uri:ja.doukaku.org:my-functions"
      exclude-result-prefixes="my"
      &gt;

      &lt;xsl:output method="text" /&gt;

      &lt;xsl:template match="/" &gt;
        &lt;xsl:value-of select="my:DateEx('2008-09-01T10:02:38', 10000)"/&gt;
      &lt;/xsl:template&gt;


      &lt;xsl:function name="my:DateEx" as="xs:string"&gt;
        &lt;xsl:param name="dstr" as="xs:string" /&gt;
        &lt;xsl:param name="sec" as="xs:integer" /&gt;

        &lt;xsl:sequence select="xs:string(
          xs:dateTime($dstr) +
          xs:dayTimeDuration(fn:concat('PT',xs:string($sec),'S'))
          )" /&gt;
      &lt;/xsl:function&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: /web/20090317043846/http://www.w3.org/TR/xpath-functions/#date-time-duration-conformance
    :title: '"XQuery 1.0 and XPath 2.0 Functions and Operators" の日付関連の説明'
- :id: '7513'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7513
  :user_name: horiuchi
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2008/08/31 20:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>フォーマットの指定がなかったので、とりあえずサンプルと同じにしてみました。\r</p>\n</div>\n\t"
  :code: |
    import java.text.DateFormat;
    import java.text.ParseException;
    import java.text.SimpleDateFormat;
    import java.util.Calendar;
    import java.util.Date;

    public class Sample204 {
        private static final DateFormat FORMAT = new SimpleDateFormat("yyyyMMddHHmmss");

        public static String dateEx(String time, int seconds) throws ParseException {
            Date date = FORMAT.parse(time);
            return dateEx(date, seconds);
        }
        public static String dateEx(int seconds) {
            return dateEx(new Date(), seconds);
        }

        private static String dateEx(Date date, int seconds) {
            Calendar cal = Calendar.getInstance();
            cal.setTime( date );
            cal.add(Calendar.SECOND, seconds);
            return FORMAT.format(cal.getTime());
        }


        public static void main(String[] args) {
            try {
                System.out.println(dateEx("20080827235925",40));
                System.out.println(dateEx(0));
            } catch (ParseException ex) {
                ex.printStackTrace();
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7514'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7514
  :user_name: turugina
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2008/08/31 20:50 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">DateTimeと関連モジュールを使って。\r\n\r\n入力はコマンドライン引数で、ISO8601形式の日付と秒数を指定します。\r\n日付を省略すると実行時の時刻を使います。\r\n\r\n#
    入力はISO8601形式じゃなくてもparseしてくれます。ので、お題の条件3.が微妙な感じ</pre>\n\t"
  :code: |
    use strict;
    use warnings;

    use DateTime;
    use DateTime::Format::DateParse;

    my $d = @ARGV==2 ? DateTime::Format::DateParse-&gt;parse_datetime(shift)
                     : DateTime-&gt;now(time_zone =&gt; q{Asia/Tokyo});
    print $d-&gt;add(seconds =&gt; shift||0)-&gt;iso8601,$/;
  :tags: []
  :references:
    :url: /web/20090317043846/http://search.cpan.org/~jhoblitt/DateTime-Format-DateParse-0.04/lib/DateTime/Format/DateParse.pod
    :title: DateTime::Format::DateParse
- :id: '7515'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7515
  :user_name: turugina
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2008/08/31 21:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>しまった、お題は「関数を作れ」だった。</p>\n\n\t"
  :code: |
    use strict;
    use warnings;

    use DateTime;
    use DateTime::Format::DateParse;

    print DateEx(@ARGV),$/;

    sub DateEx
    {
      (@_&gt;=2 ? DateTime::Format::DateParse-&gt;parse_datetime(shift)
             : DateTime-&gt;now(time_zone =&gt; q{Asia/Tokyo}))
      -&gt;add(seconds =&gt; shift||0)-&gt;iso8601;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7516'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7516
  :user_name: turugina
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/760/
  :language: C
  :time: 2008/08/31 21:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Boost.Date_Time で。\r\n入出力の日付形式はコード中に書いてある通り(例:\"2008-Sep-01
    12:34:56\")です。</pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;string&gt;
    #include &lt;boost/date_time/posix_time/posix_time.hpp&gt;
    #include &lt;boost/lexical_cast.hpp&gt;

    std::string
    DateEx(
        const std::string&amp; dstr,
        int                sec
        )
    {
      using namespace boost::posix_time;
      return boost::lexical_cast&lt;std::string&gt;(
          ptime(dstr.empty() ? second_clock::local_time()
                             : time_from_string(dstr)
          ) + seconds(sec)
        );
    }

    int main(int c, char** v)
    {
      if ( c == 1 ) {
        std::cout &lt;&lt; "usage: " &lt;&lt; v[0] &lt;&lt; " [&lt;datetime{YYYY-Mon-DD hh:mm:ss}&gt;] &lt;seconds&gt;\n";
        return 0;
      }

      std::cout &lt;&lt; DateEx(
          c&gt;=3?v[1]:"",
          boost::lexical_cast&lt;int&gt;(c&gt;=3?v[2]:v[1])
          ) &lt;&lt; "\n";

      return 0;
    }
  :tags:
  - Boost.Date_Time
  - boost
  :references:
    :url: /web/20090317043846/http://www.boost.org/doc/libs/1_36_0/doc/html/date_time.html
    :title: Boost.Date_Time
- :id: '7517'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7517
  :user_name: turugina
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/08/31 21:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">条件2を満たしてなかった。ので、修正。</pre>\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:fn="http://www.w3.org/2005/xpath-functions"
      xmlns:my="uri:ja.doukaku.org:my-functions"
      exclude-result-prefixes="my"
      &gt;

      &lt;xsl:output method="text" /&gt;

      &lt;xsl:template match="/" &gt;
        &lt;xsl:value-of select="my:DateEx('2008-09-01T10:02:38', -1)"/&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:function name="my:DateEx" as="xs:string"&gt;
        &lt;xsl:param name="dstr" as="xs:string" /&gt;
        &lt;xsl:param name="sec" as="xs:integer" /&gt;

        &lt;xsl:sequence select="xs:string(
          xs:dateTime($dstr) +
          xs:dayTimeDuration(
            fn:concat(
              (if($sec&amp;lt;0)then'-'else''),
              'PT', xs:string(fn:abs($sec)), 'S'
              )
            )
          )" /&gt;
      &lt;/xsl:function&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7518'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7518
  :user_name: sumim
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/08/31 22:01 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Squeak Smalltalk では日時オブジェクト同士の演算が可能です。</p>\n\n\t"
  :code: |
    "文字列指定した日時の場合"
    '2008-09-01T12:00:00+09:00' asDateAndTime - 10 seconds   "=&gt; 2008-09-01T11:59:50+09:00 "

    "現在日時の場合"
    DateAndTime now + 15 seconds
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '7520'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7520
  :user_name: Dubhead
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/785/
  :language: D
  :time: 2008/08/31 23:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  D 2.0 + Phobos。\n\t"
  :code: |
    import std.conv;
    import std.date;
    import std.stdio;

    string DateEx(string datetime, int tdelta_in_secs)
    {
        d_time t = std.date.parse(datetime);
        d_time new_datetime = t + tdelta_in_secs * std.date.TicksPerSecond;
        return std.date.toString(new_datetime);
    }

    void main(string[] args)
    {
        string datetime;
        int tdelta_in_secs;
        if (args.length == 3) {
            datetime = args[1];
            tdelta_in_secs = toInt(args[2]);
        }
        else {
            d_time now = std.date.getUTCtime;
            datetime = std.date.toString(now);
            tdelta_in_secs = toInt(args[1]);
        }
        writefln("%s", DateEx(datetime, tdelta_in_secs));
    }

    // eof
  :tags: []
  :references:
    :url: /web/20090317043846/http://www.digitalmars.com/d/2.0/phobos/std_date.html
    :title: ''
- :id: '7521'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7521
  :user_name: Dubhead
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/785/
  :language: D
  :time: 2008/08/31 23:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>使用例も書かないとダメですね。</p>\n\n\t"
  :code: |
    import std.conv;
    import std.date;
    import std.stdio;

    string DateEx(string datetime, int tdelta_in_secs)
    {
        d_time t = std.date.parse(datetime);
        d_time new_datetime = t + tdelta_in_secs * std.date.TicksPerSecond;
        return std.date.toString(new_datetime);
    }
    unittest {
        assert(DateEx("Mon Sep 01 13:00:00 GMT+0900 2008", -3600) ==
            "Mon Sep 01 12:00:00 GMT+0900 2008");
        assert(DateEx("Mon Sep 01 13:00:00 GMT+0900 2008", 3600) ==
            "Mon Sep 01 14:00:00 GMT+0900 2008");
    }

    void main(string[] args)
    {
        string datetime;
        int tdelta_in_secs;
        if (args.length == 3) {
            datetime = args[1];
            tdelta_in_secs = toInt(args[2]);
        }
        else {
            d_time now = std.date.getUTCtime;
            datetime = std.date.toString(now);
            tdelta_in_secs = toInt(args[1]);
        }
        writefln("%s", DateEx(datetime, tdelta_in_secs));
    }

    // eof
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7524'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7524
  :user_name: seri
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/641/
  :language: Ruby
  :time: 2008/09/01 00:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">3.の条件を無視すればこれでもOKです。\r\n（Time.parseはさまざまな書式を受け付けるため）\r\n\r\ndef
    date_ex(diff, date = Time.now.to_s)\r\n  puts Time.parse(date) + diff\r\nend\r\n\r\n</pre>\n\t"
  :code: |
    require 'time'

    def date_ex(diff, date = Time.now.strftime("%Y/%m/%d %H:%M:%S"))
      raise unless date =~ /\d+\/\d+\/\d+\s+\d+:\d+:\d+/
      puts (Time.parse(date) + diff).strftime("%Y/%m/%d %H:%M:%S")
    end

    date_ex(100, '2008/09/01 14:06:25') #=&gt; 2008/09/01 14:08:05
    date_ex(100) #=&gt; 「現在時刻」から100秒後
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7526'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7526
  :user_name: matarillo
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/136/
  :language: Other
  :time: 2008/09/01 00:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>VBA for Excel (2003)</p>\n\n\t"
  :code: |
    Function DateEx(str, sec)
      p = InStr(str, " ")
      DateEx = DateValue(Left(str, p - 1)) + TimeValue(Right(str, Len(str) - p)) + sec / 86400
    End Function
  :tags:
  - vba
  :references:
    :url: 
    :title: 
- :id: '7527'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7527
  :user_name: pooq
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/09/01 01:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">関数に出力機能まで含めるとなんか使いにくそう。\r\n\r\n   '2008 8 27
    23 59 25' DateEx 40\r\n2008 8 28 0 0 5\r\n\r\n   '2008 8 27 23 59 25' DateEx _40\r\n2008
    8 27 23 58 45\r\n\r\n   DateEx 100000000\r\n2011 11 3 0 12 46.731\r\n</pre>\n\t"
  :code: |
    load 'dates'

    now =: 6!:0

    DateEx =: 3 : 0
    (": now '') DateEx y
    :
    wd 1 tsrep (y * 1000) + tsrep ". x
    )
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7529'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7529
  :user_name: leque
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/09/01 03:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>日時の書式は ISO-8601 の「西暦-月-日T時:分:秒」形式です。時間を省略する場合には空文字列を渡すことにしてみました。</p>\n\n\t"
  :code: |
    (use srfi-13)
    (use srfi-19)

    (define (date-ex str delta)
      (let ((t (if (string-null? str)
                   (current-time time-utc)
                   (date-&gt;time-utc
                    (string-&gt;date str "~Y-~m-~dT~H:~M:~S")))))
        (date-&gt;string
         (time-utc-&gt;date
          (add-duration t (make-time time-duration 0 delta)))
         "~5")))

    (define (main args)
      (print (date-ex (cadr args) (string-&gt;number (caddr args)))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '7532'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7532
  :user_name: mc
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/09/01 05:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  net-telent-dateを使ってRFC 2822形式で出力するようにしてみました。\r<br>他にも様々な形式をパーズしてくれるライブラリです。\r<br>CLの引数の順番はお題の例とは逆にしています。\r<br>(date-ex 40 \"Thu, 28 Aug 2007 23:59:25 +0900\")\r<br>;=&gt; \"Thu, 30 Aug 2007 00:00:05 +0900\" \r<br><br>(date-ex -3600)\r<br>;=&gt; \"Mon, 01 Sep 2008 17:56:51 +0900\" \n\t"
  :code: |
    (require :net-telent-date)
    (require :lw-compat)

    (defpackage :doukaku-204 (:use :cl :date :lispworks))
    (in-package :doukaku-204)

    (defun date-ex (sec &amp;optional time-string)
      (when-let (ut (if time-string
                        (parse-time time-string)
                        (get-universal-time)))
        (universal-time-to-rfc2822-date (+ ut sec))))
  :tags: []
  :references:
    :url: /web/20090317043846/http://www.cliki.net/net-telent-date
    :title: net-telent-date
- :id: '7533'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7533
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/09/01 05:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">最近は普通にパーサがある時代になったのですね。\r\nごめんなさい盲点でした^^；；\r\n\r\nということで、「仕様.3」については、\r\n入力の書式は限定しないこととし、出力の書式を限定するようにしてください。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7534'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7534
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/09/01 05:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ども、raynstardです。\r\nうーん、どっちにになるのでしょう？(笑\r\n\r\nこのお題の目的は、文字列という日付とは関係ない入力データで\r\n日付の計算をすることです。\r\n\r\nそもそもの発端は、シェルで自分自身を\r\n再スケジュールしようとしたらシェルじゃできねぇってことで\r\n計算部分をperlの呼び出しで妥協してしまったことです。\r\n\r\n最近の言語には、大抵パーサがあるのですね。\r\n盲点でしたorz\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7535'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7535
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/09/01 05:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">てもとのdateコマンドでは動きませんでした。\r\nバージョンていくつでしょう？\r\n\r\n$
    date --version\r\ndate (GNU coreutils) 5.96\r\nCopyright (C) 2006 Free Software
    Foundation, Inc.\r\nThis is free software.  You may redistribute copies of it
    under the terms of\r\nthe GNU General Public License &lt;http://www.gnu.org/licenses/gpl.html&gt;.\r\nThere
    is NO WARRANTY, to the extent permitted by law.\r\n\r\nWritten by David MacKenzie.\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7536'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7536
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: Perl
  :time: 2008/09/01 06:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Perlにまでパーサっがあったのですね。。。\r\n僕が妥協した時はPOSIXを使ったべた書きでした。\r\n#
    ほとんどCとかわりません(笑</pre>\n\t"
  :code: |
    #!/usr/bin/env perl
    use strict;
    use POSIX qw/strftime mktime/;

    sub DateEx($$)
    {
            my $outDate = '';
            my @t = ($_[0] =~ m/(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/);

            $t[0] -= 1900; $t[1] -= 1; @t = reverse @t;
            $t[0] += $_[1];
            mktime( @t );
            return strftime("%Y%m%d%H%M%S", @t);
    }

    print DateEx("20080827235925",40) . "\n";

    __END__
    #EOF
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7537'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7537
  :user_name: emasaka
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/852/
  :language: 
  :time: 2008/09/01 09:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  確認したdateのバージョンは、GNU coreutilsの6.10と5.97です。\r<br>なるほど、少なくともcoreutils版dateじゃないと使えないんですね。\r<br><br>私のところでの実行例は以下のとおりです。\r<br><br>$ DateEx 'Thu Aug 28 23:59:25 JST 2008' 40\r<br>Fri Aug 29 00:00:05 JST 2008\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7538'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7538
  :user_name: kkobayashi
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2008/09/01 11:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">フォーマットが任意だと楽ちんでいいですね。\r\n\r\n&gt; DateEx(\"2008-09-02
    00:00:00 JST\", 30)\r\n[1] \"2008-09-02 00:00:30 JST\"\r\n&gt; DateEx(\"2008-09-02
    00:00:00 JST\", -30)\r\n[1] \"2008-09-01 23:59:30 JST\"\r\n</pre>\n\t"
  :code: |
    DateEx &lt;- function(d1=Sys.time(), d2=0){
      as.POSIXct(d1) + d2
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7539'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7539
  :user_name: lunlumo
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2008/09/01 12:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>　Javaと余り変わりませんがscala版を。</p>\n</div>\n\t"
  :code: |
    import    java.text.DateFormat
    import    java.text.ParseException
    import    java.text.SimpleDateFormat
    import    java.util.Calendar

    object DateEx {
        val    formatter:DateFormat = new SimpleDateFormat("yyyyMMddHHmmss")
        def DateEx(date:String,diff:Int):String = {
            val    calendar:Calendar = Calendar.getInstance
            calendar.setTime(formatter.parse(date))
            DateEx(calendar,diff)
        }
        def DateEx(diff:Int):String = DateEx(Calendar.getInstance,diff)
        def DateEx(calendar:Calendar,diff:Int):String = {
            calendar.add(Calendar.SECOND,diff)
            formatter.format(calendar.getTime)
        }
        def main(args:Array[String]):Unit = {
            try {
                args.length match {
                    case 2 =&gt; println(DateEx(args(0),args(1).toInt))
                    case 1 =&gt; println(DateEx(args(0).toInt))
                    case _ =&gt; println(DateEx("20080827235925",40))
                }
            } catch {
                case ex:ParseException =&gt; println("invalid date format.")
                case ex =&gt; ex.printStackTrace
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7543'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7543
  :user_name: syat
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2008/09/01 18:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  JavaScriptのパーサを使用。Firebugで確認。\r<br>出力形式にあわせるとこんな入力になった。\r<br>toLocaleStringメソッドを使えば\"2008年9月2日 8:50:34\"のように出力するが、パーサが解釈してくれない。\r<br>&gt;&gt;&gt; DateEx('Tue Sep 02 2008 8:30:00',1234)\r<br>\"Tue Sep 02 2008 08:50:34 GMT+0900\"\n\t"
  :code: |
    function DateEx(t,s) new Date(Date.parse(t)+s*1000).toString();
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7544'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7544
  :user_name: syat
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/766/
  :language: 
  :time: 2008/09/01 18:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>こんなのもあたーよ。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20090317043846/http://www.enjoyxstudy.com/javascript/dateformat/
    :title: dateformat.js
- :id: '7550'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7550
  :user_name: M.Suzuki
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/771/
  :language: Haskell
  :time: 2008/09/02 05:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">なんの工夫もないコードです。\r\n</pre>\n\t"
  :code: |
    import Data.Time

    addDate time sec = show $ addUTCTime sec $ read time

    main = do
        putStrLn $ addDate "2008-09-02 10:20:30 UTC" 15
        putStrLn $ addDate "2008-09-02 10:20:30 UTC" (-5)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7552'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7552
  :user_name: 99yen
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/09/02 10:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なでしこで。下の二つの関数はほかから流用です。</p>\n\n\t"
  :code: |
    DateEx("2008/08/27 23:59:25",40)を表示
    DateEx("2008/08/27",40)を表示

    ●DateEx(str,n)
        dateとは配列=区切(str," ")
        もし(date[1]="")ならば、date[1]=今
        配列結合(UNIX2date(date2UNIX(date,0)+n)," ")
    ●date2UNIX(date,tzd)
        戻(日数差("1970/1/1",date[0])*(60*60*24)+秒差("0:0:0",date[1])+tzd)
    ●UNIX2date(unix)
        tmpとは配列
        dayとは整数=unix/86400%86400
        unix=unix-day*86400
        tmp[0]=日付加算("1970/1/1","//{day}")
        tmp[1]="{ゼロ埋め(unix/3600%24,2)}:{ゼロ埋め(unix/60%60,2)}:{ゼロ埋め(unix%60,2)}"
        tmpで戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7553'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7553
  :user_name: raynstard
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2008/09/02 10:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あれ？バージョン同じだぞ?とおもって再度やってみたら動きました。\r\n秒の指定を間違えていたみたいです。\r\n失礼しました。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7561'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7561
  :user_name: Songmu
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/763/
  :language: Perl
  :time: 2008/09/04 07:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>モジュールなしで書いた</p>\n\n\t"
  :code: "#! /usr/bin/perl\nuse strict;\nuse warnings;\n\nmy $date_string = 20080827235925;\nmy
    $add_seconds = 40;\n\nprint DateEx($date_string,$add_seconds);\n\nsub DateEx{\n
    \   my ($date_string, $add_seconds) = @_;\n    \n    return 'Error!' unless $date_string
    =~ /^\\d{14}$/;\n    return 'Error!' unless $add_seconds =~ /^-?\\d+$/;\n    \n
    \   my ($year,$month,$day,$hour,$minutes,$seconds)\n        = $date_string =~
    /^(\\d{1,4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})$/;\n    my @result = add_seconds($year,$month,$day,$hour,$minutes,$seconds,$add_seconds);\n
    \   \n    return sprintf(\"%04d%02d%02d%02d%02d%02d\",@result);\n}\n\nsub add_seconds{\n
    \   my ($year,$month,$day,$hour,$minutes,$seconds,$add_seconds) = @_;\n    \n
    \   #時間、秒を先に出す\n    my ($tmp_day,$result_hour,$result_minutes,$result_seconds)\n
    \       = seconds_to_day($add_seconds + day_to_seconds($day-1,$hour,$minutes,$seconds));\n
    \   \n    #日付を計算\n    my ($result_year, $result_month, $result_day)\n        =
    date_add($year,$month,$tmp_day);\n    \n    return ($result_year,$result_month,$result_day,$result_hour,$result_minutes,$result_seconds);\n}\n\nsub
    day_to_seconds{#何日、何時間、何分の形式を総秒数に変換\n    my ($day,$hour,$minutes,$seconds) = @_;\n
    \   \n    my $SECONDS_PER_MINUTES = 60;\n    my $SECONDS_PER_HOUR = $SECONDS_PER_MINUTES
    * 60;\n    my $SECONDS_PER_DAY = $SECONDS_PER_HOUR * 24;\n    \n    my $total_second
    = $day     * $SECONDS_PER_DAY\n                     + $hour    * $SECONDS_PER_HOUR\n
    \                    + $minutes * $SECONDS_PER_MINUTES\n                     +
    $seconds\n                     ;\n    return $total_second;\n}\n\nsub seconds_to_day{#秒数を　何日、何時間、何分の形式に変換\n
    \   my ($total_seconds) = @_;\n    \n    my $SECONDS_PER_MINUTES = 60;\n    my
    $SECONDS_PER_HOUR = $SECONDS_PER_MINUTES * 60;\n    my $SECONDS_PER_DAY = $SECONDS_PER_HOUR
    * 24;\n    \n    my ($day,$hour,$minutes,$seconds) = (0,0,0,0);\n    \n    if($total_seconds
    &gt; 0){\n        $day = int($total_seconds / $SECONDS_PER_DAY) + 1;\n        $hour
    = int($total_seconds / $SECONDS_PER_HOUR) % 24;\n        $minutes = int($total_seconds
    / $SECONDS_PER_MINUTES) % 60;\n        $seconds = $total_seconds % 60;\n    }\n
    \   elsif($total_seconds &lt; 0){\n        $day = (int(($total_seconds * (-1))/$SECONDS_PER_DAY)
    + 1) * (-1);\n        $total_seconds += $day * $SECONDS_PER_DAY * (-1);\n        $hour
    = int($total_seconds / $SECONDS_PER_HOUR) % 24;\n        $minutes = int($total_seconds
    / $SECONDS_PER_MINUTES) % 60;\n        $seconds = $total_seconds % 60;\n    }\n
    \   return ($day,$hour,$minutes,$seconds);\n}\n\nsub date_add{#2008年8月33日は2008年9月2日のような考え方\n
    \   my ($year,$month,$day) = @_;\n    \n    #400年以上のスパンがある場合\n    while(abs($day)
    &gt; (my $DAYS_IN_400YEARS = 365*400+97)){\n        if($day &gt; 0){\n            $day
    -= $DAYS_IN_400YEARS;\n            $year += 400;\n        }\n        else{\n            $day
    += $DAYS_IN_400YEARS;\n            $year -= 400;\n        }\n    }\n    #1年以上のスパンがある場合\n
    \   while(abs($day) &gt; 366){\n        if($day &gt; 0){\n            if($month
    &lt;= 2){\n                while($day &gt; 366){\n                    _uru_or_not($year)
    ? $day -= 366 : $day -= 365;\n                    $year++;\n                }\n
    \           }\n            else{\n                while($day &gt; 366){\n                    _uru_or_not($year+1)
    ? $day -= 366 : $day -= 365;\n                    $year++;\n                }\n
    \           }\n        }\n        else{\n            if($month &lt;= 2){\n                while($day
    &lt; -366){\n                    _uru_or_not($year-1) ? $day += 366 : $day +=
    365;\n                    $year--\n                }\n            }\n            else{\n
    \               while($day &lt; -366){\n                    _uru_or_not($year)
    ? $day += 366 : $day += 365;\n                    $year--\n                }\n
    \           }\n        }\n    }\n    #一月づつ、足すもしくはさかのぼる\n    while(!(($day &gt;
    0) &amp;&amp; (_get_days_of_month($year,$month) &gt;= $day))){\n        if($day
    &gt; 0){\n            $day -= _get_days_of_month($year,$month);\n            $month++;\n
    \           if($month == 13){\n                $year++;\n                $month
    = 1;\n            }\n        }\n        else{\n            $month--;\n            if($month
    == 0){\n                $year--;\n                $month = 12;\n            }\n
    \           $day += (_get_days_of_month($year,$month) + 1);\n        }\n    }\n
    \   return ($year,$month,$day);\n}\n\nsub _uru_or_not{#閏年か否かの判定\n    my ($year)
    = @_;\n    return 1 if($year % 400 == 0);\n    return 0 if($year % 100 == 0);\n
    \   return 1 if($year % 4   == 0);\n    return 0;\n}\n\nsub _get_days_of_month{#年と月を与えるとその日数を返す\n
    \   my ($year,$month) = @_;\n    \n    my @days_of_months = qw{0 31 28 31 30 31
    30 31 31 30 31 30 31};\n    if(($month == 2) &amp;&amp; (_uru_or_not($year))){\n
    \       return 29;\n    }\n    return $days_of_months[$month];\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7568'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7568
  :user_name: ksky
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/918/
  :language: Groovy
  :time: 2008/09/05 01:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>初めて投稿します。よろしくお願いします。new Date(String s)を使えばもっと短く書けると思うけど、deprecatedだから反則ですよね...</p>\n\n\t"
  :code: |
    format = new java.text.SimpleDateFormat('yyyyMMddHHmmss')

    def dateEx(delta, date = null) {
      d = (date) ? format.parse(date) : new Date()
      format.format(new Date(d.time + delta * 1000))
    }

    println dateEx(40, "20080827235925")
    println dateEx(100)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7588'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7588
  :user_name: susu
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/09/07 08:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "#load \"unix.cma\";;\n\nlet scan_time s =\n  Scanf.sscanf s \"%4d%2d%2d%2d%2d%2d\"
    (fun year mon day h m s -&gt;\n    { Unix.tm_sec = s;  tm_min = m;  tm_hour =
    h;\n      tm_mday = day;  tm_mon = mon;  tm_year = year-1900;\n      tm_wday =
    0;  tm_yday = 0;  tm_isdst = false\n    } ) ;;\n\nlet print_time { \n  tm_year
    = yy; tm_mon = mm; tm_mday = dd;\n  tm_hour = h; tm_min = m; Unix.tm_sec = s }
    =\n  Printf.printf \"%d%02d%02d%02d%02d%02d\" (yy+1900) mm dd h m s;;\n  \nlet
    date_ex s sec =\n  let {Unix.tm_sec = tsec} as tm = scan_time s in\n  print_time
    (snd (Unix.mktime {tm with Unix.tm_sec=tsec+sec}));;\n\n(* date_ex \"20080827235925\"
    40;; *)\n"
  :tags: []
  :references:
    :url: /web/20090317043846/http://d.hatena.ne.jp/mzp/20080811/ocaml
    :title: レコードの名前空間 - みずぴー日記
- :id: '7708'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/7708
  :user_name: Nemo
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/09/27 04:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PostScript で。\r\nすっかり泥沼化してしまったので、まだバグがあるかもしれません。\r\n対応は日本時間のみで、1970-2050年に対応。\r\nただし、2009年7月1日以降、1/1,
    7/1 の午前9時を含む計算で各1秒のずれが\r\n生じる可能性があります(仕様)。\r\n\r\n(20080927000010) -40 DateEx
    ==&gt; (20080926235930)\r\n(20080101085900) 60 DateEx  ==&gt; (20080101090000)\r\n(20080101085900)
    120 DateEx ==&gt; (20080101090100)\r\n(20090101085900) 60 DateEx  ==&gt; (20090101085960)
    (うるう秒)\r\n(20090101085900) 120 DateEx ==&gt; (20090101090059) (うるう秒)\r\n</pre>\n\t"
  :code: "%!PS\n\n/JST 9 60 60 mul mul def\n/LDAY 24 60 60 mul mul def\n/MOFF [\n
    \   0 31 dup 28 add dup 31 add dup 30 add dup 31 add dup 30 add dup 31 add\n    dup
    31 add dup 30 add dup 31 add dup 30 add dup 31 add\n] def\n\n/StrToUTC0 { % (Date
    String)  StrToUTC  MJD  UTC_L\n    % Get UTC / Ignore TZ &amp; leap secs.\n    dup
    8 2 getinterval cvi 3600 mul exch\n    dup 10 2 getinterval cvi 60 mul exch\n
    \   dup 12 2 getinterval cvi exch\n    4 1 roll add add\n    exch\n\n    dup 0
    4 getinterval cvi exch\n    dup 4 2 getinterval cvi\n    dup 2 le {\n        3
    -1 roll 1 sub 3 1 roll\n    12 add\n    } if\n    exch\n    6 2 getinterval cvi\n
    \   exch 2 sub 30.59 mul cvi\n    add exch\n    dup 365.25 mul cvi exch\n    dup
    400 div cvi exch\n    100 div cvi sub add add\n    678912 sub\n    exch\n} bind
    def\n\n/LeapSecs0 [\n   [  (19720630235960) StrToUTC0 ]\n   [  (19721231235960)
    StrToUTC0 ]\n   [  (19731231235960) StrToUTC0 ]\n   [  (19741231235960) StrToUTC0
    ]\n   [  (19751231235960) StrToUTC0 ]\n   [  (19761231235960) StrToUTC0 ]\n   [
    \ (19771231235960) StrToUTC0 ]\n   [  (19781231235960) StrToUTC0 ]\n   [  (19791231235960)
    StrToUTC0 ]\n   [  (19810630235960) StrToUTC0 ]\n   [  (19820630235960) StrToUTC0
    ]\n   [  (19830630235960) StrToUTC0 ]\n   [  (19850630235960) StrToUTC0 ]\n   [
    \ (19871231235960) StrToUTC0 ]\n   [  (19891231235960) StrToUTC0 ]\n   [  (19901231235960)
    StrToUTC0 ]\n   [  (19920630235960) StrToUTC0 ]\n   [  (19930630235960) StrToUTC0
    ]\n   [  (19940630235960) StrToUTC0 ]\n   [  (19951231235960) StrToUTC0 ]\n   [
    \ (19970630235960) StrToUTC0 ]\n   [  (19981231235960) StrToUTC0 ]\n   [  (20051231235960)
    StrToUTC0 ]\n   [  (20081231235960) StrToUTC0 ]\n] def\n\n/LeapSecs 30 dict def\nLeapSecs0
    {\n    LeapSecs exch aload pop put\n} forall\n\n/IsLeapDay { % MJD  IsLeapDay
    \ bool\n    LeapSecs exch known\n} bind def\n\n/Normalize { % MJD secs  Normalize
    \  MJD' secs'\n    {\n        dup 0 lt {\n            LDAY add\n            exch
    1 sub exch\n            LeapSecs 2 index known { 1 add } if\n        } {\n            dup
    LDAY eq {\n                LeapSecs 2 index known { exit } if\n            } if\n
    \           dup LDAY lt {\n                exit\n            } if\n            LeapSecs
    2 index known {\n                1 sub\n            } if\n            LDAY sub\n
    \           exch 1 add exch\n        } ifelse\n    } loop\n} bind def\n\n/StrToUTC
    { % (Date String)  StrToUTC  MJD  secs\n    dup\n    StrToUTC0\n    JST sub\n%
    (Date) MJD secs'\n\n   dup 0 lt {\n       exch 1 sub exch LDAY add\n   } if\n\n
    \   dup 0 eq {\n       1 index 1 sub IsLeapDay\n       {\n           2 index 8
    6 getinterval (085960) eq\n           {\n               exch 1 sub exch LDAY add\n
    \          } if\n       } if\n   } if\n   Normalize\n   3 -1 roll pop\n} bind
    def\n\n/cvs2 { % int  cvs2  (dd)\n    2 string dup dup 3 index\n    % int () ()
    \n    10 idiv 1 string cvs 0 exch putinterval\n    3 -1 roll 10 mod 1 string cvs
    1 exch putinterval\n} bind def\n\n\n/CompTime {\n    % MJD sec () MJD' sec'  CompTime
    \ MJD sec ()   -1/0/1\n    % LocalFunction\n    3 index sub exch\n    4 index
    sub\n    % MJD sec () sec'' MJD''\n    dup 0 lt {\n        pop pop -1\n    } {\n
    \       0 gt {\n            pop 1\n        }{\n            dup 0 lt {\n                pop
    -1\n            } {\n                0 gt {\n                    1\n                }
    {\n                    0\n                } ifelse\n            } ifelse\n        }
    ifelse\n    } ifelse\n} bind def\n\n\n/UTCToStr { %  MJD secs  UTCToStr  (Date
    String)\n    14 string dup 0 (20080101000000) putinterval\n    2050 -1 1970 {\n
    \       4 string cvs 1 index 0 3 -1 roll putinterval\n        dup StrToUTC CompTime\n
    \       0 le { exit } if\n    } for\n    12 -1 1 {\n        cvs2 1 index 4 3 -1
    roll putinterval\n        dup StrToUTC CompTime\n        0 le { exit } if\n    }
    for\n    31 -1 1 {\n        cvs2 1 index 6 3 -1 roll putinterval\n        dup
    StrToUTC CompTime\n        0 le { exit } if\n    } for\n    23 -1 0 {\n    cvs2
    1 index 8 3 -1 roll putinterval\n    dup StrToUTC CompTime\n    0 le { exit }
    if\n    } for\n    % MJD secs (Date)\n    dup StrToUTC exch pop\n    % MJD secs
    (Date) secs'\n    4 2 roll exch pop sub neg\n    % (Date) secs\n    dup 3600 eq
    { % leap second\n    pop dup 10 (5960) putinterval\n    } {\n           dup 60
    idiv\n    % (Date) secs min\n    cvs2 2 index 10 3 -1 roll putinterval\n    %
    (Date) secs\n    60 mod cvs2 1 index 12 3 -1 roll putinterval\n    } ifelse\n}
    bind def\n\n/DateEx { % (Date String)  secs   DateEx   (New Date String)\n    exch
    StrToUTC\n    3 -1 roll add\n    Normalize\n    UTCToStr\n} bind def\n\n% =========================================================\n\n%
    Test Code\n\n(20080927000010) -40 DateEx ==\n(20080101085900) 60 DateEx  ==\n(20080101085900)
    120 DateEx ==\n(20090101085900) 60 DateEx  ==\n(20090101085900) 120 DateEx ==\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8101'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/8101
  :user_name: tazant
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/969/
  :language: C
  :time: 2008/12/01 06:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>これはUnixタイムへの統一を行うと簡単にデータを加工（秒単位で追加）できます。\n問題は一番面倒な文字列からUnixタイムの作成、Unixタイムから文字列の作成です。\n時間の構造体やtime_tを使ってUnixタイムを実現しました。\n面倒で雑ですが、一応汎用的な使い方ができるようにしています。</p>\n<p>これはT216という独自ソフトウェアの作成の一貫として作ったコードです。</p>\n\n\t"
  :code: "#include &lt;time.h&gt;\n#include &lt;stdio.h&gt;\n\n/* どう書く.org #7401\n
    \  http://ja.doukaku.org/204/ */\ntime_t str_time(char *t)\n{\n    struct tm tm;\n
    \   time_t tt;\n    char s[5];\n    int i;\n\n    strncpy(s, t, 4);\n    i = atoi(s);\n
    \   tm.tm_year = i - 1900;\n    s[2] = 0;\n    strncpy(s, t + 4, 2);\n    i =
    atoi(s);\n    tm.tm_mon = i - 1;\n    strncpy(s, t + 6, 2);\n    i = atoi(s);\n
    \   tm.tm_mday = i - 1;\n    strncpy(s, t + 8, 2);\n    i = atoi(s);\n    tm.tm_hour
    = i;\n    strncpy(s, t + 10, 2);\n    i = atoi(s);\n    tm.tm_min = i;\n    strncpy(s,
    t + 12, 2);\n    i = atoi(s);\n    tm.tm_sec = i;\n    tt = mktime(&amp;tm);\n
    \   return tt;\n}\n\nvoid time_str(time_t tt, char *s)\n{\n    struct tm *tp;\n
    \   char sc[5];\n\n    tp = localtime(&amp;tt);\n    sprintf(sc, \"%d\", tp-&gt;tm_year
    + 1900);\n    strcpy(s, sc);\n    sprintf(sc, \"%02d\", tp-&gt;tm_mon + 1);\n
    \   strcat(s, sc);\n    sprintf(sc, \"%02d\", tp-&gt;tm_mday + 1);\n    strcat(s,
    sc);\n    sprintf(sc, \"%02d\", tp-&gt;tm_hour);\n    strcat(s, sc);\n    sprintf(sc,
    \"%02d\", tp-&gt;tm_min);\n    strcat(s, sc);\n    sprintf(sc, \"%02d\", tp-&gt;tm_sec);\n
    \   strcat(s, sc);\n    return;\n}\n\nvoid org_7401(char *t, int n)\n{\n    time_t
    tm;\n\n    tm = str_time(t);\n    tm += (time_t) n;\n    time_str(tm, t);\n    return;\n}
    \n\nint main(void)\n{\n    char *s = malloc(15);\n\n    strcpy(s, \"20080827235925\");\n
    \   org_7401(s, 40);\n    printf(\"%s\\n\", s);\n    free(s);\n    return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8102'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/8102
  :user_name: htz
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/970/
  :language: C
  :time: 2008/12/01 19:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">適当だけど、こんな感じで良くない？\r\nそれに、\r\ntm.tm_isdst =
    0;\r\nを忘れていたし、\r\ntm.tm_mday = i - 1;\r\nは-1する必要がないので、答え間違っていたよ（汗\r\n\r\n（書式にセパレートとかがあるとstrptimeとかも使えることがあるよ。）</pre>\n\t"
  :code: "#include &lt;time.h&gt;\n#include &lt;stdio.h&gt;\n\n/* どう書く.org #7401\n
    \  http://ja.doukaku.org/204/ */\ntime_t str_time(char *t)\n{\n    struct tm tm;\n\n/*
    \   strptime(t,\"%Y%m%d%H%M%S\",&amp;tm);*/\n    sscanf(t, \"%04d%02d%02d%02d%02d%02d\",
    \n        &amp;tm.tm_year, \n        &amp;tm.tm_mon, \n        &amp;tm.tm_mday,
    \n        &amp;tm.tm_hour, \n        &amp;tm.tm_min, \n        &amp;tm.tm_sec);\n
    \   tm.tm_year -= 1900;\n    tm.tm_mon--;\n    tm.tm_isdst = 0;\n    return mktime(&amp;tm);\n}\n\nvoid
    time_str(time_t tt, char *s)\n{\n    struct tm *tp;\n\n    tp = localtime(&amp;tt);\n
    \   strftime(s, 15, \"%Y%m%d%H%M%S\", tp);\n    return;\n}\n\nvoid org_7401(char
    *t, int n)\n{\n    time_t tm;\n\n    tm = str_time(t);\n    tm += (time_t) n;\n
    \   time_str(tm, t);\n    return;\n} \n\nint main(void)\n{\n    char *s = malloc(15);\n\n
    \   strcpy(s, \"20080827235925\");\n    org_7401(s, 40);\n    puts(s);\n    return
    0;\n}\n"
  :tags:
  - time
  :references:
    :url: /web/20090317043846/http://www.fireproject.jp/feature/c-language/basic-library/date-time.html
    :title: ファイヤープロジェクト
- :id: '8103'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/8103
  :user_name: htz
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/970/
  :language: C
  :time: 2008/12/02 02:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ちゃんとこの問題の仕様にのっとるなら。\n\t"
  :code: "#include &lt;time.h&gt;\n#include &lt;stdio.h&gt;\n\n/* どう書く.org #7401\n
    \  http://ja.doukaku.org/204/ */\ntime_t str_time(char *t)\n{\n    struct tm tm;\n\n//
    \   strptime(t,\"%Y%m%d%H%M%S\",&amp;tm);\n    sscanf(t, \"%04d%02d%02d%02d%02d%02d\",
    \n        &amp;tm.tm_year, \n        &amp;tm.tm_mon, \n        &amp;tm.tm_mday,
    \n        &amp;tm.tm_hour, \n        &amp;tm.tm_min, \n        &amp;tm.tm_sec);\n
    \   tm.tm_year -= 1900;\n    tm.tm_mon--;\n    tm.tm_isdst = 0;\n    return mktime(&amp;tm);\n}\n\nvoid
    time_str(time_t tt, char *s)\n{\n    struct tm *tp;\n\n    tp = localtime(&amp;tt);\n
    \   strftime(s, 15, \"%Y%m%d%H%M%S\", tp);\n    return;\n}\n\nvoid DateEx(char
    *t, int n)\n{\n    char s[15];\n    time_t tm;\n\n    tm = str_time(t);\n    tm
    += (time_t) n;\n    time_str(tm, s);\n    puts(s);\n    return;\n} \n\nint main(void)\n{\n
    \   DateEx(\"20080827235925\", 40);\n    return 0;\n}\n"
  :tags:
  - time
  :references:
    :url: 
    :title: 
- :id: '8393'
  :parent_id: '204'
  :url: http://ja.doukaku.org/comment/8393
  :user_name: fumokmm
  :user_url: /web/20090317043846/http://ja.doukaku.org/user/856/
  :language: Groovy
  :time: 2009/01/24 10:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>java.util.Calendar#addを使ってみました。\r</p>\n<p>これといった捻りは特になしです。\r</p>\n<p>horiuchiさん(#7513)がJavaで投稿したもののGroovy版といった位置づけですかね。</p>\n</div>\n\t"
  :code: |
    def dateEx(date = null, delta) {
       def format = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
       def cal = Calendar.instance
       if (date) { cal.time = format.parse(date) }
       cal.add(Calendar.SECOND, delta)
       return format.format(cal.time)
    }
  :tags: []
  :references:
    :url: 
    :title: 
