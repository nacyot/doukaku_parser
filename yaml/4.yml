---
:id: '4'
:title: n人中m人が当選するくじ
:comments:
- :id: '3360'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/3360
  :user_name: にしお
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/07/03 13:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  n人の中から公平にm人を選ぶ、くじ引きプログラムを作ってください。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '16'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/16
  :user_name: minke
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/28/
  :language: Ruby
  :time: 2007/06/30 16:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  単純に。\n\t"
  :code: |
    def lot(n, m)
      rest = Array.new(n) {|i| i }
      sel = []
      t = if m &lt;= n/2 then m else n-m end
      n.downto(n-t+1) do |i|
        r = rand(i)
        sel &lt;&lt; rest[r]
        rest.delete_at(r)
      end
      (if t == m then sel else rest end).sort
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '18'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/18
  :user_name: tmiz
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/33/
  :language: Python
  :time: 2007/06/30 16:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こんなんで。</pre>\n\t"
  :code: |
    import random
    def lot(n,m):
        if n&lt;m:
            print "Error"
            return
        myset = set()
        while len(myset)!=m:
            myset.add(random.randint(0,n-1))
        return myset
  :tags:
  - random
  :references:
    :url: 
    :title: 
- :id: '20'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/20
  :user_name: shivashanti
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/34/
  :language: Java
  :time: 2007/06/30 17:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  適当\n\t"
  :code: |
    public boolean hoge(int n, int m) {
        if ( n &lt; m || n &lt; 0 || m &lt; 0 ) throw new IllegalArgumentException();

        long seed = new java.util.Date().getTime() % n;
        return seed &lt; m;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '23'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/23
  :user_name: shivashanti
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/34/
  :language: Java
  :time: 2007/06/30 18:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ああ、問題読み間違え。\r\nかならずm人が当たる必要あり。\n\t"
  :code: "\tpublic boolean[] lot(int n, int m) {\n\t    if ( n &lt; m || n &lt; 0
    || m &lt; 0 ) throw new IllegalArgumentException();\n\t    boolean[] result =
    new boolean[n];\n\t    for ( int i = 0; i &lt; n; i++ ) result[i] = i &lt; m;\n\t
    \   for ( int i = 0; i &lt; n; i++) {\n\t    \tint rnd = (int)(Math.random() *
    100) % n;\n    \t\tboolean tmp = result[i];\n    \t\tresult[i] = result[rnd];\n
    \   \t\tresult[rnd] = tmp;\n\t    }\n\t    return result;\n\t}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '24'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/24
  :user_name: minke
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/28/
  :language: 
  :time: 2007/06/30 18:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">lot(1000000,999999)\r\nとかやると止まらない…。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '25'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/25
  :user_name: shivashanti
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/34/
  :language: 
  :time: 2007/06/30 19:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ２値でシャッフルは効率悪すぎる…。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '30'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/30
  :user_name: shiro
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/06/30 21:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Scheme (Gauche) で。素直に。\r\n実行例：\r\ngosh&gt;
    (pick 100 4)\r\n(12 17 72 45)\r\ngosh&gt; (pick 100 7)\r\n(30 68 74 27 58 41 7)\r\n</pre>\n\t"
  :code: |
    (use srfi-1)
    (use srfi-27)
    (random-source-randomize! default-random-source)

    (define (pick n m)
      (let loop ((lis (iota n)) (m m) (r '()))
        (cond ((zero? m) r)
              ((null? lis) (error "pool too small"))
              (else (let1 picked (list-ref lis (random-integer (length lis)))
                      (loop (delete picked lis =) (- m 1) (cons picked r)))))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '32'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/32
  :user_name: y_tsuda
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/42/
  :language: Ruby
  :time: 2007/06/30 23:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こんなのどうでしょう？</pre>\n\t"
  :code: |
    class Array
      def randomize!
        rand_array = sort_by { |i| rand }
        replace rand_array
      end
    end

    def lot(n, m)
      if n &gt;= m
        (1..n).to_a.randomize!.slice!(1, m).sort
      else
        puts "error: n must be bigger than m!"
        exit
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '33'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/33
  :user_name: kzk
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/43/
  :language: C
  :time: 2007/07/01 00:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">C++で書いてみたらCしかなかた...</pre>\n\t"
  :code: |
    vector&lt;int&gt;
    shuffle(int n, int m)
    {
      vector&lt;int&gt; ret;
      if (n &lt;= 0 || m &lt;= 0 || n &lt; m)
        return ret;

      vector&lt;int&gt; v(n);
      for (int i = 0; i &lt; n; i++)
        v[i] = i + 1;

      int cnt = 0;
      ret.resize(m);
      while (cnt &lt; m) {
        int idx = rand() % v.size();
        int val = v[idx];
        v.erase(v.begin() + idx);
        ret[cnt++] = val;
      }

      sort(ret.begin(), ret.end());
      return ret;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '35'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/35
  :user_name: elm200
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/45/
  :language: Ruby
  :time: 2007/07/01 01:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">上の Ruby コードをもっと短くしてみた。</pre>\n\t"
  :code: |
    def lot(n, m)
     raise ArgumentError unless m &gt; 0 &amp;&amp; n &gt; 0 &amp;&amp; m &lt;= n
     (1..n).to_a.sort_by {|i| rand}[0, m]
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '37'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/37
  :user_name: minke
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/28/
  :language: C
  :time: 2007/07/01 07:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">yuさん/elm200さんのやり方の拡張です。\r\n\r\n解説。\r\nまずソーティングの代わりに選択アルゴリズムを使うことで\r\n計算量が線形になります。\r\n\r\nまた、配列の各要素にランダム値を付加し、\r\nその大小に基づいてソートする方法
    (sort_by) だと\r\n厳密には公平になりません。\r\n\r\n例えば、2人から1人を選ぶとき\r\n各々に割り振ったランダム値 (r[x] とします)
    \r\nr[0] &lt; r[1] となる確率と r[0] &gt; r[1] となる確率は等確率となりますが\r\nわずかに r[0] == r[1]
    となることがあり、\r\nその場合、例えば先頭からm個とると必ず先の人が選ばれることになるので、\r\n前の人が若干有利になってしまいます。\r\nこれは、比較関数自体をランダムにすることで解決します。（多分）\r\n</pre>\n\t"
  :code: |
    #include &lt;vector&gt;
    #include &lt;algorithm&gt;
    #include &lt;cstdlib&gt;
    using namespace std;

    bool randcmp(const int n1, const int n2)
    { return rand() &amp;1; }

    vector&lt;int&gt; lot(int n, int m)
    {
      vector&lt;int&gt; v(n);
      for (int i = 0; i &lt; n; ++i) { v[i] = i+1; }
      const int t = (m &lt;= n/2) ? m : n-m;
      vector&lt;int&gt;::iterator first = v.begin(), mid = v.begin()+t;
      nth_element(first, mid-1, v.end(), randcmp);
      if (t &lt; m) { first = mid; mid = v.end(); }
      return vector&lt;int&gt;(first, mid);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '38'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/38
  :user_name: ytakenaka
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2007/07/01 07:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">common lispで作ってあります。:-)</pre>\n\t"
  :code: ";\n; choose-winners for common lisp version 0.2 by ytakenaka\n;\n; 使い方:
    (choose-winners 候補者リスト 選ぶ人の数) =&gt; 当選者リスト\n;     (choose-winners '(john taro
    mika mick) 2)\n;            example: =&gt;  (john taro)  リスト内で選ばれたもの\n;\n; (エラー処理)\n;
    候補者リスト: ドット付きリスト や リスト以外のもの =&gt; nil\n; 選ぶ人の数：  候補者リストの長さより大きい =&gt; nil\n; 選ぶ人の数：
    \ 負 =&gt; nil\n\n(defun choose-winners (candidates-list number)\n  (labels ((choose-1
    (candit-lst len)\n             ; 候補者リストから一人の当選者と当選者を除いた残りのリストを多値で返す関数\n             ;
    candit-lst 候補者リスト len 候補者リストの大きさ\n             (let* ((select-num (random len))\n
    \                   (select-el (nth select-num candit-lst)))\n               (values
    select-el (remove select-el candit-lst :count 1))))\n\n           (choose-n (lst
    winners-lst num len)\n             ; 候補者リストからnum人の当選者を選ぶ関数\n             ; lst
    候補者リスト winners-lst 当選者リスト\n             ; num 残り当選者数 len 候補者リストの大きさ\n             (if
    (zerop num)\n                 ; 残り当選者数が０になったときに当選者リストを返す。\n                 winners-lst\n
    \                (multiple-value-bind (winner rest)\n                     (choose-1
    lst len)\n                   ; 当選者を当選者リストにくわえて、残りの候補者リストを再帰させる。\n                   (choose-n
    rest (cons winner winners-lst)\n                             (1- num) (1- len))))))
    \n\n    (and (consp candidates-list)\n         (null (cdr (last candidates-list)))\n
    \        (let ((length (length candidates-list)))\n           (when (and (&gt;=
    length number) (&lt; 0 number))\n                (choose-n candidates-list nil
    number length))))))\n"
  :tags:
  - common
  - lisp
  :references:
    :url: 
    :title: 
- :id: '41'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/41
  :user_name: smeghead
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/07/01 10:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">common lispです。\r\n(lot 10 5)\r\n =&gt; (4 10
    8 9 1)\r\n(lot 10 5)\r\n =&gt; (3 10 7 8 9)\r\n(lot 10 5)\r\n =&gt; (5 6 9 2 3)\r\n</pre>\n\t"
  :code: "(defun lot (n m)\n  \"lot 対象人数 当選者数 =&gt; 当選者番号のリスト\"\n  (labels ((range
    (x acc)    ;レンジを作成する関数\n                  (if (zerop x) acc \n                    (range
    (1- x) (cons x acc))))\n           (draw (lst acc)   ;くじを引く関数\n                 (if
    (&lt;= m (length acc))\n                   acc\n                   (let* ((winner
    \n                            (nth (random (length lst) (make-random-state t))
    lst))\n                          (loosers\n                            (remove-if
    #'(lambda (x) (eql winner x)) lst)))\n                     (draw loosers (cons
    winner acc))))))\n    (draw (range n nil) nil)))\n"
  :tags:
  - CommonLisp
  :references:
    :url: 
    :title: 
- :id: '46'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/46
  :user_name: id:amachang
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/62/
  :language: JavaScript
  :time: 2007/07/02 02:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  こんな感じで使ってください。\r\nalert(['Aさん', 'Bさん', 'Cさん'].lot(2));\n\t"
  :code: |
    Array.prototype.lot = function(n) {
      for(var i=0,r=[];i&lt;n;i++)
        with(Math) with(this)
          r.push(splice(floor(random()*length), 1)[0]);
        return r;
    };
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '50'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/50
  :user_name: noeta
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/60/
  :language: PHP
  :time: 2007/07/02 03:19 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">PHPで。\r\n$m &gt; $n の時、全員が選ばれます</pre>\n\t"
  :code: |
    &lt;?php
    function lot($n, $m) {
       $a = range(1, $n);
       shuffle($a);
       return array_slice($a, -$m);
    }
  :tags:
  - PHP
  :references:
    :url: 
    :title: 
- :id: '52'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/52
  :user_name: zigorou
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/64/
  :language: Perl
  :time: 2007/07/02 04:50 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">これでどうだ！</pre>\n\t"
  :code: "sub lot {\n    my ($n, $m) = @_;\n    my @list = map { $_-&gt;[0] } \n               sort
    { $a-&gt;[1] &lt;=&gt; $b-&gt;[1] } \n               map { [$_, rand] } \n                 (1
    .. $n);\n    splice(@list, 0, $m);\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '53'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/53
  :user_name: kazuho
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/66/
  :language: Perl
  :time: 2007/07/02 04:53 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  つい書いてしまった。\n\t"
  :code: |
    sub lot {
        my ($n, $m) = @_;
        my @a = 0..$n-1;
        map { splice @a, int rand scalar @a, 1 } 1..$m;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '54'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/54
  :user_name: kazuho
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/66/
  :language: Perl
  :time: 2007/07/02 05:32 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  てか m 人が常に連続でも題意は満たしてるよね。ということで１ステートメントに。\n\t"
  :code: |
    sub lot {
        my ($n, $m) = @_;
        splice @{[ 0..$n-1, 0..$n-1 ]}, int rand $n, $m;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '55'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/55
  :user_name: にしお
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/07/02 06:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Pythonのrandomモジュールには、与えられたリストをシャッフルするshuffleという関数があります。\n\t"
  :code: |
    def lot(n, m):
        from random import shuffle
        people = range(n)
        shuffle(people)
        return people[:m]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '56'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/56
  :user_name: にしお
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/07/02 06:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">その発想はなかったです。\r\n確かに当選者を連続にとっても、それぞれの人の当選確率は同じなので公平ですね。\r\nその発想をPythonで実装しました。\r\n</pre>\n\t"
  :code: |
    def lot(n, m):
        from random import random
        start = int(random() * n)
        return (range(n)+range(m))[start:start + m]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '62'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/62
  :user_name: iakio
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/77/
  :language: SQL
  :time: 2007/07/02 13:32 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  PostgreSQL以外はよく知りませんが。\n\t"
  :code: |
    =# create function lot(int, int) returns setof int as $$
      select * from generate_series(1, $1) order by random() limit $2;
    $$ language sql;
    =# select * from lot(10, 3);

    普通は関数作るまでもなく、
    =# select * from generate_series(1, 10) order by random() limit 3;
  :tags:
  - PostgreSQL
  :references:
    :url: 
    :title: 
- :id: '64'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/64
  :user_name: minke
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/28/
  :language: Ruby
  :time: 2007/07/02 14:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">O(m)\r\nn &lt; m のとき循環します。\r\n</pre>\n\t"
  :code: |
    def lot(n,m)
      ((r=rand(n))...(r+m)).map {|e| e%n + 1 }
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '71'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/71
  :user_name: bonlife
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/83/
  :language: Python
  :time: 2007/07/03 05:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  Pythonのrandomは高機能です。\n\t"
  :code: |
    def lot(n,m):
        from random import sample
        people = xrange(n)
        return sample(people,m)
  :tags:
  - random
  :references:
    :url: 
    :title: 
- :id: '77'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/77
  :user_name: sumim
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/07/03 15:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    | n m |
    n := 10.
    m := 5.
    ^((1 to: n) asArray shuffled allButFirst: m) sort
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '78'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/78
  :user_name: sumim
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2007/07/03 17:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すみません。違ってました(^_^;)。\r\n\r\nÃ\x83Â\x97Ã\x82Â\x97
    allButFirst:\r\n\r\n○ first:</pre>\n\t"
  :code: ''
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '81'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/81
  :user_name: heiwa4126
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/90/
  :language: Ruby
  :time: 2007/07/04 02:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  実際に使用する時は範囲チェック(1&lt;=m&lt;=n)を追加すること。\n\t"
  :code: |
    (1..n).sort_by{rand}[0,m]
  :tags:
  - Schwartzian
  :references:
    :url: 
    :title: 
- :id: '86'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/86
  :user_name: PHO
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/69/
  :language: Haskell
  :time: 2007/07/04 04:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Arrow を使えばもっと綺麗に書けるかも。</pre>\n\t"
  :code: |
    import System.Random

    shuffle :: [a] -&gt; StdGen -&gt; ([a], StdGen)
    shuffle [] g = ([], g)
    shuffle xs g = let (needle  , g'          ) = randomR (0, length xs - 1) g
                       (left    , picked:right) = splitAt needle xs
                       (unpicked, g''         ) = shuffle (left ++ right) g'
                   in
                     (picked:unpicked, g'')

    lot :: Int -&gt; Int -&gt; StdGen -&gt; ([Int], StdGen)
    lot n m g = let (shuffled, g') = shuffle [1..n] g
                in
                  (take m shuffled, g')

    main = do xs &lt;- getStdRandom (lot 1000000 999999)
              mapM_ (putStrLn . show) xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '162'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/162
  :user_name: ether
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/96/
  :language: awk
  :time: 2007/07/05 04:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  echo John Paul George Ringo | awk -v m=2 -f lot.awk\r\nのようにして使います。\n\t"
  :code: |
    function swap(a, b,  tmp) { tmp = $a; $a = $b; $b = tmp }

    {
      n = NF
      while (m) {
        swap(int(rand() * n + 1), n)
        print $n
        n--; m--;
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '166'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/166
  :user_name: mattn
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/52/
  :language: Vim
  :time: 2007/07/05 05:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  我ながら強引すぎるな...\r\n(libcは動くかどうかわかりません汗)「:echo Lot(10, 5)」で実行\n\t"
  :code: |
    fun! Lot(n, m)
      let v = range(1, a:n)
      while len(v) &gt; a:m
        if has('win32')
          let r = libcallnr("msvcrt", "rand", 0)
        else
          let r = libcallnr("libc", "rand", 0)
        endif
        silent! call remove(v, (r % 10))
      endwhile
      return v
    endfun
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '167'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/167
  :user_name: mattn
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/52/
  :language: Vim
  :time: 2007/07/05 05:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  あ、ハードコーディング...orz\n\t"
  :code: |
    fun! Lot(n, m)
      let v = range(1, a:n)
      while len(v) &gt; a:m
        if has('win32')
          let r = libcallnr("msvcrt", "rand", 0)
        else
          let r = libcallnr("libc", "rand", 0)
        endif
        silent! call remove(v, (r % len(v)))
      endwhile
      return v
    endfun
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '170'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/170
  :user_name: 匿名
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/07/05 06:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t    srand(time(NULL));\r\n  sel1(M, N);\r\n\r\nって感じで\r\n\n\t"
  :code: |
    void sel1(unsigned long m, unsigned long n)
    {
      unsigned long i, orgN=n;
      for(i=1; i&lt;=orgN; ++i){
        if((double)rand()/(RAND_MAX+1) &lt; (double)m/n){ printf("%lu\n", i);  --m; }
        --n;
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '171'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/171
  :user_name: id:nekoruri
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/111/
  :language: Perl
  :time: 2007/07/05 06:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  一応O(nm)になってるかな？\n\t"
  :code: |
    #!/usr/local/bin/perl

    use strict;
    use warnings;

    use Data::Dumper;

    my $nmax = shift;
    my $mmax = shift;

    my @winner;

    #warn "selecting $nmax from $mmax\n";
    for my $n ( 0 .. $nmax - 1 ) {
            my $count = 0;
            for my $m ( 1 .. $mmax ) {
                    next if grep { defined $_ and $_ == $m } @winner;
                    if ( rand( $count ) &lt; 1 ) {
                            $winner[$n] = $m;
                    }
                    $count++;
            }
    }

    print join( "\n", @winner) , "\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '172'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/172
  :user_name: id:nekoruri
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/111/
  :language: Perl
  :time: 2007/07/05 06:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  進捗表示と範囲チェックを追加。\n\t"
  :code: |
    #!/usr/local/bin/perl

    use strict;
    use warnings;

    use Data::Dumper;

    my $nmax = shift;
    my $mmax = shift;

    if ( $nmax &gt;= $mmax ) {
            print "$_\n" for ( 1 .. $mmax );
            exit;
    }

    my @winner;

    #warn "selecting $nmax from $mmax\n";
    for my $n ( 0 .. $nmax - 1 ) {
            print STDERR '.';
            my $count = 0;
            for my $m ( 1 .. $mmax ) {
                    next if grep { defined $_ and $_ == $m } @winner;
                    if ( rand( $count ) &lt; 1 ) {
                            $winner[$n] = $m;
                    }
                    $count++;
            }
    }

    print STDERR "\n";
    print join( "\n", @winner) , "\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '191'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/191
  :user_name: rubikitch
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/07/05 10:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">CL-USER&gt; (lot 9999 4)\r\n(6921 3598 7669
    9882)\r\nCL-USER&gt; (lot 9999 4)\r\n(46 7796 5867 7725)\r\nCL-USER&gt; (lot 9999
    4)\r\n(6973 5502 1591 5060)\r\nCL-USER&gt; (lot 9999 4)\r\n(23 5583 9408 419)\r\nCL-USER&gt;
    (lot 9999 4)\r\n(1785 6633 7933 8614)\r\nCL-USER&gt; (lot 9999 4)\r\n(3871 7900
    7919 1041)\r\n</pre>\n\t"
  :code: |
    (defun lot (n m)
      (let ((lot (loop for i from 1 to n collect i)))
        (loop repeat m collect
             (let ((x (nth (random (length lot)) lot)))
               (setf lot (delete x lot))
               x))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '216'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/216
  :user_name: matarillo
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/136/
  :language: C
  :time: 2007/07/06 05:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  jってこれでよかった(一様にランダムになる)か？\n\t"
  :code: |
    public static bool[] MakeDrawing(int n, int m)
    {
        if (n &lt; 0) throw new ArgumentException();
        if (m &lt; 0 || m &gt; n) throw new ArgumentException();
        bool[] result = new bool[n];
        Random r = new Random();
        for (int i = 0; i &lt; n; i++)
        {
            int j = r.Next(i + 1);
            result[i] = result[j];
            result[j] = (i &lt; m);
        }
        return result;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '347'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/347
  :user_name: nkmrtks
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/155/
  :language: Common
  :time: 2007/07/08 11:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">(lot m n)でm人中n人分の当選番号（1～m）をリストで返します。。\r\n(lot
    m n lst)でm人中n人分、lstから当選者を抽出したリストを返します。\r\nlstがmより長かったり短かったりしたらnilを返します:p\r\nm&lt;nの時は全員当選します。</pre>\n\t"
  :code: |
    (defun lot (n m &amp;optional (lst (let ((i 0))
                                     (mapcar #'(lambda (x) (+ (incf i) x))
                                             (make-list n :initial-element 0)))))
      (and
       (= (length lst) n)
       (labels
           ((pickup (lst m)
              (labels
                  ((pickup1 (lst n m acc)
                     (if (or (zerop n) (zerop m))
                         acc
                       (let ((r (random n)))
                         (if (zerop r)
                             (pickup1 (cdr lst)
                                      (1- n)
                                      (1- m)
                                      (cons (car lst) acc))
                           (pickup1 (nconc (subseq lst 0 r)
                                           (subseq lst (1+ r)))
                                    (1- n)
                                    (1- m)
                                    (cons (nth r lst) acc)))))))
                (pickup1 lst n m nil))))
         (pickup lst m))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '370'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/370
  :user_name: ところてん
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/07/09 02:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  今ひとつエレガントじゃないなぁ。\n\t"
  :code: |
    # -*- coding: utf-8 -*-
    import random

    def getRandList(x):
        l = range(x)
        random.shuffle(l)
        return l

    def chusen(n,m):
        return getRandList(n)[:m]

    print chusen(10,5)
    print chusen(50,10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '402'
  :parent_id: '4'
  :url: http://ja.doukaku.org/comment/402
  :user_name: iwk
  :user_url: /web/20081202212523/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/07/09 17:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |-
    open System;;
    open List;;

    let rec take n ls =
        match n, ls with
        | n, _ when n &lt;= 0 -&gt; []
        | _, [] -&gt; []
        | n, (hd::tl) -&gt; hd :: take (n-1) tl;;

    let shuffle ls =
        let rnd = new Random() in
        sort (fun x y-&gt; rnd.Next(-1,2)) ls;;

    let choice m n = take m (shuffle




    <!--
         FILE ARCHIVED ON 21:25:23 Dec 2, 2008 AND RETRIEVED FROM THE
         INTERNET ARCHIVE ON 14:05:26 Nov 16, 2013.
         JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

         ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
         SECTION 108(a)(3)).
    -->
  :tags: []
  :references:
    :url: 
    :title: 
