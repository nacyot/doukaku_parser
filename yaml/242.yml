---
:id: '242'
:title: 外部の実行ファイルを呼び出し
:comments:
- :id: '8632'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8632
  :user_name: ところてん
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2009/03/10 15:24 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">外部の実行ファイルを呼び出して実行してください。\r\nただし、実行中にプログラムの実行をブロックする版と、しない版の二つを作ってください。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8708'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8708
  :user_name: あにす
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2009/03/23 02:22 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  System.Diagnostics.Process.Start()メソッドを使います。\n\t"
  :code: |
    class Program {
        static void Main(string[] args) {
            //ブロックする版
            System.Diagnostics.Process.Start(@"C:\hoge.exe").WaitForExit();

            //ブロックしない版
            System.Diagnostics.Process.Start(@"C:\hoge.exe");
        }
    }
  :tags:
  - undefined買う
  :references:
    :url: 
    :title: 
- :id: '8709'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8709
  :user_name: horiuchi
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2009/03/23 02:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Windowsで notepadを実行するサンプルを書いてみました。</p>\n\n\t"
  :code: |
    public class Sample242 {
        public static int execute(boolean isWait, String... command) throws Exception {
            Process process = new ProcessBuilder(command).start();
            return isWait? process.waitFor(): 0;
        }
        public static void main(String[] args) throws Exception {
            System.out.println(execute(false, "notepad", "src/Sample242.java"));
            System.out.println(execute(true, "notepad", "src/Sample242.java"));
        }
    }
  :tags:
  - Java1.5
  :references:
    :url: 
    :title: 
- :id: '8710'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8710
  :user_name: turugina
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2009/03/23 03:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>&gt; ただし、実行中にプログラムの実行をブロックする版と、\n</p>\n<ul>\n<li>\n     (呼び出し元プログラム)実行中に(呼び出し元)プログラムの実行をブロックする\n
    </li>\n\n <li>\n     (呼び出し元プログラム)実行中に(呼び出し先)プログラムの実行をブロックする\n </li>\n\n <li>\n
    \    (呼び出し先プログラム)実行中に(呼び出し元)プログラムの実行をブロックする\n </li>\n\n <li>\n     (呼び出し先プログラム)実行中に(呼び出し先)プログラムの実行をブロックする\n
    </li>\n</ul>\n<p>どれだろう...\n</p>\n<p>とりあえず、\n   呼び出し先プログラム実行中は呼び出し元プログラムの実行をブロックする\n
    \  (呼び出し元プログラムは呼び出し先プログラムが終了するまで待つ)\n   ということで\n</p>\n\n\n\n\t"
  :code: |
    use strict;
    use warnings;
    my $executable = 'something/to/execute';
    # 待つ
    system($executable);
    # 待たない
    my $pid = fork;
    if (defined $pid &amp;&amp; $pid == 0) {
      exec($executable);
    }
    print "待ってないよ！\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8711'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8711
  :user_name: silverwire
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/646/
  :language: 
  :time: 2009/03/23 04:18 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">お題の意図が「呼び出し先のプログラムが終了するまで呼び出し元\r\nのプログラムを待機させる」ということであれば、
    startコマンド\r\nのwaitオプションで実現できそうです。\r\n\r\n  e.g.\r\n    C:\\&gt;start /wait ping
    -n 5 127.0.0.1 &amp;&amp; echo 復帰しました。\r\n    \r\n    C:\\&gt;start ping -n 5
    127.0.0.1 &amp;&amp; echo 復帰しました。\r\n\r\n# Windows XPで動作を確認。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8713'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8713
  :user_name: hchbaw
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/950/
  :language: Other
  :time: 2009/03/23 08:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Clojure です。\n</p>\n<p>外部プログラムの実行には clojure.contrib.shell-out
    を利用しました。\n   非同期な計算の実行と結果の取得に便利な future オペレータを利用してみました。\n</p>\n\n\n\n\t"
  :code: |
    (ns user
      (:require [clojure.contrib.shell-out :as so]))

    (defn- do-command- [thunk]
      (let [r (atom nil)]
        (do
          (println "Enterng...")
          (swap! r (fn [_] (thunk)))
          (println "Leaving")
          @r)))
    (defmacro do-command [&amp; body]
      `(do-command- (fn [] ~@body)))

    (defn main []
      (let [command '("/bin/sh" "-c" "(sleep 2 &amp;&amp; echo -n 'echoecho')")]
        [(do-command (apply so/sh command))
         @(do-command (future (apply so/sh command)))]))
  :tags:
  - Clojure
  - clojure
  - clojure_20090320
  :references:
    :url: 
    :title: 
- :id: '8714'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8714
  :user_name: raynstard
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/127/
  :language: C
  :time: 2009/03/23 09:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">蛇足とは思いつつ、戻り値判定付き\r\n\r\nCでは、fork() を使用した場合、\r\n子プロセス側は_exit(2)
    を使用しないといけません。\r\n\r\n// 待ち合わせあり\r\n// gcc -Wall -std=c89 doukaku242.c\r\n\r\n//
    待ち合わせなし\r\n// gcc -Wall -std=c89 -DNOWAIT  doukaku242.c\r\n\r\nコンパイル通しただけだけどたぶんあっているはず^^;</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;unistd.h&gt;
    #include &lt;sys/wait.h&gt;

    int main(int argc, char *argv[])
    {
        pid_t child_pid ;
        int status;

        printf("sleep 3 sec\n");
        child_pid = fork();
        switch( child_pid )
        {
            case -1:
                printf("fork() failed\n");
                break;
            case 0:
                execl("/bin/sleep", "/bin/sleep", "3", NULL);
                printf("execute /bin/sleep fialed\n");
                _exit(1);
                break;
            default:
    #ifndef NOWAIT
                wait(&amp;status);
                if( WIFEXITED(status) )
                {
                    printf("exit status:[%d]\n",WEXITSTATUS(status));
                 }
                else if( WIFSIGNALED(status) )
                {
                    printf("catch signal:[%d]\n",WTERMSIG(status));
                 }
                else
                {
                    printf("unknwon error:[%x]\n", status);
                }
    #endif
                break;
        }
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8715'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8715
  :user_name: ところてん
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2009/03/23 10:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">＞(呼び出し先プログラム)実行中に(呼び出し元)プログラムの実行をブロックする \r\nすいません、こいつです。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8716'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8716
  :user_name: kkobayashi
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2009/03/23 12:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>他の方の投稿を見ると、「ブロック」とは「子プロセスの終了をwaitするかどうか」ということのようなので、その方向で書いてみました。\nwindows環境でメモ帳を起動するサンプルです。</p>\n\n\t"
  :code: |
    system("notepad", invisible=F)
    system("notepad", invisible=F, wait=F)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8717'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8717
  :user_name: nobsun
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2009/03/23 17:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import System.Process
    wait :: String -&gt; IO ExitCoe
    wait = (&gt;&gt;= waitForProcess) . runCommand

    noWait :: String -&gt; IO (Maybe ExitCode)
    noWait = (&gt;&gt;= getProcessExitCode) . runCommand
  :tags:
  - System.Process
  :references:
    :url: 
    :title: 
- :id: '8718'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8718
  :user_name: 匿名
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2009/03/23 20:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import subprocess
    # 同期
    subprocess.call(['sleep', '3'])
    # 非同期
    subprocess.Popen(['sh', '-c', 'sleep 3 &amp;&amp; echo \a'])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8719'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8719
  :user_name: sumim
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/03/23 21:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n<p>UNIX 向け仮想マシンと、OSProcess という機能拡張が必要です。</p>\n\n\t"
  :code: |
    "非同期"
    OSProcess thisOSProcess command: 'sleep 1'

    "同期"
    OSProcess thisOSProcess waitForCommandOutput: 'sleep 1'
  :tags:
  - OSProcess
  - Squeak_Smalltalk
  :references:
    :url: /web/20100628135449/http://wiki.squeak.org/squeak/708
    :title: Squeak Swiki - OSProcess
- :id: '8721'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8721
  :user_name: pa
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/943/
  :language: Other
  :time: 2009/03/24 12:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">外部のコマンドを呼び出すには主に2通り考えられる。\r\n\r\n1. 実行コマンドをモジュールとしてロードしinitを呼ぶ。\r\n2.
    Shの機能を使い、シェルで実行する\r\n\r\nコードは2.で書いてみた。\r\nSh-&gt;systemを用いてコマンドの実行が可能。\r\n例としてlsを文字列で渡し、実行させている。\r\nそのまま呼べばブロック、プロセスを立ち上げて実行するとノンブロック。\r\n\r\n2.の方がコード量が少なく、しかも複雑なコマンドも文字列で渡せるので、\r\n楽だと思う。\r\n考えられるデメリットはShに依存してしまうことだが、おそらく実害は無い。\r\n1.を2.の代わりに利用するメリットは現時点では思いつかない。\r\n\r\nなお、参考にしたのはソースコード。\r\n偶然sys.mにそれっぽい関数を見つけた。\r\nmanから探すのは自分には無理だった。\r\n\r\nP.S.\r\nお題の「実行中にプログラムの実行をブロックする版と、しない版」の\r\n意味が最初わからなかった・・・\r\n\r\n</pre>\n\t"
  :code: |
    implement d242;

    include "sys.m";
    sys: Sys;
    include "draw.m";
    include "sh.m";
    sh: Sh;

    d242: module{
            init: fn(ctx: ref Draw-&gt;Context, argv: list of string);
    };

    init(ctx: ref Draw-&gt;Context, argv: list of string)
    {
            sys = load Sys Sys-&gt;PATH;
            sh = load Sh Sh-&gt;PATH;

            # block
            sh-&gt;system(ctx, "ls");

            # non-block
            spawn exec_nblk(ctx);
    }

    exec_nblk(ctx: ref Draw-&gt;Context)
    {
            sh-&gt;system(ctx, "ls -l");
    }
  :tags:
  - Limbo
  :references:
    :url: 
    :title: 
- :id: '8729'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8729
  :user_name: emasaka
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2009/03/26 13:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>すみません、ボケを思いつきませんでした。</p>\n\n\t"
  :code: |
    # ブロックする
    hoge

    # ブロックしない
    hoge &amp;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8738'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8738
  :user_name: rennos
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/03/28 06:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ブロックとは、呼び出したプロセスの終了を待つってことでしょうか。\n若干固まるけど気にしない気にしない＾＾；</p>\n\n\t"
  :code: ";    #define ___SUSPEND___    // 待機する場合\n\n#ifdef ___SUSPEND___\n\n#module
    m_execsubproc\n\n#uselib \"shell32.dll\"\n#func   ShellExecuteEx@m_execsubproc
    \"ShellExecuteExA\" int\n\n#uselib \"kernel32.dll\"\n#func   WaitForSingleObject@m_execsubproc
    \"WaitForSingleObject\" int,int\n#func   CloseHandle@m_execsubproc \"CloseHandle\"
    int\n\n#define true  1\n#define false 0\n\n// サブプロセスを起動する( コンソール )\n#deffunc ExecSubProc
    str path, str cmdline, int timeout, int bShow, local sFile, local sCmd, local
    hInstApp, local shexec\n    sFile    = path\n    sCmd     = cmdline\n    hInstApp
    = 0\n    \n    // SHELLEXECUTEINFO構造体\n    dim shexec, 15\n    shexec(0) = 60
    \                       // cbSize\n    shexec(1) = 0x00000440                //
    fMask = SEE_MASK_FLAG_NO_UI | SEE_MASK_FLAG_NOCLOSEPROCESS\n    shexec(2) = hwnd
    \                   // hwnd\n    shexec(4) = varptr(sFile)            // lpFile\n
    \   shexec(5) = varptr(sCmd)            // lpParameters\n    shexec(7) = 5 * (bShow
    != false)    // nShow\n    shexec(8) = varptr(hInstApp)        // hInstApp\n    \n
    \   ShellExecuteEx varptr(shexec)\n    if ( stat == false ) {\n        return
    true\n    }\n    WaitForSingleObject shexec(14), timeout\n    CloseHandle         shexec(14)\n
    \   return false\n    \n#global\n\n#endif\n\n*main\n#ifdef ___SUSPEND___\n    //
    待機しておく\n    ExecSubProc \"calc\", \"\", -1, 1/*true*/\n#else\n    // 待機せず普通に起動\n
    \   exec \"calc\"\n#endif\n    mes \"Hello, world!\"\n    stop\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8743'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8743
  :user_name: lunlumo
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/813/
  :language: Ruby
  :time: 2009/03/29 01:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　Processモジュールを使って書いてみました。</p>\n\n\t"
  :code: |
    class ExecExternalProgram
        def self.execute(program, async, *args)
            pid = Process.fork { exec(program, *args) }
            Process.waitpid(pid) unless async
        end
    end

    puts "exec asynchronous."
    ExecExternalProgram.execute "/path/to/external/program", true, "arg1", "arg2"
    puts "exec synchronous."
    ExecExternalProgram.execute "/path/to/external/program", false, "arg1", "arg2"
    puts "done."
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8779'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8779
  :user_name: egtra
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/759/
  :language: BASIC
  :time: 2009/04/05 07:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  あれ？言語の選択肢にVisual Basicがない！まあこれVBScriptですけど。待つと待たないの区別が明示できるだけで、バッチファイルよりずっと便利だと思っています。\n\t"
  :code: |
    Option Explicit

    Dim sh
    Set sh = WScript.CreateObject("WScript.Shell")
    WScript.Echo "メモ帳を起動（待たない）"
    sh.Run "notepad.exe", 1, False
    WScript.Echo "メモ帳を起動（待つ）"
    sh.Run "notepad.exe", 1, True
  :tags:
  - VBScript
  - WSH
  - WindowsScriptHost
  :references:
    :url: /web/20100628135449/http://msdn.microsoft.com/ja-jp/library/cc364421.aspx
    :title: Windows Script Host — Run メソッド
- :id: '8780'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8780
  :user_name: egtra
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/759/
  :language: JavaScript
  :time: 2009/04/05 02:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  折角なので、JScript版も。そういえば、VBScript版で、WScript.CreateObjectはCreateObjectで十分なのでした、あの場合。\n\t"
  :code: |
    var sh = new ActiveXObject("WScript.Shell")
    WScript.Echo("メモ帳を起動（待たない）")
    sh.Run("notepad.exe", 1, false)
    WScript.Echo("メモ帳を起動（待つ）")
    sh.Run("notepad.exe", 1, true)
  :tags:
  - JScript
  - WSH
  - WindowsScriptHost
  :references:
    :url: 
    :title: 
- :id: '8796'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8796
  :user_name: genzou
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2009/04/07 15:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    // 終了まで待つ
    "gedit test1.txt".execute().waitFor()
    println "after1"
    // 終了まで待たない
    "gedit test2.txt".execute()
    println "after2"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8834'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/8834
  :user_name: lunlumo
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/04/22 11:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　Scalaがまだの様なので。</p>\n\n\t"
  :code: |
    object ProcessSpawner {
        def spawn(e:String, s:Boolean, a:String*) = {
            val    p:Process = new ProcessBuilder((e::a.toList).toArray:_*).start
            if (s) p.waitFor
        }
    }

    object ExecExternalProgram {
        import ProcessSpawner.spawn
        def main(args:Array[String]):Unit = {
            println("call asynchronous.")
            spawn("/path/to/program", false, "arg1", "arg2")
            println("call synchronous.")
            spawn("/path/to/program", true, "arg1", "arg2")
            println("process terminate.")
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9556'
  :parent_id: '242'
  :url: http://ja.doukaku.org/comment/9556
  :user_name: ocean
  :user_url: /web/20100628135449/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2009/09/05 11:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Windows依存だし、C++である必要性がまったくありませんが・・・・（Cでよい）</p>\n\n\t"
  :code: |
    #include &lt;windows.h&gt;
    #include &lt;iostream&gt;
    #include &lt;cstdlib&gt;
    #include &lt;string&gt;

    int main()
    {
        const std::string path = "c:/winnt/notepad.exe";

        // wait
        std::system(path.c_str());

        std::cout &lt;&lt; 1 &lt;&lt; std::endl;

        // not wait
        ::ShellExecute(
            NULL,
            NULL,
            path.c_str(),
            NULL,
            NULL,
            SW_SHOWNORMAL);

        std::cout &lt;&lt; 2 &lt;&lt; std::endl;
    }
  :tags: []
  :references:
    :url: 
    :title: 
