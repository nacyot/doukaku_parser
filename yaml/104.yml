---
:id: '104'
:title: 小町算
:comments:
- :id: '4509'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4509
  :user_name: dpp
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/433/
  :language: 
  :time: 2007/11/30 10:36 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  <div class=\"section\">\n<p>古典的なパズルである小町算を解くプログラムを作成してください。\r</p>\n<p>小町算とは：\r</p>\n<p>1□2□3□4□5□6□7□8□9＝100\r</p>\n<p>四角の中に、空白、＋、－、×、÷のいずれかを一つ入れ、等式が成り立つようにするパズルです。\r</p>\n<p>解答例：\r</p>\n<p>\t1－2－3＋4×56÷7＋8×9＝100\r</p>\n<p>\t1＋234×5÷6－7－89＝100\r</p>\n<p>\r</p>\n<p>\r</p>\n<p>参考：　http://ja.wikipedia.org/wiki/%E5%B0%8F%E7%94%BA%E7%AE%97\r</p>\n<p>\r</p>\n<ul>\n<li>\nevalやそれに類するものを使うか否かは自由です。\r\n</li>\n<li>\n割り算の際には小数点以下の切捨てが起こらないのが望ましいです。(必須ではない)\r\n<ul>\n<li>\n切捨てが起こる場合の解答例：1÷2÷3＋4＋5÷6＋7＋89＝100\r\n</li>\n</ul>\n</li>\n<li>余裕があれば括弧を含むようにしてもいいかもしれません。\r</li>\n</ul>\n<p>\r</p>\n<p>手元で20数行ほどのPythonスクリプトを書いてみたところ、101個の解答が得られました。</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4725'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4725
  :user_name: nido
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/589/
  :language: Ruby
  :time: 2007/12/10 15:06 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>枝狩り一切無し。効率悪いと思ふ。</p>\n\n\t"
  :code: |
    require "mathn"
    (5**8).times do |i|
      s=("2".."9").inject("1") do |r,e|
        r+=["","+","-","*","/"][i%5]+e;i/=5;r
      end
      puts s if eval(s)==100
    end
  :tags:
  - コンパクト
  :references:
    :url: 
    :title: 
- :id: '4726'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4726
  :user_name: naoya_t
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/348/
  :language: Scheme
  :time: 2007/12/10 15:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">とりあえず投稿。括弧は使わない版。結果は101通り出てきます。\r\n\r\n(123
    - 45 - 67 + 89)\r\n(1 * 2 - 3 + 4 - 5 + 6 + 7 + 89)\r\n(1 + 2 * 3 - 4 - 5 + 6
    + 7 + 89)\r\n(1 - 23 + 4 * 5 + 6 + 7 + 89)\r\n(12 - 3 - 4 + 5 - 6 + 7 + 89)\r\n(1
    + 2 + 3 * 4 - 5 - 6 + 7 + 89)\r\n(1 - 23 - 4 + 5 * 6 + 7 + 89)\r\n(1 * 2 / 3 +
    4 * 5 / 6 + 7 + 89)\r\n(1 / 2 * 34 - 5 + 6 - 7 + 89)\r\n(12 + 3 + 4 + 5 - 6 -
    7 + 89)\r\n(1 * 23 - 4 + 5 - 6 - 7 + 89)\r\n(12 / 3 + 4 * 5 - 6 - 7 + 89)\r\n(1
    - 23 - 4 - 5 + 6 * 7 + 89)\r\n(1 * 2 - 3 + 4 + 56 / 7 + 89)\r\n(1 + 2 * 3 - 4
    + 56 / 7 + 89)\r\n(12 + 3 + 4 - 56 / 7 + 89)\r\n(1 * 23 - 4 - 56 / 7 + 89)\r\n(123
    + 4 - 5 + 67 - 89)\r\n(1 + 234 * 5 / 6 - 7 - 89)\r\n(12 + 3 * 45 + 6 * 7 - 89)\r\n(1
    + 2 * 34 - 56 + 78 + 9)\r\n(1 + 2 + 3 - 4 + 5 + 6 + 78 + 9)\r\n(1 * 2 * 3 - 4
    + 5 + 6 + 78 + 9)\r\n(1 * 2 + 3 * 4 + 5 - 6 + 78 + 9)\r\n(12 + 3 * 4 - 5 - 6 +
    78 + 9)\r\n(1 * 2 * 3 * 4 - 5 - 6 + 78 + 9)\r\n(1 * 2 - 3 + 4 * 5 - 6 + 78 + 9)\r\n(1
    + 2 + 3 * 4 * 5 / 6 + 78 + 9)\r\n(1 + 234 * 5 * 6 / 78 + 9)\r\n(1 + 2 * 3 + 4
    + 5 + 67 + 8 + 9)\r\n(12 + 3 - 4 + 5 + 67 + 8 + 9)\r\n(1 - 2 + 3 * 4 + 5 + 67
    + 8 + 9)\r\n(1 - 2 - 3 + 4 * 5 + 67 + 8 + 9)\r\n(12 * 3 - 4 * 5 + 67 + 8 + 9)\r\n(1
    / 2 / 3 * 456 + 7 + 8 + 9)\r\n(1 + 23 - 4 + 56 + 7 + 8 + 9)\r\n(12 + 34 + 5 *
    6 + 7 + 8 + 9)\r\n(1 - 2 - 3 + 45 + 6 * 7 + 8 + 9)\r\n(1 * 2 + 34 + 5 + 6 * 7
    + 8 + 9)\r\n(12 + 34 - 5 + 6 * 7 + 8 + 9)\r\n(1 * 23 + 4 + 5 + 67 - 8 + 9)\r\n(1
    + 2 + 34 - 5 + 67 - 8 + 9)\r\n(1 * 2 + 34 + 56 + 7 - 8 + 9)\r\n(1 + 23 * 4 + 5
    - 6 + 7 - 8 + 9)\r\n(1 + 2 + 3 * 4 * 56 / 7 - 8 + 9)\r\n(12 + 3 * 4 + 5 + 6 +
    7 * 8 + 9)\r\n(1 * 2 * 3 * 4 + 5 + 6 + 7 * 8 + 9)\r\n(12 - 3 + 4 * 5 + 6 + 7 *
    8 + 9)\r\n(1 - 2 - 3 + 45 - 6 + 7 * 8 + 9)\r\n(1 * 2 + 34 + 5 - 6 + 7 * 8 + 9)\r\n(12
    + 34 - 5 - 6 + 7 * 8 + 9)\r\n(12 - 3 - 4 + 5 * 6 + 7 * 8 + 9)\r\n(1 * 23 + 4 +
    56 / 7 * 8 + 9)\r\n(1 * 23 * 4 - 56 / 7 / 8 + 9)\r\n(1 + 23 - 4 + 5 + 6 + 78 -
    9)\r\n(1 * 2 + 3 + 4 * 5 + 6 + 78 - 9)\r\n(12 * 3 - 4 + 5 - 6 + 78 - 9)\r\n(1
    * 2 + 3 - 4 + 5 * 6 + 78 - 9)\r\n(12 / 3 / 4 + 5 * 6 + 78 - 9)\r\n(123 + 45 -
    67 + 8 - 9)\r\n(1 + 23 * 4 - 5 + 6 + 7 + 8 - 9)\r\n(123 - 4 - 5 - 6 - 7 + 8 -
    9)\r\n(1 - 2 + 3 * 4 * 5 + 6 * 7 + 8 - 9)\r\n(123 + 4 * 5 - 6 * 7 + 8 - 9)\r\n(1
    + 23 * 4 + 56 / 7 + 8 - 9)\r\n(1 * 2 + 3 + 45 + 67 - 8 - 9)\r\n(1 * 2 * 34 + 56
    - 7 - 8 - 9)\r\n(12 / 3 + 4 * 5 * 6 - 7 - 8 - 9)\r\n(1 - 2 + 3 + 45 + 6 + 7 *
    8 - 9)\r\n(1 - 2 + 3 * 4 * 5 - 6 + 7 * 8 - 9)\r\n(12 / 3 + 4 * 5 * 6 * 7 / 8 -
    9)\r\n(1 + 2 + 3 - 45 + 67 + 8 * 9)\r\n(1 * 2 * 3 - 45 + 67 + 8 * 9)\r\n(1 - 2
    - 34 + 56 + 7 + 8 * 9)\r\n(1 / 2 * 3 / 4 * 56 + 7 + 8 * 9)\r\n(1 + 2 + 3 + 4 +
    5 + 6 + 7 + 8 * 9)\r\n(1 * 2 * 3 + 4 + 5 + 6 + 7 + 8 * 9)\r\n(1 + 23 - 4 - 5 +
    6 + 7 + 8 * 9)\r\n(1 - 2 * 3 + 4 * 5 + 6 + 7 + 8 * 9)\r\n(12 * 3 - 4 - 5 - 6 +
    7 + 8 * 9)\r\n(1 + 2 * 3 + 4 * 5 - 6 + 7 + 8 * 9)\r\n(1 - 2 * 3 - 4 + 5 * 6 +
    7 + 8 * 9)\r\n(1 + 2 - 3 * 4 + 5 * 6 + 7 + 8 * 9)\r\n(1 + 2 * 3 * 4 * 5 / 6 +
    7 + 8 * 9)\r\n(12 + 3 * 4 + 5 + 6 - 7 + 8 * 9)\r\n(1 * 2 * 3 * 4 + 5 + 6 - 7 +
    8 * 9)\r\n(12 - 3 + 4 * 5 + 6 - 7 + 8 * 9)\r\n(1 - 2 - 3 + 45 - 6 - 7 + 8 * 9)\r\n(1
    * 2 + 34 + 5 - 6 - 7 + 8 * 9)\r\n(12 + 34 - 5 - 6 - 7 + 8 * 9)\r\n(12 - 3 - 4
    + 5 * 6 - 7 + 8 * 9)\r\n(1 - 2 * 3 - 4 - 5 + 6 * 7 + 8 * 9)\r\n(1 + 2 - 3 * 4
    - 5 + 6 * 7 + 8 * 9)\r\n(1 + 2 + 3 - 4 * 5 + 6 * 7 + 8 * 9)\r\n(1 * 2 * 3 - 4
    * 5 + 6 * 7 + 8 * 9)\r\n(1 + 23 - 4 + 56 / 7 + 8 * 9)\r\n(1 * 2 + 34 - 56 / 7
    + 8 * 9)\r\n(1 - 2 - 3 + 4 * 56 / 7 + 8 * 9)\r\n(1 * 234 + 5 - 67 - 8 * 9)\r\n(1
    + 234 - 56 - 7 - 8 * 9)\r\n(1 + 2 + 34 * 5 + 6 - 7 - 8 * 9)\r\n</pre>\n\t"
  :code: |
    (use srfi-1)

    (define (atom? x)
      (not (or (null? x) (pair? x))))
    (define (atom-list? ls)
      (and (pair? ls) (atom? (car ls))))

    (define (my-flatten ls)
      (cond ((null? ls) '())
            ((pair? ls)
             (cond ((atom? (car ls)) (list ls))
                   ((atom-list? (car ls))
                    (append (list (car ls)) (my-flatten (cdr ls))))
                   (else
                    (append (my-flatten (car ls)) (my-flatten (cdr ls))))))
            (else (list ls))))

    (define (_ a b)
      (cond ((&lt; b 10) (+ (* a 10) b))
            ((&lt; b 100) (+ (* a 100) b))
            ((&lt; b 1000) (+ (* a 1000) b))
            ((&lt; b 10000) (+ (* a 10000) b))
            ((&lt; b 100000) (+ (* a 100000) b))
            ((&lt; b 1000000) (+ (* a 1000000) b))
            ((&lt; b 10000000) (+ (* a 10000000) b))
            ((&lt; b 100000000) (+ (* a 100000000) b))
            ((&lt; b 1000000000) (+ (* a 1000000000) b))
    ;        (else #f)
            ))

    (define ops '(_ + - * /))

    (define (apply-op op x y)
      (case op
        ((_) (_ x y))
        ((+) (+ x y))
        ((-) (- x y))
        ((*) (* x y))
        ((/) (/ x y))
        ))

    (define (apply-rev-op op x y)
      (case op
    ;    ((_) (_ x y))
        ((+) (- x y))
        ((-) (+ x y))
        ((*) (/ x y))
        ((/) (* x y))))

    (define (komachi n sum)
      (define (append-op-n ls op n) (append ls (list op n)))

      (define (1..k= k p)
    ; [1..k] = p となる組み合わせ
        (if (= 1 k) ;
          ; 1 = 1   ; p!=1ならアウト
            (if (= p 1) '((1)) '())
        ; [1..k-1] ?? k = p
            (my-flatten (map (lambda (op) (1..k (- k 1) op k p)) ops))
            ))

      (define (eval-exp exp)
        (define (iter rest product)
          (cond ((null? rest) product)
                ((eq? '* (car rest))
                 (iter (cddr rest) (* product (cadr rest))))
                ((eq? '/ (car rest))
                 (iter (cddr rest) (/ product (cadr rest))))
                ))
        (iter (cdr exp) (car exp)))

      (define (1..k?&lt;..&gt;= k op exp p)
    ; [1..k] op (exp) = p
        (if (= 1 k)
            (case op
              ((_)
               (let1 exp* (cons (_ 1 (car exp)) (cdr exp))
                     (if (= (eval-exp exp*) p)
                         exp*
                         '())))
              ((+ -) ; 1 +- exp = p
               (if (= (apply-op op 1 (eval-exp exp)) p)
                   (append (list 1 op) exp)
                   '()))
              ((* /)
               (let1 exp* (append (list 1 op) exp)
                     (if (= (eval-exp exp*) p)
                         exp*
                         '())))
              )
            (case op
              ((_)
               (my-flatten
                (map (lambda (op2) (1..k?&lt;..&gt;= (- k 1) op2 (cons (_ k (car exp)) (cdr exp)) p)) ops)))
              ((+ -)
               (map (lambda (x) (append x (list op) exp))
                    (my-flatten (1..k= k (apply-rev-op op p (eval-exp exp))))
                    ))
              ((* /)
               (my-flatten
                (map (lambda (op2) (1..k?&lt;..&gt;= (- k 1) op2 (append (list k op) exp) p)) ops)))
              )
            ))

      (define (1..k k op n p)
    ; [1..k] op n = p となる組み合わせが全部ほしい
        (if (= 1 k)
          ;k=1 : [1] op n = p
            (case op
              ((_)
               (if (= (_ 1 n) p) (list (_ 1 n)) '()))
              ((+ -)
               (if (= (apply-op op 1 n) p) (list 1 op n) '()))
              ((*)
               (if (= n p) (list 1 '* n) '()))
              ((/) '()) ; 1/n (n&gt;1) cannot be p
              )
          ;k&gt;1
            (case op
              ((_); [1..k-1] ?? k_n = p
               (my-flatten (map (lambda (op2) (1..k (- k 1) op2 (_ k n) p)) ops)))
              ((+ -) ; [1..k] ± n = p ;
               (map (lambda (x) (append-op-n x op n))
                    (my-flatten (1..k= k (apply-rev-op op p n)))))
              ((* /) ; [1..k] */ n = p :: [1..c] ? ([c+1..k] */ n) = p
               (my-flatten (map (lambda (op2) (1..k?&lt;..&gt;= (- k 1) op2 (list k op n) p)) ops)))
               ; 結合則が加減算とは違う
              )
            ))

      (remove null? (1..k= n sum)))

    (map print (komachi 9 100))
  :tags:
  - 冗長
  :references:
    :url: 
    :title: 
- :id: '4728'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4728
  :user_name: ところてん
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/12/10 17:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">pythonでナイーブな実装。\r\n括弧なしで101個でした。</pre>\n\t"
  :code: "def komachi():\n    num = range(1,10)\n    ope = [\"\",\".0+\",\".0-\",\".0*\",\".0/\"]\n
    \   c = 1\n    for x in xrange(5**8):\n        formula = str(num[0])\n        for
    n in range(1,9):\n            formula += ope[x%5] + str(num[n])\n            x
    /= 5\n        if eval(formula) == 100:\n           print formula,c\n           c
    += 1\n           \n\nkomachi()\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4731'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4731
  :user_name: SiroKuro
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/10 18:17 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  「C# には eval が無いなぁ。動的コンパイルでもしようかな。あ待てよアレがあったな」 ということで C#2.0 + IronPython1.1
    です。ところてんさんの #4728 を参考に、Python のコードを片っ端から生成して IronPython で Execute しています。komachi
    関数は C# 側で作成。括弧なしで 101 個を、６分程度(orz)で調べ上げます。\n\t"
  :code: |
    using System;
    using System.Collections.Generic;
    using IronPython;
    using IronPython.Hosting;
    using IronPython.Runtime;
    using IronPython.Runtime.Calls;
    class Program {
        static void Main() {
            PythonEngine python = new PythonEngine();
            EngineModule module = python.CreateModule();
            Dictionary&lt;string, object&gt; locals = new Dictionary&lt;string, object&gt;();
            int count = 0;
            locals["komachi"] = new CallTarget2(delegate(object obj, object obj2) {
                if (obj2.Equals(100.0)) {
                    count++;
                    Console.WriteLine(obj + " = " + obj2);
                }
                return null;
            });
            DateTime before = DateTime.Now;
            foreach (string code in GenPythonCode()) {
                python.Execute(code, module, locals);
            }
            Console.WriteLine("time: {0}", DateTime.Now - before);
            Console.WriteLine("total: {0}", count);
        }
        static IEnumerable&lt;string&gt; GenPythonCode()
        {
            string[] ops = { "", ".0+", ".0-", ".0*", ".0/" };
            for (int i = 0; i &lt; Math.Pow(ops.Length, 8); i++) {
                string code = "1";
                int j = i;
                foreach (char num in "23456789") {
                    code += ops[j % ops.Length] + num;
                    j /= ops.Length;
                }
                yield return string.Format("komachi(\"{0}\", {0})", code + ".0");
            }
        }
    }
  :tags:
  - IronPython
  - おもしろおかしい
  :references:
    :url: 
    :title: 
- :id: '4735'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4735
  :user_name: yuin
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/12/10 18:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>パーサコンビネータでパーサを作ってナイーブに。\n解答は101個です。</p>\n\n\t"
  :code: |
    import scala.util.parsing.combinator.{Parsers, ImplicitConversions, ~, mkTilde}
    import scala.util.parsing.combinator.syntactical.StdTokenParsers
    import scala.util.parsing.combinator.lexical.StdLexical

    object Komachi extends StdTokenParsers with Application{
      type Tokens = StdLexical ; val lexical = new StdLexical
      lexical.delimiters ++= List("+","-", "*", "/")
      def expr = term*("+" ^^ {(x: double, y: double) =&gt; x + y}
                     | "-" ^^ {(x: double, y: double) =&gt; x - y})
      def term = factor*("*" ^^ {(x: double, y: double) =&gt; x * y}
                       | "/" ^^ {(x: double, y: double) =&gt; x / y})
      def factor: Parser[double] = numericLit ^^ (_.toDouble)

      ((List(List[String]())) /: List.make(8, List("+", "-", "*", "/", ""))){
        for(i &lt;-_; j &lt;-_) yield j::i
      }.foreach{fs =&gt;
        val s = (new StringBuilder("1") /: (2 to 9)){(s,i) =&gt;
          s.append(fs(i-2)).append(i)
        }.toString
        if(expr(new lexical.Scanner(s)).get == 100.0) println(s)
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4738'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4738
  :user_name: sawat
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/322/
  :language: JavaScript
  :time: 2007/12/11 02:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  #4725 を参考にしました。printはRhinoのprintで。\r<br>重いので、ブラウザでは動かさないように。\n\t"
  :code: |
    function komachi() {
      var list = Array.prototype.slice.apply(arguments, [0]);
      var right = list.pop();
      var operator = ["", "+", "-", "*", "/"];
      var n = Math.pow(operator.length,list.length-1);

      for(var i=0; i&lt;n; i++) {
        var exp = [list[0]];
        var o = (n+i).toString(5);
        for(var j=1, ii=i; j&lt;list.length; j++) {
          exp.push(operator[o.slice(j,j+1)]);
          exp.push(list[j]);
          ii = Math.floor(i/5);
        }
        if(eval(exp.join("")) == right) print(exp.join("") + '=' + right);
      }
    }
    print("begin");
    komachi(1,2,3,4,5,6,7,8,9,100);
    print("end");
  :tags:
  - Rhino
  :references:
    :url: 
    :title: 
- :id: '4740'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4740
  :user_name: sawat
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/322/
  :language: 
  :time: 2007/12/11 02:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>解答101個で4分弱でした。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4741'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4741
  :user_name: naoya_t
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/348/
  :language: 
  :time: 2007/12/11 03:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">秒殺です\r\n% time gosh komachi.scm\r\n(123 - 45
    - 67 + 89)\r\n(1 * 2 - 3 + 4 - 5 + 6 + 7 + 89)\r\n中略\r\n(1 + 234 - 56 - 7 - 8
    * 9)\r\n(1 + 2 + 34 * 5 + 6 - 7 - 8 * 9)\r\n\r\nreal\t0m0.775s\r\nuser\t0m0.758s\r\nsys\t0m0.015s\r\n\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4742'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4742
  :user_name: shiro
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/41/
  :language: Haskell
  :time: 2007/12/11 03:16 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  ナイーブに全探索。\r<br><br>opparseで演算子順位文法を使って式をRPNに変換し、calcで計算してます。\r<br><br>opsの定義を変えれば演算子を増やしたり優先順位を買えたりできます。同じ優先度の演算子は左結合。\r<br>"
  :code: "import Numeric\n\ndata Item a b = Value a | Op (a-&gt;a-&gt;a) b [Char]\n\ncat
    a b = a*10+b\n\nops :: [Item Double Integer]\nops = [Op cat 2 \"\", Op (+) 0 \"+\",
    Op (-) 0 \"-\", Op (*) 1 \"*\", Op (/) 1 \"/\"]\n \nopparse [] _ vs = reverse
    vs\nopparse (op:ops) (i:is) vs = opparse ops is $ push op (Value i) vs\n\npush
    op@(Op o p _) v (op'@(Op o' p' _):vs)\n  | (p &lt;= p') = (op:v:op':vs)\n  | otherwise
    = (op':push op v vs)\npush op v vs = op:v:vs\n\ncalc [a] [] = a\ncalc ns ((Value
    a):vs) = calc (a:ns) vs\ncalc (a:b:ns) ((Op op _ _):vs) = calc ((op b a):ns) vs\ncalc
    _ _ = error \"invalid stack state\"\n\nshowFormula ops = \"1\" ++ rec [2..] ops
    where\n   rec _ [] = \"\"\n   rec (i:is) ((Op _ _ n):ops) = n ++ (showInt . round)
    i (rec is ops)\n\ngenops 0 = [[]]\ngenops n = [o:os | o &lt;- map (ops!!) [0..4],
    os &lt;- genops (n-1)]\n\nkomachi n = [ops | ops &lt;- genops n, test 100 ops]
    where\n   test sum ops = abs (sum - (calc [] $ opparse ops [2..] [Value 1])) &lt;=
    1.0e-10\n\nmain = putStr $ unlines $ map showFormula $ komachi 8\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4743'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4743
  :user_name: kozima
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/11 03:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>とりあえず適当に全探索。候補を5進8桁の整数と同一視して dotimes で回してます。結果は101 件、CLISP で 16
    秒でした。</p>\n\n\t"
  :code: |
    (defun apply-op (op x y)
      (case op
        (#\+ (+ x y))
        (#\- (- x y))
        (#\* (* x y))
        (#\/ (/ x y))
        (#\SPACE (+ (* 10 x) y))
        (t 't)))

    (defun precedence (op) (case op ((#\+ #\-) 1) ((#\* #\/) 2) (t 3)))
    (defun precedence&lt; (op1 op2) (&lt; (precedence op1) (precedence op2)))

    (defun eval-string (s)
      (loop with vstack and opstack
        for c across s
        if (digit-char-p c) do
        (push (parse-integer (string c)) vstack)
        else if #1=(or (null opstack) (precedence&lt; (car opstack) c)) do
        (push c opstack)
        else do
        (loop until #1# do
          #2=(setf vstack
                   (cons (apply-op (pop opstack) (cadr vstack) (car vstack))
                         (cddr vstack))))
        (push c opstack)
        finally
        (loop for op in opstack do  #2#)
        (return (car vstack))))

    (defun komachi ()
      (let ((s (copy-seq "1 2 3 4 5 6 7 8 9")))
        (dotimes (x (expt 5 8))
          (dotimes (i 8)
            (setf (elt s (+ i i 1)) (elt " +-*/" (rem (floor x (expt 5 i)) 5))))
          (if (= (eval-string s) 100) (write-line s)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4744'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4744
  :user_name: 匿名
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/12/11 04:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">順当な遅さです。\r\n</pre>\n\t"
  :code: |
    # -*- coding: utf-8 -*-

    from __future__ import division
    import re

    E = '1%s2%s3%s4%s5%s6%s7%s8%s9==100'
    A = ['', '+', '-', '*', '/']
    F = lambda n: [[i] + l for i in A for l in F(n-1)] if n &gt; 1 else [[i] for i in A]
    R = lambda s: s.replace('+', u'＋').replace('-', u'－').replace('*', u'×').replace('/', u'÷').replace('==', u'＝')

    print '\n'.join([R(E % tuple(l)) for l in F(8) if eval(E % tuple(l))])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4745'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4745
  :user_name: horiuchi
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2007/12/11 05:18 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Javaでは、evalがないので自前でParseを行って計算してみました。</p>\n<p>括弧対応なしで、約1秒で 101通りの結果がでました。</p>\n\n\t"
  :code: |
    import java.util.ArrayList;
    import java.util.List;

    public class Sample104 {

        public static void komachi(int[] lhs, int rhs) {
            if (lhs.length == 0) return;

            List&lt;Term&gt; expression = new ArrayList&lt;Term&gt;();
            expression.add(new TermValue(lhs[0]));
            for (int index = 1; index &lt; lhs.length; index++) {
                List&lt;Term&gt; work = new ArrayList&lt;Term&gt;(expression);
                expression.clear();
                for (Term term: work) {
                    List&lt;Term&gt; list = createTerm(term, lhs[index]);
                    expression.addAll(list);
                };
            }

            int counter = 1;
            for (Term term: expression) {
                if (term.getValue() == rhs) {
                    System.out.println(counter++ + ": " + term.toString() + " = " + rhs);
                }
            }
        }
        private static List&lt;Term&gt; createTerm(Term lhs, int r) {
            List&lt;Term&gt; result = new ArrayList&lt;Term&gt;();
            Operator[] operators = Operator.values();
            for (int index = 0; index &lt; operators.length; index++) {
                result.add(new TermData(operators[index], lhs, new TermValue(r)));
            }
            return result;
        }


        public enum Operator {
            None {
                public int getPriority() { return 10; }
                public double operate(double lhs, double rhs) { return lhs * 10 + rhs; }
                public String toString() { return ""; }
            },
            Plus {
                public int getPriority() { return 1; }
                public double operate(double lhs, double rhs) { return lhs + rhs; }
                public String toString() { return "+"; }
            },
            Minus {
                public int getPriority() { return 1; }
                public double operate(double lhs, double rhs) { return lhs - rhs; }
                public String toString() { return "-"; }
            },
            Times {
                public int getPriority() { return 2; }
                public double operate(double lhs, double rhs) { return lhs * rhs; }
                public String toString() { return "*"; }
            },
            Divide {
                public int getPriority() { return 2; }
                public double operate(double lhs, double rhs) { return lhs / rhs; }
                public String toString() { return "/"; }
            };

            public abstract int getPriority();
            public abstract double operate(double lhs, double rhs);
        }
        private static interface Term {
            public boolean isOperate();
            public double getValue();
        }
        private static class TermValue implements Term {
            public final int value;

            public TermValue(int val) {
                value = val;
            }
            public boolean isOperate() { return false; }
            public double getValue() {
                return value;
            }
            public String toString() { return String.valueOf(value); }
        }
        private static class TermData implements Term {
            public final Operator op;
            public final Term lhs;
            public final Term rhs;

            /**
             * 右辺は追加分と考えて、演算子の順序に従ってデータを正規化します。
             */
            public TermData(Operator o, Term l, Term r) {
                Operator operator = o;
                Term lterm = l;
                Term rterm = r;

                if (l.isOperate()) {
                    TermData data = (TermData) l;
                    if (operator.getPriority() &gt; data.op.getPriority()) {
                        rterm = new TermData(operator, data.rhs, rterm);
                        lterm = data.lhs;
                        operator = data.op;
                    }
                }
                op = operator;
                lhs = lterm;
                rhs = rterm;
            }
            public boolean isOperate() { return true; }
            public double getValue() {
                return op.operate(lhs.getValue(), rhs.getValue());
            }
            public String toString() {
                return lhs.toString() + op.toString() + rhs.toString();
            }
        }


        public static void main(String[] args) {
            long start = System.currentTimeMillis();
            komachi(new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9}, 100);
            System.out.println();
            long end = System.currentTimeMillis();
            System.out.println("elipse: " + (end - start) + "(ms)");
        }
    }
  :tags:
  - Java1.5
  - 参考になる
  :references:
    :url: 
    :title: 
- :id: '4748'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4748
  :user_name: dankogai
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/12/11 05:45 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>アルゴリズム的には一番月並み。MacBook Pro 2.33GHz で12秒。</p>\n<p>＃あ、関数名が微妙に</p>\n<p>Dan
    the Perl Monger</p>\n\n\t"
  :code: |
    #!/usr/local/bin/perl
    use strict;
    use warnings;
    use B::Deparse;

    sub komanechi {
        for my $i ( 1 .. 5**8 ) {
            my $formula = 1;
            for my $n ( 2 .. 9 ) {
                $formula .= ( '', qw{+ - * /} )[ $i % 5 ] . $n;
                $i /= 5;
            }
            next if  100 != eval $formula;
            print "$formula\n";
        }
    }

    komanechi;
  :tags:
  - おもしろおかしい
  :references:
    :url: 
    :title: 
- :id: '4749'
  :parent_id: '104'
  :url: http://ja.doukaku.org/comment/4749
  :user_name: 梅紫蘇
  :user_url: /web/20081204124022/http://ja.doukaku.org/user/596/
  :language: C
  :time: 2007/12/11 06:48 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  <p>余裕があったら...という要望が、いつの間にか仕様になってるなんてコトはいつものこと。括弧付きも計算できるように実装しとくけど、計算しない方向で。</p>\n<p>計算式を、逆ポーランド形式に変換して計算（総当たり）。</p>\n\n\t"
  :code: |-
    #include &lt;ctype.h&gt;
    #include &lt;math.h&gt;
    #include &lt;iostream&gt;
    #include &lt;queue&gt;
    #include &lt;stack&gt;

    std::queue&lt;std::string&gt; ToReversePolish(std::string strExp)
    {
        std::queue&lt;std::string&gt; result;
        bool bNum = false;
        std::stack&lt;char&gt; buff;
        for (std::string::iterator p = strExp.begin(); p != strExp.end(); p++) {
            if (isspace(*p) != 0)
                continue;
            if ((*p &gt;= '0') &amp;&amp; (*p &lt;= '9')) {
                if (bNum) { result.back() += *p; }
                else      { result.push( std::string(1, *p) ); }
            }
            else if ((*p == '*') || (*p == '/') || (*p == '+') || (*p == '-')) {
                while ((buff.empty() == false) &amp;&amp; (buff.top() != '(') &amp;&amp; (buff.top() != '+') &amp;&amp; (buff.top() != '-')) {
                    result.push( std::string(1, buff.top()) );
                    buff.pop();
                }
                buff.push(*p);
            }
            else if (*p == ')') {
                while (buff.empty() == false) {
                    if (buff.top() == '(') { buff.pop(); break; }
                    result.push( std::string(1, buff.top()) );
                    buff.pop();
                }
            }
            else { buff.push(*p); }
            bNum = ((*p &gt;= '0') &amp;&amp; (*p &lt;= '9'));
        }
        while (buff.empty() == false) {
            result.push( std::string(1, buff.top()) );
            buff.pop();
        }
        return result;
    }

    bool CalcReversePolish(std::queue&lt;std::string&gt; exp, double&amp; ans)
    {
        std::stack&lt;double&gt; buff;
        while (exp.empty() == false) {
            if ((exp.front().compare("/") == 0) ||
                (exp.front().compare("*") == 0) ||
                (exp.front




    <!--
         FILE ARCHIVED ON 12:40:22 Dec 4, 2008 AND RETRIEVED FROM THE
         INTERNET ARCHIVE ON 13:28:23 Nov 16, 2013.
         JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

         ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
         SECTION 108(a)(3)).
    -->
  :tags: []
  :references:
    :url: 
    :title: 
