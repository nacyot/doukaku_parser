---
:id: '46'
:title: 重複無し乱数
:comments:
- :id: '3402'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3402
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2007/08/17 06:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  整数nを渡すと1 ～ n までの整数を重複しないようランダムに出力する関数「bingo」を作ってください。\r\n<p>\r\nこのお題はraynstardさんの投稿を元にしています。ご投稿ありがとうございました。\r\n投稿の内容には表示のしかたも含まれていたのですが、\r\nこのお題では「重複しない1～nまでの乱数をどうやって作るか」という点に集中することにして、\r\n結果の整形は続編としてこの後のお題で出すことにします。\r\nサンプル入出力は下のようになります。\r\n</p>\n<pre>\r\n&gt;&gt;&gt;
    bingo(10)\r\n[10, 7, 8, 4, 5, 2, 3, 1, 6, 9]\r\n&gt;&gt;&gt; bingo(3)\r\n[2, 3,
    1]\r\n&gt;&gt;&gt; bingo(3)\r\n[2, 3, 1]\r\n&gt;&gt;&gt; bingo(3)\r\n[3, 1, 2]\r\n&gt;&gt;&gt;
    bingo(10)\r\n[7, 3, 8, 6, 4, 10, 9, 2, 1, 5]\r\n</pre>\r\n\t"
  :code: ''
  :tags:
  - C
  :references:
    :url: 
    :title: 
- :id: '2253'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2253
  :user_name: sumim
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/08/17 06:26 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">Squeak Smalltalk で。</pre>\n\t"
  :code: |
    | bingo |
    bingo := [:n | (1 to: n) asArray shuffled].
    bingo value: 10   "=&gt; #(6 9 3 4 2 1 10 5 8 7) "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '2254'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2254
  :user_name: cats
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/08/17 06:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    using System;
    using System.Text;
    class Program
    {
      static void Main()
      {
        Console.WriteLine(bingo(3));
      }
      static string bingo(int n)
      {
        Random r = new Random();
        int[] a = new int[n];
        for (int i = 0; i &lt; n; ++i) a[i] = i + 1;
        for (int i = n; i &gt; 1; --i)
        {
          int k = r.Next(i);
          int tmp = a[i - 1];
          a[i - 1] = a[k];
          a[k] = tmp;
        }
        StringBuilder sb = new StringBuilder("(");
        for (int i = 0; i &lt; n; ++i)
        {
          if (i &gt; 0) sb.Append(", ");
          sb.Append(a[i]);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2255'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2255
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/08/17 06:39 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Pythonでも1～nのリストを作ってシャッフルする方法が一番てっとりばやいですね。\r\n\r\n&gt;&gt;&gt;
    bingo(10)\r\n[10, 8, 2, 7, 4, 5, 3, 6, 1, 9]\r\n</pre>\n\t"
  :code: "def bingo(n):\n\tfrom random import shuffle\n\tresult = range(1, n + 1)\n\tshuffle(result)\n\treturn
    result\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2256'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2256
  :user_name: rubikitch
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/08/17 06:41 GMT
  :vote_count: '4'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">久々の1行問題</pre>\n\t"
  :code: |
    def bingo(n)
      (1..n).to_a.sort_by{rand}
    end
    bingo 10                        # =&gt; [4, 2, 1, 10, 8, 5, 3, 7, 6, 9]
    bingo 3                         # =&gt; [3, 1, 2]
    bingo 3                         # =&gt; [1, 3, 2]
    bingo 3                         # =&gt; [2, 3, 1]
    bingo 10                        # =&gt; [3, 2, 6, 5, 7, 4, 1, 8, 10, 9]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2258'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2258
  :user_name: kzfm
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/106/
  :language: Perl
  :time: 2007/08/17 07:07 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    use List::Util qw/shuffle/;
    sub bingo {shuffle(1..$_[0]);}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2260'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2260
  :user_name: higeorange
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/194/
  :language: Io
  :time: 2007/08/17 07:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    Number bingo := method(
        Range
        1 to(self) asList shuffle
    }

    10 bingo println
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2261'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2261
  :user_name: lkr
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/393/
  :language: Ruby
  :time: 2007/08/17 07:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">普通にやってみた</pre>\n\t"
  :code: |
    def bingo(num)
            raise ArgumentError.new("fixnum only") unless num.kind_of? Fixnum
            raise ArgumentError.new("1 ijyou de onegai simasu") unless num &gt;= 1

            results = []

            ary=(1..num).to_a
            ary.size.times{
                    index = (rand * ary.size).to_i
                    results &lt;&lt; ary.delete_at(index)
            }

            results
    end
  :tags:
  - ruby
  :references:
    :url: 
    :title: 
- :id: '2264'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2264
  :user_name: shiro
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/08/17 07:47 GMT
  :vote_count: '8'
  :vote_score: '8'
  :body: "\n\t  \n<p>巧みだなあと思ったんですが、ごくわずかの確率でrandが同じ値を返すケースがあるはずで、その場合の要素の並び順はsortの実装によって固定されてしまうから、微妙に偏りが出てくるんじゃないかな、という気もします。\n</p>\n<p>(例えば簡略化のために要素数を2つ、randは0か1しか返さないとして、sortがstableだとすると、可能な4通りの組み合わせのうち(0
    1)が3回、(1 0)が1回となる)\n</p>\n<p>現実にはdoubleが重なる確率なんて極めて低いでしょうけど。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2265'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2265
  :user_name: hamano
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/25/
  :language: C
  :time: 2007/08/17 07:51 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">ランダムソートでいいのかな</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    static int cmp(const void *p1, const void *p2)
    {
        return (rand() % 2)?1:-1;
    }

    void bingo(int num)
    {
        int i;
        int *nums;

        if(num &lt;= 0) return;
        nums = (int*)malloc(sizeof(int) * num);
        for(i=0; i&lt;num; i++){
            nums[i] = i + 1;
        }
        qsort(nums, num, sizeof(int), (int (*)(const void*, const void*))cmp);
        for(i=0; i&lt;num; i++){
            printf("%d\n", nums[i]);
        }
        free(nums);
    }

    int main(int argc, char *argv[])
    {
        if(argc &lt; 2){
            return EXIT_FAILURE;
        }
        srand(time(NULL));
        bingo(atoi(argv[1]));
        return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2266'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2266
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/17 07:59 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  \n<p>ライブラリを使ってシャッフルしているケースでも\n   もしかするとそういう偏りがある可能性はありますね。\n</p>\n<p>気になったのでPythonのrandomライブラリを見てみたところ<a
    href=\"/web/20100606194523/http://ja.doukaku.org/comment/2254/\">#2254</a>と同じアルゴリズムでした。\n</p>\n<pre><code>for
    i in reversed(xrange(1, len(x))):\n    # pick an element in x[:i+1] with which
    to exchange x[i]\n    j = int(random() * (i+1))\n    x[i], x[j] = x[j], x[i]\n</code></pre>\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2267'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2267
  :user_name: naoya_t
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/08/17 08:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">% awk -f bingo.awk\r\n5\r\n[3, 5, 1, 4, 2]\r\n24\r\n[22,
    11, 5, 2, 4, 3, 9, 24, 6, 7, 17, 16, 21, 15, 19, 18, 12, 14, 13, 23, 10, 20, 8,
    1]\r\n10\r\n[7, 4, 9, 3, 5, 10, 2, 1, 8, 6]\r\n10\r\n[10, 8, 3, 2, 6, 7, 1, 9,
    5, 4]\r\n10\r\n[5, 7, 1, 8, 10, 3, 6, 2, 4, 9]\r\n10\r\n[6, 2, 3, 5, 1, 9, 8,
    10, 7, 4]\r\n10\r\n[6, 9, 8, 5, 4, 2, 1, 3, 10, 7]\r\n</pre>\n\t"
  :code: "BEGIN {\n\tsrand\n}\n\n{\n\tn = $1\n\n\tbingo(n,ar)\n\tshow(n,ar)\n}\n\nfunction
    show(n,ar, i)\n{\n\tprintf \"[\"\n\tfor (i=1; i&lt;n; i++) printf(\"%d, \", ar[i])\n\tprintf(\"%d]\\n\",
    ar[n])\n}\n\nfunction rand_between_1_and_n(n, x)\n{\n\tx = 1 + int(rand * n)\n\treturn
    (x &lt;= n)? x : rand_between_1_and_n(n)\n}\n\nfunction bingo(n,ar,  i,x,y,t)\n{\n\tdelete
    ar\n\tfor (i=1; i&lt;=n; i++) ar[i] = i\n\n\tfor (i=n*2; i&gt;0; i--) {\n\t\tx
    = rand_between_1_and_n(n)\n\t\ty = rand_between_1_and_n(n)\n\t\tif (x == y) continue\n\n\t\tt
    = ar[x] ; ar[x] = ar[y] ; ar[y] = t\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2269'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2269
  :user_name: shyouhei
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/70/
  :language: 
  :time: 2007/08/17 08:32 GMT
  :vote_count: '7'
  :vote_score: '7'
  :body: "\n\t  <pre class=\"compact\">rand() % 2 ではだめでしょう。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100606194523/http://www001.upp.so-net.ne.jp/isaku/rand.html
    :title: http://www001.upp.so-net.ne.jp/isaku/rand.html
- :id: '2270'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2270
  :user_name: oskimura
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/351/
  :language: Clean
  :time: 2007/08/17 08:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Cleanでやってみた。\r\n擬似乱数を生成するライブラリをつかってます。\r\n本当の乱数じゃないので、同じ数を与えると同じ乱数表になってしまう…</pre>\n\t"
  :code: |
    module RandList
    import StdEnv, MersenneTwister

    Start = bingo 10
    bingo n  = map snd  (sort  (zip ((genRandInt n),[1..n])))
  :tags: []
  :references:
    :url: /web/20100606194523/http://d.hatena.ne.jp/oskimura
    :title: ''
- :id: '2271'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2271
  :user_name: nobsun
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/17 09:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">System.Random を使う。シャッフルをナイーブに実装したもの</pre>\n\t"
  :code: |
    module Main (main) where

    import System.Environment
    import System.Random

    shuffle :: [a] -&gt; StdGen -&gt; Int -&gt; [a] -&gt; [a]
    shuffle acc _ 0 _  = acc
    shuffle acc g n xs = case randomR (0,n-1) g of
     (i,g') -&gt; case splitAt i xs of
                 (ys,z:zs) -&gt; shuffle (z:acc) g' (n-1) (ys++zs)

    main :: IO ()
    main = do { x:_ &lt;- getArgs
              ; g0  &lt;- getStdGen
              ; let n = read x
              ; putStrLn $ show $ shuffle [] g0 n [1..n]
              }

    {-
    % ./bingo 10
    [4,10,3,2,9,5,7,8,6,1]
    % ./bingo 10
    [2,7,6,8,4,1,9,5,3,10]
    % ./bingo 10
    [1,7,3,10,6,4,8,2,5,9]
    % ./bingo 10
    [6,8,9,3,10,4,1,5,2,7]
    -}
  :tags:
  - System.Random
  :references:
    :url: 
    :title: 
- :id: '2272'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2272
  :user_name: yuin
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/08/17 09:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\n\n\n\t"
  :code: |
    import scala.util.Sorting.stableSort
    def bingo(n:int) = stableSort[int,double](1 to n,{x=&gt;Math.random})
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2274'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2274
  :user_name: matyr
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/08/17 11:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t   破壊的シャッフル。\n\t"
  :code: |
    Array.prototype.$huffle = function(){
      for(var $, r, i = this.length; i;)
        $ = this[r = Math.random() * i-- | 0], this[r] = this[i], this[i] = $;
      return this;
    }
    function bingo(n){
      for(var a = []; n &gt; 0;) a[a.length] = n--;
      return a.$huffle();
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2275'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2275
  :user_name: ところてん
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/166/
  :language: C
  :time: 2007/08/17 11:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">C言語と再帰で解いて見た。\r\nソート関数は利用していません。多分線形時間。\r\n\r\n**intを与えているのがちょっとかっこ悪いですが。\r\nあと↓の部分をまともになるように書き換えればOKだけど、アルゴリズムの本質ではないので放置。\r\nswap_point
    = rand() % (num+1);\r\n\r\nアルゴリズムは以下のような感じ\r\n[1～n-1までがシャッフルされた配列] [n]\r\n↑のような配列があったときに、\r\n末尾要素と、ランダムで選ばれた末尾より前の要素とスワップすることで、\r\n全体が1～nまでがシャッフルされた配列になります。\r\nあとはそいつを再帰している感じ。\r\nループで書いてもよかったかな。</pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid _bingo(int num,
    int *result, int num_max){\n\tint temp;\n\tint swap_point;\n\n\tresult[num] =
    num + 1;\n\tswap_point = rand() % (num+1);\n\ttemp = result[swap_point];\n\tresult[swap_point]
    = result[num];\n\tresult[num] = temp;\n\n\tif (num + 1 == num_max){\n\t\treturn;\n\t}\n\t_bingo(num+1,
    result, num_max);\n\treturn;\n}\n\nvoid bingo(int num, int** result)\n{\n\t*result
    = (int*)malloc(num * sizeof(int));\n\t_bingo(0, *result,num);\n}\n\n\nint main(void)\n{\n\tint
    *result;\n\tint num;\n\tint i;\n\n\tnum = 100;\n\tbingo(num, &amp;result);\n\t\n\tfor(i
    = 0; i &lt; num; i++){\n\t\tprintf(\"%d,\", result[i]);\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2276'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2276
  :user_name: ところてん
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/08/17 11:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  あ、freeしてねぇ orz...\r<br>mainの最後の行に free(result) を追加してください。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2278'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2278
  :user_name: ところてん
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/08/17 12:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  投稿してから気づきましたが、#2254やpythonのshuffleアルゴリズムと同じですね。\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2279'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2279
  :user_name: iwk
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/49/
  :language: OCaml
  :time: 2007/08/17 12:13 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #light
    let shuffle ls =
        let rnd = new System.Random() in
        List.sort (fun x y-&gt; rnd.Next(-1,2)) ls;;

    let bingo n = shuffle [1..n]
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '2281'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2281
  :user_name: 沢渡 みかげ
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/101/
  :language: Mathematica
  :time: 2007/08/17 13:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">1～nまでのリストをRangeで生成して，\r\nRandomSampleでシャッフルしました．\r\n\r\n実行例：\r\nIn[2]:=
    bingo[10]\r\nOut[2]= {6, 3, 10, 8, 1, 2, 9, 5, 4, 7}\r\n\r\nRandomSampleで再利用無しの要素取得，\r\nRandomChoiceで再利用OKの要素取得が\r\nできるようになってます．</pre>\n\t"
  :code: |
    bingo[n_] := RandomSample[Range[n]];
  :tags: []
  :references:
    :url: /web/20100606194523/http://reference.wolfram.com/mathematica/ref/RandomSample.ja.html
    :title: Mathematica - RandomSample
- :id: '2283'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2283
  :user_name: jz5
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/17 13:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">AddしてRemoveAt。</pre>\n\t"
  :code: |
    Public Sub bingo(ByVal n As Integer)
        Dim list As New List(Of Integer)
        For i As Integer = 1 To n
            list.Add(i)
        Next
        Dim r As New Random
        For i As Integer = 1 To n
            Dim index As Integer = r.Next(0, n)
            list.Add(list(index))
            list.RemoveAt(index)
        Next

        For Each i As Integer In list
            Console.Write(i.ToString &amp; ", ")
        Next
    End Sub
  :tags:
  - VB8.0
  :references:
    :url: 
    :title: 
- :id: '2284'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2284
  :user_name: ocean
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/08/17 14:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  std::random_shuffle を使います。乱数生成関数オブジェクトを指定しないと、何度実行しても同じ乱数列を発生させてしまうので、srand()を使う関数オブジェクトを定義します。\r<br><br>普通はtime()で得られる値を種にするらしいのですが、これは秒単位なので、同一秒内で再度実行すると、やはり同じ乱数列が得られてしまい、うまくありません。\r<br><br>そこで、Windowsでは、起動からのミリ秒を種として渡すことにしました。\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;
    #include &lt;algorithm&gt;
    #include &lt;iterator&gt;
    #include &lt;cstdlib&gt;

    #ifdef _WIN32
    # include &lt;windows.h&gt;
    # define seed() ::GetCurrentTime()
    #else
    # include &lt;ctime&gt;
    # define seed() std::time(NULL)
    #endif

    struct RandomGenerator
    {
        RandomGenerator()
        {
            std::srand(static_cast&lt;unsigned&gt;(seed()));
        }

        int operator()(int n) const
        {
            return std::rand() % n;
        }
    };

    void bingo(size_t n)
    {
        std::vector&lt;size_t&gt; v;

        for (size_t i = 0; i &lt; n; ++i)
        {
            v.push_back(i);
        }

        static RandomGenerator gen;

        std::random_shuffle(v.begin(), v.end(), gen);

        std::copy(v.begin(), v.end(), std::ostream_iterator&lt;size_t&gt;(std::cout, " "));

        std::cout &lt;&lt; std::endl;
    }

    int main()
    {
        bingo(10);
        bingo(3);
        bingo(3);
        bingo(3);
        bingo(10);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2285'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2285
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: Matlab
  :time: 2007/08/17 15:00 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  標準のrandpermという関数が問のbingoと全く同じ動作をします。投稿のコードはsortがソート前の順序を返すことを使った別解です。\n\t"
  :code: |
    function r = bingo(n)
    [m r] = sort(rand(1,n));
  :tags:
  - MATLAB7.4
  :references:
    :url: 
    :title: 
- :id: '2286'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2286
  :user_name: hamano
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/25/
  :language: 
  :time: 2007/08/17 15:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">参考になりました、あと stdlib.h の qsort() を使い回したのも良くないですね。\r\n皆さんのより良いシャッフル方法を参考にさせて頂こうと思います。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2287'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2287
  :user_name: ocean
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/177/
  :language: diff
  :time: 2007/08/17 15:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  #2269 によると rand() % n はまずいということなので、修正しました。std::min や std::max は [0, n) の範囲にあることを保証するため、念のため。\n\t"
  :code: "--- main.orig\tSat Aug 18 00:35:58 2007\n+++ main.cpp\tSat Aug 18 00:41:24
    2007\n@@ -21,7 +21,9 @@ struct RandomGenerator\n \n     int operator()(int n)
    const\n     {\n-        return std::rand() % n;\n+        const int i = static_cast&lt;int&gt;(static_cast&lt;double&gt;(std::rand())
    * n / RAND_MAX);\n+\n+        return std::max(0, std::min(i, n - 1));\n     }\n
    };\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2289'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2289
  :user_name: smeghead
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/31/
  :language: Common
  :time: 2007/08/17 16:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">(print (bingo 10))\r\n =&gt; (2 4 8 10 6 7
    5 9 3 1)</pre>\n\t"
  :code: "(defun bingo (n)\n  (loop repeat n\n        for rand = (loop \n                     (let*
    ((*random-state* (make-random-state t))\n                            (rand (1+
    (random n))))\n                       (if (not (member rand lst))\n                         (return
    rand))))\n        collect rand into lst\n        finally (return lst)))\n"
  :tags:
  - clisp
  :references:
    :url: 
    :title: 
- :id: '2290'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2290
  :user_name: kkobayashi
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/17 16:25 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Rもそうですが、MathematicaやMATLABのような数値解析系はこういうの簡単に書けますね。\r\n元のお題は「n
    * nのビンゴを出力せよ」みたいな感じだったのかな。\r\n\r\n&gt; sample(10)\r\n [1]  1  9  4 10  3  5  7
    \ 2  8  6</pre>\n\t"
  :code: |
    bingo &lt;- sample
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2292'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2292
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: Matlab
  :time: 2007/08/17 16:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>標準で必要な関数があるのにあえて別解を用いるメリットが最初の例では特に無かったので、少し書き換えてk個の列を一度に返せるようにした。標準のrandpermでk個生成するにはループでk回呼ばないといけない。余談だがMATLAB7.4ではデフォルトの乱数生成アルゴリズムとして<a
    href=\"/web/20100606194523/http://ja.doukaku.org/comment/2269/\">#2269</a>さんのリンク先でも紹介されているメルセンヌ・ツイスタが採用されている。\n</p>\n\n\n\n\t"
  :code: |
    function r = bingo(n,k)
    % r = bingo(n) retruns a random permutation of 1:n.
    % r = bingo(n,k) returns a k-by-n array, each row of which is a random
    % permutation of 1:n.
    % (ja.doukaku.org Q46)
    if nargin&lt;2
        k = 1;
    end
    [m r] = sort(rand([k n]),2);
  :tags:
  - MATLAB7.4
  :references:
    :url: 
    :title: 
- :id: '2293'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2293
  :user_name: ？せんたくいた
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/241/
  :language: 
  :time: 2007/08/17 18:43 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">4年前に/.J日記界隈で話題になったネタです。\r\n当時のblogへのリンクを晒しておきます。\r\n#
    今も拙いって?\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100606194523/http://slashdot.jp/~sentakuita/journal/145032
    :title: カードまぜまぜほげふが。
- :id: '2294'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2294
  :user_name: 匿名
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/18 01:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  配列にするかリストにするか迷ったのですが、とりあえずリストにしておきました。\n\t"
  :code: |
    import java.util.*;

    public class Sample {
        public static List&lt;Integer&gt; bingo(int num) {
            Integer[] deck = new Integer[num];
            for (int i = 0; i &lt; num; i++) {
                deck[i] = i + 1;
            }
            List&lt;Integer&gt; nums = (List&lt;Integer&gt;) Arrays.asList(deck);
            Collections.shuffle(nums);
            return nums;
        }

        public static void main(String[] args) {
            System.out.println(bingo(Integer.parseInt(args[0])));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2295'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2295
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: Perl
  :time: 2007/08/18 03:24 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">抽出して最後に追加が見あたらなかったので投稿～\r\nCだとswapすることになるのかな？\r\nめんどそうだからperlで(笑\r\n\r\n[10]
    =&gt; 8,10,6,1,3,5,9,4,7,2\r\n[3] =&gt; 3,1,2\r\n[2] =&gt; 2,1\r\n\r\n# rand *
    1000 だとうまくいかなかったなぜ？\r\n</pre>\n\t"
  :code: |
    sub bingo($;)
    {
        my $x = shift ;
        my @num = (1 .. $x);
        my $r;
        for( my $n = $x; $n&gt;0; $n --)
        {
            $r = rand; $r *= 1000;
            push(@num, splice(@num, $r % $n, 1) );
        }
        print "[$x] =&gt; " . join(",", @num) . "\n";
    }
    srand;

    bingo(10);
    bingo(3);
    bingo(2);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2297'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2297
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: Matlab
  :time: 2007/08/18 04:30 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>最初の投稿でえらそうに別解です、なんて書いたけどMATLABのrandpermは実は.mファイル(つまりMATLABで書かれたスクリプト)でその中身は投稿したコードと全く同じだということに気付いた。情けないのであらためて別解。前と同様第二引数で何個生成するか指定する。sortを使う方法よりずいぶん遅い。次のようにすると計算時間の測定と順序が均等かどうかのおおまかな確認ができる。\n</p>\n<pre><code>tic;r=bingo(100,10000);bar(sum(r,1));toc\n</code></pre>\n\n\n\t"
  :code: |
    function r = bingo(n,k)
    % r = bingo(n) retruns a random permutation of 1:n.
    % r = bingo(n,k) returns a k-by-n array, each row of which is a random
    % permutation of 1:n.
    % (ja.doukaku.org Q46)
    if nargin&lt;2
        k = 1;
    end
    [s r] = meshgrid(1:k,1:n);
    % q = zeros(k,2);
    for p = n:-1:2
        q(:,1) = ceil(rand(k,1)*p);
        q(:,2) = p;
        q = q+s(1:2,:)'*n-n;
        r(q) = r(q(:,[2 1]));
    end
    r = r';
  :tags:
  - MATLAB7.4
  :references:
    :url: 
    :title: 
- :id: '2300'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2300
  :user_name: tomatsu
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/18 07:56 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    import java.util.*
    function bingo(n) {Collections.shuffle(x = list(range(1,n))); x}

    println(bingo(10))
  :tags:
  - Pnuts
  :references:
    :url: 
    :title: 
- :id: '2301'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2301
  :user_name: 匿名
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2007/08/18 09:21 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">Ruby 1.9にはArray#shuffleが存在します\r\n</pre>\n\t"
  :code: |
    def bingo(n)
      [*1..n].shuffle
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2309'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2309
  :user_name: tell
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/228/
  :language: Ruby
  :time: 2007/08/18 14:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">どこかで見たことがある問題だなぁ…\r\nコードはあまり確かめずに書いた．\r\n配列の参照範囲とか間違ってなければいいけど．</pre>\n\t"
  :code: |
    def bingo( n )
      ary = (1..n).to_a
      n.downto(1) {| i |
        e = ary.delete_at( rand( i ) )
        ary.push( e )
      }
      ary
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2313'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2313
  :user_name: nskj77
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/375/
  :language: Haskell
  :time: 2007/08/18 15:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    import Random (randomRIO)
    import Data.List ((\\))

    bingo :: Int -&gt; IO [Int]
    bingo n = b [1..n] n []
      where b [] n     ret = return ret
            b xs (n+1) ret = do
              r &lt;- randomRIO (0,n)
              let m = xs !! r in b (xs \\ [m]) n (ret ++ [m])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2316'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2316
  :user_name: iwk
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/49/
  :language: 
  :time: 2007/08/18 15:37 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">このshuffle関数ではリストは完全にシャッフルされない。\r\n具体的には\r\n[1..1000]というリストを与えた場合。\r\n500
    &lt;-&gt; 501, 10 &lt;-&gt; 15\r\nなどの近距離では問題ないが\r\n1 &lt;-&gt; 1000\r\nなどの遠距離の交換が起こる可能性が極めて低い。\r\n\r\n良い実装法だれか教えてください。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2331'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2331
  :user_name: ココサブ
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/24/
  :language: 
  :time: 2007/08/19 14:02 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">rand * 1000\r\nは\r\nrand() * 1000\r\nにすれば動きます。\r\n\r\nかっこがないため、\r\nrand(
    * 1000)\r\nと解釈されているのだと思います。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2338'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2338
  :user_name: Mistfeal
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/153/
  :language: PHP
  :time: 2007/08/20 04:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">リハビリを兼ねて、軽めに。</pre>\n\t"
  :code: "&lt;?php\nfunction bingo($n) {\n\t$rtn = range(1,$n);\n\tshuffle($rtn);\n\treturn
    $rtn;\n}\n\nprint_r(bingo(25));\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2373'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2373
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/22 04:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt;どこかで見たことがある問題だなぁ…\r\n\r\norz…\r\n見たことがない問題を投稿してください…</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2376'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2376
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/22 10:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1000って何かと思ったら$nであまりを取るんですね。\r\nなぜ$nを掛けなかったのか少し気になります。\r\n#
    0付近だけ確率が高くなってしまう…$nが1000を超えたら大変…</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2379'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2379
  :user_name: kozima
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/08/22 12:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1-n のリストを作っといてランダムに取り出せばいいかなと思いましたが、\r\nそれだとあまりきれいにいかなくて考えた末こうなりました。\r\n\r\nコメントアウトを外すとわかりやすいと思いますが\r\nリングをランダムに回しながら取り出すようなイメージで作ってます。</pre>\n\t"
  :code: |
    (defun bingo (n)
      (let ((r '#1=(nil . #1#)))
        (do ((i 1 (1+ i)))
            ((&gt; i n))
          (push i (cdr r)))
        (let (buf)
          (do ((i n (1- i))
               (st (make-random-state t)))
              ((= i 0))
            (push (pop (cdr (nthcdr (random i st) r)))
                  buf)
            ;; (write r :circle t) (terpri)
            )
          (write buf))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2387'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2387
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2007/08/22 13:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">なるほど、何となくそんな予感はしていましたけど、やっぱそれしか考えられない？\r\n\r\n(*1000)てなにか意味のある文法なのかな？\r\n*Nとかならわかるんだけど。。。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2395'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2395
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2007/08/22 14:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">もしかすると知っているかもしれませんが\r\nperlのrand()は0～1の値を返してくるので\r\n*1000しているのです。\r\n\r\n範囲が1000を超えちゃうとまずいのは確かですね。\r\nかといって
    *$nしてしまうと微妙に計算がおかしくなりそうな予感。\r\n\r\nそれ以外には、同じ値の発生率を1/1000にしたつもりです。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2411'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2411
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: diff
  :time: 2007/08/22 15:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">もしかしたら配列の範囲超えちゃうかなと思って剰余を使用しましたが\r\nよく考えてみるとかけ算でも良かったかも。\r\n\r\n最大で0.9掛けにしかならないし。\r\nあれ？でも確率的には1.0もありうる？</pre>\n\t"
  :code: |
    --- doukaku46.pl.org    2007-08-23 00:40:42.921875000 +0900
    +++ doukaku46.pl        2007-08-23 00:41:49.203125000 +0900
    @@ -5,8 +5,7 @@
         my $r;
         for( my $n = $x; $n&gt;0; $n --)
         {
    -        $r = rand; $r *= 1000;
    -        push(@num, splice(@num, $r % $n, 1) );
    +        push(@num, splice(@num, rand() * $n, 1) );
         }
         print "[$x] =&gt; " . join(",", @num) . "\n";
     }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2412'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2412
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: 
  :time: 2007/08/22 15:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">100行以内にかけそうなものというとある程度決まってるので、\r\nこういった基本形は仕方ない気がします。\r\n\r\nみんながみんな400行くらいのものを書いても\r\n平気ならそれなりに凝ったお題もあるのでしょうけど。。。\r\n#解析系とか</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2413'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2413
  :user_name: ココサブ
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/24/
  :language: Perl
  :time: 2007/08/22 16:10 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">型ブログということでいいみたいです。\r\n*1000\r\nはどんなパッケージ内であっても、\r\nmainパッケージに含まれているようです。</pre>\n\t"
  :code: |
    #!/usr/local/bin/perl -w
    use strict;
    package hoge;

    my $piyo = (*1000);
    print $piyo, "\n";

    my $fuga = (*N);
    print $fuga, "\n";

    # 出力結果 ( Perlのバージョンは5.8.8 )
    # Name "hoge::N" used only once: possible typo at ./test.pl line 9.
    # *main::1000
    # *hoge::N
  :tags: []
  :references:
    :url: /web/20100606194523/http://www.kt.rim.or.jp/~kbk/perl5.005/perldata.html
    :title: perldata - Perl のデータ型
- :id: '2460'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2460
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/23 16:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「perlのrand()は0～1の値を返す」ということですけど、\r\n「0以上1未満」じゃないですか？\r\nPerlのことは詳しくないので間違っているかも知れませんが、\r\n0以上1未満なのであればnを掛けて切り捨てることで\r\n0以上n未満の整数が得られます…。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2470'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2470
  :user_name: r0c
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/396/
  :language: Ruby
  :time: 2007/08/24 04:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こうすると配列作成コスト1回で済む･･･？\r\n\r\n繰り返し部分をxsを返す式にしようとinjectやら何やら色々試したけど\r\nいまひとつきれいにできないのであきらめました．</pre>\n\t"
  :code: |
    def bingo(n)
      xs = *1..n
      n.times {|i| xs &lt;&lt; xs.slice!(rand(n - i)) }
      xs
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2481'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2481
  :user_name: raynstard
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/127/
  :language: Perl
  :time: 2007/08/24 12:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">マニュアル確認しました。\r\n1未満ですね失礼しました。\r\nしかも、rand()は引数に指定したN未満という形で返すらしいです。\r\n結局、掛け算する必要性すらなくorz\r\n\r\nさらに、別のページでは僕の書いたコードは悪い例として載っていました(笑\r\n\r\n下のように書くと良いらしいです。\r\n#コードはそのページからのコピペです。\r\n#ページ内検索:How
    do I shuffle an array randomly?\r\n\r\nperlならではの書き方でなるほど～という感じ</pre>\n\t"
  :code: "    # fisher_yates_shuffle( \\@array ) : \n    # generate a random permutation
    of @array in place\n    sub fisher_yates_shuffle {\n        my $array = shift;\n
    \       my $i;\n        for ($i = @$array; --$i; ) {\n            my $j = int
    rand ($i+1);\n            @$array[$i,$j] = @$array[$j,$i];\n        }\n    }\n
    \   fisher_yates_shuffle( \\@array );    # @array そのものを入れ替える\n"
  :tags: []
  :references:
    :url: /web/20100606194523/http://perldoc.jp/docs/perl/5.6.1/perlfaq4.pod
    :title: perlfaq4 - データ操作
- :id: '2542'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2542
  :user_name: mz
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/403/
  :language: Emacs
  :time: 2007/08/26 13:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">;;  random-permutation\r\n(random t)\r\n(bingo
    10)\r\n</pre>\n\t"
  :code: "(defun iota (n &amp;optional a step)\n  (setq step (or step 1))\n  (do ((n
    n (- n 1))\n       (ret '() (cons a ret))\n       (a (or a 0) (+ a step)))\n      ((&lt;=
    n 0) (nreverse ret))))\n(defun bingo (a &amp;optional b)\n  (let* ((ret (vconcat
    (mapcar '1+ (iota a b))))\n\t (num (length ret))\n\t val rnd)\n    (dotimes (x
    \ num ret)\n      (setq rnd (random num)\n\t    val (aref ret x))\n      (aset
    ret x (aref ret rnd))\n      (aset ret rnd val))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2607'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2607
  :user_name: 管理者
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/411/
  :language: 
  :time: 2007/08/29 03:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>Rubyのコードのパフォーマンス比較記事があったのでリンクしておきます。\n</p>\n<p><a href=\"/web/20100606194523/http://d.hatena.ne.jp/trotr/20070827#1188196059\">trotrの日記
    どう書く？（重複なし関数）</a>\n</p>\n<p>Rubyのsort_byが安定ソートではないので偏りは生じないのでは、という話が続編でありました。\n</p>\n<p><a
    href=\"/web/20100606194523/http://d.hatena.ne.jp/trotr/20070828#1188292059\">trotrの日記
    どう書く？（重複なし関数）2</a>\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2611'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2611
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/29 04:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「安定ソートではないので偏りは生じないのでは」という話につっこみですが、\r\n「安定ソートならば偏りが確実に生じる」というだけで、\r\n「不安定ソートならば偏りが生じない」というわけではありません。\r\nあえて言うなら「偏りが生じることが保証されていない」というソートです。\r\n\r\nでも、shiroさんのつっこみも、間違いではなくて、\r\n確かにシミュレーションなどで使うと偏りが問題になるのですが、\r\nそもそもそういう目的にRubyを使うのがダメな気がするので\r\nあまり気にするほどのことでもないかと思います…</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100606194523/http://ja.doukaku.org/comment/2264/
    :title: shiroさんのつっこみ
- :id: '2612'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2612
  :user_name: にしお
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/29 04:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>っと、向こうにも同じ趣旨のことをshiroさんが書いていましたね(^^;\n</p>\n<p><a href=\"/web/20100606194523/http://d.hatena.ne.jp/trotr/comment?date=20070828#c\">trotrの日記</a>\n</p>\n<p>#
    どう書くorgの書き込みからトラックバック打てたらいいのかもなぁ\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2615'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2615
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: Matlab
  :time: 2007/08/29 04:45 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p><a href=\"/web/20100606194523/http://ja.doukaku.org/comment/2264/\">#2264</a>の指摘をみてなるほどと思ったので簡単なテスト。順位相関を使ってみた。\n</p>\n<p><a
    href=\"/web/20100606194523/http://ja.doukaku.org/comment/2285/\">#2285</a>のコード(MATLAB標準のrandpermも同じ方法)は最初に乱数を要求された数列の個数分だけ作り、その順序を返す。MATLABのsortは値が同じ場合は順序を保存するので、たとえば1番目と2番目の乱数が同じ数字だと必ず1が2の前になってしまう。\n</p>\n<p>投稿のコードは乱数の有効桁数(最初の行の最後の引数)を制限し、生成した数列とその位置の順位相関の分布と平均を表示する。有効桁数を1にした場合はかなり偏りが生じるが、3桁くらいでほとんど偏りが無い。順位相関を見る限りでは、普通の精度の乱数を使えばこのアルゴリズムでの偏りを気にする必要は無さそう。\n</p>\n\n\n\n\t"
  :code: |
    x = bingo(25,1000,1);
    rho = corr((1:size(x,2))',x(1:size(x,1),:)','type','Kendall');
    figure(1); hist(rho,-1:0.1:1); axis([-1 1 0 300])
    fprintf('Mean = %f, skewness = %f\n', mean(rho), skewness(rho));

    function r = bingo(n,k,p)
    % r = bingo(n,k) returns a k-by-n array, each row of which is a random
    % permutation of 1:n, using random numbers with p significant digits .
    [m r] = sort(randr([k n],p),2);

    function r = randr(M,p)
    r = floor(rand(M).*10^p)./10^p;
  :tags:
  - MATLAB7.4
  :references:
    :url: 
    :title: 
- :id: '2616'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2616
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: 
  :time: 2007/08/29 04:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>ご指摘ごもっともと思ったのでMATLABでこのアルゴリズムで生成する数列の偏りをチェックしてみました(<a href=\"/web/20100606194523/http://ja.doukaku.org/comment/2615/\">#2615</a>)。このチェック方法がいいのかどうかは実はよく分からないのですが、これでおおざっぱに見る限り普通の精度の乱数を使えば偏りはものすごく小さそうです。ちなみにMATLABの標準のrandpermという同じ目的の関数も<a
    href=\"/web/20100606194523/http://ja.doukaku.org/comment/2256/\">#2256</a>と同様のアルゴリズムになっています。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2617'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2617
  :user_name: shiro
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/08/29 06:33 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  もちろん、IEEE doubleを使った場合2^53通りの値がrandで出現するので (Rubyはメルセンヌツイスタでしたよね? )、「値が衝突する可能性」自体がものすごく少ないです (サンプル数10^5くらいじゃその計算をdoubleでやったら計算誤差よりはるかに小さいくらいの影響)。\r<br><br>ただ、暗号とかストカスティックシミュレーションみたいな、膨大なデータから統計的に意味を見つけ出すような分野で、素材となる元のランダム列に偏りが入っていると結果に影響が出てくるわけで、「そういう用途には使えない」ということだけわかっていれば良いのでは。標準Cの rand() が「用途によっては使えない」のと同じような意味で。\r<br><br>今回のお題はbingoですから、その範囲では十分に題意に沿った回答であると思います。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2744'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2744
  :user_name: 130R
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/08/31 09:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PS C:\\&gt; bingo(3)\r\n2\r\n1\r\n0\r\nPS C:\\&gt;
    @(bingo(10000) | sort | get-unique).length\r\n10000</pre>\n\t"
  :code: |
    function bingo([int] $n)
    {
         $r = new-object system.random
         $a = 0..($n-1)
         0..($n-1) | %{ $i = $r.next($n-1); $a[$_],$a[$i] = $a[$i],$a[$_] }
         $a
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2767'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2767
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: 
  :time: 2007/09/01 07:03 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>先の投稿の意図は(rand自体の品質の話ではなく)このアルゴリズム自体に起因する偏りがrandの精度に対してどれくらい小さいかを直感的に見たというだけのもので、最初の投稿について題意云々を批判したつもりはまったくないのですが、そのように読めたのでしたらもうしわけなかったです。失礼しました。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2768'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2768
  :user_name: shiro
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/09/01 07:39 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  ああ、私もshgさんの投稿を批判と取ったわけではありません。2番目と3番目のパラグラフはshgさんの投稿に対してではなく、このやりとりを読んだ第3者の人が必要以上に問題を大げさにとらえたらまずいなという予防線みたいなつもりでした。まぎらわしくってすみません。\r<br><br>で、実際の偏りの評価なんですが、「randの精度に対して急速に小さくなる」というのはまあ予想できることで、「ものすごーく小さいはずなんだけれど実際のところ53bit精度では具体的にどのくらいの偏りなのかな」という点に触れられていなかったのでああいう書き方になってしまった、ようです。今読み返すとちゃんとしたコメントになっていませんね。失礼しました。\r<br><br>実は#2264時点で衝突する確率の計算も試みてみたのですが、doubleで計算したらすぐに誤差に埋もれてしまうし、無限多倍長数で計算したら計算時間が爆発したので諦めていたのでした。ちゃんと近似式を導いて評価するのが良いのでしょうが…\r<br><br><br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2774'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/2774
  :user_name: shg
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/383/
  :language: 
  :time: 2007/09/01 17:36 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  \n<p>乱数が衝突する確率を直接計算すると、pを乱数の精度(最小単位の意味で)として、\n</p>\n<p>1-(1-p)(1-2p)(1-3p)...(1-(n-1)p)\n</p>\n<p>みたいな感じでしょうか。p=2^(-53)でn=25だとおよそ2.1e-14。p=2^(-31)でn=100だとおよそ2.3e-6。n個の中で衝突する確率なのでこの値は当然nに大きく依存しますが、実際は衝突は全体にまんべんなく確率的に起きるわけでnが大きいと偏りの問題が大きくなるというわけではないですよね。\n</p>\n<p>bingoの評価としては、1〜nのそれぞれが1番目、2番目、..
    n番目に来る確率みたいなのをチェックする方がより直接的かな? (してません)\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3114'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3114
  :user_name: koguro
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/438/
  :language: Scheme
  :time: 2007/09/19 15:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Schemeの解答がなかったので投稿</pre>\n\t"
  :code: |
    (use srfi-1)
    (use srfi-27)

    (define (bingo n)
      (define (%bingo lst)
        (if (null? lst)
            '()
            (receive (head tail) (split-at lst (random-integer (length lst)))
              (cons (car tail) (%bingo (append head (cdr tail)))))))
      (%bingo (iota n 1)))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3175'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3175
  :user_name: yohei
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/415/
  :language: Prolog
  :time: 2007/09/26 07:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "shuffle([],[]).\nshuffle(X,[R|Y]) :- length(X, XL), N is random(XL),\n\tnth0(N,
    X, R), select(R, X, X1), shuffle(X1, Y).\n\nbingo(N) :- findall(X, between(1,
    N, X), L), shuffle(L, S), write(S).\n"
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '3198'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3198
  :user_name: lufia
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/242/
  :language: Other
  :time: 2007/09/29 20:29 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">ビンゴ本体より、準備行のほうが多い気がする。</pre>\n\t"
  :code: "implement Bingo;\n\ninclude \"sys.m\";\n\tsys: Sys;\ninclude \"draw.m\";\ninclude
    \"keyring.m\";\ninclude \"security.m\";\n\trandom: Random;\n\nargv0: string;\n\nBingo:
    module\n{\n\tinit: fn(nil: ref Draw-&gt;Context, argv: list of string);\n};\n\nusage()\n{\n\tsys-&gt;fprint(sys-&gt;fildes(2),
    \"usage: %s n\\n\", argv0);\n\traise \"fail:usage\";\n}\n\ninit(nil: ref Draw-&gt;Context,
    argv: list of string)\n{\n\tsys = load Sys Sys-&gt;PATH;\n\trandom = load Random
    Random-&gt;PATH;\n\targv0 = hd argv;\n\targv = tl argv;\n\n\tn := 10;\n\tif(argv
    != nil)\n\t\tn = int hd argv;\n\n\ta := array[n] of int;\n\tfor(i := 0; i &lt;
    n; i++)\n\t\ta[i] = i+1;\n\n\twhile(n &gt; 0){\n\t\tp := rand() % n;\n\t\tsys-&gt;print(\"%d\\n\",
    a[p]);\n\t\ta[p] = a[--n];\n\t}\n}\n\nrand(): int\n{\n\tr := random-&gt;randomint(Random-&gt;ReallyRandom);\n\tif(r
    &lt; 0)\n\t\tr = -r;\n\treturn r;\n}\n"
  :tags:
  - Limbo
  :references:
    :url: 
    :title: 
- :id: '3342'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3342
  :user_name: aileron
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/467/
  :language: Perl
  :time: 2007/10/16 03:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Perlで書いてみた</pre>\n\t"
  :code: |
    sub bingo()
    {
        my @array = ( 1 .. shift );
        my @out   = ();
        while ( my $x = splice( @array, int(rand(scalar @array)) , 1 ) )
        {
            push @out , $x ;
        }
        return [ @out ];
    }

    print join "," , @{ &amp;bingo(10) };
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3625'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3625
  :user_name: 匿名
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/31 09:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">もし，sample 関数がないとしたら，他の関数を使ってどう書くかを\r\nつまり，n個の一様乱数を発生させ，一様乱数の大きさの順で1〜nを並び替える\r\n\r\n&gt;
    foo(10)\r\n [1] 10  9  1  3  2  5  7  8  4  6\r\n&gt; foo(10)\r\n [1]  7 10  2
    \ 9  5  4  1  8  3  6\r\n&gt; foo(100)\r\n  [1]   7  84  53  70  26  21  90  37
    \ 33  82  65  40  74  95  24   1   4  97  38   6\r\n [21]  94  15  18  12  29
    \ 19  43  52  85  47   3  64  78  88  81  46  87  55  16  28\r\n [41]  62  41
    \ 17  36  25  42  39  11  56  58  61  91  44  20  51  71  60  31  75  96\r\n [61]
    \ 80  13  50  14  10  57  59  35   5  48  30  77  27  67 100  72  92  68  54  83\r\n
    [81]  79  89  73  23  98  99  69  76   8   2  22  86  63  93  66  32  34   9  45
    \ 49\r\n</pre>\n\t"
  :code: |
    foo &lt;- function(n) (1:n)[order(runif(n))]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3645'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3645
  :user_name: 匿名
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/4/
  :language: awk
  :time: 2007/11/01 07:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1〜nの要素を持つベクトルを作り，端から順に無作為に並べ替えてゆく。\r\nランダムさはそれで十分だろう。\r\nスクリプト中のnへ値を渡すのは
    -v n=5 のように\r\n\r\n &gt; awk -f p3402.awk -v n=10\r\n 4 10 9 1 2 6 5 8 3 7\r\n
    &gt; awk -f p3402.awk -v n=10\r\n 4 10 9 1 2 6 5 8 3 7\r\n &gt; awk -f p3402.awk
    -v n=10\r\n 3 2 5 4 7 9 10 1 6 8\r\n</pre>\n\t"
  :code: |
    BEGIN {
        srand()
        for (i = 1; i &lt;= n; i++) x[i] = i
        for (i = 1; i &lt;= n; i++) {
            j = int(rand()*n)+1
            t = x[i]
            x[i] = x[j]
            x[j] = t
        }
        for (i = 1; i &lt;= n; i++) printf " %i", x[i]
        print ""
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3653'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3653
  :user_name: mtsuyugu
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2007/11/01 16:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>破壊的シャッフル。<a href=\"/web/20100606194523/http://ja.doukaku.org/comment/3645\">#3645</a>,
    <a href=\"/web/20100606194523/http://ja.doukaku.org/comment/2254\">#2254</a> に似たものが
    C でなかったので書いてみました。\n</p>\n\n\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;time.h&gt;

    void bingo( int n ){
       int tmp;
       int i,j;
       int *deck = (int*)malloc(sizeof(int)*n);
       for( i = 0; i &lt; n; i++ )
          deck[i] = i+1;

       for( i = 0; i &lt; n; i++ ){
          j = rand() % (n-i);
          tmp = deck[j];
          deck[j] = deck[ n-i-1 ];
          deck[ n-i-1 ] = tmp;
       }
       for( i = 0; i &lt; n; i++)
          printf("%d ", deck[i] );
       free(deck);
    }

    int main ( void ){
       srand(time(NULL));
       bingo(10);
       printf("\n");
       bingo(15);
       printf("\n");
       return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3711'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3711
  :user_name: sa10i
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/513/
  :language: C
  :time: 2007/11/05 14:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">出力がランダムな場合、皆さんどんな風にテスト書いてるんでしょうね</pre>\n\t"
  :code: |
    static string bingo(int num)
    {
            //ランダムな配列を作成
            System.Collections.ArrayList al= new System.Collections.ArrayList(num);
            Random r= new Random();
            for(int i=1; i&lt;= num; i++)
                    al.Insert(r.Next(i), i);

            //文字列で出力
            System.Text.StringBuilder sb= new System.Text.StringBuilder();
            for(int i=0; i&lt; al.Count; i++)
                    sb.Append(al[i].ToString()+",");
            return sb.ToString().Trim(',');
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3901'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/3901
  :user_name: 匿名
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/12 09:03 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">もっと短く出来そうですが素直に。</pre>\n\t"
  :code: |
    bingo(10)を" "で配列結合して表示
    ●bingo(n)
    　　rとは配列
    　　(n)回
    　　　　rに回数を配列追加
    　　rを配列シャッフル
    　　rで戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4043'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4043
  :user_name: Psychs
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/554/
  :language: Objective
  :time: 2007/11/15 02:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n\n@interface NSArray (Bingo)\n+
    (NSArray*)bingo:(int)n;\n@end\n\n@implementation NSArray (Bingo)\n\n+ (NSArray*)bingo:(int)n\n{\n
    \ NSMutableArray* array = [NSMutableArray array];\n  int i;\n  for (i=1; i&lt;=n;
    i++) [array addObject:[NSNumber numberWithInteger:i]];\n\n  NSMutableArray* result
    = [NSMutableArray array];\n  for (i=1; i&lt;=n; i++) {\n    int size = n - i +
    1;\n    int index = rand() % size;\n    [result addObject:[array objectAtIndex:index]];\n
    \   [array removeObjectAtIndex:index];\n  }\n  return result;\n}\n\n@end\n\nint
    main(int argc, char** argv)\n{\n  NSAutoreleasePool* pool = [NSAutoreleasePool
    new];\n\n  srand(time(0));\n  NSLog(@\"%@\", [NSArray bingo:3]);\n  NSLog(@\"%@\",
    [NSArray bingo:10]);\n  \n  [pool release];\n  return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4289'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4289
  :user_name: fujidig
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/507/
  :language: HSP
  :time: 2007/11/21 13:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #module
    #deffunc bingo int n
        dim dest, n
        repeat n
            dest.cnt = cnt+1
        loop
        repeat n
            r = rnd( n - cnt ) + cnt
            tmp = dest.r
            dest.r = dest.cnt
            dest.cnt = tmp
        loop
        buf = ""
        repeat n
            if ( cnt &gt; 0 ) {
                buf += " "
            }
            buf += str( dest.cnt )
        loop
        mes buf
        return
    #global
    randomize
    bingo 10
    bingo 3
    bingo 3
    bingo 10
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4290'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4290
  :user_name: fujidig
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/21 13:17 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>乱数を発生させる関数がなかったのでそこから実装。\n</p>\n<p>HSP ( <a href=\"/web/20100606194523/http://ja.doukaku.org/comment/4289/\">#4289</a>
    ) と同じ結果になるように Visual C++ の rand と同じアルゴリズム・定数を使いました。\n   <a href=\"/web/20100606194523/http://ja.doukaku.org/comment/4289/\">#4289</a>
    と乱数の種を同じにしたら同じ結果になるでしょう。\n   （ HSP の randomize の引数、秀丸マクロの srand サブルーチンの引数 ）\n</p>\n\n\n\n\t"
  :code: |2
        call srand tickcount;
        call bingo 10;
        call bingo 3;
        call bingo 3;
        call bingo 10;
        endmacro;

    bingo:
        ##i = 0;
        while( ##i &lt; ##1 ) {
            ##dest[##i] = ##i + 1;
            ##i = ##i + 1;
        }
        ##i = 0;
        while( ##i &lt; ##1 ) {
            call rand;
            ##r = ##return % ( ##1 - ##i ) + ##i;
            ##tmp = ##dest[##r];
            ##dest[##r] = ##dest[##i];
            ##dest[##i] = ##tmp;
            ##i = ##i + 1;
        }
        ##i = 0;
        while( ##i &lt; ##1 ) {
            if ( ##i &gt; 0 ) {
                insert " ";
            }
            insert str( ##dest[##i] );
            ##i = ##i + 1;
        }
        insert "\n";
        return;

    rand:
        #rand_x = #rand_x * 214013 + 2531011;
        if ( #rand_x &lt; 0 ) {
            return ( ( #rand_x + 1 ) / 65536 - 1 ) &amp; 32767;
        }
        return #rand_x / 65536 &amp; 32767;

    srand:
        #rand_x = ##1;
        return;
  :tags: []
  :references:
    :url: /web/20100606194523/http://www001.upp.so-net.ne.jp/isaku/rand.html
    :title: 良い乱数・悪い乱数
- :id: '4528'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4528
  :user_name: ihag
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/560/
  :language: Ruby
  :time: 2007/12/01 01:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>うーん，なかなか短くならない．</p>\n\n\t"
  :code: |
    def bingo(n)
      pool, ret = (1..n).to_a, []
      ret &lt;&lt; (pool.delete_at(rand(pool.size))) until pool.empty?
      ret
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4633'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4633
  :user_name: vtwntmtn
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/380/
  :language: D
  :time: 2007/12/05 16:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">単純にシャッフルして作ります。</pre>\n\t"
  :code: |
    import std.random;

    int[] bingo(int x)
    {
            int[] xs;
            for (int i = 1; i &lt;= x; ++i) {
                    xs ~= i;
            }
            for (int i = 0; i &lt; x; ++i) {
                    uint r = rand() % x;
                    int tmp = xs[r];
                    xs[r] = xs[i];
                    xs[i] = tmp;
            }
            return xs;
    }

    /*
    import std.stdio;
    import std.string;

    void main(char[][] args)
    {
            for (int i = 1; i &lt;= 10; ++i) {
                    int[] xs = bingo(i);
                    string s = "[";
                    foreach (j; xs) {
                            s ~= toString(j) ~ ",";
                    }
                    s = s[0 .. $ - 1] ~ "]";
                    writef("%s\n", s);
            }
    }
    */
  :tags:
  - gdc0.24
  :references:
    :url: 
    :title: 
- :id: '4686'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4686
  :user_name: shiro
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/12/08 22:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  古い話へのフォローですが、ちゃんと衝突確率を計算してるページを見つけました。(タイトルだけ見るとsort_by{rand}のせいでBigDecimalに問題が生じたのかと勘違いしそうですが、単に衝突確率計算で多倍長整数演算を使いまくったというだけの話のようです。)\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100606194523/http://eigenclass.org/hiki.rb?sort_by+rand+is+biased
    :title: sort_by{rand}'s bias makes BigDecimal cry
- :id: '4730'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4730
  :user_name: vtwntmtn
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2007/12/10 18:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1&gt; c(bingo).\r\n{ok,bingo}\r\n2&gt; bingo:bingo(10).\r\n[3,1,9,2,5,10,8,4,6,7]\r\n3&gt;
    bingo:bingo(3).\r\n[2,1,3]\r\n4&gt; bingo:bingo(3).\r\n[1,3,2]\r\n5&gt; bingo:bingo(3).\r\n[1,2,3]\r\n6&gt;
    bingo:bingo(10).\r\n[10,3,5,1,4,6,2,7,8,9]\r\n</pre>\n\t"
  :code: |
    -module(bingo).
    -export([bingo/1]).

    bingo(Num) -&gt; bingo_sub(lists:seq(1, Num), Num).

    bingo_sub(List, 0) -&gt; List;
    bingo_sub(List, Num) -&gt;
        R = lists:nth(random:uniform(length(List)), List),
        L = [R | [X || X &lt;- List, X =/= R]],
        bingo_sub(L, Num - 1).
  :tags:
  - Erlang/OTP_R10B-10
  :references:
    :url: 
    :title: 
- :id: '4732'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/4732
  :user_name: pooq
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/10 18:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">「n人中m人が当選するくじ」の\r\nn=mの場合と解釈しました。\r\n   bingo
    10\r\n1 2 9 3 7 8 10 5 6 4\r\n   bingo 3\r\n3 2 1\r\n   bingo 3\r\n1 3 2\r\n   bingo
    3\r\n2 1 3\r\n   bingo 10\r\n5 1 3 7 10 2 4 9 8 6\r\n</pre>\n\t"
  :code: |
    bingo=.3 :'&gt;:y?y'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5033'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/5033
  :user_name: susu
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2007/12/28 10:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>気付くと嬉しいアルゴリズム。</p>\n\n\t"
  :code: "module Array = struct\n  include Array\n  let bury arr n len =\n    Array.blit
    arr (n+1) arr n (len-(n+1))\n    \n  let shuffle arr =\n    let len = Array.length
    arr in\n    for i = len downto 1 do\n      let v = Random.int i in\n      let
    value = arr.(v) in\n      bury arr v i;\n      Array.set arr (i-1) value;\n    done\nend;;\n\nlet
    bingo n =\n  let res = Array.init n (fun i -&gt; i+1) in\n  Array.shuffle res;\n
    \ res;;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5176'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/5176
  :user_name: saws
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/642/
  :language: Ruby
  :time: 2008/01/04 16:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>randメソッドを利用して自作してみた.</p>\n\n\t"
  :code: |
    def bingo(n)
      ary = Array.new(n){|i| i+1}
      Array.new(n){|i| ary.delete_at(rand(n-i).modulo(n-i))}
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5208'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/5208
  :user_name: naranja
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2008/01/06 13:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  D 2.008 で std.random に追加された機能を使っていますが、dmd 2.009 ではコンパイルできませんでした。\n\t"
  :code: |
    import std.stdio;
    import std.random;

    void bingo(uint n){
        uint[] a;
        a.length = n;
        foreach(i, ref e; a){
            e = i + 1;
        }
        randomShuffle(a, Random(unpredictableSeed()));
        writefln(a);
    }

    void main(){
        bingo(10);
    }
  :tags:
  - dmd2.008
  :references:
    :url: 
    :title: 
- :id: '5591'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/5591
  :user_name: g000001
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/405/
  :language: Arc
  :time: 2008/01/31 06:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Arcです。\r<br>割とCommon Lispみたいになってしまいました。\n\t"
  :code: |
    (def bingo (n)
      (let lst (iota n 1)
        (for i 0 (- n 1)
          (swap (lst i) (lst (rand n))))
        lst))

    (def iota (n (o start 0) (o step 1))
      (let res ()
        (repeat n
          (push start res)
          (++ start step))
        (rev res)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5691'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/5691
  :user_name: silverwire
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/05 16:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">バッチで書いてみました。27行目の行末に半角空白が 1つあるので注意してください。\r\n\r\n環境変数%RANDOM%は
    0~32767の範囲で乱数を返します。乱数値の一桁目( 0~9)だけを採用\r\nし、要素数 nで除算すると剰余は 0~n-1のいずれかの値になります。その値を擬似配列の\r\nインデックスとして利用するため、値に
    1を加えて補正しています。シャッフルに偏りが\r\n生じるとは思いますが、これが考えつく限界でした。\r\n\r\n  e.g.\r\n    C:\\&gt;bingo
    10\r\n    [ 10, 4, 9, 3, 1, 8, 7, 6, 2, 5 ]\r\n\r\n    C:\\&gt;bingo 3\r\n    [
    2, 1, 3 ]\r\n\r\n    C:\\&gt;bingo 3\r\n    [ 2, 3, 1 ]\r\n\r\n    C:\\&gt;bingo
    3\r\n    [ 2, 1, 3 ]\r\n\r\n    C:\\&gt;bingo 10\r\n    [ 1, 7, 10, 5, 6, 4, 8,
    2, 9, 3 ]\r\n\r\n遅延環境変数展開と環境変数%RANDOM%を利用しているので、Windows NTでは動作しません。\r\nWindows
    XPで動作を確認。</pre>\n\t"
  :code: ":: bingo.bat\n@echo off\n  setlocal enabledelayedexpansion\n    set i=0\n
    \   set j=0\n    set t=\n    set v=0\n\n    echo %1|findstr /r \"[^0-9]\" &gt;NUL
    2&gt;&amp;1\n    if %ERRORLEVEL% equ 0 (echo %0 [NUMBER] &amp; goto :EOF)\n\n
    \   :: 擬似配列を生成\n    for /l %%i in (1,1,%1) do set v_%%i=%%i\n\n    :: 値をシャッフル\n
    \   set i=1\n    :loop\n      set /a j=%RANDOM:~-1%%%%1+1\n      set v=!v_%i%!\n
    \     set v_%i%=!v_%j%!\n      set v_%j%=%v%\n      set /a i+=1\n    if %i% lss
    %1 goto loop\n\n    for /l %%i in (1,1,%1) do (\n      set t=!t!!v_%%i!\n      if
    %%i lss %1 set t=!t!, \n    )\n  endlocal &amp; echo [ %t% ]\ngoto :EOF\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5693'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/5693
  :user_name: silverwire
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/646/
  :language: 
  :time: 2008/02/06 03:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">引数( n)の桁数に応じて、乱数値から切り出す桁数を変えました。 nの値が大きい場合の\r\n偏りは軽減されたものの、ソースの見通しは悪くなったかもしれません。\r\n\r\n
    \ e.g.\r\n    5a6\r\n    &gt;     set l=0\r\n    15a17,18\r\n    &gt;     call
    :length %1 l\r\n    &gt;     echo set j=%%RANDOM:~-%l%%%&gt;_.bat\r\n    17,18c20,23\r\n
    \   &lt;     :loop\r\n    &lt;       set /a j=%RANDOM:~-1%%%%1+1\r\n    ---\r\n
    \   &gt;     :shuffle\r\n    &gt;       ::  8進数として解釈されないよう 0を加算\r\n    &gt;       call
    _.bat &amp; set /a j+=0\r\n    &gt;       set /a j=%j%%%%1+1\r\n    23c28,29\r\n
    \   &lt;     if %i% lss %1 goto loop\r\n    ---\r\n    &gt;     if %i% lss %1
    goto shuffle\r\n    &gt;     del _.bat\r\n    31a38,50\r\n    &gt; :length\r\n
    \   &gt;   setlocal\r\n    &gt;     set i=0\r\n    &gt;     set t=%1\r\n    &gt;
    \    set t=%t:\"=%\r\n    &gt; \r\n    &gt;     :loop\r\n    &gt;       set t=%t:~1%\r\n
    \   &gt;       set /a i+=1\r\n    &gt;     if not \"%t%\" == \"\" goto loop\r\n
    \   &gt;   endlocal &amp; set %2=%i%\r\n    &gt; goto :EOF\r\n\r\n# 小数が扱えないのは痛いなぁ...</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6338'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/6338
  :user_name: ytakenaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2008/05/25 23:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ランダムシャッフルならリストより配列を使った方がいいですね。理由は簡単で要素にアクセスする時間からです。</p>\n\n\t"
  :code: |
    (defun bingo(max)
      (let ((vec (make-array 0 :fill-pointer t)))
        (loop for i from 1 to max do
         (vector-push-extend i vec))
        (loop for i from max downto 1 collect
         (if (equal i 1)
             (vector-pop vec)
             (let ((loc (random i)))
               (rotatef (aref vec (1- i))
                (aref vec loc))
               (vector-pop vec))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6339'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/6339
  :user_name: ytakenaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2008/05/25 23:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>arefはsvrefより遅いのでsvref版を用意しました。</p>\n\n\t"
  :code: |
    (defun bingo-v2(max)
      (let ((vec (make-array max)))
        (loop for i from 1 to max do
         (setf (svref vec (1- i)) i))
        (loop for i from max downto 1 collect
         (if (equal i 1)
             (svref vec (1- i))
             (let ((loc (random i))
               (ii (1- i)))
               (rotatef (svref vec ii) (svref vec loc))
               (svref vec ii))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6340'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/6340
  :user_name: ytakenaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/35/
  :language: 
  :time: 2008/05/25 23:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">svref と arefの差は次のようなものです。\r\nconsingで2/3  実時間で1/2.5程度ですかね。\r\n--\r\nCL-USER&gt;
    (time (and (bingo 100000) nil))\r\nEvaluation took:\r\n  0.074 seconds of real
    time\r\n  0.056004 seconds of user run time\r\n  0.004001 seconds of system run
    time\r\n  0 calls to %EVAL\r\n  0 page faults and\r\n  3,698,800 bytes consed.\r\nNIL\r\nCL-USER&gt;
    (time (and (bingo-v2 100000) nil))\r\nEvaluation took:\r\n  0.027 seconds of real
    time\r\n  0.016001 seconds of user run time\r\n  0.0 seconds of system run time\r\n
    \ 0 calls to %EVAL\r\n  0 page faults and\r\n  2,397,456 bytes consed.\r\nNIL</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6341'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/6341
  :user_name: ytakenaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2008/05/25 23:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">最後に最適化オプションをつけて。。。bingo_v2より1/2の時間\r\nになりましたね。\r\n\r\nCL-USER&gt;
    (time (and (bingo-v3 100000) nil))\r\nEvaluation took:\r\n  0.013 seconds of real
    time\r\n  0.016001 seconds of user run time\r\n  0.0 seconds of system run time\r\n
    \ 0 calls to %EVAL\r\n  0 page faults and\r\n  2,397,536 bytes consed.\r\nNIL</pre>\n\t"
  :code: |
    (defun bingo-v3(max)
      (declare (optimize (speed 3) (debug 0) (safety 0)))
      (declare (fixnum max))
      (let ((vec (make-array max)))
        (declare (simple-vector vec))
        (loop for i from 1 to max do
         (setf (svref vec (1- i)) i))
        (loop for i from max downto 1 collect
         (if (equal i 1)
             (svref vec (1- i))
             (let ((loc (random i)) (ii (1- i)))
               (rotatef (svref vec ii) (svref vec loc))
               (svref vec ii))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6342'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/6342
  :user_name: ytakenaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/35/
  :language: 
  :time: 2008/05/25 23:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>あまりへんかしてないや。^^;</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6677'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/6677
  :user_name: nemo_kaz
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/837/
  :language: Groovy
  :time: 2008/07/06 02:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Rubyをリスペクトして書きました。\r\n----------------\r\n実行結果\r\n[5, 1, 10, 8, 2,
    7, 9, 3, 4, 6]\r\n[1, 2, 3]\r\n[2, 1, 3]\r\n[9, 4, 10, 5, 1, 7, 6, 2, 3, 8]\r\n\n\t"
  :code: "def bingo(n) {\n    def list = (1..n).toList()\n    Collections.shuffle(list)\n
    \   println list\n}\n\nbingo(10)\nbingo(3)  \nbingo(3)\nbingo(10)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8045'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/8045
  :user_name: emasaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/11/16 04:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">$ bingo 10\r\n2 10 3 5 6 4 1 8 7 9\r\n</pre>\n\t"
  :code: |
    function bingo() {
        local n=$1
        local -a array
        local -i i j tmp

        for ((i = 0; i &lt; n; i++)) {
            array[i]=$((i+1))
        }

        for ((i = 0; i &lt; n; i++)) {
            ((j = RANDOM % (i + 1),
              tmp = array[i], array[i] = array[j], array[j] = tmp))
        }

        echo ${array[@]}
    }
  :tags: []
  :references:
    :url: /web/20100606194523/http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-list/40892
    :title: '[ruby-list:40892]'
- :id: '8143'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/8143
  :user_name: cappuccino
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/549/
  :language: C
  :time: 2008/12/12 22:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    int[] bingo(int n)
    {
        Random r = new Random();
        return Enumerable.Range(1, n).OrderBy(a =&gt; r.Next()).ToArray();
    }
  :tags:
  - LINQ
  :references:
    :url: 
    :title: 
- :id: '8163'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/8163
  :user_name: taninsw
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/14 01:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Haskellは参照透明な言語なので、同じ引数に関数を束縛したら、同じ値がかえってこなければならないので、お題を満たせません。</p>\n<p>そこで乱数生成器も引数に取ることにしました。</p>\n\n\t"
  :code: |
    import Random
    import List

    randomN :: Int-&gt;StdGen -&gt;  (StdGen,[Int])
    randomN n stdGen = mapAccumL (\r lim-&gt;swapTuple (randomR (0,lim) r)) stdGen [n-1,n-2..0]
      where swapTuple (a,b) = (b,a)

    bingo ::Int-&gt;StdGen-&gt;[Int]
    bingo n stdGen = snd $ mapAccumL f [1..n] $ snd (randomN n stdGen)
      where f xs x = (deleteAt x xs,xs !! x)
            deleteAt i xs = take i xs ++ tail (drop i xs)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8230'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/8230
  :user_name: emasaka
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/12/20 15:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">GNU coreutilsのshufで。\r\n\r\n$ bingo 6\r\n2\r\n1\r\n6\r\n4\r\n5\r\n3\r\n</pre>\n\t"
  :code: |
    #!/bin/sh
    bingo() {
        seq $1 | shuf
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8494'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/8494
  :user_name: fumokmm
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/856/
  :language: Groovy
  :time: 2009/02/12 11:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">GroovyでCollections#shuffleは既出(#6677)のようなので、\r\nrubikitchさん(Ruby:#2256)のGroovy版で。\r\n実質メソッド内はワンライナー。\r\n\r\n--出力結果--\r\n[1,
    9, 3, 6, 7, 10, 2, 8, 4, 5]\r\n[2, 3, 1]\r\n[3, 2, 1]\r\n[2, 1, 4, 3, 5, 7, 10,
    8, 9, 6]\r\n</pre>\n\t"
  :code: |
    def bingo(n) {
       (1..n).toList().sort{ Math.random() }
    }
    println bingo(10)
    println bingo(3)
    println bingo(3)
    println bingo(10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '10462'
  :parent_id: '46'
  :url: http://ja.doukaku.org/comment/10462
  :user_name: gushwell
  :user_url: /web/20100606194523/http://ja.doukaku.org/user/1046/
  :language: C
  :time: 2010/04/24 19:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  アルゴリズムは、sa10i  さんとほとんど同じですが、List&lt;lint&gt;を使うようにしてみました。\n\t"
  :code: "    private static Random rnd = new Random();\n        \n    static List&lt;int&gt;
    Bingo(int n) {\n        List&lt;int&gt; list = new List&lt;int&gt;();\n        for
    ( int i = 1; i &lt;= n; i++ ) {\n            int ix = rnd.Next(i); \n            list.Insert(ix,
    i);\n        }\n        return list;\n    }\n"
  :tags: []
  :references:
    :url: 
    :title: 
