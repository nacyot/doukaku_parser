---
:id: '76'
:title: 2038年問題に配慮した「n日後」の計算
:comments:
- :id: '3722'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3722
  :user_name: にしお
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/11/06 04:50 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p><a class=\"reference\" href=\"/web/20090402141016/http://ja.doukaku.org/29/\">n日後を返す関数を返す関数</a>\nの解答の中に2038年問題を起こすコードが含まれている、という
    <a class=\"reference\" href=\"/web/20090402141016/http://ja.doukaku.org/comment/3715/\">指摘</a>
    を受けてトピックを作りました。\n指定された日時から指定された日数だけ後の日時を返す関数を作ってください。\nただし、2038年をまたぐような期間でも問題が起こらないこと、および秒数表現で4バイトを超えるような長い期間でも問題が起きないことを確認してください。</p>\n<p>サンプル:</p>\n<pre
    class=\"literal-block\">\n&gt;&gt;&gt; days_after(datetime(2037, 12, 31, 12, 34),
    500)\ndatetime.datetime(2039, 5, 15, 12, 34)\n# 2037年12月31日12時34分の500日後\n&gt;&gt;&gt;
    days_after(datetime(2037, 12, 31, 12, 34), 36500)\ndatetime.datetime(2137, 12,
    7, 12, 34)\n# 2037年12月31日12時34分の36500日後\n</pre>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3723'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3723
  :user_name: にしお
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/11/06 04:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Python標準添付のdatetimeモジュールは2038年問題を起こしません。\n日時の差分をdeltatimeオブジェクトにした上で足すだけでOKです。</p>\n<p>datetimeオブジェクトは内部で日、秒、マイクロ秒の3つの値を持つ仕組みになっています。\n参考：
    <a class=\"reference\" href=\"/web/20090402141016/http://www.python.jp/doc/2.4/lib/datetime-timedelta.html\">http://www.python.jp/doc/2.4/lib/datetime-timedelta.html</a></p>\n\n\t"
  :code: |
    &gt;&gt;&gt; def days_after(date, delta):
        from datetime import timedelta
        return date + timedelta(delta)

    &gt;&gt;&gt; days_after(datetime(2037, 12, 31, 12, 34), 500)
    datetime.datetime(2039, 5, 15, 12, 34)
    &gt;&gt;&gt; days_after(datetime(2037, 12, 31, 12, 34), 36500)
    datetime.datetime(2137, 12, 7, 12, 34)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3724'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3724
  :user_name: nobsun
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/11/06 05:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">質問でぇーす。グレゴリオ暦の3000年に約1日の誤差はどうしましょうか？</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3725'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3725
  :user_name: 匿名
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/11/06 06:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">これは，ズルですか？</pre>\n\t"
  :code: |
    &gt; as.POSIXlt(as.POSIXlt("2037-12-31 12:34:00 JST")+500*24*60*60)
    [1] "2039-05-15 12:34:00 JST"
    &gt; as.POSIXlt(as.POSIXlt("2037-12-31 12:34:00 JST")+36500*24*60*60)
    [1] "2137-12-07 12:34:00 JST"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3726'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3726
  :user_name: にしお
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/11/06 06:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">どうしたらいいですか？詳しくないので…。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3727'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3727
  :user_name: 匿名
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2007/11/06 06:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">外の as.POSIXlt は不要だった</pre>\n\t"
  :code: |
    &gt; as.POSIXlt("2037-12-31 12:34:00 JST")+500*24*60*60
    [1] "2039-05-15 12:34:00 JST"

    &gt; as.POSIXlt("2037-12-31 12:34:00 JST")+36500*24*60*60
    [1] "2137-12-07 12:34:00 JST"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3730'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3730
  :user_name: Y
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/428/
  :language: PHP
  :time: 2007/11/06 07:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">function func($date,$n){\r\n\t$date-&gt;modify('+'.$n.'
    days');\r\n\treturn $date-&gt;format(DATE_ISO8601);\r\n}\r\nという関数を、\r\necho func(new
    DateTime('2037-12-31T12:34:00+0900'),36500)\r\nのように使えば題意は満たせますが、\r\necho func(new
    DateTime('1700-01-01T00:00:00+0000'),1)\r\nで「1699-12-22T00:00:00+0000」という嘘が返ってきます。\r\n（PHP
    for Windows 5.2.3での話です。）\r\n\r\n仕方がないので、一度ユリウス日に変換して計算しました(func2)。\r\n\r\necho
    func2(2037,12,31,36500); // 12/7/2137\r\necho func2(1700,1,1,1)        // 1/2/1700\r\necho
    func2(1582,10,4,1)       // 10/15/1582\r\n\r\n1582年10月5日以降の日付はグレゴリオ暦のものとして、\r\nそれより前のものは、ユリウス暦のものとして処理しています。\r\n\r\nnが整数でない場合には対応していません。\r\n（時間は別に扱わなければなりません。）</pre>\n\t"
  :code: "function func2($year,$month,$day,$n){\n    $changeDate=JulianToJD(10,4,1582);\n
    \   \n    $jd=JulianToJD($month,$day,$year);\n    if($changeDate&lt;$jd) $jd=GregorianToJD($month,$day,$year);\n
    \   $jd+=$n;\n    \n    if($changeDate&lt;$jd) return JDToGregorian($jd);\n    else
    return JDToJulian($jd);\n}\n"
  :tags: []
  :references:
    :url: /web/20090402141016/http://codezine.jp/a/article/aid/1816.aspx
    :title: ' PHPにおける日付と時刻の混乱'
- :id: '3731'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3731
  :user_name: shiro
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/41/
  :language: Common
  :time: 2007/11/06 07:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Common Lispでは時刻は1900/1/1GMTからの秒数で表現しますが、\r\nbignumがあるので無問題。実行例はCLISPで。\r\n\r\n[2]&gt;
    (days-after 2037 12 31 12 34 500)\r\n2039 ;\r\n5 ;\r\n15 ;\r\n12 ;\r\n34\r\n[3]&gt;
    (days-after 2037 12 31 12 34 36500)\r\n2137 ;\r\n12 ;\r\n7 ;\r\n12 ;\r\n34\r\n\r\nただし、これのテストをしている時にCLISP-2.41
    on Linux/x86の問題らしきものに遭遇。\r\n2039/1/19以降のデフォルトタイムゾーンがうまく扱えてないみたい。\r\n\r\n[1]&gt;
    (encode-universal-time 0 0 0 19 1 2038)\r\n4356498600\r\n[2]&gt; (encode-universal-time
    0 0 0 18 1 2038)\r\n4356410400\r\n[3]&gt; (- 4356498600 4356410400)\r\n88200\r\n\r\nタイムゾーンを指定すれば問題は回避できました。\r\n</pre>\n\t"
  :code: |
    (defun days-after (year month day hour min offset)
      (multiple-value-bind (sec+ min+ hour+ day+ month+ year+)
          (decode-universal-time
           (+ (encode-universal-time 0 min hour day month year 0)
              (* offset 86400))
           0)
        (values year+ month+ day+ hour+ min+)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3732'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3732
  :user_name: nobsun
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/11/06 08:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">そんな誤差は2400年後ころに考えるとしましょう^^;\r\n\r\nグレゴリオ暦には誤差がないということにしてHaskellのコードを書きました。\r\n\r\n時間関連のライブラリはGHCで現時点では
    Time、System.Time、Data.Timeの3つが使えますが、\r\nData.Timeが最新のライブラリでこれを使うことが推奨されています。\r\n\r\n*Main&gt;
    :main 2037 12 31 12 34 500            -- 500日後\r\n2039-05-15 12:34\r\n*Main&gt;
    :main 2037 12 31 12 34 36500          -- 36500日後\r\n2137-12-07 12:34\r\n*Main&gt;
    :main 2037 12 31 12 34 2100000000000  -- 2兆1千億日後 弥勒菩薩降臨後？\r\n5749606752-09-04
    12:34\r\n\r\n\r\n</pre>\n\t"
  :code: "import Data.Time\nimport System.Environment \nimport Text.Printf\n\nmain
    = getArgs &gt;&gt;= \\ [y,m,d,h,mn,ds] \n               -&gt; putStrLn (unwords
    [ show $ addDays (read ds) \n                                           $ fromGregorian
    (read y) (read m) (read d)\n                                    , printf \"%02s:%02s\"
    h mn\n                                    ])\n"
  :tags:
  - Data.Time
  - ghc-6.8.1
  :references:
    :url: 
    :title: 
- :id: '3735'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3735
  :user_name: yuin
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/11/06 13:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ScalaもJAVAのCalendarおよびDateを用いるので問題ありません。</pre>\n\t"
  :code: |
    import java.util.Calendar
    import java.text.SimpleDateFormat

    def days_after(c:Calendar, n:int) = {
      val r = c.clone.asInstanceOf[Calendar]
      r.add(Calendar.DATE, n); r
    }


    val formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss Z")
    val now = Calendar.getInstance
    now.set(2037, 12-1, 31, 12, 34)
    println(formatter.format(days_after(now, 500).getTime))
    // =&gt; 2039/05/15 12:34:47 +0900
    println(formatter.format(days_after(now, 36500).getTime))
    // =&gt; 2137/12/07 12:34:07 +0900
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3738'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3738
  :user_name: sumim
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/06 15:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk は、無限多倍長整数が組み込みということもあり、問題ありません。\n\t"
  :code: |
    | date |
    date := DateAndTime
        year: 2037 month: 12 day: 31
        hour: 12 minute: 34 second: 0
        offset: 0 asDuration.
    date + 500 days.   "=&gt; 2039-05-15T12:34:00+00:00 "
    date + 36500 days   "=&gt; 2137-12-07T12:34:00+00:00 "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '3739'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3739
  :user_name: 匿名
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/11/06 16:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Javaでは時間は1970年1月1日0時0分GMTからのミリ秒をlongで表現します。したがって2038年問題は発生しません。\n\t"
  :code: |
    import java.util.Date;
    import java.util.Calendar;

    public class Sample {
        public static Date daysAfter(Date origin, int offset) {
            Calendar c = Calendar.getInstance();
            c.setTime(origin);
            c.add(Calendar.DATE, offset);
            return c.getTime();
        }

        public static void main(String[] args) {
            Calendar c = Calendar.getInstance();
            c.set(2037, 12 - 1, 31, 12, 34, 0);
            System.out.println(daysAfter(c.getTime(), 500));
            System.out.println(daysAfter(c.getTime(), 36500));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3740'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3740
  :user_name: shiro
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/11/06 22:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Gaucheはdateオブジェクト自体に特に制限はありませんが、\r\njulian-dayへの変換時に組込みのtimeオブジェクトを経由していて、\r\n最新バージョンでもそこに2038年問題が残っていました。\r\n悔しいので組込みtimeオブジェクトも秒数を64bitで表現するように変更しました。\r\nおよそ3000億年後に桁溢れするのでご注意ください。\r\n\r\n以下、CVS
    HEADでの実行例:\r\ngosh&gt; (days-after (make-date 0 0 34 12 31 12 2037 -36000) 500)\r\n#&lt;date
    2039/05/15 12:34:00.000000000 (-36000)&gt;\r\ngosh&gt; (days-after (make-date
    0 0 34 12 31 12 2037 -36000) 36500)\r\n#&lt;date 2137/12/07 12:34:00.000000000
    (-36000)&gt;\r\n\r\n(-36000は私の環境でのタイムゾーンオフセットで、単に表示を見やすく\r\nするために与えています。)</pre>\n\t"
  :code: |
    (use srfi-19)

    (define (days-after date offset)
      (julian-day-&gt;date (+ (date-&gt;julian-day date) offset)))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3747'
  :parent_id: '76'
  :url: http://ja.doukaku.org/comment/3747
  :user_name: shin
  :user_url: /web/20090402141016/http://ja.doukaku.org/user/110/
  :language: Perl
  :time: 2007/11/07 12:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PerlのDateTimeも問題なし\r\n\r\nprint days_after(\r\n
    \   DateTime-&gt;new(\r\n        year      =&gt; 2037,\r\n        month     =&gt;
    12,\r\n        day       =&gt; 31,\r\n        hour      =&gt; 23,\r\n        minute
    \   =&gt; 59,\r\n        second    =&gt; 59,\r\n    ),\r\n    36500\r\n)-&gt;strftime('%F
    %T');\r\n#2137-12-07 23:59:59\r\n\r\nprint days_after(\r\n    DateTime-&gt;new(\r\n
    \       year      =&gt; 2037,\r\n        month     =&gt; 12,\r\n        day       =&gt;
    31,\r\n        hour      =&gt; 23,\r\n        minute    =&gt; 59,\r\n        second
    \   =&gt; 59,\r\n    ),\r\n    73000\r\n)-&gt;strftime('%F %T'), \"\\n\";\r\n#2237-11-13
    23:59:59\r\n</pre>\n\t"
  :code: |
    #!/usr/local/bin/perl

    use strict;
    use warnings;

    use DateTime;

    print days_after(
        DateTime-&gt;new(
            year      =&gt; 2037,
            month     =&gt; 12,
            day       =&gt; 31,
            hour      =&gt; 23,
            minute    =&gt; 59,
            second    =&gt; 59,
        ),
        36500
    )-&gt;strftime('%F %T'), "\n";

    print days_after(
        DateTime-&gt;new(
            year      =&gt; 2037,
            month     =&gt; 12,
            day       =&gt; 31,
            hour      =&gt; 23,
            minute    =&gt; 59,
            second    =&gt; 59,
        ),
        73000
    )-&gt;strftime('%F %T'), "\n";

    sub days_after
    {
        my ( $dt, $delta ) = @_;
        return $dt-&gt;add( days =&gt; $delta );
    }
  :tags: []
  :references:
    :url: 
    :title: 
