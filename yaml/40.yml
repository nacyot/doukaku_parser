---
:id: '40'
:title: 与えられた数字のケタ数
:comments:
- :id: '3396'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3396
  :user_name: susu
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/218/
  :language: 
  :time: 2007/08/04 15:09 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre>\r\n与えられた数字のケタ数と、最大桁の位を求めてください。\r\n数字が2469なら4桁で最大桁は1000の位です。\r\n600なら3と100、1なら1と1です。\r\n</pre>\r\n<p>\r\nこのお題はsusuさんの投稿です。ご投稿ありがとうございます。\r\n\t</p>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3875'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3875
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/11 17:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  ワンライナー\r\n\t"
  :code: |
    n=2649;keta=文字数(INT(n));kurai=10^(keta-1);表示("桁数:{keta}{~}最大桁の位:{kurai}")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1862'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1862
  :user_name: authorNari
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/199/
  :language: Ruby
  :time: 2007/08/05 06:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  変数切りすぎかなぁ\r\n\t"
  :code: |
    def keta_kurai(num)
      keta = num.abs.truncate.to_s.length
      kurai = "1"
      kurai += "0" * (keta-1) if keta &gt; 1
      return keta, kurai
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2131'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2131
  :user_name: yagihiro
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/364/
  :language: xtal
  :time: 2007/08/14 02:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">これくらいでしょうか。</pre>\r\n\t"
  :code: |
    k: fun(n) {
      value: 1;
      (n - 1).times.each { value *= 10; }
      return value;
    }

    kk: fun(n) {
      len: math::abs(n).to_i.to_s.size;
      return len, k(len);
    }

    kk(123).p; //=&gt; [3,100]
    kk(-123).p; //=&gt; [3,100]
    kk(12345).p; //=&gt; [5,10000]
    kk(1).p; //=&gt; [1,1]
    kk(1.001).p; //=&gt; [1,1]
    kk(-1.001).p; //=&gt; [1,1]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1994'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1994
  :user_name: nobusue
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/365/
  :language: Groovy
  :time: 2007/08/07 17:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">文字列に変換してます。\r\n負数や小数にも対応（できてるはず）。\r\n</pre>\r\n\t"
  :code: "def digits(input) {\n\tinput = Math.round( Math.abs(input) )\n\tcount =
    input.toString().size()\n\tunit = 10**(count-1)\n\t[count, unit]\n}\n\nprintln
    digits(2469)\nprintln digits(600)\nprintln digits(1)\n\nprintln digits(1.1)\nprintln
    digits(-234)\nprintln digits(0)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2113'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2113
  :user_name: susu
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/218/
  :language: Python
  :time: 2007/08/13 14:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">定義の曖昧な問題を作ったお詫びとして、小数と複素数にも対応してみました(仮)。\r\nあと文字列って元からほぼリストなんですね。わざわざlist()で分解してました。</pre>\r\n\t"
  :code: "def float_place(num):\n\tif num&lt;0 : num=num*-1\n\titem = str(num)\n\tif
    isinstance(num,float):\n\t\ttry:\tpoint = item.index(\".\")\n\t\texcept:\tpoint
    = item.index(\",\")\n\t\treturn ( len(item[:point]),len(item[point+1:]) )\n\telse:\n\t\treturn
    len(item),1\n\ndef place(num):\n\t\"とりあえず小数の0も1ケタで。\"\n\tres = {}\n\tif isinstance(num,complex):\n\t\tnum2=
    num.imag\n\t\tnum = num.real\n\t\tres['complex'],res['cfloat'] = float_place(num2)\n\t\n\tres['int'],res['float']
    = float_place(num)\n\tfor i in res:#最大桁の位を追加\n\t\tres[i] = (res[i],10**(res[i]-1))\t\n\treturn
    res\n\nplace(-1234.5-12.345j)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3536'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3536
  :user_name: Yusuke.M
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/13/
  :language: FORTRAN
  :time: 2007/10/27 07:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">なんかFortranがようやく分かってきた。</pre>\r\n\t"
  :code: "    INTEGER i\r\n    INTEGER keta\r\n\r\n    read(*, *) i\r\n    keta =
    INT(ALOG10(FLOAT(i))) + 1\r\n    write(*, *) '桁数:', keta, ' 最大桁:', 10 ** (keta
    - 1)\r\n\r\n    end\r\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2477'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2477
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/08/24 08:41 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">無駄な括弧を取り除いて63バイトにしてみました。</pre>\r\n\t"
  :code: |
    import math;f=lambda n:lambda x=int(math.log(n,10)):(1+x,10**x)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1895'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1895
  :user_name: imaiworks
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/350/
  :language: PHP
  :time: 2007/08/06 02:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">例えば1.23の最大桁の位を1とするのか1.00とするのか、、\r\n多分1だと思うのですが、とりあえず両方ともできるようにしてみました。\r\nあと、powを使うのが一番楽ですが、php（？）らしく数値を文字列操作する妙な方法でやってみました。\r\n\r\n//1.23
    の入力で最大桁数を 1と表示するなら\r\n1-&gt;     1 1\r\n600-&gt;   3 100\r\n9999-&gt;  4 1000\r\n0-&gt;
    \    1 1\r\n-1-&gt;    1 1\r\n-600-&gt;  3 100\r\n-9999-&gt; 4 1000\r\n1.23-&gt;
    \ 4 1\r\n-9.99-&gt; 4 1\r\nabc-&gt;   error \r\n\r\n//1.23 の入力で最大桁数を 1.00と表示するなら\r\n1-&gt;
    \    1 1\r\n600-&gt;   3 100\r\n9999-&gt;  4 1000\r\n0-&gt;     1 1\r\n-1-&gt;
    \   1 1\r\n-600-&gt;  3 100\r\n-9999-&gt; 4 1000\r\n1.23-&gt;  4 1.00\r\n-9.99-&gt;
    4 1.00\r\nabc-&gt;   error </pre>\r\n\t"
  :code: "&lt;?php\n\nfunction check($input)\n{\n\t//入力が数値以外ならエラー\n\tif(!is_numeric($input))\n\t{\n\t\treturn
    array(\"error\");\n\t}\n\n\t//０より小さい（マイナスだったら）+にする\n\tif($input&lt;0)\n\t{\n\t\t$input=$input*-1;\n\t}\n\n//1.23
    の入力で最大桁数を 1.00と表示するなら\n//\t//全ての数値を0にする\n//\t$max_kurai=ereg_replace(\"[0-9]\",\"0\",$input);\n//\t//先頭文字を切り捨てた文字列の先頭に'1'をつなげる\n//\t$max_kurai=\"1\".substr($max_kurai,1,10000000000000);\n\n//1.23
    の入力で最大桁数を 1と表示するなら\n\t//全ての桁を9にする\n\t$max_kurai=ereg_replace(\"[0-9]\",\"9\",(int)$input);\n\t//1を足して10で割る
    \ 9999 -&gt; 10000 -&gt; 1000\n\t$max_kurai=($max_kurai+1)/10;\t\n\n//1.23 の入力で最大桁数を
    1と表示するなら powを使う\n//\t$max_kurai=pow(10,strlen((int)$input)-1);\n\n\n\treturn array(strlen($input),$max_kurai);\n}\n\necho
    \"&lt;pre&gt;\";\n$target=1;\t$ret=check($target);\techo $target.\"-&gt;\\t\".$ret[0].\"
    \".$ret[1].\"\\n\";\n$target=600;\t$ret=check($target);\techo $target.\"-&gt;\\t\".$ret[0].\"
    \".$ret[1].\"\\n\";\n$target=9999;\t$ret=check($target);\techo $target.\"-&gt;\\t\".$ret[0].\"
    \".$ret[1].\"\\n\";\n$target=0;\t$ret=check($target);\techo $target.\"-&gt;\\t\".$ret[0].\"
    \".$ret[1].\"\\n\";\n                                                                         \n$target=-1;\t$ret=check($target);\techo
    $target.\"-&gt;\\t\".$ret[0].\" \".$ret[1].\"\\n\";\n$target=-600;\t$ret=check($target);\techo
    $target.\"-&gt;\\t\".$ret[0].\" \".$ret[1].\"\\n\";\n$target=-9999;\t$ret=check($target);\techo
    $target.\"-&gt;\\t\".$ret[0].\" \".$ret[1].\"\\n\";\n                                                                         \n$target=9.99;\t$ret=check($target);\techo
    $target.\"-&gt;\\t\".$ret[0].\" \".$ret[1].\"\\n\";\n$target=-9.99;\t$ret=check($target);\techo
    $target.\"-&gt;\\t\".$ret[0].\" \".$ret[1].\"\\n\";\n                                                                         \n$target=\"abc\";\t$ret=check($target);\techo
    $target.\"-&gt;\\t\".$ret[0].\" \".$ret[1].\"\\n\";\n\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6633'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/6633
  :user_name: turugina
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/07/01 03:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">負数にも対応させてみました。\r\n\r\n出力結果：\r\n2469 は 4 桁で、最大桁は
    1000 の位です。\r\n600 は 3 桁で、最大桁は 100 の位です。\r\n1 は 1 桁で、最大桁は 1 の位です。\r\n-65536 は 5
    桁で、最大桁は -10000 の位です。</pre>\r\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:fn="http://www.w3.org/2005/xpath-functions"
      &gt;

      &lt;xsl:output method="text" encoding="sjis" /&gt;

      &lt;xsl:template match="/" &gt;
        &lt;xsl:call-template name="digit"&gt;
          &lt;xsl:with-param name="n" select="2469" /&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:call-template name="digit"&gt;
          &lt;xsl:with-param name="n" select="600" /&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:call-template name="digit"&gt;
          &lt;xsl:with-param name="n" select="1" /&gt;
        &lt;/xsl:call-template&gt;
        &lt;xsl:call-template name="digit"&gt;
          &lt;xsl:with-param name="n" select="-65536" /&gt;
        &lt;/xsl:call-template&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template name="digit"&gt;
        &lt;xsl:param name="n" as="xs:integer" /&gt;

        &lt;xsl:variable name="is_negative" as="xs:boolean"
          select="$n&amp;lt;0" /&gt;

        &lt;xsl:variable name="n_" as="xs:string"&gt;
          &lt;xsl:choose&gt;
            &lt;xsl:when test="$is_negative"&gt;
              &lt;xsl:value-of select="xs:string(-1 * $n)" /&gt;
            &lt;/xsl:when&gt;
            &lt;xsl:otherwise&gt;
              &lt;xsl:value-of select="xs:string($n)" /&gt;
            &lt;/xsl:otherwise&gt;
          &lt;/xsl:choose&gt;
        &lt;/xsl:variable&gt;

        &lt;xsl:value-of select="$n" /&gt;
        &lt;xsl:text&gt; は &lt;/xsl:text&gt;
        &lt;xsl:value-of select="string-length($n_)" /&gt;
        &lt;xsl:text&gt; 桁で、最大桁は &lt;/xsl:text&gt;
        &lt;xsl:if test="$is_negative"&gt;
          &lt;xsl:text&gt;-&lt;/xsl:text&gt;
        &lt;/xsl:if&gt;
        &lt;xsl:text&gt;1&lt;/xsl:text&gt;
        &lt;xsl:for-each select="1 to string-length($n_)-1"&gt;
          &lt;xsl:text&gt;0&lt;/xsl:text&gt;
        &lt;/xsl:for-each&gt;
        &lt;xsl:text&gt; の位です。&amp;#xA;&lt;/xsl:text&gt;
      &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1830'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1830
  :user_name: ところてん
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/166/
  :language: Python
  :time: 2007/08/04 16:13 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">何も考えずに超簡単に。\r\n(4, 1000)\r\n(3, 100)\r\n(8,
    10000000)\r\n(6, 100000)\r\n(7, 1000000)\r\n(1, 1)</pre>\r\n\t"
  :code: |
    def getKetaAndKurai(num):
        s = str(num)
        keta = len(s)
        kurai = int("1" + "0" * (keta - 1))

        return (keta, kurai)

    print getKetaAndKurai(2469)
    print getKetaAndKurai(600)
    print getKetaAndKurai(12378990)
    print getKetaAndKurai(414879)
    print getKetaAndKurai(3141592)
    print getKetaAndKurai(1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1869'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1869
  :user_name: jz5
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/05 10:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">整数限定にしておきました。\r\n</pre>\r\n\t"
  :code: |
    Public Sub foo(ByVal number As Integer)

        Dim length As Integer = number.ToString.Replace("-", "").Length
        Console.WriteLine(length)
        Console.WriteLine(10 ^ (length - 1))

    End Sub
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3897'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3897
  :user_name: uho
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/498/
  :language: C
  :time: 2007/11/12 08:13 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    static void Keta(int n)
    {
        int l = n.ToString().Length;
        Console.WriteLine("桁：" + l + "最大桁：" + Math.Pow(10, l - 1));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1853'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1853
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/08/05 01:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  とりあえず。\r\n\t"
  :code: |
    f = lambda i: (len(str(i)), 10 ** (len(str(i)) - 1))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5564'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/5564
  :user_name: mc
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/405/
  :language: Arc
  :time: 2008/01/30 13:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Arcです。\r<br>リストで結果を返しています。\r<br>もしかして今のところArcに多値はないのかしら…。\r<br>実行結果:\r<br>(fig 20070130) ;=&gt; (8 10000000)\r<br>(fig 1)        ;=&gt; (1 1)\r<br>(fig 0)        ;=&gt; (1 1)\r<br>(fig -20070130);=&gt; (8 10000000)\r\n\t"
  :code: |
    (def fig (n)
      (let len (len (string (abs n)))
        `(,len ,(expt 10 (- len 1)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2060'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2060
  :user_name: aplo
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/267/
  :language: C
  :time: 2007/08/10 16:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  ううむｗ　なぜかpow関数を自作したくなり、作ってしまったｗ　あまり良くないコードかもしれませんが、みせしめのため投稿(ﾉ∀｀)\r\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\nint pow();\n\nint main(int
    argc, char **argv)\n{\n\tif (argc != 2) {\n\t\tfprintf(stderr, \"error\\n\");\n\t\texit(1);\n\t}\n\tint
    i;\n\tint digit = 0;\n\n\ti = atoi(argv[1]);\t\n\tif (i &lt; 0)\n\t\ti = -i;\n\t\n\twhile
    (i &gt; 0) {\n\t\ti /= 10;\n\t\tdigit++;\n\t}\n\tprintf(\"[%d, %d]\\n\", digit,
    pow(10, (digit - 1)));\n\texit(1);\n}\n\nint pow(int x, int y)\n{\n\tint t = 1;\n\twhile
    (y &gt; 0) {\n\t\tt *= x;\n\t\ty--;\n\t}\n\treturn t;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2058'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2058
  :user_name: カノエ
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/376/
  :language: SQL
  :time: 2007/08/10 14:00 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">@numが0の時は| 1 | 1 |\r\n@numが-2469の時は| 4 |
    1000 |\r\n@numが10.25なら| 2 | 10 |\r\nになります。</pre>\r\n\t"
  :code: |
    set @num = 2469;
    select
      l as '桁'
    , rpad('1', l, '0') as '最大位'
    from (
      select
        length(
          floor(case when @num &lt; 0 then @num * -1 else @num end)
        ) as l
    ) as d
    ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2123'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2123
  :user_name: shimakuma
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/08/13 17:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  有効桁数を求めるようにしてみた…が、やり方がかなりキタナイ。\r\n\t"
  :code: "function doukaku40(n){\n\tvar digit, rnmax, e;\n\tn = n.toString().replace(/e.*/,
    function($){ e = $ });\n\tdigit = n.replace(/^[-0.]+|\\./g, \"\").length;\n\trnmax
    = parseFloat(e ? \"1\"+ e\n\t\t: n.replace(/^(-?[0.]*)./g, \"$1@\").replace(/[1-9]/g,
    \"0\").replace(/@/, \"1\"));\n\treturn [digit, rnmax];\n}\n(function(f, a){\n\tfor(var
    s = \"\", i = 0, l = a.length; i &lt; l; i++)\n\t\ts += a[i] +\"\\n =&gt; \"+
    f(a[i]) + \"\\n\\n\";\n\tthis.WSH ? WSH.echo(s) : alert(s);\n})(doukaku40, [-9,
    8.7, 0.0605, 4300e+21, 0]);\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1879'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1879
  :user_name: naoya_t
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/348/
  :language: Scheme
  :time: 2007/08/05 15:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">awkで書いたやつと同じやり方ですが\r\n\r\ngosh&gt; (keta+kurai
    12345678)\r\n8\r\n10000000</pre>\r\n\t"
  :code: "(define (keta+kurai n)\n  (let1 keta (string-length (number-&gt;string n))\n\t\t(values
    keta (expt 10 (- keta 1)))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1887'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1887
  :user_name: 時間蠅
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/250/
  :language: Matlab
  :time: 2007/08/05 18:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">常用対数でやってみました。\r\n\r\n使用例：\r\n&gt;&gt; [d,m]
    = doukaku40(321321)\r\nd =\r\n     6\r\nm =\r\n      100000\r\n</pre>\r\n\t"
  :code: |
    function [d,m] = doukaku40(n)
      d = floor(log10(n)) + 1;
      m = 10^(d-1);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1838'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1838
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/08/04 17:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  そこそこ丁寧に\r\n\t"
  :code: "function figure(x){\n\tvar len=Math.abs(parseInt(x,10)).toString().length;\n\treturn
    [len,Math.pow(10,len-1)];\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1867'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1867
  :user_name: odz
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/212/
  :language: Python
  :time: 2007/08/05 09:57 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  0とか負数のときはどうすればいいんだろう。適当に処理しておいたけど。\r\n\t"
  :code: "#!/usr/bin/env python                                                                                                                                                            \n#
    -*- coding: utf-8 -*-                                                                                                                                                          \n\nimport
    sys\n\ndef digits(n):\n    \"\"\"                                                                                                                                                                          \n
    \   returns count of digits and order of most siginificant digit.                                                                                                                \n
    \                                                                                                                                                                                \n
    \   &gt;&gt;&gt; digits(2469)                                                                                                                                                             \n
    \   (4, 1000)                                                                                                                                                                    \n
    \                                                                                                                                                                                \n
    \   &gt;&gt;&gt; digits(600)                                                                                                                                                              \n
    \   (3, 100)                                                                                                                                                                     \n
    \                                                                                                                                                                                \n
    \   &gt;&gt;&gt; digits(1)                                                                                                                                                                \n
    \   (1, 1)                                                                                                                                                                       \n
    \                                                                                                                                                                                \n
    \   &gt;&gt;&gt; digits(0)                                                                                                                                                                \n
    \   (1, 1)                                                                                                                                                                       \n
    \                                                                                                                                                                                \n
    \   &gt;&gt;&gt; digits(-100)                                                                                                                                                             \n
    \   (3, 100)                                                                                                                                                                     \n
    \   \"\"\"\n    if n &lt; 0:\n        n = -n\n    s = str(n)\n    return (len(s),
    10 ** (len(s) - 1))\n\ndef _test():\n    import doctest\n    doctest.testmod()\n\nif
    __name__ == '__main__':\n    _test()\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1884'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1884
  :user_name: minekoa
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/337/
  :language: Smalltalk
  :time: 2007/08/05 17:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  VisualWorks で。\r\n\r\n作った後 sumim さんのをみて、そうだ、文字列にして文字数数えればいいんじゃん...
    と 自分の頭の固さにガッカリです。\r\n\r\n\r\n\t"
  :code: "| getDigitsAndPlace |\ngetDigitsAndPlace :=\n    [ :var | \n        | func
    |\n        func := [ :x :d |\n                    (10 ** d) &lt;= x\n                        ifTrue:
    [func value: x value: d + 1]\n                        ifFalse: [ Array with: d
    with: 10 ** (d-1)]].\n        func value: var value: 0].\n\n\nTranscript cr; show:
    (getDigitsAndPlace value: 2649) printString;\n           cr; show: (getDigitsAndPlace
    value: 1) printString;\n           cr; show: (getDigitsAndPlace value: 600) printString\n\n\"==
    結果 ==\n#(4 1000)\n#(1 1)\n#(3 100)\n\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1925'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1925
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/06 09:38 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\r\n\t  <pre class=\"compact\">&gt;og使うのは、誤差が入るので、ループでカウントすべき\r\n\r\nなるほど。\r\n\r\nlog10の誤差で答えが間違いになる例を調べてみました。\r\n\r\n&gt;&gt;&gt;
    x = 999999999999999\r\n&gt;&gt;&gt; log10(x) + 1\r\n16.0\r\n&gt;&gt;&gt; len(str(x))\r\n15\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8170'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/8170
  :user_name: taninsw
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/14 08:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>たんじゅんに。</p>\n\r\n\t"
  :code: |
    answer n = let x = (length.show) n in (x,10^(x-1))

    {-
    *Main&gt; answer 2469
    (4,1000)
    *Main&gt; answer 600
    (3,100)
    *Main&gt; answer 1
    (1,1)
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1893'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1893
  :user_name: cats
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/172/
  :language: C
  :time: 2007/08/06 01:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  log使うのは、誤差が入るので、ループでカウントすべきですが、、、\r\n\t"
  :code: |
    using System;
    class Program
    {
      static void Main()
      {
        ShowDigit(2469);
        ShowDigit(600);
        ShowDigit(1);
      }
      static void ShowDigit(int k)
      {
        int n = (int)Math.Log10(k);
        Console.WriteLine("{0} {1}", n + 1, Math.Pow(10, n));
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1819'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1819
  :user_name: ココサブ
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/08/04 15:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  0が入力されたときは、\r\nケタ数1、最大桁の位1で良かったでしょうか。\r\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;math.h&gt;

    int main()
    {
        unsigned long input_data;
        int           digit;

        printf("正の整数を入力してください : ");
        scanf("%ld", &amp;input_data);

        /* 0と入力されたとき対策 */
        if (input_data != 0) {
            digit = 0;
        }
        else {
            digit = 1;
        }

        while (input_data &gt; 0) {
            input_data /= 10;
            digit++;
        }

        printf("ケタ数     : %d\n", digit);
        printf("最大桁の位 : %d\n", (int)pow(10, digit-1));

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1842'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1842
  :user_name: yattom
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/335/
  :language: awk
  :time: 2007/08/04 17:55 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">ex) \r\n&gt; gawk -fketa.awk 16\r\n2 10\r\n\r\n&gt;gawk
    -fketa.awk 00065536\r\n5 10000\r\n\r\n数字の先頭に０がついていない前提なら４行目は不要です。</pre>\r\n\t"
  :code: "BEGIN {\n\tvalue = ARGV[1]\n\n\tvalue = gensub(/^0*([0-9]+)$/, \"\\\\1\",
    \"\", value)\n\tketa = length(value)\n\tmax = \"1\"\n\tfor(i = 0; i &lt; keta
    - 1; i++) { max = max \"0\" }\n\tprint keta, max\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2035'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2035
  :user_name: rubikitch
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/08/08 17:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    def keta(n)
      len = n.abs.to_i.to_s.length
      [len, 10**(len-1)]
    end
    keta 2469                       # =&gt; [4, 1000]
    keta 600                        # =&gt; [3, 100]
    keta 1.1                        # =&gt; [1, 1]
    keta 0                          # =&gt; [1, 1]
    keta(-2469)                      # =&gt; [4, 1000]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2078'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2078
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/12 14:37 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\r\n\t  <pre class=\"compact\">上のmath.log10(n)を使う例が遅いのは\r\nmath.log10の名前解決が遅いせい。\r\nfrom
    math import log10すれば\r\nほとんど差がなくなる。5～10%程度\r\nlog10を使った方が速いように見える。\r\n\r\n# 文字列版\r\n&gt;&gt;&gt;
    timeit.Timer(stmt=\"len(str(n))\", setup=\"n=99999\")\r\n&lt;timeit.Timer instance
    at 0x01F0F030&gt;\r\n&gt;&gt;&gt; _.repeat(3, 10000)\r\n[0.012711112736724317,
    0.013860979554010555, 0.012841296877013519]\r\n\r\n# from math import log10版\r\n&gt;&gt;&gt;
    timeit.Timer(stmt=\"int(log10(n)) + 1\", setup=\"n=99999\\nfrom math import log10\")\r\n&lt;timeit.Timer
    instance at 0x01F04C38&gt;\r\n&gt;&gt;&gt; _.repeat(3, 10000)\r\n[0.012481753976317123,
    0.012962541310116649, 0.012383976194541901]\r\n\r\n# math.log10版\r\n&gt;&gt;&gt;
    timeit.Timer(stmt=\"int(math.log10(n)) + 1\", setup=\"n=99999\\nimport math\")\r\n&lt;timeit.Timer
    instance at 0x01F04968&gt;\r\n&gt;&gt;&gt; _.repeat(3, 10000)\r\n[0.014904128882335499,
    0.014736509794602171, 0.015551417862297967]\r\n\r\nnがもっと大きくなると\r\nlog10を使った方が速いというのが\r\nはっきりしてくる。10桁20%くらい高速。\r\n\r\n#
    文字列版\r\n&gt;&gt;&gt; timeit.Timer(stmt=\"len(str(n))\", setup=\"n=9999999999\")\r\n&lt;timeit.Timer
    instance at 0x01F048A0&gt;\r\n&gt;&gt;&gt; _.repeat(3, 10000)\r\n[0.013039087381912395,
    0.01360061127343215, 0.013827735063387081]\r\n\r\n# log10版\r\n&gt;&gt;&gt; timeit.Timer(stmt=\"int(log10(n))
    + 1\", setup=\"\"\"n=9999999999\r\nfrom math import log10\"\"\")\r\n&lt;timeit.Timer
    instance at 0x01F16C88&gt;\r\n&gt;&gt;&gt; _.repeat(3, 10000)\r\n[0.011165944248205051,
    0.011353677633451298, 0.011277131590759382]</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5173'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/5173
  :user_name: saws
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/642/
  :language: Ruby
  :time: 2008/01/04 13:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>文字列に変換しない方針でやってみた.\n正負の有理数なら判定可能.</p>\n\r\n\t"
  :code: |
    N = 2000
    i = 0
    break if eval("10**#{N.abs &gt; 1 ? '1' : '0'}*10**(i#{N.abs &gt; 1 ? '+= 1) &gt;' : '-= 1) &lt;='}#{'-1*' if N &lt; 0}N") while 1
    p [i, 10**i]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1829'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1829
  :user_name: nkmrtks
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/155/
  :language: Common
  :time: 2007/08/04 16:09 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">いかんいかん。端折り過ぎたorz\r\n\r\n(figure 2469)\r\n
    =&gt; 4\r\n =&gt; 1000\r\n\r\n(figure 600)\r\n =&gt; 3\r\n =&gt; 100\r\n\r\n(figure
    1)\r\n =&gt; 1\r\n =&gt; 1\r\n\r\n(figure 0)\r\n =&gt; 1\r\n =&gt; 1\r\n\r\n(figure
    -2469)\r\n =&gt; 4\r\n =&gt; 1000</pre>\r\n\t"
  :code: |
    (defun figure (n)
      (cond ((zerop n) (values 1 1))
            (t (let ((fig (ceiling (log (abs n) 10))))
                 (if (zerop fig)
                     (values 1 1)
                   (values fig (expt 10 (1- fig))))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2093'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2093
  :user_name: ether
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/96/
  :language: 
  :time: 2007/08/13 03:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">import の書き方で速度に違いが出るというのは知りませんでした。面白いですね。\r\n\r\nで、食い下がるというつもりではないのですが、私の前述の環境だと以下のような感じです。\r\n\r\n&gt;&gt;&gt;
    import timeit\r\n&gt;&gt;&gt; str_small = timeit.Timer(stmt=\"len(str(n))\", setup=\"n=99999\")\r\n&gt;&gt;&gt;
    log_small = timeit.Timer(stmt=\"int(log10(n)) + 1\", setup=\"n=99999\\nfrom math
    import log10\")\r\n&gt;&gt;&gt; str_big = timeit.Timer(stmt=\"len(str(n))\", setup=\"n=9999999999\")\r\n&gt;&gt;&gt;
    log_big = timeit.Timer(stmt=\"int(log10(n)) + 1\", setup=\"\"\"n=9999999999\r\n...
    from math import log10\"\"\")\r\n&gt;&gt;&gt;\r\n&gt;&gt;&gt; str_small.repeat(3,
    10000)\r\n[0.34358906745910645, 0.34150815010070801, 0.3414301872253418]\r\n&gt;&gt;&gt;
    log_small.repeat(3, 10000)\r\n[0.38066387176513672, 0.35846900939941406, 0.35613012313842773]\r\n&gt;&gt;&gt;
    str_big.repeat(3, 10000)\r\n[0.22233796119689941, 0.22414898872375488, 0.22557210922241211]\r\n&gt;&gt;&gt;
    log_big.repeat(3, 10000)\r\n[0.30865693092346191, 0.30836606025695801, 0.31038713455200195]\r\n\r\n#2073
    \ のコードを from math ... で書き換えても依然 str 版のほうが若干高速でした。\r\n理由を説明しろといわれると割と困りますが…プロセッサによって違うんでしょうかね。\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5677'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/5677
  :user_name: silverwire
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/04 15:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">「文字列の反転」でバッチによる文字列長の算出方法を書いたので、それを応用しました。\r\n\r\n念のため、引数が数値かどうかチェックしています。加えて、負の整数にも対応しました。\r\n\r\n
    \ e.g.\r\n    C:\\&gt;figure 1000\r\n    数字の桁数 : 4\r\n    最大桁の位 : 1000\r\n\r\n
    \   C:\\&gt;figure 100\r\n    数字の桁数 : 3\r\n    最大桁の位 : 100\r\n\r\n    C:\\&gt;figure
    10\r\n    数字の桁数 : 2\r\n    最大桁の位 : 10\r\n\r\n    C:\\&gt;figure 1\r\n    数字の桁数
    : 1\r\n    最大桁の位 : 1\r\n\r\n    C:\\&gt;figure -1\r\n    数字の桁数 : 1\r\n    最大桁の位
    : 1\r\n\r\n    C:\\&gt;figure -10\r\n    数字の桁数 : 2\r\n    最大桁の位 : 10\r\n\r\n    C:\\&gt;figure
    -100\r\n    数字の桁数 : 3\r\n    最大桁の位 : 100\r\n\r\n    C:\\&gt;figure -1000\r\n    数字の桁数
    : 4\r\n    最大桁の位 : 1000\r\n\r\n遅延環境変数展開を利用しているので、Windows NTでは動作しません。Windows XPで動作\r\nを確認。</pre>\r\n\t"
  :code: |
    :: figure.bat
    @echo off
      setlocal enabledelayedexpansion
        set l=0
        set m=1
        set n=%1

        echo %n%|findstr /r "[^0-9\-]" &gt;NUL 2&gt;&amp;1
        if %ERRORLEVEL% equ 0 goto :EOF

        if %n% lss 0 set /a n*=-1

        call :length %n% l
        echo 数字の桁数 : %l%

        set /a l-=1
        for /l %%i in (1,1,%l%) do set /a m=!m!*10
        echo 最大桁の位 : %m%
      endlocal
    goto :EOF

    :length
      setlocal
        set i=0
        set t=%1
        set t=%t:"=%

        :loop
          set t=%t:~1%
          set /a i+=1
        if not "%t%" == "" goto loop
      endlocal &amp; set %2=%i%
    goto :EOF
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1918'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1918
  :user_name: dsler
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/355/
  :language: ActionScript
  :time: 2007/08/06 06:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  JS版みてアッと思い、abs追加して晒しです。小数点以下はバッサリいってます。\r\n\t"
  :code: "function ketasu(num:Number):Array{\n\tvar keta:Number = Math.abs(Math.floor(num)).toString().length;\n\treturn(new
    Array(keta,Math.pow(10,keta-1)));\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2478'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2478
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/24 08:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">って呼ぶときに括弧が余計に必要だから63バイトっていうのは適切じゃないか…</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1855'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1855
  :user_name: higeorange
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/194/
  :language: JavaScript
  :time: 2007/08/05 03:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: "function keta(num) {\n    for(var n = 0;num &gt;= 1;n++) {\n        num
    /= 10;\n    }   \n    return [n, Math.pow(10, n-1)]\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2071'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2071
  :user_name: nskj77
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/375/
  :language: Haskell
  :time: 2007/08/11 13:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  はじめてuntilをつかいました。\r\n\t"
  :code: |
    f x = until (\(_,m) -&gt; x`div`m&lt;10) (\(n,m) -&gt; (n+1,m*10)) (1,1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6491'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/6491
  :user_name: shinonome
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/822/
  :language: C
  :time: 2008/06/14 00:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>特に難しい事をする事もなく。</p>\n\r\n\t"
  :code: |
    #include &lt;stdlib.h&gt;
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    int main(int argc, char **argv)
    {
        printf("[%d, 1%.*0d]", strlen(argv[1]), strlen(argv[1])-1, 0);
        return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1960'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1960
  :user_name: nobsun
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/07 03:56 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">point free style で</pre>\r\n\t"
  :code: "binapp = (flip .) . (((.) .) .) . (.)\nketa = uncurry (binapp (,) id (`div`
    10)) . head\n     . snd . flip break (zip [1..] (iterate (10*) 10)) \n     . (.
    snd) . (&lt;)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1833'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1833
  :user_name: kacchi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/145/
  :language: Scheme
  :time: 2007/08/04 16:29 GMT
  :vote_count: '4'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">ぜんぜん考えてません。0のときこうなりました。\r\n(digits 0)\r\n=&gt;0\r\n=&gt;1/10\r\n</pre>\r\n\t"
  :code: |
    (define (digits n)
      (define (f n)
        (if (zero? n) 0
            (+ 1 (f (quotient n 10)))))
      (let1 digit (f n)
        (values digit (expt 10 (- digit 1)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1987'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1987
  :user_name: ？せんたくいた
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/241/
  :language: sed
  :time: 2007/08/07 13:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">sed でカウントアップ初挑戦。(ついでにラベル\":\"も初)\r\n桁上がりまで実装できずに9桁止まりになってしまい。\r\n\r\n</pre>\r\n\t"
  :code: |
    #!/bin/sed -nf

    /^[1-9][0-9]*$/!d
    h
    s/$/@0123456789/

    :counter
    s/^[^@]\(.*\)@.\(.*\)$/\1@\2/
    t counter

    s/@\(.\).*$/\1/
    G
    s/^\([0-9]\)\n\([0-9]*\)$/\2は\1桁で、/p
    x
    y/123456789/000000000/
    s/^0/1/
    s/^.*$/最大桁は&amp;の位です。/p
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1947'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1947
  :user_name: kkobayashi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/232/
  :language: 
  :time: 2007/08/06 15:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">気分を悪くさせてしまったようでごめんなさい。評価する人が少ないので\r\nどうしても１票のウェイトが精神的にもきついですよね・・・。\r\n直接指摘するよりマイナス評価で自分で気づけるようにしたほうがいいかな、と\r\n思っただけなのです。\r\n\r\nマイナス評価の理由は、常用対数をceilingすると100と101で結果が違ってきますよ\r\nというだけです。もっとも、log自体誤差があるらしいので（http://ja.doukaku.org/comment/1893/）\r\nいらない突っ込みだったかもしれません。\r\n\r\nLISP処理系がないのでxyzzyで実行\r\n------------------------------------------------\r\n(figure
    100)\r\n2\r\n10\r\n\r\n(figure 101)\r\n3\r\n100\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1990'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1990
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/07 13:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">すみません。\r\n評価理由をつけられるようにすることも\r\n予定の中には入っているのですが\r\nまだできていません。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1825'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1825
  :user_name: kkobayashi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/04 15:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">負の値の場合、\"-\"は桁数に入らないですよね？\r\n最大桁に同じものがあったときは、1の位に近いものを出しています。\r\n\r\n&gt;
    digit_max(600)\r\ndigits = 3 \r\nmax digit = 100 \r\n&gt; digit_max(-600)\r\ndigits
    = 3 \r\nmax digit = 100 \r\n&gt; digit_max(0)\r\ndigits = 1 \r\nmax digit = 1
    </pre>\r\n\t"
  :code: |
    digit_max &lt;- function(x){
        if(x &lt; 0) x &lt;- x * -1
        cat("digits =", ifelse(x==0, 1, floor(log(x, 10))+1), "\n")
        cat("max digit =", 10 ** (which.max(rev(as.integer(unlist(strsplit(as.character(x), ""))))) - 1), "\n")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1852'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1852
  :user_name: ether
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/96/
  :language: OCaml
  :time: 2007/08/05 01:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  accumulator 変数2つも要らないのでは？と思われるかもしれませんが OCaml で 10 ** len をやろうと思うとかっこ悪いことになるので…\r\n\t"
  :code: |
    let num_digits n =
      let rec num_digits' len place = function
      | 0 -&gt; (len, place)
      | n -&gt; num_digits' (succ len) (place * 10) (n / 10)
      in
      num_digits' 1 1 (n / 10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1919'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1919
  :user_name: talo
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/237/
  :language: Java
  :time: 2007/08/06 07:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    public class GetKeta {

        /** 桁数取得. */
        public static int getKeta(int value) {
            return String.valueOf(value).length();
        }

        /** 位. */
        public static int getUnit(int value) {
            return (int) Math.pow(10d, (double) getKeta(value) - 1);
        }

    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1969'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1969
  :user_name: shiro
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/08/07 05:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  点々だらけ…\r\n書く方はある程度規則的に展開できるからいいとして、読めるんもんなのでしょうか、こういうの?\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4813'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/4813
  :user_name: vtwntmtn
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2007/12/14 18:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">1&gt; c(column_place).\r\n{ok,column_place}\r\n2&gt;
    column_place:column_place(2469).\r\n{4,1000}\r\n3&gt; column_place:column_place(600).\r\n{3,100}\r\n4&gt;
    column_place:column_place(1).\r\n{1,1}</pre>\r\n\t"
  :code: |
    -module(column_place).
    -export([column_place/1]).

    column(0) -&gt; 0;
    column(Num) -&gt; 1 + column(Num div 10).

    place(1) -&gt; 1;
    place(Col) -&gt; 10 * place(Col - 1).

    column_place(0) -&gt; {1, 1};
    column_place(Num) -&gt; {column(Num), place(column(Num))}.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4125'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/4125
  :user_name: naranja
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/11/17 00:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    import std.stdio;
    import std.string;

    void main(string[] args){
        auto numStr = toString(atoi(args[1]));
        auto keta = numStr.length - (numStr[0] == '-');
        auto kurai = atoi("1" ~ repeat("0", keta - 1));
        writefln("keta:  ", keta);
        writefln("kurai: ", kurai);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1997'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1997
  :user_name: ocean
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/08/07 18:13 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  C++ならではの方法ということで、テンプレートを使いました。コンパイル時に解決されるので、外部から数字を指定することはできません。\r\n\t"
  :code: |
    #include &lt;iostream&gt;

    template &lt;size_t N&gt;
    struct keta
    {
        static const size_t value = keta&lt;N / 10&gt;::value + 1;
    };

    template &lt;&gt;
    struct keta&lt;0&gt;
    {
        static const size_t value = 0;
    };

    template &lt;size_t N&gt;
    struct kurai_impl
    {
        static const size_t value = kurai_impl&lt;N / 10&gt;::value * 10;
    };

    template &lt;&gt;
    struct kurai_impl&lt;0&gt;
    {
        static const size_t value = 1;
    };

    template &lt;size_t N&gt;
    struct kurai
    {
        static const size_t value = kurai_impl&lt;N / 10&gt;::value;
    };

    template &lt;size_t N&gt;
    void solve()
    {
        std::cout &lt;&lt; keta&lt;N&gt;::value &lt;&lt; " " &lt;&lt; kurai&lt;N&gt;::value &lt;&lt; std::endl;
    }

    int main()
    {
        solve&lt;2469&gt;();
        solve&lt;600&gt;();
        solve&lt;1&gt;();
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3610'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3610
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/31 01:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">&gt; foo(-12345)\r\n桁数 = 5 , 位 = 100000 \r\n&gt;
    foo(2469)\r\n桁数 = 4 , 位 = 10000 \r\n&gt; foo(600)\r\n桁数 = 3 , 位 = 1000 \r\n</pre>\r\n\t"
  :code: |
    foo &lt;- function(x) {
        l &lt;- length(unlist(strsplit(as.character(abs(x)), "")))
        cat("桁数 =", l, ", 位 =", as.integer(10^l), "\n")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1826'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1826
  :user_name: 沢渡 みかげ
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/101/
  :language: Perl
  :time: 2007/08/04 16:01 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">ワンライナーで．\r\n\r\n実行例：\r\n\r\n&gt; perl -e
    '$l = length($ARGV[0]); print $l, \"\\n\", 10 ** ($l-1), \"\\n\"' 1\r\n1\r\n1\r\n\r\n&gt;
    perl -e '$l = length($ARGV[0]); print $l, \"\\n\", 10 ** ($l-1), \"\\n\"' 600\r\n3\r\n100\r\n\r\n&gt;
    perl -e '$l = length($ARGV[0]); print $l, \"\\n\", 10 ** ($l-1), \"\\n\"' 2469\r\n4\r\n1000\r\n\r\n</pre>\r\n\t"
  :code: |
    perl -e '$l = length($ARGV[0]); print $l, "\n", 10 ** ($l-1), "\n"' 1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1859'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1859
  :user_name: sumim
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/08/05 04:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  Squeak Smalltalk で。\r\n\t"
  :code: |
    | n numOfDigits |
    n := 2469.
    ^{numOfDigits := n printString size. 10 raisedTo: numOfDigits - 1}

    "=&gt; #(4 1000) "
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1942'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1942
  :user_name: takkanm
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/224/
  :language: Haskell
  :time: 2007/08/06 14:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  あえて数字を文字列にしない方向で\r\n\t"
  :code: |
    keta x = snd $ head $ filter (\(y,z)-&gt; y &gt; x) $ zip (iterate (*10) 10) $ zip [1..] $ iterate (*10) 1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2034'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2034
  :user_name: rubikitch
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/08/08 17:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  今度は数値計算でやってみた。そのままCommon Lispでも通る。\r\n\t"
  :code: |
    (require 'cl)
    (defun keta (n)
      (cond ((zerop n) (values 1 1))
            ((&lt; n 0) (keta (- n)))
            (t (loop
                  with d = 1
                  with len = 0
                  while (&gt;= (/ n d) 1) do
                    (incf len)
                    (setf d (* d 10))
                  finally (return (values len (/ d 10)))))))

    (keta 2469)                             ; =&gt; (4 1000)
    (keta 600)                              ; =&gt; (3 100)
    (keta 1)                                ; =&gt; (1 1)
    (keta 0)                                ; =&gt; (1 1)
    (keta -2469)                            ; =&gt; (4 1000)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2475'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2475
  :user_name: tea
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/402/
  :language: Python
  :time: 2007/08/24 07:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">重複部分を排除してみました。</pre>\r\n\t"
  :code: |
    import math
    f = lambda n: (lambda x:(1+x,10**x))(int(math.log(n,10)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1972'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1972
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/07 07:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">&gt; . (((.) .) .) . (.)\r\n\r\nぎょっとしました。\r\nなるほど、関数を合成する演算子も+なんかと同様に\r\n(.)で2引数を取る関数になったり、\r\n部分適用したりができるわけですね…</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2909'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2909
  :user_name: shg
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/383/
  :language: dc
  :time: 2007/09/04 20:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \n<p>いまごろだが問題を読み違えていたことに気付いたので訂正(一行目)。前のマクロでは位と最高位の数字を取り出していた。また、その目的だったとしても前の投稿は冗長だったので短かくしたものをついでに(二行目)。以下は実行例。数字のみの行は出力。\n</p>\n<pre><code>2469
    ldxf\n1000\n4\nc\n_34567 ldxf\n10000\n5\nc\n2469 lcxf\n1000\n2\n</code></pre>\n<p>言語一覧へのdcの追加ありがとうございます。\n</p>\n\n\n\r\n\t"
  :code: |
    [Zd1-10r^]sd
    [_1*]ss[d0&gt;sdZ1-10r^Sxlx/Lx]sc
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3768'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3768
  :user_name: fujidig
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/08 15:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |2
        #val = val( input( "数値を入力", "2469" ) );
        if ( #val &lt; 0 ) {
            #val = -#val;
        }
        #keta = strlen( str( #val ) );
        message str( #keta ) + "桁";
        $kurai = "1";
        #i = #keta - 1;
        while( #i &gt; 0 ) {
            $kurai = $kurai + "0";
            #i = #i - 1;
        }
        message "最大桁の位："+$kurai;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5135'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/5135
  :user_name: mc
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/405/
  :language: Other
  :time: 2008/01/03 03:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Lisp1.5です。ABSがないので自作しています。\r\n2469, 600,
    1, 0, -2469の実行結果:\r\n(4 1000)\r\n(3 100)\r\n(1 1)\r\n(1 1)\r\n(4 1000)</pre>\r\n\t"
  :code: "DEFINE((\n(ABS (LAMBDA (N) (COND \n        ((MINUSP N) (MINUS N))\n        (T
    N))))\n\n(FIGURE1 (LAMBDA (X N ACC) (COND\n            ((ZEROP X) (QUOTE (1 1)))\n
    \           ((LESSP X N) (LIST ACC (EXPT 10 (SUB1 ACC))))\n            (T (FIGURE1
    X (TIMES 10 N) (ADD1 ACC))))))\n\n(FIGURE (LAMBDA (N) (FIGURE1 (ABS N) 1 0)))
    \ ))\n\nMAP((2469 600 1 0 -2469)\n    (LAMBDA (X) (PRINT (FIGURE (CAR X)))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1915'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1915
  :user_name: reffi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/333/
  :language: Scheme
  :time: 2007/08/06 06:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">しまった。この手がありました。\r\n&gt; (digit-number 316)\r\n(3
    . 100)\r\n&gt; (digit-number 1)\r\n(1 . 1)</pre>\r\n\t"
  :code: |
    (define (digit-number number)
      (define (digits n) (string-length (number-&gt;string n)))
      (let ((d (digits number)))
            (cons d (expt 10 (- d 1)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2073'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2073
  :user_name: ether
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/96/
  :language: Python
  :time: 2007/08/12 04:32 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">＞計算量を考えるなら、log使うのがベストですよね。\r\n\r\n必ずしもそうとは言えないんじゃないでしょうか。\r\nこのコードを私の環境（Linux
    PowerPC 200MHz）で動かすとこんな感じでした。\r\n\r\n&gt;&gt;&gt; time_it(num_digits_log, 99999)\r\n6.8320038318634033\r\n&gt;&gt;&gt;
    time_it(num_digits_str, 99999)\r\n5.2861831188201904\r\n&gt;&gt;&gt; time_it(num_digits_log,
    99999)\r\n6.8249599933624268\r\n&gt;&gt;&gt; time_it(num_digits_str, 99999)\r\n5.2954750061035156\r\n</pre>\r\n\t"
  :code: |
    import math
    import time

    def time_it(f, count):
      tic = time.time()
      for i in xrange(1, count):
        f(i)
      toc = time.time()
      return toc - tic

    def num_digits_log(n):
      return int(math.log10(n)) + 1

    def num_digits_str(n):
      return len(str(n))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1824'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1824
  :user_name: ？せんたくいた
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2007/08/04 15:58 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  bashで王道?に。\r\n\r\n\t"
  :code: |
    #!/bin/bash
    n="$1"
    echo "$nは${#n}桁で最大桁は$((10**(${#n}-1)))の位です。"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1827'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1827
  :user_name: nkmrtks
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/155/
  :language: Common
  :time: 2007/08/04 16:01 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">(figure 2469)\r\n =&gt; 4\r\n =&gt; 1000\r\n\r\n(figure
    600)\r\n =&gt; 3\r\n =&gt; 100\r\n\r\n(figure 1)\r\n =&gt; 1\r\n =&gt; 1</pre>\r\n\t"
  :code: |
    (defun figure (n)
      (and (plusp n)
           (let ((fig (ceiling (log n 10))))
             (if (zerop fig)
                 (values 1 1)
               (values fig (expt 10 (1- fig)))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1866'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1866
  :user_name: reffi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/333/
  :language: Scheme
  :time: 2007/08/05 09:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">DrSchemeにて。\r\n&gt; (digits-and-msd 1)\r\n(1
    . 1)\r\n&gt; (digits-and-msd 600)\r\n(3 . 100)\r\n</pre>\r\n\t"
  :code: |
    (define (digits-and-msd number)
      (cons (digits number) (msd number)))

    (define (msd number)
      (power 10 (- (digits number) 1)))

    (define (digits number)
      (cond ((&lt; number 10) 1)
            (else (+ 1 (digits (/ number 10))))))

    (define (power base exp)
      (cond ((= exp 0) 1)
            ((= exp 1) base)
            (else (* base (power base (- exp 1))))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2070'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2070
  :user_name: maeda
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/378/
  :language: 
  :time: 2007/08/11 09:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre>\r\n&gt;まぁ、logは使うなって結論っぽいけど…\r\n\r\n計算量を考えるなら、log使うのがベストですよね。\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1865'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1865
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: Haskell
  :time: 2007/08/05 08:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  なんでかloginできないので匿名アカウントで(n某)\r\n\t"
  :code: "import System.Environment \nstarling f g x = f x (g x)\nmain = print . starling
    (,) ((10^) . subtract 1) . length . head =&lt;&lt; getArgs\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1888'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1888
  :user_name: 時間蠅
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/250/
  :language: 
  :time: 2007/08/05 18:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  でも、これだとゼロとかマイナス値のときに破綻しますね。要・再検討。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1982'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1982
  :user_name: nobsun
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/07 10:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">nlambda → unlambda</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2554'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2554
  :user_name: 130R
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/08/27 12:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">PS C:\\&gt; keta 2469\r\n4 1000\r\nPS C:\\&gt;
    keta 600\r\n3 100\r\nPS C:\\&gt; keta 1\r\n1 1\r\nPS C:\\&gt; keta 0\r\n1 1\r\nPS
    C:\\&gt; keta -99\r\n2 10</pre>\r\n\t"
  :code: |
    function keta([int]$num) {
      $n = $($([string] $([math]::abs($num)))).length
      "$n $([math]::pow(10, $n-1))"
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1857'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1857
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/05 04:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  小数点以下の桁数をどう表現すればいいのか迷いましたが、マイナス方向にそのまま延長しています。\r\n\t"
  :code: |
    import java.lang.StrictMath;

    public class Sample {
        public static void keta(double num) {
            int keta = 0;
            if (num != 0) {
                keta = (int)StrictMath.log10(StrictMath.abs(num));
            }
            System.out.printf("%d, %g%n", keta + 1, StrictMath.pow(10.0, keta));
        }

        public static void main(String[] args) {
            keta(Double.parseDouble(args[0]));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1984'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1984
  :user_name: nkmrtks
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/155/
  :language: 
  :time: 2007/08/07 12:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">そういうことでしたか(´・ω・｀)納得\r\n評価の基準は人それぞれ、ってので逆に邪推してしまいました。すみませんでした。\r\n\r\n切り上げじゃなくて、切り捨てて+1した整数を使わないと駄目ですね。\r\nまぁ、logは使うなって結論っぽいけど…</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2096'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2096
  :user_name: ether
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/96/
  :language: 
  :time: 2007/08/13 05:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  前半部は理解していたつもりなのですがなんか表現が変だったみたいで失礼しました。\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2557'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2557
  :user_name: shg
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/383/
  :language: dc
  :time: 2007/08/27 18:06 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  \n<p>dcのマクロで。投稿のマクロを入力後、例えば次のように入力するとスタックのトップ二つに結果がプッシュされているのが見える。\n</p>\n<pre><code>2469
    ldxf\n</code></pre>\n<p>入力は負の数でも良い。dcでは負数はマイナス記号ではなくアンダースコアで指定する。\n</p>\n<pre><code>_34567
    ldxf\n</code></pre>\n\n\r\n\t"
  :code: |
    [_1*]sn[Ll10r^q]sq[d10&gt;q10/Ll1+sllax]sa[d0&gt;n0sllax]sd
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1837'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1837
  :user_name: katsu
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/117/
  :language: Prolog
  :time: 2007/08/04 17:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">文字上の桁数を数えています。\r\nPrologの人気のなさに絶望した。\r\nところで、0は一桁、でいいんでしょうかね。</pre>\r\n\t"
  :code: |
    val(X,_,X).

    figure(N,(K,X)):-
            atom_chars(N,N1),
            length(N1,K),
            maplist(val('0'),N1,[_|N2]),
            atom_chars(X,['1'|N2]).

    :-maplist(figure,[1234,1,0],X),writeln(X).
    % 実行結果
    % [ (4, 1000), (1, 1), (1, 1)]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1861'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1861
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/05 05:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  整数だけですが、桁数と位を返せるクラスをつくってみました。\r\n\t"
  :code: "public class DigitMain {\n\n\tpublic static void main(String[] args) {\n\t\tDigit
    digit = new Digit(2469);\n\t\tSystem.out.println(digit.getNumber() +\":\" + digit.getUnit());\n\t}\n}\n\n\npublic
    class Digit {\n\tprivate static int value;\n\n\tpublic Digit(int value){\n\t\tthis.value
    = value;\n\t}\n\n\tpublic int getNumber(){\n\t\treturn String.valueOf(value).length();\n\t}\n\n\tpublic
    int getUnit(){\n\t\treturn  getNumber() == 1 ? 1 : (int)(Math.pow(10, getNumber()-1));\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1847'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1847
  :user_name: yuin
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/08/04 18:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    def solve(n:int) = {
      val w = n.toString.length
      (w, Math.pow(10, w-1).toInt)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1939'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1939
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/08/06 13:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  double では有効桁数が足りない場合があるという（他言語での）指摘を受けて BigDecimal を使ってみました。\r\n\t"
  :code: |
    import java.math.BigDecimal;
    import java.math.MathContext;

    public class Sample2 {
        public static void keta(BigDecimal num) {
            int keta = num.precision() - num.scale();
            MathContext ctx = MathContext.DECIMAL32;
            System.out.printf("%d, %g%n", keta, BigDecimal.TEN.pow(keta - 1, ctx));
        }

        public static void main(String[] args) {
            keta(new BigDecimal(args[0]));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1943'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1943
  :user_name: takkanm
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/224/
  :language: Other
  :time: 2007/08/06 14:39 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  カリー化でちょっとだけ短く\r\n\t"
  :code: |
    keta x = snd $ head $ filter ((&gt;x).fst) $ zip (iterate (*10) 10) $ zip [1..] $ iterate (*10) 1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1952'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1952
  :user_name: rucker
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/08/06 19:02 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  0以外で始まる数字の文字数数えるだけ。\r\n\t"
  :code: "&lt;?php\nfunction figurescount($n)\n{\n\tereg('([1-9][0-9]*)',$n,$regs);\n\t$c=strlen($regs[1]);\n\t$f=($c&gt;0)?(\"1\".str_repeat(\"0\",$c-1)):\"0\";\n\treturn
    array($c,$f);\n}\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1878'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1878
  :user_name: naoya_t
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/08/05 15:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  初めて投稿します。\r\n\t"
  :code: "BEGIN {\n\tketa = length(0 + ARGV[1])\n\tprint keta, 10**(keta - 1)\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1831'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1831
  :user_name: tomatsu
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/323/
  :language: Pnuts
  :time: 2007/08/04 16:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\"></pre>\r\n\t"
  :code: |
    function figure(x){
      y = size(string(int(x)))
      [y, pow(10,y-1)]
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1993'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1993
  :user_name: 匿名
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/08/07 14:34 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <pre class=\"compact\">まず使う機会がない（というか使うべきではない）__int64型を、さらにunsignedで使ってみました☆</pre>\r\n\t"
  :code: |
    #include&lt;stdio.h&gt;
    int main(void){
      unsigned __int64 x,y=1;
      int z=1;
      for(printf("正数="),scanf("%I64d",&amp;x);x&gt;9;z++,y*=10,x/=10);
      printf("桁数=%d\n最大=%I64u\n",z,y);
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3882'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/3882
  :user_name: shimakuma
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/343/
  :language: 
  :time: 2007/11/11 23:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  number は数値のプロトタイプ。\r\n\t"
  :code: |
    number：桁数＝「｜ｘ｜ｘ＝abs(自分)。
    　「ｘ＝＝０」！なら「０」そうでなければ
    　「ｘ＞＝１」　なら「 ceil(log(abs(自分)))」
    　　　そうでなければ「floor(log(abs(自分)))」実行」。

    number：最大桁の位＝「｜ｋ｜ｋ＝！桁数。
    　(ｋ＝＝０)！なら「０」
    　　そうでなければ「10！((ｋ＞０)！なら「ｋ－１」そうでなければ「ｋ」実行)pow」実行」。

    表示欄＝リスト！作る　-80 80 位置　160 160 大きさ。
    配列！2469 -600 1.1 0 0.042 作る
    　「表示欄！(『』！(自分)『なら』(！桁数)『と』(！最大桁の位)連結)書く」それぞれ実行。
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4722'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/4722
  :user_name: pooq
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/10 13:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">j言語です。\r\n実行例。\r\n   f 1\r\n1 1\r\n\r\n   f
    600\r\n3 100\r\n\r\n   f 2469\r\n4 1000\r\n</pre>\r\n\t"
  :code: |
    f=.3 :'b,10^&lt;:b=.#":y'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1940'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1940
  :user_name: nkmrtks
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/155/
  :language: 
  :time: 2007/08/06 13:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">うーん、素晴らしいコードだとは口が裂けたら言えないけど、マイナス評価喰らうほどひどいかなぁ…\r\n＃ifじゃなくてcond使ってる辺りはヒドイが（ぉ\r\n＃＃pluspとminuspの振り分けをabsで吸収するまでのアレコレで残っちゃったんだよね。\r\n\r\n評価そのものより、評価理由がキニナル(´・ω・｀)</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6069'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/6069
  :user_name: horiuchi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/570/
  :language: Other
  :time: 2008/03/25 08:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">負の値は考慮外です。\r\n0の場合は、1 1 を返します。</pre>\r\n\t"
  :code: |
    : KETAKURAI ( n -- )
    1 1 ROT
    BEGIN
      DUP 10 &gt;
    WHILE
      10 / ROT 10 * ROT 1+ ROT
    REPEAT
    DROP . . ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2024'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2024
  :user_name: KOSUGI Tomo
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/119/
  :language: Scheme
  :time: 2007/08/08 16:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">どこかで「中学生の解き方」みたいに紹介されていた方法．log だと誤差が～みたいな．\r\n</pre>\r\n\t"
  :code: |
    (define (q40 n)
      (let ((s (number-&gt;string n)))
        (list
         (string-length s)
         (expt 10 (- (string-length s) 1)))))
    (map q40 '(2469 600 1))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2095'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2095
  :user_name: にしお
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/13 04:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">importの書き方で速度に違いが出ているわけではなくて、\r\n「math.log10(n)」の「.log10」の部分が余計なんです。\r\nたとえて言うならばループの中で「math[\"log10\"]」を毎回取得しているようなもので、\r\nそれよりはループの外で「log10
    = math[\"log10\"]」とした方がよいでしょう、ということです。\r\n\r\n文字列版がlog10版より遅いケースがあるとは知りませんでした。\r\n環境がPowerPCとのことですので、アーキテクチャの違いが原因かと思います。\r\nこちらの環境はPemtium
    M 1.50GHzです。\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1828'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1828
  :user_name: kkobayashi
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/04 16:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">・・・あ、最大桁って最大の数字を含む桁じゃないんですね。すみません。\r\n数学風にlogを使う方法と、スクリプト言語風に文字数をカウントする方法を使ってます。\r\n\r\n&gt;
    digit_max(-12345)\r\ndigits = 5 \r\nmax digit = 10000</pre>\r\n\t"
  :code: |
    digit_max &lt;- function(x){
        if(x &lt; 0) x &lt;- x * -1
        cat("digits =", ifelse(x==0, 1, floor(log(x, 10))+1), "\n")
        cat("max digit =", 10 ** (nchar(as.character(x))-1), "\n")
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5722'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/5722
  :user_name: queck
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/02/10 13:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Factor です。シンプルに文字列に変換しました。</p>\n<p>スタックベースの言語では、2つ以上の値（多値）を返すには、スタックに必要な数だけ値を残すという自然な方法で実現できます。</p>\n\r\n\t"
  :code: |
    USING: kernel sequences math math.functions math.parser ;

    : keta&amp;kurai ( n -- keta kurai )
        number&gt;string length dup 1- 10 swap ^ ;

    ! example
    USE: prettyprint
    2469 keta&amp;kurai . .  ! 1000 4
    600 keta&amp;kurai . .   ! 100 3
    1 keta&amp;kurai . .     ! 1 1
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6492'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/6492
  :user_name: genzou
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/14 10:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>高校の時にこんな風な感じにならったなぁ。\n記憶をたよりに適当に作ってみました。</p>\n<p>【実行結果】\nケタ数は4.0、最大桁の位は1000です。\nケタ数は3.0、最大桁の位は100です。\nケタ数は8.0、最大桁の位は10000000です。\nケタ数は6.0、最大桁の位は100000です。\nケタ数は7.0、最大桁の位は1000000です。\nケタ数は1.0、最大桁の位は1です。\nケタ数は4.0、最大桁の位は1000です。\nケタ数は3.0、最大桁の位は100です。\nケタ数は8.0、最大桁の位は10000000です。\nケタ数は6.0、最大桁の位は100000です。\nケタ数は7.0、最大桁の位は1000000です。\nケタ数は1.0、最大桁の位は1です。</p>\n\r\n\t"
  :code: |
    def printKetaAndKurai( num ){
        def n = Math.abs(num)
        def ケタ数 = Math.floor(Math.log(n)/Math.log(10)) + 1
        def 位 = 10**(ケタ数-1)
        println "ケタ数は${ケタ数}、最大桁の位は${位}です。"
    }

    // 試行
    printKetaAndKurai(2469)
    printKetaAndKurai(600)
    printKetaAndKurai(12378990)
    printKetaAndKurai(414879)
    printKetaAndKurai(3141592)
    printKetaAndKurai(1)
    printKetaAndKurai(-2469)
    printKetaAndKurai(-600)
    printKetaAndKurai(-12378990)
    printKetaAndKurai(-414879)
    printKetaAndKurai(-3141592)
    printKetaAndKurai(-1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2033'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/2033
  :user_name: rubikitch
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/08/08 17:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    (defun keta (n)
      (let ((len (length (format nil "~a" (abs n)))))
        (values len (expt 10 (1- len)))))

    (keta 2469)                             ; =&gt; 4, 1000
    (keta 600)                              ; =&gt; 3, 100
    (keta 1)                                ; =&gt; 1, 1
    (keta 0)                                ; =&gt; 1, 1
    (keta -2469)                            ; =&gt; 4, 1000
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1885'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1885
  :user_name: minekoa
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/337/
  :language: Smalltalk
  :time: 2007/08/05 17:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">あー、、いきなりヘッポコ、自己レスです。\r\n\r\nx はレキシカル変数にでいいですね。自分のヘッポコぶりに絶望した！</pre>\r\n\t"
  :code: "| getDigitsAndPlace |\ngetDigitsAndPlace :=\n    [ :x |  \n        | func
    \ |\n        func := [ :d |\n                    (10 ** d) &lt;= x\n                        ifTrue:
    [func value: d + 1]\n                        ifFalse: [ Array with: d with: 10
    ** (d-1)]].\n        func value: 0].\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '1981'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/1981
  :user_name: nobsun
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/07 10:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">&gt; 読めるんもんなのでしょうか、こういうの?\r\n\r\n型が解れば読めなくはないですが、よみやすさは
    nlambda と変らないですね :)\r\n\r\n(.)が多段になると読みにくくなると思います。(.)が2段くらいまでなら、すぐに慣れて、その場でササッと書けるようになりますし、さっと読めるようになります。\r\n\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '10108'
  :parent_id: '40'
  :url: http://ja.doukaku.org/comment/10108
  :user_name: gushwell
  :user_url: /web/20110320100046/http://ja.doukaku.org/user/1046/
  :language: C
  :time: 2010/02/06 02:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  LogもPowも文字列も使わない方法で。\r\nループの中で、WriteLineしてるのは、気に入らないけど、ご容赦を。\r\n\t"
  :code: |2
      void DigitNumber(int n) {
          int a = 10;
          for (int i = 1; ; i++) {
              if (n &lt; a) {
                  Console.WriteLine("{0},{1}", i, a / 10);
                  break;
              }
              a *= 10;
          }
      }
  :tags: []
  :references:
    :url: 
    :title: 
