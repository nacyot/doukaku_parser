---
:id: '245'
:title: 例外処理
:comments:
- :id: '8712'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8712
  :user_name: turugina
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/760/
  :language: 
  :time: 2009/03/23 04:30 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <p>例外処理の適当なサンプルを書いてください。</p>\n<p>但し、言語によって例外処理がサポートされている場合はそれを利用してください。</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100628134232/http://ja.wikipedia.org/wiki/%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86
    :title: 例外処理
- :id: '8761'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8761
  :user_name: lunlumo
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/813/
  :language: Ruby
  :time: 2009/04/03 23:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <blockquote>\nRubyではbegin-rescure-ensure-endを使用します。</blockquote>\n\n\t"
  :code: |
    begin
        # 処理本体はここに記述します
        raise "サンプル例外です。"
    rescue =&gt; e
        puts "例外が発生しました。(「#{e.message}」)"
    else
        puts "例外が発生しなかった場合に実行されます。"
    ensure
        puts "例外の発生如何に関わらず実行されます。"
    end
  :tags: []
  :references:
    :url: /web/20100628134232/http://www.ruby-lang.org/ja/man/html/_C0A9B8E6B9BDC2A4.html#a.ce.e3.b3.b0.bd.e8.cd.fd
    :title: Rubyリファレンスマニュアル
- :id: '8762'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8762
  :user_name: lunlumo
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/813/
  :language: Perl
  :time: 2009/04/03 18:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　perlには例外用の構文はありませんが，evalを使用して処理するのが一般的です。</p>\n\n\t"
  :code: |
    eval {
        # 処理本体はここに記述
        die "サンプルエラーです。";
    };
    print "例外が発生しました。（「$@」）\n" if ($@);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8763'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8763
  :user_name: kkobayashi
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2009/04/03 20:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">RにはJavaライクな例外処理が実装されています。\r\n\r\n&gt; tryCatch(expr(1),
    error=e.handler, finally=f.handler())\r\n[1] \"finished\"\r\n&lt;simpleError:
    Exception&gt;\r\n&gt; tryCatch(expr(0), error=e.handler, finally=f.handler())\r\n[1]
    \"not error\"\r\n[1] \"finished\"</pre>\n\t"
  :code: |
    expr &lt;- function(n=1){
      if(n==1){
        stop(simpleError("Exception"))
      }
      print("not error")
    }
    e.handler &lt;- function(e) e
    f.handler &lt;- function() print("finished")

    tryCatch(expr(1), error=e.handler, finally=f.handler())
    tryCatch(expr(0), error=e.handler, finally=f.handler())
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8764'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8764
  :user_name: emasaka
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2009/04/03 21:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">以下の2要素を組み合わせました。\r\n\r\n- エラーが起きた時点で実行を中断 →
    set -e\r\n- それ（とシグナル）を捕捉 → trap、サブシェル\r\n\r\n$ sh q245.sh\r\nbeginning of program\r\nbegenning
    of foo\r\nbegenning of bar\r\nCatch!\r\nend of program\r\n</pre>\n\t"
  :code: |
    #!/bin/sh

    bar() {
      echo 'begenning of bar'
      [ 1 = 2 ]             # raise error
      echo 'end of bar'
    }

    foo() (                 # () runs subshell
      echo 'begenning of foo'

      # catch
      set -e
      trap 'echo "Catch!"' EXIT

      bar
      echo 'end of foo'
    )

    echo 'beginning of program'
    foo
    echo 'end of program'
  :tags: []
  :references:
    :url: /web/20100628134232/http://ja.wikipedia.org/wiki/%E4%BE%8B%E5%A4%96%E5%87%A6%E7%90%86
    :title: 例外処理 - Wikipedia
- :id: '8765'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8765
  :user_name: pa
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/943/
  :language: Other
  :time: 2009/04/04 05:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Limboでは処理ブロックの後にexceptionブロックを\r\nつけることで例外処理が実現できるそうです。\r\n\r\n例外処理ブロックはcase文と似た構文で、\r\n\"要因\"
    =&gt;\r\nの後にその要因に対応する処理を書きます。\r\n\r\n要因は\r\nout of memory\r\nzero divide\r\n等が指定でき、*でワイルドカードが使えるようです。</pre>\n\t"
  :code: |2
        {
            # 処理本体
        } exception e {
           # 例外処理ブロック
        "*" =&gt;
            # 処理内容
        }
  :tags:
  - Limbo
  :references:
    :url: /web/20100628134232/http://www.vitanuova.com/inferno/man/2/0intro.html
    :title: 'Inferno''s INTRO(2):'
- :id: '8767'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8767
  :user_name: selpo
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1013/
  :language: C
  :time: 2009/04/04 07:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    class P
    {
        static void Main(string[] args)
        {
            int a;
            string str;
            Console.WriteLine("逆数を求めます。整数を入力してください。");
            str = Console.ReadLine();
            try
            {
                a = (int)double.Parse(str);
                Console.WriteLine("1 / {0} = {1}", str, 1.0 / a);
            }
            catch (FormatException)
            {
                Console.WriteLine("{0}は整数として有効ではありません。", str);
            }
            catch (DivideByZeroException)
            {
                Console.WriteLine("0では割れません。");
            }
        }
    }
  :tags:
  - C#2.0
  :references:
    :url: 
    :title: 
- :id: '8769'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8769
  :user_name: nattou_curry
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/913/
  :language: Java
  :time: 2009/04/04 12:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>javaではtry-catch-finallyを使います。</p>\n\n\t"
  :code: "public class ExTest {\n    public static void main( String[] args ) {\n
    \       try {\n            throw new Exception();\n        } catch ( Exception
    e ) {\n            System.out.println( \"例外が発生しました。\" );\n            // スタックトレースを表示する。\n
    \           e.printStackTrace();\n        } finally { \n            System.out.println(
    \"必ず実行されます。\" );\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8774'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8774
  :user_name: 陽炎
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1022/
  :language: Fortress
  :time: 2009/04/04 17:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    component doukaku245
      export Executable

      object NewException extends Exception
        toString(): String = "Exception occured!"
      end

      run(args: String...): () = do
        try
          throw NewException
        catch e
          NewException =&gt; fail(e.toString())
        finally
          println("End of Exception test.")
        end

      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8775'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8775
  :user_name: egtra
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/04/05 06:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  std::vectorで範囲外エラー (std::out_of_rangeクラスが投げられる) を起こさせました。なお、catchではconst無しの参照
    (std::exception&amp; e) で受け取るのが一般的ですが、自分はconstを付ける派なのです。 \n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;

    int main()
    {
        try
        {
            std::vector&lt;int&gt; v(2); //要素数2つ
            std::cout &lt;&lt; "3つ値を入力してください。" &lt;&lt; std::endl;
            std::cin &gt;&gt; v.at(0);
            std::cin &gt;&gt; v.at(1);
            std::cin &gt;&gt; v.at(2); //いや、そんなにないですって
        }
        catch (std::exception const&amp; e)
        {
            std::cout &lt;&lt; e.what() &lt;&lt; std::endl;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8777'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8777
  :user_name: egtra
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/04/05 01:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>C言語、ただしシグナルやsetjmpではありません。Windowsの構造化例外処理 (SEH) です。\n</p>\n<p>例外を投げるにはRaiseException関数を呼ぶ方法もありますが、今回はCPUに例外を発生させました。\n</p>\n<p><em>_exceptの丸括弧の中の式では、例外をキャッチするか否かを指定する値を指定します。filter</em>exception関数内で、判定を行っています。ちなみに、今回使いませんでしたが、EXCEPTION_CONTINUE_EXECUTIONという__exceptブロック{}を実行せず、例外が発生した場所から実行再開するという指定もあります。\n</p>\n<p>また、GetExceptionCodeの代わりにGetExceptionInformationを使うと詳しい情報の入ったEXCEPTION_POINTERS構造体（へのポインタ）が得られます。RaiseExceptionと組み合わせればC++などのようなオブジェクトの引き渡しを模倣できるはずです。\n</p>\n\n\n\n\t"
  :code: |
    #include &lt;windows.h&gt;
    #include &lt;stdio.h&gt;

    int filter_exception(DWORD exceptionCode)
    {
        return exceptionCode == EXCEPTION_ACCESS_VIOLATION
            ? EXCEPTION_EXECUTE_HANDLER
            : EXCEPTION_CONTINUE_SEARCH;
    }

    int main(void)
    {
        __try
        {
            int* p = NULL;
            *p = 42; // ぬるぽ
        }
        __except(filter_exception(GetExceptionCode())) //例外をキャッチして処理する
        {
            fputs("ガッ！\n", stderr);
        }
        return 0;
    }
  :tags:
  - Windows
  :references:
    :url: /web/20100628134232/http://msdn.microsoft.com/ja-jp/library/cc440193.aspx
    :title: C と C++ での例外処理、第 2 部
- :id: '8781'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8781
  :user_name: a2c
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/831/
  :language: Python
  :time: 2009/04/05 09:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    def hoge():
      arr = []
      return arr[100]

    try:
      hoge()
    except Exception, e:
        print('hoge() faild')
        print(e)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8783'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8783
  :user_name: rennos
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/04/05 08:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>HSPには例外処理機構が無いので、マクロで実装します。</p>\n\n\t"
  :code: "#define global try %tExcepHandling %i0 %i0 %i0 %i0 if (1)\n#define global
    end_try %tExcepHandling *%p1 : %o0 %o0 %o0 %o0\n#define global catch_list %tExcepHandling
    \\\n    if (0) : *%p : %p3 = 0\n#define global TEMP_CATCH(%1,%2) %tExcepHandling
    \\\n    if ( %p3 ) { goto *%p1 } else { %p3 = 1 }\\\n    } if (%1) { %2 = THREW_VALUE\n#define
    global ctype catch(%1,%2=THREW_VALUE) %tExcepHandling \\\n    TEMP_CATCH ( vartype(THREW_VALUE)
    == vartype(\"%1\") ), %2\n#define global ctype finally(%1=THREW_VALUE) %tExcepHandling
    \\\nTEMP_CATCH 1, %1\n#define global throw(%1) %tExcepHandling \\\nTHREW_VALUE
    = %1 : goto *%p\n#define global try_break %tExcepHandling goto *%p1\n#define global
    THREW_VALUE %tExcepHandling %p2\n\n// サンプル・スクリプト\n#if 1\n    randomize\n    repeat\n
    \       wait 50\n        try {\n            // メイン処理、この中でしか throw できない。\n            switch
    ( rnd(3) )\n                case 0 : throw 2147483647 : swbreak\n                case
    1 : throw \"Hello, world!\" : swbreak\n                case 2 : throw 3.141592
    : swbreak\n            swend\n            \n        } catch_list {\n            //
    throw されたらここに来る。\n            catch (int, x)\n                mes \"int\\t: \"+
    x\n                \n            catch(str)\n                mes \"str\\t: \\\"\"+
    THREW_VALUE +\"\\\"\"\n                \n            finally()\n                mes
    \"final\\t: \"+ THREW_VALUE\n        } end_try\n        // catch_list を抜けるとここに来る\n
    \   loop\n    stop\n#endif\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8791'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8791
  :user_name: lunlumo
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/04/06 10:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　ScalaはJavaと同じくtry-catch-finallyとなりますが，例外の振り分けにcaseによるマッチングを使う様になっている所がらしいでしょうか。</p>\n\n\t"
  :code: |
    object ExceptionSample {
        def main(args:Array[String]):Unit = {
            try {
                println("処理本体")
                args.size match {
                    case 0 =&gt; throw new IllegalArgumentException("引数が指定されていません")
                    case 1 =&gt; printf("引数: %s\n", args.first)
                    case _ =&gt; throw new Exception("引数の指定が不正です")
                }
            } catch {
                case e:IllegalArgumentException =&gt; printf("例外発生(「%s」)\n", e.getMessage)
                case e =&gt; e.printStackTrace
            } finally {
                println("例外の発生如何に関わらず実行")
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8794'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8794
  :user_name: genzou
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2009/04/07 07:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">以下のjavaの投稿を参考に、\r\ngroovy風に書き換えてみました。\r\n\r\nどう書く？org
    8769 nattou_curry: javaではtry-catch-fina...(例外処理) - 投稿の詳細 &lt;http://ja.doukaku.org/comment/8769/&gt;</pre>\n\t"
  :code: |
    try {
        throw new Exception()
    } catch ( e ) {
        println( "例外が発生しました。" )
        e.printStackTrace()
    } finally {
        println( "必ず実行されます。" )
    }
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '8797'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8797
  :user_name: sumim
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/04/09 00:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Smalltalk では、例外処理は #on:do: を、後処理は #ensure: を用います。</p>\n\n\t"
  :code: "[1/0]\n    on: ZeroDivide \n    do: [:ex | Float infinity]   \"#=&gt; Infinity\"\n\n[self
    error: 'エラー発生'] ensure: [Transcript cr; show: '必ず実行']\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '8828'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8828
  :user_name: spoon
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1036/
  :language: Python
  :time: 2009/04/17 18:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    try:
        # 処理本体はここに記述します
        raise Exception("サンプル例外です。")
    except Exception, e:
        print "例外が発生しました。(「%s」)" % e
    else:
        print "例外が発生しなかった場合に実行されます。"
    finally:
        print "例外の発生如何に関わらず実行されます。"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8873'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8873
  :user_name: silverwire
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/646/
  :language: Other
  :time: 2009/05/01 05:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">InstallShield Scriptです。\r\n\r\nInstallShield
    Scriptは Windowsアプリケーション用のインストーラーを作成するための\r\n言語ですが、ヘルプを見ていて意外にも(?) 例外処理をサポートしていることに気がつき\r\nました。\r\n\r\n以下はヘルプに載っている内容を手直ししたものですが、この処理だと
    try ... catchを\r\n利用するメリットは... ありませんよね。(すみません。)\r\n\r\n# InstallShield Profesional
    7.01でビルドして動作を確認しました。</pre>\n\t"
  :code: "#include \"ifx.h\"\n#include \"ErrorsObj.h\"\n\nNUMBER n;\nSTRING p;\n\nprogram\n
    \   _:\n    AskText(\"ファイルのパスを入力してください。\", \"\", p);\n\n    try\n        if (!Is(FILE_EXISTS,
    p)) then\n            Err.Raise(OBJ_STATUS_FILENOTFOUND);\n        endif;\n        MessageBox(\"指定されたファイルは存在します。\",
    INFORMATION);\n    catch\n        n = Err.Number;\n        switch (n)\n            case
    OBJ_STATUS_FILENOTFOUND : \n                MessageBox(\"指定されたファイルは存在しません。\",
    WARNING);\n            default : \n                MessageBox(Err.Description,
    SEVERE);\n        endswitch;\n    endcatch;\n\n    if (AskYesNo(\"パスを再入力しますか?
    \", YES) = YES) goto _;\n\n    abort;\nendprogram\n"
  :tags:
  - InstallShield
  :references:
    :url: 
    :title: 
- :id: '8884'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8884
  :user_name: vtwntmtn
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2009/05/04 07:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    -module(exception).
    -export([exception/0]).

    f() -&gt; throw("exception").

    exception() -&gt;
        X =  try f()
        catch
            throw : Y -&gt; "catch : " ++ Y
        end,
        io:format(X).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8962'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/8962
  :user_name: Otter
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/497/
  :language: Haskell
  :time: 2009/05/20 03:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Haskellの例外処理は世代がいくつかあるみたいですが、Control.Exceptionのやつを使ってみました…</p>\n\n\t"
  :code: "module Main where\n\nimport Prelude hiding (catch)\nimport Control.Exception\n\nthrower
    :: IO ()\nthrower = do\n    putStrLn \"thrower throws exception\"\n    throwIO
    (ErrorCall \"can't call this\")\n\ncatcher :: ErrorCall -&gt; IO ()    \ncatcher
    e = putStrLn $ \"caught \\\"\" ++ (show e) ++ \"\\\" exception.\"\n\nmain = catch
    thrower (catcher)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9107'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/9107
  :user_name: yamamoto
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1064/
  :language: Scala
  :time: 2009/06/10 17:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>いろいろな例外。</p>\n\n\t"
  :code: "object ExceptionSample {\n  def main(args : Array[String]) : Unit = {\n
    \   try{\n      val a = Array(1,2,3)\n      println (a(5)) // --&gt; java.lang.ArrayIndexOutOfBoundsException\n
    \     val f=new java.io.FileReader(\"\\\\.txt\") // --&gt;java.io.FileNotFoundException\n
    \     val re = \"[A-Za-0]\".r //--&gt; java.util.regex.PatternSyntaxException\n
    \     \n      ()\n    }catch{\n      case e:java.io.IOException =&gt; println(
    \"IO Err \"+e)\n      case e:Exception =&gt; println (\"Err \"+e)\n      case
    _ =&gt; println (\"Unknown error\")\n    }finally{\n      println (\"Done\")\n
    \   }\n    \n  }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9206'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/9206
  :user_name: ワサビ
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1045/
  :language: OCaml
  :time: 2009/06/19 21:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  F#ではtry～withで例外処理を行えます。\r<br>with部分で例外の種類を特定するのにパターンマッチを使用する点が特徴です。\n\t"
  :code: |
    #light

    open System

    exception Original of string * string    // F#例外の定義

    type Example() =
        member this.Func() =
            Original("ユーザー定義例外", "例外発生") |&gt; raise
        interface IDisposable with
            member this.Dispose() =
                printfn "資源解放"

    try
        use ex = new Example()
        ex.Func()
    with
        | :? NullReferenceException as e -&gt;  // .NET例外の捕捉
            printfn "ぬるぽ　%s" e.Message
            rethrow()
        | Original(name, msg) -&gt;             // F#例外の捕捉
            printfn "例外名：%s　メッセージ：%s" name msg
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '10481'
  :parent_id: '245'
  :url: http://ja.doukaku.org/comment/10481
  :user_name: rennos
  :user_url: /web/20100628134232/http://ja.doukaku.org/user/1024/
  :language: 
  :time: 2010/05/01 00:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ※注意\r<br>この finally は (Java などでいう) finally ではなく、(C++でいう) catch(...) 、 switch の default のようなものです。\r<br>勘違いしていました。\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
