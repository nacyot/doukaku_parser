---
:id: '181'
:title: コード中の文字の頻度分析
:comments:
- :id: '6382'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6382
  :user_name: crane
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/458/
  :language: 
  :time: 2008/05/30 14:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <div class=\"section\">\n<p>プログラムコード中の文字の頻度は言語によって相当にばらつきがあると思います。ある言語はピリオドが頻出するとか、別の言語はカッコの頻出頻度が高い、とか。そこで、\r</p>\n<ul>\n<li>\n
    文字の頻度解析をするプログラムを作成し、\r\n</li>\n<li> 適当なプログラムに対して実行し、結果を出力して、そのような頻度になっている理由を教えてください。\r</li>\n</ul>\n<p>(その言語で書かれた「典型的な」プログラムコード、といえるようなものがあると良いのですが・・）\r</p>\n<p>簡単すぎるという方は、複数文字にしてみたり単語の頻度にしてみてください。\r</p>\n<p>\r</p>\n<p>参考；Wikipedia
    頻度分析\r</p>\n<p>http://ja.wikipedia.org/wiki/%E9%A0%BB%E5%BA%A6%E5%88%86%E6%9E%90</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6490'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6490
  :user_name: crane
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/458/
  :language: awk
  :time: 2008/06/13 23:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <p>出題者です。\nこちらで用意していた回答は awk を使ったものでした。一応解説すると、組み込み変数FSを空にし、１行単位の文字毎に連想配列に格納しています。</p>\n\r\n\t"
  :code: |
    # １文字版
    BEGIN { FS="" }
    { for (i=1; i&lt;=NF; i++) ht[$i]++}
    END { for (c in ht) print ht[c],c }

    # ３文字版
    BEGIN { FS="" }
    { for (i=1; i&lt;=NF-2; i++) { ht[$i$(i+1)$(i+2)]++}}
    END { for (c in ht) print ht[c],c }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6447'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6447
  :user_name: sumim
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/06/07 10:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n<p>とりあえず、自身のソースコード文字列を得て解析結果を返すもの。</p>\n\n\t"
  :code: |
    | sourceString |
    sourceString := thisContext method decompileString.

    ^sourceString asBag sortedCounts
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6448'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6448
  :user_name: sumim
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/06/07 11:00 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <p>Squeak Smalltalk は、組み込みクラスのみならず処理系自体も Smalltalk 自身で記述されていて、その全ソースコードを処理系内からアクセスできるようになっています。そこで、これを解析してみました。</p>\n<p>使用したコード（全クラスの全メソッドのソースを得てその文字列中の文字を
    bag に蓄積し、最後に頻度順にソート）と、全 13638278 文字中、1000 文字以上使われている文字の頻度を示します。</p>\n<p>原則、Smalltalk
    は読み下したときに英文っぽくなるような命名をするので、結果、英単語における使用頻度（E、T、A、O、I、N…）に準ずる結果になりますが、記号については、キーワードメッセージで引数の前に使われるコロン、式の区切りのピリオドのほかにリテラルに使用する記号が比較的多くなるはずで、じっさいそのようになっています。</p>\n<p>余談ですが、改行文字の数から、Squeak
    Smalltalk システムは約 30 万行の Smalltalk コードで記述されていることも分かります。これと同じことを一桁少ない行数で記述できる言語処理系を作るチャレンジが、今、アラン・ケイたちが取り組んでいるプロジェクトです。</p>\n<p><a
    class=\"reference\" href=\"/web/20081121101818/http://vpri.org/html/work/ifnct.htm\">http://vpri.org/html/work/ifnct.htm</a></p>\n<p>1444427-&gt;Character
    space  1184081-&gt;$e  783875-&gt;$t  692975-&gt;$r  657882-&gt;$a  622461-&gt;$s
    \ 597060-&gt;$o  575035-&gt;$i  559122-&gt;$n  513017-&gt;Character tab  509706-&gt;$l
    \ 340916-&gt;Character cr  308729-&gt;$c  304427-&gt;$d  299400-&gt;$:  250870-&gt;$f
    \ 233671-&gt;$m  228063-&gt;$u  223102-&gt;$h  210051-&gt;$p  167306-&gt;$.  152494-&gt;$g
    \ 127057-&gt;$1  113908-&gt;$y  108249-&gt;$b  101596-&gt;$w  101168-&gt;$6  98043-&gt;$S
    \ 88101-&gt;$0  80005-&gt;$C  79576-&gt;$v  75559-&gt;$\"  74041-&gt;$2  69815-&gt;$T
    \ 66799-&gt;$F  63860-&gt;$'  63131-&gt;$x  61565-&gt;$[  61564-&gt;$]  59878-&gt;$A
    \ 57766-&gt;$3  57378-&gt;$)  57345-&gt;$(  55143-&gt;$4  52495-&gt;$7  51905-&gt;$k
    \ 49030-&gt;$5  48466-&gt;$P  48187-&gt;$N  46052-&gt;$B  45787-&gt;$=  44959-&gt;$M
    \ 40782-&gt;$8  40730-&gt;$I  38608-&gt;$^  37685-&gt;$|  37462-&gt;$D  35494-&gt;$9
    \ 33225-&gt;$-  31526-&gt;$O  30804-&gt;$R  30157-&gt;$_  29878-&gt;$E  25376-&gt;$z
    \ 24698-&gt;$L  23217-&gt;$#  20746-&gt;$,  19200-&gt;$W  18588-&gt;$V  14915-&gt;$j
    \ 13496-&gt;$U  12687-&gt;$;  11011-&gt;$H  10515-&gt;$/  10070-&gt;$+  9078-&gt;$q
    \ 7555-&gt;$&gt;  7128-&gt;$G  6569-&gt;$K  6320-&gt;$@  5752-&gt;$&lt;  4510-&gt;$*
    \ 4043-&gt;$Y  3973-&gt;$X  3040-&gt;${  3019-&gt;$}  2887-&gt;$$  2624-&gt;Character
    lf  2586-&gt;$Q  2436-&gt;$J  2193-&gt;$Z  1361-&gt;$~  1104-&gt;$ 1097-&gt;$?
    \ 1004-&gt;$!</p>\n\n\t"
  :code: |
    | bag |
    bag := Bag new.
    'Analyzing all source code...'
        displayProgressAt: Sensor cursorPoint
        from: 0 to: Smalltalk classNames size
        during: [:bar |
            | count |
            count := 0.
            SystemNavigation default allBehaviorsDo: [:class |
                bar value: (count := count + 1).
                class selectorsDo: [:sel | bag addAll: (class sourceCodeAt: sel)]]].
    ^bag sortedCounts
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '6449'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6449
  :user_name: kozima
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2008/06/07 12:01 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ファイル内のアスキー文字の出現回数をまとめて表示させるようにしました。\n仕様上は文字の内部表現がアスキーコードとは限らないので手抜きといえば手抜きかもしれません。</p>\n<p>これを使って手元にあった
    xyzzy のソース src/*.cc と lisp/*.l を比較してみました。</p>\n<p>C++ ではループなどでよく使いそうな + と等号、不等号
    が多いです。\nブロックに使う {} もかなりの差がありました。\nまたネーミングの慣習から _ でも大きな差が出ました。</p>\n<p>Lisp では予想通り
    () が多く、割合が C++ の二倍を超えています。\nまたマクロ文字として使われる # やクオート、バッククオートがたくさん出てきます。\nそれから \\
    や ^ の数が多かったのですが、これは正規表現で多用されているようなのでサンプルの性質によるところが大きそうです。\nそれ以外ではシンボル名に多用される -
    で大きな差が付いています。\n同じくシンボル名に使われる * や format 指定子に使われる ~ も多めでした。</p>\n<p>その他の記号類と大文字は
    C++ の方が多めになるようです。</p>\n\n\t"
  :code: |
    (defun frequency (files)
      (let ((v (make-array 127 :initial-element 0)))
        (dolist (file files v)
          (with-open-file (s file :direction :input)
            (loop
              as c = (read-char s nil)
              while (characterp c)
              if (&lt; (char-code c) 127) do (incf (svref v (char-code c))))))))

    (defun print-frequency (files)
      (let ((v (frequency files)))
        (format t "~{~4@{~10S ~6D~^ ~}~%~}"
                (loop for n across v and i from 0
                  if (plusp n) nconc (list (code-char i) n)))
        (format t "~&amp;Total: ~D characters~%" (reduce #'+ v))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6450'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6450
  :user_name: nobsun
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2008/06/07 12:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>&gt; Lisp では予想通り () が多く、割合が C++ の二倍を超えています。</p>\n<p>へぇー。2倍程度なんだ。意外にC++ってかっこが多いんですね
    :)</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6451'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6451
  :user_name: tsuwabuki
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/479/
  :language: Haskell
  :time: 2008/06/07 13:39 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>表示が手抜きです</p>\n<p>$ runhaskell 6382.hs &lt; 6382.hs\n[('n',5),('
    ',17),('&amp;',3),('(',1),(')',1),('.',5),('=',3),('&gt;',2),('A',1),('C',2),('D',1),('L',1),('a',5),('d',1),('e',6),('f',2),('g',3),('h',2),('i',5),('l',2),('m',4),('n',6),('o',8),('p',5),('q',2),('r',10),('s',3),('t',11),('u',1),('w',1)]</p>\n\n\t"
  :code: |
    import Data.List
    import Control.Arrow

    main = getContents &gt;&gt;= print . freq

    freq = map (head &amp;&amp;&amp; length) . group . sort
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6460'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6460
  :user_name: nori
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2008/06/10 02:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>httplib.pyを解析させました。\r</p>\n<p>spaceが多いのはインデントのせいでしょう。\r</p>\n<p>\r</p>\n<p>辞書いいです。\r</p>\n<p>\r</p>\n<p>\r</p>\n<p>[nori@Asama]~/Desktop/study/python/code%
    python count.py /usr/lib64/python2.4/httplib.py\r</p>\n<p>{'\\n': 1370, ' ': 14394,
    '\"': 262, '(': 385, '*': 15, ',': 317, '.': 707, '0': 131, '2': 46, '4': 36,
    '6': 16, '8': 6, ':': 337, '&lt;': 12, '&gt;': 23, 'B': 22, 'D': 55, 'F': 52,
    'H': 93, 'L': 78, 'N': 210, 'P': 112, 'R': 148, 'T': 313, 'V': 13, 'X': 25, 'Z':
    4, '\\\\': 22, '`': 5, 'b': 215, 'd': 859, 'f': 1013, 'h': 761, 'j': 24, 'l':
    1444, 'n': 1682, 'p': 606, 'r': 1429, 't': 1968, 'v': 182, 'x': 68, 'z': 26, '|':
    19, '~': 1, '!': 12, '#': 224, '%': 18, \"'\": 220, ')': 390, '+': 21, '-': 127,
    '/': 39, '1': 110, '3': 18, '5': 20, '7': 6, '9': 19, ';': 8, '=': 440, '?': 8,
    'A': 84, 'C': 109, 'E': 195, 'G': 16, 'I': 106, 'K': 17, 'M': 31, 'O': 104, 'Q':
    22, 'S': 163, 'U': 64, 'W': 23, 'Y': 12, '[': 53, ']': 54, '_': 615, 'a': 1247,
    'c': 809, 'e': 3748, 'g': 253, 'i': 1345, 'k': 254, 'm': 324, 'o': 1443, 'q':
    60, 's': 2200, 'u': 579, 'w': 206, 'y': 169, '{': 5, '}': 5}\r</p>\n</div>\n\t"
  :code: |
    import sys

    fn = sys.argv[1]

    if not fn:
      sys.exit(1)

    hist = dict()
    f = file(fn)
    buf = f.read(1000)
    while buf:
      for ch in buf:
        count = hist.get(ch, 0)
        count +=1
        hist.update({ch:count})
      buf = f.read(1000)
    print hist
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6461'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6461
  :user_name: Nemo
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/06/10 13:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PostScript で... \r\n自分自身を食わせると \r\n32 ( ) 293\r\n10
    [*] 61\r\n101 (e) 51\r\n114 (r) 48\r\n116 (t) 47\r\n111 (o) 42\r\n112 (p) 34\r\nくらいで、roll,
    copy, exch あたりのスタック操作命令が結構稼いでいるかと思います。\r\n(t はコメントと変数名が...)\r\n一般的な PostScript
    File の傾向は.... あまりに傾向が散らばりすぎてよくわかりません。\r\n例えば PhotoShop で作成した巨大bitmap の eps file
    などでは、\r\nコードよりも圧倒的に多量の embed されたデータが傾向を\r\n決めることになってしまいます。\r\n</pre>\n\t"
  :code: "%!PS\n\n/CompareVal { % [I1 V1] [I2 V2] CompareXY [I1 V1] [I2 V2] V2-V1\n
    \   2 copy 1 get exch 1 get sub \n} bind def\n\n/Sort { % [[x y] [x1 y1] Array
    Data ] {CompareFunction}  Sort [ArrayData]\n    cvx [ 3 -1 roll\n    aload length\n
    \   % func -mark[- [] [] [] [] [] len\n    -1 2 { % func -mark[- [] [] [] [] []
    len2\n        -1 2 {\n            3 1 roll\n            counttomark 1 add index
    exec  %% Compare\n            0 lt { exch } if\n            3 -1 roll\n            1
    roll\n        } for\n        counttomark 1 roll\n    } for\n    counttomark 1
    roll\n    ] exch pop\n} bind def\n\n\n/CountLetters {\n    [ 0 1 255 { [ exch
    0 ] } for ]\n    {\n        dup 2 index read\n        {\n            % array code\n
    \           get dup 1 get 1 add 1 exch put\n        } {\n            exit\n        }
    ifelse\n    } loop\n    /CompareVal Sort\n    exch pop exch pop\n} bind def\n\n\n/PrintResult
    {\n    0 1 255 {\n        2 copy get\n        % [Array] i [I V]\n        dup 0
    get dup dup dup 3 string cvs print ( ) print\n        32 ge exch 127 lt and {\n
    \           % [Array] i [I V] I \n            (( ) ) dup 1 4 -1 roll put print\n
    \       } {\n            ([*] ) print\n            pop\n        } ifelse\n        1
    get =\n        pop \n    } for\n    pop\n} bind def\n\n%(countletter2.ps) (r)
    file CountLetters\n(%stdin) (r) file CountLetters\nPrintResult\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6462'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6462
  :user_name: syat
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2008/06/10 08:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  JavaScriptの代表例ということで、prototype.jsを対象としました。\r<br>ついでにファイルの読み込みをAjaxで。\r<br><br>試すときは、以下をfreq.htmlなどの名前で保存し、prototype.jsを同じところに置いて、htmlを開くだけです。\r<br>IEで見る場合は、11行目をコメントにし、代わりに16行目をコメント解除してください。\r<br><br>＜結果＞\r<br>文字\tCode\t数\t頻度\r<br>' '\t20\t24616\t0.19183441267466236\r<br>e\t65\t10917\t0.08507703457788791\r<br>t\t74\t8301\t0.06469034203820168\r<br>n\t6e\t6215\t0.048433980938130755\r<br>r\t72\t4873\t0.03797567000989721\r<br>o\t6f\t4204\t0.03276210070215634\r<br>（省略）\r<br><br>結果は、・・・普通です。\r<br>プログラム言語は全般的に「 t 」をよく使うのでしょうか。\r<br>記号で多いのは、丸括弧が2616個、ドットが2534個、セミコロン1779個で、\r<br>以下、「＝」1498、「，」1396、「-」1067、「’」1058、波括弧937と続きます。\n\t"
  :code: "&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\" src=\"prototype.js\"&gt;&lt;/script&gt;\n&lt;script
    type=\"text/javascript\"&gt;\nfunction log(s) {\n    $('resultArea').innerHTML
    += (new Date().toString() + \" \" + s + '&lt;br&gt;\\n');\n}\n/* 対象ファイルを要求する */\nfunction
    init() {\n    var ajax = new Ajax.Request(\n       'prototype.js',   // 頻度分析対象ファイル\n
    \      /* IEの場合、XMLHttpRequestでローカルファイルにアクセスできないため\n        * 自前のサーバに設置するか、\n
    \       * 以下のコメントを外して本家からお借りして下さい。\n        *  （こっちはFirefoxでは動きません。。。） */\n       //
    'http://www.prototypejs.org/assets/2007/11/6/prototype.js',\n       {\n           method:
    'get',\n           onComplete: function(req) {\n               log(\"Request completed\");\n
    \              freq(req.responseText);\n           }\n       });\n    log(\"Request
    sent\");\n}\n/* 文字列中の文字頻度を測定し、結果を表示する */\nfunction freq(s) {\n    // 頻度の集計\n    var
    hist = {};\n    for (var i = 0; i &lt; s.length; i++) {\n        var ch = s.charCodeAt(i);\n
    \       if (hist[ch] == undefined)\n            hist[ch] = { moji: ch, count:1
    };\n        else\n            hist[ch].count++;\n    }\n    \n    var report =
    \"&lt;table border=\\\"1\\\"&gt;\\n&lt;tr&gt;\"\n               + \"&lt;td&gt;文字&lt;/td&gt;\"\n
    \              + \"&lt;td&gt;Code&lt;/td&gt;\"\n               + \"&lt;td&gt;数&lt;/td&gt;\"\n
    \              + \"&lt;td&gt;頻度&lt;/td&gt;\\n\";\n    // 頻度を出現回数の昇順でならびかえ、表で表示\n
    \   Object.values(hist)\n        .sort(function(a, b) { return b.count - a.count;
    })\n        .each(function(o) {\n            report += \"&lt;tr&gt;&lt;td&gt;\"
    + String.fromCharCode(o.moji) + \"&lt;/td&gt;\";\n            report += \"&lt;td&gt;\"
    + o.moji.toString(16) + \"&lt;/td&gt;\";\n            report += \"&lt;td style=\\\"text-align:
    right;\\\"&gt;\" + o.count + \"&lt;/td&gt;\";\n            report += \"&lt;td&gt;\"
    + (o.count / s.length)  + \"&lt;/td&gt;&lt;/tr&gt;\\n\";\n        });\n    report
    += \"&lt;/table&gt;\";\n    log(report);\n}\n&lt;/script&gt;&lt;/head&gt;\n&lt;body
    onload=\"init();\"&gt;\n&lt;div id=\"resultArea\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n"
  :tags: []
  :references:
    :url: /web/20081121101818/http://www.prototypejs.org/download
    :title: prototype.js
- :id: '6463'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6463
  :user_name: turugina
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/760/
  :language: C
  :time: 2008/06/11 00:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">アプリケーションのソースじゃなくて、\r\ncygwin g++ の C++ ヘッダファイル群(全218個)を分析してみました。\r\n\r\n
    \ 1:0x20  548301 (0.20355)\r\n  2:   e  189982 (0.07053)\r\n  3:   t  166220 (0.06171)\r\n
    \ 4:   _  144935 (0.05380)\r\n  5:   r  117461 (0.04361)\r\n  6:   a  113395 (0.04210)\r\n
    \ 7:   i  111175 (0.04127)\r\n  8:   s  103785 (0.03853)\r\n  9:   o   99888 (0.03708)\r\n
    10:   n   98172 (0.03644)\r\n 11: 0xa   81784 (0.03036)\r\n 12:   l   62672 (0.02327)\r\n
    13:   c   61995 (0.02301)\r\n 14:   p   55391 (0.02056)\r\n 15:   u   44881 (0.01666)\r\n&lt;以下省略&gt;\r\n\r\nスペースや改行は置いておくとして。\r\n上位10位以内で、int
    や iterator が\r\n(もうちょっと広げるとconst_iteratorも)\r\n作れるのが興味深いところかと。\r\n\r\n\"_\" が多いのはヘビ記法とローカル用識別子の影響かな。\r\n\r\n括弧の類を見てみると、\r\n\"(\",
    \")\" はそれぞれ24,25位(0.9%),\r\ntemplateにも使用する\"&lt;\", \"&gt;\" は それぞれ 38,33位 (0.4～0.5%),\r\n\"{\",
    \"}\" に至っては 44,45位(0.26%) となっていました。\r\n\r\n意外に括弧使ってないのね。。\r\n\r\nちなみに最下位は \"$\"
    (8件) でしたが、コメントの中かな...</pre>\n\t"
  :code: |
    #include &lt;map&gt;
    #include &lt;iostream&gt;
    #include &lt;iomanip&gt;
    #include &lt;algorithm&gt;
    #include &lt;vector&gt;
    #include &lt;functional&gt;
    #include &lt;fstream&gt;
    #include &lt;stdexcept&gt;
    #include &lt;numeric&gt;
    #include &lt;cctype&gt;
    #include &lt;iterator&gt;
    #include &lt;utility&gt;

    typedef std::map&lt;char, int&gt; freq_t;
    typedef std::vector&lt; std::pair&lt;char, int&gt; &gt; freqv_t;

    struct calc_freq
    : std::unary_function&lt; freq_t, char* &gt;
    {
      freq_t operator()(char* filename) const
      {
        std::ifstream ifs(filename);
        if ( !ifs )
          throw std::runtime_error(std::string("failed to open : ")+filename);

        freq_t f;
        while ( ifs )
        {
          int c = ifs.get();
          if (c &gt;= 0) ++f[c];
        }

        return f;
      }
    };

    struct merge_freq
    : std::binary_function&lt;freq_t, freq_t, freq_t&gt;
    {
      freq_t&amp; operator()(freq_t&amp; lhs, const freq_t&amp; rhs) const
      {
        for ( freq_t::const_iterator it = rhs.begin();
            it != rhs.end(); ++it )
          lhs[it-&gt;first] += it-&gt;second;

        return lhs;
      }
    };

    struct count_total
    : public std::binary_function&lt; int, int, freq_t::value_type &gt;
    {
      int&amp; operator()(int&amp; total, const freq_t::value_type&amp; v) const
      {
        return total += v.second;
      }
    };

    template&lt;class C&gt;
    struct freq_print_each
    : std::unary_function&lt; void, typename C::value_type &gt;
    {
      std::size_t total_;
      mutable std::size_t i_;
      freq_print_each&lt;C&gt;(std::size_t total) : total_(total), i_(0) {}

      void operator()(const typename C::value_type&amp; v) const
      {
        std::cout &lt;&lt; std::setw(3) &lt;&lt; ++i_ &lt;&lt; ":" &lt;&lt; std::setw(4);
        if ( !isprint(v.first) || isspace(v.first) )
          std::cout &lt;&lt; std::showbase &lt;&lt; std::hex
                     &lt;&lt; static_cast&lt;int&gt;(v.first) &lt;&lt; std::dec;
        else
          std::cout &lt;&lt; v.first;

        std::cout &lt;&lt; std::setw(8)
          &lt;&lt; v.second &lt;&lt; " ("
          &lt;&lt; std::setprecision(5) &lt;&lt; std::fixed
          &lt;&lt; static_cast&lt;double&gt;(v.second)/total_
          &lt;&lt; ")\n";
      }
    };

    template &lt;class C&gt;
    struct sorter
    : std::binary_function&lt;bool, typename C::value_type, typename C::value_type&gt;
    {
      typedef typename C::value_type value_type;
      bool operator()(const value_type&amp; lhs, const value_type&amp; rhs) const
      {
        return lhs.second &gt; rhs.second;
      }
    };

    int main(int c, char** v)
    {
      try {
        std::vector&lt; freq_t &gt; freqs;
        std::transform(v+1, v+c, std::back_inserter(freqs), calc_freq());

        const freq_t all_freq = std::accumulate(freqs.begin(), freqs.end(), freq_t(), merge_freq());
        const int total = std::accumulate(all_freq.begin(), all_freq.end(), 0, count_total());

        freqv_t all_freq2;
        all_freq2.reserve(all_freq.size());

        std::copy(all_freq.begin(), all_freq.end(), std::back_inserter(all_freq2));
        std::sort(all_freq2.begin(), all_freq2.end(), sorter&lt;freqv_t&gt;());

        std::for_each(all_freq2.begin(), all_freq2.end(), freq_print_each&lt;freqv_t&gt;(total));
      }
      catch (const std::exception&amp; e) {
        std::cerr &lt;&lt; e.what() &lt;&lt; std::endl;
      }

      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6465'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6465
  :user_name: 匿名
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/06/11 07:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>自分自身を解析した結果(上位10件)。\n' ':305\n/'e':104\n/'t':93\n/0ah:76\n/'r':72\n/'s':61\n/'i':54\n/':':52\n/'a':51\n/'o':50</p>\n\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;iomanip&gt;
    #include &lt;fstream&gt;
    #include &lt;map&gt;
    #include &lt;list&gt;
    #include &lt;algorithm&gt;
    #include &lt;iterator&gt;
    #include &lt;cctype&gt;

    typedef std::map&lt;char, int&gt; freq_type;

    class Loader
    {
    public:
        explicit Loader(freq_type&amp; freq) : freq_(freq) {}

        void operator () (const char* filename)
        {
            std::ifstream src(filename);
            char c;
            while(src.get(c))
            {
                ++freq_[c];
            }
        }

    private:
        freq_type&amp; freq_;
    };

    bool comp(const freq_type::value_type&amp; lhs, const freq_type::value_type&amp; rhs)
    {
        return (lhs.second != rhs.second) ? (lhs.second &gt; rhs.second) : (lhs.first &lt; rhs.first);
    }

    std::ostream&amp; operator &lt;&lt; (std::ostream&amp; out, const freq_type::value_type&amp; value)
    {
        if(std::isprint(value.first))
        {
            out &lt;&lt; "'" &lt;&lt; value.first &lt;&lt; "'";
        }
        else
        {
            int fill = out.fill('0');
            out &lt;&lt; std::hex &lt;&lt; std::setw(2) &lt;&lt; (static_cast&lt;unsigned int&gt;(value.first) &amp; 0xffu) &lt;&lt; 'h' &lt;&lt; std::dec;
            out.fill(fill);
        }
        return out &lt;&lt; ":" &lt;&lt; value.second;
    }

    int main(int argc, char* argv[])
    {
        // 読み込み
        freq_type freq;
        std::for_each(argv + 1, argv + argc, Loader(freq));

        // 出現頻度で並べ替え
        std::list&lt;freq_type::value_type&gt; f(freq.begin(), freq.end());
        f.sort(comp);

        // 出力

    //  エラーになる理由がわからず…(;_;)マダマダ、ミジュクモノ…
    //  std::copy(f.begin(), f.end(), std::ostream_iterator&lt;freq_type::value_type&gt;(std::cout, "\n"));

        for(std::list&lt;freq_type::value_type&gt;::const_iterator i = f.begin(); i != f.end(); ++i)
        {
            std::cout &lt;&lt; *i &lt;&lt; std::endl;
        }

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6467'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6467
  :user_name: squld
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/643/
  :language: Java
  :time: 2008/06/11 23:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">自身の文字頻度の上位10個は以下のようになりました。\r\nソース中に英単語が多く現れているため、英文の文字頻度と近い気がします。\r\n\r\ne\t75\r\nt\t59\r\nSPACE\t54\r\nr\t54\r\nTAB\t52\r\na\t48\r\nn\t34\r\ni\t32\r\nu\t28\r\nCR\t27\r\np\t24</pre>\n\t"
  :code: |
    import java.io.BufferedInputStream;
    import java.io.FileInputStream;
    import java.io.IOException;
    import java.io.InputStreamReader;
    import java.util.Map;
    import java.util.TreeMap;

    public class Frequency {
        public static void main(String[] aArguments) throws IOException {
            Map&lt;Character, Integer&gt; tFrequencies = new TreeMap&lt;Character, Integer&gt;();
            InputStreamReader tReader = new InputStreamReader(new BufferedInputStream(new FileInputStream(aArguments[0])));
            try {
                int tChar;
                while ((tChar = tReader.read()) &gt;= 0) {
                    Integer tFrequency = tFrequencies.get((char) tChar);
                    if (tFrequency == null) {
                        tFrequencies.put((char) tChar, 1);
                    } else {
                        tFrequencies.put((char) tChar, tFrequency + 1);
                    }
                }
            } finally {
                tReader.close();
            }
            System.out.println(tFrequencies);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6468'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6468
  :user_name: takatoh
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/189/
  :language: Ruby
  :time: 2008/06/12 01:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">どういう訳かまだRubyがないので。\r\n\r\nnet/http.rbを対象にしてみました。\r\n空白を別にすれば，e
    が飛び抜けて多いのは end が多いのも影響\r\nしてるんでしょうか。\r\n\r\n\r\n^o^ &gt;ruby hist_char.rb c:/usr/ruby/lib/ruby/1.8/net/http.rb\r\n\"
    \": 18072\r\n\"e\": 4839\r\n\"t\": 2982\r\n\"s\": 2574\r\n\"r\": 2525\r\n\"n\":
    2290\r\n\"\\n\": 2274\r\n\"o\": 2245\r\n\"a\": 1945\r\n\"d\": 1757\r\n\"i\": 1700\r\n\"T\":
    1216\r\n\"l\": 1183\r\n\"p\": 1125\r\n\"#\": 1106\r\n（以下略）</pre>\n\t"
  :code: |
    src = File.read(ARGV.shift)

    hist = {}

    src.each_byte do |c|
      c = c.chr
      if hist.member?(c)
        hist[c] += 1
      else
        hist[c] = 1
      end
    end

    hist.to_a.sort{|a,b| b[1] &lt;=&gt; a[1]}.each do |pair|
      puts "#{pair[0].inspect}: #{pair[1]}"
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6469'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6469
  :user_name: tnk
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/30/
  :language: Java
  :time: 2008/06/12 08:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Javaはすでに出ていますが，以下のように改良してあります。\r<br>・コメント内の文字は集計に含めるとおかしくなりそうなので含めない\r<br>・JavaのソースコードはZIPファイルで提供されることが多いので，指定されたZIPファイル内のすべてのJavaソースファイルに対して集計を行う\r<br><br>JDK 1.6に付属のsrc.zipを集計してみました。\r<br>' '\t9328666\r<br>'e'\t2074804\r<br>'t'\t1744299\r<br>'n'\t1284657\r<br>'i'\t1246055\r<br>'r'\t1217281\r<br>'a'\t1167409\r<br>'o'\t1041531\r<br>'l'\t873609\r<br>'s'\t851094\r<br>'c'\t728897\r<br>'u'\t631196\r<br>'p'\t571200\r<br>'('\t514249\r<br>')'\t514079\r<br>'.'\t493002\r<br>'d'\t466367\r<br>'m'\t422504\r<br>';'\t418324\r<br>'g'\t417286\r<br>\\u0009\t403663\r<br>'f'\t339805\r<br>'b'\t311888\r<br>'h'\t272053\r<br>'S'\t271704\r<br>'='\t271260\r<br>'E'\t267436\r<br>','\t224844\r<br>'C'\t214651\r<br>'I'\t210502\r<br>"
  :code: |
    import java.io.InputStreamReader;
    import java.io.Reader;
    import java.io.StreamTokenizer;
    import java.util.Collections;
    import java.util.Enumeration;
    import java.util.Hashtable;
    import java.util.Vector;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipFile;

    public class CharCounter {
        public static void main(String[] args) throws Exception {
            Hashtable&lt;Character, Count&gt; counts = new Hashtable&lt;Character, Count&gt;();
            ZipFile file = new ZipFile(args[0]);
            Enumeration&lt;? extends ZipEntry&gt; entries = file.entries();
            while (entries.hasMoreElements()) {
                ZipEntry entry = entries.nextElement();
                if (!entry.getName().endsWith(".java")) continue;
                Reader src = new InputStreamReader(file.getInputStream(entry));
                StreamTokenizer tokenizer = new StreamTokenizer(src);
                tokenizer.resetSyntax();
                tokenizer.slashSlashComments(true);
                tokenizer.slashStarComments(true);
                while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {
                    if (tokenizer.ttype == StreamTokenizer.TT_EOL) continue;
                    char c = (char)tokenizer.ttype;
                    Count count = counts.get(c);
                    if (count == null) {
                        count = new Count(c);
                        counts.put(c, count);
                    }
                    count.n++;
                }
            }
            Vector&lt;Count&gt; ranking = new Vector&lt;Count&gt;();
            ranking.addAll(counts.values());
            Collections.sort(ranking);
            for (int i = 0; i &lt; ranking.size(); i++) {
                System.out.println(ranking.get(i));
            }
        }
        static class Count implements Comparable&lt;Count&gt; {
            char c;
            int n = 0;
            Count(char c) {
                this.c = c;
            }
            public int compareTo(Count o) {
                return (o.n == this.n)? 0 : (o.n &lt; this.n)? -1 : 1;
            }
            public String toString() {
                if (c &lt; ' ') {
                    return String.format("\\u%04x", (int)c) + "\t" + n;
                }
                return "'" + c + "'\t" + n;
            }
        }
    }
  :tags:
  - Java1.5
  :references:
    :url: 
    :title: 
- :id: '6485'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6485
  :user_name: genzou
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/13 21:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>jdk1.6に付属されていた\nサンプルソース「Intro.java」を解析しました。</p>\n<blockquote>\n[a]
    =    1557\n[e] =    2746\n[i] =    2116\n[l] =    1008\n[n] =    1981\n[r] =    1314\n[s]
    =    1209\n[t] =    2340</blockquote>\n<p>e,s,tが多いのは、\nsetter、getterメソッドのためでしょうか。\nint,String
    などもキーワードからも、\ni,r,tは多いのでしょうか。</p>\n\n\t"
  :code: |
    def text = new File("c:/Intro.java").text

    (0..(text.size()-1)).collect{
        text[it]
    }.unique().sort().each{
        def key = "[${it}]".padLeft(5)
        def value = text.count(it).toString().padLeft(7)
        println "${key} = ${value}"
    }
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '6490'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6490
  :user_name: crane
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/458/
  :language: awk
  :time: 2008/06/13 23:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>出題者です。\nこちらで用意していた回答は awk を使ったものでした。一応解説すると、組み込み変数FSを空にし、１行単位の文字毎に連想配列に格納しています。</p>\n\n\t"
  :code: |
    # １文字版
    BEGIN { FS="" }
    { for (i=1; i&lt;=NF; i++) ht[$i]++}
    END { for (c in ht) print ht[c],c }

    # ３文字版
    BEGIN { FS="" }
    { for (i=1; i&lt;=NF-2; i++) { ht[$i$(i+1)$(i+2)]++}}
    END { for (c in ht) print ht[c],c }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6494'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6494
  :user_name: 匿名
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/06/14 17:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">以下でもOKですね。\r\n\r\nhist = Hash.new(0)\r\nsrc.each_byte
    do |c|\r\n  hist[c.chr] += 1\r\nend\r\n\r\n</pre>\n\t"
  :code: ''
  :tags:
  - Ruby1.8.6
  :references:
    :url: 
    :title: 
- :id: '6497'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6497
  :user_name: 匿名
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/06/14 14:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">文字数カウントは既に投稿されていたので、半角スペース・タブ・改行で区切って似非単語分割してみました。\r\ntypedefが少し汚いです・・・。\r\n分割はboost::tokenizerを使ってますが、ここをmecab等に置き換えればもう少し遊べるかもしれません。\r\n\r\n自分自身を分析：\r\n}
    :: 8\r\n#include :: 7\r\ntypedef :: 7\r\ni :: 6\r\n// :: 5\r\n= :: 4\r\n&lt;&lt;
    :: 4\r\n!= :: 4\r\ni++){ :: 3\r\n&gt; :: 3\r\nreturn :: 2\r\nFreqmapCIter&amp;
    :: 2\r\ncount(std::string :: 2\r\nFreqmap* :: 2\r\nstr, :: 2\r\n{ :: 2\r\n\" ::
    2\r\nint :: 2\r\nvoid :: 2\r\noperator()(const :: 1\r\n</pre>\n\t"
  :code: "// frequency analysis\n\n#include &lt;string&gt;\n#include &lt;vector&gt;\n#include
    &lt;map&gt;\n#include &lt;algorithm&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include
    &lt;boost/tokenizer.hpp&gt;\n\n\ntypedef std::map&lt; std::string, int &gt; Freqmap;\ntypedef
    Freqmap::value_type FreqmapType; \ntypedef Freqmap::const_iterator FreqmapCIter;\ntypedef
    std::vector&lt; FreqmapCIter &gt; FreqmapCIterVec;\ntypedef FreqmapCIterVec::const_iterator
    FreqmapCIterVecCIter;\n\n\nstruct FreqmapCIterVecSort{\n    bool operator()(const
    FreqmapCIter&amp; lhs, const FreqmapCIter&amp; rhs){\n    return (lhs-&gt;second
    &gt; rhs-&gt;second);// ordered by desc\n    }\n};\n\n\nvoid count(std::string
    str, Freqmap* vec);\n\n\nint main(int argc, char* argv[])\n{\n    // open\n    std::ifstream
    ifs(argv[1]);\n\n    // count\n    Freqmap map;\n    std::string strbuf;\n    while(ifs
    &amp;&amp; getline(ifs, strbuf)){\n    count(strbuf, &amp;map);\n    }\n    ifs.close();\n\n\n
    \   // sort\n    FreqmapCIterVec mapvec;\n    for(FreqmapCIter i = map.begin();
    i != map.end(); i++){\n    mapvec.push_back(i);\n    }\n    std::sort(mapvec.begin(),
    mapvec.end(), FreqmapCIterVecSort());\n\n    // output\n    for(FreqmapCIterVecCIter
    i = mapvec.begin(); i != mapvec.end(); i++){\n    std::cout &lt;&lt; (*i)-&gt;first
    &lt;&lt; \" :: \" &lt;&lt; (*i)-&gt;second &lt;&lt; std::endl;\n    }\n\n    return
    0;\n}\n\n\n\ntypedef boost::char_separator&lt;char&gt; Sep;\ntypedef boost::tokenizer&lt;Sep&gt;
    Tok;\n\n\nvoid count(std::string str, Freqmap* map)\n{\n    Sep sep(\" \\t\\n\");\n
    \   Tok tok(str, sep);\n    Freqmap::iterator mapiter;\n\n    for(Tok::iterator
    i = tok.begin(); i != tok.end(); i++){\n    mapiter = map-&gt;find(*i);\n    if(mapiter
    != map-&gt;end()){\n        mapiter-&gt;second++;\n    }else{\n        map-&gt;insert(std::pair&lt;std::string,
    int&gt;(*i, 1));\n    }\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6502'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6502
  :user_name: syat
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/766/
  :language: Brainf
  :time: 2008/06/14 22:46 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  Brainf*ckで。文字列を入力し、最後に「＄」を入力するとヒストグラムを表示します。\r<br><br>コメントなし版を入力した結果\r<br>++++++++++++++++++++++++++++++++++++++\r<br>,\r<br>-------------------------\r<br>..\r<br>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\r<br>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\r<br>[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[\r<br>]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]\r<br><br>記号が多いですね（笑）\r<br>「＞」69、「＜」57、「＋」38、角括弧30、「－」25。\r<br>入出力（．，）はごく少数。\r<br><br>ほとんどチューリングマシンなのでポインタの移動が多くなります。＋はデータの作成に多用します。\n\t"
  :code: |
    ●コメント版
    +[&gt;                        # while ({0})  do
      +&gt;,&lt;                     #   {1} = 1 ; {2} = getchar()
      &gt;                        # ** dollar check **
       &gt;&gt;++++++[-&lt;++++++&gt;]&lt;&lt;   #   {3} = 36 dollar
                               # ** compare {3} &amp; {4} **
       [-&gt;&gt;+&gt;+&lt;&lt;&lt;]             #   {@2:@3} = !{@0}
       &gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;        #   {@0} = !{@3}
       &gt;[-&gt;-&gt;+&lt;&lt;]&lt;             #   {@2} = {@2} minus {@1} ; {@3} = !{@1}
       &gt;&gt;&gt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;&lt;          #   {@1} = !{@3}
       &gt;&gt;
       &gt;+&lt;[[-]&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;     # ** invert result **
       [[-]&lt;&lt;[-]&lt;[-]&lt;[-]&gt;&gt;&gt;&gt;]  #   {2:1:0} = 0
       &lt;[-]&gt;                   #   {3} = 0
       &lt;&lt;
      &lt;
      [&gt;                       # ** count up if input char is not dollar **
       [-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]        #   {8} = !{2}
       &gt;&gt;&gt;&gt;[-]&gt;[-]&gt;            #   {6:7} = 0 ; move to {8}
       [- [-&gt;&gt;+&lt;&lt;]+&gt;&gt; ]        # ** extend arm to {8 plus (charcode times 2)} **
       &gt;+&lt;                     # ** count up **
       &lt;&lt;[[-]&lt;&lt;]               # ** reduce arm **
       &lt;&lt;&lt;&lt;
       [-]&lt;[-]&gt;                #   {2:1} = 0
      &lt;]
    &lt;]                         # end   ** next char **
    # show result
    &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; &gt;&gt;+
    [
      &gt;[[-&lt;.&gt;]++++++++++.[-]]&lt;
      [-&gt;&gt;+&lt;&lt;]&gt;&gt;+
    ]

    ●コメントなし版
    +[&gt;+&gt;,&lt;&gt;&gt;&gt;++++++[-&lt;++++++&gt;]&lt;&lt;[-&gt;&gt;+&gt;+&lt;&lt;&lt;]&gt;&gt;&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;&lt;&gt;[-&gt;-&gt;+&lt;&lt;]&lt;&gt;&gt;&gt;[-&lt;&lt;+&gt;&gt;]&lt;&lt;&lt;&gt;&gt;&gt;+&lt;[[-]&gt;-&lt;]&gt;[-&lt;+&gt;]&lt;[[-]&lt;&lt;[-]&lt;[-]&lt;[-]&gt;&gt;&gt;&gt;]&lt;[-]&gt;&lt;&lt;&lt;[&gt;[-&gt;&gt;&gt;&gt;&gt;&gt;+&lt;&lt;&lt;&lt;&lt;&lt;]&gt;&gt;&gt;&gt;[-]&gt;[-]&gt;[-[-&gt;&gt;+&lt;&lt;]+&gt;&gt;]&gt;+&lt;&lt;&lt;[[-]&lt;&lt;]&lt;&lt;&lt;&lt;[-]&lt;[-]&gt;&lt;]&lt;]&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;+[&gt;[[-&lt;.&gt;]++++++++++.[-]]&lt;[-&gt;&gt;+&lt;&lt;]&gt;&gt;+]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6511'
  :parent_id: '181'
  :url: http://ja.doukaku.org/comment/6511
  :user_name: sekia
  :user_url: /web/20081121101818/http://ja.doukaku.org/user/588/
  :language: Perl
  :time: 2008/06/15 15:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Perlで。思っていたよりは記号が少ないです。\r\n\r\n自身を入力にした結果:\r\nTotal:
    681 character(s)\r\nCharacter Count Frequency[%]\r\n' '       111    16.30      \r\n'!'
    \        2     0.29      \r\n'\"'         8     1.17      \r\n'#'         1     0.15
    \     \r\n'$'        29     4.26      \r\n'%'         4     0.59      \r\n'''
    \        2     0.29      \r\n'('         6     0.88      \r\n')'         6     0.88
    \     \r\n'*'         2     0.29      \r\n...\r\n</pre>\n\t"
  :code: |-
    #!/usr/bin/perl

    use strict;
    use warnings;
    use utf8;

    use Text::Table;

    my $src_file;
    if (@ARGV) { open $src_file, "&lt;:utf8", shift or die $!; }
    else { $src_file = \*STDIN; }

    my $src = do { local $/ = undef; &lt;$src_file&gt; };
    my $total_chars = 0;
    my %chars;

    for my $char ( split //, $src ) {
      $char =~ s/\n/\\n/;
      $char =~ s/\t/\\t/;
      if ( exists $chars{$char} ) { $chars{$char




    <!--
         FILE ARCHIVED ON 10:18:18 Nov 21, 2008 AND RETRIEVED FROM THE
         INTERNET ARCHIVE ON 13:05:36 Nov 16, 2013.
         JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

         ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
         SECTION 108(a)(3)).
    -->
  :tags: []
  :references:
    :url: 
    :title: 
