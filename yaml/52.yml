---
:id: '52'
:title: 与えられた文字列でピラミッド
:comments:
- :id: '3408'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3408
  :user_name: にしお
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/08/28 16:31 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  「<a href=\"/web/20100605050114/http://ja.doukaku.org/8/\">ピラミッドを作る</a>」の続編です。\r\n与えられた文字列を使って下の例のようなピラミッドを書いてください。\r\n頂点は与えられた文字列の最後の一文字、\r\n底辺は与えられた文字列の各文字の間に空白が入ったものになります。\r\n<pre>\r\n&gt;&gt;&gt;
    pyramid(\"hoge\")\r\n   e   \r\n  g e  \r\n o g e \r\nh o g e\r\n</pre>\r\n\r\n<pre>\r\n&gt;&gt;&gt;
    pyramid(\"abracadabra\")\r\n          a          \r\n         r a         \r\n
    \       b r a        \r\n       a b r a       \r\n      d a b r a      \r\n     a
    d a b r a     \r\n    c a d a b r a    \r\n   a c a d a b r a   \r\n  r a c a
    d a b r a  \r\n b r a c a d a b r a \r\na b r a c a d a b r a\r\n</pre>\r\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2574'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2574
  :user_name: miyamuko
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/382/
  :language: xtal
  :time: 2007/08/28 17:09 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">末尾の空白の数がサンプル出力と違いますが、題意になかったのでスルーしました。\r\n\r\nchainは引数のイテレータを順番に実行するイテレータを返す関数です。</pre>\n\t"
  :code: |
    pyramid: fun(str) {
        space: [" "].cycle;
        arr: str.split("").to_a;
        n: arr.length;
        n.times.map(|i| i + 1){
            chain(space.take(n - it ),
                  arr.slice(n - it, n).zip(space).map(|a,b| a~b)).join("").p;
        }
    }

    pyramid("hoge");
    pyramid("abracadabra");
  :tags:
  - xtal0.9.7
  :references:
    :url: 
    :title: 
- :id: '2575'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2575
  :user_name: higeorange
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/194/
  :language: Io
  :time: 2007/08/28 17:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">文字を1文字づつ配列にするメソッドがあるのかどうかわからないので作りました。\r\nSequence
    split は 引数をあたえないと空白でわけるようです。</pre>\n\t"
  :code: "Sequence splitEvery := method(\n    l := list()\n    self foreach(v, \n
    \       l append(v asCharacter)\n    )   \n    return l\n)\npyramid := method(str,\n
    \   t := str size * 2 - 1 \n    for(i, 1, str size,\n        str slice(str size
    - i, str size) splitEvery join(\" \") alignCenter(t, \" \") println \n    )   \n)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2576'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2576
  :user_name: higeorange
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/194/
  :language: JavaScript
  :time: 2007/08/28 17:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    String.prototype.repeat = function(n) {
        for(var i=0, str=""; i &lt; n; i++) {
            str += this;
        }
        return str;
    }

    String.prototype.alignCenter = function(n, str) {
        var r = (n - this.length) / 2;
        return str.repeat(r) + this + str.repeat(r);
    }

    var pyramid = function(str) {
        var t = str.length * 2 - 1
        var res = ""
        for(var i=1, len=str.length; i&lt;=len; i++) {
            res += str.slice(str.length - i, str.length).split("").join(" ").alignCenter(t, " ") + "\n"
        }
        return res;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2579'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2579
  :user_name: higeorange
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/194/
  :language: JavaScript
  :time: 2007/08/28 17:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">String.alignCenter を修正\r\n</pre>\n\t"
  :code: |
    String.prototype.alignCenter = function(n, str) {
        var r = (n - this.length) / 2
        return str.repeat(Math.floor(r)) + this + str.repeat(Math.ceil(r));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2580'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2580
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: Ruby
  :time: 2007/08/28 19:11 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">瞬殺</pre>\n\t"
  :code: |
    str="abracadabra"; (str.length-1).downto(0) {|i| print(" "*i, str[i..-1].split(//).join(" "),"\n") }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2581'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2581
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/08/28 19:12 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  キモいコードでごめんなさい。\n\t"
  :code: |
    sub pyramid {
        my $i = my @py = split //, $_[0];
        print ' ' x $i . "@py[$i..$#py]\n" while $i--;
    }

    pyramid('hoge');
    pyramid('abracadabra');
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2582'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2582
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: Lua
  :time: 2007/08/28 19:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    function pyramid(str)
      len = string.len(str)
      for i=len, 1, -1 do
        io.stdout:write(string.rep(" ",i-1))
        for j=i, len, 1 do io.stdout:write(string.sub(str,j,j), " ") end
        io.stdout:write("\n")
      end
    end
    pyramid("abracadabra")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2583'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2583
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: Scheme
  :time: 2007/08/28 19:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Scheme用SLIMEがあればいいのに…</pre>\n\t"
  :code: |
    (use srfi-1)
    (define (pyramid str)
      (map
       (lambda (i)
         (format #t "~a~a~%" (make-string i)
                 (string-join (map string (string-&gt;list str i (string-length str))) " ")))
       (iota (- (string-length str) 0) (- (string-length str) 1) -1)))
    (pyramid "abracadabra")
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '2585'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2585
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: Common
  :time: 2007/08/28 20:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">loop以外で部分文字列の取り方がわからんorz</pre>\n\t"
  :code: |
    (defun pyramid (str)
      (loop for i from (1- (length str)) downto 0 do
           (format t "~a~a~%"
                   (make-string i :initial-element #\Space)
                   (apply #'concatenate 'string
                          (loop for c across str
                             for j from 0
                             when (&lt;= i j)
                             collect (format nil "~c~a" c " "))))))
    (pyramid "abracadabra")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2586'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2586
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: C
  :time: 2007/08/28 20:09 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    void pyramid(char *str) {
        int i,j,len;
        len = strlen(str);
        for (i=len-1; i&gt;=0; i--) {
            for(j=0; j&lt;i; j++) printf(" ");
            for(j=i; j&lt;len; j++) printf("%c%c", str[j], ' ');
            printf("\n");
        }
    }

    int main() {
        pyramid("abracadabra");
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2587'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2587
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: D
  :time: 2007/08/28 20:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">C書いた直後にDを書くと、文字列の扱いを混同してしまった</pre>\n\t"
  :code: |
    private import std.stdio;

    void pyramid(char[] str) {
        int i,j;
        for (i=str.length-1; i&gt;=0; i--) {
            for(j=0; j&lt;i; j++) writef(" ");
            for(j=i; j&lt;str.length; j++) writef("%s%s", str[j], " ");
            writef("\n");
        }
    }

    int main() {
        pyramid("abracadabra");
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2588'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2588
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: Emacs
  :time: 2007/08/28 20:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    (require 'cl)
    (defun pyramid (str)
      (interactive "sPyramid string: ")
      (with-output-to-temp-buffer "*Pyramid*"
        (loop for i from (1- (length str)) downto 0 do
              (princ (make-string i ? ))
              (princ (mapconcat 'identity (split-string (substring str i) "") " "))
              (terpri))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2589'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2589
  :user_name: rubikitch
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/105/
  :language: Bash
  :time: 2007/08/28 20:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Cと変わらねえｗｗ</pre>\n\t"
  :code: |
    function pyramid () {
        str=$1
        len=`expr length $str`
        for ((i=$len; i&gt;=1; i--)); do
            for ((j=0; j&lt;$i; j++)); do echo -n ' '; done
            for ((j=$i; j&lt;=$len; j++)); do
                echo -n `expr substr $str $j 1`' '
            done
            echo
        done
    }
    pyramid "abracadabra"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2590'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2590
  :user_name: shiro
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/08/28 23:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">文字列のインデックスアクセスも算術演算も明示的ループも無しで。\r\n</pre>\n\t"
  :code: |
    (use util.list)
    (define (pyramid s)
      (let r ((s (string-&gt;list s)) (p '()))
        (unless (null? s)
          (r (cdr s) (cons #\ p))
          (apply print (append p (intersperse #\  s))))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '2591'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2591
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/29 00:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">明示的算術演算なし版。自分では再帰も書かない版です。</pre>\n\t"
  :code: |
    import Data.List

    binapp o f g x = f x `o` g x
    pyramid = binapp (zipWith (++)) (map (map (const ' ')) . tail . tails)
                                    (map (intersperse ' ') . tail . inits)
    printPyramid = putStr . unlines . pyramid

    {-
    *Main&gt; printPyramid "abracadabra"
              a
             a b
            a b r
           a b r a
          a b r a c
         a b r a c a
        a b r a c a d
       a b r a c a d a
      a b r a c a d a b
     a b r a c a d a b r
    a b r a c a d a b r a
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2592'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2592
  :user_name: naoya_t
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/08/29 00:33 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">% awk -f pyramid.awk hogehogehoge\r\n           e
    \r\n          g e \r\n         o g e \r\n        h o g e \r\n       e h o g e
    \r\n      g e h o g e \r\n     o g e h o g e \r\n    h o g e h o g e \r\n   e
    h o g e h o g e \r\n  g e h o g e h o g e \r\n o g e h o g e h o g e \r\nh o g
    e h o g e h o g e \r\n</pre>\n\t"
  :code: "BEGIN {\n\tif (length(ARGV[1]) &gt; 0) printf pyramid(ARGV[1])\n}\n\nfunction
    pyramid(str,  N,moji,i,j)\n{\n\tN = split(str,moji,\"\")\n\n\ts = \"\"\n\ta =
    moji[1]; for (i=2; i&lt;=N; i++) a = a \" \" moji[i]  ## a = moji.join(' ')\n\tfor
    (i=N; i&gt;=1; i--) {\n\t\ts = a \"\\n\" s\n\t\tsub(/[a-z]/,\"\",a)  ## 先頭から１文字ずつ消していく\n\t}\n\treturn
    s\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2593'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2593
  :user_name: morchin
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/78/
  :language: Python
  :time: 2007/08/29 00:38 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "def pyramid(s):\n\tfor i in range(len(s)):\n\t\tprint ' '.join(s[~i:]).center(len(s)*2-1)\n\npyramid('hoge')\npyramid('abracadabra')\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2594'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2594
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/29 00:44 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">名前付きletは明示的loopじゃないと？:)</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2595'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2595
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/29 01:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">だめじゃんこれ、題意を読み違えてる。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2596'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2596
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/29 01:14 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">題意を読み違えてたので再投稿</pre>\n\t"
  :code: |
    import Data.List

    binapp o f g x = f x `o` g x
    pyramid = binapp (zipWith (++)) (map (map (const ' ')) . tail)
                                    (map (intersperse ' ') . tail . reverse)
            . tails
    printPyramid = putStr . unlines . pyramid

    {-
    *Main&gt; printPyramid "abracadabra"
              a
             r a
            b r a
           a b r a
          d a b r a
         a d a b r a
        c a d a b r a
       a c a d a b r a
      r a c a d a b r a
     b r a c a d a b r a
    a b r a c a d a b r a
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2597'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2597
  :user_name: Mistfeal
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/153/
  :language: PHP
  :time: 2007/08/29 01:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "&lt;?php\nfunction pyramid($data) {\n\t$stclm = strlen($data);\n\tfor (
    $i = strlen($data) - 1; $i &gt; -1; $i-- ) {\n\t\t$stclm--;\n\t\techo str_pad(\"\",$stclm,\"
    \",STR_PAD_LEFT);\n\t\tfor ( $j = $i; $j &lt; strlen($data); $j++ ) {\n\t\t\techo
    substr($data,$j,1).\" \";\n\t\t}\n\t\techo \"\\n\";\n\t}\n}\n\npyramid(\"hoge\");\npyramid(\"abracadabra\");\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2598'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2598
  :user_name: yuin
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/08/29 01:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    def pyramid(s:String) = {
      val (len, cs) = (s.size-1, s.toList)
      len.until(-1,-1).map(cs.splitAt).foreach{p =&gt;
        println((p._1.map(x=&gt;""):::p._2).mkString(" "))
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2599'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2599
  :user_name: smeghead
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/31/
  :language: 
  :time: 2007/08/29 02:02 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  &gt;部分文字列の取り方\r<br>subseq です？\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2600'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2600
  :user_name: ocean
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/08/29 02:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;string&gt;
    #include &lt;iterator&gt;
    #include &lt;algorithm&gt;

    void pyramid(const std::string&amp; s)
    {
        for (std::string::const_iterator it = s.end(); it != s.begin(); --it)
        {
            const size_t n = std::distance(s.begin(), it - 1);

            std::fill_n(std::ostream_iterator&lt;char&gt;(std::cout), n, ' ');

            std::copy(it - 1, s.end() - 1, std::ostream_iterator&lt;char&gt;(std::cout, " "));

            std::cout &lt;&lt; *(s.end() - 1);

            std::fill_n(std::ostream_iterator&lt;char&gt;(std::cout), n, ' ');

            std::cout &lt;&lt; std::endl;
        }
    }

    int main()
    {
        pyramid("hoge");
        pyramid("abracadabra");
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2601'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2601
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/08/29 02:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">まとめてprint\r\n</pre>\n\t"
  :code: |
    def pyramid(s):
      print '\n'.join([' '*i + ' '.join(s[i:]) for i in range(len(s)-1, -1, -1)]),

    pyramid('hoge')
    pyramid('abracadabra')
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2602'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2602
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: PHP
  :time: 2007/08/29 02:21 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">phpって変な関数いっぱいあるな。</pre>\n\t"
  :code: |
    function pyramid($str) {
        $splt;
        for ($i = 0; $i &lt; strlen($str); $i++) {
            $s = str_split(substr($str,$i,strlen($str)));
            $splt[] = str_repeat(" ", $i) .join(" ",$s);
        }
        krsort($splt);
        return join("\n",$splt);
    }
    echo pyramid("abracadabra");
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2603'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2603
  :user_name: shiro
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/08/29 02:33 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  名前付けてるだけだも〜ん。\r\nそれにいわゆる「ループとしての使いかた」はしてないし。\r\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2604'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2604
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/08/29 02:34 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">上記は英語のみ。\r\n日本語混ざると死にます。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2605'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2605
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/08/29 02:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Never mind ! :)</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2606'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2606
  :user_name: matyr
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/08/29 02:40 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t   シンプルに。\r<br><br>javascript:(function(p,r,m,d){for(p=p.split(''),r=[],m=p.length,d=0;m--;p[d++]='')r[m]=p.join(' ');return'&lt;pre&gt;'+r.join('\\n')+'&lt;/pre&gt;'})('abracadabra')\n\t"
  :code: |
    function pyramid(s){
      s = s.split('');
      for(var r = [], i = s.length, j = 0; i--; s[j++] = "") r[i] = s.join(' ');
      return r.join('\n');
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2608'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2608
  :user_name: sumim
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/08/29 03:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\n\t"
  :code: "| input |\ninput := 'abracadabra'.\nWorld findATranscript: nil.\n1 to: input
    size do: [:len |\n\tTranscript cr; show: (String new: input size - len withAll:
    $ ).\n\t(input last: len) do: [:each | Transcript show: each] separatedBy: [Transcript
    space]]\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '2613'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2613
  :user_name: にしお
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/08/29 04:24 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <pre class=\"compact\">Rubyに対する対抗意識ｗ</pre>\n\t"
  :code: |
    s="abracadabra";n=len(s);print"\n".join(" ".join(s[~i:]).center(n*2-1)for i in range(n))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2614'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2614
  :user_name: sawat
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/322/
  :language: Java
  :time: 2007/08/29 04:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "public class Pyramid {\n\tpublic static void main(String[] args) {\n\t\tString
    data = args.length &gt; 0 ? args[0] : \"abracatabra\";\n\t\tchar[] spaceChars
    = new char[data.length()-1];\n\t\tjava.util.Arrays.fill(spaceChars, ' ');\n\t\tString
    space = new String(spaceChars);\n\t\t\n\t\tfor(int i=0;i&lt;data.length();i++)
    {\n\t\t\tSystem.out.println(space.substring(i)\n\t\t\t\t\t+ data.substring(data.length()-1-i).replaceAll(\"(.)(?=.)\",\"$1
    \"));\n\t\t}\n\t}\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2618'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2618
  :user_name: rucker
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/08/29 06:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">お、phpの投稿が増えてる。\r\nということで私なりに…。</pre>\n\t"
  :code: "&lt;?php\nfunction pyramid($str)\n{\n    $len=strlen($str);\n    $str=implode(\"
    \",str_split($str));\n    for($i=1;$i&lt;=$len;++$i)\n    \techo str_repeat(\"
    \", $len-$i),substr($str,-($i*2-1)),\"\\n\";\n}\necho pyramid(\"abracadabra\");\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2619'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2619
  :user_name: rucker
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/08/29 06:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ぐはっ。9行目のechoは余計…。コピーしたのもろバレ。\r\nということでついでに別解。\r\n空の文字列の並んだ配列をスペース挟んで繋ぐと\r\n勝手にセンタリングされるという…。</pre>\n\t"
  :code: "&lt;?php\nfunction pyramid($str)\n{\n\t$i=strlen($str);\n\t$a=array_fill(
    0, $i, \"\");\n\twhile(--$i&gt;=0)\n\t{\t$a[$i]=$str[$i];\n\t\techo implode(\"
    \",$a),\"\\n\";\n\t}\n}\n\npyramid(\"abracadabra\");\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2620'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2620
  :user_name: jz5
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/08/29 08:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    Sub pyramid(ByVal block As String)
        For i As Integer = 0 To block.Length - 1
            Dim line As String = Space(block.Length - i - 1)
            For j As Integer = 0 To i
                line &amp;= " " &amp; block.Substring(block.Length - i - 1 + j, 1)
            Next
            Console.WriteLine(line.Substring(1))
        Next
    End Sub
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2621'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2621
  :user_name: yohei
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/08/29 09:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nvoid put_s(int n)\n{\n\tint
    i;\n\tfor (i = 0; i &lt; n; i++) putchar(' ');\n}\n\nvoid put_c(const char *s)\n{\n\tputchar(*s);\n\t\n\twhile
    (*++s) {\n\t\tputchar(' ');\n\t\tputchar(*s);\n\t}\n}\nvoid pyramid(const char
    *s)\n{\n\tint n;\n\n\tn = strlen(s);\n\t\n\twhile (--n &gt;= 0) {\n\t\tput_s(n);\n\t\tput_c(s
    + n);\n\t\tput_s(n);\n\t\tputchar('\\n');\n\t}\n}\n\nint main()\n{\n\tpyramid(\"hoge\");\n\tpyramid(\"abracadabra\");\n\treturn
    0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2622'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2622
  :user_name: g000001
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2007/08/29 10:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">REPLと二人三脚で作りました。</pre>\n\t"
  :code: "(defun pyramid (str)\n  (let ((base (coerce (cdr (reduce (lambda (r x) `(,@r
    #\\Space ,x))\n\t\t\t\t   (coerce str 'list)\n\t\t\t\t   :initial-value '()))
    'string)))\n    (do ((idx 2 (+ idx 2))\n\t (len (length base))\n\t (result base
    (concatenate 'string spacer (subseq base idx) \"~%\" result))\n\t (spacer \" \"
    (concatenate 'string \" \" spacer)))\n\t((&gt; idx len) (format t result)))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2624'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2624
  :user_name: imaiworks
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/350/
  :language: Other
  :time: 2007/08/29 11:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ベタに書いてみました\n\t"
  :code: "&lt;?php\n\n$p_mess=\"hoge\";\necho \"&lt;textarea cols=100 rows=20&gt;\";\necho
    pyramid($p_mess);\necho \"&lt;/textarea&gt;\";\n\n\n$p_mess=\"abracadabra\";\necho
    \"&lt;textarea cols=100 rows=20&gt;\";\necho pyramid($p_mess);\necho \"&lt;/textarea&gt;\";\n\nfunction
    pyramid($p_mess)\n{\n\t$p_len=strlen($p_mess);\n\tfor($i=1;$i&lt;=$p_len;$i++)\t//縦方向ループ\n\t{\n\t\t$w=\"\";\n\t\tfor($j=$p_len-$i;$j&lt;=$p_len;$j++)\t//横方向ループ、x行目=後ろからx文字分をループ\n\t\t{\n\t\t\t$w.=substr($p_mess,$j,1).\"
    \";\t//切り出し+空白文字をwに入れ込む\n\t\t}\n\t\t\n\t\t$w=str_pad($w,$p_len*2+1,\" \",STR_PAD_BOTH);\t//左右に[
    ]を埋める\n\t\t$ret.=rtrim($w).\"\\n\";\t//右側の空白ははずす\n\t}\n\treturn $ret;\n}\n\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2625'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2625
  :user_name: telkaz
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/397/
  :language: Common
  :time: 2007/08/29 11:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あえてリストベースで format 頼りの処理．\r\nコードの長さが気になるが恥さらしで．</pre>\n\t"
  :code: "(defun pyramid (string)\n  (let ((chars (coerce string 'list)) (floors nil))\n\t(labels\n\t\t((make-floors
    (list n-space)\n\t\t   (unless (null list)\n\t\t\t (push (format nil \"~{~A~}~{~A~^
    ~}~%\"\n\t\t\t\t\t\t   (make-list n-space :initial-element #\\Space) list)\n\t\t\t\t
    \  floors)\n\t\t\t (make-floors (cdr list) (1+ n-space)))))\n\t  (make-floors
    chars 0))\n\t(mapcan #'(lambda (string)\n\t\t\t\t(format t \"~A\" string))\n\t\t\tfloors)))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2626'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2626
  :user_name: hirataka
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/233/
  :language: PHP
  :time: 2007/08/29 12:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "&lt;?php\nfunction pyramid($str){\n\tfor($i=$j=$n=strlen($str); $i&gt;0;
    $i--, $n=$j*2-$i)\n\t\tprintf(\"% {$n}s\\n\", trim(join(\" \", preg_split(\"//\",
    substr($str, $i-1, $j)))));\n}\n\npyramid(\"abracadabra\");\n?&gt;\n"
  :tags:
  - PHP3.0.9
  - PHP4
  - PHP5
  :references:
    :url: 
    :title: 
- :id: '2627'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2627
  :user_name: nskj77
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/375/
  :language: Haskell
  :time: 2007/08/29 13:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Control.Arrowを中途半端につかってみました。\r\n\r\n*Main&gt;
    pyramid \"abracadabra\"\r\n          a\r\n         r a\r\n        b r a\r\n       a
    b r a\r\n      d a b r a\r\n     a d a b r a\r\n    c a d a b r a\r\n   a c a
    d a b r a\r\n  r a c a d a b r a\r\n b r a c a d a b r a\r\na b r a c a d a b
    r a</pre>\n\t"
  :code: |
    import Control.Arrow
    import Data.List (tails,intersperse)

    pyramid = id &amp;&amp;&amp; length &gt;&gt;&gt; first (tails &gt;&gt;&gt; reverse &gt;&gt;&gt; tail &gt;&gt;&gt; map (id &amp;&amp;&amp; length)) &gt;&gt;&gt; uncurry f
        where f xs len = mapM_ (\(x,y) -&gt; putStrLn $ (++) (replicate (len - y) ' ') $ intersperse ' ' x) xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2628'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2628
  :user_name: kozima
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/08/29 14:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">maplist できれいに書けそうに思ったのですがスペースの調整が美しくなく、\r\n結局
    loop のほうがすっきりした形になりました。</pre>\n\t"
  :code: |
    (defun pyramid (string)
      (loop for x on (coerce string 'list) for i from 0 with tmp
         collect (format nil "~VT,0~{~A~^ ~}" i x) into tmp
         finally (mapc #'write-line (nreverse tmp))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2629'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2629
  :user_name: kozima
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/08/29 14:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ごめんなさい間違ったものを送信してしまいました。\r\nこっちが正しいコードです。</pre>\n\t"
  :code: |
    (defun pyramid (string)
      (loop for x on (coerce string 'list) for i from 0
        collect (format nil "~V,0T~{~A~^ ~}" i x) into tmp
        finally (mapc #'write-line (nreverse tmp))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2630'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2630
  :user_name: kkobayashi
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/08/29 14:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>素直にループで。\n   今見ると<a href=\"/web/20100605050114/http://ja.doukaku.org/comment/689/\">#689</a>の冗長さが何とも・・・。\n</p>\n\n\n\n\t"
  :code: |
    pyramid &lt;- function(s, n=nchar(s), s2=unlist(strsplit(s, ''))){
       for(i in n:1) cat(c(character(i-1), s2[i:n]), fill=TRUE)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2631'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2631
  :user_name: tzifa
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/416/
  :language: PHP
  :time: 2007/08/29 14:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PHP、ありそうでなかった再帰版。\r\n超シンプル！</pre>\n\t"
  :code: |
    function pyramid( $str, $_=''){
       echo strlen($str)? pyramid( substr($str,1), "$_ ")."\n$_"
          : null, join( ' ', preg_split('//',$str));
    }
    pyramid('abracadabra');
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2632'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2632
  :user_name: mad
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/418/
  :language: Haskell
  :time: 2007/08/29 15:24 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <pre class=\"compact\">初めて投稿します。\r\nTraversableを使って手続き型言語っぽく書いてみました。\r\n\r\n*Main&gt;
    pyramid \"abracadabra\"\r\n          a\r\n         r a\r\n        b r a\r\n       a
    b r a\r\n      d a b r a\r\n     a d a b r a\r\n    c a d a b r a\r\n   a c a
    d a b r a\r\n  r a c a d a b r a\r\n b r a c a d a b r a\r\na b r a c a d a b
    r a</pre>\n\t"
  :code: "import Data.List\nimport Data.Traversable\n\npyramid str = do \n    for
    (reverse $ p str) putStrLn \n    return ()\n  where\n    p (x:xs) = (intersperse
    ' ' (x:xs)) : map (' ':) (p xs)\n    p [] = []\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2633'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2633
  :user_name: hirataka
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/233/
  :language: PHP
  :time: 2007/08/29 15:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ちょっと修正。\r\ntrim取ったり、substrの引数取ったり。</pre>\n\t"
  :code: "&lt;?php\nfunction pyramid($str){\n\tfor($i=$n=strlen($str); $i&gt;=0; $i--,
    $n=strlen($str)*2-$i+1)\n\t\tprintf(\"% {$n}s\\n\", join(\" \", preg_split(\"//\",
    substr($str, $i))));\n}\n\npyramid(\"abracadabra\");\n?&gt;\n"
  :tags:
  - PHP3.0.9
  - PHP4
  - PHP5
  :references:
    :url: 
    :title: 
- :id: '2635'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2635
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/29 16:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">なるほど。似たアルゴリズムでControl.Applicableを使わないで書いてみた。\r\n\r\nzipWith
    (flip const) xs ≡ take (length xs)\r\nです。(個人的ポリシーによりlengthはなるだけ使わない)</pre>\n\t"
  :code: |
    import Data.List

    pyramid :: String -&gt; [String]
    pyramid xs
     = map bar                     -- 片リストから行リストへ
     $ reverse                     -- リストを反転，上片から下片へ
     $ zipWith (flip const) xs     -- xs の長さ分切り取る
     $ iterate foo ("",xs)         -- 下片から上片へのリスト

    foo :: (String, String) -&gt; (String, String)
    foo (indent,str) = (' ':indent, tail str)         -- 下片から１つ上片を求める
    bar :: (String,String) -&gt; String
    bar (indent,str) = indent ++ intersperse ' ' str  -- 片から行へ変換

    {-
    *Main&gt; putStr $ unlines $ pyramid "hoge"
       e
      g e
     o g e
    h o g e
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2636'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2636
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/29 16:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">さらに starling と binapp' を用いて\r\npyramid をポイントフリースタイルに書きなおしたもの</pre>\n\t"
  :code: |
    import Data.List

    starling f g x = f x (g x)
    binapp' o f g x y = f x `o` g y

    pyramid' = map (uncurry bar') . reverse . starling (zipWith (flip const)) (iterate (uncurry foo') . ((,) ""))

    foo' = binapp' (,) (' ':) tail
    bar' = binapp' (++) id (intersperse ' ')

    {-
    *Main&gt; putStr $ unlines $ pyramid' "hage"
       e
      g e
     a g e
    h a g e
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2653'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2653
  :user_name: nobsun
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/08/30 00:49 GMT
  :vote_count: '3'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">そうか、ということは unfoldr でも簡単に書けるんだ。\r\nなるほど。。。勉強になるなぁ。\r\n</pre>\n\t"
  :code: "import Data.List\n\npyramid :: String -&gt; [String]\npyramid = reverse
    . unfoldr phi . (,) \"\"\n  where \n     phi (_ ,\"\")         = Nothing\n     phi
    (xs,yys@(_:ys)) = Just (xs ++ intersperse ' ' yys,(' ':xs,ys))\n\n{-\n*Main&gt;
    putStr $ unlines $ pyramid \"hoge\"\n   e\n  g e\n o g e\nh o g e\n-}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2654'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2654
  :user_name: nori
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2007/08/30 01:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">デフォルト引数を使って単独の関数で再帰実装。\r\n\r\n最下段の取り扱いが納得いかない。\r\n全部returnで書きたいのだが・・・。\r\n\r\n長さ0文字の文字列には対応しておりません。\r\n</pre>\n\t"
  :code: |
    """
    &gt;&gt;&gt; pyramid("hoge")
       e
      g e
     o g e
    h o g e

    &gt;&gt;&gt; pyramid("abracadabra")
              a
             r a
            b r a
           a b r a
          d a b r a
         a d a b r a
        c a d a b r a
       a c a d a b r a
      r a c a d a b r a
     b r a c a d a b r a
    a b r a c a d a b r a
    """
    def pyramid(s, padding=None):
      assert(len(s) &gt; 0)
      if padding is None:
        padding = ' '
      if len(s) == 1:
        return s[0]
      else:
        p = pyramid(s[1:], padding + ' ')
        print padding + p
        if padding == ' ':
          print s[0] + ' ' + p
        else:
          return s[0] + ' ' + p

    import doctest
    doctest.testmod()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2673'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2673
  :user_name: kacchi
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/08/30 05:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あまり長くない文字列なら再帰でも行けます。\r\n(Emacsは再帰の深さが変数max-lisp-eval-depthで制限されるので事実上使えない)\r\n\r\n(pyramid
    \"abracadabra\")\r\n          a\r\n         r a\r\n        b r a\r\n       a b
    r a\r\n      d a b r a\r\n     a d a b r a\r\n    c a d a b r a\r\n   a c a d
    a b r a\r\n  r a c a d a b r a\r\n b r a c a d a b r a\r\na b r a c a d a b r
    a\r\n</pre>\n\t"
  :code: |
    (defun pyramid (s &amp;optional p)
      (unless (string= s "")
        (pyramid (substring s 1) (cons ? p))
        (insert (concat p) (mapconcat #'string s " ") "\n")))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2675'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2675
  :user_name: susu
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/218/
  :language: Python
  :time: 2007/08/30 06:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "def strPyramid(s=\"abracadabra\"):\n    s      = \" \".join(s)\n    length
    = len(s)        \n    \n    for i in range(length)[::-2]:\n        print s[i:].center(length,'
    ')\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2683'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2683
  :user_name: いげ太
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/399/
  :language: OCaml
  :time: 2007/08/30 08:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">みなさんの投稿を参考にしつつ初投稿。</pre>\n\t"
  :code: |
    let pyramid str =
      let rec letters = function
        | "" -&gt; []
        | s  -&gt; (String.sub s 0 1) :: (letters (String.sub s 1 (String.length s - 1)))
      in
      fst (List.fold_right (fun s t -&gt; let x = s ^ snd t in (x :: (fst t), " " ^ x))
                           (letters str) ([], ""))
      |&gt; List.mapi (fun i s -&gt; (String.make i ' ') ^ s) |&gt; List.rev |&gt; String.concat "\n";;

    let _ = pyramid "abracadabra" |&gt; printf "%s\n";;
  :tags:
  - F#
  :references:
    :url: 
    :title: 
- :id: '2697'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2697
  :user_name: ？せんたくいた
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/241/
  :language: sed
  :time: 2007/08/30 15:02 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">\\nをデリミタにしています。(\\nh o g e)\r\n1.1番目の項目を手前にコピー\r\n2.ピラミッド一段上の形に合わせる\r\n3.合わせたものが空白で埋まっていなければループ\r\n\r\n最後に先頭の無駄な改行消してドン。\r\n</pre>\n\t"
  :code: |
    #!/bin/sed -f
    s/ //g
    s/./ &amp;/g
    s/^ /\n/

    :loop
    s/^\n[^\n]*/&amp;&amp;/
    s/^\(\n *\)[^ ] /\1 /
    s/\n/ \n/2
    /^\n *\n/!b loop

    s/^\n *\n//
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2711'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2711
  :user_name: 130R
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/409/
  :language: PowerShell
  :time: 2007/08/31 03:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">PS C:\\&gt; pyramid\r\n          a\r\n         r
    a\r\n        b r a\r\n       a b r a\r\n      d a b r a\r\n     a d a b r a\r\n
    \   c a d a b r a\r\n   a c a d a b r a\r\n  r a c a d a b r a\r\n b r a c a d
    a b r a\r\na b r a c a d a b r a\r\nPS C:\\&gt; pyramid(\"hoge\")\r\n   e\r\n
    \ g e\r\n o g e\r\nh o g e\r\n</pre>\n\t"
  :code: |
    function pyramid($s = "abracadabra") {
         for ($i = 1; $i -le $s.length; $i++) {
              $p = $s[-$i..-1]
              $len = $s.length - $p.length
              " " * $len + $p
         }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2732'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2732
  :user_name: arton
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/423/
  :language: 
  :time: 2007/08/31 07:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">#include &lt;stdio.h&gt;\r\n#include &lt;stdlib.h&gt;\r\n\r\nvoid
    pyramid(char* p)\r\n{\r\n    int i, j, n = strlen(p);\r\n    char* buff = (char*)_alloca(n
    * n * 2);\r\n    memset(buff, ' ', n * n * 2);\r\n    for (i = 0; i &lt; n; i++)\r\n
    \   {\r\n        for (j = n * 2 * i + n - i - 1; j &lt; n * n * 2; j += n * 2
    + 1)\r\n        {\r\n            *(buff + j) = *(p + n - i - 1);\r\n        }\r\n
    \       printf(\"%.*s\\n\", n * 2, buff + i * n * 2);\r\n    }\r\n}\r\n\r\nint
    main(int argc, char* argv[])\r\n{\r\n    pyramid(argv[1]);\r\n}\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2735'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2735
  :user_name: arton
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/423/
  :language: C
  :time: 2007/08/31 07:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">投稿し直し。2重ループ</pre>\n\t"
  :code: |2
     #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    void pyramid(char* p)
    {
        int i, j, n = strlen(p);
        char* buff = (char*)_alloca(n * n * 2);
        memset(buff, ' ', n * n * 2);
        for (i = 0; i &lt; n; i++)
        {
            for (j = n * 2 * i + n - i - 1; j &lt; n * n * 2; j += n * 2 + 1)
            {
                *(buff + j) = *(p + n - i - 1);
            }
            printf("%.*s\n", n * 2, buff + i * n * 2);
        }
    }

    int main(int argc, char* argv[])
    {
        pyramid(argv[1]);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2855'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2855
  :user_name: yohei
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/09/03 08:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    using System;
    using System.Text.RegularExpressions;

    class Program {
        static void pyramid(string s) {
            int len = s.Length;
            s = Regex.Replace(s, "(.)(?=.)", @"$1 ");
            for (int n = len - 1; n &gt;= 0; n--)
                Console.WriteLine(s.Substring(n * 2).PadLeft(len * 2 - n).PadRight(len * 2));
        }
        static void Main(string[] args) {
            pyramid("hoge");
            pyramid("abracadabra");
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2945'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2945
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/09/08 15:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;string&gt;

    void pyramid(const std::string&amp; src)
    {
        const int   strLength = src.size();
        const int   lineLength = strLength * 2 - 1;
        std::string line(strLength, ' ');
        for(int i = strLength - 1; i &gt;= 0; --i)
        {
            line[i] = src[i];
            std::cout &lt;&lt; line.substr(0, lineLength) &lt;&lt; std::endl;
            line = ' ' + line;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2979'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/2979
  :user_name: niha
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/160/
  :language: Ruby
  :time: 2007/09/11 12:44 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">最初に思いついたもの。酷い。</pre>\n\t"
  :code: |
    def pyramid str
    str.chomp.reverse.gsub(/./){([" "*$'.size]*2)*(($`+$&amp;).reverse.scan(/./)*" ")+$/}
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3136'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3136
  :user_name: BigFatCat
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/444/
  :language: Ruby
  :time: 2007/09/20 16:18 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">ごり押し。\r\nもっと分かり易くてうまいやり方があるはず。</pre>\n\t"
  :code: |
    def pyramid(str)
      n = str.length
      1.upto(n) do |i|
        result_str = str.split('').last(i).join
        spaces = " " * (n - i)
        puts result_str.split('').join(' ').insert(0, spaces)
      end
    end
    pyramid("piyohoge")
  :tags: []
  :references:
    :url: /web/20100605050114/http://www.sakalab.org/prog-ruby/ruby-man-ja-html-20051129/Array.html
    :title: Array#join と Array#last を調べた
- :id: '3137'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3137
  :user_name: BigFatCat
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/444/
  :language: Ruby
  :time: 2007/09/20 16:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ごり押しに変わりは無い。\r\n表示させる文字列をあらかじめ String#reverse\r\nと
    String#split で反転・分解しておいた。</pre>\n\t"
  :code: |
    def pyramid(str)
      n = str.length
      reversed_str_ary = str.reverse.split('')
      n.times do |i|
        result_str = reversed_str_ary[0..i].join
        spaces = " " * (n - i)
        puts result_str.split('').join(' ').insert(0, spaces)
      end
    end
    pyramid("piyohoge")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3139'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3139
  :user_name: BigFatCat
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/444/
  :language: 
  :time: 2007/09/20 17:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  これじゃダメだった。\r\nこのままだと、文字列が反転したまま表示されてしまう。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3144'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3144
  :user_name: BigFatCat
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/444/
  :language: Ruby
  :time: 2007/09/21 06:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">pyramid\r\nなどの、引数の個数が0の場合を考えてなかったので、\r\npyramid(str
    = '')\r\nとして、デフォルトで空文字列を与えた。</pre>\n\t"
  :code: |
    def pyramid(str = '')
      n = str.length
      1.upto(n) do |i|
        result_str = str.split('').last(i).join
        spaces = " " * (n - i)
        puts result_str.split('').join(' ').insert(0, spaces)
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3147'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3147
  :user_name: mamamoto
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/437/
  :language: Ruby
  :time: 2007/09/21 07:15 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">見た目がいかにも再帰っぽいと\r\n再帰で書きたくなります。</pre>\n\t"
  :code: |
    def pyramid(str, space = "")
      if str == ""
        ""
      else
        pyramid(str[1, str.size-1], space+" ") +
          space+str.split(//).join(" ")+"\n"
      end
    end

    print pyramid("hoge")
    print pyramid("abracadabra")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3186'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3186
  :user_name: yohei
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/415/
  :language: Prolog
  :time: 2007/09/27 12:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">formatでセンタリング, 32=スペースで</pre>\n\t"
  :code: "pyramid_sub([], _, []).\npyramid_sub([C|S], W, [32, C|S1]) :- pyramid_sub(S,
    W, S1),\n\tformat('~t~s~t~*|~n', [[C|S1], W]).\n\npyramid(S) :- length(S, N),
    W is (N * 2) - 1, pyramid_sub(S, W, _).\n\n:- pyramid(\"hoge\").\n:- pyramid(\"abracadabra\").\n"
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '3303'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3303
  :user_name: kgoto
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/457/
  :language: Python
  :time: 2007/10/09 18:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">なんとかできた感じ、作った後にスライス使えばよかったなぁと後悔。</pre>\n\t"
  :code: |
    def pyramid(s):
        row=s[-1]
        print ' '*(len(s)-1)+row
        for i in range(2,len(s)+1):
            row=s[-i]+' '+row
            print ' '*(len(s)-i)+row

    if __name__=='__main__':
        pyramid('abracadabra')
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3748'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/3748
  :user_name: fujidig
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/07 14:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
        call pyramid "hoge";
        call pyramid "abracadabra";
        endmacro;

    pyramid:
        ##len = strlen( $$1 );
        ##i = ##len - 1;
        while( ##i &gt;= 0 ) {
            ##j = ##i;
            while( ##j &gt; 0 ) {
                insert " ";
                ##j = ##j - 1;
            }
            ##j = ##i;
            while( ##j &lt; ##len ) {
                insert midstr( $$1, ##j, 1 );
                insert " ";
                ##j = ##j + 1;
            }
            insert "\n";
            ##i = ##i - 1;
        }
        return;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4001'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/4001
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/14 10:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    「abracadabra」のピラミッドを表示
    ●ピラミッド(sの)
        tとは配列
        ケタ数=(2*バイト数(s)-1)
        (バイト数(s))回
            tに(文字列センタリング(文字列注入(RIGHT(s,回数)," "),ケタ数))を配列追加
        tで戻る
    ●文字列注入(sにlを)
        sを文字列分解してlで配列結合で戻る
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4039'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/4039
  :user_name: Psychs
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/554/
  :language: Objective
  :time: 2007/11/15 02:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nvoid print_pyramid(const
    char* s)\n{\n  int i, j;\n  int n = strlen(s);\n  \n  for (i=0; i&lt;n; i++) {\n
    \   for (j=n-i-2; j&gt;=0; j--) putchar(' ');\n    for (j=n-i-1; j&lt;n-1; j++)
    {\n      putchar(s[j]);\n      putchar(' ');\n    }\n    putchar(s[j]);\n    puts(\"\");\n
    \ }\n}\n\nint main(int argc, char** argv)\n{\n  print_pyramid(\"hoge\");\n  print_pyramid(\"abracadabra\");\n
    \ return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4137'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/4137
  :user_name: greentea
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/573/
  :language: Other
  :time: 2007/11/17 03:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なるほど。~iか。みんなの読んでると勉強なります。</p>\n\n\t"
  :code: |
    def pyramid(s):
      for i in range(len(s)-1, -1, -1):
        print " "*i + " ".join(s[i:])

    pyramid("hoge")
    pyramid("abracadabra")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4777'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/4777
  :user_name: pooq
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/12 08:20 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">   pyramid2 'abracadabra'\r\n          a          \r\n
    \        r a         \r\n        b r a        \r\n       a b r a       \r\n      d
    a b r a      \r\n     a d a b r a     \r\n    c a d a b r a    \r\n   a c a d
    a b r a   \r\n  r a c a d a b r a  \r\n b r a c a d a b r a \r\na b r a c a d
    a b r a\r\n</pre>\n\t"
  :code: |
    pyramid2=.3 :'(,&amp;a:&lt;\.(&lt;:#y)#'' ''),&amp;;/"0([,'' '',])/&amp;.&gt;|.&lt;\.y'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4804'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/4804
  :user_name: omoikani
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/12/13 20:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>適当。</p>\n\n\t"
  :code: |
    fun pyramid s =
    let
      fun loop s' NONE = []
        | loop s' (SOME c) =
        let
          val ns = subst (str c) "" s'
        in
          loop ns (CharVector.find Char.isGraph ns) @ [s']
        end

      val ss = (String.concatWith " " o global_slice ".") s
    in
      (app println o loop ss o SOME o sub) (ss, 0)
    end

    val _ = pyramid "hoge"
    val _ = pyramid "abracadabra"
  :tags:
  - SML#
  :references:
    :url: 
    :title: 
- :id: '4857'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/4857
  :user_name: vtwntmtn
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/380/
  :language: Erlang
  :time: 2007/12/17 15:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">段階的に目的の文字列へ近づけ、最後に出力します。\r\n\r\n1&gt; c(string_pyramid).\r\n{ok,string_pyramid}\r\n2&gt;
    string_pyramid:string_pyramid(\"hoge\").\r\n   e\r\n  g e\r\n o g e\r\nh o g e\r\nok\r\n3&gt;
    string_pyramid:string_pyramid(\"abracadabra\").\r\n          a\r\n         r a\r\n
    \       b r a\r\n       a b r a\r\n      d a b r a\r\n     a d a b r a\r\n    c
    a d a b r a\r\n   a c a d a b r a\r\n  r a c a d a b r a\r\n b r a c a d a b r
    a\r\na b r a c a d a b r a\r\nok\r\n</pre>\n\t"
  :code: |
    -module(string_pyramid).
    -import(lists, [flatmap/2, foreach/2, nthtail/2, seq/2]).
    -import(string, [centre/2, len/1, strip/3]).
    -export([string_pyramid/1]).

    string_pyramid(Str) -&gt;
        L1 = [nthtail(len(Str) - X, Str) || X &lt;- seq(1, len(Str))],
        L2 = [flatmap(fun(Y) -&gt; [Y, " "] end, X) || X &lt;- L1],
        L3 = [centre(strip(X, both, " "), len(Str) * 2 - 1) || X &lt;- L2],
        foreach(fun(X) -&gt; io:format("~s~n", [X]) end, L3).
  :tags:
  - ErlangOTP_R10B-10
  :references:
    :url: 
    :title: 
- :id: '5180'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/5180
  :user_name: saws
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/642/
  :language: Ruby
  :time: 2008/01/04 18:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>再帰的に処理しつつpyramid関数の引数の数を変えないために, 新たにrecurs関数を定義しました.</p>\n\n\t"
  :code: |
    def pyramid(str)
      def recurs(str, i, spc = ' ')
        puts "#{spc*i}#{str[i..-1].split('').join(spc)}"
        recurs(str, i-1) if i &gt;= 1
      end
      recurs(str, str.size-1)
    end
    pyramid("abracadabra")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5267'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/5267
  :user_name: susu
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/01/12 01:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    let pyramid s =
      let len = String.length s in
      for spc = (len-1) downto 0 do
        print_string (String.make spc ' ');
        String.iter (Printf.printf "%c ") (String.sub s (spc) (len-spc));
        print_newline ();
      done;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5620'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/5620
  :user_name: 匿名
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/02/01 08:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>遅レスですが#160を参考につくってみました。</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    void pyramid(char* p) {

        int i, j, len;

        len = strlen(p);

        for(i=0; i&lt;len; i++) {
            printf("%*c ", len-i, p[len-i-1]);
            for(j=len-i; j&lt;=len; j++) printf("%c ",p[j]);
            printf("\r\n");
        }
    }

    int main(int argc, char **argv) {

        argc &gt; 1 ? pyramid(argv[1]) : 　;
        pyramid("hoge");
        pyramid("abracadabra");
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5785'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/5785
  :user_name: silverwire
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/19 15:54 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">工夫すればもう少し簡潔に書けそうですが、表示速度が遅い点に目をつぶれば、ひとまず\r\n目的は達したと言えそうです。(引数に半角空白が含まれる場合には対応していません。)\r\n\r\n
    \ e.g.\r\n    C:\\&gt;pyramid abracadabra\r\n              a\r\n             r
    a\r\n            b r a\r\n           a b r a\r\n          d a b r a\r\n         a
    d a b r a\r\n        c a d a b r a\r\n       a c a d a b r a\r\n      r a c a
    d a b r a\r\n     b r a c a d a b r a\r\n    a b r a c a d a b r a\r\n\r\n遅延環境変数展開を利用しているので、Windows
    NTでは動作しません。Windows XPで動作\r\nを確認。</pre>\n\t"
  :code: ":: pyramid.bat\n@echo off\n  setlocal enabledelayedexpansion\n    set l=0\n
    \   set n=0\n    set s=\n    set t=\n\n    if \"%1\" == \"\" (echo %~n0 [STRING]
    &amp; goto :EOF)\n\n    call :length %1 l\n\n    for /l %%i in (1,1,%l%) do (\n
    \     set s=\n      set /a n=%l%-%%i\n      for /l %%j in (!n!,-1,1) do set s=!s!
    \n      for /l %%j in (%%i,-1,1) do (\n        set /a n=%l%-%%j\n        call
    :substr %1 !n! 1 t\n        set s=!s!!t!\n        if %%j gtr 0 set s=!s! \n      )\n
    \     echo !s!\n    )\n  endlocal\ngoto :EOF\n\n:length\n  setlocal\n    set i=0\n
    \   set t=%1\n    set t=%t:\"=%\n\n    :loop\n      set t=%t:~1%\n      set /a
    i+=1\n    if not \"%t%\" == \"\" goto loop\n  endlocal &amp; set %2=%i%\ngoto
    :EOF\n\n:substr\n  setlocal enabledelayedexpansion\n    set t=%1\n    set t=!t:~%2,%3!\n
    \ endlocal &amp; set %4=%t%\ngoto :EOF\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5834'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/5834
  :user_name: Nemo
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/02/23 07:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なんか美しくないですが...</p>\n\n\t"
  :code: "%!PS\n\n/pyramid { % (string) pyramid -\n    dup length 1 sub dup -1 0 {\n
    \       dup { ( ) print } repeat\n        1 2 index {\n            2 index exch
    1 getinterval print ( ) print\n        } for\n        ( ) =\n    } for\n} def\n\n%
    ------- Test Code -------- \n(hoge) pyramid\n(abracadabra) pyramid\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5977'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/5977
  :user_name: まさぽん
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/711/
  :language: C
  :time: 2008/03/07 08:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あらかじめ最下段の文字列を作っておいてから、\r\nオシリからアタマへ向かって表示部分を伸ばしつつ、\r\n各行を
    printf で表示しています。\r\n実行例:\r\n$ ./pyramid hoge\r\n   e\r\n  g e\r\n o g e\r\nh o
    g e\r\n$ ./pyramid abracadabra\r\n          a\r\n         r a\r\n        b r a\r\n
    \      a b r a\r\n      d a b r a\r\n     a d a b r a\r\n    c a d a b r a\r\n
    \  a c a d a b r a\r\n  r a c a d a b r a\r\n b r a c a d a b r a\r\na b r a c
    a d a b r a</pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\nint
    main(int argc, char **argv){\n    int i, len;\n    char *srcstr, *cpstr, *s, *d,
    format[15];\n    \n    if(argc &lt; 2) exit(1);\n    srcstr = argv[1];\n    len
    = strlen(srcstr);\n\n    cpstr = malloc(len * 2);\n    if(!cpstr) exit(1);\n\n
    \   s = srcstr + len - 1;\n    d = cpstr + len * 2;\n    *d-- = '\\0';\n    while(s
    != srcstr){\n        *d-- = *s--;\n        *d-- = ' ';\n    }\n    *d = *s;\n\n
    \   d = cpstr + len * 2 - 1;\n    for(i = 0; i &lt; len; i++, d -= 2){\n        sprintf(format,
    \"%%%ds\\n\", len + i);\n        printf(format, d);\n    }\n\n    free(cpstr);\n
    \   return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6591'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/6591
  :user_name: turugina
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/06/26 03:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">対象文字列はテンプレートパラメタ txt で渡してください。</pre>\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:fn="http://www.w3.org/2005/xpath-functions"
      &gt;

      &lt;xsl:param name="txt" as="xs:string" /&gt;

      &lt;xsl:output method="text" /&gt;

      &lt;xsl:template match="/" &gt;
        &lt;xsl:variable name="chars" as="xs:string*"&gt;
          &lt;xsl:for-each select="fn:string-to-codepoints($txt)"&gt;
            &lt;xsl:sequence select="fn:codepoints-to-string((.))" /&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:variable&gt;

        &lt;xsl:for-each select="1 to fn:count($chars)"&gt;
          &lt;xsl:variable name="wscount" as="xs:integer"
            select="fn:count($chars)-." /&gt;
          &lt;xsl:for-each select="1 to $wscount" &gt;
            &lt;xsl:text&gt; &lt;/xsl:text&gt;
          &lt;/xsl:for-each&gt;
          &lt;xsl:value-of select="fn:subsequence($chars, $wscount+1)" /&gt;
          &lt;xsl:text&gt;&amp;#xA;&lt;/xsl:text&gt;
        &lt;/xsl:for-each&gt;
      &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7146'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/7146
  :user_name: mattsan
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/833/
  :language: Haskell
  :time: 2008/08/17 04:41 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>今更ですが。追加のモジュールを使わずに。</p>\n\n\t"
  :code: |
    pyramid s =
      take ln $ [(replicate (ln - l) ' ') ++ (drop ((ln - l) * 2) ss) | l &lt;- [1..]]
        where
          ln = length s
          ss = concat [[x,' '] | x &lt;- s]

    main = do
      mapM_ putStrLn $ pyramid "hoge"
      mapM_ putStrLn $ pyramid "abracadabra"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8629'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/8629
  :user_name: doda
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/705/
  :language: Other
  :time: 2009/03/10 08:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Whitespaceで。</p>\n\n\t"
  :code: "                   \n    \n                           \n    \n                     \n
    \   \n                           \n    \n                        \n    \n              \n
    \   \n                           \n    \n                        \n    \n                        \n
    \   \n                        \n    \n                           \n    \n                           \n
    \   \n                       \n    \n              \n    \n      \n\n   \n \n
    \ \n     \n                              \n          \n         \n       \n       \n
    \n \n\n      \n \n     \n         \n           \n       \n           \n \n                 \n
    \n \n          \n \n \n              \n\n \n         \n\n           \n\n\n\n\n
    \      \n \n              \n \n           \n    \n  \n          \n       \n        \n
    \             \n \n           \n            \n    \n      \n  \n \n        \n\n
    \       \n             \n    \n   \n\n \n\n\n    \n\n              \n \n \n            \n
    \           \n    \n         \n          \n \n            \n\n         \n \n\n\n
    \   \n.\n"
  :tags:
  - Whitespace
  :references:
    :url: 
    :title: 
- :id: '9093'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/9093
  :user_name: bleis-tift
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/732/
  :language: SQL
  :time: 2009/06/10 07:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>SQL Server 2008 で確認しました。</p>\n\n\t"
  :code: |
    WITH
      Input(id, str) AS (
        SELECT 1, 'hoge'
        UNION ALL SELECT 2, 'abracadabra'
      )
    , ExpandsSrc(id, str, input_str) AS (
        SELECT
            id
          , CAST(LEFT(str, 1) + ' ' AS varchar(max))
          , SUBSTRING(str, 2, LEN(str))
        FROM
            Input
        UNION ALL
        SELECT
            id
          , str + LEFT(input_str, 1) + ' '
          , SUBSTRING(input_str, 2, LEN(input_str))
        FROM
            ExpandsSrc
        WHERE
            input_str &lt;&gt; ''
      )
    , Expands(id, str) AS (
        SELECT id, str FROM ExpandsSrc WHERE input_str = ''
      )
    , Pyramid(id, i, str, input_str) AS (
        SELECT
            id
          , 1
          , str
          , SUBSTRING(str, 3, LEN(str))
        FROM
            Expands
        UNION ALL
        SELECT
            id
          , i + 1
          , SPACE(i) + input_str
          , SUBSTRING(input_str, 3, LEN(input_str))
        FROM
            Pyramid
        WHERE
            input_str &lt;&gt; ''
      )
    SELECT str FROM Pyramid
    ORDER BY id, i DESC
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9130'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/9130
  :user_name: yamamoto
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/1064/
  :language: Scala
  :time: 2009/06/12 01:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>凡庸な解でして・・・</p>\n\n\t"
  :code: "object MojiPira {\n  def main(args : Array[String]) : Unit = {\n    val
    moji = args(0)\n    val m    = moji.length\n    \n    val fn = (m:Int,x:String)
    =&gt; println( x+\" \"*( 2*m - 1 - x.length ) )\n    mojiPira(m).foreach(fn(m,_))\n
    \   \n    def mojiPira(n:Int) :List[String] = {\n      if( n==1 ){\n        return
    List(moji(0).toString)\n      }else{\n        val tail = moji(n-1)\n        val
    prev = mojiPira(n-1)\n        var now = List(\" \"*prev.length + tail)\n        for(a&lt;-prev)
    now = now ::: (a + \" \" + tail)::Nil\n        return now\n      }\n      Nil\n
    \   }\n    \n    ()\n  }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9140'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/9140
  :user_name: yamamoto
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/1064/
  :language: Scala
  :time: 2009/06/13 01:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>文字列をリストに変換せずにやってみた。</p>\n\n\t"
  :code: |
    object MojiPira {
      def main(args : Array[String]) : Unit = {
        pyramid(args(0))
      }
      def pyramid(moji:String) = {
        val m    = moji.length
        mojiPira(" "*(m-1),"",moji.reverse){print _}
      }
      def mojiPira(mergin:String,prevPrn:String,s:String)(prn:String=&gt;Unit) : Unit = {
          val prnStr = if (prevPrn=="") ""+s(0) else s(0) + " " + prevPrn
          prn(mergin + prnStr + mergin + "\n")
          if( mergin!="" )
            mojiPira(mergin.substring(1),prnStr,s.substring(1))(prn)
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9604'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/9604
  :user_name: uehaj
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/09/23 05:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ワンライナー系として。</p>\n\n\t"
  :code: |
    "abracadabra".inject([]){r,i-&gt;[' '*r.size()+i]+r.collect{it+' '+i}}.each{println it}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '10285'
  :parent_id: '52'
  :url: http://ja.doukaku.org/comment/10285
  :user_name: gushwell
  :user_url: /web/20100605050114/http://ja.doukaku.org/user/1046/
  :language: C
  :time: 2010/02/21 01:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    using System.Linq;

    namespace Sample {
        class Program {
            static void Main(string[] args) {
                Pyramid("hoge");
                Pyramid("abracadabra");
                Console.ReadLine();
            }

            static void Pyramid(string s) {
                int length = s.Length;
                for (int n = 0; n &lt; length; n++) {
                    // 左側の空白を表示
                    int spCount = length - n - 1;
                    Console.Write(new string(' ', spCount));
                    // 右側の文字部分を表示
                    var ls = s.Skip(spCount);
                    foreach (var c in ls)
                        Console.Write(c + " ");
                    Console.WriteLine();
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
