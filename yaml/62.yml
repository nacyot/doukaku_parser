---
:id: '62'
:title: 九九の表示
:comments:
- :id: '3418'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3418
  :user_name: にしお
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/19 03:31 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  掛け算の九九を下のように表示してください。\r\n<p>\r\n</p>\n<pre>\r\n1 * 1 =  1\r\n1 *
    2 =  2\r\n1 * 3 =  3\r\n(略)\r\n7 * 8 = 56\r\n7 * 9 = 63\r\n8 * 1 =  8\r\n8 * 2
    = 16\r\n8 * 3 = 24\r\n8 * 4 = 32\r\n(略)\r\n9 * 8 = 72\r\n9 * 9 = 81\r\n</pre>\r\n<p>\r\nなお、この問題は掛け算をどうやるかではなく、\r\nどうやって右端がそろうようにレイアウトするかに重点を置いているので、\r\n下のようなへこんだ出力は禁止です。\r\n</p>\n<p>\r\n</p>\n<pre>\r\n7
    * 9 = 63\r\n8 * 1 = 8\r\n8 * 2 = 16\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3624'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3624
  :user_name: eo-oe-aaaa
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/498/
  :language: C
  :time: 2007/10/31 08:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">動的にサイズを変えられるようにしてみました。</pre>\r\n\t"
  :code: |2
            static void Main(string[] args)
            {
                kuku(9);
                kuku(99);
                kuku(999);
            }

            static void kuku(int n)
            {
                int len = n.ToString().Length;
                int xLen = (n * n).ToString().Length;
                string    format = "{0, " + len + "} * {1, " + len + "} = {2, " + xLen + "}";

                for (int i = 1; i &lt;= n ; ++i)
                    for (int j = 1; j &lt;= n ; ++j)
                        Console.WriteLine(format, i, j, i * j);
            }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3905'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3905
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/11/12 09:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">面白くない答えですが・・・\r\n\r\nsayは、printlnだと思ってください。\r\nt_ishida</pre>\r\n\t"
  :code: |
    for(var i=1;i&lt;10;i++) for(var j = 1;j&lt;10;j++) say([i,'*',j,'=',''].join(' ') + (i * j &gt; 9 ? '' : ' ') + i * j);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3079'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3079
  :user_name: mamamoto
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/437/
  :language: Ruby
  :time: 2007/09/19 03:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">そのまんま</pre>\n\t"
  :code: |
    (1..9).each{|x|
      (1..9).each{|y|
        printf("%d * %d = %2d\n", x,y,x*y)
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3080'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3080
  :user_name: nobsun
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/19 03:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Text.Printf モジュールを使う</pre>\n\t"
  :code: |
    import Text.Printf

    main = putStr . unlines . map showKuKu $  [(i,j,i*j) | i &lt;- [1..9], j &lt;- [1..9] ]
    showKuKu :: (Int,Int,Int) -&gt; String
    showKuKu (i,j,k) = printf "%d * %d = %2d" i j k
  :tags:
  - Text.Printf
  :references:
    :url: 
    :title: 
- :id: '3081'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3081
  :user_name: nobsun
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/19 04:13 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">指定した数の二乗までのかけ算の表示ができるようにした。</pre>\n\t"
  :code: "module Main (main) where\n\nimport System.Environment\nimport Text.Printf\n\nmain
    :: IO ()\nmain = do { args &lt;- getArgs\n          ; let n = case args of { []
    -&gt; 9; a:_ -&gt; read a }\n          ; putStr . unlines . map (showKuku (keta
    n) (keta (n*n))) \n          $ [ (i,j,i*j) | i &lt;- [1..n], j &lt;- [1..n] ]\n\t
    \ }\n\nshowKuku :: Int -&gt; Int -&gt; (Int,Int,Int) -&gt; String\nshowKuku l
    l' (i,j,ij) = printf (\"%\"++k++\"d * %\"++k++\"d = %\"++k'++\"d\") i j ij\n  where
    k  = show l\n        k' = show l'\n\nketa  = length . show \n\n{-\n*Main&gt; :main
    19\n途中略\n 6 * 16 =  96\n 6 * 17 = 102\n 6 * 18 = 108\n 6 * 19 = 114\n 7 *  1 =
    \  7\n 7 *  2 =  14\n 7 *  3 =  21\n 7 *  4 =  28\n以下略\n-}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3084'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3084
  :user_name: noeta
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/60/
  :language: PHP
  :time: 2007/09/19 04:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">インドでも使える版</pre>\n\t"
  :code: "&lt;?php\nfunction print_kuku($max) {\n    $len1 = strlen($max);\n    $len2
    = strlen(pow($max, 2));\n    \n    for ($i = 1; $i &lt;= $max; $i++) {\n      for
    ($j = 1; $j &lt;= $max; $j++) {\n        printf(\"%{$len1}s * %{$len1}s = %{$len2}s\\n\",
    $i, $j, $i*$j);\n      }\n    }\n}\n\nprint_kuku(9); //日本\nprint_kuku(20); //インド\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3085'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3085
  :user_name: naoya_t
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/348/
  :language: awk
  :time: 2007/09/19 05:01 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">あえて１行で書いてみました。</pre>\n\t"
  :code: |
    BEGIN { for (i=1;i&lt;=9;i++) for (j=1;j&lt;=9;j++) printf("%d * %d = %2d\n",i,j,i*j); exit }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3086'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3086
  :user_name: ocean
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/09/19 05:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">普通に。</pre>\n\t"
  :code: |
    for i in xrange(1, 10):
        for j in xrange(1, 10):
            print "%d * %d = %2d" % (i, j, i * j)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3087'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3087
  :user_name: ocean
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/09/19 05:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">マニピュレータを使用。</pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;iomanip&gt;

    int main()
    {
        for (int i = 1; i &lt;= 9; ++i)
        {
            for (int j = 1; j &lt;= 9; ++j)
            {
                std::cout &lt;&lt; i &lt;&lt; " * " &lt;&lt; j &lt;&lt; " = "
                          &lt;&lt; std::setw(2) &lt;&lt; (i * j) &lt;&lt; std::endl;
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3088'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3088
  :user_name: ibaza
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/443/
  :language: Common
  :time: 2007/09/19 05:38 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">再帰版</pre>\n\t"
  :code: |
    (defun kuku (&amp;optional (x 1) (y 1))
      (cond ((and (= x 9) (&gt; y 9)) nil)
            ((&gt; y 9) (terpri) (kuku (1+ x) 1))
            (t (format t "~D * ~D = ~2D~%" x y (* x y))
               (kuku x (1+ y)))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3089'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3089
  :user_name: yuin
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/09/19 05:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>ふつう\n</p>\n\n\n\n\t"
  :code: |
    import System.out.printf
    for(i &lt;- (1 to 9); j &lt;- (1 to 9)) {
      printf("%d * %d = %2d\n", Array(i,j,i*j).map{_.asInstanceOf[AnyRef]})
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3090'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3090
  :user_name: kzfm
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/106/
  :language: Perl
  :time: 2007/09/19 06:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    my %count;
    for my $j (map {($_) x 9} 1..9){
      printf "%d * %d = %2d\n",$j,++$count{$j},$count{$j}*$j;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3091'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3091
  :user_name: ココサブ
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/09/19 06:54 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">2桁の九九も目的どおり動きます。\r\n書式に*をつかうのがポイント。\r\nただ、答えに余計な空白が入ることがあります。\r\n\r\n19の段がこんな感じに\r\n19
    *  1 =   19\r\n19 *  2 =   38\r\n19 *  3 =   57\r\n19 *  4 =   76\r\n19 *  5 =
    \  95\r\n19 *  6 =  114\r\n19 *  7 =  133\r\n19 *  8 =  152\r\n19 *  9 =  171\r\n19
    * 10 =  190\r\n19 * 11 =  209\r\n19 * 12 =  228\r\n19 * 13 =  247\r\n19 * 14 =
    \ 266\r\n19 * 15 =  285\r\n19 * 16 =  304\r\n19 * 17 =  323\r\n19 * 18 =  342\r\n19
    * 19 =  361\r\n\r\n</pre>\n\t"
  :code: "#include &lt;stdio.h&gt;\n\n#define START 1\n#define END   19\n\nint main()\n{\n
    \   int col; /* 段 */\n    int row; /* 行 */\n    int digit;        /* 段・行の桁数 */\n
    \   int answer_digit; /* 答えの桁数   */\n    int tmp;\n\n    digit = 1;\n    for (tmp
    = END; tmp/10 != 0; digit++) {\n        tmp %= 10; \n    }   \n    answer_digit
    = digit * 2;\n\n    for (col = START; col &lt;= END; col++) {\n        for (row
    = START; row &lt;= END; row++) {\n            printf(\"%*d * %*d = %*d\\n\", digit,
    col,\n                                        digit, row,\n                                        answer_digit,
    col * row);\n        }\n    }\n\n    return 0;\n}\n"
  :tags: []
  :references:
    :url: /web/20100324092143/http://www.mm2d.net/c/c-01.shtml
    :title: C言語-書式付入出力関数(printf文・scanf文)の書式
- :id: '3092'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3092
  :user_name: sawat
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/322/
  :language: JavaScript
  :time: 2007/09/19 08:06 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  printfは使えないので。\n\t"
  :code: |
    function lpad(str, n) {
      return str.length &lt; n ? (new Array(n - str.length + 1).join(' ') + str) : str;
    }
    var n = 10;
    for(var i=1; i&lt;n; i++) {
      for(var j=1; j&lt;n; j++) {
        pp(i + " * " + j + " = " + lpad('' + (i * j), 2));
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3093'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3093
  :user_name: yohei
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/09/19 08:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    class Program {
        static void Main(string[] args) {
            for (int x = 1; x &lt;= 9; x++)
                for (int y = 1; y &lt;= 9; y++)
                    System.Console.WriteLine("{0} * {1} = {2,2}", x, y, x * y);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3094'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3094
  :user_name: sawat
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/322/
  :language: JavaScript
  :time: 2007/09/19 08:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すみません。上記のpp関数は自分のローカル用デバッグ出力関数です。\r\nrhinoならprintとかに置き換えてください。\r\n\r\nで、↓はalertで表示する場合。\r\n100行alertはひどいので10回に分けて。\r\nalertのフォントは普通プロポーショナルなのが悲しいところ。</pre>\n\t"
  :code: |
    function lpad(str, n) {
      return str.length &lt; n ? (new Array(n-str.length+1).join(' ') + str) : str;
    }
    var n = 10;
    var list = [];
    for(var i=1; i&lt;n; i++) {
      for(var j=1; j&lt;n; j++) {
        list.push(i + " * " + j + " = " + lpad('' + (i*j), 2));
      }
      alert(list.join("\n"));
      list = [];
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3095'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3095
  :user_name: ibaza
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/443/
  :language: Other
  :time: 2007/09/19 08:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">再帰版ver.2\r\n\r\n二桁の場合にも右端が揃うように汎用性を持たせてみました。\r\n\r\n例：(kuku
    19)\r\n(省略）\r\n19 *  1 =  19\r\n19 *  2 =  38\r\n19 *  3 =  57\r\n19 *  4 =  76\r\n19
    *  5 =  95\r\n19 *  6 = 114\r\n19 *  7 = 133\r\n19 *  8 = 152\r\n19 *  9 = 171\r\n19
    * 10 = 190\r\n19 * 11 = 209\r\n19 * 12 = 228\r\n19 * 13 = 247\r\n19 * 14 = 266\r\n19
    * 15 = 285\r\n19 * 16 = 304\r\n19 * 17 = 323\r\n19 * 18 = 342\r\n19 * 19 = 361</pre>\n\t"
  :code: |
    (defun kuku (n)
    ;nの桁数をlen1,最も大きな積(n*n)の桁数をlen2とする
        (let ((len1 (digits n))
              (len2 (digits (* n n))))
           (sub n len1 len2)))

    (defun sub (n len1 len2 &amp;optional (x 1) (y 1))
      (cond ((and (= x n) (&gt; y n)) nil)
            ((&gt; y n) (sub n len1 len2 (+ x 1) 1))
            (t (print-space (- len1 (digits x)))
               (format t "~D * " x)
               (print-space (- len1 (digits y)))
               (format t "~D = " y)
               (print-space (- len2 (digits (* x y))))
               (format t "~D~%" (* x y))
               (sub n len1 len2 x (+ y 1)))))

    ;桁数を数える
    (defun digits (m &amp;optional (d 0))
      (cond ((zerop m) d)
            (t (digits (floor m 10) (incf d)))))

    ;空白を出力
    (defun print-space (space-num)
      (dotimes (i space-num)
        (format t " ")))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3096'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3096
  :user_name: ？せんたくいた
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2007/09/19 08:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">答えの欄に空白置いて、答えの桁数だけ^H(backspace)吐いて、答え書く。\r\n<hr>\r\n(管理者追記：ソースコード中の制御コードが原因でRSSがvalidでなくなっていたので、\r\nとりあえず削除しました。bsは空文字列のようになっていますが、実際には0x08が2つ入っていました。)\r\n</pre>\n\t"
  :code: "#!/bin/bash\nbs=\"\"\n# bs=\"^H^H\"\nfor n in $(seq 1 9); do\n\tfor m in
    $(seq 1 9); do\n\t\tp=$(($n*$m))\n\t\techo -n $n' * '$m' =   '\n\t\techo ${bs:0:${#p}}$p\n\tdone\ndone\n"
  :tags:
  - seq
  :references:
    :url: 
    :title: 
- :id: '3097'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3097
  :user_name: g000001
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2007/09/19 09:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ibazaさん(#3088)のきれいな解答の後で投稿するのは恥ずかしいのですが、doループで…。\r\nおまけで9*9以上にも対応してみました…。</pre>\n\t"
  :code: "(defun print-kuku (&amp;optional (n 9))\n  (let* ((dn (1+ (truncate (log
    (expt n 2) 10))))\n\t (dnn (1+ (/ dn 2))))\n    (do ((i 1 (1+ (mod i n)))\n\t
    (j 1 (if (= i n) (1+ j) j)))\n\t((&gt; j n))\n      (format t \"~:[~;~%~]~VD *~VD
    = ~VD~%\" (= i 1) dnn j dnn i dn (* j i)))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3098'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3098
  :user_name: sumim
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/09/19 10:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\r<br><br>#format: は単に文字列指定箇所への埋め込みのみで、printf の書式指定のような細やかな機能はないので、数値の文字列変換に際し、要求にあわせてあらかじめ整形しておく必要があります。\r<br><br>今回は、第一引数の文字で第一引数の文字数に足りない分を左側から追加して埋める #printPaddedWith:to: というメソッドを使用しました。\r<br><br>なお、$ は Smalltalk での文字オブジェクトリテラルに冠する記号で、直後に続く一文字（下の場合、スペース）に相当する文字オブジェクトを返します。\n\t"
  :code: |
    World findATranscript: nil.
    1 to: 9 do: [:x | 1 to: 9 do: [:y |
        Transcript cr; show: ('{1} * {2} = {3}' format: {x. y. (x * y) printPaddedWith: $  to: 2})]]
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '3099'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3099
  :user_name: sumim
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2007/09/19 10:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  第一引数の文字数　→　第二引数の文字数\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3100'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3100
  :user_name: nobsun
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/98/
  :language: Scheme
  :time: 2007/09/19 11:06 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">Gauche\r\nsrfi-42とutil.matchを使った\r\n</pre>\n\t"
  :code: |
    (use srfi-42)
    (use util.match)

    (define (display99 n)
      (let* ((k (string-length (x-&gt;string n)))
             (k2 (string-length (x-&gt;string (* n n))))
             (fmt (string-append "~" (x-&gt;string k) "d * ~" (x-&gt;string k) "d = ~" (x-&gt;string k2) "d~%")))
        (define (f x)
          (match x
            ((i j ij) (format #t fmt i j ij))))
        (for-each f (list-ec (: x 1 (+ n 1)) (: y 1 (+ n 1)) (list x y (* x y))))
        (values)))
  :tags:
  - Gauche
  - srfi-42
  - util.match
  :references:
    :url: 
    :title: 
- :id: '3101'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3101
  :user_name: jz5
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/09/19 11:08 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">C#では複合書式を使用していたのでPadLeftで。</pre>\n\t"
  :code: |
    For i As Integer = 1 To 9
        For j As Integer = 1 To 9
            Console.WriteLine(i.ToString &amp; " * " &amp; j.ToString &amp; " = " &amp; (i * j).ToString.PadLeft(2))
        Next
    Next
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3102'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3102
  :user_name: BigFatCat
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/444/
  :language: Ruby
  :time: 2007/09/19 12:23 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">初投稿。思いつきで、何の工夫もなし。</pre>\n\t"
  :code: |
    (1..9).each do |i|
      (1..9).each do |j|
        puts "#{i} * #{j} " &lt;&lt; "= " &lt;&lt; (i * j).to_s.rjust(2)
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3103'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3103
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2007/09/19 12:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">おなじく一行python版です。\r\n</pre>\n\t"
  :code: |
    print '\n'.join(['%d * %d = %2d' % (i, j, i*j) for i in range(1, 10) for j in range(1, 10)])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3104'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3104
  :user_name: koguro
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/438/
  :language: Scheme
  :time: 2007/09/19 13:13 GMT
  :vote_count: '5'
  :vote_score: '5'
  :body: "\n\t  <pre class=\"compact\">常識のない人間の解答</pre>\n\t"
  :code: |
    (use srfi-42)

    (for-each (lambda (line i)
                (cond
                 ((memq i '(0 1 2 61 62 63 64 65 66 79 80))
                  (print line))
                 ((memq i '(3 67))
                  (print "(略)"))
                 (else
                  #f)))
              (list-ec (: a 1 10) (: b 1 10) (format "~a * ~a = ~2@a" a b (* a b)))
              (iota 100))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3105'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3105
  :user_name: koguro
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/438/
  :language: 
  :time: 2007/09/19 13:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すみません、(use srfi-1)を忘れました。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3106'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3106
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/09/19 13:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    public class Sample {
        public static void main(String[] args) {
            for (int i = 1; i &lt;= 9; i++) {
                for (int j = 1; j &lt;= 9; j++) {
                    System.out.printf("%d * %d = %2d%n", i, j, i * j);
                }
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3108'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3108
  :user_name: にしお
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/19 14:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">な、なんてことをｗ</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3109'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3109
  :user_name: katsu
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/117/
  :language: Scheme
  :time: 2007/09/19 14:23 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">空気読んでないかも</pre>\n\t"
  :code: |
    (use srfi-42)
    (do-ec (: i 1 10) (: j 1 10) (format #t "~d * ~d = ~2d\n" i j (* i j)))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3110'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3110
  :user_name: katsu
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/117/
  :language: 
  :time: 2007/09/19 14:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">投稿時にユーザー名とパスワード入れて、ログインにチェック入れて、プレビューして、投稿すると、匿名になります。（プレビューでは、ログイン名出るんですけど。\r\nクッキー拒否しているからでしょうか。受け入れれば良いんでしょうけど。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3112'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3112
  :user_name: BigFatCat
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/444/
  :language: Ruby
  :time: 2007/09/19 15:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ちょっと細かいところだけど、\r\nputs \"#{i} * #{j} \" &lt;&lt;
    \"= \" &lt;&lt; (i * j).to_s.rjust(2)\r\nを\r\nputs \"#{i} * #{j} = \" &lt;&lt;
    (i * j).to_s.rjust(2)\r\nに直した。\r\n</pre>\n\t"
  :code: |
    (1..9).each do |i|
      (1..9).each do |j|
        puts "#{i} * #{j} = " &lt;&lt; (i * j).to_s.rjust(2)
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3113'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3113
  :user_name: omoikani
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/09/19 15:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">SML/NJのFormatストラクチャ使用。\r\nとりあえず2桁以上も無問題。</pre>\n\t"
  :code: |
    fun showMTable n =
    let
      fun show col row =
      let
        open Format

        fun loop n m =
        let
          val h = n div 10
        in
          if h = 0 then m else loop h (m + 1)
        end

        val x = loop n 1
        val y = loop (n * n) 1
        val s = format ("%%%dd * %%%dd = %%%dd\n") [INT x, INT x, INT y]
      in
        if col &lt;= n then
          if row &lt;= n then
            (formatf s print [INT col, INT row, INT (col * row)];
             show col (row + 1))
          else
            show (col + 1) 1
        else
          ()
      end
    in
      show 1 1
    end;

    showMTable 9 (* showMTable n で n * n まで表示 *)
  :tags:
  - SML/NJ
  :references:
    :url: 
    :title: 
- :id: '3115'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3115
  :user_name: omoikani
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/09/19 15:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">多分こう書くのが普通じゃないかと思った。というコトで、大した変更はないですがリファクタリング。</pre>\n\t"
  :code: |
    fun showMTable n =
    let
      fun show col row =
      let
        open Format

        fun loop n m =
        let
          val h = n div 10
        in
          if h = 0 then m else loop h (m + 1)
        end

        val x = loop n 1
        val y = loop (n * n) 1
      in
        if col &lt;= n then
          if row &lt;= n then
            (formatf "%d * %d = %d\n" print [RIGHT (x, INT col), RIGHT (x, INT row),
            RIGHT (y, INT (col * row))];
             show col (row + 1))
          else
            show (col + 1) 1
        else
          ()
      end
    in
      show 1 1
    end;

    showMTable 9 (* showMTable n で n * n まで表示 *)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3116'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3116
  :user_name: shiro
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/09/19 18:27 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">nobsun関数型脳に侵されていますね :-) lazy脳というべきか。\r\ndo-ecを使うとループの中で直接副作用を起こすことができます。\r\nHaskellerにとってはcomposableでないのが気持ち悪いでしょうが…\r\n\r\nあと、formatは直接幅指定ができます。
    ~2d で2桁。\r\n~vd と書くと幅自体を引数で渡すこともできます (displayNN参照)\r\n</pre>\n\t"
  :code: |
    (use srfi-42)

    (define (display99 n)
      (do-ec (: x 1 (+ n 1)) (: y 1 (+ n 1))
             (format #t "~d * ~d = ~2d~%" x y (* x y))))

    ;; n &gt;= 10 にも対応
    (define (displayNN n)
      (let ((w0 (string-length (number-&gt;string n)))
            (w1 (string-length (number-&gt;string (* n n)))))
        (do-ec (: x 1 (+ n 1)) (: y 1 (+ n 1))
               (format #t "~vd * ~vd = ~vd~%" w0 x w0 y w1 (* x y)))))
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '3118'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3118
  :user_name: nobsun
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/19 19:36 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">&gt; nobsun関数型脳に侵されていますね :-) lazy脳というべきか。\r\nバレてる
    :)\r\n&gt; ~vd と書くと幅自体を引数で渡すこともできます\r\nこれもありそうだなと投稿してから気づいたのでした。\r\n\r\nというわけでScheme版をHaskell版へ逆輸入\r\n\r\n\r\n</pre>\n\t"
  :code: "import Text.Printf\n\ndisplayNN n \n = sequence_\n $ do { i &lt;- s\n      ;
    j &lt;- s\n      ; return $ putStrLn $ printf fmt i j (i*j)\n      }\n   where
    \n     s   = [1..n]\n     k   = length $ show n\n     k'  = length $ show (n*n)\n
    \    fmt = printf \"%%%dd * %%%dd = %%%dd\" k k k'\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3120'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3120
  :user_name: nobsun
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/20 00:12 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">Text.Printf.printf でも * フラッグが使えるのでした。</pre>\n\t"
  :code: "import Text.Printf\n\ndisplayNN :: Int -&gt; IO ()\ndisplayNN n \n = sequence_
    \n $ do { i &lt;- [1..n] ; j &lt;- [1..n]\n      ; return $ putStrLn $ printf
    \"%*d * %*d = %*d\" k i k j k' (i*j)\n      }\n   where k  = length $ show n\n
    \        k' = length $ show (n*n)\n"
  :tags:
  - Text.Printf
  :references:
    :url: 
    :title: 
- :id: '3121'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3121
  :user_name: にしお
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/20 03:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt;クッキー拒否しているからでしょうか。\r\n\r\nですね。\r\n「クッキー拒否＝ログイン情報を毎回破棄＝ページを見るたびにログアウト」\r\nと考えてもらうとわかりやすいかも知れませんが、\r\nログインしてプレビューした後、ログアウトしてから投稿しているのと同じわけです。\r\nもしクッキーを保存したくなければ、投稿の直前にログインするといいのではないでしょうか。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3123'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3123
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/09/20 08:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">超ふつう\r\n恥ずかしいくらいふつう\r\n既出じゃないことだけ確かめました\r\n早くアブノーマルになりたい</pre>\n\t"
  :code: "#include    &lt;stdio.h&gt;\n\nint main() {\n    int i, j;\n    \n    for
    (i = 1; i &lt;= 9; i++) {\n        for (j = 1; j &lt;= 9; j++)\n            printf(\"%d
    * %d = %2d\\n\", i, j, i*j);\n    }\n    \n    return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3129'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3129
  :user_name: fkmn
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/190/
  :language: SQL
  :time: 2007/09/20 13:15 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">確認してませんが、PostgreSQL でも動くはずです。\r\nMySQL には、TO_CHAR
    が無いので、どうやって整形したらいいんだろう？</pre>\n\t"
  :code: |
    DROP TABLE digits;
    CREATE TABLE digits(n INTEGER PRIMARY KEY);
    INSERT INTO digits VALUES(1);
    INSERT INTO digits VALUES(2);
    INSERT INTO digits VALUES(3);
    INSERT INTO digits VALUES(4);
    INSERT INTO digits VALUES(5);
    INSERT INTO digits VALUES(6);
    INSERT INTO digits VALUES(7);
    INSERT INTO digits VALUES(8);
    INSERT INTO digits VALUES(9);

      SELECT a.n || ' * ' || b.n || ' = ' || TO_CHAR(a.n * b.n , '99') AS kuku
        FROM digits a, digits b
    ORDER BY b.n, a.n ;
  :tags:
  - Oracle
  :references:
    :url: 
    :title: 
- :id: '3132'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3132
  :user_name: kzfm
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/106/
  :language: Perl
  :time: 2007/09/20 14:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    use List::MoreUtils qw(each_array);

    @i = map {($_) x 9} 1..9;
    @j = (1..9) x 9;
    my $ea = each_array(@i,@j);
    while (my ($i,$j) = $ea-&gt;()){ printf "%d * %d = %2d\n",$i,$j,$i*$j };
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3140'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3140
  :user_name: miyamuko
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/382/
  :language: xtal
  :time: 2007/09/20 17:43 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">%f はフォーマット文字列を定義するリテラルです。\r\nformatter は引数を3つ取る関数になります。\r\n%(hogehoge)d
    とすることで名前付きにすることも できます。</pre>\n\t"
  :code: |
    mul: fun(n, m) fiber {
        n.times.map(|i| i+1).each{|i|
            m.times.map(|j| j+1).each{|j|
                yield i, j, i * j;
            }
        }
    }

    formatter: %f[%d * %d = %2d];
    mul(9, 9) {|i,j,s|
        formatter(i, j, s).p;
    }
  :tags:
  - xtal0.9.7
  :references:
    :url: 
    :title: 
- :id: '3143'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3143
  :user_name: mad
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/418/
  :language: Haskell
  :time: 2007/09/21 05:06 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">リスト内包表記やリストモナドだと表示順序がどうなるかなどがぱっと見では分かりにくくなるので、こういう問題はTraversableがすっきり書け、気に入っています。\r\n\r\nprintfは直接IOモナドとして使えるように作られています。</pre>\n\t"
  :code: |
    {-# OPTIONS_GHC -fglasgow-exts #-}
    import Text.Printf (printf)
    import Data.Traversable

    main = for [1..9] (\(i::Int) -&gt;
               for [1..9] (\(j::Int) -&gt;
                   printf "%d * %d = %2d\n" i j (i*j)
               )
           )
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3146'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3146
  :user_name: shyouhei
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/70/
  :language: 
  :time: 2007/09/21 06:47 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">自分で書けば使えないことはないんじゃないですか。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100324092143/http://www.onicos.com/staff/iz/amuse/javascript/expert/printf.txt
    :title: http://www.onicos.com/staff/iz/amuse/javascript/expert/printf.txt
- :id: '3149'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3149
  :user_name: にしお
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/21 07:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Haskellでもこういう書き方ができるんですねぇ\r\nmapM_とか使わなきゃいけないのだとばかり思っていました。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3151'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3151
  :user_name: susu
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/218/
  :language: Python
  :time: 2007/09/21 08:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">どれが何桁でもズレないの作りました。\r\n%dの文字幅に変数使えたらいいのになー。</pre>\n\t"
  :code: "def kuku(A=[0],B=[0]):\n  keta_A = len( str(A[-1]) )\n  keta_B = len( str(B[-1])
    )\n  keta_ans = len( str( A[-1]*B[-1] ))\n  \n  for i in A:\n    print\n    I
    = str(i).rjust(keta_A)\n    \n    for j in B:\n      J = str(j).rjust(keta_B)\n
    \     print \"%s * %s = %s\" \\\n            %( I, J, str(i*j).rjust(keta_ans)
    )\n\na=range(1,10)\nkuku(a,a) #九九\nkuku([8],range(1,21)) #八の段\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3152'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3152
  :user_name: nobsun
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/09/21 08:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">&gt; Traversableがすっきり書け\r\nなるほど勉強になります。\r\n&gt;
    printfは直接IOモナドとして使えるように作られています。\r\nimperativity phobia の私としては\r\n#3080のような使い方しか思いつかなかった。
    :)</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3155'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3155
  :user_name: sawat
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/322/
  :language: 
  :time: 2007/09/21 11:15 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  高度な JavaScript 技集のprintfのことは知ってましたよ。\r<br>でも、このお題満たすためにprintfを実装するのはどう考えてもオーバースペックですよね。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3156'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3156
  :user_name: xsd
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/154/
  :language: BASIC
  :time: 2007/09/21 12:43 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">どうやって右端を揃うようにレイアウトするか、という重要な要件をあえてユーザーの反射神経に委ねてみました。\r\n左右に移動しながら表示されるので、適当なところでキーを押すと止まります。\r\n\r\nN88-BASICで昔のゲーム風に。\r\n\r\n(補足)\r\n195
    E=0\r\nを加えると、ユーザー入力無しでレイアウトされます。</pre>\n\t"
  :code: |
    100 DEFINT A-Z
    110 FOR I = 1 TO 9
    120   FOR J = 1 TO 9
    130     S$ = RIGHT$(" "+STR$(I*J),2)+" "+CHR$(13)
    140     X=7:VX=-1:E=1
    150     WHILE E
    160       PRINT STR$(I)+" *"+STR$(J)+" ="+SPACE$(X/3)+S$;
    170       X=X+VX
    180       IF X&lt;4 OR X&gt;10 THEN VX=-VX
    190       IF INKEY$&lt;&gt;"" THEN E=0
    200     WEND
    210     PRINT
    220   NEXT J
    230 NEXT I


    --- 筆者実行例
    run
     1 * 1 =   1
     1 * 2 =  2
     1 * 3 =    3
     1 * 4 =   4
    ^C
    Break in 170
    Ok
  :tags:
  - N88BASIC
  :references:
    :url: 
    :title: 
- :id: '3157'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3157
  :user_name: ？せんたくいた
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2007/09/21 13:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">printf使うのは素直過ぎて。\r\n</pre>\n\t"
  :code: |
    #!/bin/bash
    for n in $(seq 9); do for m in $(seq 9); do echo $n' * '$m' = '$(printf '%2g' $(($n*$m))); done; done
  :tags:
  - printf
  - seq
  :references:
    :url: 
    :title: 
- :id: '3158'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3158
  :user_name: ursm
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/413/
  :language: Ruby
  :time: 2007/09/21 15:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    def product(xs, ys)
      xs.inject([]) {|r, x|
        r + ys.map {|y| [x, y] }
      }
    end

    product(1..9, 1..9).each do |x, y|
      printf "%d * %d = %2d\n", x, y, x * y
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3161'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3161
  :user_name: matyr
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/09/22 02:00 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t   JS ならではの書き方を。\n\t"
  :code: |
    javascript:for($='&lt;table&gt;',i=0;i++&lt;9;)for(j=0;j++&lt;9;)$+='&lt;tr&gt;&lt;td&gt;'+i+' * '+j+' = '+'&lt;/td&gt;&lt;td align=right&gt;'+i*j+'&lt;/td&gt;&lt;/tr&gt;';$+'&lt;/table&gt;'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3173'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3173
  :user_name: yohei
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/415/
  :language: Prolog
  :time: 2007/09/26 04:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "kuku :- between(1, 9, X), between(1, 9, Y),\n\tZ is X * Y, format('~d *
    ~d =~t~d~10|~n', [X, Y, Z]).\n:- findall(_,kuku,_).\n"
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '3179'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3179
  :user_name: naranja
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/09/26 13:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ごく普通に。</pre>\n\t"
  :code: |
    import std.stdio;

    void main(){
        for(int i = 1; i &lt;= 9; i++){
            for(int j = 1; j &lt;= 9; j++){
                writefln("%d * %d = %2d", i, j, i * j);
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3180'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3180
  :user_name: shyouhei
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/70/
  :language: 
  :time: 2007/09/26 13:26 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  \n<p>ひょっとして「使えない」の解釈が違うのかもしれませんが、このサイトではありもののライブラリを使うのは禁止されてるわけでも忌避されてるわけでもないので、あるんだから使えばいいじゃんと思いますけども。知ってたなら尚更。\n</p>\n<p>もちろんいちからprintfを車輪の再発明するのはいくらなんでもめんどくさいってのは否定しません。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3181'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3181
  :user_name: susu
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/218/
  :language: Python
  :time: 2007/09/27 03:49 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">あったのかー。</pre>\n\t"
  :code: "def digit(xs=[]):\n\treturn [len( str(i) ) for i in xs]\n\ndef kuku(A=range(1,10),B=range(1,10)):\n
    \ lA,lB = A[-1],B[-1]\n  ketaA, ketaB, ketaAns = digit([ lA, lB, lA*lB ])\n  for
    i in A:\n    for j in B:\n      print \"%*d * %*d = %*d\" %( ketaA,i,  ketaB,j,
    \ ketaAns,i*j )\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3187'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3187
  :user_name: kozima
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/164/
  :language: OCaml
  :time: 2007/09/27 14:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">OCaml なかったので投稿しておきます。</pre>\n\t"
  :code: |
    let width x =
      if x &lt; 0 then
        raise (Invalid_argument (string_of_int x))
      else
        1 + int_of_float (log10 (float_of_int x))

    let list_kuku n =
      let w1, w2 = width n, width (n*n) in
        for i = 1 to n do
          for j = 1 to n do
            Printf.printf "%*d * %*d = %*d\n" w1 i w1 j w2 (i*j)
          done
        done
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3251'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3251
  :user_name: cooldaemon
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/451/
  :language: Erlang
  :time: 2007/10/05 03:37 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">リスト内包表記を使いました。</pre>\n\t"
  :code: |
    lists:foreach(fun (X) -&gt; io:fwrite("~B x ~B = ~2B~n", X) end, [[X, Y, X*Y] || X &lt;- lists:seq(1,9), Y &lt;- lists:seq(1,9)]).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3270'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3270
  :user_name: kgoto
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/457/
  :language: Python
  :time: 2007/10/05 16:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">%2sのところ%2dにしてstr(x*y)のところをたんにx*yにすればいいと後になって気づいたorz\r\n掛け算が9x9が最高なんでいろいろと楽チンですね。</pre>\n\t"
  :code: |
    for x in range(1,10):
        for y in range(1,10):
            print "%d * %d = %2s"%(x,y,str(x*y))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3499'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3499
  :user_name: matyr
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/343/
  :language: 
  :time: 2007/10/22 15:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    欄＝リスト！作る　100 400 大きさ　-50 200 位置。
    「｜左｜「｜右　積｜積＝左＊右。
    　欄！(『』！(左)『 * 』(右)((積＞９)！なら「『 = 』」そうでなければ「『 =   』」実行)(積)連結)書く。
    」！９回 繰り返す」！９回 繰り返す。
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3535'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3535
  :user_name: Yusuke.M
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/13/
  :language: FORTRAN
  :time: 2007/10/27 06:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">初めてのFortranです&gt;&lt;\r\nなんか1行目のインデントが効いていないけどタブが存在してます。</pre>\n\t"
  :code: |
    do i = 1, 9
            do j = 1, 9
                write(*, 100) i, j, i * j
            end do
        end do

    100    format(i1, ' + ', i1, ' = ', i2)

        end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3583'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3583
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/30 05:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">表頭，表側に余計なものがつきますが</pre>\n\t"
  :code: |
    data.frame(x=rep(1:9, each=9), y=rep("*", 81), z=rep(1:9, 9), u=rep("=", 81), v=as.vector(outer(1:9, 1:9, "*")))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3585'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3585
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: R
  :time: 2007/10/30 06:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">これなら，余分なものは付かない</pre>\n\t"
  :code: |
    cat(sprintf("%i * %i = %2i", rep(1:9, each=9), rep(1:9, 9), outer(1:9, 1:9, "*")), fill=10)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3586'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3586
  :user_name: ぴょん
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/490/
  :language: Perl
  :time: 2007/10/30 06:35 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">意味があるか不明だけど、更に行数減らせますね。</pre>\n\t"
  :code: |
    map {printf "%d * %d = %2d\n",$_,++$count{$_},$count{$_}*$_} (my %count, map {($_) x 9} 1..9);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3592'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3592
  :user_name: kkobayashi
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/10/30 08:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">for文を使わないところにRらしさがあって素敵です。\r\n掛け算の外積(outer)は
    \"1:9 %o% 1:9\" と演算子を使って書けたりしますよ（ご存知でしたらすみません）。\r\n1:9が冗長に見えるかな・・・と思ったのでこんな別解を考えてみました。</pre>\n\t"
  :code: |
    with(expand.grid(1:9, 1:9), {cat(sprintf("%i * %i = %2i", Var2, Var1, Var1*Var2), fill=10)})
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3622'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3622
  :user_name: eller
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/499/
  :language: HSP
  :time: 2007/10/31 07:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">1行目の#runtimeは実行結果を見やすくするために入れているものであり、プログラム上必要なものではありません。</pre>\n\t"
  :code: |
    #runtime "hsp3cl"
        repeat 9, 1
            i = cnt
            repeat 9, 1
                mes strf( "" + i + " * " + cnt + " = %2d", i * cnt )
            loop
        loop
        stop
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3624'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3624
  :user_name: eo-oe-aaaa
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/498/
  :language: C
  :time: 2007/10/31 08:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">動的にサイズを変えられるようにしてみました。</pre>\n\t"
  :code: |2
            static void Main(string[] args)
            {
                kuku(9);
                kuku(99);
                kuku(999);
            }

            static void kuku(int n)
            {
                int len = n.ToString().Length;
                int xLen = (n * n).ToString().Length;
                string    format = "{0, " + len + "} * {1, " + len + "} = {2, " + xLen + "}";

                for (int i = 1; i &lt;= n ; ++i)
                    for (int j = 1; j &lt;= n ; ++j)
                        Console.WriteLine(format, i, j, i * j);
            }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3626'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3626
  :user_name: tamanecoplus
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/501/
  :language: C
  :time: 2007/10/31 10:51 GMT
  :vote_count: '6'
  :vote_score: '6'
  :body: "\n\t  <pre class=\"compact\">初投稿です。\r\nリトルエンディアン（Intel系）で動作します。</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    int main() {
      long a[3];
      int i, j;
      for (i = 0; i &lt;= 80; i++) {
        j = (i/9 + 1) * (i%9 + 1);
        a[0] = 539631665L + i/9;
        a[1] = 540876849L + i%9;
        a[2] = 12320L + (j%10)*256 + (j&gt;9 ? 16+j/10 : 0);
        puts((char *)a);
      }
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3630'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3630
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/10/31 13:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">printf にかっこはいらない\r\nBEGIN の最後に exit はいらない</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3641'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3641
  :user_name: shiro
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/11/01 00:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こういう手がありましたか。お見事。\r\nlong=32bit、という条件も必要ですよね?\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3642'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3642
  :user_name: naoya_t
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/348/
  :language: 
  :time: 2007/11/01 01:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">まあそうなんですが</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3643'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3643
  :user_name: tamanecoplus
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/501/
  :language: 
  :time: 2007/11/01 02:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あ、確かに。\r\nlongは32bitとは限らないですね。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3743'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3743
  :user_name: fujidig
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/07 07:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
        #i = 1;
        while( #i &lt;= 9 ) {
            #j = 1;
            while( #j &lt;= 9 ) {
                insert str( #i ) + " * " + str( #j ) + " = ";
                call KetaSoroe ( #i * #j ), 2;
                insert $$return + "\n";
                #j = #j + 1;
            }
            #i = #i + 1;
        }
        endmacro;

    KetaSoroe:
        ##i = ##2 - strlen( str( ##1 ) );
        $$result = "";
        if ( ##i &gt;= 0 ) {
            while( ##i &gt; 0 ) {
                $$result = $$result + " ";
                ##i = ##i - 1;
            }
        }
        $$result = $$result + str( ##1 );
        return $$result;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3753'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3753
  :user_name: tmiz
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/33/
  :language: Python
  :time: 2007/11/08 06:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">え、これじゃだめなの？</pre>\n\t"
  :code: |
    def out(a,b):
        print "%d * %d = %2d" % (a, b, a*b)
    [out(a,b) for a in range(1,10) for b in range(1,10)]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3774'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3774
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/11/09 09:27 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  なでしこワンライナーで。\n\t"
  :code: |
    aで1から9まで繰り返す;bで1から9まで繰り返す;"{a} * {b} = {文字列右寄せ(a*b,2)}"を表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3843'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3843
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: JavaFxScript
  :time: 2007/11/11 11:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">System.out.printf()で可変長引数が使えませんでした。\r\nですので、引数はString,
    Object[] にしています。</pre>\n\t"
  :code: |
    import java.lang.System;

    for (i in [1..9]) {
        for (j in [1..9]) {
            System.out.printf("%d * %d = %2d%n", [i, j, (i * j)]);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3879'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3879
  :user_name: dankogai
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/11/11 22:17 GMT
  :vote_count: '4'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">Perlならこの程度まではやらなくては。\r\nDan the One-Liner Monger</pre>\n\t"
  :code: |
    perl -e 'for$i(1..9){printf"$i * $_ = %2d\n",$i*$_ for(1..9)}'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3905'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/3905
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2007/11/12 09:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">面白くない答えですが・・・\r\n\r\nsayは、printlnだと思ってください。\r\nt_ishida</pre>\n\t"
  :code: |
    for(var i=1;i&lt;10;i++) for(var j = 1;j&lt;10;j++) say([i,'*',j,'=',''].join(' ') + (i * j &gt; 9 ? '' : ' ') + i * j);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4020'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4020
  :user_name: Psychs
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/554/
  :language: Objective
  :time: 2007/11/14 13:06 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">plain C ですが。</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    int main(int argc, char** argv)
    {
      int i, j;
      for (i=1; i&lt;10; i++)
        for (j=1; j&lt;10; j++)
          printf("%d * %d = %2d\n", i, j, i*j);
      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4046'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4046
  :user_name: linker
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/567/
  :language: Ruby
  :time: 2007/11/15 05:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  uptoがなかったのでとりあえず\n\t"
  :code: |
    1.upto(9){|x|
      1.upto(9){|y|
        printf("%2d * %2d = %2d\n",x,y,x*y)
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4048'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4048
  :user_name: ihag
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/560/
  :language: Ruby
  :time: 2007/11/15 07:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">あえてsprintfの類やループを使わず．</pre>\n\t"
  :code: |
    i, x, y = 0, 0, 0
    puts (('o' * 9 + "\n") * 9).
      gsub(/^/) { (y += 1).to_s + ':' }.
      gsub(/o/) { i = x; x = (x + 1) % 9; i + 1 }.
      gsub(/^(\d+):(.+)/) {
        y, line = $~[1..-1]
        line.gsub(/\d/) {
          "#{y} * #{$&amp;} = " +
            (' ' + (y.to_i * $&amp;.to_i).to_s)[-2, 2] +
            "\n"
        }
      }.gsub("\n\n", "\n")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4239'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4239
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: Ruby
  :time: 2007/11/19 08:09 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n\t"
  :code: |
    puts (1..9).map{|y|(1..9).map{|x|sprintf "%2d * %2d = %2d",x,y,x*y}}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4240'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4240
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: Scheme
  :time: 2007/11/19 08:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
     (begin (map (lambda (y) (map (lambda (x) (print (format #f "~2d * ~2d = ~2d" y x (* x y)))) (iota 9 1))) (iota 9 1)) #t)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4438'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4438
  :user_name: tokibito(nullpobug)
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/252/
  :language: Delphi
  :time: 2007/11/27 12:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  DelphiにはFormatがあるが、これは劣化版sprintfみたいなもの。\n\t"
  :code: |
    program kuku;

    {$APPTYPE CONSOLE}

    uses
      SysUtils;

    var
      i, j: Integer;

    begin
      for i := 1 to 9 do
        for j := 1 to 9 do
          WriteLn(Format('%d * %d = %2d', [i, j, i * j]));
    end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4440'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4440
  :user_name: tokibito(nullpobug)
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/252/
  :language: Delphi
  :time: 2007/11/27 12:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Formatを使わない場合。\n\t"
  :code: |
    program kuku;

    {$APPTYPE CONSOLE}

    var
      i, j: Integer;
      s: String;

    begin
      for i := 1 to 9 do
        for j := 1 to 9 do
        begin
          Str(i * j:2, s);
          WriteLn(i, ' * ', j, ' = ' + s);
        end;
    end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4683'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4683
  :user_name: atsu-kan
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/600/
  :language: Matlab
  :time: 2007/12/08 09:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Matlabらしくベクトル計算で。</p>\n\n\t"
  :code: |
    a = kron(1:9, repmat(1, 1, 9));
    b = repmat(1:9, 1, 9);
    c = a.*b;
    fprintf('%d * %d = %2d\n', [a; b; c])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4818'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4818
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2007/12/15 02:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">引数を使わない場合でも省略はできないのでダミーがいります。\r\n\r\n   kuku
    0\r\n1 * 1 =  1\r\n1 * 2 =  2\r\n1 * 3 =  3\r\n   ...\r\n8 * 8 = 64\r\n8 * 9 =
    72\r\n9 * 1 =  9\r\n9 * 2 = 18\r\n9 * 3 = 27\r\n9 * 4 = 36\r\n9 * 5 = 45\r\n9
    * 6 = 54\r\n9 * 7 = 63\r\n9 * 8 = 72\r\n9 * 9 = 81\r\n</pre>\n\t"
  :code: |
    f=.4 :0
    (":x.),' * ',(":y.),' = ',2":x.*y.
    )
    kuku=.3 :',/f"0/~&gt;:i.9'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4843'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/4843
  :user_name: ap
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/604/
  :language: PHP
  :time: 2007/12/16 08:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>何桁でも表記できるものを作成してみました。\nかつ第二引数でHTML表示させる時の、\nタグ形成も出来るようにしてます。</p>\n<p>負荷軽減を考えるなら、\n「strlen」の箇所を関数の最初に計算して、\n変数にしてもいいかと思います。\nとりあえずは行数を少なくするようにしてみました。</p>\n\n\t"
  :code: |
    &lt;?php

    function listKuku($num=9, $html=false)
    {
        $list = "";
        for ($i=1; $i&lt;$num+1; $i++) {
            for ($j=1; $j&lt;$num+1; $j++) {
                $list .= str_pad($i, strlen($num), " ", STR_PAD_LEFT)." * ".str_pad($j, strlen($num), " ", STR_PAD_LEFT)." = ".str_pad($i*$j, strlen($num*$num), " ", STR_PAD_LEFT)."\n";
            }
        }
        if ($html) {
            $list = str_replace(" ", "&amp;nbsp;", $list);
            $list = nl2br($list);
            //TABLE等作成させても可
        }
        return $list;
    }

    //header("Content-Type: text/html; charset=utf-8"); //必要なら使用

    //使用方法1
    $list = listKuku();
    echo $list;

    //使用方法2
    $big_list = listKuku(40);
    echo $big_list;

    //使用方法3
    $html_list = listKuku(40, true);
    echo $html_list;

    ?&gt;
  :tags:
  - php
  :references:
    :url: 
    :title: 
- :id: '5026'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/5026
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: Batchfile
  :time: 2007/12/28 02:26 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">cmd.exeで。</pre>\n\t"
  :code: |
    @echo off
    setlocal enabledelayedexpansion
    for /l %%x in (1,1,9) do (
      for /l %%y in (1,1,9) do (
        set /a a=%%x*%%y
        set a= !a!
        echo %%x * %%y = !a:~-2!
      )
    )
  :tags:
  - cmd
  :references:
    :url: 
    :title: 
- :id: '5028'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/5028
  :user_name: ooharak
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/637/
  :language: PostScript
  :time: 2007/12/28 05:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Ghostscriptでコンソール出力させる前提で素直に書いてみました。</p>\n\n\t"
  :code: |
    %!

    /format00 { 2 string cvs } bind def

    % 積 y x P -
    /P {
      format00 print
      ( * ) print
      format00 print
      ( = ) print
      dup 10 lt { ( ) print } if
      format00 print
      &lt;0A&gt; print
    } def


    1 1 9 {
      /x exch def
      1 1 9 {
        /y exch def
        x y mul y x P
      } for
    } for
  :tags:
  - stdout
  :references:
    :url: 
    :title: 
- :id: '5985'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/5985
  :user_name: queck
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/681/
  :language: Other
  :time: 2008/03/08 02:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Factor です。</p>\n\n\t"
  :code: |
    USING: kernel sequences math math.parser io ;

    : out ( x y -- )
      over number&gt;string write
      " * " write
      dup number&gt;string write
      " = " write
      * number&gt;string 2 CHAR: \s pad-left write nl ;

    9 [ 1+ 9 [ dupd 1+ out ] each drop ] each
  :tags:
  - Factor
  :references:
    :url: 
    :title: 
- :id: '6068'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6068
  :user_name: horiuchi
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/570/
  :language: Other
  :time: 2008/03/25 07:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    : PRINT ( i j -- , print formated i * j = i*j )
    2DUP SWAP . ." *" SPACE . ." =" SPACE * 2 .R CR ;

    : KUKU ( -- , print all kuku )
    10 1 DO
      10 1 DO J I
        PRINT
      LOOP
    LOOP ;

    KUKU
  :tags:
  - Forth
  :references:
    :url: 
    :title: 
- :id: '6132'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6132
  :user_name: eller
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/499/
  :language: COBOL
  :time: 2008/04/02 14:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>特に工夫はありません。COBOL向きのお題かもしれませんね。</p>\n\n\t"
  :code: |
    * 九九の表示 - YCobol 0.19にて動作確認
    IDENTIFICATION DIVISION.
    PROGRAM-ID. DOUKAKU-62.
    *
    ENVIRONMENT DIVISION.
    *
    DATA DIVISION.
    WORKING-STORAGE SECTION.
    01 I PIC 9 VALUE 0.
    01 J PIC 9.
    01 K PIC Z9.
    *
    PROCEDURE DIVISION.
    MAIN.
        PERFORM UNTIL I &gt;= 9
            MOVE 0 TO J
            ADD 1 TO I
            PERFORM UNTIL J &gt;= 9
                ADD 1 TO J
                COMPUTE K = I * J
                DISPLAY I " * " J " = " K
            END-PERFORM
        END-PERFORM
        STOP RUN.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6167'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6167
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: R
  :time: 2008/04/11 22:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">各行の要素を行番号で埋めるという関数col()を使ってみました。</pre>\n\t"
  :code: |
    a&lt;-1:9
    b&lt;-a %o% a
    writeLines(paste(col(b),"*",a,"=",format(b,0,2)))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6169'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6169
  :user_name: eller
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/499/
  :language: COBOL
  :time: 2008/04/12 00:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p><a class=\"reference\" href=\"/web/20100324092143/http://ja.doukaku.org/comment/6132\">http://ja.doukaku.org/comment/6132</a>/は一般のCOBOLではなくYCobol独自の書式だったので、より一般的な書式のものに書き換えました。\nOpenCOBOLでのコンパイルに成功、動作確認済み。</p>\n\n\t"
  :code: |2
           IDENTIFICATION DIVISION.
           PROGRAM-ID. DOUKAKU-62.
          *
           ENVIRONMENT DIVISION.
          *
           DATA DIVISION.
           WORKING-STORAGE SECTION.
           01  WK-KUKU.
               03 L      PIC 9.
               03 FILLER PIC X(3) VALUE " * ".
               03 R      PIC 9.
               03 FILLER PIC X(3) VALUE " = ".
               03 RESULT PIC Z9.
          *
           PROCEDURE DIVISION.
               MOVE ZERO TO L.
               PERFORM UNTIL L = 9
                   ADD 1 TO L
                   MOVE ZERO TO R
                   PERFORM UNTIL R = 9
                       ADD 1 TO R
                       MULTIPLY L BY R GIVING RESULT
                       DISPLAY WK-KUKU
                   END-PERFORM
               END-PERFORM.
               STOP RUN.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6186'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6186
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: 
  :time: 2008/04/20 07:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">すみません。間違えました。\r\n「各行の要素を行番号で埋めるという関数col()」ではなくて\r\n「各列の要素を列番号で埋めるという関数col()」でした。\r\n&gt;
    a&lt;-matrix(1,3,4)\r\n&gt; a\r\n     [,1] [,2] [,3] [,4]\r\n[1,]    1    1    1
    \   1\r\n[2,]    1    1    1    1\r\n[3,]    1    1    1    1\r\n&gt; col(a)\r\n
    \    [,1] [,2] [,3] [,4]\r\n[1,]    1    2    3    4\r\n[2,]    1    2    3    4\r\n[3,]
    \   1    2    3    4\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6189'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6189
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: Io
  :time: 2008/04/20 16:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">printfみたいなのは、ないようですが文字変換メソッドで桁数指定ができるようです。\r\n</pre>\n\t"
  :code: |
    for(i,1,9,for(j,1,9,writeln(i," * ",j," = ",(i*j)asString(2,0))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6464'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6464
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/06/11 02:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>つまらない答えですが・・</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    void kuku(int num1, int num2){
      printf("%d * %d = %2d\n", num1, num2, num1 * num2);
    }

    int main(){
      int num1, num2;
      for(num1 = 1; num1 &lt;= 9; num1++)
        for(num2 =1; num2 &lt;= 9; num2++)
          kuku(num1, num2);

      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6474'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6474
  :user_name: genzou
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/06/12 17:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>何のひねりもありません。</p>\n\n\t"
  :code: |
    (1..9).each{ x -&gt;
        (1..9).each{ y -&gt;
            println "${x} * ${y} = " + (x*y).toString().padLeft(2)
        }
    }
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '6532'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6532
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/06/17 23:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">面白くもなんともありませんが・・・。</pre>\n\t"
  :code: |
    foreach (var i in Enumerable.Range(1, 9).Select(x =&gt; { foreach (var j in Enumerable.Range(1, 9).Select(y =&gt; { Console.WriteLine(string.Format("{0} * {1} = {2}", x, y, (x * y).ToString().PadLeft(2,' '))); return y; }));return x; })) ;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6577'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/6577
  :user_name: turugina
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/760/
  :language: XSLT
  :time: 2008/06/24 12:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">素直に if を使わない。</pre>\n\t"
  :code: |
    &lt;xsl:stylesheet version="2.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      &gt;

      &lt;xsl:output method="text" /&gt;

      &lt;xsl:template match="/" &gt;
        &lt;xsl:for-each select="1 to 9"&gt;
          &lt;xsl:variable name="i" as="xs:integer" select="." /&gt;
          &lt;xsl:for-each select="1 to 9"&gt;
            &lt;xsl:value-of select="$i" /&gt;
            &lt;xsl:text&gt; * &lt;/xsl:text&gt;
            &lt;xsl:value-of select="." /&gt;
            &lt;xsl:text&gt; = &lt;/xsl:text&gt;
            &lt;xsl:variable name="elm" as="element()"&gt;
              &lt;xsl:element name="n"&gt;
                &lt;xsl:value-of select="$i*." /&gt;
              &lt;/xsl:element&gt;
            &lt;/xsl:variable&gt;
            &lt;xsl:apply-templates select="$elm" /&gt;
            &lt;xsl:text&gt;&amp;#xA;&lt;/xsl:text&gt;
          &lt;/xsl:for-each&gt;
        &lt;/xsl:for-each&gt;
      &lt;/xsl:template&gt;

      &lt;xsl:template match="n"&gt;
        &lt;xsl:value-of select="." /&gt;
      &lt;/xsl:template&gt;
      &lt;xsl:template match="n[.&amp;lt;10]"&gt;
        &lt;xsl:text&gt; &lt;/xsl:text&gt;
        &lt;xsl:value-of select="." /&gt;
      &lt;/xsl:template&gt;

    &lt;/xsl:stylesheet&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7198'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/7198
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: Prolog
  :time: 2008/08/18 08:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">writef と format の書式指定は全然違うんだなあ。</pre>\n\t"
  :code: |
    d(1). d(2). d(3). d(4). d(5). d(6). d(7). d(8). d(9).
    :-d(A),d(B),C is A*B,\+writef('%d * %d =%3r',[A,B,C]).
  :tags:
  - SWI-Prolog
  :references:
    :url: 
    :title: 
- :id: '8177'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/8177
  :user_name: taninsw
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/973/
  :language: Haskell
  :time: 2008/12/15 00:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>(import文抜かせばですが)一行にしてみました。</p>\n\n\t"
  :code: |
    import Ix
    main=putStr.unlines.map(\(a,b)-&gt;concat[show a," * ",show b," = ",reverse.take 2.reverse$' ':show(a*b)]).range$((1,1),(9,9))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8353'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/8353
  :user_name: 匿名
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2009/01/17 12:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  実行速度は最速？\r\n開発効率は最悪（爆）\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    void main() {
     printf("1 * 1 =  1\n");
     printf("1 * 2 =  2\n");
     printf("1 * 3 =  3\n");
     printf("--- 中略 ---\n");
     printf("9 * 8 = 72\n");
     printf("9 * 9 = 81\n");
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8357'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/8357
  :user_name: ihag
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/560/
  :language: C
  :time: 2009/01/17 23:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>「実行速度最速」を目指すなら，printf()を81回も呼び出さずに，1回で済ませるのがよいかと．</p>\n<p>あと，出力フォーマットも使う必要がないのでfputs()に置き換えました．</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    void main()
    {
        fputs("1 * 1 =  1\n"
              "1 * 2 =  2\n"
              "1 * 3 =  3\n"
              /* 中略 */
              "9 * 8 = 72\n"
              "9 * 9 = 81\n",
              stdout);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8358'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/8358
  :user_name: manzo
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/980/
  :language: Ruby
  :time: 2009/01/18 02:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>結構短く書けたので。</p>\n\n\t"
  :code: |
    (a=[*(1..9)]).map{|i|a.map{|j|puts"%d * %d = %2d"%[i,j,i*j]}}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9016'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/9016
  :user_name: pooq
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/606/
  :language: Lua
  :time: 2009/05/28 12:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    for a = 1, 9 do
      for b = 1, 9 do
        print(("%d * %d = %2d"):format(a, b, a * b))
      end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9065'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/9065
  :user_name: bleis-tift
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/732/
  :language: SQL
  :time: 2009/06/08 02:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>SQL Server 2008 で確認しました。\n整形の方法は、文字列化して左にスペースをくっつけ、右から2文字取るという方法を使いました。</p>\n\n\t"
  :code: |
    WITH
      Seq(n) AS (
        SELECT 1
        UNION ALL
        SELECT
            n + 1
        FROM
            Seq
        WHERE
            n + 1 &lt;= 9
      )
    SELECT
        CAST(S1.n AS char(1))
          + ' * '
          + CAST(S2.n AS char(1))
          + ' = '
          + RIGHT(' ' + CAST(S1.n * S2.n AS varchar(2)), 2)
    FROM
        Seq S1, Seq S2
    ORDER BY
        S1.n
      , S2.n
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9582'
  :parent_id: '62'
  :url: http://ja.doukaku.org/comment/9582
  :user_name: iwk
  :user_url: /web/20100324092143/http://ja.doukaku.org/user/49/
  :language: FORTRAN
  :time: 2009/09/19 16:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    Module Universe
         implicit none
         Private
             integer::left,right
         Public :: Mult
         contains
             Subroutine Mult
                 do left = 1,9
                     do right = 1,9
                         Print '(i1," * ",i1," = ",i2)',&amp;
                                 left, right, left*right
                     end do
                 end do
             End Subroutine
    End Module

    Program Main
         use Universe
         implicit none
         call Mult
    End Program
  :tags:
  - Fortran95
  :references:
    :url: 
    :title: 
