---
:id: '285'
:title: 居眠り床屋問題
:comments:
- :id: '9625'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9625
  :user_name: sumim
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2009/10/09 16:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <div class=\"section\">\n<p>並行処理のお題です。ある床屋の亭主は、客がいないときまって居眠りを始めます。床屋店内には三台の散髪兼順番待ち用の椅子があり、客は来店時に椅子に空きがあれば、いずれかに勝手に座って自分の番が来るのを待ち、散髪を終えてから店を出ます。空席が無ければそのまま何もせずに立ち去ります。居眠り中の亭主は、客の入店時に起こされると待ち客すべてをひとりずつ順に散髪しますが、誰もいなくなればまた居眠りを始めます。\r</p>\n<p>\r</p>\n<p>この床屋店に16人の客が訪れた日のシミュレーションを行なうコードと、その結果（下に例として示したログ形式。「[スレッドのIDなど]
    イベント描写」の一覧と終了後の総括）を出力して示してください。なお、散髪には一人当たり100～400ミリ秒の時間（この範囲でランダムに変化）を要し、客は通常
    0～200ミリ秒（同）の間隔で訪れます。ただし例外として9番目の客だけは前の客から1200ミリ秒程度の間隔（すなわち、最大三名の待ち客全員を散髪し終えるのに十分な時間）をあけて訪れるものとします。\r</p>\n<p>\r</p>\n<p>実装に際し、実行時のデッドロックの回避はもちろんですが、そのほかにも、競合状態（席の空きを確認して座ろうとしたら、もう別の客が座っていた…というような事態）などの不整合も生じないよう配慮し、必要であればそのための対策を講じてください。たとえば来客の間隔が仮に０ミリ秒で固定の場合（つまり、客が一斉に来店した場合）でも、コードが正常に動作するかどうか試してみるのもよいかもしれません。\r</p>\n<p>　\r</p>\n<p>　\r</p>\n<p>出力例：\r</p>\n<p>[7302088]
    床屋、眠る\r</p>\n<p>[7012360] 来店 1\r</p>\n<p>[7302088] 床屋、目覚める\r</p>\n<p>[7302088]
    散髪開始 1\r</p>\n<p>[7012360] 来店 2\r</p>\n<p>[7012360] 来店 3\r</p>\n<p>[7302088] 散髪完了
    1\r</p>\n<p>[7302088] 散髪開始 2\r</p>\n<p>[7012360] 来店 4\r</p>\n<p>[7012360] 来店 5\r</p>\n<p>[7012360]
    満席で立ち去る 5\r</p>\n<p>[7302088] 散髪完了 2\r</p>\n<p>[7302088] 散髪開始 3\r</p>\n<p>[7012360]
    来店 6\r</p>\n<p>[7012360] 来店 7\r</p>\n<p>[7012360] 満席で立ち去る 7\r</p>\n<p>[7012360]
    来店 8\r</p>\n<p>[7012360] 満席で立ち去る 8\r</p>\n<p>[7302088] 散髪完了 3\r</p>\n<p>[7302088]
    散髪開始 4\r</p>\n<p>[7302088] 散髪完了 4\r</p>\n<p>[7302088] 散髪開始 6\r</p>\n<p>[7302088]
    散髪完了 6\r</p>\n<p>[7302088] 床屋、眠る\r</p>\n<p>[7012360] 来店 9\r</p>\n<p>[7302088]
    床屋、目覚める\r</p>\n<p>[7302088] 散髪開始 9\r</p>\n<p>[7012360] 来店 10\r</p>\n<p>[7012360]
    来店 11\r</p>\n<p>[7012360] 来店 12\r</p>\n<p>[7012360] 満席で立ち去る 12\r</p>\n<p>[7302088]
    散髪完了 9\r</p>\n<p>[7302088] 散髪開始 10\r</p>\n<p>[7012360] 来店 13\r</p>\n<p>[7012360]
    来店 14\r</p>\n<p>[7012360] 満席で立ち去る 14\r</p>\n<p>[7012360] 来店 15\r</p>\n<p>[7012360]
    満席で立ち去る 15\r</p>\n<p>[7302088] 散髪完了 10\r</p>\n<p>[7302088] 散髪開始 11\r</p>\n<p>[7012360]
    来店 16\r</p>\n<p>[7302088] 散髪完了 11\r</p>\n<p>[7302088] 散髪開始 13\r</p>\n<p>[7302088]
    散髪完了 13\r</p>\n<p>[7302088] 散髪開始 16\r</p>\n<p>[7302088] 散髪完了 16\r</p>\n<p>[7302088]
    床屋、眠る\r</p>\n<p>※ 16人のうち 10人を散髪\r</p>\n<p>　</p>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100712030912/http://en.wikipedia.org/wiki/Sleeping_barber_problem
    :title: Wikipedia - Sleeping barber problem
- :id: '9628'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9628
  :user_name: あにす
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2009/10/12 00:30 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  【1回目】\r<br>[11] 床屋、眠る\r<br>[12] 来店 1\r<br>[11] 床屋、目覚める\r<br>[11] 散髪開始 1\r<br>[12] 来店 2\r<br>[12] 来店 3\r<br>[11] 散髪完了 1\r<br>[11] 散髪開始 2\r<br>[12] 来店 4\r<br>[12] 来店 5\r<br>[12] 満席で立ち去る 5\r<br>[11] 散髪完了 2\r<br>[11] 散髪開始 3\r<br>[12] 来店 6\r<br>[12] 来店 7\r<br>[12] 満席で立ち去る 7\r<br>[11] 散髪完了 3\r<br>[11] 散髪開始 4\r<br>[12] 来店 8\r<br>[11] 散髪完了 4\r<br>[11] 散髪開始 6\r<br>[11] 散髪完了 6\r<br>[11] 散髪開始 8\r<br>[11] 散髪完了 8\r<br>[11] 床屋、眠る\r<br>[12] 来店 9\r<br>[11] 床屋、目覚める\r<br>[11] 散髪開始 9\r<br>[12] 来店 10\r<br>[12] 来店 11\r<br>[12] 来店 12\r<br>[12] 満席で立ち去る 12\r<br>[11] 散髪完了 9\r<br>[11] 散髪開始 10\r<br>[12] 来店 13\r<br>[12] 来店 14\r<br>[12] 満席で立ち去る 14\r<br>[11] 散髪完了 10\r<br>[11] 散髪開始 11\r<br>[12] 来店 15\r<br>[11] 散髪完了 11\r<br>[11] 散髪開始 13\r<br>[12] 来店 16\r<br>[11] 散髪完了 13\r<br>[11] 散髪開始 15\r<br>[11] 散髪完了 15\r<br>[11] 散髪開始 16\r<br>[11] 散髪完了 16\r<br>[11] 床屋、眠る\r<br>※ 16人のうち 12人を散髪\r<br><br>【2回目】\r<br>[12] 床屋、眠る\r<br>[13] 来店 1\r<br>[12] 床屋、目覚める\r<br>[12] 散髪開始 1\r<br>[13] 来店 2\r<br>[13] 来店 3\r<br>[13] 来店 4\r<br>[13] 満席で立ち去る 4\r<br>[12] 散髪完了 1\r<br>[12] 散髪開始 2\r<br>[13] 来店 5\r<br>[12] 散髪完了 2\r<br>[12] 散髪開始 3\r<br>[13] 来店 6\r<br>[13] 来店 7\r<br>[13] 満席で立ち去る 7\r<br>[13] 来店 8\r<br>[13] 満席で立ち去る 8\r<br>[12] 散髪完了 3\r<br>[12] 散髪開始 5\r<br>[12] 散髪完了 5\r<br>[12] 散髪開始 6\r<br>[12] 散髪完了 6\r<br>[12] 床屋、眠る\r<br>[13] 来店 9\r<br>[12] 床屋、目覚める\r<br>[12] 散髪開始 9\r<br>[13] 来店 10\r<br>[13] 来店 11\r<br>[13] 来店 12\r<br>[13] 満席で立ち去る 12\r<br>[12] 散髪完了 9\r<br>[12] 散髪開始 10\r<br>[13] 来店 13\r<br>[13] 来店 14\r<br>[13] 満席で立ち去る 14\r<br>[12] 散髪完了 10\r<br>[12] 散髪開始 11\r<br>[13] 来店 15\r<br>[13] 来店 16\r<br>[13] 満席で立ち去る 16\r<br>[12] 散髪完了 11\r<br>[12] 散髪開始 13\r<br>[12] 散髪完了 13\r<br>[12] 散髪開始 15\r<br>[12] 散髪完了 15\r<br>[12] 床屋、眠る\r<br>※ 16人のうち 10人を散髪\r<br><br>【3回目】\r<br>[12] 床屋、眠る\r<br>[13] 来店 1\r<br>[12] 床屋、目覚める\r<br>[12] 散髪開始 1\r<br>[13] 来店 2\r<br>[12] 散髪完了 1\r<br>[12] 散髪開始 2\r<br>[13] 来店 3\r<br>[13] 来店 4\r<br>[12] 散髪完了 2\r<br>[12] 散髪開始 4\r<br>[13] 来店 5\r<br>[13] 来店 6\r<br>[13] 満席で立ち去る 6\r<br>[13] 来店 7\r<br>[13] 満席で立ち去る 7\r<br>[13] 来店 8\r<br>[13] 満席で立ち去る 8\r<br>[12] 散髪完了 4\r<br>[12] 散髪開始 3\r<br>[12] 散髪完了 3\r<br>[12] 散髪開始 5\r<br>[12] 散髪完了 5\r<br>[12] 床屋、眠る\r<br>[13] 来店 9\r<br>[12] 床屋、目覚める\r<br>[12] 散髪開始 9\r<br>[13] 来店 10\r<br>[13] 来店 11\r<br>[13] 来店 12\r<br>[13] 満席で立ち去る 12\r<br>[13] 来店 13\r<br>[13] 満席で立ち去る 13\r<br>[12] 散髪完了 9\r<br>[12] 散髪開始 10\r<br>[13] 来店 14\r<br>[13] 来店 15\r<br>[13] 満席で立ち去る 15\r<br>[13] 来店 16\r<br>[13] 満席で立ち去る 16\r<br>[12] 散髪完了 10\r<br>[12] 散髪開始 11\r<br>[12] 散髪完了 11\r<br>[12] 散髪開始 14\r<br>[12] 散髪完了 14\r<br>[12] 床屋、眠る\r<br>※ 16人のうち 9人を散髪\n\t"
  :code: |
    using System;
    using System.Linq;
    using System.Threading;

    class Program {
        static Random rnd = new Random();
        static int[] chair = new int[3];
        static int count;
        static bool ownerSleep;
        static bool end;

        static void Main(string[] args) {
            Thread owner = new Thread(Owner);
            Thread visitors = new Thread(Visitors);
            owner.Start(owner.ManagedThreadId);
            visitors.Start(visitors.ManagedThreadId);
        }

        static void Owner(object threadID) {
            do {
                lock(chair) {
                    if(chair.Sum() == 0) {
                        if(!ownerSleep) {
                            ownerSleep = true;
                            Console.WriteLine("[{0}] 床屋、眠る", threadID);
                        }
                    } else {
                        if(ownerSleep) {
                            ownerSleep = false;
                            Console.WriteLine("[{0}] 床屋、目覚める", threadID);
                        }
                    }
                }

                if(!ownerSleep) {
                    for(int i = 0; i &lt; chair.Length; i++) {
                        if(chair[i] != 0) {
                            Console.WriteLine("[{0}] 散髪開始 {1}", threadID, chair[i]);
                            Thread.Sleep(rnd.Next(100, 401));
                            Console.WriteLine("[{0}] 散髪完了 {1}", threadID, chair[i]);
                            count++;
                            chair[i] = 0;
                        }
                    }
                }
            } while(chair.Sum() != 0 || !end);

            Console.WriteLine("[{0}] 床屋、眠る", threadID);
            Console.WriteLine("※ 16人のうち {0}人を散髪", count);
            Console.ReadLine();
        }

        static void Visitors(object threadID) {
            for(int i = 1; i &lt;= 16; i++) {
                Console.WriteLine("[{0}] 来店 {1}", threadID, i);
                bool packed = true;

                lock(chair) {
                    for(int j = 0; j &lt; chair.Length; j++) {
                        if(chair[j] == 0) {
                            chair[j] = i;
                            packed = false;
                            break;
                        }
                    }
                }

                if(packed) {
                    Console.WriteLine("[{0}] 満席で立ち去る {1}", threadID, i);
                }

                if(i == 8) {
                    Thread.Sleep(1200);
                } else {
                    Thread.Sleep(rnd.Next(0, 201));
                }
            }

            end = true;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9629'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9629
  :user_name: sumim
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/10/12 07:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。客を一人ずつ個別のスレッドにしてみました。</p>\n\n\t"
  :code: |
    | mutex queue tally total barber out log |
    mutex := Semaphore forMutualExclusion.
    queue := ValueHolder new contents: OrderedCollection new.
    tally := 0.
    out := SharedQueue new.
    log := [:msg | out nextPut: '[', Processor activeProcess name, '] ', msg].

    barber := [
      [ queue contents
          ifEmpty: [
            log value: '床屋、眠る'.
            Processor activeProcess suspend.
            log value: '床屋、目覚める']
          ifNotEmpty: [
            log value: '散髪開始 ', queue contents first printString.
                (100 to: 400) atRandom milliSeconds asDelay wait.
            log value: '散髪完了 ', queue contents first printString.
            mutex critical: [queue contents removeFirst].
            tally := tally + 1]
      ] repeat
    ] fork.

    1 to: (total := 16) do: [:id |
      200 atRandom milliSeconds asDelay wait.
      [   log value: '来店 ', id printString.
        mutex critical: [
          queue contents size &lt; 3
            ifTrue: [
              queue contents add: id.
              barber isSuspended ifTrue: [barber resume]]
            ifFalse: [log value: '満席で立ち去る ', id printString]
        ]
      ] fixTemps fork.
      id = (total // 2) ifTrue: [1.2 seconds asDelay wait]].

    2 seconds asDelay wait.
    barber terminate.
    out nextPut: ('※ {1}人のうち {2}人を散髪' format: {total. tally}).
    World findATranscript: nil.
    out size timesRepeat: [Transcript cr; show: out next]

    " =&gt;
    [ 3680] 床屋、眠る
    [ 2177] 来店 1
    [ 3680] 床屋、目覚める
    [ 3680] 散髪開始 1
    [ 1094] 来店 2
    [ 2635] 来店 3
    [ 3680] 散髪完了 1
    [ 3680] 散髪開始 2
    [  233] 来店 4
    [ 1666] 来店 5
    [ 1666] 満席で立ち去る 5
    [ 2269] 来店 6
    [ 2269] 満席で立ち去る 6
    [ 3680] 散髪完了 2
    [ 3680] 散髪開始 3
    [ 3450] 来店 7
    [ 3680] 散髪完了 3
    [ 3680] 散髪開始 4
    [ 1056] 来店 8
    [ 3680] 散髪完了 4
    [ 3680] 散髪開始 7
    [ 3680] 散髪完了 7
    [ 3680] 散髪開始 8
    [ 3680] 散髪完了 8
    [ 3680] 床屋、眠る
    [ 1513] 来店 9
    [ 3680] 床屋、目覚める
    [ 3680] 散髪開始 9
    [ 3982] 来店 10
    [ 2931] 来店 11
    [  164] 来店 12
    [  164] 満席で立ち去る 12
    [ 2887] 来店 13
    [ 2887] 満席で立ち去る 13
    [ 3032] 来店 14
    [ 3032] 満席で立ち去る 14
    [ 3680] 散髪完了 9
    [ 3680] 散髪開始 10
    [ 2127] 来店 15
    [  144] 来店 16
    [  144] 満席で立ち去る 16
    [ 3680] 散髪完了 10
    [ 3680] 散髪開始 11
    [ 3680] 散髪完了 11
    [ 3680] 散髪開始 15
    [ 3680] 散髪完了 15
    [ 3680] 床屋、眠る
    ※ 16人のうち 10人を散髪 "
  :tags:
  - Squeak_Smalltalk
  - nBaThBQcEap
  - vBvFEZZLAD
  :references:
    :url: 
    :title: 
- :id: '9630'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9630
  :user_name: あにす
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/504/
  :language: C
  :time: 2009/10/12 11:29 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>それぞれの客にスレッドを割り当て、客が居なくなると本当にスレッドが止まるようにしてみました。</p>\n<p>[11] 床屋、眠る\n[12]
    来店 1\n[11] 床屋、目覚める\n[11] 散髪開始 1\n[13] 来店 2\n[11] 散髪完了 1\n[11] 散髪開始 2\n[14] 来店
    3\n[15] 来店 4\n[16] 来店 5\n[16] 満席で立ち去る 5\n[11] 散髪完了 2\n[11] 散髪開始 4\n[17] 来店 6\n[18]
    来店 7\n[18] 満席で立ち去る 7\n[19] 来店 8\n[19] 満席で立ち去る 8\n[11] 散髪完了 4\n[11] 床屋、目覚める\n[11]
    散髪開始 3\n[11] 散髪完了 3\n[11] 散髪開始 6\n[11] 散髪完了 6\n[11] 床屋、眠る\n[20] 来店 9\n[11] 床屋、目覚める\n[11]
    散髪開始 9\n[21] 来店 10\n[11] 散髪完了 9\n[11] 散髪開始 10\n[22] 来店 11\n[23] 来店 12\n[11] 散髪完了
    10\n[11] 散髪開始 12\n[24] 来店 13\n[25] 来店 14\n[25] 満席で立ち去る 14\n[26] 来店 15\n[26] 満席で立ち去る
    15\n[27] 来店 16\n[27] 満席で立ち去る 16\n[11] 散髪完了 12\n[11] 床屋、目覚める\n[11] 散髪開始 11\n[11]
    散髪完了 11\n[11] 散髪開始 13\n[11] 散髪完了 13\n[11] 床屋、眠る\n※ 16人のうち 10人を散髪</p>\n\n\t"
  :code: |
    using System;
    using System.Linq;
    using System.Threading;

    class Program {
        static Random rnd = new Random();
        static int[] chair = new int[3];
        static int count;
        static bool end;
        static Thread owner;

        static void Main(string[] args) {
            owner = new Thread(Owner);
            Thread visitors = new Thread(Visitors);
            owner.Start(owner.ManagedThreadId);
            visitors.Start(new object[] { visitors.ManagedThreadId, 1 });
        }

        static void Owner(object threadID) {
            do {
                bool sleep;
                lock(chair) {
                    sleep = chair.Sum() == 0;
                    if(sleep &amp;&amp; owner.ThreadState != ThreadState.Suspended) {
                        Console.WriteLine("[{0}] 床屋、眠る", threadID);
                    }
                }

                //ここで満席になると店主が永遠の眠りについてしまうでしょう…

                if(sleep) {
                    owner.Suspend();
                }

                Console.WriteLine("[{0}] 床屋、目覚める", threadID);

                if(!ownerSleep) {
                    for(int i = 0; i &lt; chair.Length; i++) {
                        if(chair[i] != 0) {
                            Console.WriteLine("[{0}] 散髪開始 {1}", threadID, chair[i]);
                            Thread.Sleep(rnd.Next(100, 401));
                            Console.WriteLine("[{0}] 散髪完了 {1}", threadID, chair[i]);
                            count++;
                            chair[i] = 0;
                        }
                    }
                }
            } while(chair.Sum() != 0 || !end);

            Console.WriteLine("[{0}] 床屋、眠る", threadID);
            Console.WriteLine("※ 16人のうち {0}人を散髪", count);
            Console.ReadLine();
        }

        static void Visitors(object threadID_i) {
            int threadID, i;
            threadID = (int)(((object[])threadID_i)[0]);
            i = (int)(((object[])threadID_i)[1]);

            if(i == 9) {
                Thread.Sleep(1200);
            } else {
                Thread.Sleep(rnd.Next(0, 201));
            }

            Console.WriteLine("[{0}] 来店 {1}", threadID, i);
            bool packed = true;

            for(int j = 0; j &lt; chair.Length; j++) {
                lock(chair) {
                    if(chair[j] == 0) {
                        chair[j] = i;
                        if(owner.ThreadState == ThreadState.Suspended) {
                            owner.Resume();
                        }
                        packed = false;
                        break;
                    }
                }
            }

            if(packed) {
                Console.WriteLine("[{0}] 満席で立ち去る {1}", threadID, i);
            }

            if(i &lt; 16) {
                Thread visivor = new Thread(Visitors);
                visivor.Start(new object[] { visivor.ManagedThreadId, ++i });
            } else {
                end = true;
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9631'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9631
  :user_name: uehaj
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/10/12 11:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  GParallelizer改め、GPars(Groovy Parallel Systems)のActorモデルを使って書いてみました。\r<br>GPARSのドキュメントを良く読んでないのですが、排他制御あたりはもう少しましに書ける気がするな。\r<br><br>実行例はこんな感じ\r<br><br>$ groovy barber.groovy\r<br>[1]来店 1\r<br>床屋、目覚める\r<br>[13]散髪開始 1\r<br>[1]来店 2\r<br>[13]散髪完了 1\r<br>[13]散髪開始 2\r<br>[1]来店 3\r<br>[1]来店 4\r<br>[1]来店 5\r<br>[1]満席で立ち去る 5\r<br>[13]散髪完了 2\r<br>[12]散髪開始 3\r<br>[1]来店 6\r<br>[12]散髪完了 3\r<br>[13]散髪開始 4\r<br>[1]来店 7\r<br>[13]散髪完了 4\r<br>[11]散髪開始 6\r<br>[1]来店 8\r<br>[11]散髪完了 6\r<br>[13]散髪開始 7\r<br>[13]散髪完了 7\r<br>[13]散髪開始 8\r<br>[13]散髪完了 8\r<br>床屋、眠る\r<br>[1]来店 9\r<br>床屋、目覚める\r<br>[12]散髪開始 9\r<br>[1]来店 10\r<br>[1]来店 11\r<br>[1]来店 12\r<br>[1]満席で立ち去る 12\r<br>[12]散髪完了 9\r<br>[11]散髪開始 10\r<br>[1]来店 13\r<br>[1]来店 14\r<br>[1]満席で立ち去る 14\r<br>[11]散髪完了 10\r<br>[11]散髪開始 11\r<br>[1]来店 15\r<br>[11]散髪完了 11\r<br>[11]散髪開始 13\r<br>[1]来店 16\r<br>[11]散髪完了 13\r<br>[13]散髪開始 15\r<br>[13]散髪完了 15\r<br>[13]散髪開始 16\r<br>[13]散髪完了 16\r<br>床屋、眠る\n\t"
  :code: |
    import org.gparallelizer.actors.pooledActors.AbstractPooledActor
    import static Rnd.randomValue

    class Rnd {
      static random = new Random()
      static randomValue(IntRange r) {
        random.nextInt(r.to - r.from) + r.from
      }
    }

    class BarberShop extends AbstractPooledActor {

      Barber barber;
      def seat = []

      void visit(Customer c) {
        c.arrive()
        if (seat.size() &lt; 3) {
          synchronized (seat) {
            while (seat.size() &gt;= 3) {
            }
            if (seat.size() == 0) {
              println "床屋、目覚める"
            }
            seat += c
            c.bbs = this
            barber.send c
          }
        }
        else {
          c.goneSeatFull()
        }
      }

      void bye(Customer c) {
        synchronized (seat) {
          seat.remove(c)
          if (seat.size() == 0) {
            println "床屋、眠る"
          }
        }
      }

    }

    class Barber extends AbstractPooledActor {
      void act() {
        loop {
          react { Customer c -&gt;
            c.startCut()
            Thread.sleep(randomValue(100..400))
            c.finishCut()
          }
        }
      }
    }

    class Customer {
      def tid() {
        Thread.currentThread().id
      }

      String name
      BarberShop bbs

      void arrive() { println "[${tid()}]来店 $name" }
      void startCut() { println "[${tid()}]散髪開始 $name" }
      void finishCut() {
        println "[${tid()}]散髪完了 $name"
        bbs.bye(this)
      }
      void goneSeatFull() { println "[${tid()}]満席で立ち去る $name" }
    }

    bb = new Barber()
    bb.start()

    b = new BarberShop(barber:bb)
    (1..16).each {
      if (it == 9) {
        Thread.sleep(1200)
      }
      else {
        Thread.sleep(randomValue(0..200))
      }
      def c = new Customer(name:it)
      b.visit(c)
    }

    bb.join()
  :tags:
  - GPars
  :references:
    :url: /web/20100712030912/http://gpars.codehaus.org/
    :title: Groovy Parallel Systems
- :id: '9632'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9632
  :user_name: sekia
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/588/
  :language: Perl
  :time: 2009/10/13 15:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Coroを使って疑似並列処理しました。\n   ついでに実行時間[sec]も表示しています。\n</p>\n<pre><code>[Coro=HASH(0x81d3a0)]
    [0.000] 床屋、眠る\n[Coro=HASH(0x810ad0)] [0.199] 来店 1\n[Coro=HASH(0x81d3a0)] [0.199]
    床屋、目覚める\n[Coro=HASH(0x81d3a0)] [0.199] 散髪開始 1\n[Coro=HASH(0x810ad0)] [0.310] 来店
    2\n[Coro=HASH(0x810ad0)] [0.466] 来店 3\n[Coro=HASH(0x81d3a0)] [0.504] 散髪完了 1\n[Coro=HASH(0x81d3a0)]
    [0.505] 散髪開始 2\n[Coro=HASH(0x810ad0)] [0.574] 来店 4\n[Coro=HASH(0x810ad0)] [0.765]
    来店 5\n[Coro=HASH(0x812ce0)] [0.765] 満席で立ち去る 5\n[Coro=HASH(0x81d3a0)] [0.812] 散髪完了
    2\n[Coro=HASH(0x81d3a0)] [0.812] 散髪開始 3\n[Coro=HASH(0x810ad0)] [0.930] 来店 6\n[Coro=HASH(0x810ad0)]
    [0.969] 来店 7\n[Coro=HASH(0x812bd0)] [0.969] 満席で立ち去る 7\n[Coro=HASH(0x810ad0)] [1.101]
    来店 8\n[Coro=HASH(0x812c90)] [1.102] 満席で立ち去る 8\n[Coro=HASH(0x81d3a0)] [1.186] 散髪完了
    3\n[Coro=HASH(0x81d3a0)] [1.186] 散髪開始 4\n[Coro=HASH(0x81d3a0)] [1.374] 散髪完了 4\n[Coro=HASH(0x81d3a0)]
    [1.374] 散髪開始 6\n[Coro=HASH(0x81d3a0)] [1.618] 散髪完了 6\n[Coro=HASH(0x81d3a0)] [1.618]
    床屋、眠る\n[Coro=HASH(0x810ad0)] [2.302] 来店 9\n[Coro=HASH(0x81d3a0)] [2.302] 床屋、目覚める\n[Coro=HASH(0x81d3a0)]
    [2.302] 散髪開始 9\n[Coro=HASH(0x810ad0)] [2.312] 来店 10\n[Coro=HASH(0x810ad0)] [2.475]
    来店 11\n[Coro=HASH(0x810ad0)] [2.494] 来店 12\n[Coro=HASH(0x812df0)] [2.494] 満席で立ち去る
    12\n[Coro=HASH(0x810ad0)] [2.545] 来店 13\n[Coro=HASH(0x812be0)] [2.545] 満席で立ち去る
    13\n[Coro=HASH(0x81d3a0)] [2.612] 散髪完了 9\n[Coro=HASH(0x81d3a0)] [2.612] 散髪開始 10\n[Coro=HASH(0x810ad0)]
    [2.687] 来店 14\n[Coro=HASH(0x810ad0)] [2.862] 来店 15\n[Coro=HASH(0x812e00)] [2.863]
    満席で立ち去る 15\n[Coro=HASH(0x81d3a0)] [2.878] 散髪完了 10\n[Coro=HASH(0x81d3a0)] [2.878]
    散髪開始 11\n[Coro=HASH(0x81d3a0)] [3.034] 散髪完了 11\n[Coro=HASH(0x81d3a0)] [3.034]
    散髪開始 14\n[Coro=HASH(0x810ad0)] [3.046] 来店 16\n[Coro=HASH(0x81d3a0)] [3.248] 散髪完了
    14\n[Coro=HASH(0x81d3a0)] [3.248] 散髪開始 16\n[Coro=HASH(0x81d3a0)] [3.547] 散髪完了
    16\n[Coro=HASH(0x81d3a0)] [3.547] 床屋、眠る\n※16人のうち10人を散髪\n</code></pre>\n\n\n\t"
  :code: |
    #!/usr/bin/env perl

    use strict;
    use warnings;
    use feature qw/say/;
    use utf8;

    use Coro;
    use Coro::Semaphore;
    use Time::HiRes qw/time/;

    sub rand_int($$) {
      my ($min, $max) = @_;
      $min + int rand ($max - $min + 1);
    }

    {
      my $start_time;
      sub init_time() { $start_time = time }
      sub elapse() { sprintf '%5.3f', time - $start_time }
    }

    binmode STDOUT, ':utf8';

    my $free_seats = Coro::Semaphore-&gt;new(3);
    my $barber_awaken = 1;
    my $all_customers_done = 0;
    my $num_cut = 0;
    my @customer_queue;

    init_time;

    my $barber = async {
      while (1) {
        if (@customer_queue) {
          unless ($barber_awaken) {
            $barber_awaken = 1;
            say "[$Coro::current] [@{[elapse]}] 床屋、目覚める";
          }
          my ($customer, $cutting_done) = @{ shift @customer_queue };
          my $wait_sec0 = time;
          my $wait_sec = rand_int(100, 400) / 1000;
          say "[$Coro::current] [@{[elapse]}] 散髪開始 $customer";
          cede until time - $wait_sec0 &gt; $wait_sec;

          $cutting_done-&gt;();
          $num_cut++;
          say "[$Coro::current] [@{[elapse]}] 散髪完了 $customer";
        } elsif ($barber_awaken) {
          $barber_awaken = 0;
          say "[$Coro::current] [@{[elapse]}] 床屋、眠る";
        } elsif($all_customers_done) {
          last;
        }
        cede;
      }
    };

    my @customers;
    for my $i (1 .. 16) {
      my $wait_sec0 = time;
      my $wait_sec = ($i == 9 ? 1200 : rand_int(0, 200)) / 1000;
      cede until time - $wait_sec0 &gt; $wait_sec;

      say "[$Coro::current] [@{[elapse]}] 来店 $i";
      push @customers, async {
        unless ($free_seats-&gt;try) {
          say "[$Coro::current] [@{[elapse]}] 満席で立ち去る $i";
          terminate;
        }

        my $cutting_done = 0;
        push @customer_queue, [$i,
                               sub {
                                 $cutting_done = 1;
                                 $free_seats-&gt;up;
                               }];
        cede until $cutting_done;
      };
      cede;
    }

    $_-&gt;join for @customers;
    $all_customers_done = 1;
    $barber-&gt;join;
    say "※16人のうち${num_cut}人を散髪";
  :tags: []
  :references:
    :url: /web/20100712030912/http://search.cpan.org/~mlehmann/Coro-5.2/Coro.pm
    :title: Coro - search.cpan.org
- :id: '9633'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9633
  :user_name: horiuchi
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2009/10/16 09:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>せっかくの同期の問題だったので、java.util.concurrent パッケージのセマフォとBlockingQueueを使って実装してみました。\r</p>\n<p>しかし、これBlockingQueueだけでも実装できるかな？</p>\n</div>\n\t"
  :code: |
    import java.util.concurrent.BlockingQueue;
    import java.util.concurrent.LinkedBlockingQueue;
    import java.util.concurrent.Semaphore;

    public class Sample285 {
        private static final int SEAT_COUNT = 3;

        private final Semaphore semaphore_ = new Semaphore(SEAT_COUNT, true);
        private final BlockingQueue&lt;Runnable&gt; seat_ = new LinkedBlockingQueue&lt;Runnable&gt;();

        private int counter_ = 0;

        public Sample285() {
            new Thread(new Runnable() {
                public void run() {
                    try {
                        while (true) {
                            synchronized (seat_) {
                                if (seat_.isEmpty()) {
                                    printMessage("床屋 寝る");
                                    while (seat_.isEmpty()) {
                                        seat_.wait();
                                    }
                                    printMessage("床屋、目覚める");
                                }
                            }
                            Runnable runnable = seat_.poll();
                            if (runnable != null) {
                                runnable.run();
                                counter_++;
                            }
                        }
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }, "Sleeping barber").start();
        }

        public int getCounter() {
            return counter_;
        }

        public void join() throws InterruptedException {
            semaphore_.acquire(SEAT_COUNT);
            Thread.yield();
            semaphore_.release(SEAT_COUNT);
        }

        public void addGuest(final int id) {
            printMessage("来店 " + id);
            if (!semaphore_.tryAcquire()) {
                printMessage("満席で立ち去る " + id);
                return;
            }
            seat_.offer(new Runnable() {
                public void run() {
                    printMessage("散髪開始 " + id);
                    try {
                        Thread.sleep((long) (Math.random() * 300 + 100));
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    printMessage("散髪完了 " + id);
                    semaphore_.release();
                }
            });
            synchronized (seat_) {
                seat_.notifyAll();
            }
        }

        private static void printMessage(String message) {
            System.out.format("%d %s%n", Thread.currentThread().getId(), message);
        }


        public static void main(String[] args) throws Exception {
            Sample285 barber = new Sample285();
            for (int index = 1; index &lt;= 16; index++) {
                Thread.sleep((index == 9)? 1200: (long) (Math.random() * 200));
                barber.addGuest(index);
            }
            barber.join();
            System.out.format("%d人のうち %d人を散髪%n", 16, barber.getCounter());
        }
    }
  :tags:
  - Java1.5
  :references:
    :url: 
    :title: 
- :id: '9634'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9634
  :user_name: fgshun
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/1109/
  :language: Python
  :time: 2009/10/17 00:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Python 2.6 , 3.0 から加わった multiprocessing をつかってみました。 Python 2.6 で動作確認しています。</p>\n<p>はじめは席を
    multiprocessing.Queue(maxsize=3) としていたのですが、これには中身を取り出さずにのぞき見る術がないのに気づきました。これでは「散髪用兼順番待ち用椅子」ではなくただの「順番待ち用椅子」であり、店に散髪中
    1 人、待機 3 人の計 4 人の状態もありえる作りでした。</p>\n<p>このため、席は Seats クラスとして作り直しています。客がいるかどうかは
    check メソッドで見ます。客の着席退席は sit, stand メソッドです。</p>\n<p>1回目</p>\n<pre class=\"literal-block\">\n[barber
    1332] 床屋、眠る\n[shop 1052] 来店 0\n[shop 1052] 床屋を起こす 0\n[barber 1332] 床屋、目覚める\n[barber
    1332] 散発開始 0\n[shop 1052] 来店 1\n[barber 1332] 散発終了 0\n[barber 1332] 散発開始 1\n[shop
    1052] 来店 2\n[shop 1052] 来店 3\n[shop 1052] 来店 4\n[shop 1052] 満席で立ち去る 4\n[barber
    1332] 散発終了 1\n[barber 1332] 散発開始 2\n[shop 1052] 来店 5\n[shop 1052] 来店 6\n[shop
    1052] 満席で立ち去る 6\n[barber 1332] 散発終了 2\n[barber 1332] 散発開始 5\n[shop 1052] 来店 7\n[barber
    1332] 散発終了 5\n[barber 1332] 散発開始 7\n[barber 1332] 散発終了 7\n[barber 1332] 散発開始 3\n[barber
    1332] 散発終了 3\n[barber 1332] 床屋、眠る\n[shop 1052] 来店 8\n[shop 1052] 床屋を起こす 8\n[barber
    1332] 床屋、目覚める\n[barber 1332] 散発開始 8\n[shop 1052] 来店 9\n[shop 1052] 来店 10\n[shop
    1052] 来店 11\n[shop 1052] 満席で立ち去る 11\n[barber 1332] 散発終了 8\n[barber 1332] 散発開始
    9\n[shop 1052] 来店 12\n[shop 1052] 来店 13\n[shop 1052] 満席で立ち去る 13\n[shop 1052] 来店
    14\n[shop 1052] 満席で立ち去る 14\n[shop 1052] 来店 15\n[shop 1052] 満席で立ち去る 15\n[barber
    1332] 散発終了 9\n[barber 1332] 散発開始 12\n[barber 1332] 散発終了 12\n[barber 1332] 散発開始
    10\n[barber 1332] 散発終了 10\n[barber 1332] 床屋、眠る\n</pre>\n<p>2回目</p>\n<pre class=\"literal-block\">\n[barber
    2356] 床屋、眠る\n[shop 2180] 来店 0\n[shop 2180] 床屋を起こす 0\n[barber 2356] 床屋、目覚める\n[barber
    2356] 散発開始 0\n[shop 2180] 来店 1\n[barber 2356] 散発終了 0\n[barber 2356] 散発開始 1\n[shop
    2180] 来店 2\n[shop 2180] 来店 3\n[shop 2180] 来店 4\n[shop 2180] 満席で立ち去る 4\n[shop 2180]
    来店 5\n[shop 2180] 満席で立ち去る 5\n[shop 2180] 来店 6\n[shop 2180] 満席で立ち去る 6\n[shop 2180]
    来店 7\n[shop 2180] 満席で立ち去る 7\n[barber 2356] 散発終了 1\n[barber 2356] 散発開始 2\n[barber
    2356] 散発終了 2\n[barber 2356] 散発開始 3\n[barber 2356] 散発終了 3\n[barber 2356] 床屋、眠る\n[shop
    2180] 来店 8\n[shop 2180] 床屋を起こす 8\n[barber 2356] 床屋、目覚める\n[barber 2356] 散発開始 8\n[barber
    2356] 散発終了 8\n[barber 2356] 床屋、眠る\n[shop 2180] 来店 9\n[shop 2180] 床屋を起こす 9\n[barber
    2356] 床屋、目覚める\n[barber 2356] 散発開始 9\n[shop 2180] 来店 10\n[shop 2180] 来店 11\n[shop
    2180] 来店 12\n[shop 2180] 満席で立ち去る 12\n[shop 2180] 来店 13\n[shop 2180] 満席で立ち去る 13\n[shop
    2180] 来店 14\n[barber 2356] 散発終了 9\n[barber 2356] 散発開始 10\n[shop 2180] 来店 15\n[shop
    2180] 満席で立ち去る 15\n[barber 2356] 散発終了 10\n[barber 2356] 散発開始 14\n[barber 2356]
    散発終了 14\n[barber 2356] 散発開始 11\n[barber 2356] 散発終了 11\n[barber 2356] 床屋、眠る\n</pre>\n\n\t"
  :code: "# coding: utf-8\n\nfrom multiprocessing import \\\n        Process, Queue,
    Lock, Event, Array, current_process\nfrom Queue import Empty\nimport time\nimport
    random\n\ndef barber(seats, output_data, barber_waking):\n    pid = current_process().pid\n\n
    \   while True:\n        try:\n            seat_num, customer = seats.check()\n
    \       except SeatsEmpty:\n            seat_num, customer = None, None\n        if
    customer is not None:\n            output_data.put(u\"[barber %d] 散発開始 %d\" %
    (pid, customer))\n            time.sleep(random.randint(100, 400) / 1000.0)\n
    \           output_data.put(u\"[barber %d] 散発終了 %d\" % (pid, customer))\n            seats.stand(seat_num)\n
    \       else:\n            # 客がいないので寝る\n            barber_waking.clear()\n            output_data.put(u\"[barber
    %d] 床屋、眠る\" % pid)\n            barber_waking.wait() # 寝た\n            # 起こされた\n
    \           output_data.put(u\"[barber %d] 床屋、目覚める\" % pid)\n\ndef shop(seats,
    output_data, barber_waking):\n    pid = current_process().pid\n\n    for customer
    in  xrange(0, 16):\n        try:\n            output_data.put(u\"[shop %d] 来店
    %d\" % (pid, customer))\n            seats.sit(customer)\n        except SeatsFull:\n
    \           output_data.put(u\"[shop %d] 満席で立ち去る %d\" % (\n                pid,
    customer))\n        else:\n            if not barber_waking.is_set():\n                output_data.put(u\"[shop
    %d] 床屋を起こす %d\" % (\n                    pid, customer))\n            barber_waking.set()\n
    \       if customer != 7:\n            time.sleep(random.randint(0, 200) / 1000.0)\n
    \       else:\n            time.sleep(random.randint(1200, 1400) / 1000.0)\n\nclass
    SeatsEmpty(Exception):\n    pass\n\nclass SeatsFull(Exception):\n    pass\n\nclass
    Seats(object):\n    def __init__(self, num):\n        # seats には客の id  (&gt;=
    0) が入る。負の値は空席を意味する\n        self.seats = Array('b', num, lock=False)\n        self.lock
    = Lock()\n        with self.lock:\n            for i in xrange(num):\n                self.seats[i]
    = -1\n\n    def check(self):\n        u\"\"\"客がいるかどうか見る\n        \n        客がいなければ
    SeatsEmpty 例外を送出する。\"\"\"\n        with self.lock:\n            for seat_num,
    customer in enumerate(self.seats):\n                if customer &gt;= 0:\n                    return
    seat_num, customer\n            else:\n                raise SeatsEmpty()\n\n
    \   def sit(self, customer):\n        u\"\"\"客を空席に座らせる\n        \n        空席がない場合
    SeatsFull 例外を送出する。\"\"\"\n        with self.lock:\n            for seat_num, seat
    in enumerate(self.seats):\n                if seat &lt; 0:\n                    self.seats[seat_num]
    = customer\n                    break\n            else:\n                raise
    SeatsFull()\n\n    def stand(self, seat_num):\n        u\"\"\"seat_num 番目の席に座っている客に席を立たせる\"\"\"\n
    \       with self.lock:\n            assert self.seats[seat_num] &gt;= 0\n            self.seats[seat_num]
    = -1\n\ndef main():\n    seats = Seats(3) # 席\n    output_data = Queue() # 出力バッファ\n
    \   # 出力を別プロセスもしくは親プロセスで\n    barber_waking = Event() # 床屋が起きているか\n    barber_waking.set()\n\n
    \   process_shop = Process(\n            target=shop,\n            args=(seats,
    output_data, barber_waking))\n    process_barber = Process(\n            target=barber,\n
    \           args=(seats, output_data, barber_waking))\n\n    process_barber.start()\n
    \   process_shop.start()\n\n    while (process_shop.is_alive() or\n           barber_waking.is_set()
    or\n           not output_data.empty()):\n        try:\n            print output_data.get(timeout=1)\n
    \       except Empty:\n            pass\n\n    process_barber.terminate()\n    process_barber.join()\n\nif
    __name__ == '__main__':\n    main()\n"
  :tags:
  - Python2.6
  :references:
    :url: 
    :title: 
- :id: '9635'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9635
  :user_name: syat
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/766/
  :language: JavaScript
  :time: 2009/10/17 00:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  JavaScriptで。マルチスレッドライブラリのConcurrent.Threadを使用しました。\r<br>床屋と客の2スレッド構成です。スレッドIDに相当するものはない（と思う）ので、自分で付けました。\r<br>寝ていますフラグがないと、床屋が起きているときに notify が飛んで、床屋の機嫌を損ねて（＝エラー終了）しまいます。\r<br>＜実行例＞\r<br>[床屋] 床屋、眠る\r<br>[ 客 ] 来店 1\r<br>[床屋] 床屋、目覚める\r<br>[床屋] 散髪開始 1\r<br>[ 客 ] 来店 2\r<br>[ 客 ] 来店 3\r<br>[床屋] 散髪完了 1\r<br>[床屋] 散髪開始 2\r<br>[床屋] 散髪完了 2\r<br>[床屋] 散髪開始 3\r<br>[ 客 ] 来店 4\r<br>[ 客 ] 来店 5\r<br>[ 客 ] 来店 6\r<br>[ 客 ] 満席で立ち去る 6\r<br>[床屋] 散髪完了 3\r<br>[床屋] 散髪開始 4\r<br>[ 客 ] 来店 7\r<br>[ 客 ] 来店 8\r<br>[ 客 ] 満席で立ち去る 8\r<br>[床屋] 散髪完了 4\r<br>[床屋] 散髪開始 5\r<br>[床屋] 散髪完了 5\r<br>[床屋] 散髪開始 7\r<br>[床屋] 散髪完了 7\r<br>[床屋] 床屋、眠る\r<br>[ 客 ] 来店 9\r<br>[床屋] 床屋、目覚める\r<br>[床屋] 散髪開始 9\r<br>[ 客 ] 来店 10\r<br>[ 客 ] 来店 11\r<br>[ 客 ] 来店 12\r<br>[ 客 ] 満席で立ち去る 12\r<br>[床屋] 散髪完了 9\r<br>[床屋] 散髪開始 10\r<br>[ 客 ] 来店 13\r<br>[ 客 ] 来店 14\r<br>[ 客 ] 満席で立ち去る 14\r<br>[ 客 ] 来店 15\r<br>[ 客 ] 満席で立ち去る 15\r<br>[床屋] 散髪完了 10\r<br>[床屋] 散髪開始 11\r<br>[ 客 ] 来店 16\r<br>[床屋] 散髪完了 11\r<br>[床屋] 散髪開始 13\r<br>[床屋] 散髪完了 13\r<br>[床屋] 散髪開始 16\r<br>[床屋] 散髪完了 16\r<br>[床屋] 床屋、眠る\r<br>"
  :code: |
    &lt;html&gt;
    &lt;head&gt;
    &lt;script type="text/javascript" src="Concurrent.Thread-full-20090713.js"&gt;&lt;/script&gt;
    &lt;script type="text/javascript"&gt;
    var queue = [];                 //客行列
    var barber;                     //床屋スレッド
    var customer;                   //客スレッド
    var barber_is_sleeping = false; //寝ていますフラグ

    //床屋スレッド本体
    var barber_func = function() {
      while (true) {
        while (queue.length &gt; 0) {
          var cust = queue[0];
          log(barber, "散髪開始 " + cust.toString());
          Concurrent.Thread.sleep(Math.random()*300+100);
          log(barber, "散髪完了 " + cust.toString());
          queue.shift();
        }
        log(barber, "床屋、眠る");
        try {
          barber_is_sleeping = true;
          stop();
        } catch ( ex ) {
          log(barber, "床屋、目覚める");
          barber_is_sleeping = false;
        }
      }
    };
    //客スレッド本体
    var customer_func = function() {
      var count = 0;

      while (count &lt; 16) {
        count++;
        if (count != 9) {
          Concurrent.Thread.sleep(Math.floor(Math.random()*200));
        } else {
          Concurrent.Thread.sleep(1200);
        }
        log(customer, "来店 " + count.toString());
        if (queue.length &gt;= 3) {
          log(customer, "満席で立ち去る " + count.toString());
        } else {
          queue.push(count);
          if (barber_is_sleeping) {
            barber.notify("wake!");
          }
        }
        yield();
      }
    };
    //ログ出力
    function log(t, s) {
      var o = document.getElementById('result');
      o.innerHTML += '[' + t.ID + '] ' + s + "&lt;br&gt;";
    }
    function init() {
      barber = Concurrent.Thread.create(barber_func);
      barber.ID = "床屋";
      customer = Concurrent.Thread.create(customer_func);
      customer.ID = " 客 ";
    }
    &lt;/script&gt;
    &lt;/head&gt;
    &lt;body onload="init();"&gt;
    &lt;div id="result"&gt;&lt;/div&gt;
    &lt;/body&gt;
    &lt;/html&gt;
  :tags:
  - Concurrent.Thread
  :references:
    :url: /web/20100712030912/http://www.infoq.com/jp/articles/js_multithread
    :title: JavaScriptへのマルチスレッド・プログラミングの導入
- :id: '9638'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9638
  :user_name: 匿名
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/4/
  :language: Scala
  :time: 2009/10/18 10:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Scala Actorで実装しました。考え方を理解するのに苦労しましたが、シンプルにできたと思います。</p>\n\n\t"
  :code: |
    import scala.actors._
    import scala.actors.Actor._
    import scala.util._

    object Log {
        def apply(msg:String, id:Any):Unit = printf("[%d] %s %s\n", currentThread.getId, msg, id)
        def apply(msg:String):Unit = apply(msg, "")
    }

    object SleepingBarber {
        object Close
        def main(args : Array[String]) : Unit = {
            val barber = self
            var entered = 0
            var result = 0
            var chair = 3
            val owner = actor {
                  var sleeping = false
                  def wakeup = { sleeping = false; Log("床屋、目覚める ") }
                  def sleep = { sleeping = true; Log("床屋、眠る ") }
                  sleep
                  loop {
                      receive {
                            case id:Int =&gt; {
                                if (sleeping) wakeup
                                Log("散髪開始", id)
                                Thread.sleep((Math.random * 300).toInt + 100)
                                Log("散髪完了", id)
                                if (mailboxSize == 0) sleep
                                result += 1
                                reply(id)
                            }
                            case Close =&gt; exit
                      }
                }
            }
            val visitors = 1 to 16
            visitors.foreach { id =&gt;
                  Thread.sleep(if (id == 9) 1200 else (Math.random * 200).toInt)
                  Log("来店", id)
                  entered += 1
                if (chair == 0) {
                    Log("満席で立ち去る ", id)
                        barber ! id
                } else {
                    chair -= 1
                    actor {
                        owner !? id
                            chair += 1
                            barber ! id
                    }
                }
            }
             visitors.foreach { id =&gt; receive { case vid if vid == id =&gt; /*join*/ } }
            owner ! Close
            printf("※ %d人のうち %d人を散髪 \n", entered, result)
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9642'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9642
  :user_name: hoge
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/1111/
  :language: C
  :time: 2009/10/24 14:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">　Win32API&amp;VC++で。参照先のWikipediaの擬似コードに忠実にしたつもりが、かなり泥臭くなってしまいました。\r\nエラー処理とか書いてたら何行になるやら。\r\n\r\n＜実行結果＞\r\n[ThreadID,
    \    Time] イベント\r\n[   0xe74,      0ms] 床屋、眠る\r\n[   0x114,    187ms] 来店 1(空き席数=3)\r\n[
    \  0xe74,    187ms] 床屋、目覚める\r\n[   0xe74,    187ms] 散髪開始 1\r\n[   0x548,    218ms]
    来店 2(空き席数=2)\r\n[   0xe74,    297ms] 散髪終了 1\r\n[   0xe74,    297ms] 散髪開始 2\r\n[
    \  0x1fc,    422ms] 来店 3(空き席数=2)\r\n[   0xe74,    578ms] 散髪終了 2\r\n[   0xe74,
    \   578ms] 散髪開始 3\r\n[   0xa04,    609ms] 来店 4(空き席数=2)\r\n[   0xe74,    750ms]
    散髪終了 3\r\n[   0xe74,    750ms] 散髪開始 4\r\n[   0xbec,    765ms] 来店 5(空き席数=2)\r\n[
    \  0xe90,    890ms] 来店 6(空き席数=1)\r\n[   0xeb0,   1078ms] 来店 7(空き席数=0)\r\n[   0xeb0,
    \  1078ms] 満席で立ち去る 7\r\n[   0xe74,   1093ms] 散髪終了 4\r\n[   0xe74,   1093ms] 散髪開始
    5\r\n[   0x150,   1203ms] 来店 8(空き席数=1)\r\n[   0xe74,   1375ms] 散髪終了 5\r\n[   0xe74,
    \  1375ms] 散髪開始 6\r\n[   0xe74,   1625ms] 散髪終了 6\r\n[   0xe74,   1625ms] 散髪開始
    8\r\n[   0xe74,   1843ms] 散髪終了 8\r\n[   0xe74,   1843ms] 床屋、眠る\r\n[   0x380,   2406ms]
    来店 9(空き席数=3)\r\n[   0xe74,   2406ms] 床屋、目覚める\r\n[   0xe74,   2406ms] 散髪開始 9\r\n[
    \  0x618,   2500ms] 来店 10(空き席数=2)\r\n[   0xc80,   2687ms] 来店 11(空き席数=1)\r\n[   0xe74,
    \  2781ms] 散髪終了 9\r\n[   0xe74,   2781ms] 散髪開始 10\r\n[   0xaac,   2859ms] 来店 12(空き席数=1)\r\n[
    \  0x310,   2968ms] 来店 13(空き席数=0)\r\n[   0x310,   2968ms] 満席で立ち去る 13\r\n[   0x790,
    \  3125ms] 来店 14(空き席数=0)\r\n[   0x790,   3125ms] 満席で立ち去る 14\r\n[   0xe74,   3140ms]
    散髪終了 10\r\n[   0xe74,   3140ms] 散髪開始 11\r\n[   0xa24,   3312ms] 来店 15(空き席数=1)\r\n[
    \  0xe04,   3390ms] 来店 16(空き席数=0)\r\n[   0xe04,   3390ms] 満席で立ち去る 16\r\n[   0xe74,
    \  3468ms] 散髪終了 11\r\n[   0xe74,   3468ms] 散髪開始 12\r\n[   0xe74,   3625ms] 散髪終了
    12\r\n[   0xe74,   3625ms] 散髪開始 15\r\n[   0xe74,   3984ms] 散髪終了 15\r\n[   0xe74,
    \  3984ms] 床屋、眠る\r\n16人のうち 12人を散髪</pre>\n\t"
  :code: |
    #include &lt;windows.h&gt;
    #include &lt;process.h&gt;
    #include &lt;stdio.h&gt;

    #define NUMBER_OF_CUSTOMERS                     (16)
    #define NUMBER_OF_SEATS                         (3)
    #define HAIRCUT_INTERVAL_FROM                   (100)
    #define HAIRCUT_INTERVAL_TO                     (300+HAIRCUT_INTERVAL_FROM)
    #define HAIRCUT_INTERVAL                        (GetInterval(HAIRCUT_INTERVAL_FROM,HAIRCUT_INTERVAL_TO))
    #define CUSTOMER_INTERVAL_FROM                  (0)
    #define CUSTOMER_INTERVAL_TO                    (200+CUSTOMER_INTERVAL_FROM)
    #define CUSTOMER_INTERVAL                       (GetInterval(CUSTOMER_INTERVAL_FROM,CUSTOMER_INTERVAL_TO))
    #define CUSTOMER_9TH_INTERVAL_FROM              (1200)
    #define CUSTOMER_9TH_INTERVAL_TO                (0+CUSTOMER_9TH_INTERVAL_FROM)
    #define CUSTOMER_9TH_INTERVAL                   (GetInterval(CUSTOMER_9TH_INTERVAL_FROM,CUSTOMER_9TH_INTERVAL_TO))
    #define OUTPUT                                  OutputMessage

    HANDLE hBarbar; /* 床屋の手が空くまで待機するためのセマフォ */
    HANDLE hCustomers; /* 来客まで待機するためのセマフォ */
    CRITICAL_SECTION csAccessThreadData;
    CRITICAL_SECTION csAccessSeats;
    HANDLE hBeginHairCut; /* 散髪開始イベント */
    HANDLE hEndHairCut; /* 散髪終了イベント */
    HANDLE hCloseBarbar; /* 閉店イベント */
    INT iNumberOfFreeSeats=NUMBER_OF_SEATS; /* 空き席数 */
    INT iCurrentCustomerID; /* 散髪中の客のID */
    INT iNumberOfCustomersHairCut=0; /* 散髪した人数 */
    DWORD dwOpenTime;
    HANDLE hBarbarThread;/* 床屋(店主)のスレッド */
    HANDLE hCustomerThreads[NUMBER_OF_CUSTOMERS]; /* 客のスレッド */

    DWORD GetTime(VOID)
    {
        /* 経過時間を返す。 */
        return GetTickCount()-dwOpenTime;
    }

    INT GetInterval(INT iFrom,INT iTo)
    {
        /* 待機時間を返す。 */
        return (INT)(iFrom+(DOUBLE)(iTo-iFrom)*rand()/RAND_MAX);
    }

    VOID OutputMessage(LPCSTR lpszFormat,...)
    {
        va_list va;
        CHAR* lpBuffer;
        size_t cbBufferSize;

        va_start(va,lpszFormat);
        cbBufferSize=_vscprintf(lpszFormat,va)+1;
        lpBuffer=_alloca(cbBufferSize);
        vsprintf_s(lpBuffer,cbBufferSize,lpszFormat,va);
        va_end(va);

        printf("[%#*lx, %6lums] %s\r\n",sizeof(DWORD)*2,GetCurrentThreadId(),GetTime(),lpBuffer);
    }

    VOID WaitForHairCut(CRITICAL_SECTION* lpcsAccessSeats)
    {
        /* Win32APIの待機関数は、呼ばれた順番で実行権を渡してくれないので修正する。 */
        static DWORD dwThreadQueue[NUMBER_OF_CUSTOMERS];
        static INT iQueueIndex=0;
        static INT iCustomerIndex=0;
        DWORD dwThreadID=GetCurrentThreadId();

        EnterCriticalSection(&amp;csAccessThreadData);
        dwThreadQueue[iQueueIndex++]=dwThreadID;
        LeaveCriticalSection(&amp;csAccessThreadData);
        LeaveCriticalSection(lpcsAccessSeats);

        while(TRUE){
            WaitForSingleObject(hBarbar,INFINITE);

            EnterCriticalSection(&amp;csAccessThreadData);
            __try{
                /* 順番通りに呼ばれていれば、ループを抜ける。 */
                if(dwThreadID==dwThreadQueue[iCustomerIndex]){
                    iCustomerIndex++;
                    break;
                }

                ReleaseSemaphore(hBarbar,1,NULL);
            }__finally{
                LeaveCriticalSection(&amp;csAccessThreadData);
            }
        }
    }

    DWORD CALLBACK BarbarThread(LPVOID lpParam)
    {
        HANDLE hEvents[2]={hCustomers, (HANDLE)lpParam};
        DWORD dwResult;

        while(TRUE){
            /* 客がいるか調べる。 */
            dwResult=WaitForMultipleObjects(_countof(hEvents),hEvents,FALSE,0);

            if(dwResult!=WAIT_OBJECT_0){
                /* いなければ寝る。 */
                OUTPUT("床屋、眠る");

                /* もう、客が来ないなら店を閉める。 */
                if(dwResult==WAIT_OBJECT_0+1)
                    break;

                if(WaitForMultipleObjects(_countof(hEvents),hEvents,FALSE,INFINITE)==WAIT_OBJECT_0+1)
                    break;
            }

            if(dwResult==WAIT_TIMEOUT)
                OUTPUT("床屋、目覚める");

            /* 散髪する客を1人選ぶ。 */
            ReleaseSemaphore(hBarbar,1,NULL);

            /* 散髪開始。 */
            WaitForSingleObject(hBeginHairCut,INFINITE);
            OUTPUT("散髪開始 %d",iCurrentCustomerID);
            Sleep(HAIRCUT_INTERVAL);

            /* 散髪終了。 */
            SetEvent(hEndHairCut);

            EnterCriticalSection(&amp;csAccessSeats);
            OUTPUT("散髪終了 %d",iCurrentCustomerID);
            iNumberOfFreeSeats++;
            LeaveCriticalSection(&amp;csAccessSeats);
        }

        /* 店を閉める。 */
        return 0;
    }

    DWORD CALLBACK CustomerThread(LPVOID lpParam)
    {
        static INT iCustmerID_=0;
        INT iCustomerID;

        /* 来客間隔が0msだとResumeThread()した順番すら入れ替わるので、実行(来店)した順番でIDを割り振る。 */
        EnterCriticalSection(&amp;csAccessSeats);
        iCustomerID=++iCustmerID_;
        OUTPUT("来店 %d(空き席数=%d)",iCustomerID,iNumberOfFreeSeats);

        /* 空き席数を確認する。 */
        if(iNumberOfFreeSeats&gt;0){
            iNumberOfFreeSeats--;
            ReleaseSemaphore(hCustomers,1,NULL);

            /* 散髪の番を待つ。 */
            WaitForHairCut(&amp;csAccessSeats);

            /* 散髪開始。 */
            iCurrentCustomerID=iCustomerID;
            SetEvent(hBeginHairCut);

            /* 散髪終了。 */
            iNumberOfCustomersHairCut++;
            WaitForSingleObject(hEndHairCut,INFINITE);
        }else{
            OUTPUT("満席で立ち去る %d",iCustomerID);
            LeaveCriticalSection(&amp;csAccessSeats);
        }

        /* 店から出る。 */
        return 0;
    }

    VOID OpenBarbar(VOID)
    {
        INT i;

        /* 開店準備をする。 */
        printf("[%*s, %8s] イベント\r\n", sizeof(DWORD)*2,"ThreadID", "Time");

        srand(GetTickCount());
        hBarbar=CreateSemaphore(NULL,0,1,NULL);
        hCustomers=CreateSemaphore(NULL,0,NUMBER_OF_SEATS,NULL);
        InitializeCriticalSection(&amp;csAccessThreadData);
        InitializeCriticalSection(&amp;csAccessSeats);
        hBeginHairCut=CreateEvent(NULL,FALSE,FALSE,NULL);
        hEndHairCut=CreateEvent(NULL,FALSE,FALSE,NULL);
        hCloseBarbar=CreateEvent(NULL,FALSE,FALSE,NULL);
        dwOpenTime=GetTickCount();

        hBarbarThread=(HANDLE)_beginthreadex(NULL,0,BarbarThread,hCloseBarbar,0,NULL);

        for(i=0; i&lt;NUMBER_OF_CUSTOMERS; i++)
            hCustomerThreads[i]=((HANDLE)_beginthreadex(NULL,0,CustomerThread,NULL,CREATE_SUSPENDED,NULL));
    }

    VOID CloseBarbar(VOID)
    {
        INT i;

        /* 全ての客を処理したら店を閉める。 */
        WaitForMultipleObjects(_countof(hCustomerThreads),hCustomerThreads,TRUE,INFINITE);
        SetEvent(hCloseBarbar);
        WaitForSingleObject(hBarbarThread,INFINITE);

        CloseHandle(hBarbar);
        CloseHandle(hCustomers);
        DeleteCriticalSection(&amp;csAccessThreadData);
        DeleteCriticalSection(&amp;csAccessSeats);
        CloseHandle(hBeginHairCut);
        CloseHandle(hEndHairCut);
        CloseHandle(hCloseBarbar);
        CloseHandle(hBarbarThread);

        for(i=0; i&lt;_countof(hCustomerThreads); i++)
            CloseHandle(hCustomerThreads[i]);

        /* 結果を表示する。 */
        printf("%d人のうち %d人を散髪\r\n\r\n",NUMBER_OF_CUSTOMERS,iNumberOfCustomersHairCut);

        puts("終了するには、何かキーを押して下さい。");
        getchar();
    }

    INT main(INT argc,CHAR** argv)
    {
        INT i;

        OpenBarbar();

        /* 指定された時間間隔で客が来店するようにする。 */
        for(i=0; i&lt;NUMBER_OF_CUSTOMERS; i++){
            if(i==8)
                Sleep(CUSTOMER_9TH_INTERVAL);
            else
                Sleep(CUSTOMER_INTERVAL);

            ResumeThread(hCustomerThreads[i]);
        }

        CloseBarbar();

        return 0;
    }
  :tags:
  - VC++
  - Win32API
  :references:
    :url: 
    :title: 
- :id: '9646'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9646
  :user_name: hoge
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/1111/
  :language: 
  :time: 2009/10/24 11:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">　ものすごいスペリングミスを発見してしまったのですが、華麗にスルーして下さいね！</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9649'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9649
  :user_name: hoge
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/1111/
  :language: C
  :time: 2009/10/25 05:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">　スペルミスの修正も兼ねて、セマフォを使わずに席の数の方を排他処理して、\r\n床屋のスレッドを止めるという方向で書きました。こっちの方がいいかも。\r\n　あと、できるだけ短くしたつもり。</pre>\n\t"
  :code: |
    #define _CRT_RAND_S
    #include &lt;windows.h&gt;
    #include &lt;process.h&gt;
    #include &lt;stdio.h&gt;

    #define NUMBER_OF_CUSTOMERS                     (16)
    #define NUMBER_OF_SEATS                         (3)
    #define LOG                                     OutputMessage

    typedef struct Customer{
        HANDLE hThread;
        HANDLE hHaircutEvent;
    } Customer;

    CRITICAL_SECTION csAccessSeats;
    HANDLE hBarberThread, hCustomerThreads[NUMBER_OF_CUSTOMERS]; /* 床屋と客のスレッド */
    Customer seats[NUMBER_OF_SEATS]; /* 席の数(FIFO) */
    INT iNumberOfCustomersHairCut=0; /* 散髪した人数 */
    DWORD dwOpenTime;
    BOOL bExit=FALSE;

    INT GetInterval(INT iFrom,INT iTo)
    {
        UINT ui;

        return rand_s(&amp;ui), (INT)(iFrom+(DOUBLE)(iTo-iFrom)*ui/UINT_MAX);
    }

    VOID OutputMessage(LPCSTR lpszFormat,...)
    {
        va_list va; CHAR* lpBuffer; size_t cbBufferSize;

        va_start(va,lpszFormat);
        lpBuffer=_alloca(cbBufferSize=_vscprintf(lpszFormat,va)+1);
        vsprintf_s(lpBuffer,cbBufferSize,lpszFormat,va);
        va_end(va);

        printf("[%#*lx, %6lums] %s\n",sizeof(DWORD)*2,GetCurrentThreadId(),GetTickCount()-dwOpenTime,lpBuffer);
    }

    DWORD CALLBACK BarberThread(LPVOID lpParam)
    {
        BOOL bSleeping=FALSE;

        while(!bExit){
            Customer customer={0};

            EnterCriticalSection(&amp;csAccessSeats);
            customer=seats[0]; /* 客を順番に処理 */
            LeaveCriticalSection(&amp;csAccessSeats);

            if(!customer.hThread){ LOG("床屋、眠る"); bSleeping=TRUE; SuspendThread(GetCurrentThread()); continue; }
            if(bSleeping){ LOG("床屋、目覚める"); bSleeping=FALSE; }

            SetEvent(customer.hHaircutEvent);
            WaitForSingleObject(customer.hThread,INFINITE);
            iNumberOfCustomersHairCut++;

            EnterCriticalSection(&amp;csAccessSeats); /* 終わった客を席から取り除く */
            CloseHandle(seats[0].hThread); CloseHandle(seats[0].hHaircutEvent);
            memmove(&amp;seats[0],&amp;seats[1],sizeof(Customer)*(_countof(seats)-1));
            memset(&amp;seats[_countof(seats)-1],0,sizeof(Customer));
            LeaveCriticalSection(&amp;csAccessSeats);
        }

        return 0;
    }

    DWORD CALLBACK CustomerThread(LPVOID lpParam)
    {
        static INT iCustmerID_=0;
        INT iCustomerID, iSeatIndex;
        Customer customer={0};

        EnterCriticalSection(&amp;csAccessSeats);
        __try{
            iCustomerID=++iCustmerID_;
            for(iSeatIndex=0; iSeatIndex&lt;_countof(seats); iSeatIndex++)
                if(!seats[iSeatIndex].hThread){ /* 席が空いていれば座る */
                    customer.hThread=OpenThread(STANDARD_RIGHTS_REQUIRED|SYNCHRONIZE,FALSE,GetCurrentThreadId());
                    customer.hHaircutEvent=CreateEvent(NULL,FALSE,FALSE,NULL);
                    seats[iSeatIndex]=customer;
                    break;
                }
            LOG("来店 %d(空き席数=%d)",iCustomerID,_countof(seats)-iSeatIndex);
            if(_countof(seats)&lt;=iSeatIndex){ LOG("満席で立ち去る %d",iCustomerID); return 0; }
        }__finally{
            LeaveCriticalSection(&amp;csAccessSeats);
        }

        ResumeThread(hBarberThread); /* 既に実行されていてもかまわない */
        WaitForSingleObject(customer.hHaircutEvent,INFINITE);
        LOG("散髪開始 %d",iCustomerID);
        Sleep(GetInterval(100,400));
        LOG("散髪終了 %d",iCustomerID);

        return 0;
    }

    VOID OpenBarber(VOID)
    {
        INT i;

        printf("[%*s, %8s] イベント\n",sizeof(DWORD)*2,"ThreadID","Time");

        InitializeCriticalSection(&amp;csAccessSeats);
        dwOpenTime=GetTickCount();
        hBarberThread=(HANDLE)_beginthreadex(NULL,0,BarberThread,NULL,0,NULL);

        for(i=0; i&lt;NUMBER_OF_CUSTOMERS; i++)
            hCustomerThreads[i]=((HANDLE)_beginthreadex(NULL,0,CustomerThread,NULL,CREATE_SUSPENDED,NULL));
    }

    VOID CloseBarber(VOID)
    {
        INT i;

        WaitForMultipleObjects(_countof(hCustomerThreads),hCustomerThreads,TRUE,INFINITE);
        while(WaitForSingleObject(hBarberThread,100)==WAIT_TIMEOUT){ bExit=TRUE; ResumeThread(hBarberThread); };

        DeleteCriticalSection(&amp;csAccessSeats);
        CloseHandle(hBarberThread);

        for(i=0; i&lt;_countof(hCustomerThreads); i++)
            CloseHandle(hCustomerThreads[i]);

        printf("%d人のうち %d人を散髪\n\n",NUMBER_OF_CUSTOMERS,iNumberOfCustomersHairCut);
        puts("終了するには、何かキーを押して下さい。"); getchar();
    }

    INT main(INT argc,CHAR** argv)
    {
        INT i;

        OpenBarber();

        for(i=0; i&lt;NUMBER_OF_CUSTOMERS; i++){
            if(i==8) Sleep(GetInterval(1200,1200));
            else Sleep(GetInterval(0,200));

            ResumeThread(hCustomerThreads[i]);
        }

        CloseBarber();

        return 0;
    }
  :tags:
  - VC++
  - Win32API
  :references:
    :url: 
    :title: 
- :id: '9651'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9651
  :user_name: horiuchi
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/570/
  :language: 
  :time: 2009/10/26 08:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">実行結果を貼り付けてなかったので、いまさらですが追記。\r\n\r\n8 床屋 寝る\r\n1
    来店 1\r\n8 床屋、目覚める\r\n8 散髪開始 1\r\n1 来店 2\r\n8 散髪完了 1\r\n8 散髪開始 2\r\n1 来店 3\r\n1
    来店 4\r\n1 来店 5\r\n1 満席で立ち去る 5\r\n1 来店 6\r\n1 満席で立ち去る 6\r\n1 来店 7\r\n1 満席で立ち去る
    7\r\n8 散髪完了 2\r\n8 散髪開始 3\r\n1 来店 8\r\n8 散髪完了 3\r\n8 散髪開始 4\r\n8 散髪完了 4\r\n8 散髪開始
    8\r\n8 散髪完了 8\r\n8 床屋 寝る\r\n1 来店 9\r\n8 床屋、目覚める\r\n8 散髪開始 9\r\n1 来店 10\r\n1 来店
    11\r\n8 散髪完了 9\r\n8 散髪開始 10\r\n1 来店 12\r\n1 来店 13\r\n1 満席で立ち去る 13\r\n1 来店 14\r\n1
    満席で立ち去る 14\r\n8 散髪完了 10\r\n8 散髪開始 11\r\n1 来店 15\r\n1 来店 16\r\n1 満席で立ち去る 16\r\n8
    散髪完了 11\r\n8 散髪開始 12\r\n8 散髪完了 12\r\n8 散髪開始 15\r\n8 散髪完了 15\r\n8 床屋 寝る\r\n16人のうち
    10人を散髪\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9654'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9654
  :user_name: hoge
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/1111/
  :language: 
  :time: 2009/10/31 06:54 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">　冷静に考えたら、床屋のスレッドを止めるところも排他処理しなきゃ駄目でした。\r\nでも、そうすると排他オブジェクトのリリースができないジレンマに。\r\n　やはり、セマフォか管理スレッドもう１つ追加するとかしないと駄目なのでしょうか。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9655'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9655
  :user_name: eo-oe-aaaa
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/498/
  :language: Ruby
  :time: 2009/11/03 10:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  ruby 1.9.1です。\r\n普通にQueueを使いました。\r\n\r\n●実行結果\r\n[#&lt;Thread:0x279c99c&gt;]
    床屋、眠る\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 1\r\n[#&lt;Thread:0x279c99c&gt;] 床屋、目覚める\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、開始 1\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 2\r\n[#&lt;Thread:0x279c9f0&gt;] 来店
    3\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 4\r\n[#&lt;Thread:0x279c9f0&gt;] 満席で立ち去る 4\r\n[#&lt;Thread:0x279c9f0&gt;]
    来店 5\r\n[#&lt;Thread:0x279c9f0&gt;] 満席で立ち去る 5\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、完了
    1\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始 2\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 6\r\n[#&lt;Thread:0x279c9f0&gt;]
    来店 7\r\n[#&lt;Thread:0x279c9f0&gt;] 満席で立ち去る 7\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、完了
    2\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始 3\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 8\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、完了 3\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始 6\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、完了 6\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始 8\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、完了 8\r\n[#&lt;Thread:0x279c99c&gt;] 床屋、眠る\r\n[#&lt;Thread:0x279c9f0&gt;] 来店
    9\r\n[#&lt;Thread:0x279c99c&gt;] 床屋、目覚める\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始
    9\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 10\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 11\r\n[#&lt;Thread:0x279c9f0&gt;]
    来店 12\r\n[#&lt;Thread:0x279c9f0&gt;] 満席で立ち去る 12\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、完了 9\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始 10\r\n[#&lt;Thread:0x279c9f0&gt;]
    来店 13\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 14\r\n[#&lt;Thread:0x279c9f0&gt;] 満席で立ち去る
    14\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、完了 10\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、開始
    11\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 15\r\n[#&lt;Thread:0x279c9f0&gt;] 来店 16\r\n[#&lt;Thread:0x279c9f0&gt;]
    満席で立ち去る 16\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、完了 11\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、開始 13\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、完了 13\r\n[#&lt;Thread:0x279c99c&gt;]
    散髪、開始 15\r\n[#&lt;Thread:0x279c99c&gt;] 散髪、完了 15\r\n16人のうち 10人を散髪\r\n\n\t"
  :code: |
    # -*- coding: utf-8 -*-
    require 'thread'

    def log( s, i = 0 )
      if i == 0 then
        puts sprintf("[%s] %s", Thread.current, s)
      else
        puts sprintf("[%s] %s %d", Thread.current, s, i)
      end
    end

    cus_q = Queue.new
    m = Mutex.new
    cus_num = 0
    cut_num = 0

    Thread.start {
      (1..16).each do |i|
        sleep( if i==9 then 1.2 else rand(200) / 1000.0 end)

        log( "来店", i )
        m.synchronize do
          if cus_num == 3 then
            log( "満席で立ち去る", i )
          else
            cus_num += 1
            cut_num += 1
            cus_q.push(i)
          end
        end
      end
      cus_q.push(nil)
    }

    barber = Thread.start {
      loop do
        if cus_q.empty? then
          log( "床屋、眠る")
          i = cus_q.pop
          log( "床屋、目覚める" ) if i != nil
        else
          i = cus_q.pop
        end

        Thread.exit if i == nil

        log( "散髪、開始", i)
        sleep( ( 100 + rand(300)) / 1000.0)
        m.synchronize {
          log( "散髪、完了", i)
          cus_num -= 1
        }
      end
    }

    barber.join
    puts sprintf("16人のうち %d人を散髪", cut_num )
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9737'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/9737
  :user_name: 匿名
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2009/12/25 10:31 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>Casino Free Game  tyuueooru\n<a class=\"reference\" href=\"/web/20100712030912/http://stonewalljacksoncarnival.org/\">http://stonewalljacksoncarnival.org/</a>
    - Casino Games</p>\n<div class=\"system-message\">\n<p class=\"system-message-title\">System
    Message: ERROR/3 (<tt class=\"docutils\">&lt;string&gt;</tt>, line 3)</p>\nUnexpected
    indentation.</div>\n<blockquote>\nThere are several advantages of playing online
    casino and some of them include: 1.</blockquote>\n<div class=\"system-message\">\n<p
    class=\"system-message-title\">System Message: WARNING/2 (<tt class=\"docutils\">&lt;string&gt;</tt>,
    line 4)</p>\nBlock quote ends without a blank line; unexpected unindent.</div>\n<dl
    class=\"docutils\">\n<dt>&lt;a href=http://stonewalljacksoncarnival.org/&gt;Online
    Casinos Free&lt;/a&gt;</dt>\n<dd>You can enjoy online casino simply by getting
    connected to the Internet.</dd>\n<dt>&lt;a href=http://stonewalljacksoncarnival.org/&gt;Web
    Casino&lt;/a&gt;</dt>\n<dd>All you need to is a well operating computer and an
    Internet connection and you?re done with your gambling.</dd>\n</dl>"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100712030912/http://www.nhgaa.org/
    :title: 'Casino Gambling '
- :id: '10276'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/10276
  :user_name: 匿名
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/4/
  :language: http
  :time: 2010/02/17 11:21 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  <p>Hi, rioutyrr &lt;a href=http://bisco-if.com&gt;valium pharmacy&lt;/a&gt;
    &lt;a href=http://hillarymoveon.org&gt;purchase valium&lt;/a&gt; <a class=\"reference\"
    href=\"/web/20100712030912/http://forestfire-survival.com/\">http://forestfire-survival.com</a>
    - valium drug <a class=\"reference\" href=\"/web/20100712030912/http://aquarium-fish-guide.com/\">http://aquarium-fish-guide.com</a>
    - cheap viagra online &lt;a href=http://courtofcamelot.com&gt;viagra drug&lt;/a&gt;
    &lt;a href=http://aszureartists.com&gt;cheap generic viagra&lt;/a&gt; &lt;a href=http://cdennisart.com&gt;Webcam
    Chat Rooms&lt;/a&gt; &lt;a href=http://cdennisart.com&gt;Girl Webcam&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://cdennisart.com/\">http://cdennisart.com</a>
    - Webcam Striptease <a class=\"reference\" href=\"/web/20100712030912/http://medseaproperty.com/\">http://medseaproperty.com</a>
    - xanax cost &lt;a href=http://clevelandcubs.com&gt;buy xanax online&lt;/a&gt;
    &lt;a href=http://neurosy.org&gt;xanax online&lt;/a&gt; &lt;a href=http://aivit.com&gt;zithromax
    medication&lt;/a&gt; &lt;a href=http://jigoloelcin.com&gt;zithromax azithromycin&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://stealthtronix.com/\">http://stealthtronix.com</a>
    - zithromax medication <a class=\"reference\" href=\"/web/20100712030912/http://upsidedownhealth.com/\">http://upsidedownhealth.com</a>
    - antidepressant zoloft &lt;a href=http://upsidedownhealth.com&gt;zoloft no prescription&lt;/a&gt;
    &lt;a href=http://bestpoolcleanersonline.com&gt;zoloft online&lt;/a&gt; &lt;a
    href=http://bethjudahmessianic.org&gt;zyban without prescription&lt;/a&gt; &lt;a
    href=http://bethjudahmessianic.org&gt;zyban no prescription&lt;/a&gt; <a class=\"reference\"
    href=\"/web/20100712030912/http://bethjudahmessianic.org/\">http://bethjudahmessianic.org</a>
    - cheap zyban &lt;a href=http://assistancedogsofamerica.org/&gt;accutane pharmacy&lt;/a&gt;
    &lt;a href=http://hillviewonbuckatabon.com/&gt;accutane without prescription&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://hillviewonbuckatabon.com/\">http://hillviewonbuckatabon.com/</a>
    - buy accutane online <a class=\"reference\" href=\"/web/20100712030912/http://quartetoemmim.com/\">http://quartetoemmim.com</a>
    - purchase acomplia &lt;a href=http://quartetoemmim.com&gt;discount acomplia online&lt;/a&gt;
    &lt;a href=http://quartetoemmim.com&gt;acomplia pills&lt;/a&gt; <a class=\"reference\"
    href=\"/web/20100712030912/http://lampsofnote.com/\">http://lampsofnote.com</a>
    - purchase adipex &lt;a href=http://mounttrashmore.org&gt;adipex phentermine&lt;/a&gt;
    &lt;a href=http://lampsofnote.com&gt;buy adipex&lt;/a&gt; &lt;a href=http://beykozkurek.org&gt;ambien
    5&lt;/a&gt; &lt;a href=http://jayprofeit.com&gt;order ambien online&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://ernestofonseca.com/\">http://ernestofonseca.com</a>
    - zolpidem online <a class=\"reference\" href=\"/web/20100712030912/http://frebass.com/\">http://frebass.com</a>
    - ativan pharmacy &lt;a href=http://broadrivertheatre.org&gt;buy lorazepam online&lt;/a&gt;
    &lt;a href=http://geteyeliner.com&gt;buy lorazepam online&lt;/a&gt; &lt;a href=http://dbsearchexpert.com&gt;Best
    Casino&lt;/a&gt; &lt;a href=http://dbsearchexpert.com&gt;Casino Gambling&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://dbsearchexpert.com/\">http://dbsearchexpert.com</a>
    - Free Casino Game <a class=\"reference\" href=\"/web/20100712030912/http://thefoundationhouse.org/\">http://thefoundationhouse.org</a>
    - Purchase Celebrex &lt;a href=http://thefoundationhouse.org&gt;Celebrex Overnight&lt;/a&gt;
    &lt;a href=http://thefoundationhouse.org&gt;Celebrex Without Prescription&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://billselleck.net/\">http://billselleck.net</a>
    - purchase celexa &lt;a href=http://billselleck.net&gt;celexa online&lt;/a&gt;
    &lt;a href=http://billselleck.net&gt;celexa drug&lt;/a&gt; &lt;a href=http://catalystradio.com&gt;cialis
    sale&lt;/a&gt; &lt;a href=http://auctionbaylivesearch.com&gt;cheap cialis online&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://zaxxonrecords.com/\">http://zaxxonrecords.com</a>
    - cialis for sale <a class=\"reference\" href=\"/web/20100712030912/http://frumslang.com/\">http://frumslang.com</a>
    - cipro online &lt;a href=http://frumslang.com&gt;buy cipro online&lt;/a&gt; &lt;a
    href=http://frumslang.com&gt;ciprofloxacin 500mg&lt;/a&gt; &lt;a href=http://kengajone.com&gt;purchase
    clomid&lt;/a&gt;</p>\n\n\t"
  :code: ''
  :tags:
  - For
  - Marijuana
  - Medicine
  - Use
  :references:
    :url: /web/20100712030912/http://cdennisart.com/
    :title: 'Marijuana Use As Medicinal Drug '
- :id: '10278'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/10278
  :user_name: 匿名
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2010/02/17 14:44 GMT
  :vote_count: '2'
  :vote_score: '-2'
  :body: "\n\t  <p>Hi, rioutyrr &lt;a href=http://quartetoemmim.com&gt;acomplia&lt;/a&gt;
    &lt;a href=http://quartetoemmim.com&gt;generic acomplia rimonabant&lt;/a&gt; <a
    class=\"reference\" href=\"/web/20100712030912/http://lampsofnote.com/\">http://lampsofnote.com</a>
    - adipex pills &lt;a href=http://lampsofnote.com&gt;buy adipex online&lt;/a&gt;
    &lt;a href=http://mounttrashmore.org&gt;buy cheap adipex&lt;/a&gt; &lt;a href=http://afyonluyuz.com&gt;ambien
    without prescription&lt;/a&gt; &lt;a href=http://alientalk.org&gt;buy generic
    ambien&lt;/a&gt; <a class=\"reference\" href=\"/web/20100712030912/http://jayprofeit.com/\">http://jayprofeit.com</a>
    - ambien drug <a class=\"reference\" href=\"/web/20100712030912/http://frebass.com/\">http://frebass.com</a>
    - ativan no prescription &lt;a href=http://10thpowermedia.com&gt;buy ativan&lt;/a&gt;
    &lt;a href=http://tvcrossdressing.org&gt;buy lorazepam online&lt;/a&gt; &lt;a
    href=http://dbsearchexpert.com&gt;Online Casinos Free&lt;/a&gt; &lt;a href=http://dbsearchexpert.com&gt;Free
    Casino&lt;/a&gt; <a class=\"reference\" href=\"/web/20100712030912/http://dbsearchexpert.com/\">http://dbsearchexpert.com</a>
    - Free Casino <a class=\"reference\" href=\"/web/20100712030912/http://thefoundationhouse.org/\">http://thefoundationhouse.org</a>
    - Discount Celebrex Online &lt;a href=http://thefoundationhouse.org&gt;Cheap Celebrex&lt;/a&gt;
    &lt;a href=http://thefoundationhouse.org&gt;Buying Celebrex Online&lt;/a&gt; <a
    class=\"reference\" href=\"/web/20100712030912/http://billselleck.net/\">http://billselleck.net</a>
    - buy citalopram &lt;a href=http://billselleck.net&gt;purchase celexa&lt;/a&gt;
    &lt;a href=http://billselleck.net&gt;buy celexa&lt;/a&gt; &lt;a href=http://crowbottomblues.com&gt;discount
    cialis&lt;/a&gt; &lt;a href=http://valleygardens.net&gt;buy cialis online&lt;/a&gt;
    <a class=\"reference\" href=\"/web/20100712030912/http://brewersjam.com/\">http://brewersjam.com</a>
    - discount cialis <a class=\"reference\" href=\"/web/20100712030912/http://bloopddl.com/\">http://bloopddl.com</a>
    - cipro without prescription &lt;a href=http://bloopddl.com&gt;cipro medication&lt;/a&gt;
    &lt;a href=http://poweryourpocket.com&gt;cheap cipro&lt;/a&gt; &lt;a href=http://kengajone.com&gt;purchase
    clomid&lt;/a&gt; &lt;a href=http://grandavenuemcalester.org&gt;clomid fertility
    drug&lt;/a&gt; <a class=\"reference\" href=\"/web/20100712030912/http://grandavenuemcalester.org/\">http://grandavenuemcalester.org</a>
    - buy clomiphene <a class=\"reference\" href=\"/web/20100712030912/http://southernutahbaseballacademy.com/\">http://southernutahbaseballacademy.com</a>
    \  cymbalta - cymbalta pill &lt;a href=http://southernutahbaseballacademy.com&gt;cymbalta
    pharmacy&lt;/a&gt; &lt;a href=http://southernutahbaseballacademy.com   cymbalta&gt;cymbalta
    duloxetine&lt;/a&gt; &lt;a href=http://cultureloungeonline.com&gt;order doxycycline&lt;/a&gt;
    &lt;a href=http://cultureloungeonline.com&gt;doxycycline price&lt;/a&gt; <a class=\"reference\"
    href=\"/web/20100712030912/http://denisecoatesblog.com/\">http://denisecoatesblog.com</a>
    - doxycycline online <a class=\"reference\" href=\"/web/20100712030912/http://black-harvest.com/\">http://black-harvest.com</a>
    - order viagra online &lt;a href=http://black-harvest.com&gt;cialis online pharmacy&lt;/a&gt;
    &lt;a href=http://black-harvest.com&gt;tadalafil online&lt;/a&gt; &lt;a href=http://blackchambers-online.com&gt;buy
    venlafaxine online&lt;/a&gt; &lt;a href=http://blackchambers-online.com&gt;generic
    venlafaxine&lt;/a&gt; <a class=\"reference\" href=\"/web/20100712030912/http://blackchambers-online.com/\">http://blackchambers-online.com</a>
    - venlafaxine <a class=\"reference\" href=\"/web/20100712030912/http://wardsoutdoorsports.com/\">http://wardsoutdoorsports.com</a>
    - klonopin pharmacy &lt;a href=http://alexdavishomes.com&gt;klonopin clonazepam&lt;/a&gt;
    &lt;a href=http://wardsoutdoorsports.com&gt;klonopin mg&lt;/a&gt; &lt;a href=http://linleemaltese.com&gt;generic
    levitra online&lt;/a&gt; &lt;a href=http://sbvisioncenter.com&gt;cheap levitra
    online&lt;/a&gt; <a class=\"reference\" href=\"/web/20100712030912/http://mainstreetcapital.org/\">http://mainstreetcapital.org</a>
    - levitra cost <a class=\"reference\" href=\"/web/20100712030912/http://uey-sj.org/\">http://uey-sj.org</a>
    - purchase lexapro &lt;a href=http://nailsnow.net&gt;lexapro escitalopram&lt;/a&gt;
    &lt;a href=http://vfkhistory.com&gt;purchase lexapro&lt;/a&gt; &lt;a href=http://boulderwinefest.com&gt;Generic
    Lipitor&lt;/a&gt; &lt;a href=http://boulderwinefest.com&gt;Lipitor Drugs&lt;/a&gt;</p>\n\n\t"
  :code: ''
  :tags:
  - Medicine
  - Prn
  - Serve
  - Why
  :references:
    :url: /web/20100712030912/http://cdennisart.com/
    :title: 'Why Sell Illegal Drugs Psychology '
- :id: '10311'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/10311
  :user_name: 匿名
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2010/02/28 22:37 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>What words... super   &lt;a href= <a class=\"reference\" href=\"/web/20100712030912/http://jhngxlxdh.sitotop.com/watermellon-ciallis.html\">http://jhngxlxdh.sitotop.com/watermellon-ciallis.html</a>
    &gt;watermellon ciallis  buy online&lt;/a&gt;  Good joke :)   What weighs 909
    kg (2,000 pounds for all of you inefficient, non-metric \"people\") and is bare
    to the bone? A skeleTON!!!</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100712030912/http://jhngxlxdh.sitotop.com/
    :title: gwenn zag
- :id: '10495'
  :parent_id: '285'
  :url: http://ja.doukaku.org/comment/10495
  :user_name: 匿名
  :user_url: /web/20100712030912/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2010/05/06 18:55 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>Medication Administration Carts\n&lt;a href=http://www.hotfm105.com&gt;purchase
    ambien&lt;/a&gt;</p>\n<div class=\"system-message\">\n<p class=\"system-message-title\">System
    Message: ERROR/3 (<tt class=\"docutils\">&lt;string&gt;</tt>, line 3)</p>\nUnexpected
    indentation.</div>\n<blockquote>\nClinical trials on the drug have been conducted
    with almost 3,600 patients evaluated.</blockquote>\n<div class=\"system-message\">\n<p
    class=\"system-message-title\">System Message: WARNING/2 (<tt class=\"docutils\">&lt;string&gt;</tt>,
    line 4)</p>\nBlock quote ends without a blank line; unexpected unindent.</div>\n<dl
    class=\"docutils\">\n<dt>\n<a class=\"reference\" href=\"/web/20100712030912/http://www.hotfm105.com/\">http://www.hotfm105.com</a>
    - ambien price</dt>\n<dd>Clinical trials on the drug have been conducted with
    almost 3,600 patients evaluated.</dd>\n<dt>&lt;a href=http://www.hotfm105.com&gt;zolpidem
    without prescription&lt;/a&gt;</dt>\n<dd>If ever problems do occur, these are
    normally minor and require no treatment or can easily be treated by your doctor.</dd>\n</dl>"
  :code: ''
  :tags:
  - Administration
  - Certification
  - Medication
  :references:
    :url: /web/20100712030912/http://www.aefforce.com/
    :title: 'Medication Administration Certificate '
