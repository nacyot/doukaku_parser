---
:id: '90'
:title: 正しい文(クイズ)
:comments:
- :id: '4100'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4100
  :user_name: herumi
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/564/
  :language: 
  :time: 2007/11/16 07:13 GMT
  :vote_count: '14'
  :vote_score: '4'
  :body: "\r\n\t  <pre class=\"compact\">「この文は0が□個，1が□個，...，9が□個あります」\r\nが正しくなるように□を埋めてください．数値は10進数とします．\r\n一般のn(&lt;=16で可)進数でも解いてみてください．\r\n\r\nたとえば2進数なら\r\n「この文は0が11個，1が100個あります」\r\nとなります．\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4357'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4357
  :user_name: ocean
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/11/23 05:43 GMT
  :vote_count: '3'
  :vote_score: '-3'
  :body: "\n\t  <p>こんなんでも、一応題意は満たすかな・・・\n（それとも、2を使うなら0,1も使わないとだめ？）</p>\n\n\t"
  :code: |
    # coding: cp932

    def solve(n):
        assert n &gt;= 2
        if n == 2:
            print u"この文は0が11個，1が100個あります"
        else:
            print u"この文は2が2個あります"

    def main():
        solve(2)
        solve(10)

    if __name__ == '__main__':
        main()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4359'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4359
  :user_name: herumi
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/564/
  :language: 
  :time: 2007/11/23 05:51 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">うーん，\r\n10進数のときは\r\n「この文は\r\n  0が□個，\r\n  1が□個，\r\n
    \ 2が□個，\r\n  3が□個，\r\n  4が□個，\r\n  5が□個，\r\n  6が□個，\r\n  7が□個，\r\n  8が□個，\r\n
    \ 9が□個あります」\r\nの省略形のつもりだったのですが，そうとれちゃいますかね．\r\nもちろんn進数の場合は0からn-1までの数値は少なくとも一つ文中に登場します．\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4360'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4360
  :user_name: rucker
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/11/23 06:47 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">とりあえず乱暴な方法だけど2進から16進まで一つずつ答えを得た。\r\n\r\nこの文は0が11個,1が100個あります。\r\nこの文は0が1個,1が11個,2が2個あります。\r\nこの文は0が1個,1が11個,2が2個,3が1個あります。\r\n...\r\nこの文は0が1個,1が11個,2が2個,3が1個,4が1個,5が1個,6が1個,7が1個,8が1個,9が1個あります。\r\n...\r\nこの文は0が1個,1が11個,2が2個,3が1個,4が1個,5が1個,6が1個,7が1個,8が1個,9が1個,aが1個,bが1個,cが1個,dが1個,eが1個,fが1個あります。\r\n\r\n</pre>\n\t"
  :code: |
    &lt;?php
    for($n=2;$n&lt;=16;++$n)
    {    $str="";
        do{
            $a=count_chars($str);
            $b=array();
            for($i=0;$i&lt;$n;++$i)
            {    $c=base_convert($i,10,$n);
                $b[]="${c}が".base_convert($a[ord($c)],10,$n)."個";
            }
            $str0=$str;
            $str=implode(",",$b);
        }while($str!=$str0);
        echo "この文は${str}あります。\n";
    }
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4361'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4361
  :user_name: yuin
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/11/23 07:58 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>これでいいような気が。</p>\n\n\t"
  :code: "def solve(n:int) = n match {\n  case 2 =&gt; \"0=11, 1=100\"\n  case n =&gt;
    \"0=1, 1=11, 2=2, \" + (List[String]() /: (3 until n)) {(s,i) =&gt; \n              Integer.toString(i,n)+\"=1\"::s\n
    \           }.reverse.mkString(\", \")\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4362'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4362
  :user_name: yuin
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/82/
  :language: 
  :time: 2007/11/23 08:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>すみません、日本語がこけるので文章を変えました。</p>\n<p>n=10の時で</p>\n<p>0=1, 1=11, 2=2,
    3=1, 4=1, 5=1, 6=1, 7=1, 8=1, 9=1</p>\n<p>という感じで出力します。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4364'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4364
  :user_name: ocean
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/11/23 08:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>うう、すみません、題意を違えてました。あらためて、yuinさんの方法を拝借・・・</p>\n\n\t"
  :code: |
    # coding: cp932

    def solve(n):
        assert 2 &lt;= n &lt;= 16
        if n == 2:
            a = ["11", "100"]
        else:
            a = ["1"] * n; a[1] = "11"; a[2] = "2"
        print u"この文は%sあります" % \
            u"，".join(u"%sが%s個" % (hex(i)[-1], m) for (i, m) in enumerate(a))

    def main():
        solve(2)
        solve(10)
        solve(16)

    if __name__ == '__main__':
        main()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4366'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4366
  :user_name: herumi
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/564/
  :language: 
  :time: 2007/11/23 09:12 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">&gt;一つずつ答えを得た。\r\n別解もあるので探してみてください．\r\n可能なら，全て列挙してみてください．\r\n#「解いて下さい」というとそういうものだと思ってたけど，違うんですね．\r\n#
    あいまいな書き方で申し訳ない．\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4367'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4367
  :user_name: shiro
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/41/
  :language: Haskell
  :time: 2007/11/23 09:59 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  ナイーブな総当たりを書いてみましたが、n進数のnが増えると計算量が爆発しますね。あと、解は常に有限個だと思うんですが (ある点以上になると数字の数を増やすには数値の「桁を増やす」しかなくなるが、一桁増やしても数字そのものは1つしか増えないのに、その数値分の数字を確保するにはさらにおよそn個の数字が増えなければならない)、具体的な上限を求めるまでには至りませんでした。コードは無限に順列を生成してチェックしつづけるので実行時に適当にinterruptしてます。どうも3進以上は「1が11個」の解がmaxっぽい?\r<br><br>2進\r<br>この文は0が11個, 1が100個あります。\r<br><br>3進\r<br>この文は0が10個, 1が10個, 2が2個あります。\r<br>この文は0が2個, 1が2個, 2が10個あります。\r<br>この文は0が1個, 1が11個, 2が2個あります。\r<br><br>4進\r<br>この文は0が1個, 1が2個, 2が3個, 3が2個あります。\r<br>この文は0が1個, 1が3個, 2が1個, 3が3個あります。\r<br>この文は0が1個, 1が11個, 2が2個, 3が1個あります。\r<br><br>5進\r<br>この文は0が1個, 1が3個, 2が2個, 3が3個, 4が1個あります。\r<br>この文は0が1個, 1が11個, 2が2個, 3が1個, 4が1個あります。\r<br><br>6進\r<br>この文は0が1個, 1が11個, 2が2個, 3が1個, 4が1個, 5が1個あります。\r<br><br>7進\r<br>この文は0が1個, 1が4個, 2が3個, 3が2個, 4が2個, 5が1個, 6が1個あります。\r<br>この文は0が1個, 1が11個, 2が2個, 3が1個, 4が1個, 5が1個, 6が1個あります。\r<br><br>8進\r<br>この文は0が1個, 1が5個, 2が3個, 3が2個, 4が1個, 5が2個, 6が1個, 7が1個あります。\r<br>この文は0が1個, 1が11個, 2が2個, 3が1個, 4が1個, 5が1個, 6が1個, 7が1個あります。\r<br>"
  :code: "module Main where\nimport Numeric\nimport Char\nimport System\nimport qualified
    System.IO.UTF8 as U\n\ncount pred [] = 0\ncount pred (x:xs) = (if pred x then
    1 else 0) + count pred xs\n\ncountDigs radix k = let s = map digitToInt $ showIntAtBase
    radix intToDigit k $ \"\"\n                    in map (\\i -&gt; count (==i) s)
    [0..(radix-1)]\ncountDigs' radix ks = foldl (\\rs cs -&gt; map (uncurry (+)) $
    zip rs cs)\n                            (replicate radix 0)\n                            $
    map (countDigs radix) ks\n\ncombListsM 1 lim     = [[lim]]\ncombListsM n lim =
    [x:xs | x &lt;- [1..(lim-1)], xs &lt;- combListsM (n-1) lim]\n                   ++
    [lim:xs | xs &lt;- combListsS (n-1) lim]\n                   ++ [lim:xs | xs &lt;-
    combListsM (n-1) lim]\ncombListsS 1 lim     = [[x] | x &lt;- [1..(lim-1)]]\ncombListsS
    n lim = [x:xs | x &lt;- [1..(lim-1)], xs &lt;- combListsS (n-1) lim]\n\ncombLists'
    n lim = combListsM n lim ++ combLists' n (lim+1)\n\ncombLists'' n = combLists'
    n 1\n\ncheck radix (xs:xss) = let xs' = reverse xs\n                           cs
    = map (+1) $ countDigs' radix xs'\n                       in if and $ map (uncurry
    (==)) $ zip xs' cs\n                          then xs':(check radix xss)\n                          else
    check radix xss\n\nsolve radix = check radix $ combLists'' radix \n\nshowResult
    radix xs = (foldl ct \"この文は\" [0..(radix-1)]) ++ \"あります。\"\n  where ct cs i =
    cs ++ (if i == 0 then \"\" else \", \")\n                     ++ show i ++ \"が\"\n
    \                    ++ showIntAtBase radix intToDigit (xs!!i) \"個\"\n\nmain =
    do args &lt;- getArgs\n          case args of\n            [radix] -&gt; case
    readDec radix of\n                         (r,_):_  -&gt; U.putStr\n                                            $
    unlines\n                                            $ map (showResult r)\n                                            $
    solve r\n            _       -&gt; putStrLn \"Usage: solve &lt;radix&gt;\"\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4369'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4369
  :user_name: rucker
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/130/
  :language: 
  :time: 2007/11/23 10:08 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">あ、いえいえ。\r\n多分そうなんだろうと思ったのですが、\r\nとりあえず漸近的な方法でも答えにたどり着く\r\n(しかも総当たりよりかなり速い)ってことで\r\n投稿してみました。\r\n\r\n全探索バージョンは探索範囲の絞りこみ中…。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4371'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4371
  :user_name: kozima
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/11/23 11:52 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">いい方法が思いつかなかったため多重ループ生成 &amp; eval してしまいました。\r\n\r\n入る数字は
    n=2 なら 8 未満、n&gt;2 なら n^2 未満と評価できました。\r\nというわけで理論上は停止性を保障できています。\r\n\r\n;; format
    の部分はもっときれいにやる方法がないものでしょうか……</pre>\n\t"
  :code: |
    (defun bound (n) (if (= n 2) 8 (* n n)))

    (defun solution-p (n &amp;rest nums)
      (let ((s (format nil (format nil "~~{~~~DR~~}" n) nums)))
        (loop for i from 0 below n and a in nums
          unless (= (1- a) (count (digit-char i n) s)) return nil
          finally (return t))))

    (defun gen-solver (n i bound chars vars)
      (if (= i n)
          `(if (solution-p ,n ,@vars)
               (format t "この文は~@?あります~%"
                       (format nil "~~@{~~Cが~~~DR個~~^，~~}" ,n)
                       ,@(apply #'nconc (mapcar #'list chars vars))))
        `(loop for ,(nth i vars) from 0 below ,bound do
           ,(gen-solver n (1+ i) bound chars vars))))

    (defun solve (n)
      (let ((code (gen-solver n 0 (bound n)
                              (loop for i from 0 below n collect (digit-char i n))
                              (loop repeat n collect (gensym)))))
        ;; (eval code)
        (funcall (compile nil (eval `(lambda () ,code))))
        ))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4373'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4373
  :user_name: kozima
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/11/23 12:18 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>n&gt;2 のときは n+2 未満しか入らないかな？\nあと、文に表れる数字の個数を使って枝刈りできますね。\nこれで n=8
    のときが1分で終わりました。\nn&lt;=8 での出力結果はすべて shiro さんの #4367 と同じです。</p>\n\n\t"
  :code: |
    (defun bound (n) (if (= n 2) 8 (+ n 2)))

    (defun check (n &amp;rest nums)
      (&lt;= (reduce (lambda (s x) (+ s (- x (floor (log x n)) 1))) nums
                  :initial-value 0)
          n))

    (defun solution-p (n &amp;rest nums)
      (let ((s (format nil (format nil "~~{~~~DR~~}" n) nums)))
        (loop for i from 0 below n and a in nums
          unless (= (1- a) (count (digit-char i n) s)) return nil
          finally (return t))))

    (defun gen-solver (n i bound chars vars)
      (if (= i n)
          `(if (solution-p ,n ,@vars)
               (format t "この文は~@?あります~%"
                       (format nil "~~@{~~Cが~~~DR個~~^，~~}" ,n)
                       ,@(apply #'nconc (mapcar #'list chars vars))))
        `(loop for ,(nth i vars) from 1 below ,bound
           ,@(if (&gt; n (1+ i)) `(while (check ,n ,@(subseq vars 0 i))) ()) do
           ,(gen-solver n (1+ i) bound chars vars))))

    (defun solve (n)
      (let ((code (gen-solver n 0 (bound n)
                              (loop for i from 0 below n collect (digit-char i n))
                              (loop repeat n collect (gensym)))))
        ;; (eval code)
        (funcall (compile nil (eval `(lambda () ,code))))
        ))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4374'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4374
  :user_name: kozima
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2007/11/23 12:59 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">「かな？」とか言ってますが、一応計算して出した評価なので\r\nどうやって出てきたか書いておきます。\r\n\r\n正しい文に現れる数字の個数は次の二通りに表せます。\r\n1.
    Σ\"k が現れる回数\"\r\n2. n + Σ(\"k が現れる回数\" の n 進での桁数)\r\nそこで k が現れる回数を a[k], その桁数を
    f[k] とすると\r\n(*) Σ(a[k]-f[k]) = n\r\n\r\nこれと a[k] &gt;= f[k] から各 k について a[k] -
    f[k] &lt;= n\r\n左辺は単調増加なことから適当に計算して\r\n n=2 なら a[k] &lt;= 5\r\n n&gt;2 なら a[k]
    &lt;= n + 2\r\nが出ます。\r\n\r\nあと n&gt;2 で n+2 が入らないことの確認も。\r\na[k] = n+2 = 12(n)
    だと a[k]-f[k] = n なので (*) から\r\ni!=k のとき a[i]=f[i] が必要で、これを満たすのは a[i]=1 だけ。\r\nつまりひとつの数字を除いて一回しか現れないということですが、\r\n12
    が出てくる以上これは不可能です。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4376'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4376
  :user_name: rucker
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/11/23 16:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">全探索バージョン。\r\n直前のお題\"自然数の分割\"のプログラムを応用して\r\n「数字の数は2n～2n+2
    (2進は例外)」という条件で探索範囲を限定。\r\n2進から16進まで探索してCore2Duo 1.2GHzで 29秒\r\n\r\n2進:\r\nこの文は0が11個,1が100個あります。\r\n3進:\r\nこの文は0が10個,1が10個,2が2個あります。\r\nこの文は0が1個,1が11個,2が2個あります。\r\nこの文は0が2個,1が2個,2が10個あります。\r\n...\r\n10進:\r\nこの文は0が1個,1が11個,2が2個,3が1個,4が1個,5が1個,6が1個,7が1個,8が1個,9が1個あります。\r\nこの文は0が1個,1が7個,2が3個,3が2個,4が1個,5が1個,6が1個,7が2個,8が1個,9が1個あります。\r\n...\r\n16進:\r\nこの文は0が1個,1が11個,2が2個,3が1個,4が1個,5が1個,6が1個,7が1個,8が1個,9が1個,aが1個,bが1個,cが1個,dが1個,eが1個,fが1個あります。\r\nこの文は0が1個,1がd個,2が3個,3が2個,4が1個,5が1個,6が1個,7が1個,8が1個,9が1個,aが1個,bが1個,cが1個,dが2個,eが1個,fが1個あります。\r\n28.799607992172sec\r\n</pre>\n\t"
  :code: |
    &lt;?php
    function cmp(&amp;$a1,&amp;$a2)
    {
        foreach($a2 as $k=&gt;$v)
            if($a1[ord(base_convert($k,10,36))]!=$v)
                return false;
        return true;
    }
    function judge($a,$n)
    {
        $b=array();
        for($i=0;$i&lt;$n;++$i)
        {    $c=base_convert($i,10,$n);
            $b[]="${c}が".base_convert($a[$i],10,$n)."個";
        }
        $str=implode(",",$b);
        $a1=count_chars($str);
        if(cmp($a1,$a))
            echo "この文は${str}あります。\n";
    }

    function part($a,$n,$c,$s1,$s2,$m)
    {
        if(!$c)
        {    $m1=min($m-$s1,$s2+1);
            for($i=$n*2-$s1;$i&lt;=$m1;++$i)
            {    $a[$c]=$i;
                judge($a,$n);
            }
        }
        else
        {    $m1=min($m-$s1,$s2/$c+1);
            for($i=1;$i&lt;=$m1;++$i)
            {    $a[$c]=$i;
                part($a,$n,$c-1,$s1+$i,$s2-$c*($i-1),$m);
            }
        }
    }

    $t=microtime(true);

    for($n=2;$n&lt;=16;++$n)
    {    echo "${n}進:\n";
        $m=max($n*2+2,10);
        part(array(),$n,$n-1,0,$m,$m);
    }

    echo microtime(true)-$t,"sec\n";
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4378'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4378
  :user_name: rucker
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/11/23 18:40 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">数字の出現回数の合計と(数字x(出現回数-1))の積分の関係で縛りを追加したら\r\n#4376と同条件で4.1秒ほどになりました。\r\n\r\nリストは変更していないcmp()とjudge()省略。</pre>\n\t"
  :code: |
    &lt;?php
    function part($a,$n,$c,$s1,$s2,$m)
    {
        if(!$c)
        {    for($i=$s2-$s1;$i&lt;=min($m-$s1,$m-$s2+1);$i+=$n-1)
                if($i&gt;=$n*2-$s1)
                {    $a[$c]=$i;
                    judge($a,$n);
                }
        }
        else
        {    $m1=min($m-$s1,($m-$s2)/$c+1);
            for($i=1;$i&lt;=$m1;++$i)
            {    $a[$c]=$i;
                part($a,$n,$c-1,$s1+$i,$s2+$c*($i-1),$m);
            }
        }
    }

    $t=microtime(true);

    for($n=2;$n&lt;=16;++$n)
    {    echo "${n}進:\n";
        $m=max($n*2+2,10);
        part(array(),$n,$n-1,0,0,$m);
    }

    echo microtime(true)-$t,"sec\n";
    ?&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4381'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4381
  :user_name: jijixi
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/582/
  :language: OCaml
  :time: 2007/11/23 21:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  #4373 を参考にリミットを設定して、全てのパターンを並行処理するようにしたものです。\r<br>ただし、うちの環境 (Mac OS X 10.5 PPC64) ではリソースの問題で radix が 5 までしか計算できませんでした。\r<br><br>% time ./quiz 5\r<br>この文は0が1個, 1が3個, 2が2個, 3が3個, 4が1個あります。\r<br>./quiz 5  1.66s user 2.02s system 86% cpu 4.269 total\r<br><br>おそらくパターン数が爆発的に増える関係で、全てのシステムスレッドがブロックしてしまい、先に進まなくなるんじゃないかと思います。\r<br>この方式は Erlang じゃないと無理かもしれないです。\n\t"
  :code: |
    let limit radix =
       match radix with
       | 2 -&gt; 8
       | n -&gt; n + 2

    let char_table =
       Array.map begin fun i -&gt;
          Printf.sprintf "%x" i
       end (Array.init 16 (fun i -&gt; i))

    let lstring_of_radix_num radix num =
       let rec loop n acc =
          if n &lt; radix then
             char_table.(n) :: acc
          else
             let rem = n mod radix in
             loop ((n - rem) / radix) (char_table.(rem) :: acc)
       in
       loop num []

    let string_of_lstring str =
       List.fold_left begin fun acc ch -&gt;
          acc ^ ch
       end "" str

    let string_of_radix_num radix num =
       string_of_lstring (lstring_of_radix_num radix num)

    let slist_of_alist radix alist =
       List.map begin fun i -&gt;
          lstring_of_radix_num radix i
       end (List.flatten alist)

    let count_digits radix str_list num =
       match lstring_of_radix_num radix num with
       | [ch] -&gt;
            List.fold_left begin fun sum ch' -&gt;
               sum + (if ch = ch' then 1 else 0)
            end 0 (List.flatten str_list)
       | _ -&gt; failwith "unknown"

    let validate radix alist =
       let str = List.flatten (slist_of_alist radix alist) in
       List.for_all begin fun pair -&gt;
          match pair with
          | [i; num] -&gt; begin
               match lstring_of_radix_num radix i with
               | [ch] -&gt;
                    num =
                       List.fold_left begin fun sum ch' -&gt;
                          sum + (if ch = ch' then 1 else 0)
                       end 0 str
               | _ -&gt; failwith "unknown"
            end
          | _ -&gt; failwith "unknown"
       end alist

    let search radix =
       let lim = limit radix in
       def search'(num, start, acc) =
          def result(alist) &amp; wait() = reply alist to wait in
          def search''(n) =
             let acc' = [num; n] :: acc in
             match num - 1 with
             | next when next &lt; 0 -&gt;
                  if validate radix acc'
                  then result(acc')
                  else 0
             | next -&gt;
                  let start' =
                     (count_digits radix (slist_of_alist radix acc') next) + 1
                  in
                  if start &gt; lim then failwith "unknown";
                  result(search'(next, start', acc'))
          in
          for i = start to lim do
             spawn search''(i)
          done;
          reply wait() to search'
       in
       search'(radix - 1, 1, [])

    let print_result radix alist =
       let str =
          List.fold_left begin fun acc pair -&gt;
             match List.map (string_of_radix_num radix) pair with
             | [i; n] -&gt;
                  acc ^ i ^ "が" ^ n ^ "個" ^ ", "
             | _ -&gt; failwith "unknown"
          end "この文は" alist
       in
       let str' = (String.sub str 0 ((String.length str) - 2)) ^ "あります。" in
       print_endline str'

    let main () =
       match Sys.argv with
       | [|_; radix |] -&gt;
            let radix' = int_of_string radix in
            let result = search(radix') in
            print_result radix' result
       | _ -&gt; print_endline "usage: command radix"

    let () = if not !Sys.interactive then main ()
  :tags:
  - JoCaml
  :references:
    :url: 
    :title: 
- :id: '4382'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4382
  :user_name: shinh
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/587/
  :language: Ruby
  :time: 2007/11/23 23:02 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <p>それなりに速く終わるやつを。手元で1秒切ります。たぶん正しい気がするんですが自信は無いような。\nというかたぶんn=7以降は同じパターンで2種類しか解がない、と示せる気がします。</p>\n\n\t"
  :code: |
    def x(b,a,n,e,z)
      if b==n
        if a==e
          puts (0...b).map{|i|"#{i.to_s(b)}*#{a[i].to_s(b)}"}*','
        end
      else
        1.upto(b&lt;5?5:[n&gt;1?[4-n,0].max+e[n]:99,b+2-z+n].min){|i|a[n]=i
          f=e.dup
          i.to_s(b).scan(/./){f[$&amp;.to_i(b)]+=1}
          next if (0..n).any?{|j|f[j]&gt;a[j]}
          x(b,a,n+1,f,z+i)}
      end
    end
    2.upto(16){|b|p b
      x(b,[0]*b,0,[1]*b,0)}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4384'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4384
  :user_name: jijixi
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/582/
  :language: OCaml
  :time: 2007/11/24 02:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  #4381 を、ちゃんと動くように修正しました。\r<br>その分、おもしろみは減った気がしますが。\r<br>結局、この問題の場合、一つ一つの処理はあまり重くないので、プロセスをなるべく生成しない方が速いみたいですね。\r<br>jocamlopt でコンパイルしたもので、\r<br> \r<br>% time ./quiz 16\r<br>この文は0が1個, 1が11個, 2が2個, 3が1個, 4が1個, 5が1個, 6が1個, 7が1個, 8が1個, 9が1個, aが1個, bが1個, cが1個, dが1個, eが1個, fが1個あります。\r<br>^C\r<br>./quiz 16  1.48s user 0.04s system 63% cpu 2.369 total\r<br><br>こんな感じでした。\r<br><br>答を全て表示しようとするように変更したので、止まらなくなりました。\r<br>上記の実行例もキーボード割り込みで止めています。\r<br>一応、第二引数に何か入れると、前回と同じように一つ目を見付けた時点で終了します。\n\t"
  :code: |
    let limit radix =
       match radix with
       | 2 -&gt; 8
       | n -&gt; n + 2

    let char_table =
       Array.map begin fun i -&gt;
          Printf.sprintf "%x" i
       end (Array.init 16 (fun i -&gt; i))

    let lstring_of_radix_num radix num =
       let rec loop n acc =
          if n &lt; radix then
             char_table.(n) :: acc
          else
             let rem = n mod radix in
             loop ((n - rem) / radix) (char_table.(rem) :: acc)
       in
       loop num []

    let string_of_lstring str =
       List.fold_left begin fun acc ch -&gt;
          acc ^ ch
       end "" str

    let string_of_radix_num radix num =
       string_of_lstring (lstring_of_radix_num radix num)

    let slist_of_alist radix alist =
       List.map begin fun i -&gt;
          lstring_of_radix_num radix i
       end (List.flatten alist)

    let count_digits radix str_list num =
       match lstring_of_radix_num radix num with
       | [ch] -&gt;
            List.fold_left begin fun sum ch' -&gt;
               sum + (if ch = ch' then 1 else 0)
            end 0 (List.flatten str_list)
       | _ -&gt; failwith "unknown"

    let validate radix alist =
       let str = List.flatten (slist_of_alist radix alist) in
       List.for_all begin fun pair -&gt;
          match pair with
          | [i; num] -&gt; begin
               match lstring_of_radix_num radix i with
               | [ch] -&gt;
                    num =
                       List.fold_left begin fun sum ch' -&gt;
                          sum + (if ch = ch' then 1 else 0)
                       end 0 str
               | _ -&gt; failwith "unknown"
            end
          | _ -&gt; failwith "unknown"
       end alist

    def result_post(alist) &amp; result_get() = reply alist to result_get

    def search(radix) =
       let lim = limit radix in
       let rec search' label num acc =
          if label &lt; 0 then
             (if validate radix acc then spawn result_post(acc))
          else
             let acc' = [label; num] :: acc in
             for i = 1 to lim do
                search' (label - 1) i acc'
             done
       in
       for i = 1 to lim do
          search' (radix - 1) i []
       done;
       0

    let print_result radix alist =
       let str =
          List.fold_left begin fun acc pair -&gt;
             match List.map (string_of_radix_num radix) pair with
             | [i; n] -&gt;
                  acc ^ i ^ "が" ^ n ^ "個" ^ ", "
             | _ -&gt; failwith "unknown"
          end "この文は" alist
       in
       let str' = (String.sub str 0 ((String.length str) - 2)) ^ "あります。" in
       print_endline str'

    let main () =
       match Sys.argv with
       | [|_; radix |] -&gt;
            let radix' = int_of_string radix in
            spawn search(radix');
            let rec loop cache =
               let result = result_get() in
               if List.mem result cache then
                  loop cache
               else
                  begin
                     print_result radix' (result_get());
                     loop (result :: cache)
                  end
            in
            loop []
       | [|_; radix; _|] -&gt;
            let radix' = int_of_string radix in
            spawn search(radix');
            print_result radix' (result_get())
       | _ -&gt; print_endline "usage: command radix"

    let () = if not !Sys.interactive then main ()
  :tags:
  - JoCaml
  :references:
    :url: 
    :title: 
- :id: '4385'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4385
  :user_name: dankogai
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/11/24 05:27 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <p>まず問題ですが、</p>\n<p>&gt; が正しくなるように□を埋めてください．数値は10進数とします．</p>\n<p>はn進数の間違いですよね。</p>\n<p>以上を踏まえて、お代を忠実にコードしたらそのまま解けました。Regexpを使っているのがポイントかな。一秒といわず瞬殺です。</p>\n<p>出力フォーマットは、#4382(<a
    class=\"reference\" href=\"/web/20081202175104/http://ja.doukaku.org/comment/4382/\">http://ja.doukaku.org/comment/4382/</a>)のものを採用していますが、日本語化は`sentenceed()`と`solve()`の該当箇所を変えるだけでOK.</p>\n<p>Dan
    the Perl Monger</p>\n\n\t"
  :code: |
    #!/usr/local/bin/perl
    use strict;
    use warnings;

    my @digits = ( '0' .. '9', 'a' .. 'z' );

    sub n2s {
        use integer;
        my ( $n, $b ) = @_;
        my $s = $digits[ $n % $b ];
        $s = $digits[ $n % $b ] . $s while ( $n /= $b );
        $s;
    }

    sub sentenceed {
        my $b = shift;
        join( ",", map { "$_*1" } @digits[ 0 .. $b - 1 ] );
    }

    sub count {
        my ( $s, $d ) = @_;
        my $c = ( eval qq{\$s =~ y/$d/$d/} );
        $c;
    }

    sub solve {
        my $b    = shift;
        my $ans  = sentenceed($b);
        my $nans = '';
        while ( $ans ne $nans ) {
            $nans = $ans;
            $ans =~ s{([0-9a-z])\*[0-9a-z]+}{
                my $d = $1;
                my $c = n2s(count($ans, $d), $b);
                qq($d*$c)
            }egx;
        }
        $ans;
    }

    print "base($_):", solve($_), "\n" for ( 2 .. (shift||16) );
  :tags:
  - regexp
  :references:
    :url: 
    :title: 
- :id: '4386'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4386
  :user_name: sumim
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/24 05:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。適度にはしょった総当たりですが、にもかかわらず 9 より上は実用に耐えられず。\n\t"
  :code: "| nn results range digits digitChars max |\nnn := 8.\nrange := 1 to: nn.\ndigits
    := range asArray - 1.\ndigitChars := digits collect: [:each | each asString asCharacter].\nmax
    := (Number readFrom: '11' base: nn) + (nn = 2 ifTrue: [1] ifFalse: [0]).\nresults
    := OrderedCollection new.\n(0 to: 3) asDigitsToPower: nn - 1 do: [:ary |\n    (0
    to: max) do: [:mm |\n        | bag array |\n        bag := Bag withAll: digitChars.\n
    \       array := {ary first. mm}, ary allButFirst.\n        array do: [:each |
    bag addAll: (each radix: nn)].\n        (range allSatisfy: [:idx | \n                (bag
    occurrencesOf: (digitChars at: idx)) = (array at: idx)])\n            ifTrue:
    [results add: array copy]]].\n＾results\n"
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4387'
  :parent_id: '90'
  :url: http://ja.doukaku.org/comment/4387
  :user_name: sumim
  :user_url: /web/20081202175104/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/24 05:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  shinh さんの #4382 の爆速っぷりにいたく感動したので Squeak Smalltalk の直訳風に。\n\t"
  :code: |-
    | x |
    x := [:b :a :n :e :z |
        b = n ifTrue: [
            a = e ifTrue: [
                Transcript cr.
                (0 to: b - 1)
                    do: [:i | Transcript show: (i radix: b), '*', ((a at: i + 1) radix: b)]
                    separatedBy: [Transcript show: ', ']]
        ] ifFalse: [
            (1 to: (b &lt; 5 ifTrue: [5] ifFalse: [
                n &gt; 1 ifTrue: [(4 - n max: 0) + (e at: n + 1)] ifFalse: [99 min: b + 2 - z + n]]))
            do: [:i |
                | f |
                a at: n + 1 put: i.
                f := e copy.
                (i radix: b) do: [:char |
                    f at: (Number readFrom: char asString base: b) + 1 incre




    <!--
         FILE ARCHIVED ON 17:51:04 Dec 2, 2008 AND RETRIEVED FROM THE
         INTERNET ARCHIVE ON 13:32:51 Nov 16, 2013.
         JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

         ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
         SECTION 108(a)(3)).
    -->
  :tags: []
  :references:
    :url: 
    :title: 
