---
:id: '85'
:title: オブジェクトの種類を調べる
:comments:
- :id: '4049'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4049
  :user_name: にしお
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/11/15 07:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">「オブジェクトの種類を調べる」っぽいコード</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4050'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4050
  :user_name: にしお
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/1/
  :language: JavaScript
  :time: 2007/11/15 07:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">JavaScriptではtypeofが使える。</pre>\n\t"
  :code: |
    &gt;&gt;&gt; typeof(1)
    "number"
    &gt;&gt;&gt; typeof(1.1)
    "number"
    &gt;&gt;&gt; typeof("abc")
    "string"
    &gt;&gt;&gt; typeof([])
    "object"
    &gt;&gt;&gt; typeof([1,2,3])
    "object"
    &gt;&gt;&gt; typeof({})
    "object"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4051'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4051
  :user_name: にしお
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/11/15 08:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Pythonではtype(o)</pre>\n\t"
  :code: |
    &gt;&gt;&gt; type(1)
    &lt;type 'int'&gt;
    &gt;&gt;&gt; type(1.1)
    &lt;type 'float'&gt;
    &gt;&gt;&gt; type("abc")
    &lt;type 'str'&gt;
    &gt;&gt;&gt; type([1,2,3])
    &lt;type 'list'&gt;
    &gt;&gt;&gt; type({})
    &lt;type 'dict'&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4052'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4052
  :user_name: にしお
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/11/15 08:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Pythonには「type」というクラスより上位の「メタクラス」の概念がある(という表現で正しいのだろうか)</p>\n\n\t"
  :code: |
    &gt;&gt;&gt; class MyClass(object):
        pass

    &gt;&gt;&gt; type(MyClass)
    &lt;type 'type'&gt;
    &gt;&gt;&gt; ins = MyClass()
    &gt;&gt;&gt; type(ins)
    &lt;class '__main__.MyClass'&gt;
    &gt;&gt;&gt; type(type)
    &lt;type 'type'&gt;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4053'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4053
  :user_name: nantan
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/535/
  :language: Java
  :time: 2007/11/15 08:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「調べる」だとinstanceof演算子ぽいですが、とりあえずクラスの標準名を返すようにしてみました。</pre>\n\t"
  :code: |
    public class TypeOf {
        public static void main(String[] args) {
            Integer i = new Integer(1);
            System.out.println(getType(i));        // =&gt; java.lang.Integer
            String s = new String("test");
            System.out.println(getType(s));        // =&gt; java.lang.String
            Object o = new Object();
            System.out.println(getType(o));        // =&gt; java.lang.Object
            Boolean[] f = new Boolean[3];
            System.out.println(getType(f));        // =&gt; java.lang.Boolean[]
        }
        public static String getType(Object obj) {
            if (obj == null) return "null";
            return obj.getClass().getCanonicalName();
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4054'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4054
  :user_name: shiro
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/11/15 09:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Scheme言語自体には、「タイプ」は操作的にしか定義されていません。あるタイプかどうかを調べる述語を適用して真となるか偽となるか、で判断します。例えば(pair?
    obj) =&gt; #tならobjはペア、(string? obj)=&gt;#tならobjは文字列、といった具合です。\n</p>\n<p>GaucheではCLOS系のオブジェクトシステムが言語に統合されているので、class-ofでオブジェクトの型=クラスを得ることができます。\n</p>\n<p>また、クラス自身もオブジェクトであり、そのクラス=メタクラスも同様にclass-ofで得ることができます。\n</p>\n\n\n\n\t"
  :code: |
    gosh&gt; (class-of 1)
    #&lt;class &lt;integer&gt;&gt;
    gosh&gt; (class-of 1.0)
    #&lt;class &lt;real&gt;&gt;
    gosh&gt; (class-of "abc")
    #&lt;class &lt;string&gt;&gt;
    gosh&gt; (class-of '#(1 2 3))
    #&lt;class &lt;vector&gt;&gt;
    gosh&gt; (class-of (lambda (x) x))
    #&lt;class &lt;procedure&gt;&gt;

    gosh&gt; &lt;string&gt;
    #&lt;class &lt;string&gt;&gt;
    gosh&gt; (class-of &lt;string&gt;)
    #&lt;class &lt;string-meta&gt;&gt;
    gosh&gt; (class-of &lt;string-meta&gt;)
    #&lt;class &lt;class&gt;&gt;
    gosh&gt; (class-of &lt;class&gt;)
    #&lt;class &lt;class&gt;&gt;
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '4056'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4056
  :user_name: SiroKuro
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/11/15 09:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ほとんど Java と同じだったりします。GetType メソッドでオブジェクトから
    Type を取得。\r\nちなみに、typeof 演算子は型名から Type オブジェクトを取得する際に使えます。typeof(int) みたいに。</pre>\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            Console.WriteLine(123.GetType());           // System.Int32
            Console.WriteLine("abc".GetType());         // System.String
            Console.WriteLine(new Object().GetType());  // System.Object
            Console.WriteLine(new Object[0].GetType()); // System.Object[]
            Console.WriteLine(123.GetType().GetType()); // System.RuntimeType
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4069'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4069
  :user_name: nantan
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/535/
  :language: Ruby
  :time: 2007/11/15 14:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Rubyで書きました。</p>\n\n\t"
  :code: |
    def getType(clazz)
      clazz.class.name
    end
    p getType(1)       # =&gt; "Fixnum"
    p getType("abc")   # =&gt; "String"
    p getType([])      # =&gt; "Array"
    p getType({})      # =&gt; "Hash"
    p getType((0..9))  # =&gt; "Range"
    p getType(true)    # =&gt; "TrueClass"
    p getType(false)   # =&gt; "FalseClass"
    p getType(nil)     # =&gt; "NilClass"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4070'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4070
  :user_name: sumim
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/11/15 14:16 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  Smalltalk ではオブジェクトに class というメッセージを送ると、そのオブジェクトが属するクラス（つまりオブジェクトの“種類”）を返してきます。\r<br><br>クラスもそれ自体オブジェクトなので、それぞれ属するクラス（メタクラス）があり、やはり同じ class メッセージに応答できます。なお、通常のクラスと違い、メタクラスは原則として無名なので、それに属するクラスの名を借りて「クラス名 class」と呼称されます。これはメタクラスそれ自身を返す式としても扱えます。\r<br><br>余談ですが、メタクラスもまたオブジェクトなので class メッセージに応答できます。ちなみに、メタクラスは皆、Metaclass というクラスのインスタンスです。Metaclass のクラスである Mataclass class もその例外ではないので、つまり Metaclass class は Metaclass のクラスであり同時にインスタンスでもあるという（静的言語では考えにくい）不思議なことが起こります。\r<br><br><br>他に変わったところとして、多くの Smalltalk 処理系（と同時に“環境”）ではメソッドもコンテキストもプロセス（＝スレッド）も、パーサーやコンパイラも、画面表示領域やウィジェットやエディタ、パラグラフまでも、すべてオブジェクトなので、皆やはり class メッセージに応答でき、自らが属するクラスを返すことができます。\n\t"
  :code: |
    Object new class  "=&gt; Object "
    1 class           "=&gt; SmallInteger "
    1.1 class         "=&gt; Float "
    (2/3) class       "=&gt; Fraction "
    1e10 class        "=&gt; LargePositiveInteger "
    1.1s1 class       "=&gt; ScaledDecimal "
    1.1i class        "=&gt; Complex "
    (2@3) class       "=&gt; Point "
    $a class          "=&gt; Character "
    nil class         "=&gt; UndefinedObject "
    true class        "=&gt; True "
    false class       "=&gt; False "
    'abc' class       "=&gt; ByteString "
    #abc class        "=&gt; ByteSymbol "
    'あいう' class    "=&gt; WideString "
    #(1 2 3) class    "=&gt; Array "
    {1. 2. 3} class   "=&gt; Array "
    [:x|x+3] class    "=&gt; BlockContext "
    Array class           "=&gt; Array class "
    (Array class) class   "=&gt; Metaclass "
    (Integer&gt;&gt;#+) class   "=&gt; CompiledMethod "
    thisContext class     "=&gt; MethodContext "
    Processor activeProcess class  "=&gt; Process "
    Display class         "=&gt; DisplayScreen "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4087'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4087
  :user_name: nobsun
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/11/15 23:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>Haskellでは型は第一級の身分をもちません。型はコンパイル時に解決されますのでプログラム内で型を調べる必要があることはめったにないような気もします。すくなくとも
    Haskell98の仕様には方法はありません。しかし、ghcではbaseパッケージにData.Typeableというのがあってここで定義されている typeOf
    を使えば情報が得られます。</p>\n</div>\n\t"
  :code: |
    import Data.Typeable

    int :: Int
    int = 1

    integer :: Integer
    integer = 1

    float :: Float
    float = 1

    double :: Double
    double = 1

    {-
    *Main&gt; typeOf int
    Int
    *Main&gt; typeOf integer
    Integer
    *Main&gt; typeOf double
    Double
    *Main&gt; typeOf float
    Float
    *Main&gt; typeOf "abc"
    [Char]
    *Main&gt; typeOf lines
    [Char] -&gt; [[Char]]
    *Main&gt; typeOf unlines
    [[Char]] -&gt; [Char]
    *Main&gt; typeOf getContents
    IO [Char]
    *Main&gt; typeOf putStr
    [Char] -&gt; IO ()
    -}
  :tags:
  - Data.Typeable
  :references:
    :url: 
    :title: 
- :id: '4096'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4096
  :user_name: kozima
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/11/16 04:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Common Lisp には type-of があります。\r\nCLISP での評価結果を併記しましたが、処理系によって違うようです。</pre>\n\t"
  :code: |
    (type-of nil)                           ; =&gt; NULL
    (type-of t)                             ; =&gt; BOOLEAN
    (type-of '(a b c))                      ; =&gt; CONS
    (type-of 1)                             ; =&gt; BIT
    (type-of 2)                             ; =&gt; (INTEGER 0 16777215)
    (type-of -1)                            ; =&gt; (INTEGER -16777216 (0))
    (type-of (expt 2 50))                   ; =&gt; (INTEGER (16777215))
    (type-of 1s0)                           ; =&gt; SHORT-FLOAT
    (type-of 1f0)                           ; =&gt; SINGLE-FLOAT
    (type-of 1d0)                           ; =&gt; DOUBLE-FLOAT
    (type-of 1l0)                           ; =&gt; LONG-FLOAT
    (type-of #C(1 2))                       ; =&gt; COMPLEX
    (type-of #'car)                         ; =&gt; COMPILED-FUNCTION
    (type-of (symbol-function 'do))         ; =&gt; SYSTEM::MACRO
    (type-of (symbol-function 'and))        ; =&gt; SPECIAL-OPERATOR
    (type-of (lambda (x) x))                ; =&gt; FUNCTION
    (type-of #(a b c))                      ; =&gt; (SIMPLE-VECTOR 3)
    (type-of #2A((1 2) (3 4) (5 6)))        ; =&gt; (SIMPLE-ARRAY T (3 2))
    (type-of "xyz")                         ; =&gt; (SIMPLE-BASE-STRING 3)
    (type-of #P".")                         ; =&gt; PATHNAME
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4169'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4169
  :user_name: kkobayashi
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/11/17 19:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Rでは、どのレベルのオブジェクトか、によって使う関数が変わってきます。\r\nR言語（S言語
    - S3/S4？）としての構造（structure）を調べるならstr関数、\r\nもう少しinternalな型を調べるならtypeof/modeを使います。\r\n普通はstrを使うと思います。\r\n</pre>\n\t"
  :code: |
    &gt; str(0)
     num 0
    &gt; mode(0)
    [1] "numeric"
    &gt; typeof(0)
    [1] "double"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4265'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4265
  :user_name: ihag
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/560/
  :language: Ruby
  :time: 2007/11/19 19:13 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>Rubyだと，とりあえずinspectしてみると，一生懸命自分を説明しようとしてくれます．直接p objectとしてもいいけど．(これは結局object.inspectの結果をputsします)</p>\n<p>あと，メソッドの名前がうろ覚えのときに:</p>\n<pre
    class=\"literal-block\">\nirb(main):001:0&gt; Array.new.methods.grep(/each/)\n=&gt;
    [\"each\", \"each_index\", \"reverse_each\", \"each_with_index\"]\n</pre>\n<p>みたいなこともよくやるかも．</p>\n\n\t"
  :code: "[[0, 1, 2, 3], \n {:greeting=&gt;\"Hello\", :bye=&gt;\"farewall\"},\n lambda
    { puts \"Hello, world\" },\n 0..9, /^$/,\n :symbol].each {|x| p [x.class, x.inspect]}\n\n=&gt;
    [Array, \"[0, 1, 2, 3]\"]\n   [Hash, \"{:bye=&gt;\\\"farewall\\\", :greeting=&gt;\\\"Hello\\\"}\"]\n
    \  [Proc, \"#&lt;Proc:0xb7ca76fc@(irb):6&gt;\"]\n   [Range, \"0..9\"]\n   [Regexp,
    \"/^$/\"]\n   [Symbol, \":symbol\"]\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4286'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4286
  :user_name: cho45
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/579/
  :language: JavaScript
  :time: 2007/11/21 06:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>typeof の結果が object の場合にはさらに constructor
    が使用できます。\r</p>\n<p>\r</p>\n<p>(表示は SpiderMonkey での表示ですが、直接比較すれば種類を調べられます。あるいは処理系によりますが
    name プロパティでコンストラクタ関数の名前を取得できます。)</p>\n</div>\n\t"
  :code: |
    [].constructor
    //=&gt; function Array() {[native code]}

    ({}).constructor
    //=&gt; function Object() {[native code]}

    (new (function Foo () {})).constructor
    //=&gt; (function Foo() {})
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4488'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4488
  :user_name: yappy
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/533/
  :language: C
  :time: 2007/11/29 16:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  g++でやったところいろいろと変な名前が出てきたので面白くなって長文になってしまい、申し訳ない。\r<br>(C++の経験が浅くてやったことがなかった)\r<br>cygwinのg++だけれども、多分g++なら一緒だと思う。マングル済みの表現が返るようだ。\r<br>MS系の処理系だとソースに近い(同じ？)表現が返るっぽい。\n\t"
  :code: |
    #include &lt;cstdio&gt;
    #include &lt;iostream&gt;
    #include &lt;typeinfo&gt;
    using namespace std;

    template&lt;typename T&gt;
    const char *GetTypeName(T &amp;obj){
        return typeid(T).name();
    }

    class TestClass {
    public:
        TestClass(){}
    };

    int main() {
        signed char c;
        unsigned char uc;
        short s;
        unsigned short us;
        int i;
        unsigned int ui;
        long l;
        unsigned long ul;
        long long ll;
        unsigned long long ull;
        float f;
        double d;
        long double ld;
        cout &lt;&lt; "//char"&lt;&lt; endl &lt;&lt; GetTypeName(c) &lt;&lt; endl;
        cout &lt;&lt; "//unsigned char" &lt;&lt; endl &lt;&lt; GetTypeName(uc) &lt;&lt; endl;
        cout &lt;&lt; "//short" &lt;&lt; endl &lt;&lt; GetTypeName(s) &lt;&lt; endl;
        cout &lt;&lt; "//unsigned short" &lt;&lt; endl &lt;&lt; GetTypeName(us) &lt;&lt; endl;
        cout &lt;&lt; "//int" &lt;&lt; endl &lt;&lt; GetTypeName(i) &lt;&lt; endl;
        cout &lt;&lt; "//unsigned int" &lt;&lt; endl &lt;&lt; GetTypeName(ui) &lt;&lt; endl;
        cout &lt;&lt; "//long" &lt;&lt; endl &lt;&lt; GetTypeName(l) &lt;&lt; endl;
        cout &lt;&lt; "//unsigned long" &lt;&lt; endl &lt;&lt; GetTypeName(ul) &lt;&lt; endl;
        cout &lt;&lt; "//long long" &lt;&lt; endl &lt;&lt; GetTypeName(ll) &lt;&lt; endl;
        cout &lt;&lt; "//unsigned long long" &lt;&lt; endl &lt;&lt; GetTypeName(ull) &lt;&lt; endl;
        cout &lt;&lt; "//float" &lt;&lt; endl &lt;&lt; GetTypeName(f) &lt;&lt; endl;
        cout &lt;&lt; "//double" &lt;&lt; endl &lt;&lt; GetTypeName(d) &lt;&lt; endl;
        cout &lt;&lt; "//long double" &lt;&lt; endl &lt;&lt; GetTypeName(ld) &lt;&lt; endl;

        void *p;
        int a[10];
        TestClass obj;
        cout &lt;&lt; "//void *" &lt;&lt; endl &lt;&lt; GetTypeName(p) &lt;&lt; endl;
        cout &lt;&lt; "//\"str\"" &lt;&lt; endl &lt;&lt; GetTypeName("str") &lt;&lt; endl;
        cout &lt;&lt; "//int a[10]" &lt;&lt; endl &lt;&lt; GetTypeName(a) &lt;&lt; endl;
        cout &lt;&lt; "//TestClass" &lt;&lt; endl &lt;&lt; GetTypeName(obj) &lt;&lt; endl;

        cout &lt;&lt; "//cin" &lt;&lt; endl &lt;&lt; GetTypeName(cin) &lt;&lt; endl;
        cout &lt;&lt; "//cout" &lt;&lt; endl &lt;&lt; GetTypeName(cout) &lt;&lt; endl;

        cout &lt;&lt; "//stdout" &lt;&lt; endl &lt;&lt; GetTypeName(stdout) &lt;&lt; endl;

        return 0;
    }


    //char
    a
    //unsigned char
    h
    //short
    s
    //unsigned short
    t
    //int
    i
    //unsigned int
    j
    //long
    l
    //unsigned long
    m
    //long long
    x
    //unsigned long long
    y
    //float
    f
    //double
    d
    //long double
    e
    //void *
    Pv
    //"str"
    A4_c
    //int a[10]
    A10_i
    //TestClass
    9TestClass
    //cin
    Si
    //cout
    So
    //stdout
    P9__sFILE64
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4773'
  :parent_id: '85'
  :url: http://ja.doukaku.org/comment/4773
  :user_name: kazuho
  :user_url: /web/20080418011549/http://ja.doukaku.org/user/66/
  :language: JavaScript
  :time: 2007/12/12 04:32 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>また、継承 (prototype チェイン) をたどって実装状況を確認したい場合は instanceof 演算子を使うことができます。[]
    instanceof Object === true な点は注意が必要ですが。</p>\n\n\t"
  :code: |
    [] instanceof Array
    // =&gt; true
    ({}) instanceof Object
    // =&gt; true
    function Foo () {}; Foo.prototype = []; new Foo() instanceof Array
    // =&gt; true
  :tags: []
  :references:
    :url: 
    :title: 
