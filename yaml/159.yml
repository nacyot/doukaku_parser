---
:id: '159'
:title: 情報オリンピック2007年度国内本選問題2
:comments:
- :id: '5778'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5778
  :user_name: yukoba
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/689/
  :language: 
  :time: 2008/02/19 03:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>中高生向けの情報オリンピック国内本選2007年度問題2です。</p>\n<dl class=\"docutils\">\n<dt>問題文（下記PDFの4ページ目）</dt>\n<dd><a
    class=\"reference\" href=\"/web/20081122150434/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/2008-ho.pdf\">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/2008-ho.pdf</a></dd>\n<dt>コンテスト概要</dt>\n<dd><a
    class=\"reference\" href=\"/web/20081122150434/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/index.html\">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/index.html</a></dd>\n<dt>サンプルデータ（出題時に公開）</dt>\n<dd><a
    class=\"reference\" href=\"/web/20081122150434/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/joi2008.zip\">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/joi2008.zip</a></dd>\n<dt>採点データ（出題時に非公開）</dt>\n<dd><a
    class=\"reference\" href=\"/web/20081122150434/http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/data.zip\">http://www.ioi-jp.org/joi/2007/2008-ho-prob_and_sol/data.zip</a></dd>\n</dl>\n<p>「問題ごとに、プログラムの実行時間（や使用メモリ量）に制限が設定されています。」にご注意ください。本問では、制限時間1秒、メモリ制限64MBとなっています。</p>\n<p>出題時はサンプルデータのみが公開され、採点は、採点データによる、自動採点にて行われます。</p>\n<p>実際のコンテストでは、予選通過者48名が対象となっていて、100点満点中38点以上とった、16名が本選通過です。</p>\n\r\n\t"
  :code: ''
  :tags:
  - 情報オリンピック
  :references:
    :url: 
    :title: 
- :id: '5808'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5808
  :user_name: hyon
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/724/
  :language: C
  :time: 2008/02/20 13:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ブログのほうでリクエストがありましたので書き込ませていただきます。\r\n公式ジャッジデータで時間内に正答することは一応確認しています。\r\n少しでも参考になれば幸いです。\r\n</pre>\n\t"
  :code: "#include&lt;iostream&gt;\n#include&lt;vector&gt;\n\n#define DEBUG(c) cerr&lt;&lt;\"&gt;
    \"&lt;&lt;#c&lt;&lt;\" = \"&lt;&lt;c&lt;&lt;endl;\n\nusing namespace std;\n\nint
    main()\n{\n    string s,t; cin&gt;&gt;s&gt;&gt;t;\n    vector&lt;vector&lt;int&gt;
    &gt; dp(s.size(),vector&lt;int&gt;(t.size(),0));\n    \n    int res=0;\n    for(int
    i=0;i&lt;s.size();i++)\n    {\n        for(int j=0;j&lt;t.size();j++)\n        {\n
    \           if(i==0 || j==0)\n            {\n                if(s[i]==t[j])\n
    \                   dp[i][j]=1;\n            }\n            else if(s[i]==t[j])\n
    \               res=max(res,dp[i][j]=dp[i-1][j-1]+1);\n        }\n    }\n    \n
    \   cout&lt;&lt;res&lt;&lt;endl;\n    \n    return 0;\n}\n"
  :tags: []
  :references:
    :url: /web/20081122150434/http://d.hatena.ne.jp/hyon/20080217/1203269032
    :title: JOI2007-2008 Honsen
- :id: '5855'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5855
  :user_name: ocean
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2008/02/27 04:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>いくつかのデータで1秒制限を満たしてないと思いますが、とりあえず接尾辞配列で。</p>\n\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;
    #include &lt;string&gt;
    #include &lt;algorithm&gt;
    using namespace std;

    struct char_at
    {
        const char* s;

        static size_t i;

        explicit char_at(const char* s_) : s(s_) {}

        operator bool() const { return s[i]; }

        friend bool operator==(const char_at&amp; lhs, const char_at&amp; rhs)
        {
            return lhs.s[i] == rhs.s[i];
        }

        friend bool operator&lt;(const char_at&amp; lhs, const char_at&amp; rhs)
        {
            return lhs.s[i] &lt; rhs.s[i];
        }

        friend ostream&amp; operator&lt;&lt;(ostream&amp; out, const char_at&amp; at) // debug
        {
            return out &lt;&lt; (at.s + i);
        }
    };

    size_t char_at::i;

    bool compare_s(const char_at&amp; lhs, const char_at&amp; rhs)
    {
        return strcmp(lhs.s, rhs.s) &lt; 0;
    }

    int main()
    {
        string s1; getline(cin, s1);

        string s2; getline(cin, s2);

        vector&lt;char_at&gt; v;

        for (const char* p = s1.c_str(); *p; ++p)
        {
            v.push_back(char_at(p));
        }

        sort(v.begin(), v.end(), compare_s);

        size_t result = 0;

        for (const char* p = s2.c_str(); *p; ++p)
        {
            char_at at(p);

            pair&lt;vector&lt;char_at&gt;::iterator, vector&lt;char_at&gt;::iterator&gt;
                r = make_pair(v.begin(), v.end());

            for (char_at::i = 0; ; ++char_at::i)
            {
                r = equal_range(r.first, r.second, at);

                while (r.first != r.second &amp;&amp; !*r.first)
                {
                    ++r.first;
                }

                if (r.first == r.second || !at)
                {
                    break;
                }
            }

            result = max(result, char_at::i);
        }

        cout &lt;&lt; result &lt;&lt; endl;
    }
  :tags: []
  :references:
    :url: /web/20081122150434/http://ja.wikipedia.org/wiki/%E6%8E%A5%E5%B0%BE%E8%BE%9E%E9%85%8D%E5%88%97
    :title: 接尾辞配列
- :id: '5945'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5945
  :user_name: yukoba
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/689/
  :language: Scala
  :time: 2008/03/05 10:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>うーん、このコードをJavaに移植すると30倍速いんだけど…</p>\n\n\t"
  :code: "object P2 extends Application {\n  val s1 = readLine.toArray\n  val s2 =
    readLine.toArray\n  val len = new Array[Array[int]](s1.length, s2.length)\n  \n
    \ var max = 0\n  for(i &lt;- 0 until s1.length) {\n    val c1 = s1(i)\n    for(j
    &lt;- 0 until s2.length) {\n      val prev = if(i &gt; 0 &amp;&amp; j &gt; 0)
    len(i-1)(j-1) else 0\n      len(i)(j) = if(c1 == s2(j)) prev + 1 else 0\n      max
    = Math.max(max, len(i)(j))\n    }\n  }\n  println(max)\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5946'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5946
  :user_name: yukoba
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/689/
  :language: Java
  :time: 2008/03/05 10:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import java.io.BufferedReader;
    import java.io.InputStreamReader;

    public class P2 {
        public static void main(String[] args) throws Exception {
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String s1 = in.readLine();
            String s2 = in.readLine();
            int[][] len = new int[s1.length()][s2.length()];

            int max = 0;
            for (int i = 0; i &lt; s1.length(); i++) {
                char c1 = s1.charAt(i);
                for (int j = 0; j &lt; s2.length(); j++) {
                    if (c1 == s2.charAt(j)) {
                        int prev;
                        if (i &gt; 0 &amp;&amp; j &gt; 0)
                            prev = len[i - 1][j - 1];
                        else
                            prev = 0;
                        len[i][j] = prev + 1;
                        max = Math.max(max, len[i][j]);
                    }
                }
            }
            System.out.println(max);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5948'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5948
  :user_name: yukoba
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/689/
  :language: Java
  :time: 2008/03/05 12:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>2次元配列をやめてみたけど、実行時間は変わらず…</p>\n\n\t"
  :code: |
    import java.io.BufferedReader;
    import java.io.InputStreamReader;

    public class P2 {
        public static void main(String[] args) throws Exception {
            BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
            String s1 = in.readLine();
            String s2 = in.readLine();
            int[] prev = new int[s2.length()];

            int max = 0;
            for (int i = 0; i &lt; s1.length(); i++) {
                char c1 = s1.charAt(i);
                int[] next = new int[s2.length()];
                for (int j = 0; j &lt; s2.length(); j++) {
                    if (c1 == s2.charAt(j)) {
                        if (j &gt; 0)
                            next[j] = prev[j - 1] + 1;
                        else
                            next[j] = 1;
                        max = Math.max(max, next[j]);
                    }
                }
                prev = next;
            }
            System.out.println(max);
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5969'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5969
  :user_name: yukoba
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/689/
  :language: Scala
  :time: 2008/03/06 15:58 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>関数型言語の良さを生かしたコードになりました。ちょっと感動！参照透過性を使っています。</p>\n\n\t"
  :code: |
    object P2_2 extends Application {
      val s1 = readLine.toList
      val s2 = readLine.toList
      def lcs(s1:List[char], prev:List[int], max:int):int = {
        if (s1.isEmpty) return max
        val c1 = s1.head
        val next = List.map2(s2, 0 :: prev)((c2, p) =&gt; if (c1 == c2) p + 1 else 0)
        lcs(s1.tail, next, next.foldLeft(max)(Math.max(_, _)))
      }
      println(lcs(s1, List.make(s2.length, 0), 0))
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5978'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5978
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2008/03/07 11:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「最長共通（連続）部分列」\r\ni-1 とか j-1 とかのインデックスを使わずに。</pre>\n\t"
  :code: |
    import List

    solve s1 s2 = fst $ foldl f (0, 0: map (const 0) s1) s2 where
      f (m, xs) c = (m', 0:xs') where
        (m', xs') = mapAccumL g m $ zip s1 xs
        g n (d, x) = if (d == c) then (max n (x+1), x+1) else (n, 0)
    {-
    &gt; solve "ABRACADABRA" "ECADADABRBCRDARA"
    5
    -}
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5979'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/5979
  :user_name: '[1..100]&gt;&gt;=pen'
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/304/
  :language: Haskell
  :time: 2008/03/07 12:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">「最長共通（連続）部分列」\r\n#5978 は yukobaさんの #5969 とほとんど同じでした。\r\nいつも書いた直後に気づく。orz\r\n\r\n#5969
    と同じ書き方にしました。\r\n</pre>\n\t"
  :code: |
    import List

    solve s1 s2 = fst $ foldl f (0, 0: map (const 0) s1) s2 where
      f (m, xs) c = (maximum (m:xs'), 0:xs') where
        xs' = zipWith (\d x -&gt; if (d == c) then x+1 else 0) s1 xs
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6012'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/6012
  :user_name: みずしま
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/371/
  :language: Scala
  :time: 2008/03/13 17:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>遅くなる理由として次の2点があると思います。</p>\n<ul class=\"simple\">\n<li>非常に繰り返し回数の多いループにおいて\nforを使用していること(forは無名関数\nを引数に取るメソッド呼び出しの構文糖なので\n遅い)</li>\n<li>objectのすぐ内側で変数を定義しているため、\nそれらがフィールドになってしまっている\n(フィールドの参照はローカル変数の参照に\n比べて遅い)</li>\n</ul>\n<p>コードは汚くなりますが、元のコードを改造して\n以下のようにすることで、自分の環境\n(Athlon
    64 3000+, Windows XP\nProfessional, JDK 1.6.0)において、Javaに\n移植した場合にかなり近い性能が出ることを\n確認できました。ここで、</p>\n<ul
    class=\"simple\">\n<li>{ }で囲むことによって、s1やs2などをローカル\n変数にすることで高速化</li>\n<li>組み込みのループ構文であるwhileを使うことで\n高速化</li>\n</ul>\n<p>しているのがポイントです。一般的にはそれほど\n気を使う必要は無いと思いますが、この問題の\nようにループの回数が非常に多い場合には\n有効なテクニックかと思います。</p>\n\n\t"
  :code: "object P2Tune extends Application {\n  {\n    val s1 = readLine.toArray\n
    \   val s2 = readLine.toArray\n    val len = new Array[Array[int]](s1.length,
    s2.length)\n  \n    var max = 0\n    var i = 0\n    while(i &lt; s1.length) {\n
    \     val c1 = s1(i)\n      var j = 0\n      while(j &lt; s2.length) {\n        val
    prev = if(i &gt; 0 &amp;&amp; j &gt; 0) len(i-1)(j-1) else 0\n        len(i)(j)
    = if(c1 == s2(j)) prev + 1 else 0\n        max = Math.max(max, len(i)(j))\n        j
    += 1\n      }\n      i += 1\n    }\n    println(max)\n  }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6014'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/6014
  :user_name: yukoba
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/689/
  :language: Groovy
  :time: 2008/03/15 10:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "reader = System.in.newReader()\ns1 = reader.readLine()\ns2 = reader.readLine()\nprev
    = new int[s2.length() + 1]\nmax = 0\ns1.eachWithIndex({ c1, i -&gt;\n    next
    = new int[s2.length() + 1]\n    s2.eachWithIndex({ c2, j -&gt; \n        if(c1
    == c2) {\n            next[j + 1] = prev[j] + 1\n            max = Math.max(max,
    next[j + 1])\n        }\n    })\n    prev = next\n})\nprintln(max)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6326'
  :parent_id: '159'
  :url: http://ja.doukaku.org/comment/6326
  :user_name: ocean
  :user_url: /web/20081122150434/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2008/05/23 18:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>両方の文字列から接尾辞配列を作って処理するようにしたら、若干高速化しました。（手元で判定データ 2-6 が 17秒 =&gt;
    10秒。このマシンはPen2-266で遅いんですが、それを差し引いても大会のマシンで1秒制限を満たすか怪しいです）</p>\n\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;vector&gt;
    #include &lt;string&gt;
    #include &lt;algorithm&gt;
    #include &lt;string.h&gt; // strcmp()

    #define REP(i, b, e) for (size_t i = b; i &lt; e; ++i)

    bool compare_str(const char* s1, const char* s2)
    {
        return strcmp(s1, s2) &lt; 0;
    }

    void make_suffix_array(const std::string&amp; s, std::vector&lt;const char*&gt;&amp; v)
    {
        v.resize(s.size());

        REP(i, 0, s.size())
        {
            v[i] = s.c_str() + i;
        }

        std::sort(v.begin(), v.end(), compare_str);
    }

    typedef std::vector&lt;const char*&gt;::const_iterator Iter;

    void skip_empty_string(Iter&amp; beg, Iter end, size_t depth)
    {
        while (beg != end &amp;&amp; (*beg)[depth] == '\0')
        {
            ++beg;
        }
    }

    void find_range(Iter&amp; beg, Iter&amp; end, size_t depth, char c)
    {
        while (beg != end &amp;&amp; (*beg)[depth] &lt; c)
        {
            ++beg;
        }

        Iter cur = beg;

        while (cur != end &amp;&amp; (*cur)[depth] == c)
        {
            ++cur;
        }

        end = cur;
    }

    void traverse(Iter beg1, Iter end1, Iter beg2, Iter end2, size_t depth, size_t&amp; max_depth)
    {
        skip_empty_string(beg1, end1, depth);

        skip_empty_string(beg2, end2, depth);

        while (beg1 != end1 &amp;&amp; beg2 != end2)
        {
            const char c = (*beg1)[depth];

            Iter the_beg1 = beg1, the_end1 = end1;

            find_range(the_beg1, the_end1, depth, c);

            Iter the_beg2 = beg2, the_end2 = end2;

            find_range(the_beg2, the_end2, depth, c);

            if (the_beg1 != the_end1 &amp;&amp; the_beg2 != the_end2)
            {
                max_depth = std::max(max_depth, depth + 1);

                traverse(the_beg1, the_end1, the_beg2, the_end2, depth + 1, max_depth);
            }

            beg1 = the_end1;

            beg2 = the_end2;
        }
    }

    int main()
    {
        std::string s1, s2;

        std::getline(std::cin, s1);

        std::getline(std::cin, s2);

        std::vector&lt;const char*&gt; v1, v2;

        make_suffix_array(s1, v1);

        make_suffix_array(s2, v2);

        size_t max_depth = 0;

        traverse(v1.begin(), v1.end(), v2.begin(), v2.end(), 0, max_depth);

        std::cout &lt;&lt; max_depth &lt;&lt; std::endl;
    }
  :tags: []
  :references:
    :url: 
    :title: 
