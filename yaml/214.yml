---
:id: '214'
:title: '''(''と'')''の対応'
:comments:
- :id: '7884'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7884
  :user_name: nori
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/59/
  :language: Python
  :time: 2008/10/29 09:14 GMT
  :vote_count: '11'
  :vote_score: '-3'
  :body: "\r\n\t  \n<p>入力の'('と')'の対応をとってください。\n</p>\n<p>ただし、コード中に'('と')'を含まないでください。\n</p>\n<p>漢字の九九にinspireされました。\n</p>\n\n\n\r\n\t"
  :code: |
    import sys
    start = sys.argv[1]
    end = sys.argv[2]
    to_test = sys.argv[3]
    print start
    print end
    print to_test

    stack = []
    while to_test:
      print stack
      head = to_test[0]
      to_test = to_test[1:]
      if head == start:
        stack += [head]
      if head == end:
        if stack:
          stack = stack[:-1]
        else:
          stack = [True]
          break
    if stack:
      print False
    else:
      print True
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7919'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7919
  :user_name: 匿名
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/11/02 04:36 GMT
  :vote_count: '4'
  :vote_score: '2'
  :body: "\n\t  入力と出力はどういうものを想定しているのでしょうか？\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7920'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7920
  :user_name: '186'
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/352/
  :language: Scheme
  :time: 2008/11/02 04:38 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>()の変わりに[]にしました.</p>\n<p>Doukaku214.scmと保存して</p>\n<p>gosh Doukaku214.scm
    \"(())\" -&gt; #t\ngosh Doukaku214.scm \"())\" -&gt; #f</p>\n<p>となります.</p>\n\n\t"
  :code: |
    [define [main args]
      [let loop [[i 0] [a [string-&gt;list [list-ref args 1]]]]
        [cond [[null? a]
               [if [= i 0] [print #t] [print #f]]]
              [[&lt; i 0] #f]
              [[char=? [integer-&gt;char 40] [car a]]
               [loop [+ i 1] [cdr a]]]
              [[char=? [integer-&gt;char 41] [car a]]
               [loop [- i 1] [cdr a]]]
              [else
               [loop i [cdr a]]]]]]
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '7921'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7921
  :user_name: sna
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/819/
  :language: Scala
  :time: 2008/11/02 07:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  1引数関数は()の代わりに{}を使用可、多引数関数はFunction.curriedでカリー化して呼び出せる。ifはパターンマッチ、whileは末尾再起で代替可能。\r<br><br>引数を持つメソッドが宣言できないためmainメソッドに渡されるargsを取れないので、標準入力から入力します。\n\t"
  :code: "object ParenthesesChecker extends Application {\n  \n  {\n    def cons[A]
    = Function.curried{Stream.cons[A] _}\n    \n    def lines: Stream[String] = cons[String]{readLine}{lines}\n
    \   val src = lines.takeWhile{_ != null}.mkString.elements\n    \n    var count
    = 0\n    val OPEN_CHAR = 40.toChar\n    val CLOSE_CHAR = 41.toChar\n    def loop:
    Unit = src.hasNext match {\n      case true =&gt; src.next match {\n        case
    40               =&gt; count += 1; loop\n        case 41 if count == 0 =&gt; println{false}\n
    \       case 41               =&gt; count -= 1; loop\n        case _ =&gt; loop\n
    \     }\n      case false =&gt; println{count == 0}\n    }\n    loop\n  }\n  \n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7922'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7922
  :user_name: emasaka
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2008/11/02 08:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">お題のサンプルにあわせて、引数で'('と')'を与えています。\r\n\r\n$ ./kakko.sh
    '(' ')' '(())'\r\nTrue\r\n$ ./kakko.sh '(' ')' '(()'\r\nFalse\r\n\r\n</pre>\n\t"
  :code: |
    #!/bin/sh
    if [ `echo "$3" | tr -d "[^$1]" | wc -c` \
       = `echo "$3" | tr -d "[^$2]" | wc -c` ]; then
        echo True
    else
        echo False
    fi
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7923'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7923
  :user_name: sumim
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/11/02 08:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。入力は in.txt を想定しています。</p>\n\n\t"
  :code: |
    | stream count |
    stream := FileStream fileNamed: 'in.txt'.
    count := 0.

    [stream atEnd] whileFalse: [
        stream next asciiValue caseOf: {
            [40] -&gt; [count := count + 1].
            [41] -&gt; [count := count - 1. count &lt; 0 ifTrue: [^false]]
        } otherwise: []].
    ^count = 0
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '7924'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7924
  :user_name: mc
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/11/02 09:36 GMT
  :vote_count: '6'
  :vote_score: '0'
  :body: "\n\t  Common LispでもSchemeみたいに、()を[]にすれば簡単!!と思ったのですが、リーダーマクロを設定するにも最初は()が必要なのでした…。\n\t"
  :code: |
    ;;; 不可能?
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7925'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7925
  :user_name: 匿名
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2008/11/02 10:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ものすごく久々にPerlのコードを書いたので怪しいかもしれません</p>\n\n\t"
  :code: |
    my $PS = chr 40;
    my $PE = chr 41;

    my $code = &lt;&lt;"XXX" ;
        my \$stack = 0;
        foreach my \$ch $PS unpack "C*", \$input $PE {
            if $PS \$ch == 40 $PE {
                \$stack++;
            } elsif $PS \$ch == 41 $PE {
                \$stack--;
                last if $PS \$stack &lt; 0 $PE;
            }
        }
        $PS \$stack == 0 $PE ? "OK" : "NG";
    XXX

    my $input = do { local $/; &lt;&gt; };
    print STDOUT eval $code, "\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7926'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7926
  :user_name: emasaka
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/852/
  :language: C
  :time: 2008/11/02 11:01 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">引数で'('と')'を使ってよいというお題のサンプルにのっとって。\r\n\r\n$
    cc -DLPAR='(' -DRPAR=')' kakko.c -o kakko\r\n$ ./kakko '(())'\r\nTrue\r\n$ ./kakko
    '(()'\r\nFalse\r\n\r\n</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    int main LPAR int argc, char **argv RPAR
    {
        char *p = argv[1];
        int cnt = 0;

        while LPAR *p RPAR {
            *p == '\x28' &amp;&amp; cnt++;
            *p == '\x29' &amp;&amp; cnt--;
            p++;
        }
        puts LPAR cnt == 0 ? "True" : "False" RPAR;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7927'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7927
  :user_name: pooq
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/11/02 17:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">括弧の対応がとれている時に1を\r\nそうでない場合は0を返します。\r\n\r\n
    \  paren_check '()'\r\n1\r\n   paren_check ')()'\r\n0\r\n   paren_check '()()'\r\n1\r\n
    \  paren_check '(()())'\r\n1\r\n   paren_check '())(()'\r\n0\r\n</pre>\n\t"
  :code: |
    paren_check=:3 :'*/0&lt;:-/+/\"1 p E."0 1 y[p=.40 41{a.'
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7928'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7928
  :user_name: SiroKuro
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/540/
  :language: Java
  :time: 2008/11/02 17:47 GMT
  :vote_count: '7'
  :vote_score: '7'
  :body: "\n\t  ソースファイル名は paren.java です。java は出来る子です。\n\t"
  :code: |
    \u0070\u0075\u0062\u006C\u0069\u0063\u0020\u0063\u006C\u0061\u0073\u0073\u0020\u0070\u0061\u0072\u0065\u006E\u0020\u007B\u0070\u0075\u0062\u006C\u0069\u0063\u0020\u0073\u0074\u0061\u0074\u0069\u0063\u0020\u0076\u006F\u0069\u0064\u0020\u006D\u0061\u0069\u006E\u0028\u0053\u0074\u0072\u0069\u006E\u0067\u005B\u005D\u0061\u0072\u0067\u0073\u0029\u007B\u0053\u0079\u0073\u0074\u0065\u006D\u002E\u006F\u0075\u0074\u002E\u0070\u0072\u0069\u006E\u0074\u006C\u006E\u0028\u0022\u0072\u0065\u0073\u0075\u006C\u0074\u003A\u0020\u0022\u0020\u002B\u0020\u0063\u0068\u0065\u0063\u006B\u0028\u0029\u0029\u003B\u007D\u0070\u0072\u0069\u0076\u0061\u0074\u0065\u0020\u0073\u0074\u0061\u0074\u0069\u0063\u0020\u0062\u006F\u006F\u006C\u0065\u0061\u006E\u0020\u0063\u0068\u0065\u0063\u006B\u0028\u0029\u007B\u0069\u006E\u0074\u0020\u0063\u002C\u0063\u006E\u0074\u003D\u0030\u003B\u0074\u0072\u0079\u007B\u0077\u0068\u0069\u006C\u0065\u0028\u0030\u003C\u003D\u0028\u0063\u003D\u0053\u0079\u0073\u0074\u0065\u006D\u002E\u0069\u006E\u002E\u0072\u0065\u0061\u0064\u0028\u0029\u0029\u0029\u007B\u0073\u0077\u0069\u0074\u0063\u0068\u0028\u0028\u0063\u0068\u0061\u0072\u0029\u0063\u0029\u007B\u0063\u0061\u0073\u0065\u0027\u0028\u0027\u003A\u0063\u006E\u0074\u002B\u002B\u003B\u0062\u0072\u0065\u0061\u006B\u003B\u0063\u0061\u0073\u0065\u0027\u0029\u0027\u003A\u0063\u006E\u0074\u002D\u002D\u003B\u0069\u0066\u0028\u0063\u006E\u0074\u003C\u0030\u0029\u0072\u0065\u0074\u0075\u0072\u006E\u0020\u0066\u0061\u006C\u0073\u0065\u003B\u0062\u0072\u0065\u0061\u006B\u003B\u007D\u007D\u007D\u0063\u0061\u0074\u0063\u0068\u0028\u006A\u0061\u0076\u0061\u002E\u0069\u006F\u002E\u0049\u004F\u0045\u0078\u0063\u0065\u0070\u0074\u0069\u006F\u006E\u0020\u0065\u0078\u0029\u007B\u007D\u0072\u0065\u0074\u0075\u0072\u006E\u0020\u0063\u006E\u0074\u003D\u003D\u0030\u003B\u007D\u007D
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7929'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7929
  :user_name: pooq
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/606/
  :language: 
  :time: 2008/11/02 16:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">')('とかでおかしくなるのでは。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7930'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7930
  :user_name: leque
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2008/11/02 17:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Gauche だと {} も () の代わりに使えますね。</p>\n\n\t"
  :code: |
    {define {main args}
      {call-with-input-string {car args}
        {lambda {ip}
          {let loop {{n 0} {c {read-char ip}}}
            {cond {{negative? n} 1}
                  {{eof-object? c} n}
                  {{char=? c #\u0028} {loop {+ n 1} {read-char ip}}}
                  {{char=? c #\u0029} {loop {- n 1} {read-char ip}}}
                  {else {loop n {read-char ip}}}}}}}}
  :tags:
  - gauche
  :references:
    :url: 
    :title: 
- :id: '7931'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7931
  :user_name: emasaka
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/852/
  :language: diff
  :time: 2008/11/02 18:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なるほど。修正。</p>\n\n\t"
  :code: |
    8c8
    &lt;     while LPAR *p RPAR {
    ---
    &gt;     while LPAR *p &amp;&amp; cnt &gt;= 0 RPAR {
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7934'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7934
  :user_name: seri
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/641/
  :language: Ruby
  :time: 2008/11/03 00:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">標準入力から入力し、対応がとれていればtrue, \r\nとれていなければfalseを表示します。\r\n\r\n(())
    #=&gt; true\r\n((()) #=&gt; false\r\n((1 + 2) * 3 - 4) / 5 #=&gt; true\r\n\r\n</pre>\n\t"
  :code: |
    result = true
    buff = []
    arr = gets.split //
    arr.each { |c|
      buff &lt;&lt; c if c == 40.chr
      result = false if c == 41.chr &amp;&amp; buff.pop != 40.chr
    }
    puts buff.size == 0 ? result : false
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7936'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7936
  :user_name: nori
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/59/
  :language: C
  :time: 2008/11/03 02:35 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>$ cc -DLPAR='(' -DRPAR=')' kakko.c -o kakko</p>\n<p>なるほど。IOCCC的にはよくある手ですね。こんな解答じゃなくてよかった。</p>\n\n\t"
  :code: |
    #include "/dev/tty"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7937'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7937
  :user_name: nori
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/11/03 02:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>被告人らしいので自己弁護します。</p>\n<p>入力出力はあえて細かく指定していません。ロジックの問題ではなく、言語の文法・処理系の制限をどう迂回するかが出題意図だからです。</p>\n<p>()をコマンドラインからとらない解答も大歓迎です。むしろ本来あるべき姿です。</p>\n<p>Lisp系は言わずもがな、ALGOL系は関数の定義と呼び出し、条件分岐が問題になります。Smalltalkからみたら何が問題なんだかさっぱりでしょう）。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7941'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7941
  :user_name: 99yen
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/11/03 06:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>\"40CHR\"とか書いてもCHRに40が行くようですが念のため</p>\n\n\t"
  :code: |
    inputに「input.txt」を開く
    START=40,CHR
    END=41,CHR
    cnt=0
    inputを文字列分解して反復
        もし、対象=STARTならば
            cnt=cnt+1
        もし、対象=ENDならば
            cnt=cnt-1
        もし、cnt&lt;0ならば
            抜ける
    もし、cnt=0ならば
        「True」を表示
    違えば
        「False」を表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7943'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7943
  :user_name: matyr
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/343/
  :language: Groovy
  :time: 2008/11/03 14:31 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">正規表現で。Ruby ほど括弧の省略に融通が利かないので苦しい。\r\n&gt; d214.groovy
    () )() ()() (()()) ())(()\r\ntrue\r\nfalse\r\ntrue\r\ntrue\r\nfalse</pre>\n\t"
  :code: |
    args.each{ { s, r -&gt;
      any s == [s -= r][0] ? { println ![s =~ '[\50\51]'][0] } : { owner.call s, r }
    } it, ~'[\50][^\50\51]*[\51]' }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7944'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7944
  :user_name: minke
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/28/
  :language: Haskell
  :time: 2008/11/03 19:41 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>$ と where があれば括弧要らない感じです．\nタプル使えないのがちょっと嫌ですが．</p>\n\n\t"
  :code: |
    import qualified Data.Char
    openP  = Data.Char.chr 40
    closeP = Data.Char.chr 41

    pNext = dropWhile $ \c -&gt; c/=openP &amp;&amp; c/=closeP
    pHead = head . pNext
    pTail = pNext . tail . pNext

    parse :: String -&gt; String
    parse str = show result ++ "\n"
      where
        result = flip parse' 0 $ pNext str

        parse' "" n = n == 0
        parse' s  n | hd == openP = parse' tl $ succ n
                    | n &gt; 0       = parse' tl $ pred n
                    | otherwise   = False
          where
            hd = pHead s
            tl = pTail s

    main = interact parse
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7946'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7946
  :user_name: mc
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/405/
  :language: 
  :time: 2008/11/04 02:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  これのマイナス評価の理由が知りたいんですが、\r<br>(1)仕様内でもCLで可能\r<br>(2)不可能と言い切っていなかった\r<br>(3)その他\r<br>等々どういう理由なんでしょうか('-'*)\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7948'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7948
  :user_name: mc
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2008/11/04 06:19 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  CLの仕様内では丸括弧を無くすのは無理だと思っているのですが、\r<br>何でもありということなら、この問題用にカスタマイズされた\r<br>処理系を作成すれば、OKだと思います。\r<br>解答コードでも極力括弧を減らしてみました。\r<br><br>(1) 下準備として下記のコードを実行し、&lt;&gt;が()の役割をする処理系を\r<br>    作成します。(/tmpに、doukaku-214という実行ファイルができます。)\r<br><br>(2) 1の処理系で、解答のコードを&lt;load..&gt;で実行します。\r<br>~~~\r<br>;; 下準備 SBCL限定\r<br><br>;;\r<br>;; doukaku 214 lisp\r<br>;;\r<br><br>(in-package \"SB-IMPL\")\r<br><br>(defun &lt;&gt;read-list (stream ignore)\r<br>  (declare (ignore ignore))\r<br>  (let* ((thelist (list nil))\r<br>         (listtail thelist))\r<br>    (do ((firstchar (flush-whitespace stream) (flush-whitespace stream)))\r<br>        ((char= firstchar #\\&gt; ) (cdr thelist))\r<br>      (when (char= firstchar #\\.)\r<br>            (let ((nextchar (read-char stream t)))\r<br>              (cond ((token-delimiterp nextchar)\r<br>                     (cond ((eq listtail thelist)\r<br>                            (unless *read-suppress*\r<br>                              (simple-reader-error\r<br>                               stream\r<br>                               \"Nothing appears before . in list.\")))\r<br>                           ((whitespace[2]p nextchar)\r<br>                            (setq nextchar (flush-whitespace stream))))\r<br>                     (rplacd listtail\r<br>                             ;; Return list containing last thing.\r<br>                             (car (read-after-dot stream nextchar)))\r<br>                     (return (cdr thelist)))\r<br>                    ;; Put back NEXTCHAR so that we can read it normally.\r<br>                    (t (unread-char nextchar stream)))))\r<br>      ;; Next thing is not an isolated dot.\r<br>      (let ((listobj (read-maybe-nothing stream firstchar)))\r<br>        ;; allows the possibility that a comment was read\r<br>        (when listobj\r<br>              (rplacd listtail listobj)\r<br>              (setq listtail listobj))))))\r<br><br>(set-macro-character #\\&lt; #'&lt;&gt;read-list)\r<br>(set-macro-character #\\&gt; #'read-right-paren)\r<br>(sb-ext:save-lisp-and-die \"/tmp/doukaku-214\" :purify 'T :executable 'T)))\n\t"
  :code: "&lt;with-open-file &lt;in \"/tmp/test.txt\"&gt;\n  &lt;loop with match?
    = 0; \n        with lp = &lt;code-char 40&gt;; \n        with rp = &lt;code-char
    41&gt;;\n\n        for c = &lt;read-char in nil nil&gt; while c\n        if &lt;minusp
    match?&gt;\n          return nil;\n        else if &lt;char= lp c&gt;\n                do
    &lt;incf match?&gt;;\n             else if &lt;char= rp c&gt;\n                    do
    &lt;decf match?&gt;;\n                  end;\n             end;\n        end;\n
    \       finally &lt;return &lt;zerop match?&gt;&gt;&gt;&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7950'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7950
  :user_name: nori
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/11/04 21:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>&gt; 処理系を作成すれば、OKだと思います\nLispらしい、いい話です。</p>\n<p>SmallTalkでも、問題で対象となる文字を代えれば処理系の書き換え・生成等で対処という手があるのでしょうが、そもそもの回答者がすくないので・・・。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7951'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7951
  :user_name: sumim
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2008/11/04 22:23 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>＞そもそもの回答者がすくないので・・・。</p>\n<p>「・・・」には何が省略されているのでしょうか？　とても興味があります。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7952'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7952
  :user_name: mc
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/405/
  :language: 
  :time: 2008/11/05 06:03 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  処理系の作成コードですが、無駄に複雑でした(^^;\r<br>下記のコードでも可能で、これの方がポータブルです。\r<br>(set-macro-character #\\&lt; (lambda (stream char)\r<br>                           (declare (ignore char))\r<br>                           (read-delimited-list #\\&gt; stream 'T)))\r<br>(set-macro-character #\\&gt; (get-macro-character #\\)))\r<br><br>;; イメージ作成 (処理系依存/SBCL)\r<br>(sb-ext:save-lisp-and-die \"/tmp/doukaku-214\" :purify 'T :executable 'T)))\r<br>"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7953'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7953
  :user_name: sawat
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/322/
  :language: 
  :time: 2008/11/05 01:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  マイナスの理由は、お題を満たさないコードがCommon Lispの回答として投稿されているからです。\r<br>カバレッジや一番乗りとして扱われてしまうので、ただのコメントで不可能であることだけ言う方がよいとおもいます。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20081226035907/http://ja.doukaku.org/comment/317/
    :title: '類似 #317'
- :id: '7954'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7954
  :user_name: mc
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/405/
  :language: 
  :time: 2008/11/05 02:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  なるほど、ありがとうございます!\r<br>納得できました。\r<br>どちらかというと運営とか利用の心得的な話だったのですね。\r<br><br>カバレッジについては、仕様上不可能だと証明できれば、\r<br>それはそれでOKな気もしますが、どうなんでしょう。\r<br>仕様上不可能だと証明することも簡単ではないでしょうし。\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7956'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7956
  :user_name: 匿名
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/11/05 09:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>過去に投稿いただいているコードと\n<a class=\"reference\" href=\"/web/20081226035907/http://www.sra.co.jp/people/aoki/SmalltalkIdioms/index.htm\">http://www.sra.co.jp/people/aoki/SmalltalkIdioms/index.htm</a>\nを眺める限り'[',
    ':', '|','.',  ']'あたりの組合せがねらい目のようですね。</p>\n<p>正直、「適度な締まり具合」にするためにはそれなりに知っていないといけないんで、ちゃんと入門しますか。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7957'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7957
  :user_name: syat
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/766/
  :language: VB
  :time: 2008/11/05 10:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  主にVB.netで。括弧文字の作り方を思いつかなかったのでC#さんに依頼。\r<br>協力すればどうにかなるもんです\n\t"
  :code: |
    ==== VB.vb ====
    Imports CSharp
    Class ResultTrue
        Inherits Exception
    End Class

    Class ResultFalse
        Inherits Exception
    End Class

    Module Vb
        Sub MaIn
            Dim s = Console.ReadLIne
            Dim n = 0

            For Each c In s
                If c = Paren.Open Then
                    n = n + 1
                Else If c = Paren.Close Then
                    n = n - 1
                End If

                If n &lt; 0 Then
                    Throw New ResultFalse
                End If
            Next c

            If n &lt;&gt; 0 Then
                Throw New ResultFalse
            Else
                Throw New ResultTrue
            End If
        End Sub
    End Module

    ==== CSharp.cs ====
    namespace CSharp {
        public class Paren {
            public static char Open = '\x28';
            public static char Close = '\x29';
        }
    }

    ==== コンパイル手順 ====
    csc /target:library CSharp.cs
    vbc /r:CSharp.dll VB.vb
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7958'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7958
  :user_name: susu
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/11/05 16:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: "(* #! /usr/bin/env ocaml *)\nlet paren_test l r s =\n  let count = ref 0
    in\n  let f c =\n    if c = r then \n      if !count=0 then raise Exit else decr
    count\n    else if c = l then \n      incr count \n  in try String.iter f s; !count
    = 0 with Exit -&gt; false;;\n\nif not !Sys.interactive &amp;&amp; Array.length
    Sys.argv &gt;= 2 then\n  let s = Array.get Sys.argv 1 in\n  let result = paren_test
    '\\040' '\\041' s in\n  Printf.printf \"%s: %B\\n\" s result\n;;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7959'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7959
  :user_name: sumim
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2008/11/05 21:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なるほど。</p>\n<p>おもしろい“縛り”による挑戦をお待ちしております。ｗ</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7988'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/7988
  :user_name: emasaka
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/852/
  :language: sed
  :time: 2008/11/07 10:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #!/bin/sed -f
    s/[^\x28\x29]*//g
    :a
    s/\x28\x29//g
    ta
    /./{
      c False
      b
    }
    c True
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8098'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/8098
  :user_name: syat
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/766/
  :language: C
  :time: 2008/11/30 09:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  C#はJavaとよく似てるけど、できない子でした。\r<br>Unicode文字のエスケープ表記は、識別子と文字／文字列リテラルでしか使えません。\r<br><br>カッコを封じられるとMainが定義できないので実行不能。\r<br>とりあえず機能だけC#で作って、VBから呼び出すことにします。\r<br><br>あらゆる構文、メソッドが使用不可で絶望するも、救いの神現るその名は LINQ。\r<br>勉強して書いてみたところ、どうもうまく動かない。\r<br>調べてみたら LINQは遅延実行で、定義したあと foreach() や ToArray() 、ToList() で「実行」しなければいけないことに気付く。\r<br>って、全部カッコ使ってる。。。\r<br><br>しかたないので実行も外部で行うことにします。後編に続く。\n\t"
  :code: |
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public class CheckParen {
      // チェックしたい文字列
      public static string Testee { get; set; }

      // 結果をLINQで返す
      public static IEnumerable&lt;string&gt; Result {
        get {
          int nSum = 0;

          // 文字列を文字にばらし、構造体に変換
          var chars = from c in Testee + "\x00"
                      let flag =  c == '\x28' ?  1
                                : c == '\x29' ? -1
                                : 0
                      select new {
                          ch    =  c,                    // 文字
                          flag  =  flag,                 // カッコ→±1
                          eof   =  c == '\x00' ? 1 : 0,  // 末尾か？
                          sum   =  nSum += flag          // flagの合計
                        };

          // sum が途中でマイナスになったり、最後に0以外だったら不整合
          var ret =  from c in chars
                     select  c.eof == 1 &amp;&amp; nSum &gt; 0  ? "閉じ括弧が足りない"
                           : c.eof == 0 &amp;&amp; c.sum &lt; 0 ? "開き括弧が足りない"
                           : "" ;

          return ret;
        }
      }
    }
  :tags: []
  :references:
    :url: /web/20081226035907/http://msdn.microsoft.com/ja-jp/library/bb397906.aspx
    :title: LINQ クエリの概要
- :id: '8099'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/8099
  :user_name: syat
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/766/
  :language: VB
  :time: 2008/11/30 03:43 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>#8098の続き。</p>\n<p>C#で定義したCheckParenを呼び出す側です。\n実行すると１行入力を読み込み、カッコの対応が取れていれば無言、不整合があれば例外を投げます。</p>\n<p>C#、VB.netで、カッコ抜きで文字を出す良い方法があったら教えてください。</p>\n\n\t"
  :code: |
    Class StringException
        Inherits Exception
        Public Msg As String
        Public Overrides Function ToString As String
            Return Msg
        End Function
    End Class

    Module Vb
        Sub Main
            CheckParen.Testee = Console.ReadLine
            For Each s In CheckParen.Result
                If s &lt;&gt; "" Then
                    Dim ex = New StringException
                    ex.Msg = s
                    Throw ex
                End If
            Next s
        End Sub
    End Module
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8111'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/8111
  :user_name: 匿名
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/4/
  :language: Prolog
  :time: 2008/12/03 22:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  冗談です。\n\t"
  :code: |
    {pkd,[[],[],[]]} :- !.
    {pkd,[[A|R1],R,Chars]} :-
        {char_code,[A,40]},
        {pekd,[R1,R2,Chars1]}
        {pkd,[R2,R,Chars2]},
        {append,[Chars1,Chars2,Chars]},!.
    {pkd,[[A|R1],R,[A|R2]]} :-
        {pkd,[R1,R,R2]}.

    {pekd,[[A|R],R,[]]} :-
        {char_code,[A,41]},!.
    {pekd,[[A|R1],R,Chars]} :-
        {char_code,[A,40]},
        {pkd,[[A|R1],R2,Chars1]},
        {pekd,[R2,R,Chars2]},
        {append,[Chars1,Chars2,Chars]},!.
    {pekd,[[A|R1],R,[A|R2]} :-
        {pekd,[R1,R,R2]}.

    {readfile_2,[end_of_file,[]]} :- !.
    {readfile_2,[A,[A|R]} :-
        {get_char,[B]}
        {readfile_2,[B,R]}.

    {odai,[File,Atom]} :-
        {readfile,[File,Chars]},
        {pkd,[Chars,_,Chars_2]},
        {atom_codes,[Atom,Chars_2]}.

    {Functor,Args} :- Q =.. [Functor|Args],Q.

    :- {odai,['foo.txt',Atom]}.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8112'
  :parent_id: '214'
  :url: http://ja.doukaku.org/comment/8112
  :user_name: 匿名
  :user_url: /web/20081226035907/http://ja.doukaku.org/user/4/
  :language: Prolog
  :time: 2008/12/03 22:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  冗談です。\r\nProlog上にオブジェクト指向を乗せると\r\nこれよりずっと重くなるからまあいいか。\r\n\r\nコピペにミスがあり、\r\n{readfile
    ... } :- ... が抜けていました。\r\n追加します。\n\t"
  :code: |
    {pkd,[[],[],[]]} :- !.
    {pkd,[[A|R1],R,Chars]} :-
        {char_code,[A,40]},
        {pekd,[R1,R2,Chars1]}
        {pkd,[R2,R,Chars2]},
        {append,[Chars1,Chars2,Chars]},!.
    {pkd,[[A|R1],R,[A|R2]]} :-
        {pkd,[R1,R,R2]}.

    {pekd,[[A|R],R,[]]} :-
        {char_code,[A,41]},!.
    {pekd,[[A|R1],R,Chars]} :-
        {char_code,[A,40]},
        {pkd,[[A|R1],R2,Chars1]},
        {pekd,[R2,R,Chars2]},
        {append,[Chars1,Chars2,Chars]},!.
    {pekd,[[A|R1],R,[A|R2]} :-
        {pekd,[R1,R,R2]}.

    {readfile,[File,Chars]} :-
        {see,[File]},
        {get_char,[Char]},
        {readfile_2,[Char,Chars]},
        {seen,[]}.

    {readfile_2,[end_of_file,[]]} :- !.
    {readfile_2,[A,[A|R]} :-
        {get_char,[B]}
        {readfile_2,[B,R]}.

    {odai,[File,Atom]} :-
        {readfile,[File,Chars]},
        {pkd,[Chars,_,Chars_2]},
        {atom_codes,[Atom,Chars_2]}.

    {Functor,Args} :- Q =.. [Functor|Args],Q.

    :- {odai,['foo.txt',Atom]}.
  :tags: []
  :references:
    :url: 
    :title: 
