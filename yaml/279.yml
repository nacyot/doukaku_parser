---
:id: '279'
:title: シードを固定した乱数
:comments:
- :id: '9451'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9451
  :user_name: ところてん
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2009/08/07 11:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">シードを固定した疑似乱数を出力してください。\r\n数回実行して、常に同じ結果が出力されることを確認してください。\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9547'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9547
  :user_name: kzfm
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/106/
  :language: OCaml
  :time: 2009/09/02 07:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  こういうのでいいのだろうか？\r\n\t"
  :code: |
    let fixed_seed_rand num = Random.init 10; Random.float num;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9492'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9492
  :user_name: spoon
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/1036/
  :language: Python
  :time: 2009/08/19 08:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    import random
    random.seed(42)
    print random.random()
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9476'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9476
  :user_name: greentea
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/573/
  :language: Other
  :time: 2009/08/14 07:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>pythonの標準モジュールです。\nseedにはハッシュ可能な任意のオブジェクトをとれます。</p>\n\r\n\t"
  :code: |
    #!/usr/bin/python
    import random

    random.seed('ja.doukaku.org')
    print [random.random() for i in range(10)]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9490'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9490
  :user_name: Dubhead
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/785/
  :language: D
  :time: 2009/08/18 01:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>D 2.031で。\nMt19937インスタンスは一種の無限リストで、frontメソッドで先頭要素を読み出し (除去はしない)、popFrontで除去します。</p>\n\r\n\t"
  :code: |
    import std.random;

    static const uint COUNT = 16;
    static const uint SEED = 1337;
    static const uint NUM_TRIALS = 42;

    void main()
    {
        uint[COUNT] randomNumbers;
        Mt19937 gen;        // 2^19937周期のMersenne Twister

        // シードを設定し、COUNT個の乱数を憶えておく
        gen.seed(SEED);
        foreach (i; 0 .. COUNT) {
            randomNumbers[i] = gen.front;
            gen.popFront;
        }

        foreach (i; 0 .. NUM_TRIALS) {
            // 同じシードを再設定し、出てくるCOUNT個の乱数が
            // 最初のと同じであることを確認
            gen.seed(SEED);
            foreach (j; 0 .. COUNT) {
                assert(randomNumbers[j] == gen.front);
                gen.popFront;
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9477'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9477
  :user_name: konn
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/100/
  :language: Haskell
  :time: 2009/08/14 08:28 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Haskell で。コンパイルしちゃうと表示されませんが、まあ runhaskell
    なりで\r\n\r\n$ runhaskell random.hs\r\n\r\nとでもすればちゃんと答えが返ってくると思います。\r\n\r\nmain
    :: IO Int\r\n\r\nの Int のところを Float なり Double なり Char なりに変えることで別の型の乱数も生み出せたりします。結果は型できちんと一定になります。\r\n\r\nInt,
    Integer : -1673289139\r\nFloat : 0.110407025\r\nDouble : 0.11040701265689151\r\nChar
    : '\\41423'</pre>\r\n\t"
  :code: |
    import System.Random

    main :: IO Integer
    main = return $ fst $ random $ mkStdGen 42
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9724'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9724
  :user_name: 匿名
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2009/12/15 20:33 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\r\n\t  <p>well.. it's like I said!</p>\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20110320070610/http://www.google.com/
    :title: emm... 10x.
- :id: '9722'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9722
  :user_name: seigo
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/1126/
  :language: Objective
  :time: 2009/12/14 19:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>ガバレッジをあげる為と自分の勉強の為に投稿いたしました</p>\n\r\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n#define SEED srand(64)\n\nint main
    (int argc, const char * argv[]) {\n    NSAutoreleasePool * pool = [[NSAutoreleasePool
    alloc] init];\n\n    int r;\n    SEED;\n    for (int i = 0; i &lt; 10; i++) {\n
    \       r = rand();\n    }\n    NSLog(@\"%d\",r);    \n    [pool drain];\n    return
    0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9473'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9473
  :user_name: rennos
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/08/13 23:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">組み込みの機能で。\r\n</pre>\r\n\t"
  :code: "#const CONST_SEED 32\n\n*main\n    dim pt, 2, 2\n    \n    repeat\n        gosub
    *LResetPoint\n        gosub *LRedraw\n        \n        wait 120\n    loop\n    stop\n
    \   \n*LResetPoint\n    dim pt, 2, 2\n    \n    // 座標4点は固定シード\n    randomize CONST_SEED\n
    \   repeat length2(pt)\n        pt(0, cnt) = rnd(640), rnd(480)\n    loop\n    \n
    \   return\n    \n*LRedraw\n    redraw 2\n    color : boxf\n    \n    // 色は適当シード
    =&gt; 毎回変化する\n    randomize\n    color rnd(256), rnd(256), rnd(256)\n    boxf
    pt(0, 0), pt(1, 0), pt(0, 1), pt(1, 1)\n    \n    redraw\n    return\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9511'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9511
  :user_name: margarite
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/741/
  :language: PowerShell
  :time: 2009/08/24 14:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>コマンドレットだけで</p>\n\r\n\t"
  :code: |
    Get-Random -SetSeed 10
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9471'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9471
  :user_name: sawat
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/322/
  :language: Java
  :time: 2009/08/14 01:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  一番乗り？\r\n\t"
  :code: |
    import java.util.Arrays;
    import java.util.Random;

    public class RandomWithSeed {
        public static void main(String[] args) {
            final long seed = 1234567890L;
            final int count = 10;
            System.out.println(Arrays.toString(getRandomValuesWithSeed(seed, count)));
            System.out.println(Arrays.toString(getRandomValuesWithSeed(seed, count)));
            System.out.println(Arrays.toString(getRandomValuesWithSeed(seed, count)));
        }

        private static int[] getRandomValuesWithSeed(
                final long seed, final int count) {
            Random random = new Random(seed);
            int[] randomValues = new int[count];
            for (int i = 0; i &lt; randomValues.length; i++) {
                randomValues[i] = random.nextInt();
            }
            return randomValues;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9472'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9472
  :user_name: uho
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/498/
  :language: Ruby
  :time: 2009/08/13 21:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>何回やっても0.771320643266746が返ってきます。</p>\n\r\n\t"
  :code: |
    srand(10)
    p rand
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9488'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9488
  :user_name: pa
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/943/
  :language: Other
  :time: 2009/08/17 06:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">Limboには擬似乱数を扱うモジュールがあります。\r\nrandモジュールのinitメソッドにシードを与えます。\r\n\r\nこのプログラムを実行すると\r\n57
    98 98 72 50 40 81 88 52 38 \r\nと表示され、何度実行しても同様です。</pre>\r\n\t"
  :code: "implement d279;\n\ninclude \"sys.m\";\ninclude \"draw.m\";\ninclude \"rand.m\";\n\nsys:
    Sys;\n\nd279: module\n{\n    init: fn(ctxt: ref Draw-&gt;Context, argv: list of
    string);\n};\n\ninit(ctxt: ref Draw-&gt;Context, argv: list of string)\n{\n    sys
    = load Sys Sys-&gt;PATH;\n    rand := load Rand Rand-&gt;PATH;\n    i: int;\n
    \   \n    rand-&gt;init(1024);\n    \n    for(i = 0; i &lt; 10; i ++){\n        sys-&gt;print(\"%d
    \", rand-&gt;rand(100));\n    }\n    sys-&gt;print(\"\\n\");\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9475'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9475
  :user_name: turugina
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2009/08/14 02:05 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>常に 0.00115966796875 が出てきました。</p>\n\r\n\t"
  :code: |
    srand 0;
    print rand
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9493'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9493
  :user_name: spoon
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/1036/
  :language: PHP
  :time: 2009/08/19 08:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    srand(42);
    echo rand();
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9637'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9637
  :user_name: 匿名
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/4/
  :language: Lua
  :time: 2009/10/18 12:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    local i, j
    for j = 1, 3 do
       math.randomseed(123)
       for i = 1, 10 do
          print(math.random())
       end
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9481'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9481
  :user_name: lunlumo
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/08/14 09:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>　scalaで。</p>\n\r\n\t"
  :code: |
    import    scala.util.Random

    try {
        val    r:Random = new Random(args.first.toInt)
        1.to(10).foreach((_) =&gt; println(r.nextInt.toString))
    } catch {
        case ex =&gt; ex.printStackTrace
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9480'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9480
  :user_name: sumim
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/08/14 09:11 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>Squeak Smalltalk で。</p>\n\r\n\t"
  :code: |
    3 timesRepeat: [
        | rand |
        rand := Random seed: 123.
        Transcript cr.
        5 timesRepeat: [Transcript space; show: rand next]
    ]

    "=&gt;
     0.00096264341890935 0.1791479416094478 0.939454629989087 0.4139662265842623 0.530370201696814
     0.00096264341890935 0.1791479416094478 0.939454629989087 0.4139662265842623 0.530370201696814
     0.00096264341890935 0.1791479416094478 0.939454629989087 0.4139662265842623 0.530370201696814
    "
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9482'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9482
  :user_name: '186'
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/352/
  :language: Scheme
  :time: 2009/08/14 10:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>srfi-27で.</p>\n\r\n\t"
  :code: |
    (use srfi-27)
    (define (main . args)
      (define s (make-random-source))
      (begin
        (random-source-pseudo-randomize! s 1 2)
        (print ((random-source-make-reals s)))))
  :tags: []
  :references:
    :url: /web/20110320070610/http://srfi.schemers.org/srfi-27/srfi-27.html
    :title: 'SRFI 27: Sources of Random Bits'
- :id: '9474'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9474
  :user_name: selpo
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/1013/
  :language: C
  :time: 2009/08/14 05:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  \r\n\t"
  :code: |
    using System;
    class P
    {
        static void Main()
        {
            Random rand = new Random(32);
            for (int i = 0; i&lt; 10; i++)
                    Console.WriteLine(rand.Next());
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9486'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9486
  :user_name: pooq
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2009/08/16 17:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">「?.」の片側型がシード値を固定した乱数を返す動詞です。\r\n乱数の生成方法は、デフォルトでは、Mersenne
    Twister ですが\r\n他の方法も選択可能なようです。\r\n   ?.10000\r\n6146\r\n   ?.10000\r\n6146</pre>\r\n\t"
  :code: |
    exit echo ?.10000
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9478'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9478
  :user_name: SiroKuro
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/540/
  :language: Java
  :time: 2009/08/14 08:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>ちょっと遊んでみました。こちらのコードは擬似乱数を１０個出力します。</p>\n\r\n\t"
  :code: |
    import java.util.Random;

    public class RandomPrint {
        public static void main(String[] args) {
            Random random = new Random();
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i &lt; 10; i++) {
                sb.append(random.nextInt());
                sb.append(" ");
            }
            System.out.println(sb.toString());
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9491'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9491
  :user_name: 99yen
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2009/08/19 00:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>なでしこで。</p>\n\r\n\t"
  :code: |
    10回
        1で乱数初期化
        10の乱数を表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9479'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9479
  :user_name: SiroKuro
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/540/
  :language: Java
  :time: 2009/08/14 08:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>で、こちらは擬似乱数のシードを固定し、RandomPrint を数回実行し、常に同じ結果が出力されることを確認するテストケースです。</p>\n\r\n\t"
  :code: "import static jp.co.dgic.testing.common.virtualmock.MockObjectManager.*;\nimport
    static org.junit.Assert.*;\nimport java.util.*;\nimport jp.co.dgic.testing.common.virtualmock.*;\nimport
    org.junit.*;\n\npublic class RandomPrintTest implements IReturnValueProvider {\n
    \   private int seed;\n    \n    @Before\n    public void setUp() {\n        seed
    = new Random().nextInt();\n    }\n    \n    @Test\n    public void testMain()
    {\n        // 擬似乱数のシードを固定する\n        setReturnValueAtAllTimes(\"java.util.Random\",
    \"&lt;init&gt;\", this);\n        \n        // 数回実行する\n        final int count
    = 10;\n        for (int i = 0; i &lt; count; i++) {\n            RandomPrint.main(null);\n
    \       }\n        \n        // 常に同じ結果が出力されることを確認する\n        String arg1 = (String)
    getArgument(\"PrintStream\", \"println\", 0, 0);\n        assertNotNull(arg1);\n
    \       for (int i = 1; i &lt; count; i++) {\n            String arg2 = (String)
    getArgument(\"PrintStream\", \"println\", i, 0);\n            assertEquals(arg1,
    arg2);\n        }\n    }\n    \n    @Override\n    public Object createReturnValue(Object[]
    arg0) {\n        return new Random(seed);\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9500'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9500
  :user_name: 割と普通
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/581/
  :language: C
  :time: 2009/08/20 21:35 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">Visual Stuido 2008以降のテスティングフレームワークを使用。\r\n値の確認をする程度なら、テスティングフレームワーク＋SequenceEqual使えば目視の必要なんぞナッシング。</pre>\r\n\t"
  :code: |
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using System;
    using System.Linq;
    using System.Collections.Generic;

    namespace TestProject1
    {
        [TestClass()]
        public class FilterContextTest
        {
            [TestMethod()]
            public void RandomTest01()
            {
                int seed = 33;
                for (int i = 0; i &lt; 13; i++)
                {
                    var ary1 = CreateRandomArray(seed);
                    var ary2 = CreateRandomArray(seed);
                    Assert.IsTrue(ary1.SequenceEqual(ary2));
                }
            }

            public IEnumerable&lt;int&gt; CreateRandomArray(int seed)
            {
                Random rand = new Random(seed);
                return Enumerable.Range(1, 20).Select(num =&gt; rand.Next(num));
            }
        }
        //(中略)
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9534'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9534
  :user_name: bleis-tift
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/732/
  :language: SQL
  :time: 2009/08/29 21:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>SQL Server 2008 で確認しました。</p>\n\r\n\t"
  :code: |
    SELECT RAND(0);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9485'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9485
  :user_name: uehaj
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/08/16 02:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>こんな感じでいいのかしら。</p>\n\r\n\t"
  :code: |
    $ groovy -e '3.times{println new Random(0).nextInt()}'
    -1155484576
    -1155484576
    -1155484576
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9496'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9496
  :user_name: egtra
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/08/20 03:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  TR1のRandomを使いました。gのコンストラクタ引数42が種です。なお、Boost.Randomでもほぼ同じコードになります。\r\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;random&gt;

    void output_mt19937()
    {
        std::tr1::mt19937 g(42);
        for (int i = 0; i &lt; 5; ++i)
        {
            std::cout &lt;&lt; g() &lt;&lt; ' ';
        }
    }

    int main()
    {
        for (int i = 0; i &lt; 3; ++i)
        {
            std::cout &lt;&lt; i &lt;&lt; "回目の試行\n";
            output_mt19937();
            std::cout &lt;&lt; std::endl;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9509'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9509
  :user_name: egtra
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/759/
  :language: BASIC
  :time: 2009/08/23 17:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <p>伝統的BASICです。N88互換のつもりですが、ActiveBasic 2.62で動作確認しています。手元のリファレンスマニュアルを参考にN88でダメな構文は避けているつもりです。可読性のため、インデントしていますがご容赦ください。</p>\n<p>RANDOMIZEが種を指定する命令語で、RNDが乱数を取得する関数です。それぞれ、Cでいうところのsrandとrandですね。なお、PRINT
    RND(1)の後ろのセミコロンは、ここで改行せず空白を置くという書式指定です（すなわち、シード固定の乱数という本題とは関係ありません）。</p>\n\r\n\t"
  :code: |
    10 FOR I = 0 TO 3
    20    RANDOMIZE 42
    30    FOR J = 0 TO 5
    40        PRINT RND(1);
    50    NEXT J
    60    PRINT
    70 NEXT I
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9531'
  :parent_id: '279'
  :url: http://ja.doukaku.org/comment/9531
  :user_name: ？せんたくいた
  :user_url: /web/20110320070610/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2009/08/28 18:32 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  BASH の RANDOM は数値を代入すると初期化されます。\r\n\r\n\t"
  :code: |
    #!/bin/bash
    RANDOM=0
    echo $RANDOM
  :tags: []
  :references:
    :url: 
    :title: 
