---
:id: '111'
:title: スタックの操作
:comments:
- :id: '4718'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/4718
  :user_name: ところてん
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/12/10 12:14 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\r\n\t  <pre class=\"compact\">多くの手続き型言語では、スタックサイズが決められています。\r\n再帰などで画像処理などを行うと、しばしばスタックオーバーフローが発生します。\r\nそこで、スタックオーバーフローが可能な言語において、特定の環境、特定の言語のデフォルト設定で、\r\n\r\n1.スタックオーバーフローを発生させるコードを書きなさい\r\n2.スタックオーバーフロー時のスタックの大きさを求めなさい\r\n3.組み込み型変数(int,double,List,Dictionary,etc...)のスタック消費サイズを求めなさい\r\n4.スタックサイズを変更する方法を書きなさい\r\n\r\n何を以ってデフォルトとするかは非常に怪しいですが、そこらへんは適当にお願いします。\r\n\r\n3はネイティブコードを吐く言語であれば、たぶんそのままですが、\r\nスクリプト言語であれば、見える大きさと実メモリ上の大きさが異なるので、その場合はよろしくお願いします。\r\nまた組み込み型が多数ありすぎる言語の場合、よく使われるものを適当に示してください。\r\n\r\n4は開発環境の設定や、ビルドオプションなど、コードの外からの指定になる場合がある思うので、\r\nそのような場合は、その旨を明記してください。\r\n\r\n＃自分がPythonで画像処理プログラムを書いていたら、スタックオーバーフローさせてしまったので投稿してみる\r\n＃200*200の画像でオーバーフローするなよ。デフォ設定が小さすぎる・・・</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4720'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/4720
  :user_name: ところてん
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/12/10 12:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">ちなみにpythonでは関数呼び出しの回数に制限があり、\r\nそれがデフォで1000回になっているようです。\r\n\r\n例の画像処理は呼び出し限界を画像のピクセル数にして解決\r\n</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20080331044322/http://xwave.exblog.jp/m2007-02-01/
    :title: Python で再帰読み出し
- :id: '4720'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/4720
  :user_name: ところてん
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2007/12/10 12:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ちなみにpythonでは関数呼び出しの回数に制限があり、\r\nそれがデフォで1000回になっているようです。\r\n\r\n例の画像処理は呼び出し限界を画像のピクセル数にして解決\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20080331044322/http://xwave.exblog.jp/m2007-02-01/
    :title: Python で再帰読み出し
- :id: '4721'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/4721
  :user_name: SiroKuro
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/10 13:13 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  １と４だけですが投稿します。ただし Thread クラスのコンストラクタでスタックサイズを指定するオーバーロードは使用が推奨されてません。\r\n……２と３はどう書けば良いんだろう。.NET
    Framework 2.0 以降は、StackOverflowException は catch できず、オーバーフロー時点でランタイムが停止してしまいます。\n\t"
  :code: |
    using System;
    static class Program {
        static void Main() {
            new System.Threading.Thread(Test, 1024 * 1024).Start();
        }
        static long cnt = 0;
        static void Test() {
            Console.WriteLine(cnt++);
            Test();
        }
    }
  :tags: []
  :references:
    :url: /web/20080331044322/http://msdn2.microsoft.com/ja-jp/library/5cykbwz4.aspx
    :title: Thread コンストラクタ (ThreadStart, Int32)
- :id: '4724'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/4724
  :user_name: kozima
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/164/
  :language: Emacs
  :time: 2007/12/10 14:14 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>本当のスタックオーバーフローではありませんが、すぐ書ける Emacs Lisp の場合でも。</p>\n<p>関数呼び出しのネスト数が
    max-lisp-eval-depth の値を超えるとエラーになります。初期値は 300 ぐらいが普通みたいです。</p>\n<p>普通の変数なので setq
    で大きい数に設定すれば増やせますが、documentation に「大きくしすぎるとクラッシュするかも」とか書いてあります。</p>\n\n\t"
  :code: |
    (defun f () (f))
    (f) ;; =&gt; Debugger entered--Lisp error: (error "Lisp nesting exceeds `max-lisp-eval-depth'")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4880'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/4880
  :user_name: pooq
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/606/
  :language: Batchfile
  :time: 2007/12/19 03:14 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">1だけです。callなしで%0だけにすると無限ループになるみたいです。\r\n\r\n&gt;stacktest\r\n\r\n&gt;call
    stacktest\r\n\r\n　...\r\n\r\n&gt;call stacktest\r\n\r\n&gt;call stacktest\r\n******
    \ B A T C H   R E C U R S I O N  exceeds STACK limits ******\r\nRecursion Count=1240,
    Stack Usage=90 percent\r\n******       B A T C H   PROCESSING IS   A B O R T E
    D      ******\r\n</pre>\n\t"
  :code: |
    call %0
  :tags:
  - cmd
  :references:
    :url: 
    :title: 
- :id: '5004'
  :parent_id: '111'
  :url: http://ja.doukaku.org/comment/5004
  :user_name: cho45
  :user_url: /web/20080331044322/http://ja.doukaku.org/user/579/
  :language: JavaScript
  :time: 2007/12/27 10:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>1 (と2) だけです。スタックサイズは処理系に依存し、オーバーフローするかどうかも処理系依存です。このコードでは  Rhino
    のインタプリタモード (-opt -1) でオーバーフローしません)。\n</p>\n<p>二回にわけているのは、処理系によっては try/catch でスタックオーバーフローがキャッチできないからです。\n</p>\n<pre><code>Safari
    3: 500\nOpera 9.24: 3341\nFirefox 3 beta2: 261503\n</code></pre>\n\n\n\t"
  :code: |
    javascript:n=0;(function(){n++;arguments.callee()})();
    javascript:alert(n);
  :tags: []
  :references:
    :url: /web/20080331044322/http://subtech.g.hatena.ne.jp/cho45/20071208/1197050774
    :title: 'Stack over flow '
