---
:id: '151'
:title: 自分自身のファイル名を知る方法
:comments:
- :id: '5728'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5728
  :user_name: ところてん
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2008/02/10 22:04 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">自分自身のファイル名を知る方法を示してください。\r\n\r\nビルド後のファイルが、hogehoge.exeであれば、\r\n”hogehoge.exe”が表示されるようなプログラムを書いてください。\r\nスクリプト言語でも同様です。\r\n\r\nファイル名が変更されたらそれに追従するようにしてください。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20100612154741/http://ja.doukaku.org/comment/3301/
    :title: '#3301'
- :id: '5786'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5786
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/02/19 19:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import sys

    print sys.argv[0]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5787'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5787
  :user_name: heita
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/713/
  :language: Ruby
  :time: 2008/02/19 23:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  同案多数でしょうが、ruby の場合 __FILE__ 変数に自分自身のファイル名が格納されています。\r\n\r\nirb では
    nil が、ruby -e '...' では \"-e\" が格納されます。 \n\t"
  :code: |
    puts __FILE__
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5788'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5788
  :user_name: mtsuyugu
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/481/
  :language: C
  :time: 2008/02/19 23:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #include &lt;libgen.h&gt;
    #include &lt;stdio.h&gt;

    int main( int argc, char *argv[] ){
       printf("%s\n", basename(argv[0]) );
       return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5789'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5789
  :user_name: sekia
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/588/
  :language: Perl
  :time: 2008/02/19 23:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>sayが使いたかっただけ。</p>\n\n\t"
  :code: |
    use 5.10;
    use feature qw/say/;
    use File::Basename;

    say basename $0;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5790'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5790
  :user_name: yyamasak
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/722/
  :language: Tcl
  :time: 2008/02/19 23:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    puts [file dirname [info script]]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5791'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5791
  :user_name: sekia
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/588/
  :language: diff
  :time: 2008/02/20 00:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>間違い訂正（Perl 5.100ってなんだ）</p>\n\n\t"
  :code: |
    1c1
    &lt; use 5.10;
    ---
    &gt; use 5.010;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5792'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5792
  :user_name: matyr
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2008/02/20 00:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    WSH.echo(WSH.scriptName);
  :tags:
  - WSH
  :references:
    :url: 
    :title: 
- :id: '5793'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5793
  :user_name: matyr
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/343/
  :language: Io
  :time: 2008/02/20 00:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    System launchScript print
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5794'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5794
  :user_name: eo-oe-aaaa
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/498/
  :language: C
  :time: 2008/02/20 01:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    using System;
    using System.Diagnostics;

    namespace ConsoleApplication1
    {
        class Class1
        {
            [STAThread]
            static void Main(string[] args)
            {
                Console.WriteLine( Process.GetCurrentProcess().ProcessName );
            }
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5795'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5795
  :user_name: sumim
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/02/20 01:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk はイメージベースなので、使用中の仮想イメージファイル名でご容赦を。</p>\n\n\t"
  :code: |
    FileDirectory localNameFor: SmalltalkImage current imageName
    '#=&gt; Squeak3.9-final-7067.image'
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '5796'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5796
  :user_name: mimizu
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/103/
  :language: Haskell
  :time: 2008/02/20 01:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import System.Environment

    main = getProgName &gt;&gt;= putStrLn
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5797'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5797
  :user_name: sawat
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/322/
  :language: Java
  :time: 2008/02/20 01:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Javaではもともとクラス名=ファイル名なので、パスを含めてURLで表示してみました。</p>\n\n\t"
  :code: |
    package doukaku;

    public class MyFilename {
       public static void main(String[] args) {
          System.out.println(
              MyFilename.class.getClassLoader().getResource(
                  MyFilename.class.getName().replaceAll("\\.","/")+".class"));
       }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5798'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5798
  :user_name: silverwire
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/646/
  :language: 
  :time: 2008/02/20 01:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">シェルスクリプトでは #5725が参考になると思います。\r\n\r\nちなみに、以下のOSで動作することを確認。\r\n\r\n
    \ AIX     (4.3)\r\n  HP-UX   (11.00)\r\n  Linux   (2.4)\r\n  Solaris (5.5)\r\n\r\n#
    \ Solarisでも/usr/xpg4/bin/shを使用すれば、パターン照合演算子に対応しているので\r\n# 動作します。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5799'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5799
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: PHP
  :time: 2008/02/20 02:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    &lt;?php
    print __FILE__;
    ?&gt;
  :tags: []
  :references:
    :url: /web/20100612154741/http://jp2.php.net/manual/ja/language.constants.predefined.php
    :title: 'PHP: 自動的に定義される定数 - Manual'
- :id: '5800'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5800
  :user_name: susu
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/218/
  :language: OCaml
  :time: 2008/02/20 02:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    print_endline Sys.executable_name;;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5801'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5801
  :user_name: ocean
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2008/02/20 04:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>どちらが欲しいかはケースバイケースだと思うのですが、実行したファイル名ではなくライブラリスクリプト自身のファイル名が欲しい場合には
    __file__ を使います。</p>\n\n\t"
  :code: |
    #/////////////
    # a.py

    import b

    #/////////////
    # b.py

    import sys

    print __file__    # ..../b.py
    print sys.argv[0] # ..../a.py
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5802'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5802
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: Delphi
  :time: 2008/02/20 08:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    begin
      Writeln(ParamStr(0));
    end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5803'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5803
  :user_name: 99yen
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/02/20 09:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    // ファイルのパス
    コマンドライン[0]を表示
    // なでしこインタプリタのパス
    ナデシコランタイムパスを表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5804'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5804
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: PHP
  :time: 2008/02/20 10:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Includeされる側と、実行側で取得方法が異なると思います。\n\t"
  :code: "&lt;?php \n//状況によって違うと思います。\n//実行中のファイル名は\necho $_SERVER['PHP_SELF'];\n//ソースコードの現在位置のファイル名は\necho
    __FILE__\n\nif (  __FILE__ == $_SERVER[\"PHP_SELF\"] ){\n//今このファイルが実行されている。\necho
    \"this\";\n}\n"
  :tags: []
  :references:
    :url: /web/20100612154741/http://jp.php.net/manual/ja/reserved.variables.php
    :title: PHPマニュアル/定義済み変数
- :id: '5806'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5806
  :user_name: silverwire
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/20 13:05 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"> #3301は拡張子を含まない例なので、拡張子を含むファイル名を取得する方法を検証しま\r\nした。なお、「長いファイル名」とは「ロングファイルネーム(
    LFN)」のことを、「短い\r\nファイル名」とはいわゆる「 8.3形式( SFN)」のことを指していると思ってください。\r\n\r\n  e.g.\r\n
    \   C:\\&gt;\"C:\\Documents and Settings\\kshibamo\\デスクトップ\\どう書く？org Beta.bat\"\r\n
    \   長いファイル名 : どう書く？org Beta.bat\r\n    短いファイル名 : どう書~1.BAT\r\n\r\nWindows NT,
    2000, XP, 2003で動作確認したところ、パス文字列にマルチバイトが含まれ\r\nる場合に限り、Windows NTと2000では短いファイル名を取得することができませんでした。\r\n\r\n
    \ e.g.\r\n    Windows NTの場合\r\n      短いファイル名 : org Beta\r\n\r\n    Windows 2000の場合\r\n
    \     短いファイル名 : (何も出力されない)</pre>\n\t"
  :code: |
    :: どう書く？org Beta.bat
    @echo off
      setlocal
        echo 長いファイル名 : %~nx0
        echo 短いファイル名 : %~nxs0
      endlocal
    goto :EOF
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5812'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5812
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/02/20 14:26 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>#5797 のコメントでこのお題は全てなのですが、static メソッドからは自分自身のクラス名が取れない事が気になって、強引に外部からクラス名を取る事を試みてみました。</p>\n<p>コマンドラインを取得して起動コマンドからクラス名を取得する戦略です。ただし、Javaからは生のコマンドラインが取れないため、ps
    コマンドを外部起動して ps コマンドの ppid から自分自身の pid を取得し、コマンドラインを求めています。</p>\n\n\t"
  :code: "import java.io.*;\nimport java.util.*;\nimport java.util.regex.*;\n\npublic
    class Sample {\n    public static final Pattern psPattern = Pattern.compile(\"ps
    -Awwo pid\");\n    public static void main(String[] args) throws Exception { \n
    \       Runtime rt = Runtime.getRuntime();\n        Process p = rt.exec(new String[]{\"ps\",
    \"-Awwo\", \"pid,ppid,command\"});\n        BufferedReader r = new BufferedReader(new
    InputStreamReader(p.getInputStream()));\n        String line, javaPid = \"\";\n
    \       HashMap&lt;String, String&gt; pMap = new HashMap&lt;String, String&gt;();\n
    \       while ((line = r.readLine()) != null) {\n            String[] token =
    line.split(\"\\\\s+\", 4);\n            pMap.put(token[1], token[3]);\n            if
    (psPattern.matcher(token[3]).find()) {\n                javaPid = token[2];\n
    \           }\n        }\n        String[] token = pMap.get(javaPid).split(\"\\\\s+\");\n
    \       System.out.println(token[1] + \".class\");\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5813'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5813
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/02/20 16:14 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>#5812 はOSに依存します（ちなみに、Mac OS Xで確認しました）。クラス名を得るだけであれば、別にコマンドラインを取得する必要はないので、もっと単純な方法も提示しておきます。</p>\n\n\t"
  :code: "public class Sample2 {\n    public static void main(String[] args){ \n        Exception
    ex = new Exception();\n        StackTraceElement[] st = ex.getStackTrace();\n
    \       System.out.println(st[0].getClassName() + \".class\");\n    }\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5814'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5814
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: PostScript
  :time: 2008/02/20 16:17 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>PostScript といいつつ、 Ghostscript 依存です。\nまっとうな PostScript では自分自身のファイルは
    currentfile で取得して読み出しできるのですが、PostScript Level 2で拡張された「名前付きファイル」の名前のほうを参照する方法が無さげです。Ghostscript
    の名前 変換オペレータ の .filename を使用しています。</p>\n\n\t"
  :code: |
    %!PS
    currentfile .filename { = } if
  :tags:
  - Ghostscript
  :references:
    :url: 
    :title: 
- :id: '5815'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5815
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2008/02/20 18:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    WSH.Echo(WSH.ScriptName);
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5818'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5818
  :user_name: Jlake
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/658/
  :language: Perl
  :time: 2008/02/21 01:27 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    print $0;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5819'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5819
  :user_name: Jlake
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/658/
  :language: Perl
  :time: 2008/02/21 01:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>フルパス</p>\n\n\t"
  :code: |
    print $ENV{PWD}."/$0";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5821'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5821
  :user_name: yama
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/684/
  :language: C
  :time: 2008/02/21 03:49 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>Windows版です</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    int main( int argc, char *argv[] )　{
        char command[BUFSIZ];
        sprintf(command, "dir /B \"%s\"", argv[0]);
        system(command);
        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5823'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5823
  :user_name: naranja
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2008/02/21 07:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    import std.stdio;
    import std.path;

    void main(string[] args){
        writefln(getBaseName(args[0]));

        // &gt;= 2.006
        // writefln(basename(args[0]));
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5824'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5824
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/02/21 12:42 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <div class=\"section\">\n<p>99yenさんのものだとパスも表示されてしまうので。</p>\n</div>\n\t"
  :code: |
    コマンドライン[0]からファイル名抽出を表示
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5828'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5828
  :user_name: sawat
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/322/
  :language: 
  :time: 2008/02/22 01:19 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>StackTrace が欲しいなら、Exception を作るより、Thread.currentThread().getStackTrace()
    を使う方がいいですよ。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5830'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5830
  :user_name: 99yen
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/591/
  :language: 
  :time: 2008/02/22 06:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ああ、本当ですね。ありがとうございます。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5831'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5831
  :user_name: Tokusei Noborio
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/729/
  :language: Scheme
  :time: 2008/02/22 14:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    (define (main args)
      (print (car args))
      0)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5837'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5837
  :user_name: turkey
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/699/
  :language: PHP
  :time: 2008/02/23 16:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>コマンドラインから</p>\n\n\t"
  :code: |
    print $argv[0];
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5840'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5840
  :user_name: nori
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/59/
  :language: 
  :time: 2008/02/24 23:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>質問です。\nln -sの影響を受けるのでしょうか？</p>\n<p><a class=\"reference\" href=\"/web/20100612154741/http://jr0bak.homelinux.net/~imai/linux/embedded_beginner-5.html#ss5.2\">http://jr0bak.homelinux.net/~imai/linux/embedded_beginner-5.html#ss5.2</a></p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5848'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5848
  :user_name: kozima
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2008/02/26 03:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ロード中のファイルの pathname が\n*load-pathname* に入っています。\nファイル名を文字列として取得するには
    file-namestring を使います。</p>\n\n\t"
  :code: |
    (print (file-namestring *load-pathname*))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5851'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5851
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: Delphi
  :time: 2008/02/26 12:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ファイル名だけ取得する場合。ExtractFilenameでファイル名だけ取り出します。</p>\n\n\t"
  :code: |
    uses
      SysUtils;

    begin
      Writeln(ExtractFilename(ParamStr(0)));
    end.
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5888'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5888
  :user_name: cooldaemon
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/451/
  :language: Erlang
  :time: 2008/02/28 01:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">escript で。</pre>\n\t"
  :code: |
    #!/usr/bin/env escript
    main(_) -&gt; io:fwrite("~s~n", [escript:script_name()]).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5906'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5906
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: Lua
  :time: 2008/03/01 08:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    print(arg[0])
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5916'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/5916
  :user_name: howking
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/744/
  :language: Erlang
  :time: 2008/03/01 20:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">もっといい方法がありそう。。。\r\n\r\n実行結果\r\n$erl -noshell
    -run my bin -s init stop\r\nmy.beam\r\n$erl -noshell -run my src -s init stop\r\nmy.erl\r\n</pre>\n\t"
  :code: |
    -module(my).
    -export([src/0,bin/0]).
    src()-&gt;
        io:format("~s~n",[filename:basename(?FILE)]).
    bin()-&gt;
        io:format("~s~n",[filename:basename(code:which(?MODULE))]).
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6004'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6004
  :user_name: futoase
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/686/
  :language: Python
  :time: 2008/03/12 07:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>蛇足。</p>\n\n\t"
  :code: |
    import sys
    import os

    print os.path.split(sys.argv[0])[1]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6059'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6059
  :user_name: まさぽん
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/711/
  :language: Scheme
  :time: 2008/03/24 07:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  他の投稿を見るに、題意を読み違えてたようだ。\r<br>でも敢えて投稿。\r<br><br>実行後、何らかの入力を行う度にファイル名を出力する。\r<br>下の実行例は 3 回目の入力を行う前に\r<br>$ mv ownname.scm hoge.scm\r<br>とリネームしている例。\r<br>実行例:\r<br>$ ./ownname.scm \r<br>?\r<br>ownname.scm\r<br>?\r<br>ownname.scm\r<br>?\r<br>hoge.scm\r<br>?\r<br>hoge.scm\r<br><br>"
  :code: "#!/usr/bin/gosh\n\n(use gauche.selector)\n(use gauche.process)\n(use file.util)\n\n(define
    (main args)\n  (let ((ino (number-&gt;string (file-ino *program-name*)))\n       (selector
    (make &lt;selector&gt;)))\n    (selector-add! selector \n                   (standard-input-port)\n
    \                  (lambda (port flag)\n                     (if (not (eof-object?
    (read-line port)))\n                         (let1 p (run-process (list \"find\"
    \"./\" \"-inum\" ino) :output :pipe)\n                           (display (sys-basename
    (read-line (process-output p))))\n                           (newline))\n                         (exit)))\n
    \                  '(r))\n    (do () (#f) (selector-select selector))))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6307'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6307
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2008/05/20 14:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  今のところWindowsにのみ対応しています。\n\t"
  :code: |
    #include &lt;stdio.h&gt;

    /* The backslash is 0x5C in ASCII. */
    #ifdef WIN32
    #define PASS_SLICE 0x5C
    #define HAVE_SLICE TRUE
    #endif

    #ifdef HAVE_SLICE
    #include &lt;string.h&gt;
    #endif

    int main(int argc, char* argv[])
    {
        char *point;

    #ifdef HAVE_SLICE
        point = strrchr(argv[0], PASS_SLICE);
    #else
        point = NULL;
    #endif

        printf("%s\n", (point == NULL) ? argv[0] : ++point);

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6380'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6380
  :user_name: tilde
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/446/
  :language: Objective
  :time: 2008/05/30 03:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>開発環境： Mac OS X 10.5.2, Xcode 3.1 (Beta)</p>\n\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n\nint main (int argc, const char
    * argv[]) {\n    NSAutoreleasePool * pool = [[NSAutoreleasePool alloc] init];\n
    \   \n    NSLog( [[[NSBundle mainBundle] executablePath] lastPathComponent] );\n
    \   \n    [pool drain];\n    return 0;\n}\n"
  :tags:
  - Mac
  - Xcode
  :references:
    :url: 
    :title: 
- :id: '6443'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6443
  :user_name: 匿名
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/06/05 11:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ちょっと意地悪かもしれませんが、java -jar foo.jarで実行された場合、私の理解ではfoo.jarが正解だと思います。他の答えではわからないので、一番答えに近いのはこれかなと思います。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6715'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6715
  :user_name: nemo_kaz
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/837/
  :language: Groovy
  :time: 2008/07/11 03:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  fumokmm氏のコードが参考になりました。\r\nThrowableのstackTraceからエラー処理でなく情報を抜き取る技は、いろいろ応用が効きそうです。\r\n\n\t"
  :code: |
    def getFileName() {
        def the_thisClassName = getClass().getName()
        def the_inThisObject = new Throwable().getStackTrace().findAll     {
                the_stackTraceElement -&gt;
                the_thisClassName.equals(the_stackTraceElement.getClassName())
            }
        return the_inThisObject[1].getProperties().fileName
    }

    println getFileName()
  :tags: []
  :references:
    :url: /web/20100612154741/http://d.hatena.ne.jp/fumokmm/20070724
    :title: 'No Programming, No Life '
- :id: '6792'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/6792
  :user_name: pooq
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/606/
  :language: J
  :time: 2008/07/22 01:29 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">windows 用のコンソール版の場合です。\r\n</pre>\n\t"
  :code: |
    exit echo &gt;1{ARGV
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8082'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/8082
  :user_name: yyamasak
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/722/
  :language: Tcl
  :time: 2008/11/26 05:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>間違えました。</p>\n\n\t"
  :code: |
    puts [file tail [info script]]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8083'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/8083
  :user_name: genzou
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/793/
  :language: Groovy
  :time: 2008/11/26 21:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>拡張子を除けば･･･</p>\n\n\t"
  :code: |
    println this.class.name
  :tags:
  - groovy
  :references:
    :url: 
    :title: 
- :id: '8705'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/8705
  :user_name: Kpan
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/1031/
  :language: HSP
  :time: 2009/03/21 22:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include "kernel32.as"

        sdim pFilename, 260

        GetModuleFileName 0, varptr(pFilename), 260
        mes getpath(pFilename, 8)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8706'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/8706
  :user_name: kkobayashi
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2009/03/21 23:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Rスクリプトを実行するには、\"--file=スクリプト名\"、\"-f スクリプト名\"、標準入力のいずれかでスクリプトを渡します。標準入力の場合はR本体の名前を出しています。</p>\n\n\t"
  :code: |
    l &lt;- commandArgs()
    p &lt;- which(l == "-f")  # -f [script.R]
    s &lt;- grep("--file=", l, value=T) # --file=[script.R]

    my.name &lt;- ifelse(length(s), sub("--file=", "", s), ifelse(length(p), l[p+1], l[1]))
    basename(my.name)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8819'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/8819
  :user_name: spoon
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/1036/
  :language: StandardML
  :time: 2009/04/16 07:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    print (CommandLine.name () ^ "\n");
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8833'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/8833
  :user_name: lunlumo
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/04/22 09:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　Scalaの場合mainメソッドはobjectに定義するのでJavaより素直に書けますが，返る結果は余り得てもうれしくない物かもです。</p>\n\n\t"
  :code: |
    object SelfName {
        def main(args:Array[String]):Unit =
            println(this.getClass.getClassLoader.getResource(this.getClass.getName.replaceAll("\\.","\\\\") + ".class"))
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9035'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/9035
  :user_name: egtra
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/06/02 11:47 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Cとほとんど変えずにargv[0]をstd::coutへ出力するだけでは芸がないので、Win32APIでフルパスを取得後<a
    href=\"/web/20100612154741/http://www.boost.org/libs/filesystem/\">Boost.Filesystem</a>でファイル名部分だけを切り出すという風にしました。\n</p>\n\n\n\n\t"
  :code: |
    #define WIN32_LEAN_AND_MEAN

    #include &lt;iostream&gt;
    #include &lt;boost/filesystem.hpp&gt;
    #include &lt;windows.h&gt;

    namespace fs = boost::filesystem;

    int main()
    {
        char buf[MAX_PATH];
        GetModuleFileNameA(0, buf, MAX_PATH);
        fs::path path(buf);
        std::cout &lt;&lt; path.leaf() &lt;&lt; std::endl;
    }
  :tags:
  - Boost
  - Boost.Filesystem
  - Boost1.39
  - Win32API
  - Windows
  :references:
    :url: 
    :title: 
- :id: '9366'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/9366
  :user_name: egtra
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/759/
  :language: PowerShell
  :time: 2009/07/14 09:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  1行目にファイル名、2行目にフルパス、3行目にスクリプトのあるディレクトリのパスが出力されます。スクリプトの置いてあるフォルダ以下のファイル群に対して処理を行いたいということがあったので調べました。\n\t"
  :code: |
    echo $MyInvocation.MyCommand.Name
    echo $MyInvocation.MyCommand.Path
    echo (Split-Path -Parent $MyInvocation.MyCommand.Path)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9831'
  :parent_id: '151'
  :url: http://ja.doukaku.org/comment/9831
  :user_name: taka_2
  :user_url: /web/20100612154741/http://ja.doukaku.org/user/1132/
  :language: Other
  :time: 2010/01/18 02:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    WScript.Echo(WScript.ScriptName)
  :tags:
  - VBScript
  :references:
    :url: 
    :title: 
