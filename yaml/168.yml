---
:id: '168'
:title: ポリゴンを表示するプログラム
:comments:
- :id: '5940'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/5940
  :user_name: ところてん
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2008/03/05 08:38 GMT
  :vote_count: '4'
  :vote_score: '0'
  :body: "\r\n\t  <pre class=\"compact\">適当なポリゴンを表示させて、描画するプログラムを書いてください。\r\nポリゴンは回転させてください。\r\n\r\n2D処理だけなら、標準ライブラリで大体いけますが、\r\n3D処理は追加でライブラリを利用すると思うので、\r\n何のライブラリを利用したのか書いてください。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6007'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6007
  :user_name: turugina
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2008/03/13 04:06 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">ネタ回答～\r\n適当なポリゴンを表示してしかもポリゴンは回っています</pre>\n\t"
  :code: |
    use strict;

    my @pos = (
    [[0,0],[1,1],[2,2],[3,3]],
    [[1,0],[1,1],[2,2],[2,3]],
    [[2,0],[2,1],[1,2],[1,3]],
    [[3,0],[2,1],[1,2],[0,3]],
    [[3,1],[2,1],[1,2],[0,2]],
    [[3,2],[2,2],[1,1],[0,1]],
    [[3,3],[2,2],[1,1],[0,0]],
    [[2,3],[2,2],[1,1],[1,0]],
    [[1,3],[1,2],[2,1],[2,0]],
    [[0,3],[1,2],[2,1],[3,0]],
    [[0,2],[1,2],[2,1],[3,1]],
    [[0,1],[1,1],[2,2],[3,2]],
    );

    my $i = 0;
    while (1) {
      my $cpos = $pos[$i];
      my @cell;
      $cell[$cpos-&gt;[0][0]][$cpos-&gt;[0][1]] = 'ポ';
      $cell[$cpos-&gt;[1][0]][$cpos-&gt;[1][1]] = 'リ';
      $cell[$cpos-&gt;[2][0]][$cpos-&gt;[2][1]] = 'ゴ';
      $cell[$cpos-&gt;[3][0]][$cpos-&gt;[3][1]] = 'ン';

      clear_screen();
      print "適当な\n";
      foreach my $c ( @cell ) {
        foreach my $cc ( @$c ) {
          print $cc ? $cc : '  ';
        }
        print "\n";
      }
      sleep 1;
    } continue {
      if ( ++$i == @pos ) {
        $i = 0;
      }
    }

    sub clear_screen
    {
      if ( $^O =~ /Win32/ ) {
        system('cls');
      }
      else {
        if (system('clear') != 0) {
          print "\x1b[2J";
        }
      }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6009'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6009
  :user_name: fujidig
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/507/
  :language: HSP
  :time: 2008/03/13 08:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  HSP 3.1以降に標準添付のライブラリ d3module を使って。\n\t"
  :code: "#include \"d3m.hsp\"\n    \n    xs = -1, 1, 1,-1\n    ys = -1,-1, 1, 1\n
    \   \n    repeat\n        redraw 0\n        color 255, 255, 255 : boxf\n        d3setcam
    1500, 0, 500\n        color\n        d3initlineto\n        rad = 0.05 * cnt\n
    \       repeat 5\n            x = xs(cnt\\4) * 500\n            y = ys(cnt\\4)
    * 500\n            d3rotate x, y, x, y, rad\n            d3lineto x, y, 0\n            d3line
    x, y, 0, 0, 0, 700\n            d3line x, y, 0, 0, 0, -700\n        loop\n        redraw\n
    \       await 40\n    loop\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6010'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6010
  :user_name: sumim
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2008/03/13 10:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。Balloon3D というパッケージを用いて正十二面体を回転させました。</p>\n\n\t"
  :code: |
    | sceneObj view solid colors |
    solid := B3DRegularSolid dodekahedron.
    colors := (Color wheel: 12) collect: [:each | each asB3DColor].
    solid setFaceColors: colors.
    sceneObj := B3DSceneObject named: 'solid'.
    sceneObj geometry: solid.
    view := AdvancedB3DSceneMorph new.
    view scene objects: (OrderedCollection with: sceneObj).
    view beRotating; openInHand
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: /web/20081121105417/http://wiki.squeak.org/squeak/2713
    :title: Balloon3D - a tutorial
- :id: '6015'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6015
  :user_name: 匿名
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2008/03/15 13:03 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ポリゴン(多角形) でよいのでしょうか?\nそれともポリヘドロン(多面体)?\nポリゴンを面内で回す分には3次元ライブラリは要らなそうですが....</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6016'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6016
  :user_name: Y
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/428/
  :language: Mathematica
  :time: 2008/03/17 03:25 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">以下の手順で描いています(Mathematica 6)。\r\n\r\n1. 頂点を定義\r\n2.
    ポリゴンを定義\r\n3. 描画\r\n\r\nマウスでドラッグすると回転します。\r\n\r\n特別なライブラリは使っていません。\r\n（Mathematica
    5だと「&lt;&lt; RealTime3D`」が必要です。）</pre>\n\t"
  :code: |
    a = {1, 0, 0};
    b = {-1/2, Sqrt@3/2, 0};
    c = {-1/2, -Sqrt@3/2, 0};
    d = {0, 0, Sqrt@2};

    tetra = {
       Polygon[{a, b, c}],
       Polygon[{a, b, d}],
       Polygon[{b, c, d}],
       Polygon[{c, a, d}]
      };

    Show[Graphics3D[tetra]]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6018'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6018
  :user_name: にしお
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2008/03/17 09:22 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>たぶん題意は「ポリゴンを3次元的に回す(面内で回すのではなく)」と言うことでしょう。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6022'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6022
  :user_name: 匿名
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/4/
  :language: Python
  :time: 2008/03/18 18:55 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>VPython</p>\n\n\t"
  :code: |
    from visual import *
    redbox=box()
    while 1: redbox.rotate(angle=1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6023'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6023
  :user_name: 匿名
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2008/03/20 09:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  題意を、\r<br><br>・ポリゴンによって任意の立体を表示する。\r<br>・立体は回転させる。\r<br><br>という意味と解釈しました。\r<br><br>Java3Dによって立方体を回転させています。回転はY軸方向とX軸方向のそれぞれで行っています（Y軸方向だけでも良かったのですが、それでは全部の面が見えないのでX軸方向の回転を追加しました）。\n\t"
  :code: |
    import javax.swing.*;
    import java.awt.*;
    import javax.media.j3d.*;
    import javax.vecmath.*;
    import com.sun.j3d.utils.universe.*;
    import com.sun.j3d.utils.geometry.ColorCube;

    @SuppressWarnings("serial")
    public class Sample3D extends JFrame {
        public BranchGroup createSceneGraph() {
            BranchGroup objRoot = new BranchGroup();

            TransformGroup objTrans = new TransformGroup();
            objTrans.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
            objRoot.addChild(objTrans);

            Transform3D axis = new Transform3D();
            axis.rotZ(Math.PI / 2);
            BoundingSphere bounds = new BoundingSphere(new Point3d(), 100.0);
            RotationInterpolator rotator = new RotationInterpolator(new Alpha(-1,
                    20 * 4000), objTrans, axis, 0.0f, (float) Math.PI * 2.0f);
            rotator.setSchedulingBounds(bounds);
            objRoot.addChild(rotator);

            TransformGroup objTrans2 = new TransformGroup();
            objTrans2.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
            objTrans.addChild(objTrans2);
            rotator = new RotationInterpolator(new Alpha(-1, 4000), objTrans2);
            rotator.setSchedulingBounds(bounds);
            objRoot.addChild(rotator);

            objTrans2.addChild(new ColorCube(0.4));
            objRoot.compile();
            return objRoot;
        }

        public Sample3D() {
            getContentPane().setLayout(new BorderLayout());
            GraphicsConfiguration config = SimpleUniverse.getPreferredConfiguration();
            Canvas3D canvas = new Canvas3D(config);
            getContentPane().add(canvas, BorderLayout.CENTER);
            BranchGroup scene = createSceneGraph();
            SimpleUniverse universe = new SimpleUniverse(canvas);
            universe.getViewingPlatform().setNominalViewingTransform();
            universe.addBranchGraph(scene);
        }

        public static void main(String[] args) {
            Sample3D sample = new Sample3D();

            sample.setBounds(10, 10, 480, 480);
            sample.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            sample.setVisible(true);
        }
    }
  :tags:
  - Java3D
  :references:
    :url: 
    :title: 
- :id: '6036'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6036
  :user_name: tenka
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/664/
  :language: C
  :time: 2008/03/21 13:26 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <pre class=\"compact\">DirectXを使いました～。\r\n平面ポリゴンを回転させてるだけです。</pre>\n\t"
  :code: "using System;\nusing System.Drawing;\nusing System.Windows.Forms;\n\nusing
    Microsoft.DirectX;\nusing Microsoft.DirectX.Direct3D;\n\nclass ViewPoly : Form\n{\n
    \   private Device dev;\n    private VertexBuffer vertex;\n    private float polyTheta
    = 0.0f;\n\n    public bool Init()\n    {\n        this.Text = \"ポリゴン回ります\";\n
    \       this.MaximizeBox = false;\n        this.FormBorderStyle = FormBorderStyle.FixedSingle;\n
    \       this.Size = new Size(480, 480);\n\n        PresentParameters pp = new
    PresentParameters();\n        pp.Windowed = true;\n        pp.SwapEffect = SwapEffect.Discard;\n
    \       pp.EnableAutoDepthStencil = true;\n        pp.AutoDepthStencilFormat =
    DepthFormat.D16;\n\n        try\n        {\n            this.dev = new Device(\n
    \               0, \n                DeviceType.Reference,\n                this.Handle,\n
    \               CreateFlags.SoftwareVertexProcessing,\n                pp\n            );\n
    \       }\n        catch\n        {\n            return false;\n        }\n\n
    \       this.vertex = new VertexBuffer(\n            typeof(CustomVertex.PositionColored),\n
    \           4,\n            this.dev,\n            Usage.None,\n            CustomVertex.PositionColored.Format,\n
    \           Pool.Managed\n        );\n\n        this.dev.Transform.View = Matrix.LookAtLH(\n
    \           new Vector3(0.0f, 0.0f, -15.0f),\n            new Vector3(0.0f, 0.0f,
    0.0f),\n            new Vector3(0.0f, 1.0f, 0.0f)\n        );\n\n        this.dev.Transform.Projection
    = Matrix.PerspectiveFovLH(\n            Geometry.DegreeToRadian(60.0f),\n            (float)this.dev.Viewport.Width
    / (float)this.dev.Viewport.Height,\n            1.0f,\n            100.0f\n        );\n\n
    \       this.dev.RenderState.Lighting = false;\n        this.dev.RenderState.CullMode
    = Cull.None;\n\n        return true;\n    }\n\n    public void Render()\n    {\n
    \       this.dev.Clear(ClearFlags.Target | ClearFlags.ZBuffer, Color.DarkBlue,
    1.0f, 0);\n        this.dev.BeginScene();\n        this.RollingPoly();\n        this.dev.EndScene();\n
    \       this.dev.Present();\n\n    }\n\n    private void RollingPoly()\n    {\n
    \       float theta = Geometry.DegreeToRadian(\n            (float)((polyTheta
    -= 10.0f) % 360.0f)\n        );\n\n        CustomVertex.PositionColored[] vertexPc\n
    \           = new CustomVertex.PositionColored[4];\n\n        vertexPc[0] = new
    CustomVertex.PositionColored(\n            -4.0f * (float)(Math.Sin(theta)),\n
    \           4.0f,\n            -4.0f * (float)Math.Cos(theta),\n            Color.Red.ToArgb()\n
    \       );\n        vertexPc[1] = new CustomVertex.PositionColored(\n            4.0f
    * (float)(Math.Sin(theta)),\n            4.0f,\n            4.0f * (float)Math.Cos(theta),\n
    \           Color.Blue.ToArgb()\n        );\n        vertexPc[2] = new CustomVertex.PositionColored(\n
    \           -4.0f * (float)(Math.Sin(theta)),\n            -4.0f,\n            -4.0f
    * (float)Math.Cos(theta),\n            Color.Red.ToArgb()\n        );\n        vertexPc[3]
    = new CustomVertex.PositionColored(\n            4.0f * (float)(Math.Sin(theta)),\n
    \           -4.0f,\n            4.0f * (float)Math.Cos(theta),\n            Color.Blue.ToArgb()\n
    \       );\n\n        using (GraphicsStream gs\n            = this.vertex.Lock(0,
    0, LockFlags.None))\n        {\n            gs.Write(vertexPc);\n            this.vertex.Unlock();\n
    \       }\n\n        this.dev.SetStreamSource(0, this.vertex, 0);\n        this.dev.VertexFormat
    = CustomVertex.PositionColored.Format;\n        this.dev.DrawPrimitives(PrimitiveType.TriangleStrip,
    0, 2);\n    }\n\n    public void dispose()\n    {\n        if (this.vertex !=
    null)\n            this.vertex.Dispose();\n\n        if (this.dev != null)\n            this.dev.Dispose();\n
    \   }\n\n    public static void Main(string[] args)\n    { \n        using (ViewPoly
    vp = new ViewPoly())\n        {\n            if (vp.Init())\n            {\n                vp.Show();\n
    \               while (vp.Created)\n                {\n                    vp.Render();\n
    \                   Application.DoEvents();\n                    System.Threading.Thread.Sleep(50);\n
    \               }\n                vp.dispose();\n            }\n        }\n    }\n}\n"
  :tags: []
  :references:
    :url: /web/20081121105417/http://sorceryforce.com/index.html
    :title: ソーサリーフォース
- :id: '6041'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6041
  :user_name: 匿名
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2008/03/22 09:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  プログラムと呼ぶのかはわかりませんが、マウスでぐりぐりっと回転できます.\r<br>VRMLビューアが必要です.\n\t"
  :code: |
    #VRML V2.0 utf8
    Shape {
      geometry IndexedFaceSet {
        coord Coordinate {
          point [ 0 0 0.3, 0 2 0, 1.73 -1 0, -1.73 -1 0 ]
        }
        coordIndex [
         0 1 2 -1
         0 2 3 -1
         0 3 1 -1
        ]
        solid FALSE
      }
      appearance Appearance {
        material Material {}
      }
    }
  :tags:
  - VRML
  :references:
    :url: /web/20081121105417/http://www.km.kongsberg.com/sim
    :title: VRMLview
- :id: '6047'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6047
  :user_name: silverwire
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/646/
  :language: JavaScript
  :time: 2008/03/22 20:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ありふれた環境でもできないものかと、 ECMA Script + SVGで書きました。\r\n\r\n
    tetrahedron.svgなどの名前でファイルを保存し、ブラウザにドラッグアンドドロップす\r\nることで、回転する四面体が表示されます。\r\n\r\nAdobe
    SVG Viewerでは動作しません。 Firefox 2.0.0.8, Opera 9.26, Safari 3.1で動作\r\nを確認しました。</pre>\n\t"
  :code: "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;!DOCTYPE svg PUBLIC
    \"-//W3C//DTD SVG 20010904//EN\" \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\"&gt;\n&lt;svg
    xmlns=\"http://www.w3.org/2000/svg\" onload=\"new Tetrahedron(100).rotate(1, 1)\"&gt;\n
    \   &lt;script type=\"text/ecmascript\"&gt;\n    &lt;![CDATA[\n        var NS
    = document.documentElement.getAttribute('xmlns'); // 名前空間\n\n        Function.prototype._setInterval
    = \n        function (t, o, v) {\n            var _ = this;\n            return
    setInterval(function () { _.apply(o, v); }, t);\n        };\n\n        var Tetrahedron
    = \n        function (n /* 一辺の長さ */) {\n            this._ = null;\n            this.u
    = null; // 上面\n            this.l = null; // 下面\n            this.s = [  ]; //
    側面\n            this.x = 0;\n            this.y = 0;\n            this.R = (Math.PI
    / 180).toFixed(2); // ラジアン角\n            this.S = n;\n            this.X = [ 0,
    n, n, 0 ];\n            this.Z = [ 0, 0, n, n ];\n\n            // 正四面体\n            this._
    = document.createElementNS(NS, 'g');\n            this._.setAttribute('transform',
    'translate(250, 250)');\n            document.rootElement.appendChild(this._);\n
    \           // 上面\n            this.u = document.createElementNS(NS, 'path');\n
    \           this.u.setAttribute('stroke', 'none');\n            this.u.setAttribute('fill',
    '#000000');\n            this.u.setAttribute('opacity', 0.4);\n            this._.appendChild(this.u);\n
    \           // 下面\n            this.l = document.createElementNS(NS, 'path');\n
    \           this.l.setAttribute('stroke', 'none');\n            this.l.setAttribute('fill',
    '#000000');\n            this.l.setAttribute('opacity', 0.4);\n            this._.appendChild(this.l);\n
    \           // 側面\n            for (i = 0; i &lt; 4; i++) {\n                this.s[i]
    = document.createElementNS(NS, 'path');\n                this.s[i].setAttribute('stroke',
    'none');\n                this.s[i].setAttribute('fill', '#000000');\n                this.s[i].setAttribute('opacity',
    0.5);\n                this._.appendChild(this.s[i]);\n            }\n            //
    ビューポート\n            document.rootElement.setAttribute('width' , 500);\n            document.rootElement.setAttribute('height',
    500);\n            // ビューボックス\n            document.rootElement.setAttribute('viewBox',
    '0 0 500 500');\n            document.rootElement.setAttribute('preserveAspectRatio',
    'xMinYMin slice');\n        };\n\n        Tetrahedron.prototype.move = \n        function
    (v /* 垂直方向の増分 */, h /* 水平方向の増分 */) {\n            var U = [], L = [];\n            var
    l = '', u = '', s = '';\n            var i, j;\n\n            this.x += v; this.y
    += h;\n\n            // 上面, 下面\n            for (i = 0; i &lt; 4; i++) {\n                U[i]
    = this.transform(this.x * this.R, this.y * this.R, 0, this.X[i], this.S, this.Z[i]);\n
    \               L[i] = this.transform(this.x * this.R, this.y * this.R, 0, this.X[i],
    \     0, this.Z[i]);\n                u += ((i == 0) ? 'M' : 'L') + ' ' + U[i].x
    + ' ' + U[i].y + ' ';\n                l += ((i == 0) ? 'M' : 'L') + ' ' + L[i].x
    + ' ' + L[i].y + ' ';\n            }\n            this.u.setAttribute('d', u +
    'Z');\n            this.l.setAttribute('d', l + 'Z');\n            // 側面\n            for
    (i = 0, j = 1; i &lt; 4; i++, j++) {\n                if (j == 4) j = 0;\n                s
    = 'M ' + L[i].x + ' ' + L[i].y + ' '\n                  + 'L ' + U[i].x + ' '
    + U[i].y + ' '\n                  + 'L ' + U[j].x + ' ' + U[j].y + ' '\n                  +
    'L ' + L[j].x + ' ' + L[j].y + ' ';\n                this.s[i].setAttribute('d',
    s + 'Z');\n            }\n        };\n\n        Tetrahedron.prototype.transform
    = \n        function (_x, _y, _z, x, y, z) {\n            var __x, __y, __z;\n\n
    \           __x = x * Math.cos(_y) +   z * Math.sin(_y);\n            __z = z
    * Math.cos(_y) -   x * Math.sin(_y);\n            __y = y * Math.cos(_x) - __z
    * Math.sin(_x);\n\n            return { 'x' : __x * Math.cos(_z) - __y * Math.sin(_z)\n
    \                  , 'y' : __x * Math.sin(_z) + __y * Math.cos(_z)\n                   };
    // アフィン変換\n        };\n\n        Tetrahedron.prototype.rotate = \n        function
    (h, v) {\n            this.move._setInterval(50, this, [ h, v ]);\n        };\n
    \   ]]&gt;\n    &lt;/script&gt;\n&lt;/svg&gt;\n"
  :tags:
  - SVG
  :references:
    :url: 
    :title: 
- :id: '6078'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6078
  :user_name: M.Suzuki
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/771/
  :language: Haskell
  :time: 2008/03/27 23:19 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>昔どこかのページを参考に作った奴です。</p>\n\n\t"
  :code: |
    module Main where

    import System
    import Graphics.UI.GLUT
    import System.Random

    display n = do
        clear [ ColorBuffer ]
        color $ Color3 (0.6::Double) 0.6 0.6
        preservingMatrix $ do
            renderPrimitive Polygon $ mapM_ vertex (nlist n)
        flush
        where
            nlist n = nVertex n du
            du = 2.0 * pi / fromIntegral n

    nVertex n du
        | n == 0        = [ point ]
        | otherwise     = point : nVertex (n-1) du
        where
            radius = 0.75
            x = toRational (radius * cos (pi / 2.0 + fromIntegral n * du))
            y = toRational (radius * sin (pi / 2.0 + fromIntegral n * du))
            point = Vertex3 (fromRational x) (fromRational y) (0.0 :: GLfloat)


    timer n = do
            rotate (1::Double) (Vector3 0 1 0)
            display n
            finish
            addTimerCallback 10 (timer n)

    inputKey (Char 'q') _ _ _  = exitWith ExitSuccess
    inputKey _ _ _ _            = return ()

    main = do
        (fileName, args) &lt;- getArgsAndInitialize
        let n = case args of
            [] -&gt; 3
            _ -&gt; max 3 $ read $ head args
        createWindow "Haskell OpenGL"
        displayCallback $= display n
        addTimerCallback 1000 (timer n)
        keyboardMouseCallback $= Just (inputKey)
        mainLoop
  :tags:
  - Haskell
  - OpenGL
  :references:
    :url: 
    :title: 
- :id: '6080'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6080
  :user_name: Nemo
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/685/
  :language: PostScript
  :time: 2008/03/28 14:34 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">PostScript で。\r\n2次元なら簡単なんですが、3次元は手頃なライブラリが見当らないので力技で。\r\n動画というわけにはいかないので、パラパラ漫画を出力します。\r\nシェーダーを実装する元気はないので、立体感は強引な陰線処理と\r\nステレオ図の出力で勘弁しといて下さい。\r\n#
    どっかにレイトレースする PS のコードがあったような....\r\n前半分はひたすら行列計算用のコードです。\r\n\r\nこのままプリンタ出力すると 36枚で立方体がぐるっと一周まわります。\r\nghostscriptかAcrobat
    でページをすばやく切り替えて眺めてやると\r\n回っているように見えるかなぁ.....</pre>\n\t"
  :code: "%!PS\n\n% Tiny Vector Library\n/DotProduct { % [Vector1] [Vector2]  DotProduct
    scaler\n    [ 3 1 roll\n    dup length 1 sub 0 1 3 -1 roll {\n        3 copy get
    3 1 roll exch get mul 3 1 roll\n    } for\n    pop pop\n    ]\n\n    0 exch\n
    \   { add } forall\n} bind def\n\n/VectorAdd { % [Vector1] [Vector2]   VectorMul
    \ [NewVector]\n    [ 3 1 roll\n    dup length 1 sub 0 1 3 -1 roll {\n    3 copy
    get 3 1 roll exch get add 3 1 roll\n    } for\n    pop pop\n    ]\n} bind def\n\n/VectorScale
    { % [Vector] scale  VectorScale  [Vector']\n    0 1 3 index length 1 sub {\n        2
    index 1 index get\n        2 index mul\n        3 index 3 1 roll put\n    } for\n
    \   pop\n} bind def\n\n/VectorCopy { % [Vector]  VectorScale  [NewVector]\n    aload
    length array astore\n} bind def\n\n\n% Tiny Matrix Library\n/MatrixTranspose {
    % [Matrix1] MatrixTranspose [NewMatrix]\n    [ exch\n    dup 0 get length 1 sub
    0 1 3 -1 roll\n    {\n        [ exch 2 index\n        {\n            1 index get\n
    \           exch\n        } forall\n        pop ]\n        exch\n    } for\n    pop\n
    \   ]\n} bind def\n\n/MatrixMul { % [[Matrix1]] [[Matrix2]]  MatrixMul  [[NewMatrix]]\n
    \   MatrixTranspose exch\n    [ 3 1 roll\n    {\n        [ exch 2 index\n        {\n
    \           1 index DotProduct exch\n        } forall\n        pop\n    ] exch\n
    \   } forall\n    pop\n    ]\n} bind def\n\n/MatrixCopy { % [[Matrix]] MatrixCopy
    [[NewMatrix]]\n    [ exch\n    {\n        VectorCopy\n    } forall\n    ]\n} bind
    def\n\n/Matrix3Copy { % [[[Matrix]]] Matrix3Copy [[[NewMatrix]]]\n    [ exch\n
    \   {\n        MatrixCopy\n    } forall\n    ]\n} bind def\n\n/VectorZero { %
    [Vector] VectorZero [Vector']\n    0 1 2 index length 1 sub {\n        1 index
    exch 0 put\n    } for\n} bind def\n/VectorRoll { % [Vector] roll_count VectorRoll
    [Vector']\n    mark 2 index aload length counttomark 1 add index roll\n    counttomark
    2 add index astore pop pop pop\n} bind def\n\n/MatrixIdentity { % size MatrixIdentity
    [[NewMatrix]]\n    [ exch dup array VectorZero dup 0 1 put\n    % [ size [1 0
    ... 0]\n    exch {\n        dup VectorCopy 1 VectorRoll\n    } repeat\n    pop\n
    \   ]\n} bind def\n\n% End of Matrix Library\n% --------------------------------------\n/VY
    { [ exch ] MatrixTranspose } bind def\n/VX { MatrixTranspose 0 get } bind def\n\n/RotateMatrixX
    { % theta(degree)   RotateMatrixX   [Matrix]\n    dup cos exch sin 2 copy neg
    % cos sin cos -sin\n    [\n        [ 1 0 0]\n        [ 0 6 -2 roll ]\n        [
    0 7 -2 roll exch ]\n    ]\n} bind def\n\n/RotateMatrixY { % theta(degree)   RotateMatrixY
    \  [Matrix]\n    dup cos exch sin 2 copy neg % cos sin cos -sin\n    [\n        [
    6 -1 roll 0 7 -1 roll ]\n        [ 0 1 0 ]\n        [ 5 -1 roll 0 7 -1 roll ]\n
    \   ]\n} bind def\n\n/RotateMatrixZ { % theta(degree)   RotateMatrixZ   [Matrix]\n
    \   dup cos exch sin 2 copy neg % cos sin cos -sin\n    [\n        [ 4 -2 roll
    0 ]\n        [ 5 -2 roll exch 0 ]\n        [ 0 0 1 ]\n    ]\n} bind def\n\n/CompareDistance
    { % [x1 y1 z1] [x2 y2 z2] CompareDistance [] [] z1-z2\n    dup 0 get 2 get 3 -1
    roll dup 0 get 2 get\n    % [V2] z2 [V1] z1\n    exch 4 1 roll sub\n} bind def\n\n/Sort
    { % [[x y] [x1 y1] Array Data ] {CompareFunction}  Sort [ArrayData]\n    cvx [
    3 -1 roll\n    aload length\n    % func -mark[- [] [] [] [] [] len\n    -1 2 {
    % func -mark[- [] [] [] [] [] len2\n        -1 2 {\n            3 1 roll\n            counttomark
    1 add index exec  %% Compare\n            0 lt { exch } if\n            3 -1 roll\n
    \           1 roll\n        } for\n        counttomark 1 roll\n    } for\n    counttomark
    1 roll\n    ] exch pop\n} bind def\n\n/CalcVertex { % [Vect] distance scale  CalcVertex
    \ x y\n        3 -1 roll aload pop\n        % distance scale x y z\n        5
    -2 roll exch\n        % x y z scale  distance\n        dup 0 eq {\n            pop
    \ exch pop\n        } {\n            3 -1 roll add div\n        } ifelse\n        %
    x y scale\n        dup 3 -1 roll mul\n        % x scale scale*y\n        3 1 roll
    mul exch\n} bind def\n\n\n/DrawPolygon { % [[GC] [Vertex1] [Vertex2] ...] distance
    scale\n    3 -1 roll mark exch aload pop\n    counttomark 2 add index counttomark
    1 add index CalcVertex\n    moveto\n\n    counttomark 1 sub {\n        counttomark
    2 add index counttomark 1 add index CalcVertex\n        lineto\n    } repeat\n
    \   closepath\n    gsave 0.5 setgray fill  grestore\n    0.1 setlinewidth stroke\n
    \   pop pop pop pop\n} bind def\n\n/Projection {\n    % distance scale [[Object]]
    view_matrix Projection\n    %                 distance scale [[Object]] view_matrix
    \n    4 1 roll dup Matrix3Copy dup {\n        % vmt dist scale [[Obj]] [[NewObj]]
    [[Polygon-n]]\n        {\n            % vmt dist scale [[Obj]] [[NewObj]] [[Vertex-n]]\n
    \           dup 6 index exch VY MatrixMul VX\n            0 exch putinterval\n
    \       } forall\n    } forall\n    /CompareDistance Sort\n    % vmt dist scale
    [[Obj]] [[NewObj']] \n    {\n        % vmt dist scale [[Obj]] [[NewPolygon-n]]\n
    \       3 index 3 index DrawPolygon\n    } forall\n    4 -1 roll\n} bind def\n\n\n/Translate
    { % [[[Object]]] [dx dy dz]  Translate [[[Object']]]\n    1 index {\n        %
    [[[Object]]] [dx dy dz] [[Polygon]]\n        {\n            % [[[Object]]] [dx
    dy dz] [x y z]\n            dup 2 index VectorAdd\n            % [[[Object]]]
    [dx dy dz] [x y z] [nx ny nz]\n            0 exch putinterval\n        } forall\n
    \   } forall\n    pop\n} bind def\n\n% ---------------- Test Code -------------------\n\n/Cube
    [\n    % Gravity Center, Vertex1, 2, .... \n    [[0.5 0.5 0] [0 0 0] [1 0 0] [1
    1 0] [0 1 0]]\n    [[0.5 0.5 1] [0 0 1] [1 0 1] [1 1 1] [0 1 1]]\n    [[0 0.5
    0.5] [0 0 0] [0 1 0] [0 1 1] [0 0 1]]\n    [[1 0.5 0.5] [1 0 0] [1 1 0] [1 1 1]
    [1 0 1]]\n    [[0.5 0 0.5] [0 0 0] [0 0 1] [1 0 1] [1 0 0]]\n    [[0.5 1 0.5]
    [0 1 0] [0 1 1] [1 1 1] [1 1 0]]\n] def\n\n\n/Demo {\n    % Projection Distance
    \ &amp; Scale\n    5   400\n    % Object\n    Cube [-0.5 -0.5 -0.5] Translate\n
    \   % Initial View Matrix\n    3 MatrixIdentity\n    -20 RotateMatrixX MatrixMul\n
    \   20 RotateMatrixY MatrixMul\n    5 RotateMatrixZ MatrixMul\n\n    % Rotation\n
    \   36 {\n        gsave\n        200 200 translate\n        1 1 scale\n        0.1
    setlinewidth\n        Projection\n%---- Stereo Projection ----\n        200 0
    translate\n        5 RotateMatrixY MatrixMul\n        Projection\n        -5 RotateMatrixY
    MatrixMul\n%---- End Stereo Projection ----\n        grestore\n        showpage\n
    \       10 RotateMatrixY MatrixMul\n    } repeat\n    4 { pop } repeat\n} bind
    def\n\nDemo\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '6816'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6816
  :user_name: yoggy
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/849/
  :language: Other
  :time: 2008/07/23 20:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Ruby/SDLとOpenGLでベタに書いてみました。\n\t"
  :code: "require 'sdl'\nrequire 'opengl'\n\nvertices = [\n  [[1.0, 0.0, 0.0], [-1.0,
    -1.0, 0.0]],\n  [[0.0, 1.0, 0.0], [ 1.0, -1.0, 0.0]],\n  [[0.0, 0.0, 1.0], [ 1.0,
    \ 1.0, 0.0]],\n  [[1.0, 1.0, 1.0], [-1.0,  1.0, 0.0]]\n]\n\nSDL.init(SDL::INIT_VIDEO)\nSDL::Screen.open(600,
    600, 16, SDL::OPENGL)\n\nGL.ClearColor(0.0, 0.0, 0.2, 1.0);\nGL::Ortho(-2.0, 2.0,
    -2.0, 2.0, -2.0, 2.0)\nGL::MatrixMode(GL::MODELVIEW);\n\nloop {\n  GL.Clear(GL::COLOR_BUFFER_BIT);\n
    \ \n  GL::Rotate(1.0, 2.0, 3.0, 1.0);\n  \n  GL::Begin(GL::QUADS)\n  vertices.each
    {|v|\n    GL::Color(v[0])\n    GL::Vertex(v[1])\n  }  \n  GL::End()\n  \n  SDL::GL.swap_buffers\n
    \ \n  evt = SDL::Event.poll\n  case evt\n  when SDL::Event::Quit\n    exit\n  when
    SDL::Event::KeyUp\n    exit if evt.sym == SDL::Key::ESCAPE\n  end\n}\n"
  :tags:
  - opengl
  - ruby
  - sdl
  :references:
    :url: /web/20081121105417/http://www.kmc.gr.jp/~ohai/rubysdl.html
    :title: Ruby/SDL
- :id: '6877'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6877
  :user_name: 匿名
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2008/07/29 09:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Processing で。\n可視化が本分の Processing で、\npython より長いのがちょっと残念ですが。</p>\n\n\t"
  :code: |
    float theta = 0.0;

    void setup() {
      size(200, 200, P3D);
    }

    void draw() {
      background(0);
      lights();
      translate(width/2, height/2, 0);
      rotateX(PI/3+theta);
      rotateY(theta);
      box(100);
      theta += PI/256;
    }
  :tags:
  - Processing
  :references:
    :url: /web/20081121105417/http://www.processing.org/
    :title: ''
- :id: '6878'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/6878
  :user_name: crane
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/458/
  :language: 
  :time: 2008/07/29 09:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ログインし忘れました</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '7292'
  :parent_id: '168'
  :url: http://ja.doukaku.org/comment/7292
  :user_name: ytakenaka
  :user_url: /web/20081121105417/http://ja.doukaku.org/user/35/
  :language: Common
  :time: 2008/08/21 17:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>cl-glfwを利用しています。付属のサンプルを少し改造しただけです。</p>\n\n\t"
  :code: |
    require '#:asdf)
    (asdf:oos 'asdf:load-op '#:cl-glfw)
    (asdf:oos 'asdf:load-op '#:cl-glfw-opengl)
    (asdf:oos 'asdf:load-op '#:cl-glfw-glu)

    (glfw:do-window ("A Polygon Example")
        ((gl:with-setup-projection
           (glu:perspective 45 4/3 0.1 50)))
      (gl:clear gl:+color-buffer-bit+)
      (gl:load-identity)
      (gl:translate-f 0 0 -5)
      (gl:rotate-f (* 10 (glfw:get-time)) 1 1 0)
      (gl:rotate-f (* 90 (glfw:get-time)) 0 0 1)
      (gl:with-begin gl:+line-loop+ ;+triangle-strip+
        (gl:color-3f 0 1 0) (gl:vertex-3f -1  1 0)
        (gl:color-3f 0 0 1) (gl:vertex-3f -1 -1 0)
        (gl:color-3f 0 1 0) (gl:vertex-3f -1  0 1)
        (gl:color-3f 0 1 0) (gl:vertex-3f -1  1 0)
        (gl:color-3f 1 0 0) (gl:vertex-3f  1  0 0)
        (gl:color-3f 0 1 0) (gl:vertex-3f -1  0 1)
        (gl:color-3f 1 0 0) (gl:vertex-3f  1  0 0)
        (gl:color-3f 0 0 1) (gl:vertex-3f -1 -1 0)))
  :tags: []
  :references:
    :url: 
    :title: 
