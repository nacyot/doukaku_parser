---
:id: '239'
:title: ローテートシフト
:comments:
- :id: '8556'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8556
  :user_name: ところてん
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/166/
  :language: 
  :time: 2009/02/26 09:28 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\r\n\t  <pre class=\"compact\">ローテートシフトを実装してください。\r\n\r\n例)\r\n0010 0011
    1110 1101\r\n↓右に1ビットローテート\r\n1001 0001 1111 0110\r\n\r\nローテートシフトがある言語がどれ位あるか知りたくなって投稿しました。</pre>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8585'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8585
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: JavaScript
  :time: 2009/03/06 12:20 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">rotate_r(parseInt(\"0010001111101101\",2),
    1).toString(2)</pre>\n\t"
  :code: "//文字列を指定数倍する\nif(!String.prototype.x){\n    String.prototype.x = function(n){\n
    \       var result=\"\";\n        for(var i=0;i&lt;n;i++){\n            result
    += this;\n        }\n        return result;\n    }\n}\n//指定された桁数まで文字を補う\nfunction
    paddingLeft(str, d, c){\n    var len  = str.toString().length;\n    var x = d
    &gt; len ? d - len : 0;\n    \n    return c.x(x) + str;\n}\n\nfunction rotate_r(n,
    count, size){\n    size = size | 16;//デフォルトは、１６ビットで処理\n    var wk_bin = paddingLeft(n.toString(2),
    size, '0');\n    var over = wk_bin.substr(-count);\n    wk_bin = over + wk_bin.substr(0,
    wk_bin.length - count);\n    return parseInt(wk_bin, 2);\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8588'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8588
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2009/03/06 12:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  size = size | 16;\r\nは、\r\nsize = size || 16;\r\nの間違い\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8589'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8589
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2009/03/06 10:15 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  substr(-count)\r\nは、\r\nslice(-count)\r\nの間違い\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8590'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8590
  :user_name: leque
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/840/
  :language: Scheme
  :time: 2009/03/06 22:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>そのまま</p>\n\n\t"
  :code: |
    (import (rnrs))

    (bitwise-rotate-bit-field #b0010001111101101 0 16 -1)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8591'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8591
  :user_name: sumim
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2009/03/06 23:24 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Squeak Smalltalk で。</p>\n\n\t"
  :code: |
    | bitRotate16 |
    bitRotate16 := [:val :shift |
        shift := shift \\ 16.
        (val &lt;&lt; (16 - shift) bitOr: val &gt;&gt; shift) bitAnd: 16rFFFF].

    (bitRotate16 valueWithArguments: #(2r0010001111101101 1)) radix: 2
    "=&gt; '1001000111110110' "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '8592'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8592
  :user_name: fumokmm
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/856/
  :language: Java
  :time: 2009/03/07 00:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>Javaにはローテートシフトがないらしいので、こんな感じで実装。</p>\n\n\t"
  :code: |
    /**
     * 左ローテートシフト
     * @param value 値
     * @param n シフトさせるビット数
     * @return 左ローテートシフト後の値
     */
    public static int leftRotateShift(int value, int n) {
        return (value &lt;&lt; n) | (value &gt;&gt;&gt; (32 - n));
    }

    /**
     * 右ローテートシフト
     * @param value 値
     * @param n シフトさせるビット数
     * @return 右ローテートシフト後の値
     */
    public static int rightRotateShift(int value, int n) {
        return (value &gt;&gt;&gt; n) | (value &lt;&lt; (32 - n));
    }
  :tags: []
  :references:
    :url: /web/20100630221510/http://mindprod.com/jgloss/rotate.html
    :title: 'rotate : Java Glossary'
- :id: '8593'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8593
  :user_name: sawat
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/322/
  :language: Java
  :time: 2009/03/07 01:10 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>ローテートシフトありますよ！</p>\n\n\t"
  :code: |
    public class RotateShift {
       public static void main(String[] args) {
          int input = Integer.parseInt("0010001111101101", 2);

          int i = Integer.rotateRight(input, 1);
          System.out.printf("%s%n",Integer.toString(i, 2));
          System.out.printf("%s%n",Integer.toString((short)i, 2));

          long l = Long.rotateRight(input, 1);
          System.out.printf("%s%n",Long.toString(l, 2));
          System.out.printf("%s%n",Long.toString((short)l, 2));
       }
    }


    /* -- 実行結果 --
    -1111111111111111110111000001010
    1000111110110
    -111111111111111111111111111111111111111111111111110111000001010
    1000111110110
    */
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8594'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8594
  :user_name: emasaka
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2009/03/07 10:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">整数（Cのlong）が64bitである前提です。\r\n\r\n$ rotR 300
    2\r\n75\r\n$ rotR -2 4\r\n-1152921504606846977\r\n$ rotL 300 4\r\n4800\r\n$ rotL
    -2 4\r\n-17\r\n</pre>\n\t"
  :code: |
    function rotR() {
        local i=$1
        local w=$2
        echo $((i &gt;&gt; w &amp; ~(-1 &lt;&lt; 64 - w) | i &lt;&lt; 64 - w))
    }

    function rotL() {
        local i=$1
        local w=$2
        echo $((i &gt;&gt; 64 - w &amp; ~(-1 &lt;&lt; w) | i &lt;&lt; w))
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8595'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8595
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2009/03/07 05:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>もう少しコードは短縮できるがコンパイラの最適化を阻害しそうなので止めた</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;math.h&gt;
    void rotate (char *str,int num);
    /*
     *第一引数 rotateする文字列
     *第二引数　rotateする回数(int型、正の場合、左、負の場合、右にrotateする)
     *
     * 引数が二個未満または第二引数がint型と解釈できない文字列ならば
     * Segmentation fault が発生するので注意
     */
    int main( int argc, char *argv[] ){
      rotate(argv[1],atoi(argv[2]));
    }
    /*
     * 引数str　 rotateする文字列
     * 引数num　 正の場合、左にnum個シフトする
    　*　　　　　　　　負の場合、右にnum個シフトする
     */
    void rotate(char *str,int num){
      int str_length = strlen(str);
      int rotate_num = num&gt;=0?abs(num)% str_length:-abs(num)% str_length;
      char rotated_str[str_length];
        int i;
        if(num&gt;=0){
          for(i=0;i&lt;str_length;i++){
        rotated_str[i]=str[i+rotate_num&lt;str_length?i+rotate_num:i+rotate_num-str_length];
          }
        }
        else{
          for(i=0;i&lt;str_length;i++){
        rotated_str[i]=str[i+rotate_num&gt;=0?i+rotate_num:i+rotate_num+str_length];
          }
        }
      rotated_str[str_length]='\0';
      printf("%s\n",rotated_str);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8596'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8596
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: Other
  :time: 2009/03/07 11:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>VBAでIntegerの値をローテートシフトするコードを書いてみました。</p>\n\n\t"
  :code: "Option Explicit\n\nSub main()\n    Dim Value As Integer\n    \n    Value
    = 9197\n    \n    Debug.Print \"  \" &amp; Value &amp; \" : \" &amp; Bin(Value)\n
    \       \n    Debug.Print \"↓右に1ビットローテート\"\n    Value = RotateRight(Value)\n    \n
    \   Debug.Print Value &amp; \" : \" &amp; Bin(Value)\n    \n    Debug.Print \"↓左に1ビットローテート\"\n
    \   Value = RotateLeft(Value)\n    \n    Debug.Print \"  \" &amp; Value &amp;
    \" : \" &amp; Bin(Value)\nEnd Sub\n\n'// Integerの値を右ローテートシフトする。\nFunction RotateRight(Value
    As Integer) As Integer\n    Dim Bak As Integer\n    Dim BinStr As String\n    \n
    \   '// 指定されたIntegerの値を二進数文字列に変換する。\n    BinStr = Bin(Value)\n    '// 二進数文字列を右ローテートシフトする。\n
    \   BinStr = Right(BinStr, 1) &amp; Left(BinStr, 15)\n    '// ローテートされた二進数文字列をIntegerの値に変換する。\n
    \   Bak = Dec(BinStr)\n    \n    RotateRight = Bak\nEnd Function\n\n'// Integerの値を左ローテートシフトする。\nFunction
    RotateLeft(Value As Integer) As Integer\n    Dim Bak As Integer\n    Dim BinStr
    As String\n    \n    '// 指定されたIntegerの値を二進数文字列に変換する。\n    BinStr = Bin(Value)\n
    \   '// 二進数文字列を左ローテートシフトする。\n    BinStr = Right(BinStr, 15) &amp; Left(BinStr,
    1)\n    '// ローテートされた二進数文字列をIntegerの値に変換する。\n    Bak = Dec(BinStr)\n    \n    RotateLeft
    = Bak\nEnd Function\n\n'// 指定されたIntegerの値を二進数文字列に変換する。\nFunction Bin(ByVal Value
    As Integer) As String\n    Dim Bak As String\n    Dim AbsValue As Long\n    \n
    \   '// 指定された値の絶対値を取得する。\n    AbsValue = Abs(CLng(Value))\n    '// 絶対値を二進数文字列に変換する。\n
    \   Bak = PosValueToBin(AbsValue)\n    '// 二進数文字列の長さを16ビットにする。\n    Bak = SetSize(Bak,
    16)\n    \n    '// 指定された値が負の数であることを確認する。\n    If Value &lt; 0 Then\n        '//
    二進数文字列の二の補数を求める。\n        Bak = Complement(Bak)\n    End If\n    \n    Bin = Bak\nEnd
    Function\n\n'// 指定された二進数文字列をIntegerの値に変換する。\nFunction Dec(ByVal BinStr As String)
    As Integer\n    Dim Bak As Long\n    Dim Flag As Long\n\n    '// 二進数文字列が負の数であることを確認する。\n
    \   '// 二進数文字列の先頭ビットが1の場合、負の数であることが確認できる。\n    If Left(BinStr, 1) = \"1\" Then\n
    \       '// 二進数文字列の二の補数を求める。\n        BinStr = Complement(BinStr)\n        '//
    符号をマイナスにする。\n        Flag = -1\n    Else\n        '// 符号をプラスにする。\n        Flag
    = 1\n    End If\n    \n    '// 二進数文字列をLong値に変換する。\n    Bak = PosBinToLong(BinStr)\n
    \   '// Long値に符号を適用する。\n    Bak = Flag * Bak\n        \n    Dec = CInt(Bak)\nEnd
    Function\n\n'// 正の数を二進数文字列に変換する。\nFunction PosValueToBin(PosValue As Long) As
    String\n    Dim Bak As String\n\n    Bak = \"\"\n    Do While PosValue &gt; 0\n
    \       Bak = PosValue Mod 2 &amp; Bak\n        PosValue = PosValue \\ 2\n    Loop\n
    \   \n    PosValueToBin = Bak\nEnd Function\n\n'// 正の二進数文字列をLongに変換する。\nFunction
    PosBinToLong(BinStr As String) As Long\n    Dim Bak As Long\n    Dim i As Integer\n
    \   \n    Bak = 0\n    For i = 1 To Len(BinStr)\n        Bak = Bak * 2\n        Bak
    = Bak + Mid(BinStr, i, 1)\n    Next\n    \n    PosBinToLong = Bak\nEnd Function\n\n'//
    二進数文字列を指定されたサイズにする。\nFunction SetSize(BinStr As String, NewSize As Integer) As
    String\n    Dim Bak As String\n    Dim i As Long\n    Dim Lack As Long\n    Dim
    OldSize As Long\n    \n    '// 二進数文字列のサイズを指定されたサイズと比較する。\n    OldSize = Len(BinStr)\n
    \   If NewSize &lt; OldSize Then\n        '// 二進数文字列のサイズが指定されたサイズより大きい:\n        \n
    \       Bak = Right(BinStr, NewSize)\n    \n    ElseIf NewSize &gt; OldSize Then\n
    \       '// 二進数文字列のサイズが指定されたサイズより小さい:\n        \n        '足りないサイズを求める。\n        Lack
    = NewSize - OldSize\n        '足りないサイズ分を0で埋める。\n        Bak = BinStr\n        For
    i = 1 To Lack\n            Bak = \"0\" &amp; Bak\n        Next\n        \n    Else\n
    \       '// 二進数文字列のサイズと指定されたサイズが等しい:\n        \n        Bak = BinStr\n        \n
    \   End If\n        \n    SetSize = Bak\nEnd Function\n\n'// 二進数文字列の二の補数を求める。\nFunction
    Complement(BinStr As String) As String\n    Dim Bak As String\n    \n    '// 二進数文字列の符号を反転させる。\n
    \   Bak = Reverse(BinStr)\n    '// 二進数文字列に1を足す。\n    Bak = PlusOne(Bak)\n    \n
    \   Complement = Bak\nEnd Function\n\n'// 二進数文字列の各ビットを反転させる。\nFunction Reverse(BinStr
    As String) As String\n    Dim Bak As String\n    Dim i As Integer\n\n    Bak =
    \"\"\n    For i = 1 To Len(BinStr)\n        If Mid(BinStr, i, 1) = \"0\" Then\n
    \           Bak = Bak &amp; \"1\"\n        Else\n            Bak = Bak &amp; \"0\"\n
    \       End If\n    Next\n    \n    Reverse = Bak\nEnd Function\n\n'// 二進数文字列の1を足す。\nFunction
    PlusOne(BinStr As String) As String\n    Dim Bak As String\n    Dim i As Integer\n\n
    \   Bak = \"\"\n    \n    i = Len(BinStr)\n    \n    Do While i &gt;= 1\n        If
    Mid(BinStr, i, 1) = \"0\" Then\n            Bak = \"1\" &amp; Bak\n            i
    = i - 1\n            Exit Do\n        Else\n            Bak = \"0\" &amp; Bak\n
    \           i = i - 1\n        End If\n    Loop\n    \n    Do While i &gt;= 1\n
    \       Bak = Mid(BinStr, i, 1) &amp; Bak\n        i = i - 1\n    Loop\n    \n
    \   PlusOne = Bak\nEnd Function\n\n' -- 実行結果 --\n'  9197 : 0010001111101101\n'↓右に1ビットローテート\n'-28170
    : 1001000111110110\n'↓左に1ビットローテート\n'  9197 : 0010001111101101\n"
  :tags:
  - VBA
  :references:
    :url: 
    :title: 
- :id: '8597'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8597
  :user_name: doda
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/705/
  :language: Other
  :time: 2009/03/07 11:55 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>Tera Termのマクロです。\n海外からの要望で実装されました。</p>\n\n\t"
  :code: |
    a = $12345678

    rotateright b a 4
    sprintf "%08x -&gt; %08x" a b
    messagebox inputstr "4 bit right rotate"

    rotateleft b a 4
    sprintf "%08x -&gt; %08x" a b
    messagebox inputstr "4 bit left rotate"
  :tags:
  - 4.54以降
  - TeraTermMacro
  :references:
    :url: 
    :title: 
- :id: '8598'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8598
  :user_name: g000001
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2009/03/07 07:53 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ANSI CL標準には含まれていませんが、処理系の拡張として持っているものもあるようです(SBCL等)\nここではcl-utilitiesを使いました。</p>\n\n\t"
  :code: |
    (cl-utilities:ROTATE-BYTE -1 (byte 16 0) #b0010001111101101)
    ;=&gt; 37366(#b1001000111110110)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8599'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8599
  :user_name: muscovyduck
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/679/
  :language: Ruby
  :time: 2009/03/07 11:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>引数に2進数と桁数を与えると、与えられた2進数を右に1ビットだけローテートシフトした2進数を文字列で返すメソッドrotate_rの実装です。実行結果は次のとおり:</p>\n<pre
    class=\"literal-block\">\nirb(main):005:0&gt; rotate_r(0b0010001111101101, 16)\n=&gt;
    \"1001000111110110\"\nirb(main):006:0&gt;\n</pre>\n\n\t"
  :code: |
    def rotate_r(bin_num, digit)
      bin_num.to_s(2).rjust(digit, '0')[-digit, digit].each_char.
        cycle.take(digit * 2 - 1)[-digit, digit].join
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8600'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8600
  :user_name: fumokmm
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/856/
  :language: 
  :time: 2009/03/07 19:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ありゃ、ホントですね。\r\n1.5から増えたんですね。勉強になりました。</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8601'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8601
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: Haskell
  :time: 2009/03/07 19:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>Haskell にもローテートシフトありますよ。（仕様で入ってるかどうかはわかりませんが）ghc の base ライブラリの中の
    Data.Bits モジュールに入ってます。\n</p>\n<p>ありますよで終わってしまうのはさみしいので QuickCheck してみました。\n</p>\n<p>ローテートシフトなんだから、シフトした後逆方向に同じ幅だけシフトしたら元に戻るよね、というのをランダムな引数を与えて確かめています。シフトする幅に
    0 が来たら、それはテストするまでもないので飛ばすことにします。実行ファイルの引数として verbose を渡すと、テストに渡された引数を出力させながらテストします。\n</p>\n<pre><code>~/work/2009/03/08
    10:18 ghc --make rotateshift.hs\n[1 of 1] Compiling Main             ( rotateshift.hs,
    rotateshift.o )\nLinking rotateshift ...\n~/work/2009/03/08 10:29 ./rotateshift\nOK,
    passed 100 tests (18% trivial).\n~/work/2009/03/08 10:29 ./rotateshift verbose\n0:\n2\n3\n1:\n1\n1\nOK,
    passed 100 tests (11% trivial).\n</code></pre>\n\n\n\t"
  :code: |
    import Data.Bits
    import Test.QuickCheck
    import System.Environment

    prop_rotate :: Int -&gt; Int -&gt; Property
    prop_rotate bits n = trivial (n == 0) $ bits == rotate (rotate bits n) (-n)

    main = do
      is_verbose &lt;- verbose
      (if is_verbose then verboseCheck else quickCheck) prop_rotate

    verbose = do
      args &lt;- getArgs
      return $ if null args then False else head args == "verbose"
  :tags: []
  :references:
    :url: /web/20100630221510/http://haskell.org/ghc/docs/latest/html/libraries/base/Data-Bits.html
    :title: Data.Bits
- :id: '8602'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8602
  :user_name: 匿名
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2009/03/07 19:45 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>verbose のほうの出力は省略してます。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8603'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8603
  :user_name: ocean
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2009/03/08 04:39 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>「ローテートシフトがある」とは言えませんが。</p>\n\n\t"
  :code: |
    def rotate(n, width=16):
        s = bin(n)
        assert s[:2] == "0b"
        s = s[2:].zfill(width)
        return int(s[-1] + s[:-1], 2)

    print rotate(9197)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8604'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8604
  :user_name: eagletmt
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/712/
  :language: C
  :time: 2009/03/08 05:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>文字列で右にローテート。\n負の値を与えると左にローテート。</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;string.h&gt;
    #include &lt;assert.h&gt;

    void rotate(char *str, int num);

    int main(int argc, char *argv[])
    {
      assert(argc &gt; 2);
      rotate(argv[1], atoi(argv[2]));
      puts(argv[1]);
      return 0;
    }

    void rotate(char *str, int num)
    {
      size_t len = strlen(str);
      size_t n = num % len;
      char *tmp;

      tmp = malloc(n);
      memcpy(tmp, str+len-n, n);
      memmove(str+n, str, len-n);
      memcpy(str, tmp, n);
      free(tmp);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8608'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8608
  :user_name: raynstard
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/127/
  :language: C
  :time: 2009/03/09 11:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">とりあえず、右ローテートシフト 1ビット固定で^^;\r\nCの場合、インラインアセンブラを使ってしまうのが一番手っ取り早い？\r\n\r\nCPU依存してしまうから嫌われるかもしれませんが。。。\r\n#
    初めて使ったけど gccってasm{} 使えないことをしった今日この頃\r\n\r\n// gcc -Wall doukaku239.c\r\n// CPU
    は x86系限定です。\r\n%  ./a.out 7\r\nbefore: 00000000000000000000000000000111\r\nafter
    : 10000000000000000000000000000011</pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;
    #include &lt;stdint.h&gt;

    int print_bits(uint32_t in)
    {
            char bits[33] = "00000000000000000000000000000000";
            char *p = bits;
            int carry=0;

            while( in &gt; 0 )
            {
                    __asm__("    shl $1,%2;\n"
                            "    pushf;\n"
                            "    pop %3;\n"
                            "    andl $1,%3;\n"
                            :"=c"(in), "=a"(carry)
                            : "0"(in), "1"(carry)
                    );
                    *p = '0' + carry; p ++;
            }
            printf("%.33s\n", bits);
            return 0;
    }

    int main(int argc, char *argv[])
    {
            uint32_t param = 0;
            param = atoi(argv[1]);
            printf("before: "); print_bits( param );
            __asm__("    ror $1,%1" : "=r"(param) : "0"(param) );
            printf("after : "); print_bits( param );
            return 0;
    }
  :tags:
  - '8086'
  - C99
  :references:
    :url: 
    :title: 
- :id: '8609'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8609
  :user_name: syat
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/766/
  :language: C
  :time: 2009/03/09 12:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Cで。\r<br>64bit整数に２個つめてからシフトしています。\r<br>マイナスシフト（左シフト）、32を超えるシフトにも対応。\r<br>"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    #ifdef _MSC_VER
        typedef _int32 int32_t;
        typedef _int64 int64_t;
    #elif __GNUC__
        #include &lt;stdint.h&gt;
    #endif

    /* rotate : numをshift回だけ右にローテートシフトする */
    int32_t rotate(int32_t num, int shift)
    {
        int64_t numnum;
        /* シフト数の正規化（32以下の正数にする） */
        while (shift &lt; 0) shift+= 32;
        shift %= 32;
        /* シフト */
        numnum = num;
        numnum = (numnum&lt;&lt;32) | num;
        return (numnum&gt;&gt;shift) &amp; (int32_t)-1;
    }

    int main(int argc, char *argv[])
    {
        char buf[32+1];
        int32_t num = 0;
        int32_t num2 = 0;
        int shift = 1;

        if (argc &lt; 2) {
            printf("Usage: %s &lt;bits&gt; &lt;shift&gt;\n", argv[0]);
            return EXIT_FAILURE;
        } else if (argc == 2) {
            num = strtol(argv[1], NULL, 2);
        } else if (argc &gt; 2) {
            num = strtol(argv[1], NULL, 2);
            shift = strtol(argv[2], NULL, 10);
        }
        num2 = rotate(num, shift);
        printf("%032s\n", itoa(num2, buf, 2));
        return EXIT_SUCCESS;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8610'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8610
  :user_name: selpo
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/1013/
  :language: C
  :time: 2009/03/09 12:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>右シフトで消える部分を左に持ってきて、後でそれをorでつなぎます。</p>\n\n\t"
  :code: |
    using System;
    class P
    {
        static void Main()
        {
            ushort value = 0x23ed;
            Console.WriteLine(ToBinStr(value));
            Console.WriteLine(ToBinStr(Rotate(value, 1)));
        }
        static ushort Rotate(ushort value, short n)
        {
            return (ushort)((value &gt;&gt; n)
                   | (value &lt;&lt; (16 - n)));
        }
        static string ToBinStr(ushort value)
        {
            ushort end = 0x1110;
            string str = "";
            for (ushort i = 0x8000; i != 0; i &gt;&gt;= 1)
            {
                str += (value &amp; i) != 0 ?
                            '1' : '0';
                if ((i &amp; end) != 0)
                    str += ' ';
            }
            return str;
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8625'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8625
  :user_name: mattsan
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/833/
  :language: C
  :time: 2009/03/10 06:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #include &lt;bitset&gt;

    template&lt;std::size_t N&gt;
    std::bitset&lt;N&gt; rotateRight(const std::bitset&lt;N&gt;&amp; bits, int n)
    {
        n %= N;
        return (bits &gt;&gt; n) | (bits &lt;&lt; (N - n));
    }

    #include &lt;iostream&gt;

    int main(int, char* [])
    {
        std::bitset&lt;16&gt; bits(std::string("0010001111101101"));

        std::cout &lt;&lt; bits &lt;&lt; std::endl;
        std::cout &lt;&lt; rotateRight(bits, 1) &lt;&lt; std::endl;

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8626'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8626
  :user_name: 陽炎
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/1022/
  :language: FORTRAN
  :time: 2009/03/10 07:12 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    program doukaku239

      print *, ishftc(9197, 1)

      stop
    end program doukaku239
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8637'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8637
  :user_name: tsekine
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/124/
  :language: Bash
  :time: 2009/03/10 22:50 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>long の bit 数は -1 の hex 表現から簡単に得られますよ。</p>\n\n\t"
  :code: |
    local minus_one_in_hex=$(printf %x -1)
    local -i sizeof_long="${#minus_one_in_hex} * 4"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8638'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8638
  :user_name: だいら
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/468/
  :language: PHP
  :time: 2009/03/11 03:06 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    &lt;?php

    function rotateShift($value, $n)
    {
        return substr(str_repeat(sprintf("%016b", bindec($value)), 3), 16-$n, 16);
    }

    $value = "0010001111101101";
    var_dump(rotateShift($value, 1));
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8641'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8641
  :user_name: rennos
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/1024/
  :language: HSP
  :time: 2009/03/11 08:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #module
    // ローテートシフト関数
    #define global ctype \
     RotateShift(%1=0,%2=32) _RotateShift(%1,%2)
    #defcfunc _RotateShift int value, int bits
        return ((value &amp; 1) &lt;&lt; (bits - 1)) | (value &gt;&gt; 1)
    #global
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8659'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8659
  :user_name: emasaka
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/852/
  :language: Bash
  :time: 2009/03/13 14:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>tsekineさん、ナイスです。</p>\n<p>ということでマージしてみます。</p>\n\n\t"
  :code: |
    printf -v minus_one_in_hex %x -1
    typeset -i sizeof_long="${#minus_one_in_hex} * 4"
    unset minus_one_in_hex

    function rotR() {
        local i=$1
        local w=$2
        echo $((i &gt;&gt; w &amp; ~(-1 &lt;&lt; sizeof_long - w) | i &lt;&lt; 64 - w))
    }

    function rotL() {
        local i=$1
        local w=$2
        echo $((i &gt;&gt; sizeof_long - w &amp; ~(-1 &lt;&lt; w) | i &lt;&lt; w))
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8680'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8680
  :user_name: N_
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/1010/
  :language: C
  :time: 2009/03/17 04:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  小細工してみたローテートシフト\r<br>テンプレートとかオペレータ使ってみるのが自分の好み\n\t"
  :code: |
    #include &lt;climits&gt;

    template&lt;typename T_Type&gt;
    class RotateShift
    {
    // friend
        template&lt;typename T_FuncArgType&gt;
        friend RotateShift&lt;T_FuncArgType&gt; Rotate(const T_FuncArgType&amp; rValue);

    // 定数
    private:
        static const unsigned int MEMBER_BIT_SIZE = sizeof(T_Type) * CHAR_BIT;

    // コンストラクタ
    private:
        RotateShift(const T_Type&amp; rValue)
            : mrValue(rValue)
        {
        }

    // メソッド
    public:
        // 右シフト
        T_Type operator &gt;&gt;(int ShiftNum)
        {
            return (mrValue &lt;&lt; (MEMBER_BIT_SIZE - ShiftNum)) | (mrValue &gt;&gt; ShiftNum);
        }
        // 左シフト
        T_Type operator &lt;&lt;(int ShiftNum)
        {
            return (mrValue &lt;&lt; ShiftNum) | (mrValue &gt;&gt; (MEMBER_BIT_SIZE - ShiftNum));
        }

    // メンバ変数
    private:
        const T_Type&amp; mrValue;
    };


    template&lt;typename T_Type&gt;
    RotateShift&lt;T_Type&gt; Rotate(const T_Type&amp; rValue)
    {
        return rValue;
    }

    #include &lt;bitset&gt;
    #include &lt;iostream&gt;

    using namespace std;

    int main(void)
    {
        // 初期値表示
        bitset&lt;16&gt; Bit(string("0010001111101101"));
        cout &lt;&lt; Bit &lt;&lt; endl;

        // 右に1ビットシフト
        Bit = Rotate(Bit) &gt;&gt; 1;

        // 結果表示
        cout &lt;&lt; Bit &lt;&lt; endl;

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8690'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8690
  :user_name: turugina
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/760/
  :language: Perl
  :time: 2009/03/17 23:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>perlで。</p>\n<p>CPANには Bit::ShiftReg なるモジュールがあって、そこでもローテートシフトは実装されています</p>\n\n\t"
  :code: |
    use strict;
    use warnings;

    our %mask;
    sub _mask
    {
      my $bits = shift;
      if ( exists $mask{$bits} ) {
        $mask{$bits};
      }
      else {
        my $mask = 0;
        for (my $i = 0; $i &lt; $bits; ++$i) {
          $mask |= (1 &lt;&lt; $i);
        }
        $mask{$bits}=$mask;
      }
    }

    # 右ローテート
    sub rrotate
    {
      my ($vec, $bits) = @_;

      my $lsb = $vec &amp; 1;
      my $mask = _mask($bits) ^ (1&lt;&lt;($bits-1));

      (($vec &gt;&gt; 1) &amp; $mask) | ($lsb?(1&lt;&lt;($bits-1)):0);
    }

    # 左ローテート
    sub lrotate
    {
      my ($vec, $bits) = @_;

      my $msb = $vec &amp; (1&lt;&lt;($bits-1));
      my $mask = _mask($bits);

      (($vec &lt;&lt; 1) &amp; $mask) | ($msb?1:0);
    }

    print rrotate(0xdb, 8) == 0xed, "\n";
    print lrotate(0xdb, 8) == 0xb7, "\n";
    print rrotate(0xcafe, 16) == 0x657f, "\n";
    print lrotate(0xcafe, 16) == 0x95fd, "\n";
    print rrotate(0xcafe_babe, 16) == 0x5d5f, "\n"; # ignore 0xcafe
    print lrotate(0xcafe_babe, 16) == 0x757d, "\n"; # ditto
    print rrotate(0xcafe_babe, 32) == 0x657f_5d5f, "\n";
    print lrotate(0xcafe_babe, 32) == 0x95fd_757d, "\n";
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8778'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8778
  :user_name: egtra
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/759/
  :language: C
  :time: 2009/04/05 06:48 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  Visual C++には、ローテートが関数として用意されています。8/16/32/64ビットの左ローテートが_rotl8/_rotl16/_rotl/_rotl64、右ローテートは_rotr〜という名前です。なぜか、8/16ビットは&lt;intrin.h&gt;、32/64ビットは&lt;stdlib.h&gt;となっています。\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;stdlib.h&gt;

    int main(void)
    {
        unsigned x = 0x84442211;
        printf("%08x\n%08x\n", x, _rotl(x, 1));
        return 0;
    }
  :tags:
  - VisualC++
  :references:
    :url: 
    :title: 
- :id: '8836'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8836
  :user_name: lunlumo
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/813/
  :language: Scala
  :time: 2009/04/23 08:37 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>　Javaと同様IntegerのroteteRight/Leftメソッドを使って書いてみました。</p>\n\n\t"
  :code: |
    object RotateShift {
        def main(args:Array[String]):Unit =
            if (args.size != 3)
                println("usage: RotateShift VALUE (R|L) SHIFT")
            else {
                try {
                    val    v:Int = Integer.parseInt(args(0), 2)
                    val    s:Int = args(2).toInt
                    println(
                        (args(1) match {
                            case "R" =&gt; Integer.rotateRight(v, s)
                            case "L" =&gt; Integer.rotateLeft(v, s)
                        }).toBinaryString
                    )
                } catch {
                    case _:IllegalArgumentException | _:scala.MatchError =&gt;
                        println("引数の指定が不正です。")
                    case e =&gt; e.printStackTrace
                }
            }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '8959'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/8959
  :user_name: sawa
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/1052/
  :language: Ruby
  :time: 2009/05/20 00:44 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |
    #! /usr/bin/ruby

    class String
        def rot_shift
            result = split(//)
            result.unshift(result.pop).join
        end
    end

    p '0010001111101101'.rot_shift
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9071'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/9071
  :user_name: bleis-tift
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/732/
  :language: SQL
  :time: 2009/06/08 09:58 GMT
  :vote_count: '1'
  :vote_score: '-1'
  :body: "\n\t  <p>SQL Server 2008 で確認しました。</p>\n\n\t"
  :code: |
    WITH
      Input(bits) AS (
        SELECT '0010001111101101'
      )
    SELECT
        RIGHT(bits, 1)
          + SUBSTRING(bits, 1, LEN(bits))
    FROM
        Input
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9072'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/9072
  :user_name: bleis-tift
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/732/
  :language: SQL
  :time: 2009/06/08 10:00 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>ミスった・・・</p>\n\n\t"
  :code: |
    WITH
      Input(bits) AS (
        SELECT '0010001111101101'
      )
    SELECT
        RIGHT(bits, 1)
          + SUBSTRING(bits, 1, LEN(bits) - 1)
    FROM
        Input
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9498'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/9498
  :user_name: YONYON
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/1093/
  :language: C
  :time: 2009/08/20 09:25 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>テンプレートで。</p>\n\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;
    #include &lt;limits.h&gt;

    template&lt;typename T&gt;
    void print2( T val )
    {
      // 2進で表示するコード(省略)
    }

    template&lt;typename T&gt;
    inline
    T rotateShift( T val )
    {
      static const char shift = sizeof( T ) * 8 - 1;
      static const unsigned long long rotate = 1ULL &lt;&lt; shift;
      return static_cast&lt;T&gt;(
        ( val &amp; 1 ) ?  ( rotate | val &gt;&gt; 1 ) : ( val &gt;&gt; 1 ) );
    }

    int main()
    {
      print2( 1 );
      print2( rotateShift( 1 ) );
      print2( 0x7fffffff );
      print2( rotateShift( 0x7fffffff ) );
      print2( 0x80000000 );
      print2( rotateShift( 0x80000000 ) );
      print2( 1LL );
      print2( rotateShift( 1LL ) );
      print2( 0x7fffffffffffffff );
      print2( rotateShift( 0x7fffffffffffffff ) );
      print2( 0x8000000000000000 );
      print2( rotateShift( 0x8000000000000000 ) );

      return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9543'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/9543
  :user_name: uehaj
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/09/01 07:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">32ビット幅整数で実装しました。\r\n\r\n $ groovy rotateshift.groovy\r\n
    10000000000000000000000000000000\r\n  1000000000000000000000000000000\r\n   100000000000000000000000000000\r\n
    \                  10001111101101\r\n 10000000000000000001000111110110\r\n  1000000000000000000100011111011\r\n
    10100000000000000000010001111101\r\n 10000000000000000000000000000000\r\n                                1\r\n
    \                              10\r\n                   10001111101101\r\n                  100011111011010\r\n
    \                1000111110110100\r\n                10001111101101000\r\n</pre>\n\t"
  :code: |
    Integer.metaClass.rotateRight = { n -&gt;
      n = (n + 32) % 32
      (delegate &lt;&lt; (32-n)) | (delegate &gt;&gt;&gt; n)
    }
    Integer.metaClass.rotateLeft = { n -&gt;
      delegate.rotateRight(32-n)
    }

    def testR(String data, int shift){
      println Integer.toBinaryString(((int)Long.parseLong(data,2)).rotateRight(shift)).padLeft(32)
    }
    def testL(String data, int shift){
      println Integer.toBinaryString(((int)Long.parseLong(data,2)).rotateLeft(shift)).padLeft(32)
    }


    testR("10000000000000000000000000000000", 0)
    testR("10000000000000000000000000000000", 1)
    testR("10000000000000000000000000000000", 2)
    testR("00000000000000000010001111101101", 0)
    testR("00000000000000000010001111101101", 1)
    testR("00000000000000000010001111101101", 2)
    testR("00000000000000000010001111101101", 3)

    testL("10000000000000000000000000000000", 0)
    testL("10000000000000000000000000000000", 1)
    testL("10000000000000000000000000000000", 2)
    testL("00000000000000000010001111101101", 0)
    testL("00000000000000000010001111101101", 1)
    testL("00000000000000000010001111101101", 2)
    testL("00000000000000000010001111101101", 3)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '9544'
  :parent_id: '239'
  :url: http://ja.doukaku.org/comment/9544
  :user_name: uehaj
  :user_url: /web/20100630221510/http://ja.doukaku.org/user/959/
  :language: Groovy
  :time: 2009/09/01 02:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">32ビット幅整数で実装しました。\r\n\r\n $ groovy rotateshift.groovy\r\n
    10000000000000000000000000000000\r\n  1000000000000000000000000000000\r\n   100000000000000000000000000000\r\n
    \                  10001111101101\r\n 10000000000000000001000111110110\r\n  1000000000000000000100011111011\r\n
    10100000000000000000010001111101\r\n 10000000000000000000000000000000\r\n                                1\r\n
    \                              10\r\n                   10001111101101\r\n                  100011111011010\r\n
    \                1000111110110100\r\n                10001111101101000\r\n</pre>\n\t"
  :code: |
    Integer.metaClass.rotateRight = { n -&gt;
      n = (n + 32) % 32
      (delegate &lt;&lt; (32-n)) | (delegate &gt;&gt;&gt; n)
    }
    Integer.metaClass.rotateLeft = { n -&gt;
      delegate.rotateRight(32-n)
    }

    def testR(String data, int shift){
      println Integer.toBinaryString(((int)Long.parseLong(data,2)).rotateRight(shift)).padLeft(32)
    }
    def testL(String data, int shift){
      println Integer.toBinaryString(((int)Long.parseLong(data,2)).rotateLeft(shift)).padLeft(32)
    }


    testR("10000000000000000000000000000000", 0)
    testR("10000000000000000000000000000000", 1)
    testR("10000000000000000000000000000000", 2)
    testR("00000000000000000010001111101101", 0)
    testR("00000000000000000010001111101101", 1)
    testR("00000000000000000010001111101101", 2)
    testR("00000000000000000010001111101101", 3)

    testL("10000000000000000000000000000000", 0)
    testL("10000000000000000000000000000000", 1)
    testL("10000000000000000000000000000000", 2)
    testL("00000000000000000010001111101101", 0)
    testL("00000000000000000010001111101101", 1)
    testL("00000000000000000010001111101101", 2)
    testL("00000000000000000010001111101101", 3)
  :tags: []
  :references:
    :url: 
    :title: 
