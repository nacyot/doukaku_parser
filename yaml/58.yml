---
:id: '58'
:title: 文字列の反転
:comments:
- :id: '3414'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3414
  :user_name: にしお
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/10 11:03 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\r\n\t  与えられた文字列sを前後逆転したものを返す関数reverse_stringを作成してください。\r\nただし、sはShift-JISでエンコードされている文字列だと仮定して構いません。\r\n<p>\r\nサンプル入出力\r\n</p>\n<pre>\r\n&gt;&gt;&gt;
    print reverse_string(\"Hello\")\r\nolleH\r\n&gt;&gt;&gt; print reverse_string(\"こんにちは\")\r\nはちにんこ\r\n&gt;&gt;&gt;
    print reverse_string(\"濁点(だくてん)\")\r\n)んてくだ(点濁\r\n</pre>\r\n\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2953'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2953
  :user_name: ocean
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/177/
  :language: Python
  :time: 2007/09/10 11:24 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">普通に。</pre>\n\t"
  :code: |
    # coding: shift_jis

    def reverse_string(s, coding="shift_jis"):
        return "".join(reversed(s.decode(coding))).encode(coding)

    if __name__ == '__main__':
        print reverse_string("Hello")
        print reverse_string("こんにちは")
        print reverse_string("濁点(だくてん)")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2954'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2954
  :user_name: dpp
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/433/
  :language: Python
  :time: 2007/09/10 11:46 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">もうちょっとシンプルにしました。</pre>\n\t"
  :code: "# coding: shift_jis\n\ndef reverse_string(s, coding=\"shift_jis\"):\n\treturn
    unicode(s, coding)[::-1].encode(coding)\n\nif __name__ == '__main__':\n    print
    reverse_string(\"Hello\")\n    print reverse_string(\"こんにちは\")\n    print reverse_string(\"濁点(だくてん)\")\n"
  :tags:
  - Python2.4
  - Python2.5
  :references:
    :url: 
    :title: 
- :id: '2955'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2955
  :user_name: kozima
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/09/10 12:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こんなのでいいのかどうかよく分かりませんが、\r\nとりあえず期待通りの結果が返ってきます。</pre>\n\t"
  :code: |
    (setf (symbol-function 'reverse-string) #'reverse)

    (print (reverse-string "Hello"))
    (print (reverse-string "こんにちは"))
    (print (reverse-string "濁点(だくてん)"))
  :tags:
  - CLISP
  :references:
    :url: 
    :title: 
- :id: '2956'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2956
  :user_name: sumim
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/09/10 12:36 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk では、順序付きコレクションの反転と同じように、メッセージ「reversed」の送信が使えます。\n\t"
  :code: |
    'Hello' reversed   "=&gt; 'olleH' "

    'こんにちは' reversed   "=&gt; 'はちにんこ' "

    '濁点(だくてん)' reversed   "=&gt; ')んてくだ(点濁' "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '2957'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2957
  :user_name: nobsun
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/10 12:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Haskellでは文字列は文字のリストにすぎませんので\r\n「文字列が構築されているなら」、reverse
    で反転できます。</pre>\n\t"
  :code: |
    reverseString :: String -&gt; String
    reverseString = reverse
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2958'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2958
  :user_name: ココサブ
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/24/
  :language: C
  :time: 2007/09/10 12:50 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;stdio.h&gt;
    #include &lt;string.h&gt;

    int main()
    {
        int  i, j, len;
        unsigned char in[BUFSIZ];
        unsigned char out[BUFSIZ];

        scanf("%s", in);
        len = strlen(in);

        j = len - 1;
        i = 0;

        while (i &lt; len) {
            /* Shift-JISか判定 */
            if ((in[i] &gt;= 0x80 &amp;&amp; in[i] &lt;= 0x9F) ||
                (in[i] &gt;= 0xE0 &amp;&amp; in[i] &lt;= 0xFF)) {
                out[j-1] = in[i++];
                out[j] = in[i++];
                j--;
            }
            else {
                out[j] = in[i++];
            }
            j--;
        }
        out[len] = '\0';

        printf("%s\n", out);
    }
  :tags: []
  :references:
    :url: /web/20081202202039/http://www.asahi-net.or.jp/~ax2s-kmtn/character.html
    :title: 文字コード
- :id: '2959'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2959
  :user_name: yuin
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/09/10 12:52 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>scalaではStringがRichStringに暗黙に変換されるので、reverseが使えます。\n</p>\n\n\n\n\t"
  :code: |
    def reverse_string(s:String) = s.reverse.mkString("")
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2960'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2960
  :user_name: matyr
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/343/
  :language: JavaScript
  :time: 2007/09/10 12:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t   ひねり無し。\n\t"
  :code: |
    function reverse_string(s){ return s.split('').reverse().join('') }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2961'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2961
  :user_name: omoikani
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/374/
  :language: StandardML
  :time: 2007/09/10 13:04 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">SML#のLMLMLライブラリを使って。</pre>\n\t"
  :code: |
    fun reverse_string str =
    let
      open ShiftJISCodec
      val s = String.fromString str
    in
      String.toString (String.implode (rev (String.explode str)))
    end;

    println (reverse_string "Hello");
    println (reverse_string "こんにちは");
    println (reverse_string "濁点(だくてん)")
  :tags:
  - SML#
  :references:
    :url: 
    :title: 
- :id: '2962'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2962
  :user_name: yohei
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/09/10 13:07 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    using System;
    class Program {
        static string reverse_string(string s) {
            char []a = s.ToCharArray();
            Array.Reverse(a);
            return new string(a);
        }
        static void Main(string[] args) {
            Console.WriteLine(reverse_string("Hello"));
            Console.WriteLine(reverse_string("こんにちは"));
            Console.WriteLine(reverse_string("濁点(だくてん)"));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2963'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2963
  :user_name: omoikani
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/374/
  :language: diff
  :time: 2007/09/10 13:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">間違えた。正しくはこう。</pre>\n\t"
  :code: |
    --- 2961.orig   2007-09-10 22:23:00.000000000 +0900
    +++ 2961.sml    2007-09-10 22:23:22.000000000 +0900
    @@ -3,7 +3,7 @@
       open ShiftJISCodec
       val s = String.fromString str
     in
    -  String.toString (String.implode (rev (String.explode str)))
    +  String.toString (String.implode (rev (String.explode s)))
     end;

     println (reverse_string "Hello");
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2964'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2964
  :user_name: ocean
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/177/
  :language: C
  :time: 2007/09/10 13:23 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  WindowsAPIのCharNextExを使用。\n\t"
  :code: |
    #include &lt;windows.h&gt;
    #include &lt;iostream&gt;
    #include &lt;string&gt;

    std::string reverse_string(const char* s, WORD codepage = 932)
    {
        std::string ret;

        while (*s)
        {
            const char* p = ::CharNextExA(codepage, s, 0);

            ret.insert(0, s, p - s);

            s = p;
        }

        return ret;
    }

    int main()
    {
        std::cout &lt;&lt; reverse_string("Hello") &lt;&lt; std::endl;
        std::cout &lt;&lt; reverse_string("こんにちは") &lt;&lt; std::endl;
        std::cout &lt;&lt; reverse_string("濁点(だくてん)") &lt;&lt; std::endl;
    }
  :tags:
  - Windows
  :references:
    :url: 
    :title: 
- :id: '2965'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2965
  :user_name: nobsun
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/98/
  :language: 
  :time: 2007/09/10 13:42 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">補足です\r\n\r\nghcではソースコードはUTF-8で書かれていることを前提とします．\r\nしたがって，日本語文字列リテラルはUTF-8で書かなければなりません．\r\nコメントについても，日本語でのコメントを書きたければ，UTF-8で\r\n書いておく必要があります．\r\n\r\nさらにghcでは文字は内部的にはUCS4で表現されているといってよいのですが，\r\nエンコーディングを変換する機構が標準では提供されていません．\r\n外部から文字列データを読み込み，それを逆転し，外部へ出力するためには\r\nエンコーディングを変換する機構を自前で用意するか，それ用のライブラリ\r\nモジュールを使う必要があります．\r\n</pre>\n\t"
  :code: ''
  :tags:
  - ghc-6.6.1
  :references:
    :url: 
    :title: 
- :id: '2966'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2966
  :user_name: ぱみ
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/420/
  :language: Ruby
  :time: 2007/09/10 14:15 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ひねり無し２。</pre>\n\t"
  :code: |
    def reverse_string(s)
      s.split(//).reverse.join
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2967'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2967
  :user_name: 匿名
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/4/
  :language: Java
  :time: 2007/09/10 14:22 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  文字列はShiftJISではありません（ちなみにソースコードはShiftJISで書きました）。その代わりと言ってはなんですが、サロゲートペアのサンプルをつけてあります。\n\t"
  :code: |
    public class Sample {
        public static String reverseString(String arg) {
            return new StringBuffer(arg).reverse().toString();
        }
        public static void main(String[] args) {
            System.out.println(reverseString("Hello"));
            System.out.println(reverseString("こんにちは"));
            System.out.println(reverseString("濁点（だくてん）"));
            System.out.println(reverseString("¥uD842¥uDFB7野家"));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2968'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2968
  :user_name: mc
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/405/
  :language: Common
  :time: 2007/09/10 14:52 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">太古の昔(40年位昔?)は、文字列の代りにシンボルを\r\n使っていたとどっかで目にした記憶があったので、\r\nそういう感じを想像して作ってみました。\r\n\r\n(reverse-string
    '|濁点(だくてん)|)\r\n=&gt; |)んてくだ(点濁|</pre>\n\t"
  :code: "(defun reverse-string (x)\n  (prog (s rev)\n        (setq s (explode x))\n
    \   l\t(cond ((null s) (return (implode rev))))\n        (setq rev (cons (car
    s) rev))\n\t(setq s (cdr s))\n\t(go l)))\n\n(defun implode (lst)\n  (intern (coerce
    lst 'string)))\n\n(defun explode (sym)\n  (coerce (string sym) 'list))\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2969'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2969
  :user_name: jz5
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/344/
  :language: VB
  :time: 2007/09/10 15:13 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    Function reverse_string(ByVal s As String) As String
        Return New String(s.ToCharArray.Reverse.ToArray)
    End Function
  :tags:
  - VB9.0
  :references:
    :url: 
    :title: 
- :id: '2970'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2970
  :user_name: rucker
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/130/
  :language: PHP
  :time: 2007/09/10 18:54 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  <pre class=\"compact\">マルチバイト文字列関数に丁度いい関数がなかったので\r\n一度UTF16に変換して逆順にして元に戻してみた。\r\n逆順にするとエンディアンが変わるってのがミソ。</pre>\n\t"
  :code: "&lt;?php\nfunction mb_strrev($str,$encoding)\n{\n\treturn mb_convert_encoding(strrev(mb_convert_encoding($str,\"UTF-16BE\",$encoding)),$encoding,\"UTF-16LE\");\n}\n\necho
    mb_strrev(\"Hello\",\"SJIS\"),\"\\n\";\necho mb_strrev(\"こんにちは\",\"SJIS\"),\"\\n\";\necho
    mb_strrev(\"濁点(だくてん)\",\"SJIS\"),\"\\n\";\n?&gt;\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2972'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2972
  :user_name: nobsun
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/09/10 23:25 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">HackageDBにある utf8-stringというライブラリを使う。\r\nソースコードはUTF8，U.putStrLnは文字列をUTF8バイト列に変換して出力する\r\n</pre>\n\t"
  :code: "module Main where\nimport qualified System.IO.UTF8 as U\n\nreverseString
    :: String -&gt; String\nreverseString = reverse\n\nmain :: IO ()\nmain = do {
    U.putStrLn $ reverseString \"Hello\"\n          ; U.putStrLn $ reverseString \"こんにちは\"\n
    \         ; U.putStrLn $ reverseString \"濁点(だくてん)\"\n\t  }\n\n{-\n*Main&gt; :main\nLoading
    package utf8-string-0.1 ... linking ... done.\nolleH\nはちにんこ\n)んてくだ(点濁\n-}\n"
  :tags: []
  :references:
    :url: /web/20081202202039/http://hackage.haskell.org/cgi-bin/hackage-scripts/package/utf8-string-0.1
    :title: The utf8-string package
- :id: '2973'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2973
  :user_name: nobsun
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/98/
  :language: Scheme
  :time: 2007/09/10 23:37 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <pre class=\"compact\">SRFI-13 に string-reverse があります。</pre>\n\t"
  :code: |
    gosh&gt; (use srfi-13)
    #&lt;undef&gt;
    gosh&gt; (string-reverse "Hello")
    "olleH"
    gosh&gt; (string-reverse "こんにちは")
    "はちにんこ"
    gosh&gt; (string-reverse "濁点(だくてん)")
    ")んてくだ(点濁"
  :tags:
  - Gauche
  :references:
    :url: 
    :title: 
- :id: '2974'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2974
  :user_name: kzfm
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/106/
  :language: Perl
  :time: 2007/09/11 02:02 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Wide character in printっていわれる</pre>\n\t"
  :code: |
    use Encode;
    sub reverse_string {
      return join '', reverse split //, decode('shiftjis',$_[0]);
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2975'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2975
  :user_name: 匿名
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/4/
  :language: 
  :time: 2007/09/11 03:22 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  一応、補足しておくとJavaではStringは内部的にUTF-16で処理される。したがって1バイト/2バイトの区別はなくBMPの範囲内では単純に逆順にすれば良い事になる。しかし、UTF-16は可変長の符号のため、サロゲートペア（BMPの範囲外の文字）が含まれる場合、単純に逆転しては文字（コードポイント）が不正になる。StringBuffer#reverseはコードポイント単位の逆転を実現している。\r<br><br>＃しかし、可変長になった時点でUTF-16の存在価値はほとんどなくなってるような……\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2976'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2976
  :user_name: kacchi
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/145/
  :language: Emacs
  :time: 2007/09/11 10:18 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Emacs Lispにはそれ用の関数はないです。\n\t"
  :code: |
    (defun reverse-string (str)
      (concat (nreverse (append str nil))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2977'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2977
  :user_name: ？せんたくいた
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/241/
  :language: Bash
  :time: 2007/09/11 10:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">シェルスクリプト的発想で外から持って来い!\r\n\"rev\" があります。\r\n\r\nマルチバイトには対応しているのですが、\r\nShift-JISが読めるとは限らないので適当にnkfかませつつ。\r\n\r\n$
    ./rev.sh \"$(echo \"濁点(だくてん)\" |nkf -s)\"\r\n)んてくだ(点濁\r\n</pre>\n\t"
  :code: |
    #!/bin/bash
    n="$1"
    echo "$n" |nkf --unix |rev
  :tags:
  - nkf
  - rev
  :references:
    :url: /web/20081202202039/http://www.linux.or.jp/JM/html/util-linux/man1/rev.1.html
    :title: Manpage of REV
- :id: '2978'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2978
  :user_name: にしお
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/11 11:41 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>PHPって文字列処理得意そうな印象があったのですけど、ビッグエンディアンでエンコードしてひっくり返してからリトルエンディアンで戻すとはなかなかすごいウルトラCですね…。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2981'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2981
  :user_name: kaname
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/435/
  :language: C
  :time: 2007/09/11 14:48 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;string.h&gt;

    void swap(char *str, int i, int j)
    {
        char tmp = str[i];
        str[i] = str[j];
        str[j] = tmp;
    }

    char *reverse_string(char *str)
    {
        int len, i, j;

        len = strlen(str);

        for (i = 0, j = len-1; j &gt; i; ++i, --j) {
            swap(str, i, j);
        }

        for (i = len-1; i &gt; 0; --i) {
            if (str[i] &amp; 0x80) {
                swap(str, i, i-1);
                --i;
            }
        }

        return str;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2983'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2983
  :user_name: kkobayashi
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/09/11 15:09 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">プラットフォーム依存かもしれませんが、\r\nWindows版Rはデフォルトの文字コードがSJISになっています。\r\n\r\n&gt;
    reverse_string(\"Hello\")\r\n[1] \"olleH\"\r\n&gt; reverse_string(\"こんにちは\")\r\n[1]
    \"はちにんこ\"\r\n&gt; reverse_string(\"濁点(だくてん)\")\r\n[1] \")んてくだ(点濁\"\r\n</pre>\n\t"
  :code: |
    reverse_string &lt;- function(s) paste(rev(unlist(strsplit(s, ''))), collapse='')
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2984'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2984
  :user_name: rucker
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/130/
  :language: 
  :time: 2007/09/12 06:26 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">phpはネイティブでは日本語等のマルチバイト文字列には対応していません。\r\n(ソースをjisやsjisで書くと問題起きるし…)\r\n日本語等のマルチバイト文字列を扱う関数は通常の文字列関数とは別にあるの\r\nですが、必要最小限しか用意されていません。\r\n逆順に並べ替えたり、文字列を配列に分割する関数もなかったので\r\n思いつきでこんな事しましたが、実用に供するなら配列に分割する\r\n関数を作ると思います…(^^;
    むやみに文字空間変換するのもアレですし…。\r\n\r\nUTF16にしてますが入力がsjisだとサロゲートペアの問題は起きないはず…?\r\n\"はしごだか\"や\"たちざき\"等のIBM拡張文字はエンコーディングに\"SJIS\"では\r\nなく\"sjis-win\"を指定すれば通るデス。\r\nUTF32にしとけよと言われれば…全くその通りです。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2985'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2985
  :user_name: にしお
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/12 11:10 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">WIndowsのコマンドプロンプトで試してみたところ\r\n下のように化け化けになってしまいました。\r\n何がいけないのでしょうか？\r\n\r\nC:\\&gt;ruby\r\ndef
    reverse_string(s)\r\n  s.split(//).reverse.join\r\nend\r\n\r\nprint reverse_string(\"濁点(だくてん)\")\r\n^D\r\n・ﾄくだ・_肉\r\n\r\nprintのかわりにpを使うとこうなりました\r\n\r\nC:\\&gt;ruby\r\ndef
    reverse_string(s)\r\n  s.split(//).reverse.join\r\nend\r\n\r\np reverse_string(\"濁点(だくてん)\")\r\n^D\r\n・)\\361\\202\\304\\202\\255\\202\\276\\202(_\\223\\367\\221\"\r\n\r\nシフトJISをバイト単位でひっくり返してしまってますかね？\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '2990'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/2990
  :user_name: ぱみ
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/420/
  :language: 
  :time: 2007/09/12 14:45 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <pre class=\"compact\">エンコードの判定をさぼってしまっているのでShift-JIS環境だと$KCODE='s'がないと化けてしまいますね…</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3000'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3000
  :user_name: ソラ
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/391/
  :language: Ruby
  :time: 2007/09/13 08:15 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">これで大丈夫ですよね？</pre>\n\t"
  :code: |
    def reverse_string(s)
    return s.reverse
    end
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3007'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3007
  :user_name: 匿名
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/4/
  :language: C
  :time: 2007/09/13 14:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: |
    #include &lt;iostream&gt;
    #include &lt;string&gt;

    bool isLeadChar(std::string::value_type c)
    {
        unsigned char uc = c;
        return ((0x80u &lt;= uc) &amp;&amp; (uc &lt;= 0x9fu)) || ((0xa1u &lt;= uc) &amp;&amp; (uc &lt;= 0xfeu));
    }

    class CharReader
    {
    public:
        explicit CharReader(const std::string&amp; src) : src_(src), pos_(0) {}

        std::string next()
        {
            std::string result;
            if((pos_ &lt; src_.length()) &amp;&amp; isLeadChar(src_[pos_]))
            {
                result = src_.substr(pos_, 2);
                pos_ += 2;
            }
            else
            {
                result = src_.substr(pos_, 1);
                ++pos_;
            }
            return result;
        }

        bool isEmpty() const
        {
            return src_.length() &lt;= pos_;
        }

    private:
        const std::string      src_;
        std::string::size_type pos_;
    };

    std::string reverse_string(const std::string&amp; src)
    {
        CharReader  reader(src);
        std::string result;
        while( ! reader.isEmpty())
        {
            result = reader.next() + result;
        }
        return result;
    }

    int main(int, char* [])
    {
        std::cout &lt;&lt; reverse_string("Hello") &lt;&lt; std::endl;
        std::cout &lt;&lt; reverse_string("こんにちは") &lt;&lt; std::endl;
        std::cout &lt;&lt; reverse_string("濁点(だくてん)") &lt;&lt; std::endl;

        return 0;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3013'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3013
  :user_name: にしお
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/09/14 08:51 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">Haskellの解答</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20081202202039/http://d.hatena.ne.jp/ha-tan/20070912/1189605656
    :title: http://d.hatena.ne.jp/ha-tan/20070912/1189605656
- :id: '3017'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3017
  :user_name: yohei
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/415/
  :language: C
  :time: 2007/09/14 14:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\"></pre>\n\t"
  :code: "#include &lt;iostream&gt;\n#include &lt;string&gt;\n#include &lt;algorithm&gt;\nusing
    namespace std;\nbool is_sjis(unsigned char c) {\n    return ((0x81 &lt;= c) &amp;&amp;
    (c &lt;= 0x9F)) || ((0xE0 &lt;= c) &amp;&amp; (c &lt;= 0xEF));\n}\nstring reverse_string(const
    string &amp;_s) {\n\tstring s(_s.rbegin(), _s.rend());\n\tfor (string::reverse_iterator
    ite = s.rbegin(); ite != s.rend(); ++ite) {\n\t\tif (is_sjis(*ite)) {\n\t\t\titer_swap(ite,
    ite + 1);\n\t\t\t++ite;\n\t\t}\n\t}\n\treturn s;\n}\nint main() {\n\tcout &lt;&lt;
    reverse_string(\"Hello\") &lt;&lt; endl;\n\tcout &lt;&lt; reverse_string(\"こんにちは\")
    &lt;&lt; endl;\n\tcout &lt;&lt; reverse_string(\"濁点(だくてん)\") &lt;&lt; endl;\n\treturn
    0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3071'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3071
  :user_name: 匿名
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/4/
  :language: Perl
  :time: 2007/09/18 13:16 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">utf8でやるとバグらないっぽです。</pre>\n\t"
  :code: |
    use Encode;
    use utf8;

    sub reverse_string {
      return encode('utf8',scalar reverse $_[0]);
    }

    print reverse_string("こんにちは");
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3635'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3635
  :user_name: 匿名
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/4/
  :language: awk
  :time: 2007/10/31 14:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">split が文字列を分解するのは gawk に限られると思われ。。。\r\n\r\ngawk
    -f p3414.awk -v string=\"split string array fieldsep\"\r\npesdleif yarra gnirts
    tilps\r\n\r\nスクリプト中の変数 string への値の受け渡しはgawk コマンドの -v オプションで</pre>\n\t"
  :code: |
    BEGIN {
            n = split(string, a, "")
            for (i = n; i &gt;= 1; i--) printf "%s", a[i]
            print "\n"
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3714'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3714
  :user_name: naranja
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/448/
  :language: D
  :time: 2007/11/05 15:09 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">UTF-8 を想定しています。</pre>\n\t"
  :code: |
    string reverseString(string s){
        return s.dup.reverse;
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3769'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3769
  :user_name: fujidig
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/507/
  :language: 
  :time: 2007/11/09 03:38 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n\t"
  :code: |2
        call reverse_string "Hello";
        message $$return;
        call reverse_string "こんにちは";
        message $$return;
        call reverse_string "濁点(だくてん)";
        message $$return;
        endmacro;

    reverse_string:
        $$result = "";
        while( $$1 != "" ) {
            $$char = unichar( unicode( $$1 ) );
            $$result = $$char + $$result;
            $$1 = rightstr( $$1, strlen( $$1 ) - strlen( $$char ) );
        }
        return $$result;
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3844'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3844
  :user_name: faultier
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/545/
  :language: Objective
  :time: 2007/11/11 11:46 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">入力Shift-JISってことなんでC文字列にしてみた。\r\nC文字列のまま処理してもいいけどそれだとまるっきりCのコードなので、\r\n一度NSStringに変換後処理して最後にまたC文字列に戻すという…無駄ですね。\r\n無駄でした。\r\n\r\nこういうとこはCで書くか、\r\n最初に全部NSStringにしちゃってプログラム中は一貫してNSStringで処理するか、\r\nどっちかかな。</pre>\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n\nconst char * reverse_string(const
    char * cString, NSStringEncoding encoding)\n{\n    NSString* aString = [NSString
    stringWithCString:cString encoding:encoding];\n    NSMutableString* reversedString
    = [NSMutableString string];\n    int index;\n    for (index = [aString length]
    - 1; index &gt;= 0; index--) {\n        [reversedString appendString:[aString
    substringWithRange:NSMakeRange(index, 1)]];\n    }\n    return [reversedString
    cStringUsingEncoding:encoding];\n}\n\nint main(int argc, const char *argv) {\n
    \   NSAutoreleasePool* pool = [NSAutoreleasePool new];\n      \n    const char
    * ss[3];\n    ss[0] = [@\"Hello\" cStringUsingEncoding:NSShiftJISStringEncoding];\n
    \   ss[1] = [@\"こんにちは\" cStringUsingEncoding:NSShiftJISStringEncoding];\n    ss[2]
    = [@\"濁点(だくてん)\" cStringUsingEncoding:NSShiftJISStringEncoding];\n\n    NSLog(@\"%s\",
    reverse_string(ss[0], NSShiftJISStringEncoding));\n    NSLog(@\"%s\", reverse_string(ss[1],
    NSShiftJISStringEncoding));\n    NSLog(@\"%s\", reverse_string(ss[2], NSShiftJISStringEncoding));\n\n
    \   [pool release];\n    return 0;\n}\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '3845'
  :parent_id: '58'
  :url: http://ja.doukaku.org/comment/3845
  :user_name: faultier
  :user_url: /web/20081202202039/http://ja.doukaku.org/user/545/
  :language: Objective
  :time: 2007/11/11 11:49 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">こっちはNSStringに反転メソッドを追加したもの。\r\nあと、再帰にしてみた。</pre>\n\t"
  :code: "#import &lt;Foundation/Foundation.h&gt;\n\n@interface NSString (Reverse)\n-
    (NSString *)reversedString;\n@end\n\n@implementation NSString (Reverse)\n- (NSString
    *)reversedString\n{\n    if ([self length] &gt; 1)\n    {\n        return [[[self
    substringFromIndex:1] reversedString] stringByAppendingString:[self substringToIndex:1]];\n
    \   }\n    else\n    {\n        return self;\n    }\n}\n@end\n\nint main(int argc,
    const char *argv) {\n    NSAutoreleasePool* \n\n\n\n\n<!--\n     FILE ARCHIVED
    ON 20:20:39 Dec 2, 2008 AND RETRIEVED FROM THE\n     INTERNET ARCHIVE ON 13:43:00
    Nov 16, 2013.\n     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET
    ARCHIVE.\n\n     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.\n
    \    SECTION 108(a)(3)).\n-->"
  :tags: []
  :references:
    :url: 
    :title: 
