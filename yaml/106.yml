---
:id: '106'
:title: 最大公約数（除算禁止）
:comments:
- :id: '4590'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4590
  :user_name: '186'
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/03 13:07 GMT
  :vote_count: '8'
  :vote_score: '0'
  :body: "\r\n\t  <div class=\"section\">\n<p>あなたが使っている言語で除算と剰余が使えなくなりました。\r</p>\n<p>以下の条件のもと最大公約数を求めるプログラムを書いてください。\r</p>\n<p>\r</p>\n<h4>条件\r</h4>\n<ul>\n<li>\n除算および剰余の使用禁止\r\n</li>\n<li>\n加算や乗算から除算・剰余を単純に定義することも禁止とする\r\n</li>\n<li>\nただし,
    ビットシフトが面倒な場合には引数を2で割った商を返す関数を実装しても構わない\r\n</li>\n<li>\n多倍長演算をサポートすること（各言語のライブラリ状況を見たいので）\r\n</li>\n<li>\n引数は2つの正整数と仮定して構わない\r\n</li>\n<li>F_1=1,
    F_2=1のフィボナッチ数列で2000番目と1999番目の最大公約数を求めたときのループ回数を教えてください</li>\n</ul>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4841'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4841
  :user_name: '186'
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/16 07:18 GMT
  :vote_count: '6'
  :vote_score: '-2'
  :body: "\r\n\t  <div class=\"section\">\n<p>出題者です.\r</p>\n<p>条件を緩めることにしました. 以下の2条件のうちお好きな方を選んでください.\r</p>\n<p>\r</p>\n<h4>条件(易)\r</h4>\n<ol>\n<li>\n組み込み及びライブラリにあるgcdは使用禁止\r\n</li>\n<li>\n除算および剰余の使用禁止\r\n</li>\n<li>\n加算や乗算から除算・剰余を単純に定義することも禁止とする\r\n</li>\n<li>\nただし,
    ビットシフトが面倒な場合には引数を2で割った商を返す関数を実装しても構わない \r\n</li>\n<li>引数は1-10000の間の二つの整数として構わない\r</li>\n</ol>\n<p>\r</p>\n<h4>条件(難)\r</h4>\n<ol>\n<li>\n組み込み及びライブラリにあるgcdは使用禁止\r\n</li>\n<li>\n除算および剰余の使用禁止\r\n</li>\n<li>\n加算や乗算から除算・剰余を単純に定義することも禁止とする\r\n</li>\n<li>\nただし,
    ビットシフトが面倒な場合には引数を2で割った商を返す関数を実装しても構わない \r\n</li>\n<li>引数は二つの正整数として構わない (多倍長演算もあるとなお良い)\r</li>\n</ol>\n<p>\r</p>\n<h4>補足\r</h4>\n<ul>\n<li>\n(fib
    2000) =&gt; 4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125\r\n</li>\n<li>(fib
    1999) =&gt; 2611005926183501768338670946829097324475555189114843467397273230483773870037923307730410719313972291638157639230613843870597997481070930648667960025707364078851859017098672504986584144842548768373271309551281830431960537091677315014266625027123872238011234749984205478230617988978500613170516952885123444971471854671812569739975450866912490650853945622130138277040986146312325044424769652148982077548213909414076005501</li>\n</ul>\n</div>\r\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4783'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4783
  :user_name: shiro
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/41/
  :language: Scheme
  :time: 2007/12/12 23:46 GMT
  :vote_count: '3'
  :vote_score: '3'
  :body: "\n\t  引き算のみで。\r<br><br>Z80マシン語で遊んでいたころ、除算を使わないでもこれでgcdが計算できることに気づいて大発見をしたような気分になりました。後でよく考えたらユークリッドの互除法を非効率にやっているだけでした。\r<br><br>隣り合うフィボナッチ数の場合は実は減算法でもあまり効率が悪くなりません。常に差がひとつ前のフィボナッチ数になるわけですから。\r<br><br> gosh&gt; (time (gcd-nodiv (fib 2000) (fib 1999)))\r<br> ;(time (gcd-nodiv (fib 2000) (fib 1999)))\r<br> ; real   0.002\r<br> ; user   0.000\r<br> ; sys    0.000\r<br> 1\r<br><br>ループ回数は互除法でやった場合と同じになります。\r<br><br> gosh&gt; (gcd-nodiv/cnt (fib 2000) (fib 1999) 1)\r<br> 1\r<br> 1998\r<br><br>実はこの引数の場合は、組み込みのgcd (互除法使用) の方が遅かったりします。bignumの除算が重いんじゃないかな。\r<br><br> gosh&gt; (time (gcd (fib 2000) (fib 1999)))\r<br> ;(time (gcd (fib 2000) (fib 1999)))\r<br> ; real   0.014\r<br> ; user   0.010\r<br> ; sys    0.000\r<br> 1\r<br><br><br>"
  :code: |
    (define (gcd-nodiv m n)
      (cond [(= n m) n]
            [(or (= m 1) (= n 1)) 1]
            [(&gt; m n) (gcd-nodiv n (- m n))]
            [else    (gcd-nodiv m (- n m))]))

    ;;
    ;; 以下は測定用
    ;;
    ;;ループ回数のカウント
    (define (gcd-nodiv/cnt m n cnt)
      (cond [(= n m) (values n cnt)]
            [(or (= m 1) (= n 1)) (values 1 cnt)]
            [(&gt; m n) (gcd-nodiv/cnt n (- m n) (+ cnt 1))]
            [else    (gcd-nodiv/cnt m (- n m) (+ cnt 1))]))

    ;;メモワイズ版fib
    (define fib
      (let1 memo (make-hash-table 'eqv?)
        (lambda (n)
          (cond [(&lt;= n 2) 1]
                [(hash-table-get memo n #f)]
                [else (let1 val (+ (fib (- n 1)) (fib (- n 2)))
                        (hash-table-put! memo n val)
                        val)]))))
  :tags:
  - gauche
  - すばらしい洞察
  :references:
    :url: 
    :title: 
- :id: '4784'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4784
  :user_name: shiro
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/12/12 23:59 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">ちょっと補足。\r\n\r\n&gt; ループ回数は互除法でやった場合と同じになります。
    \r\n\r\nというのはあくまで引数が隣り合うフィボナッチ数である場合の話です。\r\n</pre>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4785'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4785
  :user_name: tsuwabuki
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/479/
  :language: Other
  :time: 2007/12/13 00:21 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>haskellにはもともと多倍長でも使えるgcdが用意されています</p>\n\n\t"
  :code: |
    mygcd = gcd
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4786'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4786
  :user_name: '186'
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/13 01:33 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>出題者です.</p>\n<p>&gt;隣り合うフィボナッチ数の場合は実は減算法でもあまり効率が悪くなりません。常に差がひとつ前のフィボナッチ数になるわけですから。</p>\n<p>全くもってその通りです.\n1024bitと512bitの素数とかでやった方が良かったようでorz</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4787'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4787
  :user_name: shiro
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/41/
  :language: 
  :time: 2007/12/13 02:23 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  <p>この回答が破綻するのは一方が他方よりはるかに大きな場合ですね。m &gt;&gt; n で m = q*n + rのとき n
    &gt;&gt; r になるような組み合わせを続けてゆくと減算のみによる方法では悲惨なことに。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4788'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4788
  :user_name: にしお
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/1/
  :language: Python
  :time: 2007/12/13 03:27 GMT
  :vote_count: '2'
  :vote_score: '2'
  :body: "\n\t  <p>減算を繰り返して割り算の代わりにする方法だと差が大きいときに問題になる、ということで <strong>「文字列の長さをみて小さい側を10**n倍する」</strong>
    という荒技を使ってみました。</p>\n<p># Screencast-o-maticで撮りながら作ったのにアップロード中にブラウザが落ちて消滅…orz</p>\n\n\t"
  :code: |
    def gcd(x, y):
        if x == y: return x
        if x &lt; y: y, x = x, y

        lx = len(str(x))
        ly = len(str(y))
        diff = lx - ly

        z = abs(y * 10 ** diff - x)
        z2 = abs(y * 10 ** (diff + 1) - x)
        z = min(z, z2)
        if diff &gt; 0:
            z2 = abs(y * 10 ** (diff - 1) - x)
            z = min(z, z2)

        # zはxとyと公約数を共有する
        if z &lt; y:
            return gcd(y, z)
        return gcd(z, y)
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4789'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4789
  :user_name: にしお
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/12/13 03:35 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>なんでscreencastを取ろうと思ったのかに関しての参考文献</p>\n<blockquote>\n&gt;例えばどう書く？orgの問題を解くまでのコーディングとかが公開されたら面白そう。</blockquote>\n<p><a
    class=\"reference\" href=\"/web/20081204140744/http://d.hatena.ne.jp/higepon/20071108/1194495170\">http://d.hatena.ne.jp/higepon/20071108/1194495170</a></p>\n<blockquote>\n&gt;ブラウザだけでスクリーンキャストが手軽に作成できる『Screencast-O-Matic』
    | 100SHIKI.COM</blockquote>\n<p><a class=\"reference\" href=\"/web/20081204140744/http://www.100shiki.com/archives/2007/08/screencastomatic.html\">http://www.100shiki.com/archives/2007/08/screencastomatic.html</a></p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4790'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4790
  :user_name: SiroKuro
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/540/
  :language: C
  :time: 2007/12/13 03:51 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  最初に断っておきますが、.NET Framework 2.0 に多倍長整数クラスは無いです。というよりまだリリースされてません。\r<br>反則技で Visual J# のライブラリから java.math.BigInteger を使いました。反則ついでに BigInteger#gcd を使用…… orz\r<br><br>ちなみに Microsoft.Scripting.Math.BigInteger みたいなのもあります。IronPython とかから使う用で、C# からも使えます。\n\t"
  :code: |
    using System;
    using java.math;
    static class Program {
        static void Main(string[] args) {
            BigInteger fib1999 = new BigInteger("2611005926183501768338670946829097324475555189114843467397273230483773870037923307730410719313972291638157639230613843870597997481070930648667960025707364078851859017098672504986584144842548768373271309551281830431960537091677315014266625027123872238011234749984205478230617988978500613170516952885123444971471854671812569739975450866912490650853945622130138277040986146312325044424769652148982077548213909414076005501");
            BigInteger fib2000 = new BigInteger("4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125");
            Console.WriteLine("gcd({0}, {1}) = {2}", fib1999, fib2000, fib1999.gcd(fib2000));
        }
    }
  :tags:
  - J#
  :references:
    :url: 
    :title: 
- :id: '4791'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4791
  :user_name: nido
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/589/
  :language: Ruby
  :time: 2007/12/13 03:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  \n<p>２数の差が大きい時もわりと早く収束するかな。\n   結果[1, 3994]\n</p>\n\n\n\n\t"
  :code: "require \"mathn\"\n\nclass Fib\n  def initialize\n    @fib_a=[1,1]\n  end\n
    \ def [](n)\n    (@fib_a.size..n).each{|i| @fib_a&lt;&lt;=@fib_a[i-2]+@fib_a[i-1]}
    \ \n    @fib_a[n-1]\n  end\nend\n\ndef gcd(n,m)\n  c=0\n  until(n==m)\n    n,m=m,n
    if n&lt;m\n    return [1,c] if m==1\n    m1=m\n    while(m1&lt;n)\n      m1&lt;&lt;=1\n
    \     c+=1       \n    end\n    m1&gt;&gt;=1\n    n-=m1\n    c+=1\n  end\n  [n,c]\nend\n\nfib=Fib.new\np
    gcd(fib[2000],fib[1999])\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4792'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4792
  :user_name: horiuchi
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/570/
  :language: Java
  :time: 2007/12/13 04:08 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>既に #4790でも出てますが、Javaだと任意精度の整数値に対して使えるgcdがあるのでそれを使えます。</p>\n<p>#4790
    と同じなのもアレなので、フィボナッチ数列の計算処理もしてみました。</p>\n\n\t"
  :code: |
    import java.math.BigInteger;
    import java.util.HashMap;
    import java.util.Map;

    public class Sample106 {
        private final Map&lt;Integer, BigInteger&gt; fibMemo_ = new HashMap&lt;Integer, BigInteger&gt;();

        public BigInteger getFibValue(int index) {
            if (index == 1 || index == 2) return BigInteger.ONE;
            BigInteger fib = fibMemo_.get(index);
            if (fib == null) {
                fib = getFibValue(index - 2).add(getFibValue(index - 1));
                fibMemo_.put(index, fib);
            }
            return fib;
        }

        public static void main(String[] args) {
            Sample106 instance = new Sample106();
            BigInteger fib1999 = instance.getFibValue(1999);
            BigInteger fib2000 = instance.getFibValue(2000);
            System.out.println(fib2000.gcd(fib1999));
        }
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4793'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4793
  :user_name: kozima
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/164/
  :language: Common
  :time: 2007/12/13 04:12 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <p>gcd は組み込みで存在しますが、こんな式を基に書いてみました。呼び出し回数 1937 回。</p>\n<ul class=\"simple\">\n<li>gcd(x,x)
    = x</li>\n<li>gcd(2x+1, 2y+1) = gcd(2x+1, x-y)</li>\n<li>gcd(2x+1, 2y) = gcd(2x+1,
    y)</li>\n<li>gcd(2x, 2y) = 2*gcd(x, y)</li>\n</ul>"
  :code: |
    (defun *gcd (x y &amp;optional (acc 1) (count 0))
      (incf count)
      (cond ((= x y)
             (values count (* acc x)))
            ((and (oddp x) (oddp y)) ; odd, odd
             (*gcd (min x y) (ash (abs (- x y)) -1) acc count))
            ((oddp x) ; odd, even
             (*gcd x (ash y -1) acc count))
            ((oddp y) ; even, odd
             (*gcd (ash x -1) y acc count))
            (t ; even, even
             (*gcd (ash x -1) (ash y -1) (ash acc 1) count))))

    (defun fib (x)
      (loop with l = '(1 1) for i from 2 to x
        do (push (+ (car l) (cadr l)) l)
        finally (return (car l))))

    (format t "~{Called ~D times, result is ~D~}"
            (multiple-value-list (*gcd (fib 2000) (fib 1999))))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4794'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4794
  :user_name: kozima
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2007/12/13 04:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>書き忘れ。この方法だと各ステップで引数の少なくとも片方が半分以下になるので、ループ回数は引数の桁数に関して線形です。</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4795'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4795
  :user_name: Y
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/428/
  :language: Mathematica
  :time: 2007/12/13 04:56 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>最初の条件は、このコードだけで言えばクリアしています。</p>\n<p>最後の条件への答えは、このコードだけで言えば0です。</p>\n<p>多言語クックブックにこういうお題を載せる意図がよくわかりません。</p>\n\n\t"
  :code: |
    GCD[Fibonacci@1999, Fibonacci@2000]
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4796'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4796
  :user_name: にしお
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/1/
  :language: 
  :time: 2007/12/13 05:22 GMT
  :vote_count: '4'
  :vote_score: '4'
  :body: "\n\t  <p>いいお題を思いついたらぜひご投稿ください(^o^)</p>\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4797'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4797
  :user_name: dankogai
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/26/
  :language: Perl
  :time: 2007/12/13 05:58 GMT
  :vote_count: '2'
  :vote_score: '0'
  :body: "\n\t  \n<p>回答は二種類。単純減算と正規表現利用バージョン。ただし後者の方はfib(2000)とかは出来ません。\n</p>\n<p>Greediest
    Cruftiest Dan\n</p>\n\n\n\n\t"
  :code: |
    #!/usr/local/bin/perl
    use strict;
    use warnings;
    use bignum;
    use Memoize;

    no warnings 'recursion';

    sub fib{
        my $n = shift;
        return 1 if $n &lt;= 2;
        fib($n-2)+fib($n-1);
    }
    memoize 'fib';

    sub gcd{
        my ($m, $n) = @_;
        return gcd($n, $m) if $m &lt; $n;
        my $r = $m % $n;
        return $n unless $r;
        gcd($n, $r);
    }

    sub gcd_nodiv{
        my ($m, $n) = @_;
        return gcd($n, $m) if $m &lt; $n;
        $m -= $n while $m &gt; $n;
        return $n unless $m;
        gcd($n, $m);

    }

    sub gcd_regexp{
        my ($m, $n) = @_;
        return gcd($n, $m) if $m &lt; $n;
        my $sm = 1 x $m;
        my $sn = 1 x $n;
        $sm =~ s/^$sn//g;
        return $n unless $sm;
        gcd($n, length $sm);
    }

    sub say { local $\="\n"; print @_ };
    say gcd_regexp(fib(25), fib(24));
    say gcd_nodiv(fib(1999),fib(2000));
  :tags:
  - 正規表現マジック
  :references:
    :url: 
    :title: 
- :id: '4799'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4799
  :user_name: sumim
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/88/
  :language: Smalltalk
  :time: 2007/12/13 10:55 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  Squeak Smalltalk で。\r<br><br>通常は無限倍精度整数に対応した #gcd: を使います。ちなみに、無限倍精度向けの Integer&gt;&gt;#gcd: および SmallInteger&gt;&gt;#gcd: に細工（グローバル変数 COUNT を用意して各々のループ内に COUNT := COUNT + 1 を挿入）をしてカウントをしてみたところ、fib1999 gcd: fib2000 では 1127 でした。\n\t"
  :code: |
    | gcdNoDiv gcdNoDivCount fibMemo fib fib1999 fib2000 |
    gcdNoDiv := [:pair |
        [(pair sort; first) = pair second or: [pair last = 1]]
            whileFalse: [pair at: 2 incrementBy: pair first negated].
        pair last].

    gcdNoDivCount := [:pair |
        | count |
        count := 0.
        [(pair sort; first) = pair second or: [pair last = 1]] whileFalse: [
            count := count + 1.
            pair at: 2 incrementBy: pair first negated].
        count].

    fibMemo := Dictionary new.
    fib := [:nth |
        fibMemo at: nth ifAbsentPut: [
            nth &lt; 3 ifTrue: [1] ifFalse: [
                (fib copy fixTemps value: nth-1) + (fib copy fixTemps value: nth-2)]]].
    fib1999 := fib copy fixTemps value: 1999.
    fib2000 := fib copy fixTemps value: 2000.

    fib1999 gcd: fib2000.   "=&gt; 1 "  " 組み込みの GCD "
    gcdNoDiv value: {fib1999. fib2000}.   "=&gt; 1 "
    gcdNoDivCount value: {fib1999. fib2000}.   "=&gt; 1998 "
  :tags:
  - Squeak_Smalltalk
  :references:
    :url: 
    :title: 
- :id: '4801'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4801
  :user_name: kozima
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/164/
  :language: 
  :time: 2007/12/13 13:54 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>試しに動かしてみたら gcd(10, 1) でスタックオーバーフローしてしまいました。再帰呼び出し時に z==0 だと無限ループするみたいです。</p>\n\n\t"
  :code: ''
  :tags:
  - すばらしい洞察
  :references:
    :url: 
    :title: 
- :id: '4802'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4802
  :user_name: sumim
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/88/
  :language: 
  :time: 2007/12/13 13:57 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  組み込みの #gcd: での回数は 2889 に訂正します。改めて見てみたら、カウンタをループの最も内側に仕込めていませんでした。orz\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4803'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4803
  :user_name: kkobayashi
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/232/
  :language: R
  :time: 2007/12/13 15:34 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">数値解析系はこういうお題だと肩身が狭いですねｗ\r\nお題や回答に対して色々なご意見があるのは当然で、\r\nそれが（ある程度）定量的に判断できる+/-評価システムは\r\nうまく出来てるんだなぁと思いました。\r\n</pre>\n\t"
  :code: |
    library(gmp)
    gcd(fibnum(1999), fibnum(2000))
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4841'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4841
  :user_name: '186'
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/16 07:18 GMT
  :vote_count: '6'
  :vote_score: '-2'
  :body: "\n\t  <div class=\"section\">\n<p>出題者です.\r</p>\n<p>条件を緩めることにしました. 以下の2条件のうちお好きな方を選んでください.\r</p>\n<p>\r</p>\n<h4>条件(易)\r</h4>\n<ol>\n<li>\n組み込み及びライブラリにあるgcdは使用禁止\r\n</li>\n<li>\n除算および剰余の使用禁止\r\n</li>\n<li>\n加算や乗算から除算・剰余を単純に定義することも禁止とする\r\n</li>\n<li>\nただし,
    ビットシフトが面倒な場合には引数を2で割った商を返す関数を実装しても構わない \r\n</li>\n<li>引数は1-10000の間の二つの整数として構わない\r</li>\n</ol>\n<p>\r</p>\n<h4>条件(難)\r</h4>\n<ol>\n<li>\n組み込み及びライブラリにあるgcdは使用禁止\r\n</li>\n<li>\n除算および剰余の使用禁止\r\n</li>\n<li>\n加算や乗算から除算・剰余を単純に定義することも禁止とする\r\n</li>\n<li>\nただし,
    ビットシフトが面倒な場合には引数を2で割った商を返す関数を実装しても構わない \r\n</li>\n<li>引数は二つの正整数として構わない (多倍長演算もあるとなお良い)\r</li>\n</ol>\n<p>\r</p>\n<h4>補足\r</h4>\n<ul>\n<li>\n(fib
    2000) =&gt; 4224696333392304878706725602341482782579852840250681098010280137314308584370130707224123599639141511088446087538909603607640194711643596029271983312598737326253555802606991585915229492453904998722256795316982874482472992263901833716778060607011615497886719879858311468870876264597369086722884023654422295243347964480139515349562972087652656069529806499841977448720155612802665404554171717881930324025204312082516817125\r\n</li>\n<li>(fib
    1999) =&gt; 2611005926183501768338670946829097324475555189114843467397273230483773870037923307730410719313972291638157639230613843870597997481070930648667960025707364078851859017098672504986584144842548768373271309551281830431960537091677315014266625027123872238011234749984205478230617988978500613170516952885123444971471854671812569739975450866912490650853945622130138277040986146312325044424769652148982077548213909414076005501</li>\n</ul>\n</div>\n\t"
  :code: ''
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4881'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4881
  :user_name: nobsun
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/98/
  :language: Haskell
  :time: 2007/12/19 04:40 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">kozima さんと同じ Josef Stein のアルゴリズム．\r\nついでに，fibも同様の2進計算で高速計算．\r\nHaskellにとっては呼び出しカウントのほうが面倒．\r\n(とりあえずナイーブにやっちゃった．)\r\n呼出回数は1936でした．\r\n\r\n*Main&gt;
    uncurry gcd' (fib 1999) 0\r\n(1,1936)\r\n</pre>\n\t"
  :code: "import Prelude hiding (gcd)\n\nfib 0 = (0,1)\nfib n | even n = let (a,b)
    = fib (n-1)         in (b, a+b)             \n      | odd  n = let (a,b) = fib
    (halve (n-1)) in (b*b+a*a, b*b+2*a*b)       \n\nhalve = (`div` 2)\n\ngcd 1 _ =
    1 \ngcd a b | a == b = a\n        | even a = if even b then 2*gcd (halve a) (halve
    b)           else gcd b (halve a)\n        | odd  a = if odd  b then gcd (min
    a b) (abs (halve (a - b))) else gcd a (halve b)\n        \n\ngcd' 1 _ c = (1,c+1)\ngcd'
    a b c | a == b = (a,c+1)\n           | even a = if even b then fstapp (2*) (gcd'
    (halve a) (halve b) (c+1))\n                      else gcd' a (halve b) (c+1)\n
    \          | odd  a = if odd  b then gcd' (min a b) (abs (halve (a - b))) (c+1)\n
    \                     else gcd' a (halve b) (c+1)\n\nfstapp f (x,y) = (f x,y)\n"
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '4953'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/4953
  :user_name: yuin
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/82/
  :language: Scala
  :time: 2007/12/25 01:03 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <p>shiroさんと同じ方法で。</p>\n\n\t"
  :code: |
    import java.math.BigInteger
    import java.math.BigInteger.ONE

    implicit def int2big(n:int) = new BigInteger(n.toString)
    def gcd(m:BigInteger, n:BigInteger):BigInteger = m.compareTo(n) match {
      case 0 =&gt; n
      case x if m == ONE || n == ONE =&gt; ONE
      case 1 =&gt; gcd(n, m.subtract(n))
      case x =&gt; gcd(m, n.subtract(m))
    }
  :tags: []
  :references:
    :url: 
    :title: 
- :id: '5016'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/5016
  :user_name: '186'
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/352/
  :language: 
  :time: 2007/12/27 15:44 GMT
  :vote_count: '1'
  :vote_score: '1'
  :body: "\n\t  \n<p>出題者です.\n   『The Art of Computer Programming』や, 参考ページに挙げたサーベイに歴史が載っていました.\n</p>\n<p>二進互除法を考えたのは,
    SteinとSilver and Terzianです.\n   Knuth先生曰く一番古いのは以下だそうです.\n</p>\n<p>前漢の中国の数学書『<a
    href=\"/web/20081204140744/http://chinese.dsturgeon.net/text.pl?node=51058&amp;if=gb\">九章算術</a>』の第1章「<a
    href=\"/web/20081204140744/http://chinese.dsturgeon.net/text.pl?node=51060&amp;if=gb\">方田</a>」の第6問より引用.\n</p>\n<p>&gt;
    (6) 方田: 又有九十一分之四十九。問約之得幾何？\n</p>\n<p>&gt; 答曰：十三分之七。\n</p>\n<p>&gt; 約分術曰：可半者半之，不可半者，副置分母子之數，以少減多，更相減損，求其等也。以等數約之。\n</p>\n\n\n\n\t"
  :code: ''
  :tags: []
  :references:
    :url: /web/20081204140744/http://wwwmaths.anu.edu.au/~brent/pub/pub183.html
    :title: R. P. Brent “Twenty years' analysis of the binary Euclidean algorithm”
- :id: '5899'
  :parent_id: '106'
  :url: http://ja.doukaku.org/comment/5899
  :user_name: silverwire
  :user_url: /web/20081204140744/http://ja.doukaku.org/user/646/
  :language: Batchfile
  :time: 2008/02/29 18:01 GMT
  :vote_count: '0'
  :vote_score: '0'
  :body: "\n\t  <pre class=\"compact\">バッチは多倍長演算をサポートしていないため、図らずも #4841の「条件(易)」を選択。\r\n除算・余剰については、「除算・余剰を使わずに閏年」で回答したものを流用しました。\r\n\r\n
    \ e.g.\r\n    C:&gt;gcd.bat 1975 1225\r\n    25\r\n\r\n遅延環境変数展開を利用しているので、Windows
    NTでは動作しません。Windows XPで動作\r\nを確認。</pre>\n\t"
  :code: |
    :: gcd.bat
    @echo off
      setlocal
        set n=0

        echo %1%2|findstr /r "[^0-9]" &gt;NUL 2&gt;&amp;1
        if %ERRORLEVEL% equ 0 (echo %~n0 [NUMBER] [NUMBER]) &amp; goto :EOF

        call :gcd %1 %2 n
      endlocal &amp; echo %n%
    goto :EOF

    :gcd
      setlocal enabledelayedexpansion
        set a=%1
        set b=%2
        set m=0
        set q=0

        if %a% lss %b% (
          set /a a=%b%-%a%
          set /a b-=!a!
          set /a a+=!b!
        )

        :loop_gcd
          call :mod %a% %b% m
          if %m% equ 0 (endlocal &amp; set %3=%b%) &amp; goto :EOF
          :: 剰余を除数の半分未満にして演算効率を向上
          call :div %b% 2 q
          if %q% lss %m% set /a m=%b%-%m%
          set a=%b%
          set b=%m%
        goto loop_gcd
      endlocal
    goto :EOF

    :mod
      setlocal
        set m=0
        set q=0

        call :div %1 %2 q

        set /a m=%2*%q%
      endlocal &amp; set /a %3=%1-%m%
    goto :EOF

    :div
      setlocal enabledelayedexpansion
        set i=0
        set m=%1
        set m_=0
        set n=%2
        set n_=0
        set q=0

        if %n% gtr %m% (endlocal &amp; set %3=%q%) &amp; goto :EOF

        call :msb %m% m_
        call :msb %n% n_
        set /a i=%m_%-%n_%

        :loop_div
          if %i% lss 0 (endlocal &amp; set %3=%q%) &amp; goto :EOF
          set /a "q&lt;&lt;=1"
          set /a "m_=%m%&gt;&gt;%i%"
          if %m_% geq %n% (
            set /a "n_=%n%&lt;&lt;%i%"
            set /a m-=!n_!
            set /a q+=1
          )
          set /a i-=1
        goto loop_div
      endlocal
    goto :EOF

    :: 最上位ビットを取得(most significant bit)
    :msb
      setlocal
        set i=%1
        set n=0

        :loop_msb
          set /a "i&gt;&gt;=1"
          set /a n+=1
        if %i% neq 0 goto loop_msb
      endlocal &amp; set %2=%n%
    goto :EOF
  :tags: []
  :references:
    :url: 
    :title: 
